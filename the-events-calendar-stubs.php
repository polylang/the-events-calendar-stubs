<?php

namespace {
    /*
    Copyright (c) 2008 Sebastián Grignoli
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    1. Redistributions of source code must retain the above copyright
       notice, this list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.
    3. Neither the name of copyright holders nor the names of its
       contributors may be used to endorse or promote products derived
       from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
    TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL COPYRIGHT HOLDERS OR CONTRIBUTORS
    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    POSSIBILITY OF SUCH DAMAGE.
    */
    /**
     * @author   "Sebastián Grignoli" <grignoli@gmail.com>
     * @package  Encoding
     * @version  2.0
     * @link     https://github.com/neitanod/forceutf8
     * @example  https://github.com/neitanod/forceutf8
     * @license  Revised BSD
     */
    //namespace ForceUTF8;
    class ForceUTF8__Encoding
    {
        const ICONV_TRANSLIT = "TRANSLIT";
        const ICONV_IGNORE = "IGNORE";
        const WITHOUT_ICONV = "";
        protected static $win1252ToUtf8 = array(128 => "€", 130 => "‚", 131 => "ƒ", 132 => "„", 133 => "…", 134 => "†", 135 => "‡", 136 => "ˆ", 137 => "‰", 138 => "Š", 139 => "‹", 140 => "Œ", 142 => "Ž", 145 => "‘", 146 => "’", 147 => "“", 148 => "”", 149 => "•", 150 => "–", 151 => "—", 152 => "˜", 153 => "™", 154 => "š", 155 => "›", 156 => "œ", 158 => "ž", 159 => "Ÿ");
        protected static $brokenUtf8ToUtf8 = array("" => "€", "" => "‚", "" => "ƒ", "" => "„", "" => "…", "" => "†", "" => "‡", "" => "ˆ", "" => "‰", "" => "Š", "" => "‹", "" => "Œ", "" => "Ž", "" => "‘", "" => "’", "" => "“", "" => "”", "" => "•", "" => "–", "" => "—", "" => "˜", "" => "™", "" => "š", "" => "›", "" => "œ", "" => "ž", "" => "Ÿ");
        protected static $utf8ToWin1252 = array("€" => "�", "‚" => "�", "ƒ" => "�", "„" => "�", "…" => "�", "†" => "�", "‡" => "�", "ˆ" => "�", "‰" => "�", "Š" => "�", "‹" => "�", "Œ" => "�", "Ž" => "�", "‘" => "�", "’" => "�", "“" => "�", "”" => "�", "•" => "�", "–" => "�", "—" => "�", "˜" => "�", "™" => "�", "š" => "�", "›" => "�", "œ" => "�", "ž" => "�", "Ÿ" => "�");
        /**
         * Function \ForceUTF8\Encoding::toUTF8
         *
         * This function leaves UTF8 characters alone, while converting almost all non-UTF8 to UTF8.
         *
         * It assumes that the encoding of the original string is either Windows-1252 or ISO 8859-1.
         *
         * It may fail to convert characters to UTF-8 if they fall into one of these scenarios:\
         *
         * 1) when any of these characters:   ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞß
         *    are followed by any of these:  ("group B")
         *                                    ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶•¸¹º»¼½¾¿
         * For example:   %ABREPRESENT%C9%BB. «REPRESENTÉ»
         * The "«" (%AB) character will be converted, but the "É" followed by "»" (%C9%BB)
         * is also a valid unicode character, and will be left unchanged.\
         *
         * 2) when any of these: àáâãäåæçèéêëìíîï  are followed by TWO chars from group B,
         * 3) when any of these: ðñòó  are followed by THREE chars from group B.
         *
         * @name toUTF8
         *
         * @param string $text  Any string.
         *
         * @return string  The same string, UTF8 encoded
         */
        static function toUTF8($text)
        {
        }
        static function toWin1252($text, $option = self::WITHOUT_ICONV)
        {
        }
        static function toISO8859($text)
        {
        }
        static function toLatin1($text)
        {
        }
        static function fixUTF8($text, $option = self::WITHOUT_ICONV)
        {
        }
        static function UTF8FixWin1252Chars($text)
        {
        }
        static function removeBOM($str = "")
        {
        }
        protected static function strlen($text)
        {
        }
        public static function normalizeEncoding($encodingLabel)
        {
        }
        public static function encode($encodingLabel, $text)
        {
        }
        protected static function utf8_decode($text, $option)
        {
        }
    }
    class TribeCommonLibraries
    {
        private static $tribe_registered_plugins;
        /**
         * Enforce Singleton Pattern
         */
        private static $instance;
        public static function getInstance()
        {
        }
        private function __construct()
        {
        }
        /**
         * Register a plugin / helper class
         *
         * @param string $slug    - slug specific to the helper class / plugin
         * @param string $version - version of the helper class / plugin
         * @param string $path    - absolute path of the helper class / plugin file
         */
        public static function register($slug, $version, $path)
        {
        }
        /**
         * Activate all plugins.
         */
        public function activate_plugins()
        {
        }
    }
    class Tribe__Events__Admin_List
    {
        protected static $start_col_active = \true;
        protected static $end_col_active = \true;
        protected static $start_col_first = \true;
        /**
         * The init function for this class, adds actions and filters.
         *
         */
        public static function init()
        {
        }
        /**
         * Fields filter for standard wordpress templates.  Adds the start and end date to queries in the
         * events category
         *
         * @param string   $fields The current fields query part.
         * @param WP_Query $query
         *
         * @return string The modified form.
         */
        public static function events_search_fields($fields, $query)
        {
        }
        /**
         * Sets whether sorting will be ascending or descending based on input
         *
         * @param   WP_Query    $wp_query   Query for a library post type
         *
         * @return  string                  ASC/DESC prefixed with a single space
         */
        public static function get_sort_direction(\WP_Query $wp_query)
        {
        }
        /**
         * Defines custom logic for sorting events table by start/end date. No matter how user selects
         * what should be is sorted, always include date sorting in some fashion
         *
         * @param   Array       $clauses    SQL clauses for fetching posts
         * @param   WP_Query    $wp_query   A paginated query for items
         *
         * @return  Array                   Modified SQL clauses
         */
        public static function sort_by_event_date(array $clauses, \WP_Query $wp_query)
        {
        }
        /**
         * Defines custom logic for filtering events table by aggregator record.
         *
         * @param array<string> $clauses    SQL clauses for fetching posts.
         * @param WP_Query      $wp_query   A paginated query for items.
         *
         * @return array<string>            Modified SQL clauses.
         */
        public static function filter_by_aggregator_record(array $clauses, \WP_Query $wp_query)
        {
        }
        /**
         * Defines custom logic for sorting events table by category or tags
         *
         * @param   Array       $clauses    SQL clauses for fetching posts
         * @param   WP_Query    $wp_query   A paginated query for items
         *
         * @return  Array                   Modified SQL clauses
         */
        public static function sort_by_tax(array $clauses, \WP_Query $wp_query)
        {
        }
        /**
         * limit filter for admin queries
         *
         * @param          string limits clause
         * @param WP_Query $query
         *
         * @return string modified limits clause
         */
        public static function events_search_limits($limits, $query)
        {
        }
        /**
         * Add the proper column headers.
         *
         * @param array $columns The columns.
         *
         * @return array The modified column headers.
         */
        public static function column_headers($columns)
        {
        }
        /**
         * This will only be fired if Advanced Post Manger is active
         * Helps ensure dates show correctly if only one or the other of
         * start & end date columns is showing
         */
        public static function column_headers_check($columns)
        {
        }
        /**
         * Allows events to be sorted by start date/end date/category/tags
         *
         * @param array $columns The columns array.
         *
         * @return array The modified columns array.
         */
        public static function register_sortable_columns($columns)
        {
        }
        /**
         * Add the custom columns.
         *
         * @param string $column_id The custom column id.
         * @param int    $post_id   The post id for the data.
         *
         */
        public static function custom_columns($column_id, $post_id)
        {
        }
        /**
         * Update event counts.
         *
         * @param array $counts The counts array.
         *
         * @return array The modified counts array.
         */
        public static function update_event_counts($counts)
        {
        }
        /**
         * Taken from wp_count_posts.
         *
         * @return mixed The results.
         */
        private static function count_events()
        {
        }
    }
    /**
     * A JSON-LD class extended of the Abstract that lies on the Common Package
     * Used for generating a Venue/Place JSON-LD markup
     */
    class Tribe__Events__JSON_LD__Venue extends \Tribe__JSON_LD__Abstract
    {
        /**
         * Which type of element this actually is
         *
         * @see https://developers.google.com/structured-data/rich-snippets/
         * @var string
         */
        public $type = 'Place';
        /**
         * On PHP 5.2 the child class doesn't get spawned on the Parent one, so we don't have
         * access to that information on the other side unless we pass it around as a param
         * so we throw __CLASS__ to the parent::instance() method to be able to spawn new instance
         * of this class and save on the parent::$instances variable.
         *
         * @param  $name DONT USE THIS PARAM, it's here for Abstract compatibility
         * @return Tribe__Events__JSON_LD__Venue
         */
        public static function instance($name = \null)
        {
        }
        /**
         * Fetches the JSON-LD data for this type of object
         *
         * @param  int|WP_Post|null $post The post/venue
         * @param  array  $args
         * @return array
         */
        public function get_data($post = \null, $args = ['context' => \false])
        {
        }
        /**
         * Get a link to the event
         *
         * @since 4.5.10
         *
         * @param  int|WP_Post  $post The Post Object or ID
         *
         * @return false|string Link to the event or false
         */
        protected function get_link($post)
        {
        }
    }
    /**
     * A JSON-LD class extended of the Abstract that lies on the Common Package
     * Used for generating a Event JSON-LD markup
     */
    class Tribe__Events__JSON_LD__Event extends \Tribe__JSON_LD__Abstract
    {
        /**
         * Which type of element this actually is
         *
         * @see https://developers.google.com/structured-data/rich-snippets/
         * @var string
         */
        public $type = 'Event';
        /**
         * On PHP 5.2 the child class doesn't get spawned on the Parent one, so we don't have
         * access to that information on the other side unless we pass it around as a param
         * so we throw __CLASS__ to the parent::instance() method to be able to spawn new instance
         * of this class and save on the parent::$instances variable.
         *
         * @return Tribe__Events__JSON_LD__Event
         */
        public static function instance($name = \null)
        {
        }
        /**
         * Converts the start and end dates to the local timezone
         *
         * @param  string $date
         * @param  string $event_tz_string
         * @return string
         */
        private function get_localized_iso8601_string($date, $event_tz_string)
        {
        }
        /**
         * Fetches the JSON-LD data for this type of object
         *
         * @param  int|WP_Post|null $post The post/event
         * @param  array  $args
         *
         * @return array
         */
        public function get_data($posts = \null, $args = [])
        {
        }
        /**
         * Normalizes the price entry to make it compatible with JSON-LD guidelines.
         *
         * @param string|int $price
         *
         * @return string
         */
        protected function normalize_price($price)
        {
        }
        /**
         * Get a link to the event
         *
         * @since 4.5.10
         *
         * @param  int|WP_Post  $post The Post Object or ID
         *
         * @return false|string Link to the event or false
         */
        protected function get_link($post)
        {
        }
    }
    /**
     * A JSON-LD class extended of the Abstract that lies on the Common Package
     * Used for generating a Venue/Place JSON-LD markup
     */
    class Tribe__Events__JSON_LD__Organizer extends \Tribe__JSON_LD__Abstract
    {
        /**
         * Which type of element this actually is
         *
         * @see https://developers.google.com/structured-data/rich-snippets/
         * @var string
         */
        public $type = 'Person';
        /**
         * On PHP 5.2 the child class doesn't get spawned on the Parent one, so we don't have
         * access to that information on the other side unless we pass it around as a param
         * so we throw __CLASS__ to the parent::instance() method to be able to spawn new instance
         * of this class and save on the parent::$instances variable.
         *
         * @return Tribe__Events__JSON_LD__Organizer
         */
        public static function instance($name = \null)
        {
        }
        /**
         * Fetches the JSON-LD data for this type of object
         *
         * @param  int|WP_Post|null $post The post/organizer
         * @param  array  $args
         * @return array
         */
        public function get_data($post = \null, $args = ['context' => \false])
        {
        }
        /**
         * Get a link to the event
         *
         * @since 4.5.10
         *
         * @param  int|WP_Post  $post The Post Object or ID
         *
         * @return false|string Link to the event or false
         */
        protected function get_link($post)
        {
        }
    }
    /**
     * Class Tribe__Events__Linked_Posts__Base
     *
     * The base for each linked post managing class.
     *
     * @since TDB
     */
    abstract class Tribe__Events__Linked_Posts__Base
    {
        /**
         * @var string The post type managed by the linked post class.
         */
        protected $post_type = '';
        /**
         * @var string The prefix that will be used for the linked post custom fields.
         */
        protected $meta_prefix = '';
        /**
         * @var string The meta key relating a post of the type managed by the class to events.
         */
        protected $event_meta_key = '';
        /**
         * Returns an array of post fields that should be used to spot possible duplicates.
         *
         * @return array An array of post fields to matching strategy in the format
         *               [ <post_field> => [ 'match' => <strategy> ] ]
         *
         * @see   Tribe__Duplicate__Strategy_Factory for supported strategies
         *
         * @since TDB
         */
        protected abstract function get_duplicate_post_fields();
        /**
         * Returns an array of post custom fields that should be used to spot possible duplicates.
         *
         * @return array An array of post fields to matching strategy in the format
         *               [ <custom_field> => [ 'match' => <strategy> ] ]
         *
         * @see   Tribe__Duplicate__Strategy_Factory for supported strategies
         *
         * @since TDB
         */
        protected abstract function get_duplicate_custom_fields();
        /**
         * Finds posts of the type managed by the class that contain the search string.
         *
         * The method will search in the post and custom fields defined by the class.
         *
         * @param string $search
         *
         * @return array|bool An array of post IDs or `false` if nothing was found.
         *
         * @see   get_duplicate_post_fields()
         * @see   get_duplicate_custom_fields()
         *
         * @since TDB
         */
        public function find_like($search)
        {
        }
        /**
         * Returns posts linked to the specified event.
         *
         * @param int|WP_Post $event_id
         *
         * @return array An array of matching post IDs.
         *
         * @since 4.6
         */
        public function find_for_event($event_id)
        {
        }
        /**
         * Returns an array of posts that have events, past or future, linked to them.
         *
         * @param bool  $has_events          Whether to look for posts with linked events or not.
         * @param array $excluded_post_stati An array of post stati that should not be
         *                                   considered for the purpose of marking a post
         *                                   as "with events".
         *
         * @return array An array of matching post IDs.
         *
         * @since 4.6
         */
        public function find_with_events($has_events = \true, $excluded_post_stati = \null)
        {
        }
        /**
         * Finds posts of the type managed by the class that are related to upcoming events.
         *
         * @param bool              $only_with_upcoming
         * @param null|string|array $event_post_status Only fetch events with the defined post status or stati;
         *                                             will default to the post status set according to the current
         *                                             user capabilities if not provided.
         *
         * @return array|bool An array of post IDs or `false` if nothing was found.
         *
         * @since TDB
         */
        public function find_with_upcoming_events($only_with_upcoming = \true, $event_post_status = \null)
        {
        }
        /**
         * Prefixes a key with the correct meta key prefix if needed.
         *
         * @param string $key
         *
         * @return string
         *
         * @since TDB
         */
        protected function prefix_key($key)
        {
        }
        /**
         * Builds and returns a closure to lazily fetch an Event linked posts.
         *
         * @since 4.9.7
         *
         * @param int $event The event post ID or object.
         *
         * @return callable A closure that will fetch an Event linked posts; the default implementation will return a
         *                  closure returning an empty array.
         */
        public static function get_fetch_callback($event)
        {
        }
    }
    class Tribe__Events__Venue extends \Tribe__Events__Linked_Posts__Base
    {
        const POSTTYPE = 'tribe_venue';
        /**
         * Args for venue post type
         * @var array
         */
        public $post_type_args = ['public' => \false, 'rewrite' => ['slug' => 'venue', 'with_front' => \false], 'show_ui' => \true, 'show_in_menu' => 0, 'supports' => ['title', 'editor'], 'capability_type' => ['tribe_venue', 'tribe_venues'], 'map_meta_cap' => \true, 'exclude_from_search' => \true];
        /**
         * @var string
         */
        protected $meta_prefix = '_Venue';
        /**
         * @var string The meta key relating a post of the type managed by the class to events.
         */
        protected $event_meta_key = '_EventVenueID';
        /**
         * @var array A list of all the valid Venue keys, post fields and custom fields
         */
        public static $valid_venue_keys = ['Venue', 'Address', 'City', 'Province', 'State', 'StateProvince', 'Province', 'Zip', 'Phone'];
        /**
         * @var array A list of the valid meta keys for this linked post.
         */
        public static $meta_keys = ['Address', 'City', 'Province', 'State', 'StateProvince', 'Province', 'Zip', 'Phone'];
        /**
         * @var string
         */
        public $singular_venue_label;
        /**
         * @var string
         */
        public $plural_venue_label;
        /**
         * @var Tribe__Events__Venue
         */
        protected static $instance;
        /**
         * Returns a singleton of this class
         *
         * @return Tribe__Events__Venue
         */
        public static function instance()
        {
        }
        /**
         * Tribe__Events__Venue constructor.
         */
        public function __construct()
        {
        }
        /**
         * Registers the post type
         */
        public function register_post_type()
        {
        }
        /**
         * Filters the post type args for the venue post type
         *
         * @since 4.2
         *
         * @param array  $args      Array of linked post type arguments
         * @param string $post_type Linked post type
         *
         * @return array
         */
        public function filter_linked_post_type_args($args, $post_type)
        {
        }
        /**
         * Allow users to specify their own singular label for Venues
         * @return string
         */
        public function get_venue_label_singular()
        {
        }
        /**
         * Allow users to specify their own plural label for Venues
         *
         * @return string
         */
        public function get_venue_label_plural()
        {
        }
        /**
         * Allow users to specify their own lowercase singular label for Venues
         * @return string
         */
        public function get_venue_label_singular_lowercase()
        {
        }
        /**
         * Allow users to specify their own lowercase plural label for Venues
         *
         * @return string
         */
        public function get_venue_label_plural_lowercase()
        {
        }
        /**
         * Filters the linked post id field
         *
         * @since 4.2
         *
         * @param string $id_field  Field name of the field that will hold the ID
         * @param string $post_type Post type of linked post
         */
        public function linked_post_id_field_index($id_field, $post_type)
        {
        }
        /**
         * Filters the linked post name field
         *
         * @since 4.2
         *
         * @param string $name_field Field name of the field that will hold the name
         * @param string $post_type  Post type of linked post
         *
         * @return string
         */
        public function linked_post_name_field_index($name_field, $post_type)
        {
        }
        public function meta_box_title($title, $post_type)
        {
        }
        /**
         * Filters the index that contains the linked post type data during form submission
         *
         * @since 4.2
         *
         * @param string $container Container index that holds submitted data
         * @param string $post_type Post type of linked post
         *
         * @return string
         */
        public function linked_post_type_container($container, $post_type)
        {
        }
        /**
         * Saves the event venue information passed via an event
         *
         * @param int|null $id          ID of event venue
         * @param array    $data        The venue data.
         * @param string   $post_type   Venue Post Type
         * @param string   $post_status The intended post status.
         *
         * @return mixed
         */
        public function save($id, $data, $post_type, $post_status)
        {
        }
        /**
         * Saves venue meta
         *
         * @param int   $venue_id The venue ID.
         * @param array $data     The venue data.
         *
         */
        public function save_meta($venue_id, $data)
        {
        }
        /**
         * Creates a new venue
         *
         * @param array  $data             The venue data.
         * @param string $post_status      the intended post status.
         * @param bool   $avoid_duplicates Whether a check to avoid the insertion of a duplicate venue
         *                                 should be made (`true`) or not (`false`).
         *
         * @return int
         */
        public function create($data, $post_status = 'publish', $avoid_duplicates = \false)
        {
        }
        /**
         * Check to see if any venue data set
         *
         * @param array $data the venue data.
         *
         * @return bool If there is ANY venue data set, return true.
         */
        public function has_venue_data($data)
        {
        }
        /**
         * Updates an venue
         *
         * @param int   $venue_id The venue ID to update.
         * @param array $data     The venue data.
         *
         * @return int The updated venue post ID
         */
        public function update($venue_id, $data)
        {
        }
        /**
         * Deletes a venue
         *
         * @param int  $venue_id     The venue ID to delete.
         * @param bool $force_delete Whether or not to bypass the trash when deleting the venue (see wp_delete_post's
         *                           $force_delete param)
         *
         */
        public function delete($venue_id, $force_delete = \false)
        {
        }
        /**
         * Returns the default venue
         *
         * @since 4.2.4
         *
         * @param int    $default   Default venue ID
         * @param string $post_type Post type of form being output
         */
        public function linked_post_default($default, $post_type)
        {
        }
        public function linked_post_new_form($post_type)
        {
        }
        /**
         * Returns an array of post fields that should be used to spot possible duplicates.
         *
         * @return array An array of post fields to matching strategy in the format
         *               [ <post_field> => [ 'match' => <strategy> ] ]
         *
         * @see Tribe__Duplicate__Strategy_Factory for supported strategies
         */
        protected function get_duplicate_post_fields()
        {
        }
        /**
         * Returns an array of post custom fields that should be used to spot possible duplicates.
         *
         * @return array An array of post fields to matching strategy in the format
         *               [ <custom_field> => [ 'match' => <strategy> ] ]
         *
         * @see Tribe__Duplicate__Strategy_Factory for supported strategies
         */
        protected function get_duplicate_custom_fields()
        {
        }
        /**
         * {@inheritDoc}
         */
        public static function get_fetch_callback($event)
        {
        }
    }
    /**
     * Ignored Events are fully powered by this class
     */
    class Tribe__Events__Ignored_Events
    {
        public static $ignored_status = 'tribe-ignored';
        public static $legacy_deleted_post = 'deleted_event';
        public static $legacy_origin = 'ical-importer';
        /**
         * Where we save the previous Status when ignoring an Event
         *
         * @since 4.5.13
         * @var string
         */
        public static $key_previous_status = '_tribe_ignored_event_previous_status';
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        public function action_assets()
        {
        }
        /**
         * Filter the displayed bulk actions on the Ignored Events status
         *
         * @param   array $actions List of bulk actions
         *
         * @return  array
         */
        public function filter_bulk_actions($actions)
        {
        }
        /**
         * Makes sure that we have the Required Messages displaying correctly for the Legacy Events Warning
         *
         * @param  array $messages  Array of arrays, with the CPT messages for each status
         * @param  array $counts    Array with the Counts of each one of the messages
         *
         * @return array
         */
        public function filter_updated_messages($messages, $counts)
        {
        }
        /**
         * Returns the HTML for a notice depending on the if we have Legacy Items to be Migrated
         *
         * @return string
         */
        public function render_notice_legacy()
        {
        }
        /**
         * Action to Restore Events on the Single Page
         *
         * @param  WP_Screen $screen Which WP Screen we are currently in
         *
         * @return void|Redirect
         */
        public function action_restore_events()
        {
        }
        /**
         * Allows Bulk Actions to Work it's magic (more Complex than it needs to be)
         *
         * @return void|false
         */
        public function action_restore_ignored()
        {
        }
        /**
         * Which Columns are Available on Ignored Events view
         *
         * @param  array $columns Columns and it's labels
         *
         * @return array
         */
        public function filter_columns($columns)
        {
        }
        /**
         * Filters the Contents of the Columns for the Ignored Events View
         *
         * @param  string      $column Which column we are dealing with
         * @param  int|WP_Post $post   WP Post ID or Object
         *
         * @return string|null|false
         */
        public function action_column_contents($column, $post)
        {
        }
        /**
         * Add the required Row Actions for the Ignored Events View
         *
         * @param  array       $actions List of the current actions
         * @param  int|WP_Post $post    WP Post ID or Object
         *
         * @return array
         */
        public function filter_actions($actions, $post)
        {
        }
        /**
         * Add the new Link to the Ignored events on the Events Page
         *
         * @param array $views Array of all the previous Views/Links
         *
         * @return array $views After adding the new Link
         */
        public function filter_views($views = [])
        {
        }
        /**
         * Count legacy "ignored" posts
         *
         * @return int
         */
        public function count_legacy_deleted_posts()
        {
        }
        /**
         * Check if there are any legacy posts
         *
         * @return boolean
         */
        public function has_legacy_deleted_posts()
        {
        }
        /**
         * Check if there are any ignored posts
         *
         * @param  boolean $check_legacy If the method should also check legacy CPTs
         * @return boolean
         */
        public function has_ignored_posts($check_legacy = \true)
        {
        }
        /**
         * Gets all ids for events that have been ignored
         *
         * @param null|array $data Array of event IDs/objects/data to check
         *
         * @return array
         */
        public function get($args = [])
        {
        }
        /**
         * Gets all ids for events that have been ignored
         *
         * @param null|array $data Array of event IDs/objects/data to check
         *
         * @return WP_Query
         */
        public function get_query($args = [])
        {
        }
        /**
         * Gets all ids for events that have been ignored
         *
         * @param null|array $data Array of event IDs/objects/data to check
         * @param array $args WP_Query args
         *
         * @return array
         */
        public function get_by_id($data = [], $args = [])
        {
        }
        /**
         * Changes the event to the correct Post Status
         *
         * @param  int|WP_Post       $event Which event try to convert
         * @return bool|int|WP_Error
         */
        public function ignore_event($event, $force = \false)
        {
        }
        /**
         * Verify if we can Ignore an Event depending on all the Required rules
         *
         * @param  int|WP_Post $post ID of the Event or it's Object
         *
         * @return bool
         */
        public function can_ignore($post)
        {
        }
        /**
         * Restore Event
         *
         * @param  int|WP_Post       $event Which event try to convert
         * @return bool|int|WP_Error
         */
        public function restore_event($event)
        {
        }
        /**
         * Register the Ignored Post Status
         *
         * @return void
         */
        public function register_ignored_post_status()
        {
        }
        /**
         * Making sure that we have the previous Status saved
         *
         * @since  4.5.13
         *
         * @param  int|WP_Post  $event  Which event to track the Previous status
         *
         * @return bool
         */
        public function action_track_previous_status($event)
        {
        }
        /**
         * On version 4.4 of WP we get a new Filter to prevent an event from been trashed and/or deleted
         *
         * @param  null|bool $check        Boolean or Null depending if we need to delete or not
         * @param  int       $post         WP Post ID
         * @param  bool      $force_delete Force the Event delete
         *
         * @return null|bool
         */
        public function action_pre_delete_event($unused_check, $post, $force_delete)
        {
        }
        /**
         * Used to get an Trashed event and move it to the `post_status` of Ignored
         *
         * @param  int $post ID of the Post
         *
         * @return bool|null
         */
        public function action_from_trash_to_ignored($post)
        {
        }
        /**
         * Method that Handles the AJAX converting of Legacy Ignored Events to the new `post_status`
         * AJAX methods will not return anything, only print a JSON string
         *
         * @return void
         */
        public function ajax_convert_legacy_ignored_events()
        {
        }
        /**
         * Hooks the filters and actions needed for the class to work.
         *
         * @return bool Whether the filters and actions were hooked or not.
         */
        public function hook()
        {
        }
        /**
         * Patch post-list-table queries to include ignored status,
         * as WP just accesses the stati without checking if they exist.
         *
         * @see wp-admin/includes/class-wp-posts-list-table.php->get_views()
         *
         * @since 5.1.5
         *
         * @param object $counts       An object containing the current post_type's post
         *                             counts by status.
         *
         * @return object $counts       The modified object containing the current post_type's post
         *                              counts by status.
         */
        public function patch_count_posts($counts)
        {
        }
    }
    class Tribe__Events__Dates__Known_Range
    {
        /**
         * @var static
         */
        protected static $instance;
        /**
         * The class singleton constructor.
         *
         * @return Tribe__Events__Dates__Known_Range
         */
        public static function instance()
        {
        }
        /**
         * Determine the earliest start date and latest end date currently in the database
         * and store those values for future use.
         */
        public function rebuild_known_range()
        {
        }
        /**
         * Intelligently updates our record of the earliest start date/latest event date in
         * the system. If the existing earliest/latest values have not been superseded by the new post's
         * start/end date then no update takes place.
         *
         * This is deliberately hooked into save_post, rather than save_post_tribe_events, to avoid issues
         * where the removal/restoration of hooks within addEventMeta() etc might stop this method from
         * actually being called (relates to a core WP bug).
         *
         * @param int $event_id
         */
        public function update_known_range($event_id)
        {
        }
        /**
         * Intended to run when the save_post_tribe_events action is fired.
         *
         * At this point we know an event is being updated or created and, if the post is going to
         * be visible, we can set up a further action to handle updating our record of the
         * populated date range once the post meta containing the start and end date for the post
         * has saved.
         */
        public function maybe_update_known_range($post_id)
        {
        }
        /**
         * Fires on delete_post and decides whether or not to rebuild our record or
         * earliest/latest event dates (which will be done when deleted_post fires,
         * so that the deleted event is removed from the db before we recalculate).
         *
         * @param $post_id
         */
        public function maybe_rebuild_known_range($post_id)
        {
        }
    }
    /**
     * Holds methods that are required to maintain backwards compatibility with minor versions
     */
    class Tribe__Events__Backcompat
    {
        private static $instance = \null;
        public static function init()
        {
        }
        /**
         * Set up any needed hooks for methods in this class
         */
        public function add_hooks()
        {
        }
        /**
         * We used to store midnight as 12:00. It should be 00:00.
         *
         * @param string $cutoff
         * @param string $default
         * @param string $option
         *
         * @return string
         */
        public function filter_multiday_cutoff($cutoff, $default, $option)
        {
        }
        /**
         * Change 'upcoming' to 'list' in the default view option (upcoming was removed in 3.8)
         *
         * @param string $default_view
         * @param string $default
         * @param string $option
         *
         * @return string
         */
        public function filter_default_view($default_view, $default, $option)
        {
        }
        /**
         * Change 'upcoming' to 'list' in the enabled views option (upcoming was removed in 3.8)
         *
         * @param string $enabled_views
         * @param string $default
         * @param string $option
         *
         * @return array
         */
        public function filter_enabled_views($enabled_views, $default, $option)
        {
        }
        /**
         * Change legacy eventDisplay query var from past/upcoming to list (past & upcoming were removed in 3.8)
         *
         * @param $query
         */
        public function change_qv_to_list($query)
        {
        }
        /**
         * @return self
         */
        public static function instance()
        {
        }
    }
    /**
     * Class Tribe__Events__Importer__File_Importer
     */
    abstract class Tribe__Events__Importer__File_Importer
    {
        protected $required_fields = [];
        /**
         * An array that keeps tracks of the terms created for a taxonomy in the shape
         * [ <taxonomy> => ArrayIterator( [ <term_id>, ... ] ) ].
         *
         * @var array
         */
        protected $created_terms = [];
        /** @var Tribe__Events__Importer__File_Reader */
        private $reader = \null;
        private $map = [];
        private $type = '';
        private $limit = 100;
        private $offset = 0;
        private $errors = [];
        private $updated = 0;
        private $created = 0;
        private $encoding = [];
        protected $log = [];
        protected $skipped = [];
        protected $inverted_map = [];
        public $is_aggregator = \false;
        public $aggregator_record;
        public $default_category;
        public $default_post_status;
        /**
         * @var Tribe__Events__Importer__Featured_Image_Uploader
         */
        protected $featured_image_uploader;
        /**
         * @param string                         $type
         * @param Tribe__Events__Importer__File_Reader $file_reader
         *
         * @return Tribe__Events__Importer__File_Importer
         * @throws InvalidArgumentException
         */
        public static function get_importer($type, \Tribe__Events__Importer__File_Reader $file_reader)
        {
        }
        /**
         * @param Tribe__Events__Importer__File_Reader $file_reader
         */
        public function __construct(\Tribe__Events__Importer__File_Reader $file_reader, \Tribe__Events__Importer__Featured_Image_Uploader $featured_image_uploader = \null)
        {
        }
        public function set_map(array $map_array)
        {
        }
        public function set_type($type)
        {
        }
        public function set_limit($limit)
        {
        }
        public function set_offset($offset)
        {
        }
        public function do_import()
        {
        }
        public function do_import_preview()
        {
        }
        public function get_last_completed_row()
        {
        }
        public function import_complete()
        {
        }
        public function get_line_count()
        {
        }
        public function get_updated_post_count()
        {
        }
        public function get_new_post_count()
        {
        }
        public function get_skipped_row_count()
        {
        }
        public function get_skipped_row_numbers()
        {
        }
        public function get_encoding_changes_row_count()
        {
        }
        public function get_encoding_changes_row_numbers()
        {
        }
        public function get_log_messages()
        {
        }
        public function get_required_fields()
        {
        }
        public function get_type()
        {
        }
        public function import_next_row($throw = \false, $preview = \false)
        {
        }
        protected function update_or_create_post(array $record)
        {
        }
        protected abstract function match_existing_post(array $record);
        protected abstract function update_post($post_id, array $record);
        protected abstract function create_post(array $record);
        protected function is_valid_record(array $record)
        {
        }
        /**
         * Retrieves a value from the record.
         *
         * @since 5.1.6 - modify to use has_value_by_key().
         *
         * @param array  $record An event record from the import.
         * @param string $key    The text of the key to find in the record array.
         *
         * @return mixed|string Either the value or an empty string if the value was not found.
         */
        public function get_value_by_key(array $record, $key)
        {
        }
        /**
         * Check if a key is found.
         *
         * @since 5.1.6
         *
         * @param array  $record An event record from the import.
         * @param string $key    The text of the key to find in the record array.
         *
         * @return bool Whether the key is found in the record.
         */
        public function has_value_by_key(array $record, $key)
        {
        }
        protected function find_matching_post_id($name, $post_type, $post_status = 'publish')
        {
        }
        public function filter_query_for_title_search($search, \WP_Query $wp_query)
        {
        }
        /**
         * @param string|int $featured_image Either an absolute path to an image or an attachment ID.
         *
         * @return Tribe__Events__Importer__Featured_Image_Uploader
         */
        protected function featured_image_uploader($featured_image)
        {
        }
        /**
         * Returns a boolean value from the record.
         *
         * @param array  $record
         * @param string $key
         * @param string $return_true_value    The value to return if the value was found and is truthy.
         * @param string $return_false_value   The value to return if the value was not found or is not truthy;
         *                                     defaults to the original value.
         * @param array  $accepted_true_values An array of values considered truthy.
         *
         * @return string
         */
        public function get_boolean_value_by_key($record, $key, $return_true_value = '1', $return_false_value = \null, $accepted_true_values = ['yes', 'true', '1'])
        {
        }
        /**
         * @param $row
         *
         * @return string
         */
        protected function get_skipped_row_message($row)
        {
        }
        /**
         * @param       $event_id
         * @param array $record
         *
         * @return bool|int|mixed|null
         */
        protected function get_featured_image($event_id, array $record)
        {
        }
        /**
         * Hooks on term creation to log it.
         *
         * @since 4.6.24
         *
         * @param int    $term_id  The newly created term ID.
         * @param int    $tt_id    The newly created term taxonomy ID.
         * @param string $taxonomy The current taxonomy.
         */
        public function on_created_term($term_id, $tt_id, $taxonomy)
        {
        }
        /**
         * Hooks on the term creation to watch for any newly created terms.
         *
         * @since 4.6.24
         */
        public function watch_term_creation()
        {
        }
        /**
         * Stops watching for term creation and logging.
         *
         * @since 4.6.24
         */
        public function stop_watching_term_creation()
        {
        }
        /**
         * Returns an iterator to iterate over the last created terms.
         *
         * @since 4.6.24
         *
         * By default a NoRewindIterator will be returned, this will allow successive calls from iterating code,
         * e.g. a `foreach`, to resume from the previously last position.
         *
         * @param string $taxonomy The taxonomy to fetch the created terms for.
         * @param bool   $rewind   Whether to return a rewinding iterator (`true`) or a NoRewind one (`false`);
         *                         defaults to `false`.
         *
         * @return ArrayIterator|NoRewindIterator An ArrayIterator built on the term IDs created for the taxonomy
         *                                        or a NoRewindIterator built on top of it.
         */
        public function created_terms($taxonomy, $rewind = \false)
        {
        }
    }
    /**
     * Class Tribe__Events__Importer__File_Uploader
     */
    class Tribe__Events__Importer__File_Uploader
    {
        private $name = '';
        private $type = '';
        private $tmp_name = '';
        private $error = 0;
        private $size = 0;
        public function __construct($file_array)
        {
        }
        public function save_file()
        {
        }
        private function validate_temporary_file()
        {
        }
        private function permanently_save_file()
        {
        }
        public static function clear_old_files()
        {
        }
        public static function get_file_path()
        {
        }
        /**
         * Indicates if the file returned by self::get_file_path() (still) exists
         * and is readable.
         *
         * @return bool
         */
        public static function has_valid_csv_file()
        {
        }
        private static function get_upload_directory()
        {
        }
    }
    /**
     * Class Tribe__Events__Importer__File_Importer_Events
     */
    class Tribe__Events__Importer__File_Importer_Events extends \Tribe__Events__Importer__File_Importer
    {
        protected $required_fields = ['event_name', 'event_start_date'];
        /**
         * Searches the database for an existing event matching the one described
         * by the specified record.
         *
         * @param array $record An array of values from the Events CSV file.
         *
         * @return int An event matching the one described by the record or `0` if no matching
         *            events are found.
         */
        protected function match_existing_post(array $record)
        {
        }
        protected function update_post($post_id, array $record)
        {
        }
        protected function create_post(array $record)
        {
        }
        private function get_event_start_date(array $record, $date_only = \false)
        {
        }
        private function get_event_end_date(array $record)
        {
        }
        private function build_event_array($event_id, array $record)
        {
        }
        /**
         * Filter allowing user to customize the separator used for organizers
         * Defaults to comma ','
         * @since 4.6.19
         *
         * @return mixed
         */
        private function get_separator()
        {
        }
        /**
         * Find organizer matches from separated string
         * Attempts to compensate for names with separators in them - Like "Woodhouse, Chelsea S."
         * @since 4.6.19
         * @param $organizers
         *
         * @return array
         */
        private function match_organizers($organizers)
        {
        }
        /**
         * Determine if organizer is a list of space-separated IDs
         * @param $organizer
         *
         * @return array[]|bool|false|string[]
         */
        private function organizer_is_space_separated_ids($organizer)
        {
        }
        /**
         * * Determine if organizer is a list of $separator-separated IDs
         * @param $organizer
         *
         * @return array[]|bool|false|string[]
         */
        private function maybe_organizer_is_separated_list($organizer)
        {
        }
        /**
         * Handle finding the matching organizer(s) for the event
         * @since 4.6.19
         * @param $record - the event record from the import
         *
         * @return array
         */
        private function find_matching_organizer_id($record)
        {
        }
        private function find_matching_venue_id($record)
        {
        }
        /**
         * Parses a timezone string candidate and returns a TEC supported timezone string.
         *
         * @param string $timezone_candidate
         *
         * @return bool|string Either the timezone string or `false` if the timezone candidate is invalid.
         */
        private function get_timezone($timezone_candidate)
        {
        }
        /**
         * Get Post Text from Import or Existing Value using the provided field name and post field.
         *
         * @since 5.1.6
         *
         * @param int    $event_id   The event id being updated by import.
         * @param array  $record     An event record from the import.
         * @param string $field      The import field name.
         * @param string $post_field The post field name.
         *
         * @return string The description value to update the event with.
         */
        protected function get_post_text_field($event_id, $record, $field, $post_field)
        {
        }
        /**
         * Allows the user to specify the currency position using alias terms.
         *
         * @param array $record
         *
         * @return string Either `prefix` or `suffix`; will fall back on the first if the specified position is not
         *                a recognized alias.
         */
        private function get_currency_position(array $record)
        {
        }
        /**
         * Returns the `post_excerpt` to use.
         *
         * @deprecated5.1.6
         *
         * @param int    $event_id        The event id being updated by import.
         * @param string $import_excerpt The imported excerpt text.
         *
         * @return string
         */
        private function get_post_excerpt($event_id, $import_excerpt)
        {
        }
    }
    /**
     * Class Tribe__Events__Importer__File_Reader
     */
    class Tribe__Events__Importer__File_Reader
    {
        private $path = '';
        private $file = \null;
        private $last_line_read = 0;
        public $lines;
        public function __construct($file_path)
        {
        }
        public function __destruct()
        {
        }
        public function get_header()
        {
        }
        public function set_row($row_number)
        {
        }
        public function read_row($row_number)
        {
        }
        public function read_next_row()
        {
        }
        public function get_last_line_number_read()
        {
        }
        public function at_end_of_file()
        {
        }
        /**
         * Sanitizes a row
         *
         * @since 4.5.5
         *
         * @param array $row Import row
         */
        public function sanitize_row($row)
        {
        }
        /**
         * Get the field parameters used for reading CSV files.
         *
         * @since 4.6.1
         *
         * @return array The CSV field parameters.
         */
        public function get_csv_params()
        {
        }
        /**
         * Set the import params for CSV fields
         *
         * @since 4.6.1
         *
         * @param array $params (
         *      The parameters
         *
         *      @param string $delimter  The field delimiter (one character only).
         *      @param string $enclosure The field enclosure character (one character only).
         *      @param string $escape    The field escape character (one character only).
         * }
         */
        private function set_csv_params($params)
        {
        }
    }
    /**
     * Class Tribe__Events__Importer__File_Importer_Organizers
     */
    class Tribe__Events__Importer__File_Importer_Organizers extends \Tribe__Events__Importer__File_Importer
    {
        protected $required_fields = ['organizer_name'];
        protected function match_existing_post(array $record)
        {
        }
        protected function update_post($post_id, array $record)
        {
        }
        protected function create_post(array $record)
        {
        }
        /**
         * Build a organizer array for creation/update of the current imported organizer.
         *
         * @since 3.2
         * @since 5.1.6 Adjust to prevent overwriting values that aren't mapped.
         *
         * @param int   $organizer_id The ID of the organizer we're currently importing.
         * @param array $record       An event record from the import.
         *
         * @return array $organizer The array of organizer data for creation/update.
         */
        private function build_organizer_array($organizer_id, array $record)
        {
        }
    }
    /**
     * Class Tribe__Events__Importer__Column_Mapper
     */
    class Tribe__Events__Importer__Column_Mapper
    {
        private $column_names = [];
        private $import_type = '';
        private $defaults = [];
        public function __construct($import_type)
        {
        }
        public function set_defaults($defaults)
        {
        }
        public function make_select_box($index)
        {
        }
        public function get_column_label($key)
        {
        }
        private function get_event_column_names()
        {
        }
        private function get_venue_column_names()
        {
        }
        private function get_organizer_column_names()
        {
        }
    }
    /**
     * Class Tribe__Events__Importer__Featured_Image_Uploader
     *
     * An extension of the base class to implement further methods that might be needed.
     */
    class Tribe__Events__Importer__Featured_Image_Uploader extends \Tribe__Image__Uploader
    {
    }
    /**
     * Class Tribe__Events__Importer__File_Importer_Venues
     */
    class Tribe__Events__Importer__File_Importer_Venues extends \Tribe__Events__Importer__File_Importer
    {
        protected $required_fields = ['venue_name'];
        protected function match_existing_post(array $record)
        {
        }
        protected function update_post($post_id, array $record)
        {
        }
        protected function create_post(array $record)
        {
        }
        /**
         * Build a venue array for creation/update of the current imported venue.
         *
         * @since 3.2
         * @since 5.1.6 Adjust to prevent overwriting values that aren't mapped.
         *
         * @param int                   $venue_id The ID of the venue we're currently importing.
         * @param array <string,string> $record   The event record from the import file. Only contains mapped values.
         *                                        Useful if value and key above don't appear to match what's expected.
         *                                        In the format [ mapped_key => value ].
         *
         * @return array $venue The array of venue data for creation/update.
         */
        private function build_venue_array($venue_id, array $record)
        {
        }
        /**
         * Set default venue values.
         * Note this will only set a value if it has been mapped, and it is empty.
         * If you are using the importer to erase values, you should NOT be triggering this!
         *
         * @since 5.1.6
         *
         * @param array                 $venue  The array of venue data we're modifying.
         * @param array <string,string> $record The event record from the import file. Only contains mapped values.
         *                                      Useful if value and key above don't appear to match what's expected.
         *                                      In the format [ mapped_key => value ].
         *
         * @return array The modified venue data.
         */
        public function set_defaults($venue, $record)
        {
        }
    }
    interface Tribe__Events__Validator__Interface extends \Tribe__Validator__Interface
    {
        /**
         * Whether the provided value is an existing Venue post ID or not.
         *
         * @param mixed $venue_id
         *
         * @return bool
         */
        public function is_venue_id($venue_id);
        /**
         * Whether the provided value is an existing Organizer post ID or not.
         *
         * @param mixed $organizer Either an array of Organizer post IDs or a single Organizer post ID.
         *
         * @return bool
         */
        public function is_organizer_id($organizer);
        /**
         * Whether a list or array of organizer post IDs only contains valid organizer IDs or not.
         *
         * @param  string|array $organizers A list of organizer post IDs separated by the specified separator or an array
         *                                  of organizer post IDs.
         * @param string        $sep        The separator used in the list to separate the organizer post IDs; ignored if
         *                                  the input value is an array.
         *
         * @return bool
         */
        public function is_organizer_id_list($organizers, $sep = ',');
        /**
         * Whether the event category exists or not.
         *
         * @param mixed  $category Either a single event category `term_id` or `slug` or an array of
         *                     `term_id`s and `slug`s
         * @return bool
         */
        public function is_event_category($category);
        /**
         * Whether the value is the post ID of an existing event or not.
         *
         * @param int|string $event_id
         *
         * @return bool
         */
        public function is_event_id($event_id);
        /**
         * Whether the value is the post name of an existing event or not.
         *
         * @param string $event_slug
         *
         * @return bool
         */
        public function is_event_slug($event_slug);
        /**
         * Whether a list or array of event post IDs only contains valid event IDs or not.
         *
         * @since 4.6.22
         *
         * @param  string|array $events A list of event post IDs separated by the specified separator or an array
         *                                  of event post IDs.
         * @param string $sep The separator used in the list to separate the event post IDs; ignored if
         *                                  the input value is an array.
         *
         * @return bool
         */
        public function is_event_id_list($events, $sep = ',');
    }
    /**
     * Class Tribe__Events__Validator__Base
     *
     * @since 4.6
     */
    class Tribe__Events__Validator__Base extends \Tribe__Validator__Base implements \Tribe__Events__Validator__Interface
    {
        /**
         * Whether the provided value is an existing Venue post ID or not.
         *
         * @since 4.6
         *
         * @param mixed $venue_id
         *
         * @return bool
         */
        public function is_venue_id($venue_id)
        {
        }
        /**
         * Whether the provided value is an existing Organizer post ID or not.
         *
         * @since 4.6
         *
         * @param mixed $organizer Either an array of Organizer post IDs or a single Organizer post ID.
         *
         * @return bool
         */
        public function is_organizer_id($organizer)
        {
        }
        /**
         * Whether a list or array of organizer post IDs only contains valid organizer IDs or not.
         *
         * @since 4.6
         *
         * @param  string|array $organizers A list of organizer post IDs separated by the specified separator or an array
         *                                  of organizer post IDs.
         * @param string        $sep        The separator used in the list to separate the organizer post IDs; ignored if
         *                                  the input value is an array.
         *
         * @return bool
         */
        public function is_organizer_id_list($organizers, $sep = ',')
        {
        }
        /**
         * Whether the event category exists or not.
         *
         * @since 4.6
         *
         * @param mixed $category Either a single event category `term_id` or `slug` or an array of
         *                        `term_id`s and `slug`s
         *
         * @return bool
         */
        public function is_event_category($category)
        {
        }
        /**
         * Whether the value is the post ID of an existing event or not.
         *
         * @since 4.6
         *
         * @param int|string $event_id
         *
         * @return bool
         */
        public function is_event_id($event_id)
        {
        }
        /**
         * Whether the value is the post name of an existing event or not.
         *
         * @since 4.6.8
         *
         * @param string $event_slug
         *
         * @return bool
         */
        public function is_event_slug($event_slug)
        {
        }
        /**
         * Whether the value is the post name of an existing organizer or not.
         *
         * @since 4.6.9
         *
         * @param string $organizer_slug
         *
         * @return bool
         */
        public function is_organizer_slug($organizer_slug)
        {
        }
        /**
         * Whether the value is the post name of an existing venue or not.
         *
         * @since 4.6.9
         *
         * @param string $venue_slug
         *
         * @return bool
         */
        public function is_venue_slug($venue_slug)
        {
        }
        /**
         * Whether the string represents a valid PHP timezone or not.
         *
         * @since 4.6
         *
         * @param string $candidate
         *
         * @return bool
         */
        public function is_timezone($candidate)
        {
        }
        /**
         * Whether the string is empty or represents a valid PHP timezone.
         *
         * @since 4.6.13
         *
         * @param string $candidate
         *
         * @return bool
         */
        public function is_timezone_or_empty($candidate)
        {
        }
        /**
         * Whether a list or array of venue post IDs only contains valid venue IDs or not.
         *
         * @since 4.6
         *
         * @param  string|array $venues A list of venue post IDs separated by the specified separator or an array
         *                                  of venue post IDs.
         * @param string        $sep        The separator used in the list to separate the venue post IDs; ignored if
         *                                  the input value is an array.
         *
         * @return bool
         */
        public function is_venue_id_list($venues, $sep = ',')
        {
        }
        /**
         * Whether a list or array of event post IDs only contains valid event IDs or not.
         *
         * @since 4.6.22
         *
         * @param  string|array $events A list of event post IDs separated by the specified separator or an array
         *                                  of event post IDs.
         * @param string        $sep        The separator used in the list to separate the event post IDs; ignored if
         *                                  the input value is an array.
         *
         * @return bool
         */
        public function is_event_id_list($events, $sep = ',')
        {
        }
    }
    /**
     * The Events Calendar integration with Event Tickets class
     *
     * @package The Events Calendar
     * @subpackage Event Tickets
     * @since 4.0.1
     */
    class Tribe__Events__Event_Tickets__Main
    {
        /**
         * Private variable holding the class instance
         *
         * @since 4.0.1
         *
         * @var Tribe__Events__Event_Tickets__Main
         */
        private static $instance;
        /**
         * Contains an instance of the Attendees Report integration class
         *
         * @since 4.0.1
         *
         * @var Tribe__Events__Event_Tickets__Attendees_Report
         */
        private $attendees_report;
        /**
         * Contains an instance of the Ticket Email integration class
         *
         * @since 4.0.2
         *
         * @var Tribe__Events__Event_Tickets__Ticket_Email
         */
        private $ticket_email;
        /**
         * Method to return the private instance of the class
         *
         * @since 4.0.1
         *
         * @return Tribe__Events__Event_Tickets__Main
         */
        public static function instance()
        {
        }
        /**
         * Constructor
         */
        public function __construct()
        {
        }
        /**
         * Attendees Report integration class object accessor method
         *
         * @since 4.0.1
         *
         * @param object $object Override Attendees Report object
         * @return Tribe__Events__Event_Tickets__Attendees_Report
         */
        public function attendees_report($object = \null)
        {
        }
        /**
         * Ticket email integration class object accessor method
         *
         * @since 4.0.2
         *
         * @param object $object Override Ticket Email object
         * @return Tribe__Events__Event_Tickets__Ticket_Email
         */
        public function ticket_email($object = \null)
        {
        }
    }
    /**
     * The Events Calendar integration with Event Tickets Attendees Report class
     *
     * @package The Events Calendar
     * @subpackage Event Tickets
     * @since 4.0.1
     */
    class Tribe__Events__Event_Tickets__Attendees_Report
    {
        /**
         * Constructor
         */
        public function __construct()
        {
        }
        /**
         * Adds hooks for injecting/overriding aspects of the Attendees Report from Event Tickets
         *
         * @since 4.0.1
         */
        public function add_hooks()
        {
        }
        /**
         * Injects event meta data into the Attendees report
         *
         * @param int $event_id
         */
        public function event_details_top($event_id)
        {
        }
    }
    /**
     * The Events Calendar integration with Event Tickets ticket email
     *
     * @package The Events Calendar
     * @subpackage Event Tickets
     * @since 4.0.2
     */
    class Tribe__Events__Event_Tickets__Ticket_Email
    {
        /**
         * Constructor
         */
        public function __construct()
        {
        }
        /**
         * Adds hooks for injecting/overriding aspects of the ticket emails from Event Tickets
         *
         * @since 4.0.2
         */
        public function add_hooks()
        {
        }
        /**
         * Includes the start date in the ticket email if the post type is appropriate
         *
         * @since 4.0.2
         * @param boolean $include_start_date Whether or not to include the start date
         * @param int $event_id Event ID
         * @return boolean
         */
        public function maybe_include_start_date($include_start_date, $event_id)
        {
        }
    }
    /**
     * Handle views and template files.
     */
    class Tribe__Events__Templates extends \Tribe__Templates
    {
        /**
         * @var bool Is wp_head complete?
         */
        public static $wpHeadComplete = \false;
        /**
         * @var bool Is this the main loop?
         */
        public static $isMainLoop = \false;
        /**
         * If the global post title has to be modified the original is stored here.
         *
         * @var bool|string
         */
        protected static $original_post_title = \false;
        /**
         * The template name currently being used
         */
        protected static $template = \false;
        /*
         * List of templates which have compatibility fixes
         */
        public static $themes_with_compatibility_fixes = ['twentysixteen', 'twentyfifteen', 'twentyfourteen', 'twentythirteen'];
        /**
         * Initialize the Template Yumminess!
         */
        public static function init()
        {
        }
        /**
         * Pick the correct template to include
         *
         * @param string $template Path to template
         *
         * @return string Path to template
         */
        public static function templateChooser($template)
        {
        }
        /**
         * Include the class for the current view
         *
         * @param bool $class
         *
         **/
        public static function instantiate_template_class($class = \false)
        {
        }
        /**
         * Include page template body class
         *
         * @param array $classes List of classes to filter
         *
         * @return mixed
         */
        public static function template_body_class($classes)
        {
        }
        /**
         * Remove "singular" from available body class
         *
         * @param array $classes List of classes to filter
         *
         * @return mixed
         */
        public function remove_singular_body_class($classes)
        {
        }
        /**
         * Add the "singular" body class
         *
         * @param array $classes List of classes to filter
         *
         * @return array
         */
        public static function add_singular_body_class($classes)
        {
        }
        /**
         * Add the theme to the body class
         *
         * @return array $classes
         **/
        public static function theme_body_class($classes)
        {
        }
        /**
         * Checks if theme needs a compatibility fix
         *
         * @param string $theme Name of template from WP_Theme->Template, defaults to current active template
         *
         *@return mixed
         */
        public static function needs_compatibility_fix($theme = \null)
        {
        }
        /**
         * Determine when wp_head has been triggered.
         */
        public static function wpHeadFinished()
        {
        }
        /**
         * This is where the magic happens where we run some ninja code that hooks the query to resolve to an events template.
         *
         * @param WP_Query $query
         */
        public static function setup_ecp_template($query)
        {
        }
        /**
         * Spoof the global post just once
         *
         **/
        public static function spoof_the_post()
        {
        }
        /**
         * Fix issues where themes display the_title() before the main loop starts.
         *
         * With some themes the title of single events can be displayed twice and, more crucially, it may result in the
         * event views such as month view prominently displaying the title of the most recent event post (which may
         * not even be included in the view output).
         *
         * There's no bulletproof solution to this problem, but for affected themes a preventative measure can be turned
         * on by adding the following to wp-config.php:
         *
         *     define( 'TRIBE_MODIFY_GLOBAL_TITLE', true );
         *
         * Note: this reverses the situation in version 3.2, when this behaviour was enabled by default. In response to
         * feedback it will now be disabled by default and will need to be turned on by adding the above line.
         *
         * @see issues #24294, #23260
         */
        public static function maybe_modify_global_post_title()
        {
        }
        /**
         * Actually modifies the global $post object's title property, setting it to an empty string.
         *
         * This is expected to be called late on during the wp_title action, but does not in fact alter the string
         * it is passed.
         *
         * @see Tribe__Events__Templates::maybe_modify_global_post_title()
         *
         * @param string $title
         *
         * @return string
         */
        public static function modify_global_post_title($title = '')
        {
        }
        /**
         * Restores the global $post title if it has previously been modified.
         *
         * @see Tribe__Events__Templates::modify_global_post_title().
         */
        public static function restore_global_post_title()
        {
        }
        /**
         * Get the correct internal page template
         *
         * @return string Template path
         */
        public static function get_current_page_template()
        {
        }
        /**
         * Get the correct internal page template
         *
         * @return string Template class
         */
        public static function get_current_template_class()
        {
        }
        /**
         * Loads the contents into the page template
         *
         * @return string Page content
         */
        public static function load_ecp_into_page_template($contents = '')
        {
        }
        public static function load_ecp_comments_page_template($template)
        {
        }
        /**
         * Checks where we are are and determines if we should show events in the main loop
         *
         * @param WP_Query $query
         *
         * @return WP_Query
         */
        public static function showInLoops($query)
        {
        }
        /**
         * Loads theme files in appropriate hierarchy: 1) child theme,
         * 2) parent template, 3) plugin resources. will look in the events/
         * directory in a theme and the views/ directory in the plugin
         *
         * @param string $template template file to search for
         * @param array  $args     additional arguments to affect the template path
         *                         - namespace
         *                         - plugin_path
         *                         - disable_view_check - bypass the check to see if the view is enabled
         *
         * @return template path
         **/
        public static function getTemplateHierarchy($template, $args = [])
        {
        }
        /**
         * Convert the post_date_gmt to the event date for feeds
         *
         * @param $time the post_date
         * @param $d    the date format to return
         * @param $gmt  whether this is a gmt time
         *
         * @return int|string
         */
        public static function event_date_to_pubDate($time, $d, $gmt)
        {
        }
        /**
         * Query is complete: stop the loop from repeating.
         */
        private static function endQuery()
        {
        }
        /**
         * Spoof the query so that we can operate independently of what has been queried.
         *
         * @return object
         */
        private static function spoofed_post()
        {
        }
        /**
         * Decide if we need to spoof the query.
         */
        public static function maybeSpoofQuery()
        {
        }
        /**
         * Restore the original query after spoofing it.
         */
        public static function restoreQuery()
        {
        }
    }
    /**
     * The Events Calendar Class
     *
     * This is where all the magic happens, the unicorns run wild and the leprechauns use WordPress to schedule events.
     */
    class Tribe__Events__Main
    {
        /**
         * This constant is deprecated (as of 4.0) in favor of Tribe__Main::OPTIONNAME
         */
        const OPTIONNAME = 'tribe_events_calendar_options';
        /**
         * This constant is deprecated (as of 4.0) in favor of Tribe__Main::OPTIONNAME
         */
        const OPTIONNAMENETWORK = 'tribe_events_calendar_network_options';
        const EVENTSERROROPT = '_tribe_events_errors';
        const TAXONOMY = 'tribe_events_cat';
        const POSTTYPE = 'tribe_events';
        const VENUE_POST_TYPE = 'tribe_venue';
        const ORGANIZER_POST_TYPE = 'tribe_organizer';
        const VERSION = '5.6.0';
        /**
         * Min Pro Addon
         *
         * @deprecated 4.8
         */
        const MIN_ADDON_VERSION = '4.6-dev';
        /**
         * Min Common
         *
         * @deprecated 4.8
         */
        const MIN_COMMON_VERSION = '4.9.2-dev';
        const WP_PLUGIN_URL = 'https://wordpress.org/extend/plugins/the-events-calendar/';
        /**
         * Min Version of WordPress
         *
         * @since 4.8
         */
        protected $min_wordpress = '4.7';
        /**
         * Min Version of PHP
         *
         * @since 4.8
         */
        protected $min_php = '5.6.0';
        /**
         * Min Version of Event Tickets
         *
         * @since 4.8
         */
        protected $min_et_version = '4.11.2-dev';
        /**
         * Maybe display data wrapper
         * @var array
         */
        private $show_data_wrapper = ['before' => \true, 'after' => \true];
        /**
         * Args for the event post type
         *
         * @var array
         */
        protected $post_type_args = ['public' => \true, 'rewrite' => ['slug' => 'event', 'with_front' => \false], 'menu_position' => 6, 'supports' => ['title', 'editor', 'excerpt', 'author', 'thumbnail', 'custom-fields', 'comments', 'revisions'], 'taxonomies' => ['post_tag'], 'capability_type' => ['tribe_event', 'tribe_events'], 'map_meta_cap' => \true, 'has_archive' => \true, 'menu_icon' => 'dashicons-calendar'];
        /**
         * Args for venue post type
         * @var array
         */
        public $postVenueTypeArgs = [];
        protected $taxonomyLabels;
        /**
         * Args for organizer post type
         * @var array
         */
        public $postOrganizerTypeArgs = [];
        public static $tribeUrl = 'https://tri.be/';
        public static $tecUrl = 'https://theeventscalendar.com/';
        public static $addOnPath = 'products/';
        public static $dotOrgSupportUrl = 'https://wordpress.org/support/plugin/the-events-calendar';
        public $rewriteSlug = 'events';
        public $rewriteSlugSingular = 'event';
        public $category_slug = 'category';
        public $tag_slug = 'tag';
        public $monthSlug = 'month';
        public $featured_slug = 'featured';
        /**
         * @deprecated 4.5.8 use `Tribe__Events__Pro__Main::instance()->all_slug` instead
         *
         * @var string
         */
        public $all_slug = 'all';
        /** @deprecated 4.0 */
        public $taxRewriteSlug = 'event/category';
        /** @deprecated 4.0 */
        public $tagRewriteSlug = 'event/tag';
        /** @var Tribe__Events__Admin__Timezone_Settings */
        public $timezone_settings;
        /**
         * A Stored version of the Welcome and Update Pages
         * @var Tribe__Admin__Activation_Page
         */
        public $activation_page;
        // @todo [BTRIA-602]: Remove in 4.0.
        public $upcomingSlug = 'upcoming';
        public $pastSlug = 'past';
        public $listSlug = 'list';
        public $daySlug = 'day';
        public $todaySlug = 'today';
        protected $postExceptionThrown = \false;
        /**
         * Deprecated property in 4.0. Use plugin_dir instead
         */
        public $pluginDir;
        /**
         * Deprecated property in 4.0. Use plugin_path instead
         */
        public $pluginPath;
        /**
         * Deprecated property in 4.0. Use plugin_url instead
         */
        public $pluginUrl;
        /**
         * Deprecated property in 4.0. Use plugin_name instead
         */
        public $pluginName;
        public $displaying;
        public $plugin_file;
        public $plugin_dir;
        public $plugin_path;
        public $plugin_url;
        public $plugin_name;
        public $date;
        protected $tabIndexStart = 2000;
        public $metaTags = ['_EventAllDay', '_EventStartDate', '_EventEndDate', '_EventStartDateUTC', '_EventEndDateUTC', '_EventDuration', '_EventVenueID', '_EventShowMapLink', '_EventShowMap', '_EventCurrencySymbol', '_EventCurrencyPosition', '_EventCost', '_EventCostMin', '_EventCostMax', '_EventURL', '_EventOrganizerID', '_EventPhone', '_EventHideFromUpcoming', '_EventTimezone', '_EventTimezoneAbbr', self::EVENTSERROROPT, '_EventOrigin', '_tribe_featured'];
        public $venueTags = ['_VenueCountry', '_VenueAddress', '_VenueCity', '_VenueStateProvince', '_VenueState', '_VenueProvince', '_VenueZip', '_VenuePhone', '_VenueURL', '_VenueShowMap', '_VenueShowMapLink'];
        public $organizerTags = ['_OrganizerEmail', '_OrganizerWebsite', '_OrganizerPhone'];
        public $currentPostTimestamp;
        /**
         * @deprecated 4.4
         */
        public $daysOfWeekShort;
        /**
         * @deprecated 4.4
         */
        public $daysOfWeek;
        /**
         * @deprecated 4.4
         */
        public $daysOfWeekMin;
        /**
         * @deprecated 4.4
         */
        public $monthsFull;
        /**
         * @deprecated 4.4
         */
        public $monthsShort;
        public $singular_venue_label;
        public $plural_venue_label;
        public $singular_organizer_label;
        public $plural_organizer_label;
        public $singular_event_label;
        public $plural_event_label;
        /** @var Tribe__Events__Default_Values */
        private $default_values = \null;
        /**
         * @var bool Prevent autoload initialization
         */
        private $should_prevent_autoload_init = \false;
        /**
         * @var string tribe-common VERSION regex
         */
        private $common_version_regex = "/const\\s+VERSION\\s*=\\s*'([^']+)'/m";
        public static $tribeEventsMuDefaults;
        /**
         * Where in the themes we will look for templates
         *
         * @since 4.7
         *
         * @var string
         */
        public $template_namespace = 'events';
        /**
         * Static Singleton Holder
         * @var self
         */
        protected static $instance;
        /**
         * Get (and instantiate, if necessary) the instance of the class
         *
         * @return self
         */
        public static function instance()
        {
        }
        /**
         * Initializes plugin variables and sets up WordPress hooks/actions.
         */
        protected function __construct()
        {
        }
        /**
         * To avoid duplication of our own methods and to provide a underlying system
         * Modern Tribe maintains a Library called Common to store a base for our plugins
         *
         * Currently we will read the File `common/package.json` to determine which version
         * of the Common Lib we will pass to the Auto-Loader of PHP.
         *
         * In the past we used to parse `common/src/Tribe/Main.php` for the Common Lib version.
         *
         * @link https://github.com/moderntribe/tribe-common
         * @see  self::init_autoloading
         *
         * @return void
         */
        public function maybe_set_common_lib_info()
        {
        }
        /**
         * Resets the global common info back to ET's common path
         *
         * @since 4.9.3.2
         */
        private function reset_common_lib_info_back_to_et()
        {
        }
        /**
         * Prevents bootstrapping and autoloading if the version of ET that is running is too old
         *
         * @since 4.9.3.2
         */
        public function maybe_bail_if_old_et_is_present()
        {
        }
        /**
         * Prevents bootstrapping and autoloading if the version of WP or PHP are too old
         *
         * @since 4.9.3.2
         */
        public function maybe_bail_if_invalid_wp_or_php()
        {
        }
        /**
         * Plugins shouldn't include their functions before `plugins_loaded` because this will allow
         * better compatibility with the autoloader methods.
         *
         * @return void
         */
        public function plugins_loaded()
        {
        }
        /**
         * Load Text Domain on tribe_common_loaded as it requires common
         *
         * @since 4.8
         *
         */
        public function bootstrap()
        {
        }
        /**
         * To allow easier usage of classes on our files we have a AutoLoader that will match
         * class names to it's required file inclusion into the Request.
         *
         * @return void
         */
        protected function init_autoloading()
        {
        }
        /**
         * Load The Events Calendar text domain.
         *
         * @since 5.1.0
         *
         * @return bool
         */
        public function load_text_domain()
        {
        }
        /**
         * Registers the implementations in the container.
         *
         * Classes that should be built at `plugins_loaded` time are also instantiated.
         *
         * @since  4.4
         *
         * @return void
         */
        public function bind_implementations()
        {
        }
        /**
         * Registers this plugin as being active for other tribe plugins and extensions
         */
        protected function register_active_plugin()
        {
        }
        /**
         * Load all the required library files.
         */
        protected function loadLibraries()
        {
        }
        /**
         * Prevents Image Widget Plus weird version of Tribe Common Lib to
         * conflict with The Events Calendar
         *
         * It will make IW+ not load on version 1.0.2
         *
         * @since   4.8.1
         *
         * @return  void
         */
        private function compatibility_unload_iwplus_v102()
        {
        }
        /**
         * Add filters and actions
         */
        protected function addHooks()
        {
        }
        /**
         * Run on applied action init
         */
        public function init()
        {
        }
        /**
         * Initializes any admin-specific code (expects to be called when admin_init fires).
         */
        public function admin_init()
        {
        }
        /**
         * Updater object accessor method
         */
        public function updater()
        {
        }
        public function run_updates()
        {
        }
        /**
         * @return Tribe__Admin__Activation_Page
         */
        public function activation_page()
        {
        }
        /**
         * before_html_data_wrapper adds a persistant tag to wrap the event display with a
         * way for jQuery to maintain state in the dom. Also has a hook for filtering data
         * attributes for inclusion in the dom
         *
         * @param  string $html
         *
         * @return string
         */
        public function before_html_data_wrapper($html)
        {
        }
        /**
         * after_html_data_wrapper close out the persistant dom wrapper
         *
         * @param  string $html
         *
         * @return string
         */
        public function after_html_data_wrapper($html)
        {
        }
        /**
         * When a post transitions from a post_status to another, we remove the archive-slug-conflict notice
         *
         * @param  string $new_status New Status on Post
         * @param  string $old_status Old Status on Post
         * @param  int|WP_Post $post  A Post ID or Post Object
         *
         * @return bool
         */
        public function action_expire_archive_slug_conflict_notice($new_status, $old_status, $post)
        {
        }
        /**
         * Displays the Archive confict notice using Tribe__Admin__Notices code
         *
         * @return string
         */
        public function render_notice_archive_slug_conflict()
        {
        }
        /**
         * Initialize the addons api settings tab
         */
        public function do_addons_api_settings_tab()
        {
        }
        /**
         * should we show the upgrade nags?
         *
         * @since 4.9.12
         *
         * @return boolean
         */
        public function show_upgrade()
        {
        }
        /**
         * Create the upgrade tab
         *
         * @since 4.9.12
         */
        public function do_upgrade_tab()
        {
        }
        /**
         * By default Tribe__Tracker won't track Event Post Types, so we add them here.
         *
         * @since  4.5
         *
         * @param  array $post_types
         *
         * @return array
         */
        public function filter_tracker_event_post_types(array $post_types)
        {
        }
        /**
         * By default Tribe__Tracker won't track our Post Types taxonomies, so we add them here.
         *
         * @since  4.5
         *
         * @param  array $taxonomies
         *
         * @return array
         */
        public function filter_tracker_event_taxonomies(array $taxonomies)
        {
        }
        /**
         * Append the text about The Events Calendar to the feature box on the Help page
         *
         * @filter "tribe_help_pre_get_sections"
         * @param Tribe__Admin__Help_Page $help The Help Page Instance
         * @return void
         */
        public function add_help_section_feature_box_content($help)
        {
        }
        /**
         * Append the text about The Events Calendar to the support section on the Help page
         *
         * @filter "tribe_help_pre_get_sections"
         * @param Tribe__Admin__Help_Page $help The Help Page Instance
         * @return void
         */
        public function add_help_section_support_content($help)
        {
        }
        /**
         * Append the text about The Events Calendar to the Extra Help section on the Help page
         *
         * @filter "tribe_help_pre_get_sections"
         * @param Tribe__Admin__Help_Page $help The Help Page Instance
         * @return void
         */
        public function add_help_section_extra_content($help)
        {
        }
        /**
         * Allow users to specify their own plural label for Venues
         *
         * @return string
         */
        public function get_venue_label_plural()
        {
        }
        /**
         * Allow users to specify their own singular label for Venues
         * @return string
         */
        public function get_venue_label_singular()
        {
        }
        /**
         * Allow users to specify their own plural label for Organizers
         * @return string
         */
        public function get_organizer_label_plural()
        {
        }
        /**
         * Allow users to specify their own singular label for Organizers
         * @return string
         */
        public function get_organizer_label_singular()
        {
        }
        /**
         * Allow users to specify their own plural label for Events
         * @return string
         */
        public function get_event_label_plural()
        {
        }
        /**
         * Allow users to specify their own singular label for Events
         * @return string
         */
        public function get_event_label_singular()
        {
        }
        /**
         * Load the day view template tags
         * Loaded late due to potential upgrade conflict since moving them from pro
         *
         * @todo [BTRIA-620]: move this require to be with the rest of the template tag includes in 3.9
         */
        public function init_day_view()
        {
        }
        /**
         * Runs on the "wp" action. Inspects the main query object and if it relates to an events
         * query makes a decision to add a noindex meta tag based on whether events were returned
         * in the query results or not.
         *
         * Disabling this behaviour always is possible with:
         *
         *     add_filter( 'tribe_events_add_no_index_meta', '__return_false' );
         *
         *  Enabling it for all event views is possible with:
         *
         *     add_filter( 'tribe_events_add_no_index_meta', '__return_true' );
         */
        public function issue_noindex()
        {
        }
        /**
         * Prints a "noindex,follow" robots tag.
         */
        public function print_noindex_meta()
        {
        }
        /**
         * Set the Calendar Version in the options table if it's not already set.
         */
        public function maybeSetTECVersion()
        {
        }
        /**
         * Trigger is_404 on single event if no events are found
         */
        public function template_redirect()
        {
        }
        /**
         * handles tribe bar post submissions
         *
         * @param array $postdata Data from $_POST
         */
        public function handle_submit_bar_redirect($postdata)
        {
        }
        //end handle_submit_bar_redirect
        /**
         * Provides a list of URLs that are considered safe for redirecting
         */
        public function safe_redirect_domains()
        {
        }
        /**
         * Updates the start/end time on all day events to match the EOD cutoff
         *
         * @see 'update_option_'.Tribe__Main::OPTIONNAME
         */
        public function fix_all_day_events($old_value, $new_value)
        {
        }
        /**
         * Test PHP and WordPress versions for compatibility
         *
         * @param string $system - system to be tested such as 'php' or 'wordpress'
         *
         * @return boolean - is the existing version of the system supported?
         */
        public function supportedVersion($system)
        {
        }
        /**
         * Display a WordPress or PHP incompatibility error
         */
        public function notSupportedError()
        {
        }
        /**
         * Display Notice if Event Tickets is Running an Older Version
         *
         * @since 4.8
         *
         */
        public function compatibility_notice()
        {
        }
        /**
         * Disable Pro from Running if TEC shutsdown because Event Tickets is an older version
         *
         * @return bool
         */
        public function disable_pro()
        {
        }
        /**
         * Prevents Extensions from running if ET is on an Older Version
         *
         * @since 4.9.3.1
         *
         */
        public function remove_exts()
        {
        }
        /**
         * Display a missing-tribe-common library error
         */
        public function missing_common_libs()
        {
        }
        /**
         * Add a menu item class to the event
         *
         * @param array $items
         * @param array $args
         *
         * @return array
         */
        public function add_current_menu_item_class_to_events($items, $args)
        {
        }
        /**
         * Add a checkbox to the menu
         *
         * @param array  $posts
         * @param array  $args
         * @param string $post_type
         *
         * @return array
         */
        public function add_events_checkbox_to_menu($posts, $args, $post_type)
        {
        }
        /**
         * Get the event taxonomy
         *
         * @return string
         */
        public function get_event_taxonomy()
        {
        }
        /**
         * Add space to the title in RSS
         *
         * @param string $title
         *
         * @return string
         */
        public function add_space_to_rss($title)
        {
        }
        /**
         * Update body classes
         *
         * @param array $classes
         *
         * @return array
         * @todo move this to template class
         */
        public function body_class($classes)
        {
        }
        /**
         * Update post classes
         *
         * @param array $classes
         *
         * @return array
         * @todo move this to template class
         */
        public function post_class($classes)
        {
        }
        /**
         * Register the post types.
         */
        public function registerPostType()
        {
        }
        /**
         * Get the rewrite slug
         *
         * @return string
         */
        public function getRewriteSlug()
        {
        }
        /**
         * Get the single post rewrite slug
         *
         * @return string
         */
        public function getRewriteSlugSingular()
        {
        }
        /**
         * Returns the string to be used as the taxonomy slug.
         *
         * @return string
         */
        public function get_category_slug()
        {
        }
        /**
         * Returns the string to be used as the tag slug.
         *
         * @return string
         */
        public function get_tag_slug()
        {
        }
        /**
         * Get venue post type args
         *
         * @return array
         */
        public function getVenuePostTypeArgs()
        {
        }
        /**
         * Get organizer post type args
         *
         * @return array
         */
        public function getOrganizerPostTypeArgs()
        {
        }
        /**
         * Generate custom post type lables
         */
        protected function generatePostTypeLabels()
        {
        }
        /**
         * Update custom post type messages
         *
         * @param $messages
         *
         * @return mixed
         */
        public function updatePostMessage($messages)
        {
        }
        /**
         * Adds the submenu items for editing the Venues and Organizers.
         * Used to be a PRO only feature, but as of 3.0, it is part of Core.
         *
         */
        public function addVenueAndOrganizerEditor()
        {
        }
        /**
         * Display a helper for the user, about the location and microdata for rich snippets
         * @param int $postId the event ID to see if the helper is needed
         */
        public function display_rich_snippets_helper($post_id)
        {
        }
        /**
         * override default wp_terms_checklist arguments to prevent checked items from bubbling to the
         * top. Instead, retain hierarchy.
         */
        public function prevent_checked_on_top_terms($args, $post_id)
        {
        }
        /**
         * Update admin classes
         *
         * @param array $classes
         *
         * @return array
         */
        public function admin_body_class($classes)
        {
        }
        /**
         * Clean up trashed venues
         *
         * @param int $postId
         *
         */
        public function cleanupPostVenues($postId)
        {
        }
        /**
         * Clean up trashed organizers.
         *
         * @param int $postId
         *
         */
        public function cleanupPostOrganizers($postId)
        {
        }
        /**
         * Clean up trashed venues or organizers.
         *
         * @param string $key
         * @param int    $postId
         *
         */
        protected function removeDeletedPostTypeAssociation($key, $postId)
        {
        }
        /**
         * Filters the post types across all of the Tribe plugins
         */
        public function filter_post_types($post_types)
        {
        }
        /**
         * Get the post types that are associated with TEC.
         *
         * @return array The post types associated with this plugin
         */
        public static function getPostTypes()
        {
        }
        /**
         * An event can have one or more start dates. This gives
         * the earliest of those.
         *
         * @param int $post_id
         *
         * @return string The date string for the earliest occurrence of the event
         */
        public static function get_series_start_date($post_id)
        {
        }
        /**
         * Runs the Event Scheduler to purge old events
         *
         * @return void
         */
        public function run_scheduler()
        {
        }
        /**
         * Initializes admin-specific items for the events admin list dashboard page. Hooked to the
         * current_screen action
         *
         * @param WP_Screen $screen WP Admin screen object for the current page
         */
        public function init_admin_list_screen($screen)
        {
        }
        /**
         * Set the displaying class property.
         *
         */
        public function setDisplay($query = \null)
        {
        }
        /**
         * Returns the default view, providing a fallback if the default is no longer availble.
         *
         * This can be useful is for instance a view added by another plugin (such as PRO) is
         * stored as the default but can no longer be generated due to the plugin being deactivated.
         *
         * @return string
         */
        public function default_view()
        {
        }
        public function setup_l10n_strings()
        {
        }
        /**
         * Helper method to return an array of translated month names or short month names
         *
         * @param bool $short
         *
         * @return array Translated month names
         */
        public function monthNames($short = \false)
        {
        }
        /**
         * Flush rewrite rules to support custom links
         *
         * @todo This is only registering the events post type, not the meta types
         *
         * @link https://codex.wordpress.org/Custom_Queries#Permalinks_for_Custom_Archives
         */
        public static function flushRewriteRules()
        {
        }
        /**
         * If a themer usees get_post_type_archive_link() to find the event archive URL, this
         * ensures they get the correct result.
         *
         * @param  string $link
         * @param  string $post_type
         * @return string
         */
        public function event_archive_link($link, $post_type)
        {
        }
        /**
         * Adds the event specific query vars to WordPress
         *
         * @param array $qvars
         *
         * @link https://codex.wordpress.org/Custom_Queries#Permalinks_for_Custom_Archives
         * @return mixed array of query variables that this plugin understands
         */
        public function eventQueryVars($qvars)
        {
        }
        /**
         * Get all possible translations for a String based on the given Languages and Domains
         *
         * WARNING: This function is slow because it deals with files, so don't overuse it!
         *
         * @since 5.1.1 Deprecated and moved code to the `Tribe\Events\I18n` class.
         *
         * @param  array  $strings          An array of strings (required)
         * @param  array  $languages        Which l10n to fetch the string (required)
         * @param  array  $domains          Possible Domains to re-load
         * @param  string $default_language The default language to avoid re-doing that
         *
         * @return array                    A multi level array with the possible translations for the given strings
         *
         * @deprecated Since 5.1.1, use `tribe( 'tec.i18n' )->get_i18n_strings()` instead.
         */
        public function get_i18n_strings($strings, $languages, $domains = [], $default_language = 'en_US')
        {
        }
        /**
         * Redirect the legacy past/upcoming view URLs to list
         *
         * @since 4.6.5 revised to avoid unwanted redirects
         */
        public function redirect_past_upcoming_view_urls()
        {
        }
        /**
         * Returns various internal events-related URLs
         *
         * @param string        $type      type of link. See switch statement for types.
         * @param string|bool   $secondary for $type = month, pass a YYYY-MM string for a specific month's URL
         *                                 for $type = week, pass a Week # string for a specific week's URL
         * @param int|bool|null $term
         * @param bool|null     $featured
         *
         * @return string The link.
         */
        public function getLink($type = 'home', $secondary = \false, $term = \null, $featured = \null)
        {
        }
        /**
         * If pretty perms are off, get the ugly link.
         *
         * @param string $type      The type of link requested.
         * @param bool|string       $secondary Some secondary data for the link.
         *
         * @return string The ugly link.
         */
        public function uglyLink($type = 'home', $secondary = \false)
        {
        }
        /**
         * Returns the GCal export link for a given event id.
         *
         * @param int|WP_Post|null $post The Event Post Object or ID, if left empty will give get the current post.
         *
         * @return string The URL for the GCal export link.
         */
        public function googleCalendarLink($post = \null)
        {
        }
        /**
         * Custom Escape for gCal Description to keep spacing characters in the url
         *
         * @return santized url
         */
        public function esc_gcal_url($url)
        {
        }
        /**
         * Returns a link to google maps for the given event. This link can be filtered
         * using the tribe_events_google_map_link hook.
         *
         * @param int|null $post_id
         *
         * @return string a fully qualified link to https://maps.google.com/ for this event
         */
        public function googleMapLink($post_id = \null)
        {
        }
        /**
         *  Returns the full address of an event along with HTML markup.  It
         *  loads the address template to generate the HTML
         */
        public function fullAddress($post_id = \null, $includeVenueName = \false)
        {
        }
        /**
         *  Returns a string version of the full address of an event
         *
         * @param int|WP_Post The post object or post id.
         *
         * @return string The event's address.
         */
        public function fullAddressString($postId = \null)
        {
        }
        /**
         * plugin activation callback
         * @see register_deactivation_hook()
         *
         * @param bool $network_deactivating
         */
        public static function activate()
        {
        }
        /**
         * plugin deactivation callback
         * @see register_deactivation_hook()
         *
         * @param bool $network_deactivating
         */
        public static function deactivate($network_deactivating)
        {
        }
        /**
         * Adds an alias for get_post_meta so we can override empty values with defaults.
         * If you need the raw unfiltered data, use get_post_meta directly.
         * This is mainly for templates.
         *
         * @param int    $id     The post id.
         * @param string $meta   The meta key.
         * @param bool   $single Return as string? Or array?
         *
         * @return mixed The meta.
         */
        public function getEventMeta($id, $meta, $single = \true)
        {
        }
        /**
         * Get all possible translations for a String based on the given Languages and Domains
         *
         * WARNING: This function is slow because it deals with files, so don't overuse it!
         * Differently from the `get_i18n_strings` method this will not use any domain that's not specified.
         *
         * @since 5.1.1 Deprecated and moved to the `Tribe\Events\I18n` class.
         *
         * @param array $strings   An array of strings (required).
         * @param array $languages Which l10n to fetch the string (required).
         * @param array $domains   Possible Domains to re-load.
         *
         * @return array                    A multi level array with the possible translations for the given strings.
         *
         * @deprecated Since 5.1.1, use `tribe( 'tec.i18n' )->get_i18n_strings_for_domains()` instead.
         */
        public function get_i18n_strings_for_domains($strings, $languages, $domains = ['default'])
        {
        }
        /**
         * Adds / removes the event details as meta tags to the post.
         *
         * @param int     $postId
         * @param WP_Post $post
         *
         */
        public function addEventMeta($postId, $post)
        {
        }
        public function normalize_organizer_submission($submission)
        {
        }
        /**
         * Adds the '_<posttype>Origin' meta field for a newly inserted events-calendar post.
         *
         * @param int     $postId , the post ID
         * @param WP_Post $post   , the post object
         *
         */
        public function addPostOrigin($postId, $post)
        {
        }
        /**
         * Publishes associated venue/organizer when an event is published
         *
         * @param int     $post_id The post ID.
         * @param WP_Post $post    The post object.
         *
         */
        public function publishAssociatedTypes($post_id, $post)
        {
        }
        /**
         * Make sure the venue meta gets saved
         *
         * @param int     $postID The venue id.
         * @param WP_Post $post   The post object.
         *
         * @return null
         */
        public function save_venue_data($postID = \null, $post = \null)
        {
        }
        /**
         * Get venue info.
         *
         * @param int $p          post id
         * @param     $args
         *
         * @return WP_Query->posts || false
         */
        public function get_venue_info($p = \null, $args = [])
        {
        }
        /**
         * Make sure the organizer meta gets saved
         *
         * @param int     $postID The organizer id.
         * @param WP_Post $post   The post object.
         *
         * @return null
         */
        public function save_organizer_data($postID = \null, $post = \null)
        {
        }
        /**
         * Add a new Organizer
         *
         * @param      $data
         * @param null $post
         *
         * @return int|WP_Error
         */
        public function add_new_organizer($data, $post = \null)
        {
        }
        /**
         * Get Organizer info.
         *
         * @param int $p          post id
         * @param     $args
         *
         * @return WP_Query->posts || false
         */
        public function get_organizer_info($p = \null, $args = [])
        {
        }
        /**
         * Generates the main events settings meta box used within the event editor to configure
         * event dates, times and more.
         *
         * @param WP_Post $event
         */
        public function EventsChooserBox($event = \null)
        {
        }
        /**
         * Adds a style chooser to the write post page
         *
         */
        public function VenueMetaBox()
        {
        }
        /**
         * Adds a style chooser to the write post page
         *
         */
        public function OrganizerMetaBox()
        {
        }
        /**
         * Handle ajax requests from admin form
         *
         */
        public function ajax_form_validate()
        {
        }
        /**
         * Get the current default value strategy
         * @return Tribe__Events__Default_Values
         */
        public function defaults()
        {
        }
        /**
         * Verify that a venue or organizer is unique
         *
         * @param string $name - name of venue or organizer
         * @param string $type - post type
         *
         * @return boolean
         */
        public function verify_unique_name($name, $post_type)
        {
        }
        /**
         * Given a date (YYYY-MM-DD), returns the first of the next month
         * hat tip to Dan Bernadict for method cleanup
         *
         * @param string $date
         *
         * @return string Next month's date
         * @throws OverflowException
         */
        public function nextMonth($date)
        {
        }
        /**
         * Given a date (YYYY-MM-DD), return the first of the previous month
         * hat tip to Dan Bernadict for method cleanup
         *
         * @param string $date
         *
         * @return string Previous month's date
         * @throws OverflowException
         */
        public function previousMonth($date)
        {
        }
        /**
         * Callback for adding the Meta box to the admin page
         *
         */
        public function addEventBox()
        {
        }
        /**
         * Include the event editor meta box.
         *
         */
        public function eventMetaBox()
        {
        }
        /**
         * Get the date string (shortened).
         *
         * @param string $date The date.
         *
         * @return string The pretty (and shortened) date.
         */
        public function getDateStringShortened($date)
        {
        }
        /**
         * Return the next tab index
         *
         */
        public function tabIndex()
        {
        }
        /**
         * Check whether a post is an event.
         *
         * @param int|WP_Post The event/post id or object.
         *
         * @return bool Is it an event?
         */
        public function isEvent($event)
        {
        }
        /**
         * Check whether a post is a venue.
         *
         * @param int|WP_Post The venue/post id or object.
         *
         * @return bool Is it a venue?
         */
        public function isVenue($postId = \null)
        {
        }
        /**
         * Check whether a post is an organizer.
         *
         * @param int|WP_Post The organizer/post id or object.
         *
         * @return bool Is it an organizer?
         */
        public function isOrganizer($postId = \null)
        {
        }
        /**
         * Modify the WHERE clause of query when fetching next/prev posts so events with identical times are not excluded
         *
         * This method ensures that when viewing single events that occur at a given time, other events
         * that occur at the exact same time are are not excluded from the prev/next links
         *
         * @since 4.0.2
         *
         * @param string $where_sql WHERE SQL statement
         *
         * @return string
         */
        public function get_closest_event_where($where_sql, \WP_Query $query)
        {
        }
        /**
         * Get the prev/next post for a given event. Ordered by start date instead of ID.
         *
         * @param WP_Post $post The post/event.
         * @param string  $mode Either 'next' or 'previous'.
         *
         * @return null|WP_Post
         */
        public function get_closest_event($post, $mode = 'next')
        {
        }
        /**
         * Get a "previous/next post" link for events. Ordered by start date instead of ID.
         *
         * @param WP_Post $post The post/event.
         * @param string  $mode Either 'next' or 'previous'.
         * @param mixed   $anchor
         *
         * @return string The link (with <a> tags).
         */
        public function get_event_link($post, $mode = 'next', $anchor = \false)
        {
        }
        /**
         * Add meta links to the Plugins list page.
         *
         * @param array  $links The current action links.
         * @param string $file  The plugin to see if we are on TEC.
         *
         * @return array The modified action links array.
         */
        public function addMetaLinks($links, $file)
        {
        }
        /**
         * Register the dashboard widget.
         *
         */
        public function dashboardWidget()
        {
        }
        /**
         * Echo the dashboard widget.
         *
         * @param int $items
         *
         */
        public function outputDashboardWidget($items = 10)
        {
        }
        /**
         * Set the class property postExceptionThrown.
         */
        public function setPostExceptionThrown($thrown)
        {
        }
        /**
         * Get the thrown post exception.
         *
         * @return mixed
         */
        public function getPostExceptionThrown()
        {
        }
        /**
         * Echoes upsell stuff, if it should.
         *
         * @param int $postId
         *
         */
        public function maybeShowMetaUpsell($postId)
        {
        }
        /**
         * Helper function for getting Post Id. Accepts null or a post id. If no $post object exists, returns false to avoid a PHP NOTICE
         *
         * @param int $postId (optional)
         *
         * @return int post ID
         */
        public static function postIdHelper($postId = \null)
        {
        }
        /**
         * Add the buttons/dropdown to the admin toolbar
         *
         * @return null
         */
        public function add_toolbar_items()
        {
        }
        /**
         * Displays the View Calendar link at the top of the Events list in admin.
         *
         */
        public function addViewCalendar()
        {
        }
        /**
         * Set the menu-edit-page to default display the events-related items.
         *
         */
        public function setInitialMenuMetaBoxes()
        {
        }
        /**
         * Add links to the plugins row
         *
         * @param $actions
         *
         * @return mixed
         * @todo move to an admin class
         */
        public function addLinksToPluginActions($actions)
        {
        }
        /**
         * Set up the list view in the view selector in the tribe events bar.
         *
         * @param array $views The current views array.
         *
         * @return array The modified views array.
         */
        public function setup_listview_in_bar($views)
        {
        }
        /**
         * Set up the calendar view in the view selector in the tribe events bar.
         *
         * @param array $views The current views array.
         *
         * @return array The modified views array.
         */
        public function setup_gridview_in_bar($views)
        {
        }
        /**
         * Add day view to the views selector in the tribe events bar.
         *
         * @param array $views The current array of views registered to the tribe bar.
         *
         * @return array The views registered with day view added.
         */
        public function setup_dayview_in_bar($views)
        {
        }
        /**
         * Set up the keyword search in the tribe events bar.
         *
         * @param array $filters The current filters in the bar array.
         *
         * @return array The modified filters array.
         */
        public function setup_keyword_search_in_bar($filters)
        {
        }
        /**
         * Set up the date search in the tribe events bar.
         *
         * @param array $filters The current filters in the bar array.
         *
         * @return array The modified filters array.
         */
        public function setup_date_search_in_bar($filters)
        {
        }
        /**
         * Removes views that have been deselected in the Template Settings as hidden from the view array.
         *
         * @param array $views The current views array.
         * @param bool  $visible
         *
         * @return array The new views array.
         */
        public function remove_hidden_views($views, $visible = \true)
        {
        }
        /**
         * Disable the canonical redirect if tribe_paged is set
         *
         * @param WP_Query $query The current query object.
         *
         * @return WP_Query The modified query object.
         */
        public function set_tribe_paged($query)
        {
        }
        /**
         * Add filters to register custom cron schedules
         *
         */
        public function filter_cron_schedules()
        {
        }
        /**
         * Add a new scheduled task interval (of 30mins).
         *
         * @param  array $schedules
         * @return array
         */
        public function register_30min_interval($schedules)
        {
        }
        /**
         * Facilitates the import of events in WXR format (ie, via the core WP importer).
         *
         * When WP imports posts it avoids duplication by comparing the post name, date and
         * type of each. Once a post has been imported, if another post matching the above
         * criteria is found it is discarded.
         *
         * In the case of recurring events this would cause all but the first in a series
         * to be discarded and so we workaround the problem by altering the title (and
         * restoring it afterwards - during "wp_import_post_data_processed").
         *
         * We apply this to *all* events being imported because we also need to cater for
         * a scenario where events that were originally created as part of a set of
         * recurring events may later have been broken out of the chain into standalone
         * events (otherwise we could restrict this operation to only those events with
         * a post parent).
         *
         * We're retaining this logic in core (rather than move it to PRO) since it's
         * posible for data from a site running PRO to be imported into a site running only
         * core.
         *
         * @see Tribe__Events__Main::filter_wp_import_data_after()
         *
         * @param array $post
         *
         * @return array
         */
        public function filter_wp_import_data_before($post)
        {
        }
        /**
         * Event titles have been modified by filter_wp_import_data_before().
         * This puts them back how they belong.
         *
         * @param array $post
         *
         * @return array
         * @see Tribe__Events__Main::filter_wp_import_data_before()
         */
        public function filter_wp_import_data_after($post)
        {
        }
        /**
         * Registers the list widget
         */
        public function register_list_widget()
        {
        }
        /**
         * Inject TEC specific setting fields into the general tab
         *
         * @param array $general_tab_fields Fields for the general settings tab
         *
         * @return array
         */
        public function general_settings_tab_fields($general_tab_fields)
        {
        }
        /**
         * Inject TEC specific setting fields into the display tab
         *
         * @param array $display_tab_fields Fields for the display settings tab
         *
         * @return array
         */
        public function display_settings_tab_fields($display_tab_fields)
        {
        }
        /**
         * When TEC is activated, the Events top level menu item in the dashboard needs the post_type appended to it
         *
         * @param string $url Settings URL to filter
         *
         * @return string
         */
        public function tribe_settings_url($url)
        {
        }
        /**
         * Adds post types to the post_types array used to determine if on a post type screen
         *
         * @param array $post_types Collection of post types
         *
         * @return array
         */
        public function is_post_type_screen_post_types($post_types)
        {
        }
        /**
         * If tickets don't have an end date, let's provide the end date from the event
         *
         * @param string $date
         * @param int $post_id
         *
         * @return string
         */
        public function default_end_date_for_tickets($date, $post_id)
        {
        }
        /**
         * Set the currency symbol from tribe_events meta data if available
         *
         * @param boolean $currency_symbol Currency symbol to use
         * @param int $post_id Post ID
         *
         * @return string
         */
        public function maybe_set_currency_symbol_with_post($currency_symbol, $post_id)
        {
        }
        /**
         * Set the currency position from tribe_events meta data if available
         *
         * @param boolean $reverse_position Whether to reverse the location of the currency symbol
         * @param int $post_id Post ID
         *
         * @return boolean
         */
        public function maybe_set_currency_position_with_post($reverse_position, $post_id)
        {
        }
        /**
         * Filters the chunkable post types.
         *
         * @param array $post_types
         * @return array The filtered post types
         */
        public function filter_meta_chunker_post_types(array $post_types)
        {
        }
        /************************
         *                      *
         *  Deprecated Methods  *
         *                      *
         ************************/
        /**
         * Make sure we are loading a style for all logged-in users when we have the admin menu
         *
         * @deprecated 4.6.21
         *
         * @return void
         */
        public function enqueue_wp_admin_menu_style()
        {
        }
        /**
         * Load asset packages.
         *
         * @deprecated 4.6.21
         */
        public function loadStyle()
        {
        }
        /**
         * Add admin scripts and styles
         *
         * @deprecated 4.6.21
         */
        public function add_admin_assets()
        {
        }
        /**
         * Compatibility fix: some plugins enqueue jQuery UI/other styles on all post screens,
         * breaking our own custom styling of event editor components such as the datepicker.
         *
         * Needs to execute late enough during admin_enqueue_scripts that the items we are removing
         * have already been registered and enqueued.
         *
         * @deprecated 4.6.21
         *
         * @see https://github.com/easydigitaldownloads/easy-digital-downloads/issues/3033
         */
        public function asset_fixes()
        {
        }
        /**
         * Localize admin.
         *
         * @deprecated 4.6.21
         *
         * @return array
         */
        public function localizeAdmin()
        {
        }
        /**
         * Output localized admin javascript
         *
         * @deprecated 4.6.21
         */
        public function printLocalizedAdmin()
        {
        }
        /**
         * Modify the post type args to set Dashicon if we're in WP 3.8+
         *
         * @deprecated 4.6.21
         *
         * @return array post type args
         **/
        public function setDashicon($postTypeArgs)
        {
        }
        /**
         * ensure only one venue or organizer is created during post preview
         * subsequent previews will reuse that same post
         *
         *
         * ensure that preview post is the one that's used when the event is published,
         * unless we're publishing with a saved venue
         *
         * @param $post_type can be 'venue' or 'organizer'
         */
        protected function manage_preview_metapost($post_type, $event_id)
        {
        }
        /**
         * Prevents duplicate venues or organizers when previewing an event.
         *
         *
         * @since 4.5.1
         */
        public function maybe_add_preview_venues_and_organizers()
        {
        }
        /**
         * Specify the "preview venue" to link to an event.
         *
         *
         * @since 4.5.1
         *
         * @param int $event_id The ID of the event being previewed.
         */
        public function add_preview_venues($event_id)
        {
        }
        /**
         * Specify the "preview organizer" to link to an event.
         *
         *
         * @since 4.5.1
         *
         * @param int $event_id The ID of the event being previewed.
         */
        public function add_preview_organizers($event_id)
        {
        }
        /**
         * Identifies "preview" venues as duplicates and worthy of later deletion.
         *
         *
         * @since 4.5.1
         *
         * @param int $venue_id ID of venue being identified as a duplicate.
         * @param int $event_id ID of event being previewed.
         */
        public function link_preview_venue_to_event($venue_id, $event_id)
        {
        }
        /**
         * Identifies "preview" venues as duplicates and worthy of later deletion.
         *
         *
         * @since 4.5.1
         *
         * @param int $venue_id ID of venue being identified as a duplicate.
         * @param int $event_id ID of event being previewed.
         */
        public function link_preview_organizer_to_event($organizer_ids, $event_id)
        {
        }
        /**
         * Removes "preview" venues on a given event if any exist.
         *
         *
         * @since 4.5.1
         *
         * @param int $event_id The event ID whose preview venues to remove.
         * @param bool $delete_meta Whether to delete existing _EventVenueID
         */
        public function remove_preview_venues($event_id, $delete_meta = \false)
        {
        }
        /**
         * Removes "preview" organizers on a given event if any exist.
         *
         *
         * @since 4.5.1
         *
         * @param int $event_id The event ID whose preview organizers to remove.
         * @param bool $delete_meta Whether to delete existing _EventOrganizerID
         */
        public function remove_preview_organizers($event_id, $delete_meta = \false)
        {
        }
        /**
         * Fetches and verify if we had a delayed activation
         *
         * @deprecated 4.8
         *
         * @since  4.7
         *
         * @return boolean [description]
         */
        public function is_delayed_activation()
        {
        }
        /**
         * Checks if currently loaded Common Lib version is incompatible with The Events Calendar
         * Sets a transient flag for us to be able to trigger plugin activation hooks on a later request
         *
         * @deprecated 4.8
         *
         * @since  4.7
         *
         * @return bool
         */
        public function maybe_delay_activation_if_outdated_common()
        {
        }
        /**
         * Check add-ons to make sure they are supported by currently running TEC version.
         *
         * @deprecated 4.8
         *
         */
        public function checkAddOnCompatibility()
        {
        }
        /**
         * displays the saved venue dropdown in the event metabox
         * Used to be a PRO only feature, but as of 3.0, it is part of Core.
         *
         * @deprecated 4.4
         *
         * @param int $post_id the event ID for which to create the dropdown
         */
        public function displayEventVenueDropdown($post_id)
        {
        }
        /**
         * displays the saved organizer dropdown in the event metabox
         * Used to be a PRO only feature, but as of 3.0, it is part of Core.
         *
         * @deprecated 4.4
         *
         * @param int $post_id the event ID for which to create the dropdown
         *
         */
        public function displayEventOrganizerDropdown($post_id)
        {
        }
        /**
         * Method to initialize Common Object
         *
         * @deprecated 4.3.4
         *
         * @return Tribe__Main
         */
        public function common()
        {
        }
        /**
         * Load the text domain.
         *
         * @deprecated 4.3.4
         *
         */
        public function loadTextDomain()
        {
        }
        /**
         * Init the settings API and add a hook to add your own setting tabs (disused since 4.3,
         * does nothing when called).
         *
         * @deprecated 4.3
         *
         */
        public function initOptions()
        {
        }
        /**
         * Sets the globally shared `$_tribe_meta_factory` object
         *
         * @deprecated 4.3
         *
         */
        public function set_meta_factory_global()
        {
        }
        /**
         * helper function for displaying the saved venue dropdown
         * Used to be a PRO only feature, but as of 3.0, it is part of Core.
         *
         * @deprecated 4.2
         *
         * @param mixed  $current the current saved venue
         * @param string $name    the name value for the field
         */
        public function saved_venues_dropdown($current = \null, $name = 'venue[VenueID]')
        {
        }
        /**
         * helper function for displaying the saved organizer dropdown
         * Used to be a PRO only feature, but as of 3.0, it is part of Core.
         *
         * @deprecated 4.2
         *
         * @param mixed  $current the current saved venue
         * @param string $name    the name value for the field
         */
        public function saved_organizers_dropdown($current = \null, $name = 'organizer[OrganizerID]')
        {
        }
        /**
         * When the edit-tags.php screen loads, setup filters
         * to fix the tagcloud links
         *
         * @deprecated 4.1.2
         *
         */
        public function prepare_to_fix_tagcloud_links()
        {
        }
        /**
         * Tag clouds in the admin don't pass the post type arg
         * when getting the edit link. If we're on the tag admin
         * in Events post type context, make sure we add that
         * arg to the edit tag link
         *
         * @deprecated 4.1.2
         *
         * @param string $link
         * @param int    $term_id
         * @param string $taxonomy
         * @param string $context
         *
         * @return string
         */
        public function add_post_type_to_edit_term_link($link, $term_id, $taxonomy, $context)
        {
        }
        /**
         * Insert an array after a specified key within another array.
         *
         * @deprecated 4.0
         *
         * @param $key
         * @param $source_array
         * @param $insert_array
         *
         * @return array
         */
        public static function array_insert_after_key($key, $source_array, $insert_array)
        {
        }
        /**
         * Insert an array immediately before a specified key within another array.
         *
         * @deprecated 4.0
         *
         * @param $key
         * @param $source_array
         * @param $insert_array
         *
         * @return array
         */
        public static function array_insert_before_key($key, $source_array, $insert_array)
        {
        }
        /**
         * Create setting tabs
         *
         * @deprecated 4.0
         *
         */
        public function doSettingTabs()
        {
        }
        /**
         * Create the help tab
         *
         * @deprecated 4.0
         *
         */
        public function doHelpTab()
        {
        }
        /**
         * Get taxonomy rewrite slug.
         *
         * This method returns a concatenation of the base rewrite slug (ie "events") and the taxonomy slug
         * (ie "category"). If you only wish the taxonomy slug itself, you should call the get_tax_slug()
         * method.
         *
         * @deprecated 4.0 please use getRewriteSlug() and get_category_slug() instead
         *
         * @return string
         */
        public function getTaxRewriteSlug()
        {
        }
        /**
         * Get tag rewrite slug.
         *
         * This method returns a concatenation of the base rewrite slug (ie "events") and the tag taxonomy slug
         * (ie "tag"). If you only wish the taxonomy slug itself, you should call the get_tag_slug()
         * method.
         *
         * @deprecated 4.0 please use getRewriteSlug() and get_tag_slug() instead
         *
         * @return string
         */
        public function getTagRewriteSlug()
        {
        }
        /**
         * Get all options for the Events Calendar
         *
         * @deprecated 4.0
         *
         * @return array of options
         */
        public static function getOptions()
        {
        }
        /**
         * Get value for a specific option
         *
         * @deprecated 4.0
         *
         * @param string $optionName name of option
         * @param string $default    default value
         *
         * @return mixed results of option query
         */
        public static function getOption($optionName, $default = '')
        {
        }
        /**
         * Saves the options for the plugin
         *
         * @deprecated 4.0
         *
         * @param array $options formatted the same as from getOptions()
         * @param bool  $apply_filters
         *
         */
        public function setOptions($options, $apply_filters = \true)
        {
        }
        /**
         * Set an option
         *
         * @deprecated 4.0
         *
         * @param string $name
         * @param mixed  $value
         *
         */
        public function setOption($name, $value)
        {
        }
        /**
         * Get all network options for the Events Calendar
         *
         * @deprecated 4.0
         *
         * @return array of options
         */
        public static function getNetworkOptions()
        {
        }
        /**
         * Get value for a specific network option
         *
         * @deprecated 4.0
         *
         * @param string $optionName name of option
         * @param string $default    default value
         *
         * @return mixed results of option query
         */
        public function getNetworkOption($optionName, $default = '')
        {
        }
        /**
         * Saves the network options for the plugin
         *
         * @deprecated 4.0
         *
         * @param array $options formatted the same as from getOptions()
         * @param bool  $apply_filters
         *
         */
        public function setNetworkOptions($options, $apply_filters = \true)
        {
        }
        /**
         * Add the network admin options page
         *
         * @deprecated 4.0
         *
         */
        public function addNetworkOptionsPage()
        {
        }
        /**
         * Render network admin options view
         *
         * @deprecated 4.0
         *
         */
        public function doNetworkSettingTab()
        {
        }
        /**
         * Save hidden tabs
         *
         * @deprecated 4.0
         *
         */
        public function saveAllTabsHidden()
        {
        }
        /**
         * Truncate a given string.
         *
         * @deprecated 4.0
         *
         * @param string $text           The text to truncate.
         * @param int    $excerpt_length How long you want it to be truncated to.
         *
         * @return string The truncated text.
         */
        public function truncate($text, $excerpt_length = 44)
        {
        }
        /**
         * Tribe debug function. usage: Tribe__Debug::debug( 'Message', $data, 'log' );
         *
         * @deprecated 4.0
         *
         * @param string      $title  Message to display in log
         * @param string|bool $data   Optional data to display
         * @param string      $format Optional format (log|warning|error|notice)
         *
         */
        public static function debug($title, $data = \false, $format = 'log')
        {
        }
        /**
         * Render the debug logging to the php error log. This can be over-ridden by removing the filter.
         *
         * @deprecated 4.0
         *
         * @param string      $title  - message to display in log
         * @param string|bool $data   - optional data to display
         * @param string      $format - optional format (log|warning|error|notice)
         *
         */
        public function renderDebug($title, $data = \false, $format = 'log')
        {
        }
        /**
         * Define an admin notice
         *
         * @deprecated 4.0
         *
         * @param string $key
         * @param string $notice
         *
         * @return bool
         */
        public static function setNotice($key, $notice)
        {
        }
        /**
         * Check to see if an admin notice exists
         *
         * @deprecated 4.0
         *
         * @param string $key
         *
         * @return bool
         */
        public static function isNotice($key)
        {
        }
        /**
         * Remove an admin notice
         *
         * @deprecated 4.0
         *
         * @param string $key
         *
         * @return bool
         */
        public static function removeNotice($key)
        {
        }
        /**
         * Get the admin notices
         *
         * @deprecated 4.0
         *
         * @return array
         */
        public static function getNotices()
        {
        }
        /**
         * Add help menu item to the admin (unless blocked via network admin settings).
         *
         * @deprecated 4.0
         *
         */
        public function addHelpAdminMenuItem()
        {
        }
        /**
         * Allow programmatic override of defaultValueReplace setting
         *
         * @deprecated 4.0
         *
         * @return boolean
         */
        public function defaultValueReplaceEnabled()
        {
        }
        /**
         * Converts a set of inputs to YYYY-MM-DD HH:MM:SS format for MySQL
         *
         * @deprecated 3.11
         *
         * @param string $date     The date.
         * @param int    $hour     The hour of the day.
         * @param int    $minute   The minute of the hour.
         * @param string $meridian "am" or "pm".
         *
         * @return string The date and time.
         */
        public function dateToTimeStamp($date, $hour, $minute, $meridian)
        {
        }
        /**
         * Ensures date follows proper YYYY-MM-DD format
         * converts /, - and space chars to -
         *
         * @deprecated 4.0
         *
         * @param string $date The date.
         *
         * @return string The cleaned-up date.
         */
        protected function dateHelper($date)
        {
        }
        /**
         * Helper used to test if PRO is present and activated.
         *
         * This method should no longer be used, but is being retained to avoid potential
         * for fatal errors where core is updated before an addon plugin - such as Community
         * Events 3.4 or earlier - which might otherwise occur were it removed completely.
         *
         * @deprecated 3.7
         *
         * @param string $version
         *
         * @return bool
         */
        public static function ecpActive($version = '2.0.7')
        {
        }
        /**
         * Returns the autoloader singleton instance to use in a context-aware manner.
         *
         * @since 4.9.2
         *
         * @return \Tribe__Autoloader Teh singleton common Autoloader instance.
         */
        public function get_autoloader_instance()
        {
        }
        /**
         * Registers the plugin autoload paths in the Common Autoloader instance.
         *
         * @since 4.9.2
         */
        public function register_plugin_autoload_paths()
        {
        }
    }
    class Tribe__Events__Organizer extends \Tribe__Events__Linked_Posts__Base
    {
        const POSTTYPE = 'tribe_organizer';
        /**
         * @var string
         */
        protected $meta_prefix = '_Organizer';
        /**
         * @var string The meta key relating a post of the type managed by the class to events.
         */
        protected $event_meta_key = '_EventOrganizerID';
        /**
         * Args for organizer post type
         * @var array
         */
        public $post_type_args = ['public' => \false, 'rewrite' => ['slug' => 'organizer', 'with_front' => \false], 'show_ui' => \true, 'show_in_menu' => 0, 'supports' => ['title', 'editor'], 'capability_type' => ['tribe_organizer', 'tribe_organizers'], 'map_meta_cap' => \true, 'exclude_from_search' => \true];
        /**
         * @var array
         */
        public static $valid_keys = ['Organizer', 'Phone', 'Email', 'Website'];
        /**
         * @var array A list of the valid meta keys for this linked post.
         */
        public static $meta_keys = ['Phone', 'Email', 'Website'];
        public $singular_organizer_label;
        public $plural_organizer_label;
        protected static $instance;
        /**
         * Returns a singleton of this class
         *
         * @return Tribe__Events__Organizer
         */
        public static function instance()
        {
        }
        /**
         * Tribe__Events__Organizer constructor.
         */
        public function __construct()
        {
        }
        /**
         * Registers the post type
         */
        public function register_post_type()
        {
        }
        /**
         * Filters the post type args for the organizer post type
         *
         * @since 4.2
         *
         * @param array $args Array of linked post type arguments
         * @param string $post_type Linked post type
         *
         * @return array
         */
        public function filter_linked_post_type_args($args, $post_type)
        {
        }
        /**
         * Allow users to specify their own singular label for Organizers
         * @return string
         */
        public function get_organizer_label_singular()
        {
        }
        /**
         * Allow users to specify their own plural label for Organizers
         *
         * @return string
         */
        public function get_organizer_label_plural()
        {
        }
        /**
         * Allow users to specify their own lowercase singular label for Organizers
         * @return string
         */
        public function get_organizer_label_singular_lowercase()
        {
        }
        /**
         * Allow users to specify their own plural label for Organizers
         *
         * @return string
         */
        public function get_organizer_label_plural_lowercase()
        {
        }
        /**
         * Filters the linked post id field
         *
         * @since 4.2
         *
         * @param string $id_field Field name of the field that will hold the ID
         * @param string $post_type Post type of linked post
         */
        public function linked_post_id_field_index($id_field, $post_type)
        {
        }
        /**
         * Filters the linked post name field
         *
         * @since 4.2
         *
         * @param string $name_field Field name of the field that will hold the post name
         * @param string $post_type Post type of linked post
         */
        public function linked_post_name_field_index($name_field, $post_type)
        {
        }
        /**
         * Filters the index that contains the linked post type data during form submission
         *
         * @since 4.2
         *
         * @param string $container Container index that holds submitted data
         * @param string $post_type Post type of linked post
         */
        public function linked_post_type_container($container, $post_type)
        {
        }
        /**
         * Removes anything other than integers from the supplied array of Organizer IDs.
         *
         * @since 4.5.11
         *
         * @param array $organizer_ids An array of post IDs of the current event's attached Organizers.
         * @param int $post_id The current event's post ID.
         *
         * @return array
         */
        public function filter_out_invalid_organizer_ids($organizer_ids, $post_id)
        {
        }
        /**
         * Check to see if any organizer data set
         *
         * @param array $data the organizer data.
         *
         * @return bool If there is ANY organizer data set, return true.
         */
        public function has_organizer_data($data)
        {
        }
        /**
         * Saves the event organizer information passed via an event
         *
         * @param int|null $id ID of event organizer
         * @param array $data The organizer data
         * @param string $post_type The post type
         * @param string $post_status The intended post status
         *
         * @return mixed
         */
        public function save($id, $data, $post_type, $post_status)
        {
        }
        /**
         * Saves organizer meta
         *
         * @param int   $organizerId The organizer ID.
         * @param array $data        The organizer data.
         *
         */
        public function save_meta($organizerId, $data)
        {
        }
        /**
         * Creates a new organizer
         *
         * @param array  $data        The organizer data.
         * @param string $post_status the intended post status.
         * @param bool $avoid_duplicates Whether a check to avoid the insertion of a duplicate organizer
         *                               should be made (`true`) or not (`false`).
         *
         * @return mixed
         */
        public function create($data, $post_status = 'publish', $avoid_duplicates = \false)
        {
        }
        /**
         * Updates an organizer
         *
         * @param int   $organizerId The organizer ID to update.
         * @param array $data        The organizer data.
         *
         * @return int The updated organizer post ID
         *
         * @since 4.6
         */
        public function update($id, $data)
        {
        }
        /**
         * Deletes an organizer
         *
         * @param int  $organizerId  The organizer ID to delete.
         * @param bool $force_delete  Whether or not to bypass the trash when deleting the organizer (see wp_delete_post's $force_delete param)
         *
         */
        public function delete($id, $force_delete = \false)
        {
        }
        /**
         * Returns the default organizers
         *
         * @since 4.2
         *
         * @param int $default Default organizer ID
         * @param string $post_type Post type of form being output
         */
        public function linked_post_default($default, $post_type)
        {
        }
        /**
         * Outputs the Organizer form fields for creating new organizers
         *
         * @since 4.2
         *
         * @param string $post_type Post type of form being output
         */
        public function linked_post_new_form($post_type)
        {
        }
        /**
         * Returns an array of post fields that should be used to spot possible duplicates.
         *
         * @return array An array of post fields to matching strategy in the format
         *               [ <post_field> => [ 'match' => <strategy> ] ]
         *
         * @see Tribe__Duplicate__Strategy_Factory for supported strategies
         */
        protected function get_duplicate_post_fields()
        {
        }
        /**
         * Returns an array of post custom fields that should be used to spot possible duplicates.
         *
         * @return array An array of post fields to matching strategy in the format
         *               [ <custom_field> => [ 'match' => <strategy> ] ]
         *
         * @see Tribe__Duplicate__Strategy_Factory for supported strategies
         */
        protected function get_duplicate_custom_fields()
        {
        }
        /**
         * {@inheritDoc}
         *
         * @since 5.3.0 Changed the method to return Organizer post objects, not just organizer names.
         */
        public static function get_fetch_callback($event)
        {
        }
        /**
         * Builds and returns a Closure to lazily fetch an event Organizer names.
         *
         * @since 5.3.0 Changed the name of this method from `get_fetch_callback` to `get_fetch_names_callback`.
         */
        public static function get_fetch_names_callback($event)
        {
        }
    }
    class Tribe__Events__Featured_Events
    {
        const FEATURED_EVENT_KEY = '_tribe_featured';
        /**
         * Marks an event as featured.
         *
         * @param int|WP_Post $event
         *
         * @return bool
         */
        public function feature($event = \null)
        {
        }
        /**
         * Clears the featured status of an event.
         *
         * @param int|WP_Post $event
         *
         * @return bool
         */
        public function unfeature($event = \null)
        {
        }
        /**
         * Confirms if an event is featured.
         * @param int|WP_Post $event
         *
         * @return bool
         */
        public function is_featured($event = \null)
        {
        }
        /**
         * Indicates is the specified query (or the current global WP_Query object if not
         * specified) relates to featured events.
         *
         * @param WP_Query|null $query
         *
         * @return bool
         */
        public function is_featured_query(\WP_Query $query = \null)
        {
        }
        /**
         * Indicates if 'featured' is set to a positive value either in the URL query
         * or the posted data (if any).
         *
         * @return bool
         */
        public function featured_events_requested()
        {
        }
    }
    class Tribe__Events__Gutenberg
    {
        /**
         * Extension hooks and initialization; exits if the extension is not authorized by Tribe Common to run.
         *
         * @since  4.6.13
         */
        public function hook()
        {
        }
        /**
         * Checks if we have The Events Calendar Gutenberg Extension active
         *
         * @since  4.6.13
         *
         * @return boolean
         */
        public function is_extension_active()
        {
        }
        /**
         * Checks if we have Gutenberg Project online, only useful while
         * its a external plugin
         *
         * @todo   Revise when Gutenberg is merged into core
         *
         * @since  4.6.13
         *
         * @return boolean
         */
        public function is_gutenberg_active()
        {
        }
        /**
         * Checks if we have Editor Block active
         *
         * @since  4.6.13
         *
         * @return boolean
         */
        public function is_blocks_editor_active()
        {
        }
        /**
         * Checks if we should display Event Metabox fields
         *
         * Currently only used for fields that we want to hide because they
         * already have a block to replace.
         *
         * @since  4.6.25
         *
         * @return boolean
         */
        public function should_display()
        {
        }
        /**
         * Checks if we are on the classic editor page
         *
         * @since  4.6.26
         *
         * @return boolean
         */
        public function is_classic_editor_page()
        {
        }
        /**
         * HTML for the notice from Gutenberg Extension download
         *
         * @since  4.6.13
         *
         * @return string
         */
        public function notice()
        {
        }
    }
    /**
     * Setup the Event Details Shortcode to be able to place the Details for a Event on other pages
     *
     * @since 4.1
     */
    class Tribe__Events__Shortcode__Event_Details
    {
        /**
         * Static Singleton Factory Method
         *
         * @since  4.1
         * @return Tribe__Events__Shortcode__Event_Details
         */
        public static function instance()
        {
        }
        /**
         * Add the necessary hooks as the correct moment in WordPress
         *
         * @since  4.1
         * @return  void
         */
        public function hook()
        {
        }
        /**
         * Static private variable holding this Shortcode Namespace, which should always be "tribe"
         *
         * @since 4.1
         * @var string
         */
        private $nspace = 'tribe';
        /**
         * Static private variable holding this Shortcode Slug
         *
         * @since 4.1
         * @var string
         */
        private $slug = 'event-details';
        /**
         * Creates the Shortcode tag based on the static variables $nspace and $slug
         *
         * @since 4.1
         * @return string
         */
        public function get_shortcode_tag()
        {
        }
        /**
         * Gets the Shortcode slug allowing it to be filtered
         *
         * @since 4.1
         * @return string
         */
        public function get_shortcode_slug()
        {
        }
        /**
         * This will be called at hook "init" to allow other plugins and themes to hook to shortcode easily
         *
         * @since 4.1
         * @return void
         */
        public function add_shortcode()
        {
        }
        /**
         * Actually create the shortcode output
         *
         * @since  4.1
         *
         * @param  array $args    The Shortcode arguments
         *
         * @return string
         */
        public function do_shortcode($args)
        {
        }
    }
    /**
     * Class Tribe__Events__Google__Maps_API_Key
     *
     * Handles support for the Google Maps API key.
     */
    class Tribe__Events__Google__Maps_API_Key
    {
        /**
         * @var string
         */
        public static $api_key_option_name = 'google_maps_js_api_key';
        /**
         * The Events Calendar's default Google Maps API Key, which supports the Basic Embed API.
         *
         * @since 4.6.24
         *
         * @var string
         */
        public static $default_api_key = 'AIzaSyDNsicAsP6-VuGtAb1O9riI3oc_NOb7IOU';
        /**
         * @var static
         */
        protected static $instance;
        /**
         * The class singleton constructor.
         *
         * @return Tribe__Events__Google__Maps_API_Key
         */
        public static function instance()
        {
        }
        /**
         * Adds Google Maps API key fields to the addon fields.
         *
         * @param array $addon_fields
         *
         * @return array
         */
        public function filter_tribe_addons_tab_fields(array $addon_fields)
        {
        }
        /**
         * Generates the tooltip text for when The Events Calendar's fallback API key is being used instead of a custom one.
         *
         * @since 4.6.24
         *
         * @return string
         */
        public function get_basic_embed_api_tooltip()
        {
        }
        /**
         * Adds the browser key api key to the Google Maps JavaScript API url if set by the user.
         *
         * @param string $js_maps_api_url
         *
         * @return string
         */
        public function filter_tribe_events_google_maps_api($js_maps_api_url)
        {
        }
        public function filter_tribe_events_pro_google_maps_api($js_maps_api_url)
        {
        }
        /**
         * Ensures the Google Maps API Key field in Settings > APIs is always populated with TEC's
         * default API key if no user-supplied key is present.
         *
         * @since 4.6.24
         *
         * @param string $value_string The original HTML string for the input's value attribute.
         * @param string $field_name The name of the field; usually the key of the option it's associated with.
         * @return string The default license key as the input's new value.
         */
        public function populate_field_with_default_api_key($value_string, $field_name)
        {
        }
        /**
         * Ensures the Google Maps API Key field in Settings > APIs shows the correct tooltip text, especially when
         * the auto-populating of the field is done via populate_field_with_default_api_key().
         *
         * @since 4.6.24
         *
         * @param string $tooltip_string The original HTML string for the input's tooltip attribute.
         * @param string $field_name The name of the field; usually the key of the option it's associated with.
         * @return string The default license key as the input's new value.
         */
        public function populate_field_tooltip_with_helper_text($tooltip_string, $field_name)
        {
        }
    }
    /**
     * The Events Calendar Customizer Section Class
     * Month Week View
     *
     * @package The Events Calendar
     * @subpackage Customizer
     * @since 4.4
     */
    final class Tribe__Events__Customizer__Month_Week_View extends \Tribe__Customizer__Section
    {
        /**
         * PHP 5.2 method of creating "instances" of an abstract require this
         *
         * Note: This is the only required method for a Connector to work
         *
         * @return self The dynamic instance of this Class
         */
        public static function instance()
        {
        }
        /**
         * Grab the CSS rules template
         *
         * @return string
         */
        public function get_css_template($template)
        {
        }
        public function create_ghost_settings($settings = [])
        {
        }
        /**
         * A way to apply filters when getting the Customizer options
         * @return array
         */
        public function setup()
        {
        }
        /**
         * Create the Fields/Settings for this sections
         *
         * @param  WP_Customize_Section $section The WordPress section instance
         * @param  WP_Customize_Manager $manager [description]
         *
         * @return void
         */
        public function register_settings(\WP_Customize_Section $section, \WP_Customize_Manager $manager)
        {
        }
        /**
         * Set default values according to the selected stylesheet
         *
         * @since 4.6.19
         *
         * @return void
         */
        public function set_defaults()
        {
        }
    }
    /**
     * The Events Calendar Customizer Section Class
     * Global Elements
     *
     * @package The Events Calendar
     * @subpackage Customizer
     * @since 4.4
     */
    final class Tribe__Events__Customizer__Global_Elements extends \Tribe__Customizer__Section
    {
        /**
         * PHP 5.2 method of creating "instances" of an abstract require this
         *
         * Note: This is the only required method for a Connector to work
         *
         * @return self The dynamic instance of this Class
         */
        public static function instance()
        {
        }
        /**
         * Grab the CSS rules template
         *
         * @return string
         */
        public function get_css_template($template)
        {
        }
        public function create_ghost_settings($settings = [])
        {
        }
        public function setup()
        {
        }
        /**
         * Create the Fields/Settings for this sections
         *
         * @param  WP_Customize_Section $section The WordPress section instance
         * @param  WP_Customize_Manager $manager [description]
         *
         * @return void
         */
        public function register_settings(\WP_Customize_Section $section, \WP_Customize_Manager $manager)
        {
        }
    }
    /**
     * The Events Calendar Customizer Section Class
     * Day List View
     *
     * @package The Events Calendar
     * @subpackage Customizer
     * @since 4.4
     */
    class Tribe__Events__Customizer__Day_List_View extends \Tribe__Customizer__Section
    {
        /**
         * PHP 5.2 method of creating "instances" of an abstract require this
         *
         * Note: This is the only required method for a Connector to work
         *
         * @return self The dynamic instance of this Class
         */
        public static function instance($name = \null)
        {
        }
        /**
         * Grab the CSS rules template
         *
         * @return string
         */
        public function get_css_template($template)
        {
        }
        public function create_ghost_settings($settings = [])
        {
        }
        public function setup()
        {
        }
        /**
         * Create the Fields/Settings for this sections
         *
         * @param  WP_Customize_Section $section The WordPress section instance
         * @param  WP_Customize_Manager $manager [description]
         *
         * @return void
         */
        public function register_settings(\WP_Customize_Section $section, \WP_Customize_Manager $manager)
        {
        }
    }
    /**
     * The Events Calendar Customizer Section Class
     * Single Event
     *
     * @package The Events Calendar
     * @subpackage Customizer
     * @since 4.4
     */
    final class Tribe__Events__Customizer__Single_Event extends \Tribe__Customizer__Section
    {
        /**
         * PHP 5.2 method of creating "instances" of an abstract require this
         *
         * Note: This is the only required method for a Connector to work
         *
         * @return self The dynamic instance of this Class
         */
        public static function instance()
        {
        }
        /**
         * Add the CSS rules template to the `tribe_events_pro_customizer_css_template`
         *
         * @return string
         */
        public function get_css_template($template)
        {
        }
        public function create_ghost_settings($settings = [])
        {
        }
        public function setup()
        {
        }
        /**
         * Create the Fields/Settings for this sections
         *
         * @param  WP_Customize_Section $section The WordPress section instance
         * @param  WP_Customize_Manager $manager [description]
         *
         * @return void
         */
        public function register_settings(\WP_Customize_Section $section, \WP_Customize_Manager $manager)
        {
        }
    }
    /**
     * The Events Calendar Customizer Section Class
     * Widgets
     *
     * @package The Events Calendar
     * @subpackage Customizer
     * @since 4.4
     */
    final class Tribe__Events__Customizer__Widget extends \Tribe__Customizer__Section
    {
        /**
         * PHP 5.2 method of creating "instances" of an abstract require this
         *
         * Note: This is the only required method for a Connector to work
         *
         * @return self The dynamic instance of this Class
         */
        public static function instance()
        {
        }
        /**
         * Grab the CSS rules template
         *
         * @return string
         */
        public function get_css_template($template)
        {
        }
        public function setup()
        {
        }
        /**
         * Create the Fields/Settings for this sections
         *
         * @param  WP_Customize_Section $section The WordPress section instance
         * @param  WP_Customize_Manager $manager [description]
         *
         * @return void
         */
        public function register_settings(\WP_Customize_Section $section, \WP_Customize_Manager $manager)
        {
        }
    }
    /**
     * The Events Calendar Customizer Section Class
     * General Theme
     *
     * @package The Events Calendar
     * @subpackage Customizer
     * @since 4.4
     */
    final class Tribe__Events__Customizer__General_Theme extends \Tribe__Customizer__Section
    {
        /**
         * PHP 5.2 method of creating "instances" of an abstract require this
         *
         * Note: This is the only required method for a Connector to work
         *
         * @return self The dynamic instance of this Class
         */
        public static function instance()
        {
        }
        /**
         * Gets the Colors for the Button background
         *
         * @since  F17.5
         *
         * @param  array  $settings Section array of settings
         * @return string
         */
        protected function get_button_bg_color($settings = [])
        {
        }
        /**
         * Creates the Section ghost settings for Customizer
         *
         * @since  F17.5
         *
         * @param  array  $settings Section array of settings
         * @return array
         */
        public function create_ghost_settings($settings = [])
        {
        }
        /**
         * Grab the CSS rules template
         *
         * @return string
         */
        public function get_css_template($template)
        {
        }
        public function setup()
        {
        }
        /**
         * Create the Fields/Settings for this sections
         *
         * @param  WP_Customize_Section $section The WordPress section instance
         * @param  WP_Customize_Manager $manager [description]
         *
         * @return void
         */
        public function register_settings(\WP_Customize_Section $section, \WP_Customize_Manager $manager)
        {
        }
        /**
         * Get color schemes for featured events
         *
         * @return array
         */
        public function get_featured_color_schemes()
        {
        }
        /**
         * Gets featured color choices as key/value pairs
         *
         * @return array
         */
        public function get_featured_color_choices()
        {
        }
        /**
         * Sanitizes the featured color choices
         *
         * @param string $choice Color choice
         *
         * @return string
         */
        public function sanitize_featured_color_choice($choice)
        {
        }
    }
    /**
     * Rewrite Configuration Class
     * Permalinks magic Happens over here!
     */
    class Tribe__Events__Rewrite extends \Tribe__Rewrite
    {
        /**
         * Constant holding the transient key for delayed triggered flush from activation.
         *
         * If this value is updated make sure you look at the method in the main class of TEC.
         *
         * @see TEC::activate
         *
         * @since 5.0.0.1
         *
         * @var string
         */
        const KEY_DELAYED_FLUSH_REWRITE_RULES = '_tribe_events_delayed_flush_rewrite_rules';
        /**
         * After creating the Hooks on WordPress we lock the usage of the function
         * @var boolean
         */
        protected $hook_lock = \false;
        /**
         * A map providing each current base to its current locale translation.
         *
         * @since 5.1.1
         *
         * @var array<string,string>
         */
        protected $localized_bases = [];
        /**
         * Static Singleton Factory Method
         *
         * @return Tribe__Events__Rewrite
         */
        public static function instance($wp_rewrite = \null)
        {
        }
        /**
         * Generate the Rewrite Rules
         *
         * @param  WP_Rewrite $wp_rewrite WordPress Rewrite that will be modified, pass it by reference (&$wp_rewrite)
         */
        public function filter_generate(\WP_Rewrite $wp_rewrite)
        {
        }
        /**
         * Sets up the rules required by The Events Calendar.
         *
         * This should be called during tribe_events_pre_rewrite, which means other plugins needing to add rules
         * of their own can do so on the same hook at a lower or higher priority, according to how specific
         * those rules are.
         *
         * @param Tribe__Events__Rewrite $rewrite
         */
        public function generate_core_rules(\Tribe__Events__Rewrite $rewrite)
        {
        }
        /**
         * Filters the post permalink to take 3rd party plugins into account.
         *
         * @param  string $permalink Permalink for the post
         * @param  WP_Post $post Post Object
         *
         * @return string      Permalink with the language
         */
        public function filter_post_type_link($permalink, $post)
        {
        }
        /**
         * Checking if WPML is active on this WP
         *
         * @return boolean
         */
        public function is_wpml_active()
        {
        }
        /**
         * Get the base slugs for the Plugin Rewrite rules
         *
         * WARNING: Don't mess with the filters below if you don't know what you are doing
         *
         * @param  string $method Use "regex" to return a Regular Expression with the possible Base Slugs using l10n
         * @return object         Return Base Slugs with l10n variations
         */
        public function get_bases($method = 'regex')
        {
        }
        /**
         * Alias to `$this->add()` but adding the archive base first
         *
         * @param array|string $regex The regular expression to catch the URL
         * @param array  $args  The arguments in which the regular expression "alias" to
         *
         * @return Tribe__Events__Rewrite
         */
        public function archive($regex, $args = array())
        {
        }
        /**
         * Alias to `$this->add()` but adding the singular base first
         *
         * @param array|string $regex The regular expression to catch the URL
         * @param array  $args  The arguments in which the regular expression "alias" to
         *
         * @return Tribe__Events__Rewrite
         */
        public function single($regex, $args = array())
        {
        }
        /**
         * Alias to `$this->add()` but adding the taxonomy base first
         *
         * @param array|string $regex The regular expression to catch the URL
         * @param array  $args  The arguments in which the regular expression "alias" to
         *
         * @return Tribe__Events__Rewrite
         */
        public function tax($regex, $args = array())
        {
        }
        /**
         * Alias to `$this->add()` but adding the tag base first
         *
         * @param array|string $regex The regular expression to catch the URL
         * @param array  $args  The arguments in which the regular expression "alias" to
         *
         * @return Tribe__Events__Rewrite
         */
        public function tag($regex, $args = array())
        {
        }
        protected function remove_hooks()
        {
        }
        protected function add_hooks()
        {
        }
        /**
         * When dealing with flush of rewrite rules we cannot do it from the activation process due to not all classes being
         * loaded just yet. We flag a transient without expiration on activation so that on the next page load we flush the
         * permalinks for the website.
         *
         * @see TEC::activate()
         *
         * @since 5.0.0.1
         *
         * @return void
         */
        public function maybe_delayed_flush_rewrite_rules()
        {
        }
        /**
         * Prevent url_to_postid to run if on the main events page to avoid
         * query conflicts.
         *
         * @since 4.6.15
         *
         * @param string $url The URL from `url_to_postid()`
         * @see [94328]
         *
         * @return int|string $url
         */
        public function filter_url_to_postid($url)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function get_matcher_to_query_var_map()
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function get_localized_matchers()
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function get_dynamic_matchers(array $query_vars)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function get_post_types()
        {
        }
        /**
         * Overrides the base method, from common, to filter the parsed query variables and handle some cases related to
         * the `eventDisplay` query variable.
         *
         * {@inheritDoc}
         */
        public function parse_request($url, array $extra_query_vars = [], $force = \false)
        {
        }
        /**
         * Filters the parsed query vars to take the `eventDisplay` query var into account.
         *
         * When the query variables contain the `eventDisplay=default` variable and we have a different `eventDisplay` value
         * in the query arguments, then use the query arguments `eventDisplay`.
         *
         * @since 4.9.5
         *
         * @param array  $query_vars The query variables, as parsed from the parent method.
         * @param array  $unused     An array of extra query vars, passed as input into the parent method; not used.
         * @param string $url        The input URL.
         *
         * @return array The updated parsed query variables.
         */
        public function filter_rewrite_parse_query_vars(array $query_vars = [], array $unused = [], $url = '')
        {
        }
        /**
         * Adds an entry for an option controlled slug.
         *
         * E.g. the events archive can be changed from `/events` to somethings like `/trainings`.
         *
         * @since 4.9.13
         *
         * @param array  $localized_matchers An array of the current localized matchers.
         * @param string $default_slug       The default slug for the option controlled slug; e.g. `events` for the events
         *                                   archive.
         * @param string $option_name        The name of the Tribe option that stores the modified slug, if any.
         *
         * @return array An entry to add to the localized matchers; this will be an empty array if there's no need to add
         *               an entry..
         */
        protected function get_option_controlled_slug_entry(array $localized_matchers, $default_slug, $option_name)
        {
        }
        /**
         * Returns the map of localized bases for the specified text domains.
         *
         * The bases are the ones used to build the permalinks, the domains are those of the currently activated plugins
         * that include a localized rewrite component.
         *
         * @since 5.1.1
         *
         * @param array<string> $bases   The bases to set up the locale translation for.
         * @param array<string> $domains A list of text domains belonging to the plugins currently active that handle and
         *                               provide support for a localized rewrite component.
         *
         * @return array<string,string> A map relating the bases in their English, lowercase form to their current locale
         *                              translated form.
         */
        public function get_localized_bases(array $bases, array $domains)
        {
        }
        /**
         * Enrich the bases adding the localized ones.
         *
         * Note: the method is not conditioned by the current locale (e.g. do not do this if current locale is en_US) to
         * avoid issues with translation plugins that might filter the locale dynamically.
         *
         * @since 5.1.5
         *
         * @param array<array<string>> $bases The input bases, in the format `[<base> => [<version_1>, <version_2>, ...]]`.
         *
         * @return array<array<string>> The input bases modified to include the localized version of the bases.
         *                              The format is the same as the input: `[<base> => [<version_1>, <version_2>, ...]]`.
         */
        protected function merge_localized_bases(array $bases = [])
        {
        }
    }
    abstract class Tribe__Events__Aggregator__Tabs__Abstract extends \Tribe__Tabbed_View__Tab
    {
        /**
         * Creates a way to include the this tab HTML easily
         *
         * @return string Content of the tab
         */
        public function render()
        {
        }
        /**
         * The constructor for any new Tab on the Aggregator,
         * If you need an action to be hook to any Tab, use this.
         */
        public function __construct()
        {
        }
        /**
         * Fetches the link to this tab
         *
         * @param array|string $args     Query String or Array with the arguments
         * @param boolean      $relative Return a relative URL or absolute
         *
         * @return string
         */
        public function get_url($args = array(), $relative = \false)
        {
        }
        /**
         * Determines if this Tab is currently displayed
         *
         * @return boolean
         */
        public function is_active()
        {
        }
        public function handle_submit()
        {
        }
        /**
         * Validates the meta in relation to the origin.
         *
         * @param string $origin
         * @param array  $meta
         *
         * @return array|WP_Error The updated/validated meta array or A `WP_Error` if the validation failed.
         */
        protected function validate_meta_by_origin($origin, $meta)
        {
        }
        /**
         * Casts a string or int to a timestamp.
         *
         * @param int|string $time
         * @param int        $default The default time that should be used if the conversion of `$time` fails
         *
         * @return int
         */
        protected function to_timestamp($time, $default = '')
        {
        }
    }
    class Tribe__Events__Aggregator__Tabs__History extends \Tribe__Events__Aggregator__Tabs__Abstract
    {
        /**
         * This Tab Ordering priority
         * @var integer
         */
        public $priority = 30;
        /**
         * Static Singleton Holder
         *
         * @var self
         */
        private static $instance;
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        public function __construct()
        {
        }
        /**
         * Adds Screen Options for This Tab
         *
         * @return void
         */
        public function action_screen_options($screen)
        {
        }
        /**
         * Allows the saving for our created Page option
         *
         * @param mixed  $status Which value should be saved, if false will not save
         * @param string $option Name of the option
         * @param mixed  $value  Which value was saved
         *
         * @return mixed
         */
        public function filter_save_screen_options($status, $option, $value)
        {
        }
        public function is_visible()
        {
        }
        public function get_slug()
        {
        }
        public function get_label()
        {
        }
    }
    class Tribe__Events__Aggregator__Tabs__Scheduled extends \Tribe__Events__Aggregator__Tabs__Abstract
    {
        /**
         * Static Singleton Holder
         *
         * @var self
         */
        private static $instance;
        /**
         * To Order the Tabs on the UI you need to change the priority
         * @var integer
         */
        public $priority = 20;
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        public function __construct()
        {
        }
        /**
         * Adds Screen Options for This Tab
         *
         * @return void
         */
        public function action_screen_options($screen)
        {
        }
        /**
         * Allows the saving for our created Page option
         *
         * @param mixed  $status Which value should be saved, if false will not save
         * @param string $option Name of the option
         * @param mixed  $value  Which value was saved
         *
         * @return mixed
         */
        public function filter_save_screen_options($status, $option, $value)
        {
        }
        public function is_visible()
        {
        }
        public function get_slug()
        {
        }
        public function get_label()
        {
        }
        public function handle_request()
        {
        }
        private function handle_post($data = \null)
        {
        }
        public function get_errors_transient_name($nonce)
        {
        }
        private function handle_get()
        {
        }
        /**
         * Error and success messages for delete
         *
         * @param  string  $action  saved, deleted
         * @param  array   $statuses  Which status occurred
         * @return string
         */
        private function action_notice($action, $ids = array(), $error = \null)
        {
        }
        private function action_delete_record($records = array())
        {
        }
        /**
         * Run Imports for a given set of Records
         *
         * @since 4.6.18
         *
         * @param  array  $records
         *
         * @return array
         */
        public function action_run_import($records = [])
        {
        }
        /**
         * Renders the "Missing Aggregator License" notice
         *
         * @return string
         */
        public function maybe_display_aggregator_missing_license_key_message()
        {
        }
    }
    class Tribe__Events__Aggregator__Tabs__New extends \Tribe__Events__Aggregator__Tabs__Abstract
    {
        /**
         * Static Singleton Holder
         *
         * @var self|null
         */
        private static $instance;
        public $priority = 10;
        protected $content_type;
        protected $content_type_plural;
        protected $content_type_object;
        protected $content_post_type;
        protected $messages;
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        public function __construct()
        {
        }
        public function maybe_display_notices()
        {
        }
        public function enqueue_media()
        {
        }
        public function is_visible()
        {
        }
        public function get_slug()
        {
        }
        public function get_label()
        {
        }
        public function handle_submit()
        {
        }
        public function handle_import_finalize($data)
        {
        }
        /**
         * Parses the queue for errors and informations.
         *
         * @param Tribe__Events__Aggregator__Record__Queue_Interface|WP_Error|Tribe__Events__Aggregator__Record__Activity $queue
         *
         * @return array
         */
        public function get_result_messages($queue)
        {
        }
        public function ajax_save_credentials()
        {
        }
        public function ajax_create_import()
        {
        }
        public function ajax_fetch_import()
        {
        }
        /**
         * Renders the "Missing Aggregator License" notice
         *
         * @return string
         */
        public function maybe_display_aggregator_upsell()
        {
        }
        /**
         * Renders the "Eventbrite Tickets" upsell
         *
         * @since 4.6.19
         *
         * @return string
         */
        public function maybe_display_eventbrite_upsell()
        {
        }
        /**
         * Renders the "Expired Aggregator License" notice
         *
         * @return string
         */
        public function render_notice_expired_aggregator_license()
        {
        }
        /**
         * Renders any of the "import complete" messages
         */
        public function render_notice_import_complete()
        {
        }
        /**
         * Renders failed import messages
         */
        public function render_notice_import_failed()
        {
        }
        /**
         * @deprecated 4.6.23
         */
        public function handle_facebook_credentials()
        {
        }
    }
    class Tribe__Events__Aggregator__Tabs__Edit extends \Tribe__Events__Aggregator__Tabs__Abstract
    {
        /**
         * Static Singleton Holder
         *
         * @var self|null
         */
        private static $instance;
        public $priority = 10;
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        public function __construct()
        {
        }
        public function enqueue_media()
        {
        }
        public function is_visible()
        {
        }
        public function get_slug()
        {
        }
        public function get_label()
        {
        }
        public function handle_submit()
        {
        }
        /**
         * Finalizes the saving of a scheduled import
         *
         * @param Tribe__Events__Aggregator__Record__Abstract $record Record object
         * @param array $post_data Massaged POSTed data
         * @param array $meta Meta to be saved to the schedule
         */
        public function finalize_schedule_edit($record, $post_data, $meta)
        {
        }
        /**
         * Handles the previewing of a scheduled import edit
         */
        public function ajax_preview_import()
        {
        }
    }
    class Tribe__Events__Aggregator__Tabs__Favorite extends \Tribe__Events__Aggregator__Tabs__Abstract
    {
        /**
         * Static Singleton Holder
         *
         * @var self|null
         */
        private static $instance;
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        public $priority = 40;
        public function is_visible()
        {
        }
        public function get_slug()
        {
        }
        public function get_label()
        {
        }
    }
    class Tribe__Events__Aggregator__Errors
    {
        /**
         * Comment Type for EA errors
         *
         * @since  4.3.2
         *
         * @var string
         */
        public static $comment_type = 'tribe-ea-error';
        /**
         * Static Singleton Holder
         *
         * @var self
         */
        private static $instance;
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        /**
         * Setup all the hooks and filters
         *
         * @return void
         */
        private function __construct()
        {
        }
        /**
         * Exclude Aggregator Errors (comments) from showing in Recent Comments widgets
         * Note: On WP 4.1 and above
         *
         * @since 4.3.2
         *
         * @param obj $query WordPress Comment Query Object
         *
         * @return void
         */
        public function hide_error_comments($query)
        {
        }
        /**
         * Exclude Aggregator Errors (comments) from showing in Recent Comments widgets
         * Note: On Pre WP 4.1
         *
         * @since 4.3.2
         *
         * @param array $clauses Comment clauses for comment query
         * @param obj $wp_comment_query WordPress Comment Query Object
         *
         * @return array $clauses Updated comment clauses
         */
        public function hide_error_comments_pre_41($clauses, $wp_comment_query)
        {
        }
        /**
         * Exclude Aggregator Errors (comments) from showing in comment feeds
         *
         * @since 4.3.2
         *
         * @param array $where
         * @param obj $wp_comment_query WordPress Comment Query Object
         *
         * @return array $where
         */
        public function hide_error_comments_from_feeds($where, $wp_comment_query)
        {
        }
        /**
         * Remove Aggregator Error Comments from the wp_count_comments function
         *
         * @since 4.3.2
         *
         * @param array $stats (empty from core filter)
         * @param int $post_id Post ID
         *
         * @return array Array of comment counts
         */
        public function remove_error_comments_from_wp_counts($stats, $post_id)
        {
        }
        /**
         * Maybe build message from args
         *
         * @since 4.3
         * @param string $message
         * @param array $args Message args
         *
         * @return string
         */
        public static function build($message, $args = [])
        {
        }
    }
    class Tribe__Events__Aggregator__Tabs extends \Tribe__Tabbed_View
    {
        /**
         * Static Singleton Holder
         *
         * @var self|null
         */
        private static $instance;
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        /**
         * A private method to prevent it to be created twice.
         * It will add the methods and setup any dependencies
         */
        private function __construct()
        {
        }
        /**
         * Filter the Admin page tile and add Tab Name
         *
         * @param  string $admin_title Full Admin Title
         * @param  string $title       Original Title from the Page
         *
         * @return string
         */
        public function filter_admin_title($admin_title, $title)
        {
        }
        /**
         * Register a new tab on the Aggregator page
         *
         * @param  string|object   $tab  A list of
         * @return object|boolean        The instance of the tab or false if we couldn't register
         */
        public function register($tab)
        {
        }
        /**
         * Checks if a given Tab (slug) is active
         *
         * @param  string  $slug The Slug of the Tab
         *
         * @return boolean       Is this tab active?
         */
        public function is_active($slug = \null)
        {
        }
        /**
         * @return mixed|void
         */
        public function get_default_tab()
        {
        }
        /**
         * Returns the main admin settings URL.
         *
         * @param array|string $args     Query String or Array with the arguments
         * @param boolean      $relative Return a relative URL or absolute
         *
         * @return string
         */
        public function get_url($args, $relative)
        {
        }
    }
    class Tribe__Events__Aggregator__Event
    {
        /**
         * Slug used to mark Event Orgin on `_EventOrigin` meta
         *
         * @var string
         */
        public static $event_origin = 'event-aggregator';
        /**
         * Key of the Meta to store the Event origin inside of Aggregator
         *
         * @var string
         */
        public static $origin_key = '_tribe_aggregator_origin';
        /**
         * Key of the Meta to store the Record that imported this Event
         *
         * @var string
         */
        public static $record_key = '_tribe_aggregator_record';
        /**
         * Key of the Meta to store the Record's source
         *
         * @var string
         */
        public static $source_key = '_tribe_aggregator_source';
        /**
         * Key of the Meta to store the Post Global ID
         *
         * @var string
         */
        public static $global_id_key = '_tribe_aggregator_global_id';
        /**
         * Key of the Meta to store the Post Global ID lineage
         *
         * @var string
         */
        public static $global_id_lineage_key = '_tribe_aggregator_global_id_lineage';
        /**
         * Key of the Meta to store the Record's last import date
         *
         * @var string
         */
        public static $updated_key = '_tribe_aggregator_updated';
        public $data;
        public function __construct($data = [])
        {
        }
        public static function translate_service_data($item)
        {
        }
        /**
         * Fetch all existing unique IDs from the provided list that exist in meta
         *
         * @param string $key Meta key
         * @param array $values Array of meta values
         *
         * @return array
         */
        public function get_existing_ids($origin, $values)
        {
        }
        /**
         * Fetch the Post ID for a given Global ID
         *
         * @param array $value The Global ID we are searching for
         *
         * @return bool|WP_Post
         */
        public static function get_post_by_meta($key, $value = \null)
        {
        }
        /**
         * Preserves changed fields by resetting array indexes back to the stored post/meta values
         *
         * @param array $data Event array to reset
         *
         * @return array
         */
        public static function preserve_changed_fields($data)
        {
        }
    }
    class Tribe__Events__Aggregator__Settings
    {
        /** * @var Tribe__Events__Aggregator__Settings Event Aggregator settings bootstrap class
         */
        protected static $instance;
        /**
         * Default update authority setting
         *
         * @var string
         */
        public static $default_update_authority = 'overwrite';
        /**
         * Static Singleton Factory Method
         *
         * @return Tribe__Events__Aggregator__Settings
         */
        public static function instance()
        {
        }
        /**
         * A private method to prevent it to be created twice.
         * It will add the methods and setup any dependecies
         *
         * Note: This should load on `plugins_loaded@P10`
         */
        public function __construct()
        {
        }
        /**
         * Hooked to current_screen, this method identifies whether or not eb credentials should be cleared
         *
         * @param WP_Screen $screen
         */
        public function maybe_clear_eb_credentials($screen)
        {
        }
        /**
         * Get EB Security Key
         *
         * @since 4.6.18
         *
         */
        public function get_eb_security_key()
        {
        }
        /**
         * Check if Security Key
         *
         * @since 4.6.18
         *
         */
        public function has_eb_security_key()
        {
        }
        /**
         * Handle Checking if there is a Security Key and Saving It
         *
         * @since 4.6.18
         *
         * @param object $eb_authorized object from EA service for EB Validation
         *
         * @return bool
         */
        public function handle_eventbrite_security_key($eb_authorized)
        {
        }
        /**
         * Disconnect Eventbrite from EA
         *
         * @since 4.6.18
         *
         */
        public function clear_eb_credentials()
        {
        }
        /**
         * Given a URL, tack on the parts of the URL that gets used to disconnect Eventbrite
         *
         * @param string $url
         *
         * @return string
         */
        public function build_disconnect_eventbrite_url($url)
        {
        }
        /**
         * Check if the Eventbrite credentials are connected in EA
         *
         * @return bool Whether the Eventbrite credentials are valid
         */
        public function is_ea_authorized_for_eb()
        {
        }
        /**
         * Hooked to current_screen, this method identifies whether or not eb credentials should be cleared
         *
         * @since 4.9.6
         *
         * @param WP_Screen $screen The current screen instance.
         */
        public function maybe_clear_meetup_credentials($screen)
        {
        }
        /**
         * Get EB Security Key
         *
         * @since 4.9.6
         *
         */
        public function get_meetup_security_key()
        {
        }
        /**
         * Check if Security Key
         *
         * @since 4.9.6
         *
         * @return bool
         *
         */
        public function has_meetup_security_key()
        {
        }
        /**
         * Handle Checking if there is a Security Key and Saving It
         *
         * @since 4.9.6
         *
         * @param object $eb_authorized object from EA service for Meetup Validation
         *
         * @return bool
         */
        public function handle_meetup_security_key($meetup_authorized)
        {
        }
        /**
         * Disconnect Meetup from EA
         *
         * @since 4.9.6
         */
        public function clear_meetup_credentials()
        {
        }
        /**
         * Given a URL, tack on the parts of the URL that gets used to disconnect Meetup
         *
         * @param string $url
         *
         * @since 4.9.6
         *
         * @return string The URL to issue a Meeetup disconnect request to EA Service.
         */
        public function build_disconnect_meetup_url($url)
        {
        }
        /**
         * Check if the Meetup API credentials are connected in EA and correctly set.
         *
         * @since 4.9.6
         *
         * @return bool Whether the Meetup credentials are valid or not.
         */
        public function is_ea_authorized_for_meetup()
        {
        }
        public function do_import_settings_tab()
        {
        }
        public function get_all_default_settings()
        {
        }
        /**
         * Returns the default update authority for imports
         *
         * Origin default settings trump global settings
         *
         * @param string $origin Origin
         *
         * @return string
         */
        public function default_update_authority($origin = \null)
        {
        }
        /**
         * Returns the default post status for imports
         *
         * Origin default settings trump global settings
         *
         * @param string $origin Origin
         *
         * @return string
         */
        public function default_post_status($origin = \null)
        {
        }
        /**
         * Returns the default category for imports
         *
         * Origin default settings trump global settings
         *
         * @param string $origin Origin
         *
         * @return string
         */
        public function default_category($origin = \null)
        {
        }
        /**
         * Returns the default map setting for imports
         *
         * Origin default settings trump global settings
         *
         * @param string $origin Origin
         *
         * @return string
         */
        public function default_map($origin = \null)
        {
        }
        /**
         * Returns the default value for an origin regarding applicable event settings.
         *
         * Event setttings are those settings related to an event presentation like Show Google Map, Hide from Listings and so on.
         *
         * @param string $origin The origin to look up the settings for.
         *
         * @return string The option value.
         */
        public function default_settings_import($origin)
        {
        }
        /**
         * Returns the range options available for URL imports.
         *
         * Titles are meant to be used in titles and make sense alone, range strings are meant to be used when using the
         * duration in a sentence and do not make sense alone.
         *
         * @param bool $title Whether the values of the array should be for title or for use as range.
         *
         * @return array An associative array of durations and strings.
         */
        public function get_url_import_range_options($title = \true)
        {
        }
        /**
         * Returns the list of limit options that should be applied to imports.
         *
         * @since 4.5.13
         *
         * @return array An array of limit type options in the [ <limit_type> => <limit description> ]
         *               format.
         */
        public function get_import_limit_type_options()
        {
        }
        /**
         * Returns a list of date range options.
         *
         * @since 4.5.13
         *
         * @return array $options An array of arrays in the format
         *                      [ <range duration in seconds> => [ 'title' => <title>, 'range' => <range> ] ].
         */
        protected function get_range_options()
        {
        }
        /**
         * Returns the range options available for imports.
         *
         * Titles are meant to be used in titles and make sense alone, range strings are meant to be used when using the
         * duration in a sentence and do not make sense alone.
         *
         * @since 4.5.13
         *
         * @param bool $title Whether the values of the array should be for title or for use as range.
         *
         * @return array An associative array of durations and strings.
         */
        public function get_import_range_options($title = \true)
        {
        }
        /**
         * Return a list of available options for the import numeric limit.
         *
         * @since 4.5.13
         *
         * @return array $options An array of arrays in the format [ <number> => <number> ].
         */
        public function get_import_limit_count_options()
        {
        }
        /**
         * Returns the default value of the import count limit.
         *
         * @since 4.5.13
         *
         * @return int
         */
        public function get_import_limit_count_default()
        {
        }
        /**
         * Returns the default value of the import count limit.
         *
         * @since 4.5.13
         *
         * @return int
         */
        public function get_import_range_default()
        {
        }
        /**
         * Gets all the possible regular-exp for external url sources
         *
         * @since 4.6.18
         *
         * @return array
         */
        public function get_source_origin_regexp()
        {
        }
        /**
         * Matches which other origin this source url might be
         *
         * @since 4.6.18
         *
         * @param  string $source Which source we are testing against
         *
         * @return string|bool
         */
        public function match_source_origin($source)
        {
        }
        /**
         * Hooked to current_screen, this method identifies whether or not fb credentials should be cleared
         *
         * @deprecated 4.6.23
         *
         * @param WP_Screen $screen
         */
        public function maybe_clear_fb_credentials($screen)
        {
        }
        /**
         * @deprecated 4.6.23
         */
        public function get_fb_credentials()
        {
        }
        /**
         * @deprecated 4.6.23
         */
        public function has_fb_credentials()
        {
        }
        /**
         * @deprecated 4.6.23
         */
        public function clear_fb_credentials()
        {
        }
        /**
         * Given a URL, tack on the parts of the URL that gets used to disconnect Facebook
         *
         * @deprecated 4.6.23
         *
         * @param string $url
         *
         * @return string
         */
        public function build_disconnect_facebook_url($url)
        {
        }
        /**
         * @deprecated 4.6.23
         */
        public function is_fb_credentials_valid($time = \null)
        {
        }
        /**
         * Returns a filtered map of import process slugs to classes.
         *
         * @since 4.6.23
         *
         * @param bool $pretty Whether to return human-readable and "pretty" name for the process
         *                     or the class names.
         *
         * @return array A map of import process slugs to classes or names in the shape
         *               [ <slug> => <class_or_name> ].
         */
        public function get_import_process_options($pretty = \false)
        {
        }
        /**
         * Returns the filtered default import process slug or class.
         *
         * @since 4.6.23
         *
         * @param bool $return_class Whether to return the import process class (`true`) or
         *                           slug (`false`).
         *
         * @return string The default import process slug or class.
         */
        public function get_import_process_default($return_class = \true)
        {
        }
        /**
         * Returns the currently selected, or a specific, import process class.
         *
         * @since 4.6.23
         *
         * @param null|string $slug The slug of the import process class to return; if not specified
         *                          then the default import process class will be returned. If the
         *                          slug is not available then the default class will be returned.
         *
         * @return string The import process class for the specified slug or the default class if the
         *                slug was not specified or is not available.
         */
        public function get_import_process_class($slug = \null)
        {
        }
    }
    interface Tribe__Events__Aggregator__Record__Queue_Interface
    {
        public function activity();
        /**
         * Shortcut to check how many items are going to be processed next
         *
         * @return int
         */
        public function count();
        /**
         * Shortcut to check if this queue is empty.
         *
         * @return boolean `true` if this queue instance has acquired the lock and
         *                 the count is 0, `false` otherwise.
         */
        public function is_empty();
        /**
         * Processes a batch for the queue
         *
         * @return \Tribe__Events__Aggregator__Record__Queue
         */
        public function process($batch_size = \null);
        /**
         * Returns the total progress made on processing the queue so far as a percentage.
         *
         * @return int
         */
        public function progress_percentage();
        /**
         * Sets a flag to indicate that update work is in progress for a specific event:
         * this can be useful to prevent collisions between cron-based updated and realtime
         * updates.
         *
         * The flag naturally expires after an hour to allow for recovery if for instance
         * execution hangs half way through the processing of a batch.
         */
        public function set_in_progress_flag();
        /**
         * Clears the in progress flag.
         */
        public function clear_in_progress_flag();
        /**
         * Indicates if the queue for the current event is actively being processed.
         *
         * @return bool
         */
        public function is_in_progress();
        /**
         * Returns the primary post type the queue is processing
         *
         * @return string
         */
        public function get_queue_type();
        /**
         * Whether the current queue process is stuck or not.
         *
         * @since 4.6.21
         *
         * @return bool
         */
        public function is_stuck();
        /**
         * Orderly closes the queue process.
         *
         * @since 4.6.21
         *
         * @return bool
         */
        public function kill_queue();
        /**
         * Whether the current queue process failed or not.
         *
         * @since 4.6.21
         *
         * @return bool
         */
        public function has_errors();
        /**
         * Whether the current queue is fetching values from a remote or external source.
         *
         * @since 5.3.0
         *
         * @return bool
         */
        public function is_fetching();
        /**
         * Returns the queue error message.
         *
         * @since 4.6.21
         *
         * @return string
         */
        public function get_error_message();
    }
    /**
     * Class Tribe__Events__Aggregator__Record__Void_Queue
     *
     * @since 4.6.22
     */
    class Tribe__Events__Aggregator__Record__Void_Queue implements \Tribe__Events__Aggregator__Record__Queue_Interface
    {
        /**
         * The error string for the queue.
         *
         * @var string
         */
        protected $error;
        /**
         * The WP_Error instance used to build the void queue, if any.
         *
         * @var WP_Error
         */
        protected $wp_error;
        /**
         * Tribe__Events__Aggregator__Record__Void_Queue constructor.
         *
         * @param string|WP_Error $error The reason, in form of a string or
         *                               `WP_Error` object, why this queue
         *                               is void.
         */
        public function __construct($error)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function activity()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function count()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function is_empty()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function process($batch_size = \null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function progress_percentage()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function set_in_progress_flag()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function clear_in_progress_flag()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function is_in_progress()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function get_queue_type()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function is_stuck()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function kill_queue()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function has_errors()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function get_error_message()
        {
        }
        /**
         * Returns the `WP_Error` instance used to build this void queue, if any.
         *
         * @since 4.6.22
         *
         * @return WP_Error|null The `WP_Error` used to build this void queue or `null`
         *                       if no `WP_Error` object was used to build this void queue.
         */
        public function get_wp_error()
        {
        }
        /**
         * This Queue never fetches on external resources so is always `false`.
         *
         * @return bool The state of the queue with external resources.
         */
        public function is_fetching()
        {
        }
    }
    /**
     * Class Tribe__Events__Aggregator__Record__Items
     *
     * @since 4.6.16
     */
    class Tribe__Events__Aggregator__Record__Items
    {
        /**
         * @var array
         */
        protected $items;
        /**
         * @var array
         */
        protected $original_items;
        /**
         * Tribe__Events__Aggregator__Record__Items constructor.
         *
         * @since 4.6.16
         *
         * @param array $items A list of items to process, the format should be the one used by EA Service
         */
        public function __construct(array $items = [])
        {
        }
        /**
         * Returns the items as modified by the class.
         *
         * @since 4.6.16
         *
         * @return array
         */
        public function get_items()
        {
        }
        /**
         * Resets, or sets, the items the class should handle.
         *
         * @since 4.6.16
         *
         * @param array $items
         */
        public function set_items(array $items)
        {
        }
        /**
         * Parses the items to find those that depend on linked posts defined by other items
         * and marks them as dependent.
         *
         * @since 4.6.16
         *
         * @return $this
         */
        public function mark_dependencies()
        {
        }
        /**
         * Returns the items originally set via the constructor the `set_items` method.
         *
         * @since 4.6.16
         *
         * @return array
         */
        public function get_original_items()
        {
        }
    }
    abstract class Tribe__Events__Aggregator__Record__Abstract
    {
        /**
         * Meta key prefix for ea-record data
         *
         * @var string
         */
        public static $meta_key_prefix = '_tribe_aggregator_';
        public $id;
        public $post;
        public $meta;
        public $type;
        public $frequency;
        public $is_schedule = \false;
        public $is_manual = \false;
        public $last_wpdb_error = '';
        /**
         * An associative array of origins and the settings they define a policy for.
         *
         * @var array
         */
        protected $origin_import_policies = ['url' => ['show_map_link']];
        public static $unique_id_fields = ['meetup' => ['source' => 'meetup_id', 'target' => 'EventMeetupID'], 'eventbrite' => ['source' => 'eventbrite_id', 'target' => 'EventBriteID'], 'ical' => ['source' => 'uid', 'target' => 'uid'], 'gcal' => ['source' => 'uid', 'target' => 'uid'], 'ics' => ['source' => 'uid', 'target' => 'uid'], 'url' => ['source' => 'id', 'target' => 'EventOriginalID']];
        /**
         * @var array
         */
        public static $unique_venue_id_fields = ['meetup' => ['source' => 'meetup_id', 'target' => 'VenueMeetupID'], 'eventbrite' => ['source' => 'eventbrite_id', 'target' => 'VenueEventBriteID']];
        /**
         * @var array
         */
        public static $unique_organizer_id_fields = ['meetup' => ['source' => 'meetup_id', 'target' => 'OrganizerMeetupID'], 'eventbrite' => ['source' => 'eventbrite_id', 'target' => 'OrganizerEventBriteID']];
        /**
         * Cache variable to store the last child post.
         *
         * @var  WP_Post
         */
        protected $last_child;
        /**
         * Holds the event count temporarily while event counts (comment_count) is being updated
         *
         * @var int
         */
        private $temp_event_count = 0;
        /**
         * The import record origin.
         *
         * @var string
         */
        public $origin;
        /**
         * Setup all the hooks and filters
         *
         * @return void
         */
        public function __construct($post = \null)
        {
        }
        /**
         * Public facing Label for this Origin
         *
         * @return string
         */
        public abstract function get_label();
        /**
         * Loads the WP_Post associated with this record
         */
        public function load($post = \null)
        {
        }
        /**
         * Sets up meta fields by de-prefixing them into the array
         *
         * @param array $meta Meta array
         */
        public function setup_meta($meta)
        {
        }
        /**
         * Updates import record meta
         *
         * @param string $key   Meta key
         * @param mixed  $value Meta value
         */
        public function update_meta($key, $value)
        {
        }
        /**
         * Deletes import record meta
         *
         * @param string $key Meta key
         */
        public function delete_meta($key)
        {
        }
        /**
         * Returns the Activity object for the record
         *
         * @return Tribe__Events__Aggregator__Record__Activity
         */
        public function activity()
        {
        }
        /**
         * Saves activity data on a record
         */
        public function save_activity()
        {
        }
        /**
         * Gets a hash with the information we need to verify if a given record is a duplicate
         *
         * @since  4.5.13
         *
         * @return string
         */
        public function get_data_hash()
        {
        }
        /**
         * Creates an import record
         *
         * @param string $type Type of record to create - manual or schedule
         * @param array  $args Post type args
         * @param array  $meta Post meta
         *
         * @return WP_Post|WP_Error
         */
        public function create($type = 'manual', $args = [], $meta = [])
        {
        }
        /**
         * Edits an import record
         *
         * @param int   $post_id
         * @param array $args Post type args
         * @param array $meta Post meta
         *
         * @return WP_Post|WP_Error
         */
        public function save($post_id, $args = [], $meta = [])
        {
        }
        /**
         * Filter the post_modified dates to be unchanged
         * conditionally hooked to wp_insert_post_data and then unhooked after wp_update_post
         *
         * @param array $data    new data to be used in the update
         * @param array $postarr existing post data
         *
         * @return array
         */
        public function dont_change_post_modified($data, $postarr)
        {
        }
        /**
         * Preps post arguments for create/save
         *
         * @param string  $type Type of record to create - manual or schedule
         * @param object  $args Post type args
         * @param array   $meta Post meta
         *
         * @return array
         */
        public function prep_post_args($type, $args, $meta = [])
        {
        }
        /**
         * A simple method to create a Title for the Records
         *
         * @param mixed $Nparams This method accepts any number of params, they must be string compatible
         *
         * @return string
         */
        public function generate_title()
        {
        }
        /**
         * Creates a schedule record based on the import record
         *
         * @return boolean|Tribe_Error
         */
        public function create_schedule_record()
        {
        }
        /**
         * Creates a child record based on the import record
         *
         * @return boolean|Tribe_Error|Tribe__Events__Aggregator__Record__Abstract
         */
        public function create_child_record()
        {
        }
        /**
         * If using WP < 4.4, we need to add meta to the post via update_post_meta
         *
         * @param int   $id   Post id to add data to
         * @param array $meta Meta to add to the post
         */
        public function maybe_add_meta_via_pre_wp_44_method($id, $meta)
        {
        }
        /**
         * Queues the import on the Aggregator service
         *
         * @return stdClass|WP_Error|int A response object, a `WP_Error` instance on failure or a record
         *                               post ID if the record had to be re-scheduled due to HTTP request
         *                               limit.
         * @see Tribe__Events__Aggregator__API__Import::create()
         *
         */
        public function queue_import($args = [])
        {
        }
        /**
         * Returns the record import data either fetching it locally or trying to retrieve
         * it from EA Service.
         *
         * @return stdClass|WP_Error An object containing the response data or a `WP_Error` on failure.
         */
        public function get_import_data()
        {
        }
        public function delete($force = \false)
        {
        }
        /**
         * Sets a status on the record
         *
         * @return int
         */
        public function set_status($status)
        {
        }
        /**
         * Marks a record as failed
         *
         * @return int
         */
        public function set_status_as_failed($error = \null)
        {
        }
        /**
         * Marks a record as pending
         *
         * @return int
         */
        public function set_status_as_pending()
        {
        }
        /**
         * Marks a record as successful
         *
         * @return int
         */
        public function set_status_as_success()
        {
        }
        /**
         * A quick method to fetch the Child Records to the current on this class
         *
         * @param array $args WP_Query Arguments
         *
         * @return WP_Query|WP_Error
         */
        public function query_child_records($args = [])
        {
        }
        /**
         * A quick method to fetch the Child Records by Status
         *
         * @param string $status Which status, must be a valid EA status
         *
         * @return WP_Query|WP_Error|bool
         */
        public function get_child_record_by_status($status = 'success', $qty = -1, array $args = [])
        {
        }
        /**
         * Gets errors on the record post
         */
        public function get_errors($args = [])
        {
        }
        /**
         * Logs an error to the comments of the Record post
         *
         * @param WP_Error $error Error message to log
         *
         * @return bool
         */
        public function log_error(\WP_Error $error)
        {
        }
        /**
         * Verifies if this Schedule Record can create a new Child Record
         *
         * @return boolean
         */
        public function is_schedule_time()
        {
        }
        /**
         * Verifies if this Record can pruned
         *
         * @return boolean
         */
        public function has_passed_retention_time()
        {
        }
        /**
         * Get info about the source, via and title
         *
         * @return array
         */
        public function get_source_info()
        {
        }
        /**
         * Fetches the status message for the last import attempt on (scheduled) records
         *
         * @param string $type            Type of message to fetch
         * @param bool   $lookup_children Whether the function should try to read the last children post status to return a coherent
         *                                last import status or not, default `false`.
         *
         * @return bool|string Either the message corresponding to the last import status or `false` if the last import status
         *                     is empty or not the one required.
         */
        public function get_last_import_status($type = 'error', $lookup_children = \false)
        {
        }
        /**
         * Updates the source name on the import record and its parent (if the parent exists)
         *
         * @param string $source_name Source name to set on the import record
         */
        public function update_source_name($source_name)
        {
        }
        /**
         * Queues events, venues, and organizers for insertion
         *
         * @param array $data              Import data.
         * @param bool  $start_immediately Whether the data processing should start immediately or not.
         *
         * @return array|Tribe__Events__Aggregator__Record__Queue_Interface|WP_Error|Tribe__Events__Aggregator__Record__Activity
         */
        public function process_posts($data = [], $start_immediately = \false)
        {
        }
        /**
         * Returns whether or not the record has a queue
         *
         * @return bool
         */
        public function has_queue()
        {
        }
        public function get_event_count($type = \null)
        {
        }
        /**
         * Handles import data before queuing
         *
         * Ensures the import record source name is accurate, checks for errors, and limits import items
         * based on selection
         *
         * @param array $data Import data
         *
         * @return array|WP_Error
         */
        public function prep_import_data($data = [])
        {
        }
        /**
         * Inserts events, venues, and organizers for the Import Record
         *
         * @param array $items Dummy data var to allow children to optionally react to passed in data
         *
         * @return Tribe__Events__Aggregator__Record__Activity The import activity record.
         */
        public function insert_posts($items = [])
        {
        }
        /**
         * Gets all ids that already exist in the post meta table from the provided records
         *
         * @param array $records Array of records
         * @param array $data    Submitted data
         *
         * @return array
         */
        protected function get_existing_ids_from_import_data($import_data)
        {
        }
        protected function filter_data_by_selected($import_data)
        {
        }
        /**
         * Gets the unique field map for the current origin and the specified post type.
         *
         * @param string $for
         *
         * @return array|null
         */
        protected function get_unique_field($for = \null)
        {
        }
        /**
         * Finalizes the import record for insert
         */
        public function finalize()
        {
        }
        /**
         * preserve Event Options
         *
         * @param array $event Event data
         *
         * @return array
         */
        public static function preserve_event_option_fields($event)
        {
        }
        /**
         * Imports an image information from EA server and creates the WP attachment object if required.
         *
         * @param array $event An event representation in the format provided by an Event Aggregator response.
         *
         * @return bool|stdClass|WP_Error An image information in the format provided by an Event Aggregator responsr or
         *                                `false` on failure.
         */
        public function import_aggregator_image($event)
        {
        }
        /**
         * Imports the image contained in the post data `image` field if any.
         *
         * @param array $data A post data in array format.
         *
         * @return object|bool An object with the image post ID or `false` on failure.
         */
        public function import_image($data)
        {
        }
        /**
         * Whether an origin has more granulat policies concerning an import setting or not.
         *
         * @param string $origin
         * @param string $setting
         *
         * @return bool
         */
        protected function has_import_policy_for($origin, $setting)
        {
        }
        /**
         * Starts monitoring the db for errors.
         */
        protected function watch_for_db_errors()
        {
        }
        /**
         * @return bool Whether a db error happened during the insertion of data or not.
         */
        protected function db_errors_happened()
        {
        }
        /**
         * Cast error responses from the Service to WP_Errors to ease processing down the line.
         *
         * If a response is a WP_Error already or is not an error response then it will not be modified.
         *
         * @since 4.5.9
         *
         * @param WP_Error|object $import_data
         *
         * @return array|WP_Error
         */
        protected function maybe_cast_to_error($import_data)
        {
        }
        /**
         * Sets the post associated with this record.
         *
         * @since 4.5.11
         *
         * @param WP_post|int $post A post object or post ID
         */
        public function set_post($post)
        {
        }
        /**
         * Returns the user ID of the first user that can edit events or the current user ID if available.
         *
         * During cron runs current user ID will be set to 0; here we try to get a legit author user ID to
         * be used as an author using the first non-0 user ID among the record author, the current user, the
         * first available event editor.
         *
         * @since 4.5.11
         *
         * @return int The user ID or `0` (not logged in user) if not possible.
         */
        protected function get_default_user_id()
        {
        }
        /**
         * Assigns a new post thumbnail to the specified post if needed.
         *
         * @since 4.5.13
         *
         * @param int $post_id          The ID of the post the thumbnail should be assigned to.
         * @param int $new_thumbnail_id The new attachment post ID.
         *
         * @return bool Whether the post thumbnail ID changed or not.
         */
        protected function set_post_thumbnail($post_id, $new_thumbnail_id)
        {
        }
        /**
         * Getter/setter to check/set whether the import for this record should be queued on EA Service or not.
         *
         * Note this is a passive check: if the meta is not set or set to `false` we assume the import
         * should not be queued on EA Service.
         *
         * @since 4.6.2
         *
         * @param bool $should_queue_import If a value is provided here then the `should_queue_import` meta will
         *                                  be set to the boolean representation of that value.
         *
         * @return bool
         */
        public function should_queue_import($should_queue_import = \null)
        {
        }
        /**
         * Attaches a service-provided image to an organizer.
         *
         * @since 4.6.9
         *
         * @param int                                         $organizer_id The organizer post ID.
         * @param string                                      $image_url
         * @param Tribe__Events__Aggregator__Record__Activity $activity
         *
         * @return bool Whether the image was attached to the organizer or not.
         */
        public function import_organizer_image($organizer_id, $image_url, $activity)
        {
        }
        /**
         * Attaches a service-provided image to a venue.
         *
         * @since 4.6.9
         *
         * @param int                                         $venue_id The venue post ID.
         * @param string                                      $image_url
         * @param Tribe__Events__Aggregator__Record__Activity $activity
         *
         * @return bool Whether the image was attached to the venue or not.
         */
        public function import_venue_image($venue_id, $image_url, $activity)
        {
        }
        /**
         * Imports and attaches an image as post thumbnail to a post.
         *
         * @since 4.6.9
         *
         * @param int                                         $post_id
         * @param string                                      $image_url
         * @param Tribe__Events__Aggregator__Record__Activity $activity
         *
         * @return bool `true` if the image was correctly downloaded and attached, `false` otherwise.
         */
        protected function import_and_attach_image_to($post_id, $image_url, $activity)
        {
        }
        /**
         * Attaches a service-provided image to an event.
         *
         * @since 4.6.9
         *
         * @param array                                       $event The event data.
         * @param Tribe__Events__Aggregator__Record__Activity $activity
         *
         * @return bool Whether the image was attached to the event or not.
         */
        public function import_event_image($event, $activity)
        {
        }
        /**
         * Returns this record last child record or the record itself if no children are found.
         *
         * @since 4.6.15
         *
         * @return Tribe__Events__Aggregator__Record__Abstract
         */
        public function last_child()
        {
        }
        /**
         * Returns this record last child post object.
         *
         * @since 4.6.15
         *
         * @param bool $force Whether to use the the last child cached value or refetch it.
         *
         * @return WP_Post|false Either the last child post object or `false` on failure.
         */
        public function get_last_child_post($force = \false)
        {
        }
        /**
         * Whether this record failed before a specific time.
         *
         * @since 4.6.15
         *
         * @param string|int $time A timestamp or a string parseable by the `strtotime` function.
         *
         * @return bool
         */
        public function failed_before($time)
        {
        }
        /**
         * Whether the record has its own last import status stored in the meta or
         * it should be read from its last child record.
         *
         * @since 4.6.15
         *
         * @return bool
         */
        protected function has_own_last_import_status()
        {
        }
        /**
         * Returns the default retry interval depending on this record frequency.
         *
         * @since 4.6.15
         *
         * @return int
         */
        public function get_retry_interval()
        {
        }
        /**
         * Returns the record retry timestamp.
         *
         * @since 4.6.15
         *
         * @return int|bool Either the record retry timestamp or `false` if the record will
         *                  not retry to import.
         */
        public function get_retry_time()
        {
        }
        /**
         * Whether the record will try to fetch the import data polling EA Service or
         * expecting batches of data being pushed to it by EA Service.
         *
         * @since 4.6.15
         *
         * @return bool
         */
        public function is_polling()
        {
        }
        /*
         *
         * Generates the hash that will be expected in the for the next batch of events.
         *
         * @since 4.6.15
         *
         * @return string
         */
        public function generate_next_batch_hash()
        {
        }
    }
    class Tribe__Events__Aggregator__Record__Meetup extends \Tribe__Events__Aggregator__Record__Abstract
    {
        public $origin = 'meetup';
        /**
         * Queues the import on the Aggregator service
         */
        public function queue_import($args = [])
        {
        }
        /**
         * Gets the Regular Expression string to match a source URL
         *
         * @since 4.6.18
         *
         * @return string
         */
        public static function get_source_regexp()
        {
        }
        /**
         * Public facing Label for this Origin
         *
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * Filters the event to ensure that a proper URL is in the EventURL
         *
         * @param array $event Event data
         * @param Tribe__Events__Aggregator__Record__Abstract $record Aggregator Import Record
         *
         * @return array
         */
        public static function filter_event_to_force_url($event, $record)
        {
        }
        /**
         * Filters the event to ensure that fields are preserved that are not otherwise supported by Meetup
         *
         * @param array $event Event data
         * @param Tribe__Events__Aggregator__Record__Abstract $record Aggregator Import Record
         *
         * @return array
         */
        public static function filter_event_to_preserve_fields($event, $record)
        {
        }
        /**
         * Returns the Meetup authorization token generation URL.
         *
         * @since 4.9.6
         *
         * @param array $args
         *
         * @return string Either the URL to obtain Eventbrite authorization token or an empty string.
         */
        public static function get_auth_url($args = array())
        {
        }
    }
    class Tribe__Events__Aggregator__Record__Eventbrite extends \Tribe__Events__Aggregator__Record__Abstract
    {
        public $origin = 'eventbrite';
        /**
         * Queues the import on the Aggregator service
         */
        public function queue_import($args = array())
        {
        }
        /**
         * Gets the Regular Expression string to match a source URL
         *
         * @since 4.6.18
         *
         * @return string
         */
        public static function get_source_regexp()
        {
        }
        /**
         * Returns the Eventbrite authorization token generation URL.
         *
         * @param array $args
         *
         * @return string Either the URL to obtain Eventbrite authorization token or an empty string.
         */
        public static function get_auth_url($args = array())
        {
        }
        /**
         * Public facing Label for this Origin
         *
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * Filters the event to ensure that a proper URL is in the EventURL
         *
         * @param array $event Event data
         * @param Tribe__Events__Aggregator__Record__Abstract $record Aggregator Import Record
         *
         * @return array
         */
        public static function filter_event_to_force_url($event, $record)
        {
        }
        /**
         * Filters the event to ensure that fields are preserved that are not otherwise supported by Eventbrite
         *
         * @param array $event Event data
         * @param Tribe__Events__Aggregator__Record__Abstract $record Aggregator Import Record
         *
         * @return array
         */
        public static function filter_event_to_preserve_fields($event, $record)
        {
        }
        /**
         * Add Site URL for Eventbrite Requets
         *
         * @since 4.6.18
         *
         * @param array $args EA REST arguments
         * @param Tribe__Events__Aggregator__Record__Abstract $record Aggregator Import Record
         *
         * @return mixed
         */
        public static function filter_add_site_get_import_data($args, $record)
        {
        }
        /**
         * When "(do not override)" status option is used, this ensures the imported event's status matches its original Eventbrite.com status.
         *
         * @since 4.8.1
         *
         * @param string $post_status The event's post status before being filtered.
         * @param array $event The WP event data about to imported and saved to the DB.
         * @param Tribe__Events__Aggregator__Record__Abstract $record The import's EA Import Record.
         * @return array
         */
        public static function filter_setup_do_not_override_post_status($post_status, $event, $record)
        {
        }
        /**
         * Helps to ensure that post status selection UIs always default to "(do not override)" for Eventbrite imports.
         *
         * @since 4.8.1
         *
         * @return string The key for the "(do not override)" option.
         */
        public static function filter_set_default_post_status()
        {
        }
    }
    class Tribe__Events__Aggregator__Record__List_Table extends \WP_List_Table
    {
        public $tab;
        public $page;
        public $user;
        public function __construct($args = [])
        {
        }
        /**
         *
         * @global array    $avail_post_stati
         * @global WP_Query $wp_query
         * @global int      $per_page
         * @global string   $mode
         */
        public function prepare_items()
        {
        }
        public function nonce()
        {
        }
        /**
         * Get a list of sortable columns. The format is:
         * 'internal-name' => 'orderby'
         * or
         * 'internal-name' => array( 'orderby', true )
         *
         * The second format will make the initial sorting order be descending
         *
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * @param string $which
         */
        protected function extra_tablenav($which)
        {
        }
        /**
         * Get an associative array ( option_name => option_title ) with the list
         * of bulk actions available on this table.
         *
         *
         * @return array
         */
        protected function get_bulk_actions()
        {
        }
        /**
         * Display the bulk actions dropdown.
         *
         * @param string $which The location of the bulk actions: 'top' or 'bottom'.
         *                      This is designated as optional for backwards-compatibility.
         */
        protected function bulk_actions($which = '')
        {
        }
        /**
         * Get an associative array ( id => link ) with the list
         * of views available on this table.
         *
         * @return array
         */
        protected function get_views()
        {
        }
        /**
         *
         * @return array
         */
        public function get_columns()
        {
        }
        protected function handle_row_actions($post, $column_name, $primary)
        {
        }
        /**
         * Returns the status icon HTML
         *
         * @param Tribe__Events__Aggregator__Record__Abstract $record
         *
         * @return array|string
         */
        private function get_status_icon($record)
        {
        }
        private function render($html = [], $glue = "\r\n", $echo = \false)
        {
        }
        public function column_source($post)
        {
        }
        public function column_imported($post)
        {
        }
        public function column_frequency($post)
        {
        }
        public function column_total($post)
        {
        }
        /**
         * Handles the checkbox column output.
         *
         * @since 4.3.0
         * @access public
         *
         * @param WP_Post $post The current WP_Post object.
         */
        public function column_cb($post)
        {
        }
        /**
         * Displays the pagination.
         *
         * @since 5.3.0
         * @access protected
         *
         * @param string $which Equal to NULL, 'top' or 'bottom'.
         */
        protected function pagination($which)
        {
        }
    }
}
namespace Tribe\Events\Aggregator\Record {
    /**
     * Class Tribe__Events__Aggregator__Record__Batch_Queue - New Queue system to process imports crated with the new
     * batch system.
     *
     * @since 5.3.0
     */
    class Batch_Queue implements \Tribe__Events__Aggregator__Record__Queue_Interface
    {
        /**
         * Set a name to identify the activity object.
         *
         * @since 5.3.0
         *
         * @var string $activity_key Key to identify the activity object.
         */
        public static $activity_key = 'activity';
        /**
         * Access to the current record.
         *
         * @since 5.3.0
         *
         * @var Tribe__Events__Aggregator__Record__Abstract $record The current record.
         */
        public $record;
        /**
         * @var Tribe__Events__Aggregator__Record__Activity
         */
        protected $activity;
        /**
         * Whether any real processing should happen for the queue or not.
         *
         * @since 5.3.0
         *
         * @var bool
         */
        protected $null_process = false;
        /**
         * Tribe__Events__Aggregator__Record__Queue constructor.
         *
         * @since 5.3.0
         *
         * @param int|Tribe__Events__Aggregator__Record__Abstract       $record The current record or record ID.
         * @param array|string|null                                     $items The items to build the Queue.
         * @param Tribe__Events__Aggregator__Record__Queue_Cleaner|null $cleaner The cleaner to remove duplicates.
         */
        public function __construct($record, $items = null, \Tribe__Events__Aggregator__Record__Queue_Cleaner $cleaner = null)
        {
        }
        /**
         * Get the activity if a call to a dynamic attribute is taking place in this case `$this->>activity`
         *
         * @since 5.3.0
         *
         * @param string $key The dynamic key to be returned.
         *
         * @return mixed|Tribe__Events__Aggregator__Record__Activity
         */
        public function __get($key)
        {
        }
        /**
         * Returns the activity object for the processing of this Queue.
         *
         * @since 5.3.0
         *
         * @return mixed|Tribe__Events__Aggregator__Record__Activity
         */
        public function activity()
        {
        }
        /**
         * Allows us to check if the Events Data has still pending
         *
         * @since 5.3.0
         *
         * @return boolean
         */
        public function is_fetching()
        {
        }
        /**
         * Shortcut to check how many items are going to be processed next.
         *
         * @since 5.3.0
         *
         * @return int
         */
        public function count()
        {
        }
        /**
         * Shortcut to check if this queue is empty or it has a null process.
         *
         * @since 5.3.0
         *
         * @return boolean `true` if this queue instance has acquired the lock and
         *                 the count is 0, `false` otherwise.
         */
        public function is_empty()
        {
        }
        /**
         * After the process has been completed make sure the `post_modified` and `post_status` are updated accordingly.
         *
         * @since 5.3.0
         *
         * @return $this
         */
        protected function complete()
        {
        }
        /**
         * Processes a batch for the queue
         *
         * @since 5.3.0
         *
         * @throws Exception
         *
         * @param null $batch_size The batch size is ignored on batch import as is controlled via the initial filtered value.
         *
         * @return self|Tribe__Events__Aggregator__Record__Activity
         */
        public function process($batch_size = null)
        {
        }
        /**
         * Get the current date time using UTC as the time zone.
         *
         * @since 5.3.0
         *
         * @return DateTime|false|\Tribe\Utils\Date_I18n
         */
        private function now()
        {
        }
        /**
         * Create the initial request to the EA server requesting that the client is ready to start getting batches of events.
         *
         * @since 5.3.0
         */
        public function start()
        {
        }
        /**
         * Return the number of events delivered per batch.
         *
         * @since 5.3.0
         *
         * @return int
         */
        private function batch_size()
        {
        }
        /**
         * Return the interval in seconds of the delivery of each batch.
         *
         * @since 5.3.0
         *
         * @return int
         */
        private function batch_interval()
        {
        }
        /**
         * Returns the total progress made on processing the queue so far as a percentage.
         *
         * @since 5.3.0
         *
         * @return int
         */
        public function progress_percentage()
        {
        }
        /**
         * Sets a flag to indicate that update work is in progress for a specific event:
         * this can be useful to prevent collisions between cron-based updated and realtime
         * updates.
         *
         * The flag naturally expires after an hour to allow for recovery if for instance
         * execution hangs half way through the processing of a batch.
         *
         * @since 5.3.0
         */
        public function set_in_progress_flag()
        {
        }
        /**
         * Clears the in progress flag.
         *
         * @since 5.3.0
         */
        public function clear_in_progress_flag()
        {
        }
        /**
         * Indicates if the queue for the current event is actively being processed.
         *
         * @since 5.3.0
         *
         * @return bool
         */
        public function is_in_progress()
        {
        }
        /**
         * Returns the primary post type the queue is processing
         *
         * @since 5.3.0
         *
         * @return string
         */
        public function get_queue_type()
        {
        }
        /**
         * Whether the current queue process is stuck or not.
         *
         * @since 5.3.0
         *
         * @return bool
         */
        public function is_stuck()
        {
        }
        /**
         * Orderly closes the queue process.
         *
         * @since 5.3.0
         *
         * @return bool
         */
        public function kill_queue()
        {
        }
        /**
         * Whether the current queue process failed or not.
         *
         * @since 5.3.0
         *
         * @return bool
         */
        public function has_errors()
        {
        }
        /**
         * Returns the queue error message.
         *
         * @since 5.3.0
         *
         * @return string
         */
        public function get_error_message()
        {
        }
    }
}
namespace {
    class Tribe__Events__Aggregator__Record__Queue_Processor
    {
        public static $scheduled_key = 'tribe_aggregator_process_insert_records';
        /**
         * Which Action will be triggered as a single Cron event
         *
         * @since  4.5.9
         *
         * @var    string
         */
        public static $scheduled_single_key = 'tribe_aggregator_single_process_insert_records';
        /**
         *Number of items to be processed in a single batch.
         *
         * @var int
         */
        public static $batch_size = 5;
        /**
         *Number of items to be processed in a single small batch.
         *
         * @var int
         */
        public static $small_batch_size = 5;
        /**
         * Number of items in the current batch processed so far.
         *
         * @var int
         */
        protected $processed = 0;
        /**
         * @var int
         */
        protected $current_record_id = 0;
        /**
         * @var Tribe__Events__Aggregator__Record__Queue_Interface
         */
        public $current_queue;
        public function __construct()
        {
        }
        public function action_init()
        {
        }
        /**
         * Configures a scheduled task to handle "background processing" of import record insertions/updates.
         */
        public function manage_scheduled_task()
        {
        }
        /**
         * Runs upon plugin activation, registering our scheduled task used to process
         * batches of pending import record inserts/updates.
         */
        public function register_scheduled_task()
        {
        }
        /**
         * Expected to fire upon plugin deactivation.
         */
        public function clear_scheduled_task()
        {
        }
        /**
         * Process a batch of queued items for a specific import record.
         *
         * This is typically used when processing a small number of instances immediately upon
         * an import record queue being updated for a particular import record, or to facilitate
         * batches being updated via an ajax update loop.
         *
         * The default number of items processed in a single batch is 10, which can be
         * overridden using the tribe_events_aggregator_small_batch_size filter hook
         *
         * @param int $record_id
         * @param int $batch_size
         */
        public function process_batch($record_id, $batch_size = \null)
        {
        }
        /**
         * Processes the next waiting batch of Import Record posts, if there are any.
         *
         * @param int $batch_size
         */
        public function process_queue($batch_size = \null)
        {
        }
        public function set_current_queue(\Tribe__Events__Aggregator__Record__Queue_Interface $queue)
        {
        }
        /**
         * Obtains the post ID of the next record which has a queue of items in need
         * of processing.
         *
         * If no records in need of further processing can be found it will return bool false.
         *
         * @since 5.3.0 Inclusion of a $cache param for performance purposes.
         *
         * @param boolean $interactive_only Whether or not we should look for imports that were kicked off interactively
         * @param boolean $cache            When checking on every request we should utilize transient caching to prevent hitting the DB every time.
         *
         * @return boolean|integer
         */
        public function next_waiting_record($interactive_only = \false, $cache = \false)
        {
        }
        /**
         * Processes the current import record queue. May return boolean false if it is unable to continue.
         *
         * @return bool
         */
        protected function do_processing()
        {
        }
        /**
         * Returns true if a non-empty queue exists for the current record, else returns false.
         *
         * @return bool
         */
        protected function get_current_queue()
        {
        }
        /**
         * Determines if the batch job is complete.
         *
         * Currently this is simply a measure of the number of instances processed against
         * the batch size limit - however it could potentially be expanded to include an
         * additional time based check.
         *
         * @return bool
         */
        protected function batch_complete()
        {
        }
        /**
         * Builds the correct class of queue.
         *
         * @since 4.6.16
         *
         * @param int|Tribe__Events__Aggregator__Record__Abstract $record     A record object or ID
         * @param array|string                                    $items
         * @param bool                                            $use_legacy Whether to use the legacy queue processor or not.
         *
         * @return Tribe__Events__Aggregator__Record__Queue_Interface
         */
        public static function build_queue($record, $items = \null, $use_legacy = \false)
        {
        }
    }
    class Tribe__Events__Aggregator__Record__Queue implements \Tribe__Events__Aggregator__Record__Queue_Interface
    {
        public static $in_progress_key = 'tribe_aggregator_queue_';
        public static $queue_key = 'queue';
        public static $activity_key = 'activity';
        /**
         * @var Tribe__Events__Aggregator__Record__Abstract
         */
        public $record;
        public $is_fetching = \false;
        protected $importer;
        /**
         * @var Tribe__Events__Aggregator__Record__Activity
         */
        protected $activity;
        /**
         * Holds the Items that will be processed
         *
         * @var array
         */
        public $items = [];
        /**
         * Holds the Items that will be processed next
         *
         * @var array
         */
        public $next = [];
        /**
         * How many items are going to be processed
         *
         * @var int
         */
        public $total = 0;
        /**
         * @var Tribe__Events__Aggregator__Record__Queue_Cleaner
         */
        protected $cleaner;
        /**
         * Whether any real processing should happen for the queue or not.
         *
         * @var bool
         */
        protected $null_process = \false;
        /**
         * @var bool Whether this queue instance has acquired the lock or not.
         */
        protected $has_lock = \false;
        /**
         * Tribe__Events__Aggregator__Record__Queue constructor.
         *
         * @param int|Tribe__Events__Aggregator__Record__Abstract       $record
         * @param array                                                 $items
         * @param Tribe__Events__Aggregator__Record__Queue_Cleaner|null $cleaner
         */
        public function __construct($record, $items = [], \Tribe__Events__Aggregator__Record__Queue_Cleaner $cleaner = \null)
        {
        }
        public function __get($key)
        {
        }
        protected function init_queue($items)
        {
        }
        protected function load_queue()
        {
        }
        public function activity()
        {
        }
        /**
         * Allows us to check if the Events Data has still pending
         *
         * @return boolean
         */
        public function is_fetching()
        {
        }
        /**
         * Shortcut to check how many items are going to be processed next
         *
         * @return int
         */
        public function count()
        {
        }
        /**
         * Shortcut to check if this queue is empty or it has a null process.
         *
         * @return boolean `true` if this queue instance has acquired the lock and
         *                 the count is 0, `false` otherwise.
         */
        public function is_empty()
        {
        }
        /**
         * Gets the queue's total
         *
         * @return int
         */
        protected function get_total()
        {
        }
        /**
         * Saves queue data to relevant meta keys on the post
         *
         * @return self
         */
        protected function save()
        {
        }
        /**
         * Processes a batch for the queue
         *
         * @return self|Tribe__Events__Aggregator__Record__Activity
         */
        public function process($batch_size = \null)
        {
        }
        /**
         * Returns the total progress made on processing the queue so far as a percentage.
         *
         * @return int
         */
        public function progress_percentage()
        {
        }
        /**
         * Sets a flag to indicate that update work is in progress for a specific event:
         * this can be useful to prevent collisions between cron-based updated and realtime
         * updates.
         *
         * The flag naturally expires after an hour to allow for recovery if for instance
         * execution hangs half way through the processing of a batch.
         */
        public function set_in_progress_flag()
        {
        }
        /**
         * Clears the in progress flag.
         */
        public function clear_in_progress_flag()
        {
        }
        /**
         * Indicates if the queue for the current event is actively being processed.
         *
         * @return bool
         */
        public function is_in_progress()
        {
        }
        /**
         * Returns the primary post type the queue is processing
         *
         * @return string
         */
        public function get_queue_type()
        {
        }
        /**
         * Acquires the global (db stored) queue lock if available.
         *
         * @since 4.5.12
         *
         * @return bool Whether the lock could be acquired or not if another instance/process has
         *              already acquired the lock.
         */
        protected function acquire_lock()
        {
        }
        /**
         * Release the queue lock if this instance of the queue holds it.
         *
         * @since 4.5.12
         *
         * @return bool
         */
        protected function release_lock()
        {
        }
        /**
         * Whether the current queue process is stuck or not.
         *
         * @since 4.6.21
         *
         * @return mixed
         */
        public function is_stuck()
        {
        }
        /**
         * Orderly closes the queue process.
         *
         * @since 4.6.21
         *
         * @return bool
         */
        public function kill_queue()
        {
        }
        /**
         * Whether the current queue process failed or not.
         *
         * @since 4.6.21
         *
         * @return bool
         */
        public function has_errors()
        {
        }
        /**
         * Returns the queue error message.
         *
         * @since 4.6.21
         *
         * @return string
         */
        public function get_error_message()
        {
        }
    }
    /**
     * Facilitates "realtime" processing of an import result insertion queue while the user
     * remains within the editor by means of an ajax update loop.
     */
    class Tribe__Events__Aggregator__Record__Queue_Realtime
    {
        /** @var Tribe__Events__Aggregator__Record__Queue_Interface */
        protected $queue;
        /** @var int */
        protected $record_id;
        /**
         * @var Tribe__Events__Ajax__Operations
         */
        private $ajax_operations;
        /**
         * @var Tribe__Events__Aggregator__Record__Queue_Processor
         */
        private $queue_processor;
        /**
         * The Queue_Realtime constructor method.
         *
         * @param Tribe__Events__Aggregator__Record__Queue_Interface|null           $queue An optional Queue instance.
         * @param Tribe__Events__Ajax__Operations|null                    $ajax_operations An optional Ajax Operations instance.
         * @param Tribe__Events__Aggregator__Record__Queue_Processor|null $queue_processor An optional Queue_Processor instance.
         */
        public function __construct(\Tribe__Events__Aggregator__Record__Queue_Interface $queue = \null, \Tribe__Events__Ajax__Operations $ajax_operations = \null, \Tribe__Events__Aggregator__Record__Queue_Processor $queue_processor = \null)
        {
        }
        /**
         * Adds additional data to the tribe_aggregator object (available to our JS).
         */
        public function update_loop_vars()
        {
        }
        public function render_update_message()
        {
        }
        /**
         * Action to reply every time a heart beat is executed to send the progress of EA if an EA record is present.
         *
         * @since 5.4.0 Change the method signature to be a little bit less aggressive with enforcing types.
         *
         * @param array<string, mixed> $response The current response object.
         * @param array<string, mixed> $data     An array with the data from the client.
         *
         * @return array<string, mixed> An array used to construct the heart beat response.
         */
        public function receive_heartbeat($response, $data)
        {
        }
        /**
         * Handle queue ajax requests
         */
        public function ajax()
        {
        }
        /**
         * @param $percentage
         *
         * @return int|string
         */
        private function sanitize_progress($percentage)
        {
        }
        /**
         * @return string
         */
        public function get_ajax_nonce()
        {
        }
        /**
         * Generates the nonce action string on an event and user base.
         *
         * @param int|null $event_id An event post ID to override the instance defined one.
         *
         * @return string
         */
        public function get_ajax_nonce_action($record_id = \null)
        {
        }
        /**
         * @return mixed|string|void
         */
        public function get_unable_to_continue_processing_data()
        {
        }
        /**
         * Returns the progress message data.
         *
         * @param Tribe__Events__Aggregator__Record__Queue_Interface $queue
         * @param int $percentage
         * @param bool $done
         *
         * @return mixed|string|void
         */
        public function get_progress_message_data($queue, $percentage, $done)
        {
        }
        /**
         * Get the data that is used to construct the current status of the EA progress bar.
         *
         * @since 5.3.0
         *
         * @return array<string, mixed> An array with the details of the progress bar.
         */
        private function get_queue_progress_data()
        {
        }
        /**
         * Get the current Queue status for EA to consume the status of the progress bar.
         *
         * @since 5.3.0
         *
         * @param Tribe__Events__Aggregator__Record__Queue_Interface $queue      The Queue being processed.
         * @param int                                                $percentage The amount of the percentage.
         * @param bool                                               $done       If the Import was completed or not.
         *
         * @return array<string, mixed> Get an array with the details of the current Queue.
         */
        private function get_progress_data($queue, $percentage, $done)
        {
        }
    }
    class Tribe__Events__Aggregator__Record__Url extends \Tribe__Events__Aggregator__Record__Abstract
    {
        /**
         * @var string
         */
        public $origin = 'url';
        /**
         * Public facing Label for this Origin
         *
         * @return string
         */
        public function get_label()
        {
        }
    }
    class Tribe__Events__Aggregator__Record__Async_Queue implements \Tribe__Events__Aggregator__Record__Queue_Interface
    {
        /**
         * @var Tribe__Events__Aggregator__Record__Abstract
         */
        public $record;
        /**
         * @var Tribe__Events__Aggregator__Record__Activity
         */
        protected $activity;
        /**
         * @var Tribe__Process__Queue
         */
        protected $queue_process;
        /**
         * @var string
         */
        protected $error;
        /**
         * Tribe__Events__Aggregator__Record__Async_Queue constructor.
         *
         * @since 4.6.16
         *
         * @param Tribe__Events__Aggregator__Record__Abstract $record
         * @param array $items
         */
        public function __construct(\Tribe__Events__Aggregator__Record__Abstract $record, $items = [])
        {
        }
        /**
         * Initializes the async queue.
         *
         * @since 4.6.16
         *
         * @param $items
         *
         * @return Tribe__Process__Queue|null Either a built and ready queue process or `null`
         *                                    if the queue process was not built as not needed;
         *                                    the latter will happen when there are no items to
         *                                    process.
         */
        protected function init_queue($items)
        {
        }
        /**
         * Magic method override.
         *
         * @since 4.6.16
         *
         * @param string $key
         *
         * @return Tribe__Events__Aggregator__Record__Activity
         */
        public function __get($key)
        {
        }
        /**
         * Returns the queue activity.
         *
         * In this implementation really stored on the record.
         *
         * @since 4.6.16
         *
         * @return Tribe__Events__Aggregator__Record__Activity
         */
        public function activity()
        {
        }
        /**
         * Shortcut to check if this queue is empty.
         *
         * @since 4.6.16
         *
         * @return boolean `true` if this queue instance has acquired the lock and
         *                 the count is 0, `false` otherwise.
         */
        public function is_empty()
        {
        }
        /**
         * Shortcut to check how many items are going to be processed next
         *
         * @since 4.6.16
         *
         * @return int
         */
        public function count()
        {
        }
        /**
         * Returns the process status of the queue, read from the queue meta.
         *
         * @since 4.6.16
         *
         * @return array
         */
        protected function get_queue_process_status()
        {
        }
        /**
         * Processes a batch for the queue
         *
         * The `batch_size` is ignored in async mode.
         *
         * @since 4.6.16
         *
         * @return Tribe__Events__Aggregator__Record__Async_Queue
         */
        public function process($batch_size = \null)
        {
        }
        /**
         * Initializes the async queue process if required.
         *
         * @since 4.6.16
         *
         * @return bool Whether the queue needed and was correctly initialized or not.
         */
        protected function maybe_init_queue()
        {
        }
        /**
         * Indicates if the queue for the current event is actively being processed.
         *
         * @since 4.6.16
         *
         * @return bool
         */
        public function is_in_progress()
        {
        }
        /**
         * Sets a flag to indicate that update work is in progress for a specific event.
         *
         * No-op as the async queue has its own lock system.
         *
         * @since 4.6.16
         */
        public function set_in_progress_flag()
        {
        }
        /**
         * Clears the in progress flag.
         *
         * No-op as the async queue has its own lock system.
         *
         * @since 4.6.16
         */
        public function clear_in_progress_flag()
        {
        }
        /**
         * Returns the total progress made on processing the queue so far as a percentage.
         *
         * @since 4.6.16
         *
         * @return int
         */
        public function progress_percentage()
        {
        }
        /**
         * Returns the primary post type the queue is processing
         *
         * @since 4.6.16
         *
         * @return string
         */
        public function get_queue_type()
        {
        }
        /**
         * Generates a transitional id that will be used to uniquely identify dependencies in the
         * context of an import.
         *
         * @since 4.6.16
         *
         * @return string An 8 char long unique ID.
         */
        protected function generate_transitional_id()
        {
        }
        /**
         * Whether the current queue process is stuck or not.
         *
         * @since 4.6.21
         *
         * @return bool
         */
        public function is_stuck()
        {
        }
        /**
         * Orderly closes the queue process.
         *
         * @since 4.6.21
         *
         * @return bool
         */
        public function kill_queue()
        {
        }
        /**
         * Whether the current queue process failed or not.
         *
         * @since 4.6.21
         *
         * @return bool
         */
        public function has_errors()
        {
        }
        /**
         * This Queue never fetches on external resources so is always `false`.
         *
         * @return bool The state of the queue with external resources.
         */
        public function is_fetching()
        {
        }
        /**
         * Returns the queue error message.
         *
         * @since 4.6.21
         *
         * @return string
         */
        public function get_error_message()
        {
        }
    }
    class Tribe__Events__Aggregator__Record__Queue_Cleaner
    {
        /**
         * Default is 12hrs.
         *
         * @var int The time a record is allowed to stall before have the status set to to failed since its creation in
         *          seconds.
         */
        protected $time_to_live = \HOUR_IN_SECONDS * 12;
        /**
         * @var int The time a record is allowed to stall before having
         *          its status set to failed in seconds.
         */
        protected $stall_limit = \HOUR_IN_SECONDS;
        /**
         * Removes duplicate records for the same import ID.
         *
         * While it makes sense to keep track of past import records it does not make sense
         * to keep more than one pending record for the same import ID.
         *
         * @param Tribe__Events__Aggregator__Record__Abstract $record A record object or a record post ID.
         *
         * @return int[] An array containing the deleted posts IDs.
         */
        public function remove_duplicate_pending_records_for(\Tribe__Events__Aggregator__Record__Abstract $record)
        {
        }
        /**
         * Depending from how long a record has been pending and the allowed lifespan
         * update the record status to failed.
         *
         * @param Tribe__Events__Aggregator__Record__Abstract $record
         *
         * @return bool If the record status has been set to failed or not.
         */
        public function maybe_fail_stalled_record(\Tribe__Events__Aggregator__Record__Abstract $record)
        {
        }
        /**
         * Allow external caller to define the amount of the time to live in seconds.
         *
         * @since 5.3.0
         *
         * @param int $time_to_live Live time in seconds default to 12 hours.
         *
         * @return $this
         */
        public function set_time_to_live($time_to_live)
        {
        }
        /**
         * Get the current value of time to live setting an integer in seconds, default to 12 hours.
         *
         * @since 5.3.0
         *
         * @return int The number of time to consider a record alive.
         */
        public function get_time_to_live()
        {
        }
        /**
         * Gets the time, in seconds, after which a pending record is considered stalling.
         *
         * @return int The number in seconds for a record to be stalled
         */
        public function get_stall_limit()
        {
        }
        /**
         * Sets the time, in seconds, after which a pending record is considered stalling.
         *
         * @param int $stall_limit Allow to set the stall limit of a record.
         */
        public function set_stall_limit($stall_limit)
        {
        }
    }
    class Tribe__Events__Aggregator__Record__Activity
    {
        /**
         * The below constants are meant to be used to set a status on the activity.
         * The reasons, check and management of said status are up to the client
         * object and not managed by the activity instance.
         *
         * @see Tribe__Events__Aggregator__Record__Activity::set_last_status()
         * @see Tribe__Events__Aggregator__Record__Activity::get_last_status()
         *
         */
        const STATUS_SUCCESS = 'success';
        const STATUS_FAIL = 'fail';
        const STATUS_PARTIAL = 'partial';
        const STATUS_NULL = 'null';
        /**
         * Holds a Log of what has been done on This Queue
         * @var array
         */
        protected $items = [];
        /**
         * The status of the last processing operation.
         *
         * @var string
         */
        protected $last_status;
        /**
         * Allows easier quick shortcodes to access activity
         * @var array
         */
        private $map = [];
        public $total = 0;
        /**
         * Creates an easy way to test valid Actions
         * @var array
         */
        private static $actions = ['created' => [], 'updated' => [], 'skipped' => [], 'scheduled' => []];
        public function __construct()
        {
        }
        /**
         * Register the Activities Tracked
         */
        public function __wakeup()
        {
        }
        /**
         * Prevents Mapping to be saved on the DB object
         * @return array
         */
        public function __sleep()
        {
        }
        /**
         * Register a Specific Activity and it's mappings
         *
         * @param  string $slug Name of this Activity
         * @param  array  $map  (optional) Other names in which you can access this activity
         *
         * @return boolean       [description]
         */
        public function register($slug, $map = array())
        {
        }
        /**
         * Logs an Activity
         *
         * @param string       $slug Name of this Activity
         * @param string|array $items Type of activity
         * @param array        $ids   items inside of the action
         *
         * @return boolean
         */
        public function add($slug, $items, $ids = array())
        {
        }
        /**
         * Returns the merged version of two Activities classes
         *
         * @param  self   $activity Which activity should be merged here
         *
         * @return self
         */
        public function merge(self $activity)
        {
        }
        /**
         * Removes a activity from the Registered ones
         *
         * @param  string  $slug   The Slug of the Activity
         *
         * @return boolean
         */
        public function remove($slug)
        {
        }
        /**
         * Fetches a registered Activity
         *
         * @param  string  $slug   (optional) The Slug of the Activity
         * @param  string  $action (optional) Which action
         *
         * @return null|array|object
         */
        public function get($slug = \null, $action = \null)
        {
        }
        /**
         * Fetches a registered Activity counter
         *
         * @param  string  $slug   (optional) The Slug of the Activity
         * @param  string  $action (optional) Which action
         *
         * @return int
         */
        public function count($slug = \null, $action = \null)
        {
        }
        /**
         * Checks if a given Activity type exists
         *
         * @param  string  $slug The Slug of the Tab
         *
         * @return boolean
         */
        public function exists($slug)
        {
        }
        /**
         * Checks the activities for a slug to make sure there are no incoherent duplicate entries due to concurring processes.
         *
         * @since 4.5.12
         *
         * @param string $slug
         */
        protected function prevent_duplicates_between_item_actions($slug)
        {
        }
        /**
         * Returns the raw items from the activity.
         *
         * @since 4.6.15
         *
         * @return array
         */
        public function get_items()
        {
        }
        /**
         * Sets the last status on the activity object.
         *
         * Ideally set to one of the `STATUS_` constants defined by the class
         * but allowing arbitrary stati by design. It's up to the client to set
         * and consume this information.
         *
         * @since 4.6.15
         *
         * @param string $status
         */
        public function set_last_status($status)
        {
        }
        /**
         * Gets the last status on the activity object.
         *
         * Ideally set to one of the `STATUS_` constants defined by the class
         * but allowing arbitrary stati by design. It's up to the client to set
         * and consume this information.
         *
         * @since 4.6.15
         *
         * @return string
         */
        public function get_last_status()
        {
        }
    }
    class Tribe__Events__Aggregator__Record__ICS extends \Tribe__Events__Aggregator__Record__Abstract
    {
        public $origin = 'ics';
        /**
         * Creates an import record
         *
         * @param string $origin EA origin
         * @param string $type Type of record to create - import or schedule
         * @param array $args Post type args
         *
         * @return WP_Post|WP_Error
         */
        public function create($type = 'manual', $args = [], $meta = [])
        {
        }
        /**
         * Public facing Label for this Origin
         *
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * Filters the event to ensure that fields are preserved that are not otherwise supported by ICS
         *
         * @param array $event Event data
         * @param Tribe__Events__Aggregator__Record__Abstract $record Aggregator Import Record
         *
         * @return array
         */
        public static function filter_event_to_preserve_fields($event, $record)
        {
        }
    }
    /**
     * Models a record for a no longer, or not still, supported origin.
     *
     * Passing around an instance of an unsupported origin record should not break the code.
     *
     * @since 4.6.25
     */
    /**
     * Class Tribe__Events__Aggregator__Record__Unsupported
     *
     * @since 4.6.25
     */
    class Tribe__Events__Aggregator__Record__Unsupported extends \Tribe__Events__Aggregator__Record__Abstract
    {
        /**
         * Tribe__Events__Aggregator__Record__Unsupported constructor.
         *
         * Overrides the base method to play along nicely for the request context
         * that builds this post and then remove it, if clean is allowed, on `shutdown`.
         *
         * @param int|WP_Post|null $post The record post or post ID.
         */
        public function __construct($post = \null)
        {
        }
        /**
         * Public facing Label for this Origin
         *
         * @since 4.6.25
         *
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * Overrides the base method short-circuiting the check for the
         * schedule time to return false.
         *
         * @since 4.6.25
         *
         * @return bool An indication that it's never time for an unsupported record to run.
         */
        public function is_schedule_time()
        {
        }
        /**
         * Returns the unsupported record hash.
         *
         * The hash is usually built from the record meta; in the case
         * of an unsupported record that's skipped and a default string
         * is returned. Since the hash is usually compared to strings built
         * the same way the returned fixed hash will never match.
         *
         * @since 4.6.25
         *
         * @return string The record fixed hash.
         */
        public function get_data_hash()
        {
        }
        /**
         * Deletes the base post for this record.
         *
         * @since 4.6.25
         */
        public function delete_post()
        {
        }
    }
    class Tribe__Events__Aggregator__Record__iCal extends \Tribe__Events__Aggregator__Record__Abstract
    {
        public $origin = 'ical';
        /**
         * Public facing Label for this Origin
         *
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * Filters the event to ensure that fields are preserved that are not otherwise supported by iCal
         *
         * @param array $event Event data
         * @param Tribe__Events__Aggregator__Record__Abstract $record Aggregator Import Record
         *
         * @return array
         */
        public static function filter_event_to_preserve_fields($event, $record)
        {
        }
    }
    class Tribe__Events__Aggregator__Record__gCal extends \Tribe__Events__Aggregator__Record__Abstract
    {
        public $origin = 'gcal';
        /**
         * Public facing Label for this Origin
         *
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * Filters the event to ensure that fields are preserved that are not otherwise supported by ICS
         *
         * @param array $event Event data
         * @param Tribe__Events__Aggregator__Record__Abstract $record Aggregator Import Record
         *
         * @return array
         */
        public static function filter_event_to_preserve_fields($event, $record)
        {
        }
    }
    class Tribe__Events__Aggregator__Record__CSV extends \Tribe__Events__Aggregator__Record__Abstract
    {
        use \Tribe\Traits\With_DB_Lock;
        private $state = '';
        private $output = '';
        private $messages = array();
        private $errors = array();
        public $origin = 'csv';
        protected $importer;
        /**
         * Creates an import record
         *
         * @param string $origin EA origin
         * @param string $type Type of record to create - import or schedule
         * @param array $args Post type args
         *
         * @return WP_Post|WP_Error
         */
        public function create($type = 'manual', $args = array(), $meta = array())
        {
        }
        public function queue_import($args = array())
        {
        }
        /**
         * Public facing Label for this Origin
         *
         * @return string
         */
        public function get_label()
        {
        }
        public function get_csv_data()
        {
        }
        /**
         * Queues events, venues, and organizers for insertion
         *
         * @param array $data   Import data
         * @param bool $ignored This parameter is, de facto, ignored when processing CSV files: all
         *                      imports are immediately started.
         *
         * @return array|WP_Error
         */
        public function process_posts($data = array(), $ignored = \false)
        {
        }
        /**
         * Handles import data before queuing
         *
         * Ensures the import record source name is accurate, checks for errors, and limits import items
         * based on selection
         *
         * @param array $data Import data
         *
         * @return array|WP_Error
         */
        public function prep_import_data($data = array())
        {
        }
        public function get_importer()
        {
        }
        public function get_content_type()
        {
        }
        /**
         * Translates the posttype-driven content types to content types that the CSV importer knows
         *
         * @param string $content_type Content Type
         *
         * @return string CSV Importer compatible content type
         */
        public function get_csv_content_type($content_type = \null)
        {
        }
        /**
         * Gets the available post types for importing
         *
         * @return array Array of Post Type Objects
         */
        public function get_import_post_types()
        {
        }
        /**
         * Returns the path to the CSV file.
         *
         * @since 4.6.15
         *
         * @return bool|false|string Either the absolute path to the CSV file or `false` on failure.
         */
        protected function get_file_path()
        {
        }
        private function begin_import()
        {
        }
        public function reset_tracking_options()
        {
        }
        public function continue_import()
        {
        }
        /**
         * If a custom category has been specified, set it in the importer
         *
         * @param Tribe__Events__Importer__File_Importer $importer Importer object
         *
         * @return Tribe__Events__Importer__File_Importer
         */
        public function maybe_set_default_category($importer)
        {
        }
        /**
         * If a custom post_status has been specified, set it in the importer
         *
         * @param Tribe__Events__Importer__File_Importer $importer Importer object
         *
         * @return Tribe__Events__Importer__File_Importer
         */
        public function maybe_set_default_post_status($importer)
        {
        }
        protected function do_import(\Tribe__Events__Importer__File_Importer $importer)
        {
        }
        protected function log_import_results(\Tribe__Events__Importer__File_Importer $importer)
        {
        }
        private function clean_up_after_import()
        {
        }
    }
    class Tribe__Events__Aggregator__Records
    {
        /**
         * Slug of the Post Type used for Event Aggregator Records
         *
         * @var string
         */
        public static $post_type = 'tribe-ea-record';
        /**
         * Base slugs for all the EA Record Post Statuses
         *
         * @var stdClass
         */
        public static $status = [
            'success' => 'tribe-ea-success',
            'failed' => 'tribe-ea-failed',
            'pending' => 'tribe-ea-pending',
            // Used to mark which are the Original Scheduled Import
            'schedule' => 'tribe-ea-schedule',
            // Currently Not Displayed
            'draft' => 'tribe-ea-draft',
        ];
        /**
         * Static Singleton Holder
         *
         * @var self
         */
        private static $instance;
        /**
         * @var string The time, in "Y-m-d H:i:s" format, that's used to query records.
         */
        protected $after_time;
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        /**
         * Setup all the hooks and filters
         *
         * @return void
         */
        public function __construct()
        {
        }
        public function filter_edit_link($link, $post, $context)
        {
        }
        public function filter_delete_link($link, $post, $context)
        {
        }
        /**
         * Register and return the Aggregator Record Custom Post Type
         * Instead of having a method for returning and another registering
         * we do it all in one single method depending if it exists or not
         *
         * @return stdClass|WP_Error
         */
        public function get_post_type()
        {
        }
        /**
         * Register and return the Aggregator Record Custom Post Status
         * Instead of having a method for returning and another registering
         * we do it all in one single method depending if it exists or not
         *
         * @param  string $status Which status object you are looking for
         *
         * @return stdClass|WP_Error|array
         */
        public function get_status($status = \null)
        {
        }
        public function count_by_origin($type = ['schedule', 'manual'], $raw_statuses = '')
        {
        }
        /**
         * Returns an appropriate Record object for the given origin.
         *
         * @param string $origin The record import origin.
         * @param int|WP_Post The record post or post ID.
         *
         * @return Tribe__Events__Aggregator__Record__Abstract An instance of the correct record class
         *                                                     for the origin or an unsupported record
         *                                                     instance.
         */
        public function get_by_origin($origin, $post = \null)
        {
        }
        /**
         * Returns an appropriate Record object for the given post id
         *
         * @param int $post_id WP Post ID of record
         *
         * @return Tribe__Events__Aggregator__Record__Abstract|WP_Error|null
         */
        public function get_by_post_id($post)
        {
        }
        /**
         * Returns an appropriate Record object for the given import id
         *
         * @param int $import_id Aggregator import id
         * @param array $args An array of arguments to override the default ones.
         *
         * @return Tribe__Events__Aggregator__Record__Abstract|WP_Error
         */
        public function get_by_import_id($import_id, array $args = [])
        {
        }
        /**
         * Returns an appropriate Record object for the given event id
         *
         * @param  int $event_id   Post ID for the Event
         *
         * @return Tribe__Events__Aggregator__Record__Abstract|WP_Error
         */
        public function get_by_event_id($event_id)
        {
        }
        /**
         * Returns a WP_Query object built using some default arguments for records.
         *
         * @param array $args An array of arguments to override the default ones.
         *
         * @return WP_Query The built WP_Query object; since it's built with arguments
         *                  the query will run, actually hitting the database, before
         *                  returning.
         */
        public function query($args = [])
        {
        }
        /**
         * Returns whether or not there are any scheduled imports
         *
         * @return boolean
         */
        public function has_scheduled()
        {
        }
        /**
         * Returns whether or not there have been any import requests
         *
         * @return boolean
         */
        public function has_history()
        {
        }
        /**
         * Filter the Admin page tile and add Tab Name
         *
         * @param  string $admin_title Full Admin Title
         * @param  string $title       Original Title from the Page
         *
         * @return string
         */
        public function filter_admin_title($admin_title, $title)
        {
        }
        /**
         * Fetches the current active tab
         *
         * @return object An instance of the Class used to create the Tab
         */
        public function get_active()
        {
        }
        public function action_do_import()
        {
        }
        public function filter_post_origin()
        {
        }
        /**
         * Adds the import record and origin to the imported event
         *
         * @param int $id Event ID
         * @param int $record_id Import Record ID
         * @param string $origin Import Origin
         */
        public function add_record_to_event($id, $record_id, $origin)
        {
        }
        /**
         * Prefixes a String to be the Key for Record meta
         *
         * @since  4.3
         *
         * @param  string $str Append to the Prefix
         *
         * @return string
         */
        public function prefix_meta($str = \null)
        {
        }
        /**
         * Fetches the Amount of seconds that we will hold a Record Log on the Posts Table
         *
         * @since  4.3.2
         *
         * @return int
         */
        public function get_retention()
        {
        }
        /**
         * Filters the records query to only return records after a defined time.
         *
         * @since 4.5.11
         *
         * @param string $where The original WHERE clause.
         *
         * @return string The updated WHERE clause.
         */
        public function filter_posts_where($where)
        {
        }
        /**
         * Hooks all the actions and filters needed by the class.
         *
         * @since 4.6.15
         */
        public function hook()
        {
        }
        /**
         * Filter records by source and data hash.
         *
         * @param string $source    Source value.
         * @param string $data_hash Data hash.
         *
         * @since 4.6.25
         *
         * @return Tribe__Events__Aggregator__Record__Abstract|false Record object or false if not found.
         */
        public function find_by_data_hash($source, $data_hash)
        {
        }
    }
    class Tribe__Events__Aggregator__Service
    {
        /**
         * @var Tribe__Events__Aggregator__Service Event Aggregator Service class
         */
        protected static $instance;
        /**
         * @var Tribe__Events__Aggregator Event Aggregator object
         */
        protected $aggregator;
        /**
         * @var object
         */
        protected $origins = \false;
        /**
         * Codes and strings from the EA Service. These only exist here so that they can be translated
         * @var array
         */
        private $service_messages = [];
        /**
         * @var string
         */
        public static $auth_transient = 'tribe_aggregator_has_eventbrite_authorized_response';
        /**
         * The name of the transient containing the Meetup authorization response.
         *
         * @since 4.9.6
         *
         * @var string
         */
        public static $auth_transient_meetup = 'tribe_aggregator_has_meetup_authorized_response';
        /**
         * API varibles stored in a single Object
         *
         * @var array $api {
         *     @type string     $key         License key for the API (PUE)
         *     @type string     $version     Which version of we are dealing with
         *     @type string     $domain      Domain in which the API lies
         *     @type string     $path        Path of the API on the domain above
         *     @type array      $licenses    Array with plugins and licenses that we will pass to EA
         * }
         */
        public $api = ['key' => \null, 'version' => 'v1', 'domain' => 'https://ea.theeventscalendar.com/', 'path' => 'api/aggregator/', 'licenses' => []];
        /**
         * @var Tribe__Events__Aggregator__API__Requests
         */
        protected $requests;
        /**
         * Static Singleton Factory Method
         *
         * @return Tribe__Events__Aggregator__Service
         */
        public static function instance()
        {
        }
        /**
         * Constructor!
         */
        public function __construct(\Tribe__Events__Aggregator__API__Requests $requests)
        {
        }
        /**
         * Create a clean way of fetching API variables
         *
         * @return stdClass|WP_Error
         */
        public function api()
        {
        }
        /**
         * Builds an endpoint URL
         *
         * @param string $endpoint  Endpoint for the Event Aggregator service
         * @param array  $data      Parameters to add to the URL
         *
         * @return string|WP_Error
         */
        public function build_url($endpoint, $data = [])
        {
        }
        /**
         * Allow to change the constructed URL used for EA.
         *
         * @since 5.3.0
         *
         * @param string   $endpoint The path of the endpoint inside of the base url.
         * @param stdClass $api      An object representing the properties of the API.
         *
         * @return string The generated URL.
         */
        private function base_url($endpoint, \stdClass $api)
        {
        }
        /**
         * Performs a GET request against the Event Aggregator service
         *
         * @param string $endpoint   Endpoint for the Event Aggregator service
         * @param array  $data       Parameters to send to the endpoint
         *
         * @return stdClass|WP_Error
         */
        public function get($endpoint, $data = [])
        {
        }
        /**
         * Performs a POST request against the Event Aggregator service
         *
         * @param string $endpoint   Endpoint for the Event Aggregator service
         * @param array  $data       Parameters to send to the endpoint
         *
         * @return stdClass|WP_Error
         */
        public function post($endpoint, $data = [])
        {
        }
        /**
         * Fetch origins from service
         *
         * @param bool $return_error Whether response errors should be returned, if any.
         *
         * @return array The origins array of an array containing the origins first and an error second if `return_error` is set to `true`.
         */
        public function get_origins($return_error = \false)
        {
        }
        /**
         * Get Eventbrite Arguments for EA
         *
         * @since 4.6.18
         *
         * @return mixed|void
         */
        public function get_eventbrite_args()
        {
        }
        /**
         * Fetch Eventbrite Extended Token from the Service
         *
         * @since 4.6.18
         *
         *  @return stdClass|WP_Error
         */
        public function has_eventbrite_authorized()
        {
        }
        /**
         * Disconnect Eventbrite Token on EA
         *
         * @since 4.6.18
         *
         * @return stdClass|WP_Error
         */
        public function disconnect_eventbrite_token()
        {
        }
        /**
         * Fetch import data from service
         *
         * @param string $import_id ID of the Import Record
         *
         * @param array $data
         *
         * @return stdClass|WP_Error
         */
        public function get_import($import_id, $data = [])
        {
        }
        /**
         * Creates an import
         *
         * Note: This method exists because WordPress by default doesn't allow multipart/form-data
         *       with boundaries to happen
         *
         * @param array $args {
         *     Array of arguments. See REST docs for details. 1 exception listed below:
         *
         *     @type array $source_file Source file array using the $_FILES array values
         * }
         *
         * @return string
         */
        public function post_import($args)
        {
        }
        /**
         * Update the details of an existing import into EA server.
         *
         * @since 5.1.5
         *
         * @param $import_id string The ID of the import to be updated.
         * @param $args      array An key, value array representing the values to update on the EA server.
         *
         * @return object|stdClass|string|WP_Error Response from EA server.
         */
        public function update_import($import_id, $args)
        {
        }
        /**
         * Fetches an image from the Event Aggregator service
         *
         * @param string $image_id Image ID to fetch
         * @param  Tribe__Events__Aggregator__Record__Abstract $record    Record Object
         *
         * @return stdClass|WP_Error
         */
        public function get_image($image_id, $record)
        {
        }
        /**
         * Returns a service message based on key
         *
         * @param string $key     Service Message index
         * @param array  $args    An array of arguments that will be fed to a `sprintf` like function to replace
         *                        placeholders.
         * @param string $default A default message that should be returned should the message code not be found; defaults
         *                        to the unknown message.
         *
         * @return string
         */
        public function get_service_message($key, $args = [], $default = \null)
        {
        }
        /**
         * Returns usage limits
         *
         * @param string $type Type of limits to return
         * @param boolean $ignore_cache Whether or not cache should be ignored when fetching the value
         *
         * @return array|int Either an array detailing the limit information (used, remaining) or `0` if
         *                   the limit for the specified type could not be determined.
         */
        public function get_limit($type, $ignore_cache = \false)
        {
        }
        /**
         * Returns limit usage
         *
         * @param string $type Type of usage to return
         * @param boolean $ignore_cache Whether or not cache should be ignored when fetching the value
         *
         * @return array
         */
        public function get_usage($type, $ignore_cache = \false)
        {
        }
        /**
         * Returns whether or not the limit has been exceeded
         *
         * @param boolean $ignore_cache Whether or not cache should be ignored when fetching the value
         *
         * @return boolean
         */
        public function is_over_limit($ignore_cache = \false)
        {
        }
        /**
         * Returns the currently used imports for the day
         *
         * @param boolean $ignore_cache Whether or not cache should be ignored when fetching the value
         *
         * @return int
         */
        public function get_limit_usage($ignore_cache = \false)
        {
        }
        /**
         * Returns the remaining imports for the day
         *
         * @param boolean $ignore_cache Whether or not cache should be ignored when fetching the value
         *
         * @return int
         */
        public function get_limit_remaining($ignore_cache = \false)
        {
        }
        /**
         * Registers the message map used to translate message slugs returned from EA service into localized strings.
         *
         * These messages are delivered by the EA service and don't need to be registered. They just need to exist
         * here so that they can be translated.
         */
        protected function register_messages()
        {
        }
        /**
         * Returns the message used for unknown message codes.
         *
         * @return string
         */
        public function get_unknow_message()
        {
        }
        /**
         * Confirms an import with Event Aggregator Service.
         *
         * @param array $args
         *
         * @return bool Whether the import was confirmed or not.
         */
        public function confirm_import($args)
        {
        }
        /**
         * Returns the default origins array.
         *
         * @since 4.5.11
         *
         * @return array
         */
        protected function get_default_origins()
        {
        }
        /**
         * Applies a limit to the import request.
         *
         * @since 4.5.13
         *
         * @param array $args An array of request arguments.
         *
         * @return mixed
         */
        protected function apply_import_limit($args)
        {
        }
        /**
         * Get Meetup Arguments for EA
         *
         * @since 4.9.6
         *
         * @return mixed|void
         */
        public function get_meetup_args()
        {
        }
        /**
         * Fetch Meetup Extended Token from the Service.
         *
         * @since 4.9.6
         *
         * @param bool $request_security_key Whether to explicitly request the Meetup security key in the response or not.
         *
         * @return stdClass|WP_Error Either the Event Aggregator Service response or a `WP_Error` on failure.
         */
        public function has_meetup_authorized($request_security_key = \false)
        {
        }
        /**
         * Disconnect Meetup Token on EA
         *
         * @since 4.9.6
         *
         * @return stdClass|WP_Error
         */
        public function disconnect_meetup_token()
        {
        }
        /**
         * Fetch Facebook Extended Token from the Service
         *
         * @return stdClass|WP_Error
         *
         * @deprecated 4.6.23
         *
         */
        public function get_facebook_token()
        {
        }
    }
    /**
     * Class Tribe__Events__Aggregator__Processes__Queue_Control
     *
     * @since 4.6.22
     */
    class Tribe__Events__Aggregator__Processes__Queue_Control
    {
        const CLEAR_PROCESSES = 'tribe_clear_ea_processes';
        const CLEAR_RESULT = 'tribe_clear_ea_processes_result';
        /**
         * Clears the queues, in whatever state they are, related to Event Aggregator imports
         * and redirects the user to the current page or a specified location.
         *
         * @since 4.6.22
         *
         * @param null|string $location The location the user should be redirected to or null
         *                              to use the current location.
         */
        public function clear_queues_and_redirect($location = \null)
        {
        }
        /**
         * Clears the queues, in whatever state they are, related to Event Aggregator imports.
         *
         * @since 4.6.22
         *
         * @return int The number of cleared queue processes.
         */
        public function clear_queues()
        {
        }
    }
    /**
     * Class Tribe__Events__Aggregator__Processes__Service_Provider
     *
     * @since 4.6.16
     */
    class Tribe__Events__Aggregator__Processes__Service_Provider extends \tad_DI52_ServiceProvider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 4.6.16
         */
        public function register()
        {
        }
        /**
         * Registers the event import background process.
         *
         * @since 4.6.16
         *
         * @param array $queues
         *
         * @return array
         */
        public function filter_tribe_process_queues(array $queues = [])
        {
        }
        /**
         * Handles requests to clear queue processes.
         *
         * @since 4.6.23
         */
        protected function handle_clear_request()
        {
        }
        /**
         * Handles requests to show the queue processes clearing results.
         *
         * @since 4.6.23
         */
        protected function handle_clear_result()
        {
        }
        /**
         * Filters the save operation of the process system to watch for system switches while there are
         * running asynchronous queues.
         *
         * While going from cron-based to async will work, due to underlying system, the reverse will not.
         * To prevent this from creating issues all asynchronous queue processes will be cleared before
         * the switch.
         *
         * @since 4.6.23
         *
         * @param string $value    The new setting value.
         * @param string $field_id The setting field id.
         *
         * @return string The new setting value, unmodified.
         */
        public function filter_tribe_settings_save_field_value($value, $field_id)
        {
        }
    }
}
namespace Tribe\Events\Aggregator\Processes {
    /**
     * Class Batch_Imports
     *
     * @since 5.3.0
     */
    /**
     * Class Batch_Imports
     *
     * Add custom hooks in order to support batch pushing.
     *
     * @since 5.3.0
     */
    class Batch_Imports
    {
        /**
         * Update the endpoint used to initiate a process an import of events.
         *
         * @param string   $url      The input, generated URL.
         * @param string   $endpoint The path of the endpoint inside of the base url.
         * @param stdClass $api      An object representing the properties of the API.
         *
         * @return string The modified URL where to hit to process an import.
         */
        public function build_url($url, $endpoint, $api)
        {
        }
        /**
         * Filter imports (if it has a parent import is a schedule import) and if the parent was not a batch pushing import,
         * make sure that that setting is respected, in this way we can support backwards compatibility as all imports created
         * before batch pushing are going to remaining using the old system and new imports are going to be considered as
         * batch pushing imports.
         *
         * @since 5.3.0
         *
         * @param bool            $service_supports_batch_push If the current import has support for batch pushing.
         * @param Record_Abstract $abstract
         *
         * @return boolean If the current import supports batch pushing or not.
         */
        public function allow_batch_import($service_supports_batch_push, $abstract)
        {
        }
    }
}
namespace {
    /**
     * Class Tribe__Events__Aggregator__Processes__Import_Events
     *
     * Imports events in an async queue.
     *
     * @since 4.6.16
     */
    class Tribe__Events__Aggregator__Processes__Import_Events extends \Tribe__Process__Queue
    {
        /**
         * @var string
         */
        protected $transitional_id;
        /**
         * @var int The post ID of the record associated to this queue instance.
         */
        protected $record_id;
        /**
         * @var bool Whether the current item has dependencies or not.
         */
        protected $has_dependencies = \true;
        /**
         * @var Tribe__Events__Aggregator__Record__Activity[]
         */
        protected $activities = [];
        /**
         * @var int The maximum number of times and item should be requed due to unmet dependencies.
         */
        protected $requeue_limit = 5;
        /**
         * Returns the async process action name.
         *
         * @since 4.6.16
         *
         * @return string
         */
        public static function action()
        {
        }
        public function __construct()
        {
        }
        /**
         * Adds transitional data, used to check dependencies, to an event linked posts.
         *
         * @since 4.6.16
         *
         * @param array $event
         */
        public function add_transitional_data(array $event)
        {
        }
        /**
         * Returns the `meta_key` that will be used to store the transitional data
         * in linked post for this import process.
         *
         * @since 4.6.16
         *
         * @param null $transitional_id
         *
         * @return string
         */
        public function get_transitional_meta_key($transitional_id = \null)
        {
        }
        /**
         * Sets the final part `meta_key` that should be used to store transitional
         * information for this import process.
         *
         * @since 4.6.16
         *
         * @param string $transitional_id
         */
        public function set_transitional_id($transitional_id)
        {
        }
        /**
         * Overrides the parent `save` method to save some additonal data.
         *
         * @since 4.6.16
         *
         * @return Tribe__Events__Aggregator__Processes__Import_Events
         */
        public function save()
        {
        }
        /**
         * Overrides the parent `update` method to save some additonal data.
         *
         * @since 4.6.16
         *
         * @return Tribe__Events__Aggregator__Processes__Import_Events
         */
        public function update($key, $data)
        {
        }
        /**
         * Saves some additional data on the record to keep track of the progress.
         *
         * @since 4.6.16
         *
         * @param array $save_data
         *
         * @return array
         */
        public function save_data(array $save_data = [])
        {
        }
        /**
         * Returns this import process record post ID.
         *
         * @since 4.6.16
         *
         * @return int
         */
        public function get_record_id()
        {
        }
        /**
         * Sets this import process record ID.
         *
         * @since 4.6.16
         *
         * @param int $record_id
         */
        public function set_record_id($record_id)
        {
        }
        /**
         * Handles the real import.
         *
         * In short: if an event has dependencies and those are not yet all in place then the event
         * will be re-queued; otherwise it's inserted.
         *
         * @since 4.6.16
         *
         * @param array $item
         *
         * @return array|false Either the event data to requeue or `false` if done.
         */
        protected function task($item)
        {
        }
        /**
         * Parses the Event Venue and Organizer dependencies.
         *
         * @since 4.6.16
         *
         * @param array $data
         *
         * @return array An array containing a list of identifiers (contextual to the import) for the
         *               dependencies.
         */
        protected function parse_linked_post_dependencies($data)
        {
        }
        /**
         * Inserts an event.
         *
         * @since 4.6.16
         *
         * @param int $record_id
         * @param object $data
         *
         * @return Tribe__Events__Aggregator__Record__Activity|bool Either the resulting activity or `false`
         *                                                          if the record could not be found.
         */
        protected function insert_event($record_id, $data)
        {
        }
        /**
         * Returns this import process record.
         *
         * @since 4.6.16
         *
         * @param int $record_id
         *
         * @return null|Tribe__Error|Tribe__Events__Aggregator__Record__Abstract
         */
        protected function get_record($record_id)
        {
        }
        /**
         * Checks the database to make sure all the dependencies are available.
         *
         * @since 4.6.16
         *
         * @param $dependencies
         *
         * @return array|bool e
         */
        protected function check_dependencies($dependencies)
        {
        }
        /**
         * Replaces, in the event data, the unique ids of the linked posts with their post IDs.
         *
         * @since 4.6.16
         *
         * @param array $data
         * @param array $dependencies_ids
         *
         * @return array
         */
        protected function set_linked_posts_ids(&$data, array $dependencies_ids)
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function complete()
        {
        }
    }
    class Tribe__Events__Aggregator__Migrate
    {
        /**
         * Static Singleton Holder
         *
         * @var self
         */
        protected static $instance;
        /**
         * Option key for tracking that legacy ical migration has completed
         * @var string
         */
        protected static $migrated_ical_key = 'tribe-aggregator-legacy-ical-migrated';
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        /**
         * Setup all the hooks and filters
         *
         * @return void
         */
        private function __construct()
        {
        }
        /**
         * Checks if there are existing settings from the Old iCal or Facebook Plugins
         * and displays a notice with a button to migrated those using AJAX
         *
         * @return string
         */
        public function notice()
        {
        }
        /**
         * Gets one or all the iCal legacy settings
         *
         * @param string|null $index If null will return a Object with all the legacy settings
         *
         * @return mixed
         */
        public function get_ical_setting()
        {
        }
        /**
         * Checks if one or any iCal settings exists
         *
         * @param string|null $index If null will return a Object with all the legacy settings
         *
         * @return bool
         */
        public function has_ical_setting($index = \null)
        {
        }
        /**
         * Checks if legacy Facebook settings were migrated
         *
         * @return bool
         */
        public function is_ical_migrated()
        {
        }
        /**
         * Filters out empty values
         *
         * NOTE: we aren't using array_filter because EVEN with an empty() alias, the results are
         * unpredictable
         *
         * @param array $original_values
         *
         * @return array
         */
        public function filter_out_unwanted_values($original_values)
        {
        }
        /**
         * Method that Handles the AJAX converting of Legacy iCal Settings
         * AJAX methods will not return anything, only print a JSON string
         *
         * @return void
         */
        public function ajax_convert_ical_settings()
        {
        }
        /**
         * Get the iCal frequency and convert to EA
         *
         * @param  string $frequency iCal Frequency
         * @return string            EA Frequency
         */
        private function convert_ical_frequency($frequency)
        {
        }
        /**
         * Gets one or all the Facebook legacy settings
         *
         * @deprecated 4.6.23
         *
         * @param string|null $index If null will return a Object with all the legacy settings
         *
         * @return mixed
         */
        public function get_facebook_setting($index = \null)
        {
        }
        /**
         * Checks if one or any Facebook settings exists
         *
         * @deprecated 4.6.23
         *
         * @param string|null $index If null will return a Object with all the legacy settings
         *
         * @return bool
         */
        public function has_facebook_setting($index = \null)
        {
        }
        /**
         * Checks if legacy Facebook settings were migrated
         *
         * @deprecated 4.6.23
         *
         * @return bool
         */
        public function is_facebook_migrated()
        {
        }
        /**
         * Method that Handles the AJAX converting of Legacy Facebook Settings
         * AJAX methods will not return anything, only print a JSON string
         *
         * @deprecated 4.6.23
         *
         * @return void
         */
        public function ajax_convert_facebook_settings()
        {
        }
        /**
         * Get the Facebook frequency and convert to EA
         *
         * @deprecated 4.6.23
         *
         * @param  string $frequency Facebook Frequency
         * @return string            EA Frequency
         */
        private function convert_facebook_frequency($frequency)
        {
        }
    }
    class Tribe__Events__Aggregator__CLI__Service_Provider extends \tad_DI52_ServiceProvider
    {
        /**
         * Binds and sets up implementations.
         */
        public function register()
        {
        }
    }
    class Tribe__Events__Aggregator__CLI__Command
    {
        /**
         * @var int The polling interval timeout in seconds.
         */
        protected $polling_timeout = 30;
        /**
         * @var int The polling interval in seconds.
         */
        protected $polling_interval = 2;
        /**
         * Run an import of the specified type from a specified source.
         *
         * The command will use the API and licenses set for the site if required.
         *
         * <origin>
         * : the import origin type
         * ---
         * options:
         *   - ical
         *   - gcal
         *   - csv
         *   - ics
         *   - facebook
         *   - meetup
         *   - url
         * ---
         *
         * <source>
         * : The source to import events from; a URL or a file path for .ics and CSV files.
         *
         * [--keywords=<keywords>]
         * : Optionally filter events by these keywords.
         *
         * [--location=<location>]
         * : Filter events by this location, not supported by all origin types.
         *
         * [--radius=<radius>]
         * : Only fetch events in this mile radius around the location.
         * Will be ignored if the `--location` parameter is not set.
         *
         * [--start=<start>]
         * : Only fetch events starting after this date.
         * This should be a valid date string or a value supported by the `strtotime` PHP function.
         * Not supported by all origin types.
         *
         * [--end=<end>]
         * : Only fetch events starting before this date.
         * This should be a valid date string or a value supported by the `strtotime` PHP function.
         * When using natural language expressions keep in mind that those apply from the current time, not start.
         * Not supported by all origin types.
         * Defaults the range set in the import settings for this origin type.
         *
         * [--limit_type=<limit_type>]
         * : The type of limit that should be used to limit the number of fetched events.
         * ---
         * options:
         *   - count
         *   - range
         *   - no_limit
         * ---
         *
         * [--limit=<limit>]
         * : The value of the limit that should be applied; ignored if `--limit_type` is not set or set to `no_limit`.
         * Either a value in seconds if the `--limit_type` is range or a number if `--limit_type` is set to `count`.
         * When importing CSV files this limit will NOT apply.
         *
         * [--timeout=<timeout>]
         * : How long should the command wait for the data from EA Service in seconds
         * ---
         * default: 30
         * ---
         *
         * [--post_status=<post_status>]
         * : The post status that should be assigned to the imported events; default to the one set in Import options.
         * ---
         * options:
         *   - publish
         *   - draft
         *   - pending
         *   - private
         * ---
         *
         * [--category=<category>]
         * : An optional category that should be assigned to the imported events.
         *
         * [--content_type=<content_type>]
         * : The type of import for CSV files.
         * The column mapping must be defined with the `--column_map` parameter.
         * ---
         * default: events
         * options:
         *   - events
         *   - venues
         *   - organizers
         * ---
         *
         * [--column_map=<column_map>]
         * : the column mapping that should be used for CSV imports; required when runnin CSV imports. A comma separated
         * list where the order counts.
         * For events the available columns are: name, description, excerpt, start_date, start_time, end_date, end_time,
         * timezone, all_day, hide, sticky, venue_name, organizer_name, show_map_link, show_map, cost, currency_symbol,
         * currency_position, category, tags, website, comment_status, ping_status, featured_image, feature_event
         * For venues the available columns are: name, description, country, address, address2, city, state, zip, phone,
         * url, featured_image
         * For organizers the available columns are: name, description, email, website, phone, featured_image
         *
         * [--format=<format>]
         * : The results output format
         * ---
         *
         * ## Examples
         *
         *      wp event-aggregator import-from ical https://some-ical-source/feed.ics
         *      wp event-aggregator import-from ical https://some-ical-source/feed.ics --start=tomorrow --end="+3 weeks"
         *      wp event-aggregator import-from ical https://some-ical-source/feed.ics --limit_type=count --limit=20
         *      wp event-aggregator import-from ical https://some-ical-source/feed.ics --location="Toronto" --radius=50
         *      wp event-aggregator import-from ical https://some-ical-source/feed.ics --keywords=Party
         *      wp event-aggregator import-from meetup https://www.meetup.com/wordpress-ile-de-france/
         *      wp event-aggregator import-from gcal https://calendar.google.com/calendar/ical/me/public/basic.ics
         *      wp event-aggregator import-from csv /Users/moi/events.csv --content_type=events --column_map=name,description,start_date,start_time,end_date,end_time
         *      wp event-aggregator import-from ics /Users/moi/events.ics
         *
         *
         * @since      4.6.15
         *
         * @subcommand import-from
         *
         * @when       after_wp_load
         */
        public function import_from_source(array $args, array $assoc_args = [])
        {
        }
        /**
         * Check the timeout parameter if set.
         *
         * @since 4.6.15
         */
        protected function ensure_timeout(array $assoc_args)
        {
        }
        /**
         * Creates a new record.
         *
         * @since 4.6.15
         *
         * @param array $assoc_args
         * @param string $origin
         * @param string $source
         *
         * @return Tribe__Events__Aggregator__Record__Abstract
         */
        protected function create_record_from(array $assoc_args, $origin, $source)
        {
        }
        /**
         * Fetches the data from the Service and processes it.
         *
         * @since 4.6.15
         *
         * @param array $assoc_args
         * @param Tribe__Events__Aggregator__Record__Abstract $record
         * @param bool $is_csv
         *
         * @return array
         */
        protected function fetch_and_process(array $assoc_args, $record, $is_csv)
        {
        }
        /**
         * Imports a CSV file.
         *
         * The logic to handle and import CSV files is different, primarily in it not relying on the Service, from
         * other imports. Mind that CSV source files should have their columns in exactly the same order and named
         * exactly as those found in the UI.
         *
         * @since 4.6.15
         *
         * @param Tribe__Events__Aggregator__Record__CSV $record
         * @param array $record_meta
         * @param string|array $column_map The column map that should be used for the import, either a comma-separated list
         *                                 or an array.
         *
         * @return Tribe__Events__Aggregator__Record__Activity
         */
        protected function import_csv_file($queue_result, $record, $column_map)
        {
        }
        /**
         * Imports the data for a record from the Service.
         *
         * This is a full end-to-end handling of the request; the method will queue the import on the Service,
         * fetch the data from it and import the returned data (if any).
         *
         * @param array $assoc_args
         * @param object|WP_Error $queue_result The result of the queue operation on the Service
         * @param Tribe__Events__Aggregator__Record__Abstract $record
         *
         * @return Tribe__Events__Aggregator__Record__Activity
         */
        protected function import_from_service($queue_result, $record)
        {
        }
        /**
         * Run a schuduled import.
         *
         * The command will use the API and licenses set for the site if required.
         *
         * <import_id>
         * : the import ID, i.e. the import post ID in the site database
         *
         * [--timeout=<timeout>]
         * : How long should the command wait for the data from EA Service in seconds
         * ---
         * default: 30
         * ---
         *
         * [--format=<format>]
         * : The results output format
         * ---
         *
         * ## Examples
         *
         *      wp event-aggregator run-import 2389
         *      wp event-aggregator run-import 2389 --timeout=180
         *
         * @since      4.6.15
         *
         * @subcommand run-import
         *
         * @when       after_wp_load
         */
        public function run_import(array $args, array $assoc_args = [])
        {
        }
        /**
         * Checks the associative arguments to make sure the column map is provided for CSV imports.
         *
         * @since 4.6.15
         *
         * @param array $assoc_args
         */
        protected function ensure_column_map(array $assoc_args = [])
        {
        }
    }
    class Tribe__Events__Aggregator__Cron
    {
        /**
         * Action where the cron will run, on schedule
         * @var string
         */
        public static $action = 'tribe_aggregator_cron';
        /**
         * Action where the cron will run, if enqueued manually
         * @var string
         */
        public static $single_action = 'tribe_aggregator_single_cron';
        /**
         * Limit of Requests to our servers
         * @var int
         */
        private $limit = 25;
        /**
         * A Boolean holding if this Cron is Running
         * @var boolean
         */
        private $is_running = \false;
        /**
         * Static Singleton Holder
         *
         * @var self
         */
        private static $instance;
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        /**
         * Setup all the hooks and filters
         *
         * @return void
         */
        private function __construct()
        {
        }
        /**
         * Frequencies in which a Scheduled import can Happen
         *
         * @param  array  $search  Search on existing schedules with `array_intersect_assoc`
         *
         * @return array|stdClass
         */
        public function get_frequency($search = [])
        {
        }
        /**
         * Register the base frequency on WP cron system
         *
         * @return void
         */
        public function action_register_cron()
        {
        }
        /**
         * Adds the Frequency to WP cron schedules
         * Instead of having cron be scheduled to specific times, we will check every 30 minutes
         * to make sure we can insert without having to expire cache.
         *
         * @param array $schedules Current list of schedules.
         *
         * @return array            Modified list of schedules.
         */
        public function filter_add_cron_schedules($schedules = [])
        {
        }
        /**
         * Allows us to Prevent too many of our Requests to be fired at on single Cron Job
         *
         * @param  boolean  $run     Shouldn't trigger the call
         * @param  array    $request The Request that was made
         * @param  string   $url     To which URL
         *
         * @return boolean|array|object
         */
        public function filter_check_http_limit($run = \false, $request = \null, $url = \null)
        {
        }
        /**
         * A Wrapper method to run the Cron Tasks here
         *
         * @return void
         */
        public function run()
        {
        }
        /**
         * Checks if any Child Record needs to be created, this will run on the Cron every 15m
         *
         * @since  4.3
         * @return void
         */
        public function verify_child_record_creation()
        {
        }
        /**
         * Start the processing of the scheduled imports created with batch pushing the cron job would select and start
         * the beginning of the batch delivery.
         *
         * @since 5.3.0
         */
        public function start_batch_pushing_records()
        {
        }
        /**
         * Get the first set of pending schedule records to be processed for batch pushing.
         *
         * @since 5.3.0
         *
         * @return WP_Query The result of the Query.
         */
        private function get_batch_pushing_records()
        {
        }
        /**
         * Checks if any record data needs to be fetched from the service, this will run on the Cron every 15m
         *
         * @since  4.3
         * @return void
         */
        public function verify_fetching_from_service()
        {
        }
        /**
         * @since  4.3.2
         * @return void
         */
        public function purge_expired_records()
        {
        }
        /**
         * Tries to fetch the data for the scheduled import and immediately process it.
         *
         * @since 4.6.16
         *
         * @param Tribe__Events__Aggregator__Record__Abstract $record
         */
        protected function maybe_process_immediately(\Tribe__Events__Aggregator__Record__Abstract $record)
        {
        }
    }
    /**
     * Class Tribe__Events__Aggregator__API__Requests
     *
     * Encapsulates the WordPress HTTP API.
     */
    class Tribe__Events__Aggregator__API__Requests
    {
        /**
         * Builds and returns the custom headers needed to identify the site in the service.
         *
         * @since 4.6.2
         *
         * @return array
         */
        public function get_site_headers()
        {
        }
        /**
         * Retrieve the raw response from the HTTP request using the GET method.
         *
         * @param string $url  Site URL to retrieve.
         * @param array  $args Optional. Request arguments. Default empty array.
         *
         * @return array|WP_Error
         */
        public function get($url, $args = [])
        {
        }
        /**
         * Retrieve the raw response from the HTTP request using the POST method.
         *
         * @since 4.6.2
         *
         * @param string $url  Site URL to retrieve.
         * @param array  $args Optional. Request arguments. Default empty array.
         *
         * @return array|WP_Error
         */
        public function post($url, $args = [])
        {
        }
    }
    abstract class Tribe__Events__Aggregator__API__Abstract
    {
        /**
         * @var Tribe__Events__Aggregator__Service
         */
        public $service;
        public $cache_group = 'tribe_aggregator';
        public function __construct()
        {
        }
    }
    class Tribe__Events__Aggregator__API__Import extends \Tribe__Events__Aggregator__API__Abstract
    {
        public $event_field_map = ['title' => 'post_title', 'description' => 'post_content', 'start_date' => 'EventStartDate', 'start_hour' => 'EventStartHour', 'start_minute' => 'EventStartMinute', 'start_meridian' => 'EventStartMeridian', 'end_date' => 'EventEndDate', 'end_hour' => 'EventEndHour', 'end_minute' => 'EventEndMinute', 'end_meridian' => 'EventEndMeridian', 'url' => 'EventURL', 'parent_id' => 'parent_id', 'uid' => 'uid', 'dev_start' => 'dev_start', 'dev_end' => 'dev_end', 'all_day' => 'EventAllDay', 'timezone' => 'EventTimezone', 'recurrence' => 'recurrence', 'categories' => 'categories', 'currency_symbol' => 'EventCurrencySymbol', 'currency_position' => 'EventCurrencyPosition', 'cost' => 'EventCost'];
        public $organizer_field_map = ['organizer' => 'Organizer', 'phone' => 'Phone', 'website' => 'Website', 'email' => 'Email'];
        public $venue_field_map = ['venue' => 'Venue', 'address' => 'Address', 'city' => 'City', 'stateprovince' => 'StateProvince', 'country' => 'Country', 'zip' => 'Zip', 'phone' => 'Phone', 'overwrite_coordinates' => 'OverwriteCoords', 'latitude' => 'Lat', 'longitude' => 'Lng'];
        public function __construct()
        {
        }
        /**
         * Gets the status (and possibly the results) of an import
         *
         * @param string $import_id Event Aggregator import id
         *
         * @return stdClass|WP_Error A class containing the service response or a WP_Error if the service could not be reached.
         */
        public function get($import_id, $data = [])
        {
        }
        /**
         * Creates an import
         *
         * @param array $args Array of arguments for event creation
         *
         * @return stdClass|WP_Error
         */
        public function create($args)
        {
        }
        /**
         * Update the details of an existing import into EA server.
         *
         * @since 5.1.5
         *
         * @param $import_id string The ID of the import to be updated.
         * @param $args      array An key, value array representing the values to update on the EA server.
         *
         * @return object|stdClass|string|WP_Error Response from EA server.
         */
        public function update($import_id, $args)
        {
        }
        /**
         * Translates event JSON to the-events-calendar Event array format
         *
         * @param object $json Event data in Event Aggregator format
         *
         * @return array
         */
        public function translate_json_to_event($json)
        {
        }
    }
    class Tribe__Events__Aggregator__API__Origins extends \Tribe__Events__Aggregator__API__Abstract
    {
        /**
         * @since 4.9.6
         */
        const VERSION = '1.1.0';
        /**
         * @var array
         */
        public $origins;
        /**
         * @var bool Whether EA is enabled or not.
         *           While EA might be ready to work on a license and functional level
         *           the user might disable it; this flag tracks that choice.
         */
        protected $is_ea_disabled = \true;
        /**
         * @var array An array of origins that will still be available when EA has
         *            been disabled by the user.
         */
        protected $available_when_disabled = ['csv'];
        public function __construct()
        {
        }
        /**
         * Get event-aggregator origins
         *
         * @return array
         */
        public function get()
        {
        }
        /**
         * Get event-aggregator origins from the service or cache
         *
         * @return array
         */
        private function enable_service_origins()
        {
        }
        /**
         * Fetches origin data from the service and sets necessary transients
         */
        private function fetch_origin_data()
        {
        }
        /**
         * Returns whether oauth for a given origin is enabled.
         *
         * The OAuth status for the origin is enabled on EA Service side.
         *
         * @param string $origin The origin to check the OAuth status for.
         *
         * @return boolean Whether OAuth is enabled for the origin or not.
         */
        public function is_oauth_enabled($origin)
        {
        }
        /**
         * Get origin limit values for an operation.
         *
         * @param string $type Type of operation limit to retrieve; defaults to `import`.
         *
         * @return int The numeric limit (how many times) applied to the operation.
         */
        public function get_limit($type = 'import')
        {
        }
        public function get_name($id)
        {
        }
        /**
         * Whether an origin is available or not in respect to the user possibility
         * to disable EA functions.
         *
         * @param stdClass|string $origin The origin to check for availability as an object
         *                                or a slug.
         *
         * @return bool
         */
        public function is_origin_available($origin)
        {
        }
        /**
         * Gets the data for an internal Origins data key.
         *
         * The result might be cached from a previous request.
         *
         * @since 4.9.6
         *
         * @param string|null $key The key to fetch the data for.
         *
         * @return mixed|object|bool The data associated with the key if any and available, `false` otherwise.
         */
        public function get_data($key)
        {
        }
    }
    class Tribe__Events__Aggregator__API__Image extends \Tribe__Events__Aggregator__API__Abstract
    {
        /**
         * Fetches an image from the service and saves it to the filesystem if needed
         *
         * @param  string                                      $image_id  EA Image ID
         * @param  Tribe__Events__Aggregator__Record__Abstract $record    Record Object
         *
         * @return WP_Error|stdClass {
         *     @type int        $post_id      Attachment ID on WP
         *     @type string     $filename     Name of the image file
         *     @type string     $path         Absolute path of the image
         *     @type string     $extension    Extension of the image
         * }
         *
         */
        public function get($image_id, $record = \false)
        {
        }
    }
    /**
     * Class to initialize and add the required items in
     *
     * @since  4.5.12
     */
    class Tribe__Events__Aggregator__Admin_Bar
    {
        /**
         * Instance of this Class
         *
         * @since  4.5.12
         *
         * @var Tribe__Events__Admin__Bar__Admin_Bar
         */
        protected static $instance;
        /**
         * Plugin Constants
         *
         * @since  4.5.12
         *
         * @var Tribe__Events__Constants
         */
        protected $constants;
        /**
         * Singleton constructor for the class.
         *
         * @since  4.5.12
         *
         * @return Tribe__Events__Aggregator__Admin_Bar
         */
        public static function instance()
        {
        }
        /**
         * Tribe__Events__Aggregator__Admin_Bar constructor.
         *
         * @since  4.5.12
         *
         * @param  Tribe__Events__Constants  $constants A constants access proxy.
         */
        public function __construct(\Tribe__Events__Constants $constants = \null)
        {
        }
        /**
         * Whether the Tribe Admin Bar is enabled or not.
         *
         * @since  4.5.12
         *
         * @return bool `false` if the `TRIBE_DISABLE_TOOLBAR_ITEMS` constant is `true` or the current screen is the network
         *              admin one, `true` otherwise.
         */
        public function is_enabled()
        {
        }
        /**
         * Adds menus, groups and nodes to the admin bar according the configuration.
         *
         * @since  4.5.12
         *
         * @param WP_Admin_Bar|null $wp_admin_bar
         */
        public function init(\WP_Admin_Bar $wp_admin_bar = \null)
        {
        }
        /**
         * Facebook is no longer supported in EA, so ensure that it doesn't show up in the list of available
         * services.
         *
         * @since 4.6.24
         *
         * @param array $service_response The array of EA import origins.
         * @return array The array of EA import origins with Facebook removed.
         */
        protected function remove_facebook_from_service_response($service_response)
        {
        }
    }
    class Tribe__Events__Aggregator__Page
    {
        /**
         * Static Singleton Holder
         *
         * @var self|null
         */
        private static $instance;
        /**
         * The page slug
         * @var string
         */
        public static $slug = 'aggregator';
        /**
         * Stores the Registred ID from `add_submenu_page`
         *
         * @var string
         */
        public $ID;
        /**
         * Stores the Tabs Manager class
         *
         * @var null|Tribe__Events__Aggregator__Tabs
         */
        public $tabs;
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        /**
         * A private method to prevent it to be created twice.
         * It will add the methods and setup any dependencies
         */
        private function __construct()
        {
        }
        public function init()
        {
        }
        /**
         * Filter the plupload media settings to remove mime_type restrictions
         *
         * Even though .ics is in the default extension list for supported mime types,
         * Safari ignores that fact. Let's not restrict the extensions (much like the
         * Dashboard's Add New Media page)
         *
         * @param array $settings Plupload settings
         *
         * @return array
         */
        public function filter_plupload_default_settings($settings)
        {
        }
        /**
         * Hooked to `current_screen` allow tabs and other parts of the plugin to hook to aggregator before rendering any headers
         *
         * @param  WP_Screen $screen Variable from `current_screen`
         *
         * @return bool
         */
        public function action_request($screen)
        {
        }
        /**
         * Checks if we are in the correct screen
         *
         * @return boolean
         */
        public function is_screen()
        {
        }
        /**
         * Checks if the license is still valid once the aggregator page
         * is accessed.
         *
         * @since 4.6.19
         *
         * @return void
         */
        public function check_for_license_updates()
        {
        }
        /**
         * Returns the main admin settings URL.
         *
         * @param array|string $args     Query String or Array with the arguments
         * @param boolean      $relative Return a relative URL or absolute
         *
         * @return string
         */
        public function get_url($args = [], $relative = \false)
        {
        }
        /**
         * Gets the Menu label for the Aggregator
         *
         * @return string
         */
        public function get_menu_label()
        {
        }
        /**
         * Gets the Page title for the Aggegator
         *
         * @return string
         */
        public function get_page_title()
        {
        }
        /**
         * Register the Sub Menu item for this page
         *
         * @return string Page ID on WordPress
         */
        public function register_menu_item()
        {
        }
        /**
         * A very simple method to include a Aggregator Template, allowing filtering and additions using hooks.
         *
         * @param string  $name Which file we are talking about including-
         * @param array   $data Any context data you need to expose to this file.
         * @param boolean $echo If we should also print the Template.
         *
         * @return string        Final Content HTML
         */
        public function template($name, $data = [], $echo = \true)
        {
        }
        /**
         * A simple shortcut to render the Template for the page
         *
         * @return string
         */
        public function render()
        {
        }
        public function notice_legacy_plugins()
        {
        }
    }
    class Tribe__Events__Aggregator__Meta_Box
    {
        /**
         * @var Tribe__Events__Aggregator Event Aggregator bootstrap class
         */
        protected static $instance;
        /**
         * Static Singleton Factory Method
         *
         * @return Tribe__Events__Aggregator
         */
        public static function instance()
        {
        }
        private function __construct()
        {
        }
        public function add()
        {
        }
        public function render()
        {
        }
    }
    /**
     * Class Tribe__Events__Aggregator__REST__V1__Service_Provider
     *
     * Provides the Event Aggregator batch process support functionality.
     *
     * @since 4.6.15
     */
    class Tribe__Events__Aggregator__REST__V1__Service_Provider extends \tad_DI52_ServiceProvider
    {
        /**
         * Binds and sets up implementations.
         */
        public $namespace;
        /**
         * Registers the classes and functionality needed to support batch imports.
         *
         * @since 4.6.15
         */
        public function register()
        {
        }
        /**
         * Registers the REST API endpoints needed to support batch imports.
         *
         * @since 4.6.15
         */
        public function register_endpoints()
        {
        }
    }
    /**
     * Class Tribe__Events__Aggregator__REST__V1__Endpoints__Base
     *
     * @since 4.6.15
     *
     * The base for the Aggregator endpoints.
     */
    abstract class Tribe__Events__Aggregator__REST__V1__Endpoints__Base
    {
        /**
         * Whether teh current import ID exists and is for a record that needs data.
         *
         * @since 4.6.15
         *
         * @param string $import_id
         *
         * @return bool
         */
        public function is_valid_import_id($import_id)
        {
        }
        /**
         * Whether the batch hash is the expected one or not.
         *
         * @since 4.6.15
         *
         * @param string $batch_hash
         *
         * @return bool
         */
        public function is_expected_batch_hash($batch_hash, \WP_REST_Request $request)
        {
        }
        /**
         * Whether the interval is an acceptable one or not.
         *
         * @since 4.6.15
         *
         * @param int $interval
         *
         * @return bool
         */
        public function is_valid_interval($interval)
        {
        }
        /**
         * Whether the specified percentage is legit or not.
         *
         * @since 4.6.15
         *
         * @param int $percentage
         *
         * @return bool
         */
        public function is_percentage($percentage)
        {
        }
    }
    /**
     * Class Tribe__Events__Aggregator__REST__V1__Endpoints__Batch
     *
     * @since 4.6.15
     *
     * An endpoint dedicated to processing events in batches.
     */
    class Tribe__Events__Aggregator__REST__V1__Endpoints__Batch extends \Tribe__Events__Aggregator__REST__V1__Endpoints__Base implements \Tribe__REST__Endpoints__CREATE_Endpoint_Interface
    {
        /**
         * @var Record_Abstract
         */
        protected $current_record;
        /**
         * The minimum interval, in seconds.
         *
         * @var int
         */
        protected $interval_min = 10;
        /**
         * The maximum interval, in seconds.
         *
         * @var
         */
        protected $interval_max = 600;
        /**
         * Handles a batch processing request sent by the server.
         *
         * @since 4.6.15
         *
         * @param WP_REST_Request $request   Object representing the Http request to this endpoint.
         * @param bool            $return_id Whether the ID should be returned or not.
         *
         * @return int|WP_Error|WP_REST_Response
         */
        public function create(\WP_REST_Request $request, $return_id = \false)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function CREATE_args()
        {
        }
        /**
         * Whether batch imports are supported or not.
         */
        public function can_create()
        {
        }
        /**
         * Validates the status information sent by the server.
         *
         * @since 4.6.15
         *
         * @param object $status
         *
         * @return bool
         */
        public function is_valid_status_information($status)
        {
        }
    }
    class Tribe__Events__Aggregator__REST__V1__Endpoints__State extends \Tribe__Events__Aggregator__REST__V1__Endpoints__Base implements \Tribe__REST__Endpoints__CREATE_Endpoint_Interface
    {
        /**
         * Handles POST requests on the endpoint.
         *
         * @param WP_REST_Request $request
         * @param bool            $return_id Whether the created post ID should be returned or the full response object.
         *
         * @return WP_Error|WP_REST_Response|int An array containing the data on success or a WP_Error instance on failure.
         */
        public function create(\WP_REST_Request $request, $return_id = \false)
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         */
        public function CREATE_args()
        {
        }
        /**
         * Whether the current user can create content of the specified type or not.
         *
         * @return bool Whether the current user can post or not.
         */
        public function can_create()
        {
        }
    }
    class Tribe__Events__Template_Factory extends \Tribe__Template_Factory
    {
        /**
         * Length for excerpts on this template
         *
         * @var int
         **/
        protected $excerpt_length = 80;
        /**
         * Text for excerpt more on this template
         *
         * @var string
         **/
        protected $excerpt_more = '&hellip;';
        /**
         * Body class on this view
         *
         * @var string
         **/
        protected $body_class = '';
        /**
         * Static variable that holds array of vendor script handles, for adding to later deps.
         *
         * @static
         * @var array
         */
        protected $comments_off = \false;
        /**
         * Run include packages, set up hooks
         *
         **/
        public function __construct()
        {
        }
        /**
         * Set up hooks for this template
         *
         **/
        protected function hooks()
        {
        }
        /**
         * Filter the body class
         *
         * @param array $classes
         *
         * @return array
         */
        public function body_class($classes = [])
        {
        }
        /**
         * Add classes to events on this view
         *
         * @return array
         **/
        public function event_classes($classes)
        {
        }
        /**
         * Set up the notices for this template
         *
         **/
        public function set_notices()
        {
        }
        /**
         * Returns an array containing the search term, tax term and geographic term
         * for the current request. Each may be empty.
         *
         * @return array
         **/
        protected function get_search_terms()
        {
        }
        /**
         * Sets an appropriate no results found message. This may be overridden in child classes.
         */
        protected function nothing_found_notice()
        {
        }
        /**
         * Setup the view, query hijacking, etc. This happens right before the view file is included
         *
         **/
        public function setup_view()
        {
        }
        /**
         * Apply filter to the title tag
         *
         * @param string|array $title
         * @param string|null $sep
         *
         * @return mixed|void
         */
        public final function title_tag($title, $sep = \null)
        {
        }
        /**
         * Get the title for the view
         *
         * @param      $title
         * @param null $sep
         *
         * @return string
         */
        protected function get_title($title, $sep = \null)
        {
        }
        /**
         * Echo open tags for wrapper around view
         *
         **/
        public function view_wrapper_open()
        {
        }
        /**
         * Output an input to store the hash for the current query
         *
         **/
        public function add_input_hash()
        {
        }
        /**
         * Echo open tags for wrapper around view
         *
         **/
        public function view_wrapper_close()
        {
        }
        /**
         * Function to execute when ajax view is requested
         */
        public function ajax_response()
        {
        }
        /**
         * Shutdown the view, restore the query, etc. This happens right after the view file is included
         *
         **/
        public function shutdown_view()
        {
        }
        /**
         * Unhook all the hooks set up on this view
         *
         **/
        protected function unhook()
        {
        }
        /**
         * Add/remove filters to hide/show sensitive event info on password protected posts
         *
         * @param WP_Post $post
         *
         **/
        public function manage_sensitive_info($post)
        {
        }
        /**
         * Return an empty file as the comments template (to disable comments)
         *
         * @param string $template
         *
         * @return string
         **/
        public function remove_comments_template($template)
        {
        }
        /**
         * Limit the excerpt length on this template
         *
         * @param $length
         *
         * @return int
         */
        public function excerpt_length($length)
        {
        }
        /**
         * Set up the excerpt more text on this template
         *
         * @param int $more
         *
         * @return int
         */
        public function excerpt_more($more)
        {
        }
        /**
         * Check if comments are disabled on this view
         *
         * @param $option_value
         * @param $option_name
         *
         * @return int
         * @internal param int $more
         *
         */
        public function comments_off($option_value, $option_name)
        {
        }
        /************************
         *                      *
         *  Deprecated Methods  *
         *                      *
         ************************/
        /**
         * Asset calls for vendor packages
         *
         * @deprecated 4.6.21
         *
         * @param string $name
         * @param array  $deps Dependents
         */
        public static function asset_package($name, $deps = [])
        {
        }
        /**
         * Handles an asset package request.
         *
         * @deprecated 4.6.21
         *
         * @param string      $name       The asset name in the `hyphen-separated-format`
         * @param array       $deps       An array of dependency handles
         * @param string      $vendor_url URL to vendor scripts and styles dir
         * @param string      $prefix     MT script and style prefix
         * @param Tribe__Main $tec        An instance of the main plugin class
         */
        protected static function handle_asset_package_request($name, $deps, $vendor_url, $prefix, $tec)
        {
        }
        /**
         * Retrieves the appropriate asset factory instance
         *
         * @deprecated 4.6.21
         */
        protected static function get_asset_factory_instance($name)
        {
        }
        /**
         * Setup meta display in this template
         *
         * @deprecated 4.3
         **/
        public function setup_meta()
        {
        }
        /**
         * Filters the post title as WordPress does in `get_the_title` to apply the password-protected prefix in
         * the context of AJAX requests.
         *
         * @since 5.0.0
         *
         * @param string      $title   The post title.
         * @param int|WP_Post $post_id The post ID, or object, to apply the filter for.
         *
         * @return string The filtered post title.
         */
        public function filter_get_the_title($title, $post_id = 0)
        {
        }
    }
    class Tribe__Events__Template__Day extends \Tribe__Events__Template_Factory
    {
        protected $body_class = 'tribe-events-day';
        protected $asset_packages = [];
        const AJAX_HOOK = 'tribe_event_day';
        /**
         * The path to the template file used for the view.
         * This value is used in Shortcodes/Tribe_Events.php to
         * locate the correct template file for each shortcode
         * view.
         *
         * @var string
         */
        public $view_path = 'day/content';
        /**
         * Set up hooks for this template
         *
         **/
        public function hooks()
        {
        }
        /**
         * Add header attributes for day view
         *
         * @return string
         **/
        public function header_attributes($attrs)
        {
        }
        /**
         * Get the title for day view
         * @param      $title
         * @param null $sep
         *
         * @return string
         */
        protected function get_title($original_title, $sep = \null)
        {
        }
        /**
         * Get the link to download the ical version of day view
         * @param $link
         *
         * @return string
         */
        public function ical_link($link)
        {
        }
        /**
         * Organize and reorder the events posts according to time slot
         *
         **/
        public function setup_view()
        {
        }
        protected function nothing_found_notice()
        {
        }
        /**
         * AJAX handler for tribe_event_day (dayview navigation)
         * This loads up the day view shard with all the appropriate events for the day
         *
         */
        public function ajax_response()
        {
        }
    }
    /**
     * Month view template class
     */
    class Tribe__Events__Template__Month extends \Tribe__Events__Template_Factory
    {
        /**
         * Month Type Masks
         */
        const PREVIOUS_MONTH = -1;
        const CURRENT_MONTH = 0;
        const NEXT_MONTH = 1;
        /**
         * Prefix for month view ajax actions
         */
        const AJAX_HOOK = 'tribe_calendar';
        /**
         * The path to the template file used for the view.
         * This value is used in Shortcodes/Tribe_Events.php to
         * locate the correct template file for each shortcode
         * view.
         *
         * @var string
         */
        public $view_path = 'month/content';
        /**
         * Number of events per day
         * @var int
         * @see tribe_events_month_day_limit
         */
        private $events_per_day;
        /**
         * Grid day events
         * @var array
         */
        private $event_ids_by_day;
        /**
         * Array of days of the month
         * @var array
         */
        private static $calendar_days = [];
        /**
         * Internal pointer to current day in the month view loop
         * @var int
         */
        private static $current_day = -1;
        /**
         * Internal pointer to current week in the month view loop
         * @var int
         */
        private static $current_week = -1;
        /**
         * Query args
         * @var array|null
         */
        protected $args;
        /**
         * Indicates the array index marking the first entry for the current month.
         * @var int
         */
        protected $current_month_begins;
        /**
         * Indicates the array index marking the last entry for the current month.
         * @var int
         */
        protected $current_month_ends;
        /**
         * CSS class for the month view wrapper
         * @var string
         */
        protected $body_class = 'events-gridview';
        /**
         * Excerpt length on month view tooltips
         * @var int
         */
        protected $excerpt_length = 30;
        /**
         * Static asset packages required for month view functionality
         * @var array
         */
        protected $asset_packages = [];
        /**
         * HTML cache holder
         * @var Tribe__Template_Part_Cache
         */
        private $html_cache;
        /**
         * Number of seconds before the month view cache (when enabled) should be
         * invalidated.
         *
         * @var int
         */
        private $cache_expiration;
        /**
         * Whether the HTML cache is enabled
         * @var boolean
         */
        private $use_cache;
        /**
         * The events in this month
         * @var
         */
        private $events_in_month;
        /**
         * The category being viewed on month view
         * @var
         */
        private $queried_event_cats;
        /**
         * The month date that was requested
         * @var string
         */
        private $requested_date;
        /**
         * The first date to show on the calendar grid (may be in the previous month)
         * @var bool|string
         */
        private $first_grid_date;
        /**
         * The last date to show on the calendar grid (may be in the next month)
         * @var bool|string
         */
        private $final_grid_date;
        /**
         * Set the notices used on month view.
         *
         * @param array $args Set of $wp_query params for the month view, if none passed then will default to $wp_query.
         */
        public function __construct($args = [])
        {
        }
        /**
         * Indicates if month view cache should be enabled or not.
         *
         * If the month view cache setting itself is not enabled (or not set) then this
         * method will always return false.
         *
         * In other cases, the default rules are to cache everything in the 2 months past
         * to 12 months in the future range. This policy can be refined or replaced via
         * the 'tribe_events_enable_month_view_cache' filter hook.
         *
         * @return bool
         */
        protected function should_enable_month_view_cache()
        {
        }
        /**
         * Returns an array containing the IDs of all the events in the month.
         *
         * @return array
         */
        public function get_events_in_month_ids()
        {
        }
        /**
         * Add any special hooks for this view
         * any actions added here should also be removed in the unhook function
         *
         */
        protected function hooks()
        {
        }
        /**
         * When dealing with a place that has multiple events, we need to pass all the events as the first param
         * to allow the class to echo the correct JSON-LD script
         *
         * @return void
         */
        public function json_ld_markup()
        {
        }
        /**
         * Renders or returns the JSON LD markup.
         *
         * @param bool $echo
         *
         * @return string
         */
        protected function produce_json_ld_markup($echo = \false)
        {
        }
        /**
         * Remove any event that is not the same as the current term of the array of events, it return a modified events
         * array with the events that only has the current term or original events if the term is not valid.
         *
         * @since 4.6.9
         *
         * @param array
         *
         * @return array
         */
        private function filter_by_current_term($events)
        {
        }
        /**
         * Unhook all the hooks set up on this view
         *
         */
        protected function unhook()
        {
        }
        /**
         * Set the correct args using either passed args, ajax request, or wp_query
         *
         *
         * @param array $args
         */
        protected function set_args($args = [])
        {
        }
        /**
         * Set the notices used on month view
         *
         */
        public function set_notices()
        {
        }
        /**
         * Sets an appropriate no results found message.
         *
         */
        protected function nothing_found_notice()
        {
        }
        /**
         * Get the title for month view
         *
         * @param string $original_title
         * @param string $sep
         *
         * @return string
         */
        protected function get_title($original_title, $sep = \null)
        {
        }
        /**
         * Get the view more link
         *
         * @param integer $date
         *
         * @return string
         */
        private static function view_more_link($date)
        {
        }
        /**
         * Set the queried terms as a class property
         * Include child categories of the category currently being viewed
         */
        protected function set_queried_event_cats()
        {
        }
        /**
         * Get all the events in the month by directly querying the postmeta table
         * Also caches the postmeta and terms for the found events
         */
        protected function set_events_in_month()
        {
        }
        /**
         * Returns a string that can be used as a cache key for the current month.
         *
         * @param string $prefix
         *
         * @return string
         */
        protected function get_month_view_cache_key($prefix)
        {
        }
        /**
         * Returns a posts-not-in SQL fragment for use in a WHERE clause or else an empty
         * string if it is unneeded.
         *
         * @return string
         */
        protected function hidden_events_fragment()
        {
        }
        /**
         * Retrieves beginning/end times for a given date
         *
         * @param string $date Y-m-d date string
         * @param string $key Key of cached data to retrieve
         *
         * return string|int
         */
        private function get_cutoff_details($date, $key)
        {
        }
        /**
         * Breaks the possible collection of events down by grid date
         *
         * @param string $date Y-m-d formatted date to retrieve events for
         *
         * @return array
         */
        private function get_event_ids_by_day($date)
        {
        }
        /**
         * Get the events for a single day
         *
         * @param string $date
         *
         * @return WP_Query
         */
        private function get_daily_events($date)
        {
        }
        /**
         * Sets up an array of $days based on the current query, that can be used in the calendar loop
         *
         */
        public function setup_view()
        {
        }
        /**
         * Returns the requested date as a Y-m (yyyy-mm) formatted string.
         *
         * If the requested date is invalid (such as 1984-25) the current month is returned instead and
         * an appropriate notice presented to the user.
         *
         * @return string
         */
        protected function requested_date()
        {
        }
        /**
         * Loop through the $_REQUEST and find all tribe bar args.
         *
         * @return array
         */
        protected static function get_tribe_bar_args()
        {
        }
        /**
         * Return the date of the first day in the month view grid.
         *
         * This is not necessarily the 1st of the specified month, rather it is the date of the
         * first grid cell which could be anything upto 6 days earlier than the 1st of the month.
         *
         * @param string  $month
         * @param integer $start_of_week
         *
         * @return bool|string (Y-m-d)
         */
        public static function calculate_first_cell_date($month, $start_of_week = \null)
        {
        }
        /**
         * Return the date of the first day in the month view grid.
         *
         * This is not necessarily the last day of the specified month, rather it is the date of
         * the final grid cell which could be anything upto 6 days into the next month.
         *
         * @param string  $month
         * @param integer $start_of_week
         *
         * @return bool|string (Y-m-d)
         */
        public static function calculate_final_cell_date($month, $start_of_week = \null)
        {
        }
        /**
         * Checks whether there are more calendar days to display
         *
         * @return bool True if calendar days are available, false if not.
         */
        public static function have_days()
        {
        }
        /**
         * Advances the internal day counter (and week counter, if appropriate)
         *
         */
        public static function the_day()
        {
        }
        /**
         * Rewind the posts and reset post index.
         *
         */
        public static function rewind_days()
        {
        }
        /**
         * Returns the current day according to self::$current_day
         *
         * @return array|boolean
         */
        public static function get_current_day()
        {
        }
        /**
         * Generates and returns a set of classes for the current day.
         *
         * @return string
         */
        public static function day_classes()
        {
        }
        /**
         * Returns self::$current_week
         *
         * @return int $current_week
         */
        public static function get_current_week()
        {
        }
        /**
         * Generates and returns a set of classes for the current day
         *
         * @param  string $classes = ''
         *
         * @return string Classes
         */
        public function event_classes($classes = '')
        {
        }
        /**
         * Month View Ajax Handler
         *
         */
        public function ajax_response()
        {
        }
        public function has_events()
        {
        }
        /**
         * Check if the month has events when all the filters have been applied.
         *
         * @since 4.6.19
         *
         * @return bool
         */
        public function has_events_filtered()
        {
        }
    }
    /**
     * List view template class
     */
    class Tribe__Events__Template__List extends \Tribe__Events__Template_Factory
    {
        protected $body_class = 'events-list';
        protected $asset_packages = [];
        const AJAX_HOOK = 'tribe_list';
        /**
         * The path to the template file used for the view.
         * This value is used in Shortcodes/Tribe_Events.php to
         * locate the correct template file for each shortcode
         * view.
         *
         * @var string
         */
        public $view_path = 'list/content';
        protected function hooks()
        {
        }
        /**
         * Get the title for list view
         * @param      $title
         * @param null $sep
         *
         * @return string
         */
        protected function get_title($original_title, $sep = \null)
        {
        }
        /**
         * List view ajax handler
         *
         */
        public function ajax_response()
        {
        }
    }
    /**
     * Single event template class
     */
    class Tribe__Events__Template__Embed extends \Tribe__Events__Template_Factory
    {
        protected $body_class = 'events-embed';
        public function hooks()
        {
        }
        /**
         * Adds content to the embed head tag
         *
         * The embed header DOES NOT have wp_head() executed inside of it. Instead, any scripts/styles
         * are explicitly output
         */
        public function embed_head()
        {
        }
        /**
         * Set up the notices for this template
         **/
        public function set_notices()
        {
        }
    }
    /**
     * Single event template class
     */
    class Tribe__Events__Template__Single_Event extends \Tribe__Events__Template_Factory
    {
        /**
         * The path to the template file used for the view.
         * This value is used in Shortcodes/Tribe_Events.php to
         * locate the correct template file for each shortcode
         * view.
         *
         * @var string
         */
        public $view_path = 'single-event';
        protected $body_class = 'events-single';
        public function hooks()
        {
        }
        /**
         * Setup meta display in this template
         *
         * @deprecated 4.3
         **/
        public function setup_meta()
        {
        }
        /**
         * Set up the notices for this template
         *
         **/
        public function set_notices()
        {
        }
        /**
         * Hook into filter and add our logic for adding body classes.
         *
         * @since 5.1.5
         *
         * @param boolean $add              Whether to add classes or not.
         * @param string  $queue            The queue we want to get 'admin', 'display', 'all'.
         *
         * @return boolean Whether body classes should be added or not.
         */
        public function body_classes_should_add($add, $queue)
        {
        }
    }
}
namespace Tribe\Events\Admin\Notice {
    /**
     * Class Legacy_Views_Deprecation
     *
     * @since 5.5.0
     *
     */
    class Legacy_Views_Deprecation
    {
        /**
         * Register v1 deprecation notice.
         *
         * @since 5.5.0
         */
        public function hook()
        {
        }
        /**
         * Checks if we are using a debug constant.
         *
         * @since 5.5.0
         *
         * @return bool
         */
        public function is_debug()
        {
        }
        /**
         * Checks if we are in a page we need to display.
         *
         * @since 5.5.0
         *
         * @return bool
         */
        public function is_valid_screen()
        {
        }
        /**
         * Checks all methods required for display.
         *
         * @since 5.5.0
         *
         * @return bool
         */
        public function should_display()
        {
        }
        /**
         * Get the date in which we are meant to deprecate.
         *
         * @since 5.5.0
         *
         * @return Tribe\Utils\Date_I18n_Immutable
         */
        public function get_deprecation_date()
        {
        }
        /**
         * HTML for the notice for sites using V1.
         *
         * @since 5.5.0
         *
         * @return string
         */
        public function notice()
        {
        }
    }
}
namespace {
    /**
     * Shows an admin notice for Timezones
     * (When using UTC and on TEC Pages or WordPress > General Settings)
     */
    class Tribe__Events__Admin__Notice__Timezones
    {
        /**
         * Notice Slug on the user options
         *
         * @since  4.8.2
         * @var string
         */
        private $slug = 'events-utc-timezone';
        public function hook()
        {
        }
        /**
         * Fetches the date in which the Notice had it's reset
         *
         * @since  4.8.2
         *
         * @return string|null
         */
        public function get_current_reset_date()
        {
        }
        /**
         * Which dates this Notice gets reset
         *
         * @since  4.8.2
         *
         * @return array
         */
        public function get_reset_dates()
        {
        }
        /**
         * Checks if we are in an TEC page or over
         * the WordPress > Settings > General
         *
         * @since  4.6.17
         *
         * @return boolean
         */
        public function should_display()
        {
        }
        /**
         * Checks if the site is using UTC Timezone Options
         *
         * @since  4.6.17
         *
         * @return boolean
         */
        public function is_utc_timezone($event = 0)
        {
        }
        /**
         * HTML for the notice for sites using UTC Timezones.
         *
         * @since  4.6.17
         *
         * @return string
         */
        public function notice()
        {
        }
    }
    /**
     * @internal This class may be removed or changed without notice
     */
    class Tribe__Events__Admin__Notice__Marketing
    {
        /**
         * Register marketing notices.
         *
         * @since 4.6.17
         * @since 5.1.5 - add Virtual Events Notice.
         */
        public function hook()
        {
        }
        /**
         * @since 4.6.17
         *
         * @return bool
         */
        public function should_display()
        {
        }
        /**
         * HTML for the notice for sites using UTC Timezones.
         *
         * @since 4.6.17
         *
         * @return string
         */
        public function notice()
        {
        }
    }
    /**
     * Tool for adding timezone data to events.
     *
     * The application for this is in transitioning any event data created in 3.11.x or
     * earlier that hasn't since been updated, so that it becomes "timezone ready".
     */
    class Tribe__Events__Admin__Timezone_Updater
    {
        /**
         * A count of events in need of updating - used to determine the percentage
         * of the task that has been completed.
         *
         * @var int
         */
        protected $initial_count = 0;
        /**
         * Initializes the update process.
         *
         * Determines if events are still in need of an update and triggers an update of an
         * initial batch of events if so.
         *
         * Once these are processed, notices are set to communicate the state of the update
         * back to the user (which also serves as a vehicle for continuing the update via
         * an ajax loop).
         */
        public function init_update()
        {
        }
        /**
         * Setup an admin-notice based progress report along with supporting assets to facilitate
         * an ajax loop for further processing where needed.
         */
        protected function notice_setup()
        {
        }
        /**
         * Renders the admin notice.
         *
         * This effectively just wraps notice_inner() - which is independently called to build
         * ajax responses.
         */
        public function notice_display()
        {
        }
        /**
         * Provides a progress report relating to the status of the timezone data update process.
         *
         * @return string
         */
        public function notice_inner()
        {
        }
        /**
         * Sets up the Javascript needed to facilitate the ajax loop on the frontend.
         */
        public function notice_assets()
        {
        }
        /**
         * Returns an integer representing the degree to which the update task has progressed
         * as a percentage of events in need of updating.
         *
         * @param  int $remaining
         *
         * @return int
         */
        protected function calculate_progress($remaining)
        {
        }
        /**
         * Updates the next batch of non-timezone ready events.
         *
         * @param int $batch_size (defaults to -1 meaning "update all")
         */
        public function process($batch_size = -1)
        {
        }
        /**
         * Return an array of event IDs for those events that still do not have
         * timezone data.
         *
         * @param  int $limit
         *
         * @return array
         */
        public function get_ids($limit = -1)
        {
        }
        /**
         * Get the number of events that still require timezone data.
         *
         * @return int
         */
        public function count_ids()
        {
        }
        /**
         * Indicates if there are still events that need to be updated
         * with timezone data.
         *
         * @return bool
         */
        public function update_needed()
        {
        }
        /**
         * Utility function that can return either an array of IDs for all (or the specified
         * number) of events without timezone data, or alternatively can return a count of
         * those events.
         *
         * @param  int        $limit
         * @param  bool|false $count
         *
         * @return array|int
         */
        protected function find($limit = -1, $count = \false)
        {
        }
    }
    /**
     * Sets up and renders the main event meta box used in the event editor.
     */
    class Tribe__Events__Admin__Event_Meta_Box
    {
        /**
         * @var WP_Post
         */
        protected $event;
        /**
         * @var Tribe__Events__Main
         */
        protected $tribe;
        /**
         * Variables (with some defaults) for use within the meta box template itself.
         *
         * @var array
         */
        protected $vars = ['_EventAllDay' => \false, '_EventEndDate' => \null, '_EventStartDate' => \null, '_EventOrganizerID' => \null, '_EventVenueID' => \null];
        /**
         * Sets up and renders the event meta box for the specified existing event
         * or for a new event (if $event === null).
         *
         * @param null $event
         */
        public function __construct($event = \null)
        {
        }
        public function init_with_event($event)
        {
        }
        /**
         * Exposes all the variables used in this instance, in a way that it's usable to extract
         * to be used by a template/view
         *
         * @param  WP_Post|int|null  $event What Post we are dealing with
         * @return array
         */
        public function get_extract_vars($event)
        {
        }
        /**
         * Work with the specifed event object or else use a placeholder if we are in
         * the middle of creating a new event.
         *
         * @param null $event
         */
        protected function get_event($event = \null)
        {
        }
        protected function setup_data()
        {
        }
        /**
         * Checks for existing event post meta data and populates the list of vars accordingly.
         */
        protected function get_existing_event_vars()
        {
        }
        /**
         * Checks for existing organizer post meta data and populates the list of vars accordingly.
         */
        protected function get_existing_organizer_vars()
        {
        }
        /**
         * Checks for existing venue post meta data and populates the list of vars accordingly.
         */
        protected function get_existing_venue_vars()
        {
        }
        /**
         * If it's an all day event and the EOD cutoff is later than midnight
         * set the end date to be the previous day so it displays correctly in the datepicker
         * so the datepickers will match. we'll set the correct end time upon saving
         *
         * @todo remove this once we're allowed to have all day events without a start/end time
         */
        protected function eod_correction()
        {
        }
        /**
         * Assess if this is an all day event.
         */
        protected function set_all_day()
        {
        }
        protected function set_start_date_time()
        {
        }
        protected function set_end_date_time()
        {
        }
        /**
         * Check if the Event is an Auto-Draft
         *
         * @since 4.4
         *
         * @return bool
         */
        public function is_auto_draft()
        {
        }
        /**
         * Gets the default value for the Timepicker
         *
         * @since 4.4
         *
         * @param mixed $type
         *
         * @return string
         */
        public function get_timepicker_default($type = \null)
        {
        }
        /**
         * Gets the Step for the Timepicker
         *
         * @since 4.4
         *
         * @param mixed $type
         *
         * @return int
         */
        public function get_timepicker_step($type = \null)
        {
        }
        /**
         * Gets whether or not the timepicker should round the minutes
         *
         * @since 4.4
         *
         * @return bool
         */
        public function get_timepicker_round()
        {
        }
        /**
         * Pull the expected variables into scope and load the meta box template.
         */
        protected function do_meta_box()
        {
        }
        /**
         * Disable WordPress Custom Fields in Events
         *
         * @since 4.6.23
         */
        public function display_wp_custom_fields_metabox()
        {
        }
    }
    interface Tribe__Events__Admin__Bar__Configurator_Interface
    {
        /**
         * Configures an admin bar object adding menus, groups and nodes to it.
         *
         * @param WP_Admin_Bar $wp_admin_bar
         *
         * @return mixed
         */
        public function configure(\WP_Admin_Bar $wp_admin_bar);
    }
    class Tribe__Events__Admin__Bar__Admin_Bar
    {
        /**
         * @var Tribe__Events__Admin__Bar__Admin_Bar
         */
        protected static $instance;
        /**
         * @var Tribe__Events__Constants
         */
        protected $constants;
        /**
         * @var Tribe__Events__Admin__Bar__Configurator_Interface
         */
        protected $config;
        /**
         * Singleton constructor for the class.
         *
         * @return Tribe__Events__Admin__Bar__Admin_Bar
         */
        public static function instance()
        {
        }
        /**
         * Tribe__Events__Admin__Bar__Admin_Bar constructor.
         *
         * @param Tribe__Events__Admin__Bar__Configurator_Interface $config    An admin bar configurator.
         * @param Tribe__Events__Constants                          $constants A constants access proxy.
         */
        public function __construct(\Tribe__Events__Admin__Bar__Configurator_Interface $config = \null, \Tribe__Events__Constants $constants = \null)
        {
        }
        /**
         * Whether the Tribe Admin Bar is enabled or not.
         *
         * @return bool `false` if the `TRIBE_DISABLE_TOOLBAR_ITEMS` constant is `true` or the current screen is the network
         *              admin one, `true` otherwise.
         */
        public function is_enabled()
        {
        }
        /**
         * Adds menus, groups and nodes to the admin bar according the configuration.
         *
         * @param WP_Admin_Bar|null $wp_admin_bar
         */
        public function init(\WP_Admin_Bar $wp_admin_bar = \null)
        {
        }
    }
    class Tribe__Events__Admin__Bar__Default_Configurator implements \Tribe__Events__Admin__Bar__Configurator_Interface
    {
        /**
         * Configures an admin bar object adding menus, groups and nodes to it.
         *
         * @param WP_Admin_Bar $wp_admin_bar
         *
         * @return array An array of menus to add to the admin bar.
         */
        public function configure(\WP_Admin_Bar $wp_admin_bar)
        {
        }
    }
    /**
     * Manages the admin settings UI in relation to timezones.
     */
    class Tribe__Events__Admin__Timezone_Settings
    {
        /**
         * Sets up the display of timezone-related settings and listeners to deal with timezone-update
         * requests (which are initiated from within the settings screen).
         */
        public function __construct()
        {
        }
        /**
         * Adds timezone settings to the *General* settings tab.
         *
         * When it is determined that timezone data still needs to be generated for one or more
         * events then only the update tool will be exposed in this area, in all other cases this
         * is not exposed and the ordinary timezone settings will be visible.
         *
         * @param array $general_settings
         *
         * @return array
         */
        public function settings_ui(array $general_settings)
        {
        }
        /**
         * Loads the timezone settings from an admin-view file and returns them as an array.
         *
         * @return array
         */
        protected function get_settings_array()
        {
        }
        /**
         * Accommodates timezone update requests.
         *
         * Usually, the result is that an initial batch of events will be updated and any
         * remaining events will be dealt with by an "ajax loop" - however in the event
         * of a JS conflict this could actually be called repeatedly (by the user simply
         * clicking the "Update Timezone Data" button until it is cleared.
         */
        protected function listen()
        {
        }
        /**
         * Facilitates updates of timezone data via an ajax loop.
         *
         * This approach helps to avoid potential timeout issues on sites with poor performance
         * or large numbers of events, besides facilitating visual feedback as to progress.
         */
        public function ajax_updater()
        {
        }
    }
    /**
     * Provides an option to position the main events view on the site homepage.
     */
    class Tribe__Events__Front_Page_View
    {
        /**
         * The ID used to identify the virtual page, using a -10 for no particular reason, but avoding -1 as is regular
         * used as infinite or any other popular reference.
         *
         * @since 4.6.15
         *
         * @var int
         */
        private $home_virtual_ID = -10;
        public function hook()
        {
        }
        /**
         * Inspect and possibly adapt the main query in order to force the main events page to the
         * front of the house.
         *
         * @param WP_Query $query
         */
        public function parse_query(\WP_Query $query)
        {
        }
        /**
         * Parse the query when the customizer sends request to preview specifc page to avoid 404 pages
         * or the wrong page.
         *
         * @since 4.6.15
         *
         * @param WP_Query $query
         */
        public function parse_customizer_query($query)
        {
        }
        /**
         * Where TEC generates a link to the nominal main events page replace it with a link to the
         * front page instead.
         *
         * We'll only do this if pretty permalinks are in use.
         *
         * @param string $url
         *
         * @return string
         */
        public function main_event_page_links($url)
        {
        }
        /**
         * Supplies the nominal main events page URL (ie, the regular /events/ page that is used
         * when front page event view is not enabled).
         *
         * @return string
         */
        protected function get_main_events_url()
        {
        }
        /**
         * Return the $original_value to avoid convert to a positive integer if the $original_value is the same as
         * the ID of the virtual page.
         *
         * @since 4.6.15
         *
         * @param $value
         * @param $option
         * @param $original_value
         *
         * @return mixed
         */
        public function save_page_on_front($value, $option, $original_value)
        {
        }
        /**
         * Add "Main Events Page" option to the Customizer's "Homepage Settings" and the reading settings of the admin
         *
         * @since 4.6.15
         *
         * @param string $output HTML output for drop down list of pages.
         * @param array  $args   The parsed arguments array.
         * @param array  $pages  List of WP_Post objects returned by `get_pages()`
         *
         * @return string
         */
        public function add_events_page_option($output, $args, $pages)
        {
        }
        /**
         * Reset the values for:
         *
         * - page_on_front
         * - page_for_posts
         * - front_page_event_archive
         *
         * if only the value for show_on_front is changed.
         *
         * @since 4.6.15
         *
         * @param $value
         *
         * @return mixed
         */
        public function save_show_on_front($value)
        {
        }
        /**
         * Make sure to set the correct values if we need to update old versions using the previous logic.
         *
         * @since 4.6.15
         * @return boolean
         */
        public function backwards_compatible()
        {
        }
        /**
         * Returns `true` if the 'front_page_event_archive' is `true` and the `page_on_front` is same as the virtual page ID
         *
         * @since 4.6.15
         *
         * @return bool
         */
        public function is_page_on_front()
        {
        }
        /**
         * Returns `true` if the `front_page_event_archive` is `true` otherwise `false`
         *
         * @since 4.6.15
         *
         * @return bool
         */
        public function has_event_archive_option()
        {
        }
        /**
         * Compares the value of the setting `page_on_front` is same as the one used for the virtual page ID.
         *
         * @since 4.6.15
         *
         * @return bool
         */
        public function is_virtual_page_on_front()
        {
        }
        /**
         * Compare a value with the value used on the virtual page ID and converts the var $compare to an integer
         * to make sure the strict comparision is done correctly between two integers.
         *
         * @since 4.6.15
         *
         * @param $compare
         *
         * @return bool
         */
        public function is_virtual_page_id($compare)
        {
        }
        /**
         * Return the ID of the virtual page.
         *
         * @since 4.6.15
         *
         * @return int
         */
        public function get_virtual_id()
        {
        }
    }
    /**
     * Class Tribe__Events__Meta__Context
     *
     * Abstracts a post save operation context.
     *
     * @since 4.2.5
     */
    class Tribe__Events__Meta__Context
    {
        /**
         * @return bool
         */
        public function doing_ajax()
        {
        }
        /**
         * @return bool
         */
        public function is_bulk_editing()
        {
        }
        /**
         * @return bool
         */
        public function is_inline_save()
        {
        }
        /**
         * @return bool
         */
        public function has_nonce()
        {
        }
        /**
         * @return false|int
         */
        public function verify_nonce()
        {
        }
        /**
         * Whether the current user has the specified capability or not.
         *
         * @param string $capability
         *
         * @return bool
         */
        public function current_user_can_edit_events()
        {
        }
    }
    /**
     * Class Tribe__Events__Meta__Save
     *
     * Conditionally saves an event meta to the database.
     *
     * @since 4.2.5
     */
    class Tribe__Events__Meta__Save
    {
        /**
         * @var int
         */
        protected $post_id;
        /**
         * @var WP_Post
         */
        protected $post;
        /**
         * @var Tribe__Events__Meta__Context
         */
        protected $context;
        /**
         * Tribe__Events__Meta__Save constructor.
         *
         * @param                                   $post_id
         * @param WP_Post                           $post
         * @param Tribe__Events__Meta__Context|null $context
         */
        public function __construct($post_id, \WP_Post $post, \Tribe__Events__Meta__Context $context = \null)
        {
        }
        /**
         * ensure only one venue or organizer is created during post preview
         * subsequent previews will reuse that same post
         *
         * ensure that preview post is the one that's used when the event is published,
         * unless we're publishing with a saved venue
         *
         * @param string $post_type Can be 'venue' or 'organizer'
         */
        protected function manage_preview_metapost($post_type, $event_id)
        {
        }
        /**
         * Save the meta for the event if the user has the capability to.
         *
         * @return bool `true` if event meta was updated, `false` otherwise.
         */
        public function save()
        {
        }
        /**
         * Conditionally save the meta.
         *
         * Will save if the context is the expected one; will call `save` method.
         *
         * @return bool `true` if event meta was updated, `false` otherwise.
         */
        public function maybe_save()
        {
        }
        /**
         * @return bool
         */
        protected function is_auxiliary_save()
        {
        }
        /**
         * @return false|int
         */
        protected function is_autosave()
        {
        }
        /**
         * @return bool
         */
        protected function is_auto_draft()
        {
        }
        /**
         * @return bool
         */
        protected function is_event()
        {
        }
        /**
         * Used to save the event meta for events created in the block editor
         *
         * @param int     $event_id The event ID we are modifying meta for.
         * @param array   $data     The post data
         * @param WP_Post $event    The event post, itself.
         *
         * @return bool
         */
        public function save_block_editor_metadata($event_id, $data, $event = \null)
        {
        }
    }
    class Tribe__Events__Utils__Radius
    {
        /**
         * get_radii
         *
         * Get the possible radius value by miles
         * or kilometers based on settings
         *
         * @static
         *
         * @return array|mixed|void
         */
        public static function get_radii()
        {
        }
        public static function get_abbreviation()
        {
        }
    }
    class Tribe__Events__Utils__Id_Generator
    {
        protected static $count = [];
        public static function generate_id($string, $group = 'default')
        {
        }
        public static function reset($group = \null)
        {
        }
    }
    /**
     * The main ORM/Repository class for linked posts.
     *
     * @since 4.9
     */
    /**
     * Class Tribe__Events__Repositories__Linked_Posts
     *
     *
     * @since 4.9
     */
    class Tribe__Events__Repositories__Linked_Posts extends \Tribe__Repository
    {
        /**
         * The unique fragment that will be used to identify this repository filters.
         *
         * @var string
         */
        protected $filter_name = 'linked_posts';
        /**
         * Meta key used to store the Linked Post ID.
         *
         * @var string
         */
        protected $linked_id_meta_key;
        /**
         * Tribe__Events__Repositories__Linked_Posts constructor.
         *
         * Sets up the repository default parameters and schema.
         *
         * @since 4.9
         */
        public function __construct()
        {
        }
        /**
         * Filters linked post types by a specific event of set of events.
         *
         * @since 4.9
         *
         * @param int|WP_Post|array $event Post ID, Post Object, or an array of Post IDs or Objects.
         */
        public function filter_by_event($event)
        {
        }
    }
    /**
     * The main ORM/Repository class for venues.
     *
     * @since 4.9
     */
    /**
     * Class Tribe__Events__Repositories__Venue
     *
     *
     * @since 4.9
     */
    class Tribe__Events__Repositories__Venue extends \Tribe__Events__Repositories__Linked_Posts
    {
        /**
         * The unique fragment that will be used to identify this repository filters.
         *
         * @var string
         */
        protected $filter_name = 'venues';
        /**
         * Tribe__Events__Repositories__Venue constructor.
         *
         * Sets up the repository default parameters and schema.
         *
         * @since 4.9
         */
        public function __construct()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function filter_postarr_for_create(array $postarr)
        {
        }
        /**
         * Filters a venue query by ones that have associated events.
         *
         * @since 5.5.0
         *
         * @return array An array of query arguments that will be added to the main query.
         */
        public function filter_by_has_events()
        {
        }
        /**
         * Filters a venue query by ones that DO NOT have associated events.
         *
         * @since 5.5.0
         *
         * @return array An array of query arguments that will be added to the main query.
         */
        public function filter_by_has_no_events()
        {
        }
    }
    /**
     * Class Tribe__Events__Repositories__Event
     *
     *
     * @since 4.9
     */
    class Tribe__Events__Repositories__Event extends \Tribe__Repository
    {
        /**
         * The unique fragment that will be used to identify this repository filters.
         *
         * @var string
         */
        protected $filter_name = 'events';
        /**
         * The menu_order override used in pre_get_posts to support negative menu_order lookups for Sticky Events.
         *
         * @var int
         */
        protected $menu_order = 0;
        /**
         * The meta key that should be used for the start date.
         *
         * Defaults to `_EventStartDateUTC`.
         *
         * @see \Tribe__Events__Repositories__Event::use_utc()
         *
         * @var string
         */
        protected $start_meta_key = '_EventStartDateUTC';
        /**
         * The meta key that should be used for the end date.
         *
         * Defaults to `_EventEndDateUTC`.
         *
         * @see \Tribe__Events__Repositories__Event::use_utc()
         *
         * @var string
         */
        protected $end_meta_key = '_EventEndDateUTC';
        /**
         * The timezone object that should be used to normalize dates.
         *
         * Defaults to the UTC timezone.
         *
         * @see \Tribe__Events__Repositories__Event::use_utc()
         *
         * @var \DateTimeZone
         */
        protected $normal_timezone;
        /**
         * Whether the use of UTC times for events filtering and ordering is being forced by means of a `use_utc` call
         * or not.
         *
         * @since 4.9.7
         *
         * @var bool
         */
        protected $using_utc;
        /**
         * Tribe__Events__Repositories__Event constructor.
         *
         * Sets up the repository default parameters and schema.
         *
         * @since 4.9
         */
        public function __construct()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function by_args(array $args)
        {
        }
        /**
         * Filters the event by their all-day status.
         *
         * @since 4.9
         *
         * @param bool $all_day Whether the events should be all-day or not.
         *
         * @return array|null An array of query arguments or null if modified with internal methods.
         */
        public function filter_by_all_day($all_day = \true)
        {
        }
        /**
         * Filters events whose start date occurs before the provided date; fetch is not inclusive.
         *
         * @since 4.9
         *
         * @param string|DateTime|int $datetime A `strtotime` parse-able string, a DateTime object or
         *                                      a timestamp.
         * @param string|DateTimeZone $timezone A timezone string, UTC offset or DateTimeZone object;
         *                                      defaults to the site timezone; this parameter is ignored
         *                                      if the `$datetime` parameter is a DatTime object.
         *
         * @return array An array of arguments that should be added to the WP_Query object.
         */
        public function filter_by_starts_before($datetime, $timezone = \null)
        {
        }
        /**
         * Filters events whose end date occurs on or before the provided date; fetch is not inclusive.
         *
         * @since 4.9
         *
         * @param string|DateTime|int $datetime A `strtotime` parse-able string, a DateTime object or
         *                                      a timestamp.
         * @param string|DateTimeZone $timezone A timezone string, UTC offset or DateTimeZone object;
         *                                      defaults to the site timezone; this parameter is ignored
         *                                      if the `$datetime` parameter is a DatTime object.
         *
         * @return array An array of arguments that should be added to the WP_Query object.
         */
        public function filter_by_ends_on_or_before($datetime, $timezone = \null)
        {
        }
        /**
         * Filters events whose end date occurs before the provided date; fetch is inclusive.
         *
         * @since 4.9
         *
         * @param string|DateTime|int $datetime A `strtotime` parse-able string, a DateTime object or
         *                                      a timestamp.
         * @param string|DateTimeZone $timezone A timezone string, UTC offset or DateTimeZone object;
         *                                      defaults to the site timezone; this parameter is ignored
         *                                      if the `$datetime` parameter is a DatTime object.
         *
         * @return array An array of arguments that should be added to the WP_Query object.
         */
        public function filter_by_ends_before($datetime, $timezone = \null)
        {
        }
        /**
         * Filters events whose start date occurs after the provided date; fetch is not inclusive.
         *
         * @since 4.9
         *
         * @param string|DateTime|int $datetime A `strtotime` parse-able string, a DateTime object or
         *                                      a timestamp.
         * @param string|DateTimeZone $timezone A timezone string, UTC offset or DateTimeZone object;
         *                                      defaults to the site timezone; this parameter is ignored
         *                                      if the `$datetime` parameter is a DatTime object.
         *
         * @return array An array of arguments that should be added to the WP_Query object.
         */
        public function filter_by_starts_after($datetime, $timezone = \null)
        {
        }
        /**
         * Filters events whose start date occurs on or after the provided date; fetch is inclusive.
         *
         * @since 4.9
         *
         * @param string|DateTime|int $datetime A `strtotime` parse-able string, a DateTime object or
         *                                      a timestamp.
         * @param string|DateTimeZone $timezone A timezone string, UTC offset or DateTimeZone object;
         *                                      defaults to the site timezone; this parameter is ignored
         *                                      if the `$datetime` parameter is a DatTime object.
         *
         * @return array An array of arguments that should be added to the WP_Query object.
         */
        public function filter_by_starts_on_or_after($datetime, $timezone = \null)
        {
        }
        /**
         * Filters events whose end date occurs after the provided date; fetch is not inclusive.
         *
         * @since 4.9
         *
         * @param string|DateTime|int $datetime A `strtotime` parse-able string, a DateTime object or
         *                                      a timestamp.
         * @param string|DateTimeZone $timezone A timezone string, UTC offset or DateTimeZone object;
         *                                      defaults to the site timezone; this parameter is ignored
         *                                      if the `$datetime` parameter is a DatTime object.
         *
         * @return array An array of arguments that should be added to the WP_Query object.
         */
        public function filter_by_ends_after($datetime, $timezone = \null)
        {
        }
        /**
         * Filters events whose duration overlaps a given Start and End date; fetch is inclusive
         * Will include multi-day events.
         *
         * @since 4.9
         * @since 4.9.11 Add the `$min_sec_overlap` parameter.
         *
         * @param string|DateTime|int $start_datetime  A `strtotime` parse-able string, a DateTime object or
         *                                             a timestamp.
         * @param string|DateTime|int $end_datetime    A `strtotime` parse-able string, a DateTime object or
         *                                             a timestamp.
         * @param string|DateTimeZone $timezone        A timezone string, UTC offset or DateTimeZone object;
         *                                             defaults to the site timezone; this parameter is ignored
         *                                             if the `$datetime` parameter is a DatTime object.
         * @param null|int            $min_sec_overlap The minimum overlap, in seconds, an event should have with the
         *                                             interval; defaults to at least a second.
         */
        public function filter_by_date_overlaps($start_datetime, $end_datetime, $timezone = \null, $min_sec_overlap = 1)
        {
        }
        /**
         * Filters events whose start date occurs between a set of dates; fetch is inclusive.
         *
         * @since 4.9
         *
         * @param string|DateTime|int $start_datetime A `strtotime` parse-able string, a DateTime object or
         *                                            a timestamp.
         * @param string|DateTime|int $end_datetime   A `strtotime` parse-able string, a DateTime object or
         *                                            a timestamp.
         * @param string|DateTimeZone $timezone       A timezone string, UTC offset or DateTimeZone object;
         *                                            defaults to the site timezone; this parameter is ignored
         *                                            if the `$datetime` parameter is a DatTime object.
         */
        public function filter_by_starts_between($start_datetime, $end_datetime, $timezone = \null)
        {
        }
        /**
         * Filters events whose end date occurs between a set of dates; fetch is inclusive.
         *
         * @since 4.9
         *
         * @param string|DateTime|int $start_datetime A `strtotime` parse-able string, a DateTime object or
         *                                            a timestamp.
         * @param string|DateTime|int $end_datetime   A `strtotime` parse-able string, a DateTime object or
         *                                            a timestamp.
         * @param string|DateTimeZone $timezone       A timezone string, UTC offset or DateTimeZone object;
         *                                            defaults to the site timezone; this parameter is ignored
         *                                            if the `$datetime` parameter is a DatTime object.
         */
        public function filter_by_ends_between($start_datetime, $end_datetime, $timezone = \null)
        {
        }
        /**
         * Filters events to include only those that match the provided multi day state.
         *
         * Please note that an event might be multi-day in its timezone but not in another;
         * this filter will make the check on the event times localized to the event timezone.
         * Furthermore the end of day cutoff is taken into account so, given a cutoff of 10PM
         * an event starting at 10:30PM and ending at 11AM is not multi-day.
         *
         * @since 4.9
         *
         * @param bool $multiday Whether to filter by events that are or not multi-day.
         */
        public function filter_by_multiday($multiday = \true)
        {
        }
        /**
         * Filters events to include only those events that appear on the given month’s calendar grid.
         *
         * @since 4.9
         *
         * @param int $month The month to display.
         * @param int $year  The year to display.
         *
         * @return array|null An array of arguments that should be added to the query or `null`
         *                    if the arguments are not valid (thus the filter will be ignored).
         */
        public function filter_by_on_calendar_grid($month, $year)
        {
        }
        /**
         * Filters events to include only those events that are running between two dates.
         *
         * An event is running between two dates when its start date or end date are between
         * the two dates.
         *
         * @since 4.9
         *
         * @param string|DateTime|int $start_datetime A `strtotime` parse-able string, a DateTime object or
         *                                            a timestamp.
         * @param string|DateTime|int $end_datetime   A `strtotime` parse-able string, a DateTime object or
         *                                            a timestamp.
         * @param string|DateTimeZone $timezone       A timezone string, UTC offset or DateTimeZone object;
         *                                            defaults to the site timezone; this parameter is ignored
         *                                            if the `$datetime` parameter is a DatTime object.
         *
         * @return array An array of arguments that should be added to the WP_Query object.
         */
        public function filter_by_runs_between($start_datetime, $end_datetime, $timezone = \null)
        {
        }
        /**
         * Filters events the given timezone.
         *
         * UTC, UTC+0, and UTC-0 should be parsed as the same timezone.
         *
         * @since 4.9
         *
         * @param string|DateTimeZone $timezone A timezone string or object.
         *
         * @return array An array of arguments to apply to the query.
         */
        public function filter_by_timezone($timezone)
        {
        }
        /**
         * Filters events whose start and end dates occur between a set of dates.
         *
         * Fetch is inclusive.
         *
         * @since 4.9
         *
         * @param string|DateTime|int $start_datetime A `strtotime` parse-able string, a DateTime object or
         *                                            a timestamp.
         * @param string|DateTime|int $end_datetime   A `strtotime` parse-able string, a DateTime object or
         *                                            a timestamp.
         * @param string|DateTimeZone $timezone       A timezone string, UTC offset or DateTimeZone object;
         *                                            defaults to the site timezone; this parameter is ignored
         *                                            if the `$datetime` parameter is a DatTime object.
         *
         * @return array An array of arguments that should be added to the WP_Query object.
         */
        public function filter_by_starts_and_ends_between($start_datetime, $end_datetime, $timezone = \null)
        {
        }
        /**
         * Filters events to include only those that match the provided featured state.
         *
         * @since 4.9
         *
         * @param bool $featured Whether the events should be featured or not.
         */
        public function filter_by_featured($featured = \true)
        {
        }
        /**
         * Filters events to include only those that match the provided hidden state.
         *
         * @since 4.9
         *
         * @param bool $hidden Whether the events should be hidden or not.
         */
        public function filter_by_hidden($hidden = \true)
        {
        }
        /**
         * Filters events by specific event organizer(s).
         *
         * @since 4.9
         *
         * @param int|WP_Post|array $organizer Organizer(s).
         */
        public function filter_by_organizer($organizer)
        {
        }
        /**
         * Filters events to include only those that match the provided hidden state.
         *
         * @since 4.9
         *
         * @param string            $linked_post_meta_key The linked post type meta key.
         * @param int|WP_Post|array $linked_post          Linked post(s).
         */
        public function filter_by_linked_post($linked_post_meta_key, $linked_post)
        {
        }
        /**
         * Filters events to include only those that match the provided sticky state.
         *
         * @since 4.9
         *
         * @param bool $sticky Whether the events should be sticky or not.
         */
        public function filter_by_sticky($sticky = \true)
        {
        }
        /**
         * Filters events by specific event venue(s).
         *
         * @since 4.9
         *
         * @param int|WP_Post|array $venue Venue(s).
         */
        public function filter_by_venue($venue)
        {
        }
        /**
         * Hook into WP_Query pre_get_posts and support negative menu_order values.
         *
         * @param WP_Query $query Query object.
         */
        public function support_negative_menu_order($query)
        {
        }
        /**
         * Filters events that have a cost relative to the given value based on the $comparator.
         * If Event Tickets is active, rather than looking at the event cost, all tickets attached
         * to the event should used to reference cost; the event cost meta will be ignored.
         *
         * Providing the symbol parameter should limit event results to only those events whose cost is relative to
         * the value AND the currency symbol matches. This way you can select posts that have a cost of 5 USD and
         * not accidentally get events with 5 EUR.
         *
         * @since 4.9
         *
         * @param float|array $value       The cost to use for the comparison; in the case of `BETWEEN`, `NOT BETWEEN`,
         *                                 `IN` and `NOT IN` operators this value should be an array.
         * @param string      $operator    Teh comparison operator to use for the comparison, one of `<`, `<=`, `>`, `>=`,
         *                                 `=`, `BETWEEN`, `NOT BETWEEN`, `IN`, `NOT IN`.
         * @param string      $symbol      The desired currency symbol or symbols; this symbol can be a currency ISO code,
         *                                 e.g. "USD" for U.S. dollars, or a currency symbol, e.g. "$".
         *                                 In the latter case results will include any event with the matching currency
         *                                 symbol, this might lead to ambiguous results.
         *
         * @return array An array of query arguments that will be added to the main query.
         *
         * @throws Tribe__Repository__Usage_Error If the comparison operator is not supported of is using the `BETWEEN`,
         *                                        `NOT BETWEEN` operators without passing a two element array `$value`.
         */
        public function filter_by_cost($value, $operator = '=', $symbol = \null)
        {
        }
        /**
         * Filters events that have a specific cost currency symbol.
         *
         * Events with a cost of `0` but a currency symbol set will be fetched when fetching
         * by their symbols.
         *
         * @since 4.9
         *
         * @param string|array $symbol One or more currency symbols or currency ISO codes. E.g.
         *                             "$" and "USD".
         *
         * @return array An array of arguments that will be added to the current query.
         */
        public function filter_by_cost_currency_symbol($symbol)
        {
        }
        /**
         * Filters events that have a cost between two given values.
         *
         * Cost search is inclusive.
         *
         * @since 4.9
         *
         * @param      float $low    The lower value of the search interval.
         * @param      float $high   The high value of the search interval.
         * @param string     $symbol The desired currency symbol or symbols; this symbol can be a currency ISO code,
         *                           e.g. "USD" for U.S. dollars, or a currency symbol, e.g. "$".
         *                           In the latter case results will include any event with the matching currency symbol,
         *                           this might lead to ambiguous results.
         *
         * @return array An array of query arguments that will be added to the main query.
         */
        public function filter_by_cost_between($low, $high, $symbol = \null)
        {
        }
        /**
         * Filters events that have a cost greater than the given value.
         *
         * Cost search is NOT inclusive.
         *
         * @since 4.9
         *
         * @param float  $value      The cost to use for the comparison.
         * @param string $symbol     The desired currency symbol or symbols; this symbol can be a currency ISO code,
         *                           e.g. "USD" for U.S. dollars, or a currency symbol, e.g. "$".
         *                           In the latter case results will include any event with the matching currency symbol,
         *                           this might lead to ambiguous results.
         *
         * @return array An array of query arguments that will be added to the main query.
         */
        public function filter_by_cost_greater_than($value, $symbol = \null)
        {
        }
        /**
         * Filters events that have a cost less than the given value.
         *
         * Cost search is NOT inclusive.
         *
         * @since 4.9
         *
         * @param float  $value      The cost to use for the comparison.
         * @param string $symbol     The desired currency symbol or symbols; this symbol can be a currency ISO code,
         *                           e.g. "USD" for U.S. dollars, or a currency symbol, e.g. "$".
         *                           In the latter case results will include any event with the matching currency symbol,
         *                           this might lead to ambiguous results.
         *
         * @return array An array of query arguments that will be added to the main query.
         */
        public function filter_by_cost_less_than($value, $symbol = \null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function filter_postarr_for_update(array $postarr, $post_id)
        {
        }
        /**
         * Filters and updates the event meta to make sure it makes sense.
         *
         * @since 4.9
         *
         * @param array $postarr The update post array, passed entirely for context purposes.
         * @param  int  $post_id The ID of the event that's being updated.
         *
         * @return array The filtered postarr array.
         */
        protected function filter_meta_input(array $postarr, $post_id = \null)
        {
        }
        /**
         *
         *
         * @since 4.9
         *
         * @param array $postarr
         * @param       $post_id
         *
         * @return array
         */
        protected function update_date_meta(array $postarr, $post_id = \null)
        {
        }
        /**
         * Filters the post array to make sure linked posts meta makes sense.
         *
         * @since 4.9
         *
         * @param array $postarr The update post array.
         *
         * @return array The filtered event post array.
         */
        protected function update_linked_post_meta(array $postarr)
        {
        }
        /**
         * Updates an event accessory meta and attributes.
         *
         * @since 4.9
         *
         * @param array $postarr The candidate post array for the update or insertion.
         * @param int   $post_id The ID of the event that is being updated.
         *
         * @return array The updated post array for update or insertion.
         */
        protected function update_accessory_meta(array $postarr, $post_id)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function filter_postarr_for_create(array $postarr)
        {
        }
        /**
         * Returns a filtered list of filters that are leveraging the event start and/or
         * end dates.
         *
         * @since 4.9
         *
         * @return array The filtered list of filters that are leveraging the event start and/or end dates
         */
        public function get_date_filters()
        {
        }
        /**
         * Whether the repository read operations have any kind of date-related filter
         * applied or not.
         *
         * @since 4.9
         *
         * @return bool Whether the repository read operations have any kind of date-related filter applied or not.
         */
        public function has_date_filters()
        {
        }
        /**
         * Filters events to include only those that start on a specific date.
         *
         * This method is a wrapper for the `filter_by_starts_between` one.
         *
         * @since 4.9
         *
         * @param      int|string|\DateTime $date     A date and time timestamp, string or object.
         * @param null                      $timezone The timezone that should be used to filter events, if not passed
         *                                            the site one will be used. This parameter will be ignored if the
         *                                            `$date` parameter is an object.
         *
         * @throws Exception If the date and/or timezone provided for the filtering are not valid.
         */
        public function filter_by_on_date($date, $timezone = \null)
        {
        }
        /**
         * Instructs the repository to use UTC dates and times for reading operations or not.
         *
         * By default the repository will use the events `_EventStartDateUTC` and `_EventEndDateUTC` meta keys
         * depending on the site Time Zone Settings.
         * This method allows overriding this behavior on a per-instance basis.
         *
         * @since 4.9
         *
         * @param bool $use_utc Whether ot use the UTC dates and times to read events or not. If `true` then the
         *                      `_EventStartDateUTC` and `_EventEndDateUTC` meta keys will be used, if `false` then the
         *                      `_EventStartDate` and `_EventEndDate` meta keys will be used.
         *
         * @return static This repository instance.
         */
        public function use_utc($use_utc)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function format_item($id)
        {
        }
        /**
         * Handles the `order_by` clauses for events
         *
         * @since 4.9.7
         *
         * @param string $order_by The key used to order events; e.g. `event_date` to order events by start date.
         */
        public function handle_order_by($order_by)
        {
        }
        /**
         * Overrides the base method to correctly handle the `order_by` clauses before.
         *
         * The Event repository handles ordering with some non trivial logic and some query filtering.
         * To avoid the "stacking" of `orderby` clauses and filters the query filters are added at the very last moment,
         * right before building the query.
         *
         * @since 4.9.7
         *
         * @return WP_Query The built query object.
         */
        protected function build_query_internally()
        {
        }
        /**
         * Applies start-date-based ordering to the query.
         *
         * @since 4.9.7
         * @since 4.9.11 Added the `$after` parameter.
         *
         * @param bool   $use_utc    Whether to use the events UTC start dates or their localized dates.
         * @param string $order      The order direction, either `ASC` or `DESC`; defaults to `null` to use the order
         *                           specified in the current query or default arguments.
         * @param bool   $after      Whether to append the order by clause to the ones managed by WordPress or not.
         *                           Defaults to `false`,to prepend them to the ones managed by WordPress.
         * @param bool   $override   Whether to override existing ORDER BY clauses or not; default to `true` to override
         *                           existing ORDER BY clauses.
         */
        protected function order_by_date($use_utc, $order = \null, $after = \false, $override = \true)
        {
        }
        /**
         * Applies Organizer-based ordering to the query.
         *
         * @since 4.9.7
         * @since 4.9.11 Added the `$after` parameter.
         *
         * @param string $order      The order direction, either `ASC` or `DESC`; defaults to `null` to use the order
         *                           specified in the current query or default arguments.
         * @param bool   $after      Whether to append the order by clause to the ones managed by WordPress or not.
         *                           Defaults to `false`,to prepend them to the ones managed by WordPress.
         * @param bool   $override   Whether to override existing ORDER BY clauses with this one or not; default to
         *                           `true` to override existing ORDER BY clauses.
         */
        protected function order_by_organizer($order = \null, $after = \false, $override = \true)
        {
        }
        /**
         * Applies Venue-based ordering to the query.
         *
         * @since 4.9.7
         * @since 4.9.11 Added the `$after` parameter.
         *
         * @param string $order      The order direction, either `ASC` or `DESC`; defaults to `null` to use the order
         *                           specified in the current query or default arguments.
         * @param bool   $after      Whether to append the order by clause to the ones managed by WordPress or not.
         *                           Defaults to `false`,to prepend them to the ones managed by WordPress.
         * @param bool   $override   Whether to override existing ORDER BY clauses with this one or not; default to
         *                           `true` to override existing ORDER BY clauses.
         */
        protected function order_by_venue($order = \null, $after = \false, $override = \true)
        {
        }
        /**
         * Overrides the base method to default the `order` to `ASC` for events.
         *
         * @since 4.9.7
         *
         * @param string      $order_by The key to order events by.
         * @param string|null $order    The order direction, either `ASC` or `DESC`; defaults to `ASC`.
         *
         * @return Tribe__Repository|Tribe__Repository__Read_Interface This repository instance.
         */
        public function order_by($order_by, $order = 'ASC')
        {
        }
        /**
         * Filters events by their "Hidden from Event Listings" status.
         *
         * This method assumes that we keep the following structure:
         * - if an event should be hidden its `_EventHideFromUpcoming` meta will be set to `yes` (or another truthy value).
         * - if an event should not be hidden its `_EventHideFromUpcoming` meta will not be set at all.
         *
         * @since 4.9.11
         *
         * @param bool $hidden Whether the events should be hidden from event listings or not.
         */
        public function filter_by_hidden_on_upcoming($hidden)
        {
        }
        /**
         * Sets up the query filters to order events by the duration (`_EventDuration`) custom field.
         *
         * @since 5.1.5
         *
         * @param string $order      The order direction, either `ASC` or `DESC`; defaults to `null` to use the order
         *                           specified in the current query or default arguments.
         * @param bool   $after      Whether to append the duration ORDER BY clause to the existing clauses or not;
         *                           defaults to `false` to prepend the duration clause to the existing ORDER BY
         *                           clauses.
         * @param bool   $override   Whether to override existing ORDER BY clauses with this one or not; default to
         *                           `true` to override existing ORDER BY clauses.
         */
        protected function order_by_duration($order = \null, $after = \false, $override = \true)
        {
        }
    }
    /**
     * The main ORM/Repository class for organizers.
     *
     * @since 4.9
     */
    /**
     * Class Tribe__Events__Repositories__Organizer
     *
     *
     * @since 4.9
     */
    class Tribe__Events__Repositories__Organizer extends \Tribe__Events__Repositories__Linked_Posts
    {
        /**
         * The unique fragment that will be used to identify this repository filters.
         *
         * @var string
         */
        protected $filter_name = 'organizers';
        /**
         * Tribe__Events__Repositories__Organizer constructor.
         *
         * Sets up the repository default parameters and schema.
         *
         * @since 4.9
         */
        public function __construct()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function filter_postarr_for_create(array $postarr)
        {
        }
        /**
         * Filters a organizer query by ones that have associated events.
         *
         * @since 5.5.0
         *
         * @return array An array of query arguments that will be added to the main query.
         */
        public function filter_by_has_events()
        {
        }
        /**
         * Filters a organizer query by ones that DO NOT have associated events.
         *
         * @since 5.5.0
         *
         * @return array An array of query arguments that will be added to the main query.
         */
        public function filter_by_has_no_events()
        {
        }
    }
    class Tribe__Events__Deactivation extends \Tribe__Abstract_Deactivation
    {
        /**
         * Set a flag to indicate that the plugin has been deactivated
         * and needs to be reinitialized if it is reactivated
         */
        private function set_flags()
        {
        }
        /**
         * Remove event-related capabilities
         */
        private function clear_capabilities()
        {
        }
        /**
         * The deactivation routine for a single blog
         */
        protected function blog_deactivate()
        {
        }
        /**
         * An abridged version that is less DB intensive.
         *
         * @see wp_is_large_network() and the 'wp_is_large_network' filter
         */
        protected function short_blog_deactivate()
        {
        }
    }
}
namespace Tribe\Events\Models\Post_Types {
    /**
     * Class Venue.
     *
     * @since   4.9.9
     *
     * @package Tribe\Events\Post_Types
     */
    class Venue extends \Tribe\Models\Post_Types\Base
    {
        /**
         * {@inheritDoc}
         */
        protected function build_properties($filter)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function get_cache_slug()
        {
        }
    }
    /**
     * Class Event
     *
     * @since   4.9.9
     *
     * @package Tribe\Events\Post_Types
     */
    class Event extends \Tribe\Models\Post_Types\Base
    {
        /**
         * {@inheritDoc}
         */
        protected function build_properties($filter)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function get_cache_slug()
        {
        }
    }
    /**
     * Class Organizer
     *
     * @since   5.3.0
     *
     * @package Tribe\Events\Models\Post_Types
     */
    class Organizer extends \Tribe\Models\Post_Types\Base
    {
        /**
         * {@inheritDoc}
         *
         * @since 5.3.0
         */
        protected function get_cache_slug()
        {
        }
        /**
         * {@inheritDoc}
         *
         * @since 5.3.0
         */
        protected function build_properties($filter)
        {
        }
    }
}
namespace {
    /**
     * Object used to handle the linking/unlinking of post types for events
     */
    class Tribe__Events__Linked_Posts
    {
        /**
         * @var string Meta key prefix for linked posts
         */
        const META_KEY_PREFIX = '_tribe_linked_post_';
        /**
         * @var Tribe__Events__Linked_Posts Singleton instance of the class
         */
        public static $instance;
        /**
         * @var Tribe__Events__Main Singleton
         */
        public $main;
        /**
         * @var array Collection of post types that can be linked with events
         */
        public $linked_post_types;
        /**
         * @var Tribe__Cache
         */
        protected $cache;
        /**
         * Returns a singleton of this class
         *
         * @return Tribe__Events__Linked_Posts
         */
        public static function instance()
        {
        }
        /**
         * Constructor!
         *
         * @param Tribe__Cache|null $cache
         */
        public function __construct(\Tribe__Cache $cache = \null)
        {
        }
        public function enqueue_scripts()
        {
        }
        /**
         * Generates post_type => container key value pairs of linked post types for use on the front end
         */
        public function get_post_type_container_data()
        {
        }
        /**
         * Registers the default linked post types for events
         *
         * @since 4.2
         */
        public function register_default_linked_post_types()
        {
        }
        /**
         * Registers a post type as a linked post type for events
         *
         * Notable arguments that can be passed/filtered while registering linked post types:
         * - labels['name']
         * - labels['singular_name']
         * - allow_multiple (default: true) specifies how many of the post type can be linked with an event
         * - allow_creation (default: false) specifies whether or not post creation should be allowed
         *
         * @since 4.2
         *
         * @param string $post_type Post type slug
         * @param array $args Arguments for the linked post type - note: gets merged with get_post_type_object data
         *
         * @return boolean
         */
        public function register_linked_post_type($post_type, $args = [])
        {
        }
        /**
         * Returns the meta key for the given post type
         *
         * @since 4.2
         *
         * @param string $post_type Post Type
         *
         * @return string
         */
        public function get_meta_key($post_type)
        {
        }
        /**
         * Returns the meta key for linked post order
         *
         * @deprecated 4.6.23
         * @todo Remove on 4.7
         *
         * @since 4.6.13
         *
         * @param string $post_type Post Type
         *
         * @return bool|string
         */
        public function get_order_meta_key($post_type)
        {
        }
        /**
         * Returns the post type's form field container name
         *
         * @since 4.2
         *
         * @param string $linked_post_type Linked post type
         *
         * @return string
         */
        public function get_post_type_container($linked_post_type)
        {
        }
        /**
         * Returns the post type's ID field name
         *
         * @since 4.2
         *
         * @param string $linked_post_type Linked post type
         *
         * @return string
         */
        public function get_post_type_id_field_index($linked_post_type)
        {
        }
        /**
         * Returns the post type's name field
         *
         * @since 4.2
         *
         * @param string $linked_post_type Linked post type
         *
         * @return string
         */
        public function get_post_type_name_field_index($linked_post_type)
        {
        }
        /**
         * Deregisters a post type as a linked post type for events
         *
         * @since 4.2
         *
         * @param string $post_type Post type slug
         *
         * @return boolean
         */
        public function deregister_linked_post_type($post_type)
        {
        }
        /**
         * Returns whether or not there are any linked posts for the given post id
         *
         * @since 4.2
         *
         * @param int $post_id Post ID of the object
         *
         * @return boolean
         */
        public function has_linked_posts($post_id)
        {
        }
        /**
         * Returns all linked posts for the given post id
         *
         * Post collection is indexed by post type
         *
         * @since 4.2
         *
         * @param int $post_id Post ID of the object
         *
         * @return array
         */
        public function get_linked_posts($post_id)
        {
        }
        /**
         * Returns whether or not there are linked posts of the specified post type
         *
         * @since 4.2
         *
         * @param int $post_id Post ID of the object
         * @param string $post_type Post type of linked posts to look for
         *
         * @return boolean
         */
        public function has_linked_posts_by_post_type($post_id, $post_type)
        {
        }
        /**
         * Returns an array of linked post ID(s) of the specified post type.
         *
         * @since 4.6.22
         *
         * @param int    $post_id   Post ID of the object.
         * @param string $post_type Post type of linked posts to look for.
         *
         * @return array
         */
        public function get_linked_post_ids_by_post_type($post_id, $post_type)
        {
        }
        /**
         * Returns an array of linked WP_Post objects of the specified post type.
         *
         * @since 4.2
         *
         * @see Tribe__Events__Linked_Posts::get_linked_post_ids_by_post_type
         *
         * @param int    $post_id   Post ID of the object.
         * @param string $post_type Post type of linked posts to look for.
         *
         * @return array
         */
        public function get_linked_posts_by_post_type($post_id, $post_type)
        {
        }
        /**
         * Returns whether or not there are any linked post types
         *
         * @since 4.2
         *
         * @return boolean
         */
        public function has_linked_post_types()
        {
        }
        /**
         * Returns the linked post types
         *
         * @since 4.2
         *
         * @return array
         */
        public function get_linked_post_types()
        {
        }
        /**
         * Get Linked Post info
         *
         * @param string    $linked_post_type   Post type of linked post.
         * @param array     $args               Extra WP Query args.
         * @param array|int $linked_post_ids    Post ID(s).
         *
         * @return array
         */
        public function get_linked_post_info($linked_post_type, $args = [], $linked_post_ids = \null)
        {
        }
        /**
         * Returns whether or not the provided post type is a linked post type
         *
         * @since 4.2
         *
         * @param string $post_type Post type slug
         *
         * @return boolean
         */
        public function is_linked_post_type($post_type)
        {
        }
        /**
         * Returns whether or not the provided linked post type allows multiple posts of that type
         *
         * @since 4.2
         *
         * @param string $post_type Post type
         *
         * @return boolean
         */
        public function allow_multiple($post_type)
        {
        }
        /**
         * Links two posts together
         *
         * @since 4.2
         *
         * @param int $target_post_id Post ID of post to add linked post to
         * @param int $subject_post_id Post ID of post to add as a linked post to the target
         *
         * @return int|false The result of `add_metadata()` - the meta ID on success, false on failure.
         */
        public function link_post($target_post_id, $subject_post_id)
        {
        }
        /**
         * Save Order of Linked Posts
         *
         * @deprecated 4.6.23
         * @todo Remove on 4.7
         *
         * @since 4.6.13
         *
         * @param int $target_post_id post id to save meta from
         * @param string $post_type the post-type to get the key for
         * @param array $current_order an array of the linked post ids being saved
         */
        public function order_linked_posts($target_post_id, $post_type, $current_order)
        {
        }
        /**
         * Unlinks two posts from each other.
         *
         * @since 4.2
         *
         * @param int $target_post_id Post ID of post to remove linked post from
         * @param int $subject_post_id Post ID of post to remove as a linked post from the target
         */
        public function unlink_post($target_post_id, $subject_post_id)
        {
        }
        /**
         * Detects linked post type data within a form submission and executes the post type-specific handlers
         *
         * @since 4.2
         *
         * @param int $event_id Submitted Event ID
         * @param array $submission Submitted form data
         */
        public function handle_submission($event_id, $submission)
        {
        }
        /**
         * Handles the submission of linked post data
         *
         * @since 4.2
         *
         * @param int   $event_id   Submitted Event ID.
         * @param int   $post_type  Post type of linked post.
         * @param array $submission Submitted form data.
         */
        public function handle_submission_by_post_type($event_id, $linked_post_type, $submission)
        {
        }
        /**
         * Renders the option passed in the param.
         *
         * @since 5.1.0
         *
         * @param array $option Array with the option values to render the HTML for Select Option.
         *
         * @return bool
         */
        private function render_select_option($option = [])
        {
        }
        /**
         * Helper function for displaying dropdowns for linked post types
         *
         * @param string $post_type Post type to display dropdown for.
         * @param mixed  $current   The current saved linked post item.
         */
        public function saved_linked_post_dropdown($post_type, $current = \null)
        {
        }
        public function render_meta_box_sections($event)
        {
        }
        /**
         * A several-step process that prints the "Create or Find {Linked Post Type Name}" labels.
         *
         * Numerous steps and caveats are covered in this method so that we can make these labels, which
         * are rather important, as translation-friendly as possible.
         *
         * @since 4.6.3
         *
         * @param object $post_type The linked post type whose label is being rendered.
         * @param boolean $creation_enabled Whether the current user can create post types. If false, they can only add existing ones.
         *
         * @return string
         */
        public function get_create_or_find_labels($post_type, $creation_enabled)
        {
        }
        /**
         * Get the data from a submission that is specific to a single linked post type.
         *
         * @param $submission
         * @param $linked_post_type
         *
         * @return bool|array False if linked post type is not part of thissubmission but linked posts exist prior to this
         *                    submission. Else an array of the data specific to this linked post type, which may be empty.
         */
        private function get_linked_post_type_data($submission, $linked_post_type)
        {
        }
    }
    /**
     * Initialize Gutenberg editor blocks and styles
     *
     * @since 4.7
     */
    class Tribe__Events__Editor extends \Tribe__Editor
    {
        /**
         * Hooks actions from the editor into the correct places
         *
         * @since 4.7
         *
         * @return bool
         */
        public function hook()
        {
        }
        /**
         * For now we dont use Blocks editor on the Post Type for Organizers
         *
         * @todo  see https://core.trac.wordpress.org/ticket/45275
         *
         * @since  4.7
         *
         * @param  boolean $is_enabled
         * @param  string  $post_type
         *
         * @return boolean
         */
        public function deactivate_blocks_editor_organizer($is_enabled, $post_type)
        {
        }
        /**
         * For now we dont use Blocks editor on the Post Type for Venues
         *
         * @todo  see https://core.trac.wordpress.org/ticket/45275
         *
         * @since  4.7
         *
         * @param  boolean $is_enabled
         * @param  string  $post_type
         *
         * @return boolean
         */
        public function deactivate_blocks_editor_venue($is_enabled, $post_type)
        {
        }
        /**
         * When Gutenberg is active do not care about custom-fields as a metabox, but as part o the Rest API
         *
         * Code is located at: https://github.com/moderntribe/the-events-calendar/blob/f8af49bc41048e8632372fc8da77202d9cb98d86/src/Tribe/Admin/Event_Meta_Box.php#L345
         *
         * @todo  Block that option once the user has Gutenberg active
         *
         * @since 4.7
         *
         * @return void
         */
        public function add_event_custom_field_support()
        {
        }
        /**
         * When initially loading a post in gutenberg flags if came from classic editor
         *
         * @since 4.7
         *
         * @return bool
         */
        public function flag_post_from_classic_editor()
        {
        }
        /**
         * Making sure we have correct post content for blocks after going into Gutenberg
         *
         * @since 4.7
         *
         * @param  int $post Which post we will migrate
         *
         * @return bool
         */
        public function update_post_content_to_blocks($post)
        {
        }
        /**
         * Gets the classic template, used for migration and setup new events with classic look
         *
         * @since 4.7
         *
         * @return array
         */
        public function get_classic_template()
        {
        }
        /**
         * Adds the required blocks into the Events Post Type
         *
         * @since 4.7
         *
         * @param  array $args Arguments used to setup the CPT template
         *
         * @return array
         */
        public function add_event_template_blocks($args = [])
        {
        }
        /**
         * Prevents us from using `init` to register our own blocks, allows us to move
         * it when the proper place shows up
         *
         * @since 4.7
         *
         * @return void
         */
        public function register_blocks()
        {
        }
        /**
         * Check if current admin page is post type `tribe_events`
         *
         * @since 4.7
         *
         * @return bool
         */
        public function is_events_post_type()
        {
        }
        /**
         * @todo   Move this into the Block PHP files
         *
         * @since 4.7
         *
         * @return void
         */
        public function assets()
        {
        }
        /**
         * Remove scripts that are not relevant for the Gutenberg editor or conflict with the scripts
         * used on gutenberg
         *
         * @since 4.7
         */
        public function deregister_scripts()
        {
        }
        /**
         * Add "Event Blocks" category to the editor
         *
         * @since 4.7
         *
         * @return array
         */
        public function block_categories($categories, $post)
        {
        }
        /************************
         *                      *
         *  Deprecated Methods  *
         *                      *
         ************************/
        /**
         * Adds the required blocks into the Events Post Type
         *
         * @since 4.7
         * @deprecated 0.1.3-alpha
         *
         * @param  array $args Arguments used to setup the CPT template
         *
         * @return array
         */
        public function add_template_blocks($args = [])
        {
        }
        /**
         * When the plugin loads the option is not set so the value is an empty string and when casting into a bool value
         * this returns a `false` positive. As empty string indicates the value has not set already.
         *
         * This is something should be addressed on TEC as is affecting any new user installing the plugin.
         *
         * Code is located at: https://github.com/moderntribe/the-events-calendar/blob/f8af49bc41048e8632372fc8da77202d9cb98d86/src/Tribe/Admin/Event_Meta_Box.php#L345
         *
         * @since 4.7
         * @deprecated 0.3.2-alpha
         *
         * @param $value
         * @param $name
         *
         * @return bool
         */
        public function get_option($value, $name)
        {
        }
    }
    class Tribe__Events__Options_Exception extends \Exception
    {
        /**
         * Display the exception message in the div #tribe-events-options-error
         */
        public static function displayMessage()
        {
        }
    }
    /**
     * Facilitates embedding one or more maps utilizing the Google Maps API.
     */
    class Tribe__Events__Embedded_Maps
    {
        /**
         * Script handle for the embedded maps script.
         */
        const MAP_HANDLE = 'tribe_events_embedded_map';
        /**
         * @var Tribe__Events__Embedded_Maps
         */
        protected static $instance;
        /**
         * Post ID of the current event.
         *
         * @var int
         */
        protected $event_id = 0;
        /**
         * Post ID of the current venue (if known/if can be determined).
         *
         * @var int
         */
        protected $venue_id = 0;
        /**
         * Address of the current event/venue.
         *
         * @var string
         */
        protected $address = '';
        /**
         * Container for map address data (potentially allowing for multiple maps
         * per page).
         *
         * @var array
         */
        protected $embedded_maps = [];
        /**
         * Indicates if the Google Maps API script has been enqueued.
         *
         * @var bool
         */
        protected $map_script_enqueued = \false;
        /**
         * @return Tribe__Events__Embedded_Maps
         */
        public static function instance()
        {
        }
        /**
         * Returns the placeholder HTML needed to embed a map within a page and
         * additionally enqueues supporting scripts, etc.
         *
         * @param int  $post_id ID of the pertinent event or venue
         * @param int  $width
         * @param int  $height
         * @param bool $force_load add the map even if no address data can be found
         *
         * @return string
         */
        public function get_map($post_id, $width, $height, $force_load)
        {
        }
        protected function get_ids($post_id)
        {
        }
        protected function form_address()
        {
        }
        public function get_map_data($map_index)
        {
        }
        public function update_map_data($map_index, array $data)
        {
        }
        protected function setup_scripts()
        {
        }
        protected function enqueue_map_scripts()
        {
        }
    }
    class Tribe__Events__Capabilities
    {
        /**
         * The transient key for delayed capabilities updates.
         *
         * @since 5.1.1
         *
         * @var string
         */
        public static $key_needs_init = '_tribe_events_needs_capability_init';
        /**
         * An array of roles to update capabilities.
         *
         * @since 5.1.1
         *
         * @var array
         */
        protected $roles = ['administrator', 'editor', 'author', 'contributor', 'subscriber'];
        /**
         * An array of capabilities aliases by role.
         *
         * @since 5.1.1
         *
         * @var array
         */
        private $cap_aliases = [
            // Full permissions to a post type.
            'editor' => ['read', 'read_private_posts', 'edit_posts', 'edit_others_posts', 'edit_private_posts', 'edit_published_posts', 'delete_posts', 'delete_others_posts', 'delete_private_posts', 'delete_published_posts', 'publish_posts'],
            // Full permissions for content the user created.
            'author' => ['read', 'edit_posts', 'edit_published_posts', 'delete_posts', 'delete_published_posts', 'publish_posts'],
            // Create, but not publish.
            'contributor' => ['read', 'edit_posts', 'delete_posts'],
            // Read only.
            'subscriber' => ['read'],
        ];
        /**
         * @deprecated 5.1.1
         *
         * @var bool
         */
        public $set_initial_caps = \false;
        /**
         * Hook up the correct methods to the places required to setup the capabilities.
         *
         * @since 5.1.1
         */
        public function hook()
        {
        }
        /**
         * Set the transient for flagging the transients needs a initialization.
         *
         * @since 5.1.1
         *
         * @return bool Status of set_transient.
         */
        public function set_needs_init()
        {
        }
        /**
         * Deletes the transient for flagging the transients needs a initialization.
         *
         * @since 5.1.1
         *
         * @return bool Status of delete_transient.
         */
        public function delete_needs_init()
        {
        }
        /**
         * Determines if capabilities need initialization on this request.
         *
         * @since 5.1.1
         *
         * @return bool Caps need initialisation.
         */
        public function needs_init()
        {
        }
        /**
         * Get the Roles to Modify Capabilities.
         *
         * @since 5.1.1
         *
         * @return array An array of roles to modify capabilities.
         */
        public function get_roles()
        {
        }
        /**
         * Grant caps for the given post type to the given role
         *
         * @param string $post_type The post type to grant caps for
         * @param string $role_id The role receiving the caps
         * @param string $level The capability level to grant (see the list of caps above)
         *
         * @return bool false if the action failed for some reason, otherwise true
         */
        public function register_post_type_caps($post_type, $role_id, $level = '')
        {
        }
        /**
         * Remove all caps for the given post type from the given role
         *
         * @param string $post_type The post type to remove caps for
         * @param string $role_id The role which is losing caps
         *
         * @return bool false if the action failed for some reason, otherwise true
         */
        public function remove_post_type_caps($post_type, $role_id)
        {
        }
        /**
         * Set the initial capabilities for events and related post types on default roles
         *
         * @since 5.1.1 - use get_roles() method, add check for transient.
         *
         * @param boolean $force Force the registering of new caps without checking any flags.
         *
         * @return void
         */
        public function set_initial_caps($force = \false)
        {
        }
        /**
         * Remove capabilities for events and related post types from default roles
         *
         * @since 5.1.1 - use get_roles() method.
         *
         * @return void
         */
        public function remove_all_caps()
        {
        }
    }
    /**
     * Class Event_Cleaner_Scheduler
     *
     * Uses cron to move old events to trash and/or permanently delete them.
     *
     * @since 4.6.13
     */
    class Tribe__Events__Event_Cleaner_Scheduler
    {
        /**
         * The name of the cron event to permanently delete past events.
         * @static $del_cron_hook
         */
        public static $del_cron_hook = 'tribe_del_event_cron';
        /**
         * The name of the cron event to move past events to trash.
         * @static $trash_cron_hook
         */
        public static $trash_cron_hook = 'tribe_trash_event_cron';
        /**
         * The new value for the $key_trash_events option.
         *
         * @var $trash_new_date
         *
         * @since 4.6.13
         */
        public $trash_new_date;
        /**
         * The new value for the $key_delete_events option.
         *
         * @var $del_new_date
         *
         * @since 4.6.13
         */
        public $del_new_date;
        /**
         * Receives the existing values for $key_trash_events and $key_delete_events options
         * and defines them as trash_new_date and del_new_date variables.
         *
         * @param mixed $move_to_trash
         * @param mixed $permanently_delete
         *
         * @since 4.6.13
         */
        public function __construct($move_to_trash = \null, $permanently_delete = \null)
        {
        }
        /**
         * Receives the new user-defined value for $key_trash_events option
         * and defines it as the trash_new_date variable.
         *
         * @param mixed $trash_new_value - the value for the $key_trash_events option
         *
         * @since 4.6.13
         */
        public function set_trash_new_date($trash_new_value)
        {
        }
        /**
         * Receives the new user-defined value for $key_delete_events option
         * and defines it as the del_new_date variable.
         *
         * @param mixed $del_new_value - the value for the $key_delete_events option
         *
         * @since 4.6.13
         */
        public function set_delete_new_date($del_new_value)
        {
        }
        /**
         * Schedules the hooks to delete and move old events to trash
         * These hooks will be executed daily.
         *
         * @since 4.6.13
         */
        public function add_hooks()
        {
        }
        /**
         * Removes the hooks
         *
         * @since 4.6.13
         */
        public function remove_hooks()
        {
        }
        /**
         * Un-schedules all previously-scheduled cron jobs for tribe_trash_event_cron
         *
         * @since 4.6.13
         */
        public function trash_clear_scheduled_task()
        {
        }
        /**
         * Un-schedules all previously-scheduled cron jobs for tribe_del_event_cron
         *
         * @since 4.6.13
         */
        public function delete_clear_scheduled_task()
        {
        }
        /**
         * Selects events to be moved to trash or permanently deleted.
         *
         * @since 4.6.13
         *
         * @param int $month - The value chosen by user to purge all events older than x months
         *
         * @return array $post_ids - an array of event Post_IDs with the Event End Date older than $month
         */
        public function select_events_to_purge($month)
        {
        }
        /**
         * Moves to trash events that ended before a date specified by user
         *
         * @since 4.6.13
         *
         * @return mixed
         */
        public function move_old_events_to_trash()
        {
        }
        /**
         * Permanently deletes events that ended before a date specified by user
         *
         * @since 4.6.13
         *
         * @return mixed - The post object (if it was deleted successfully) or false (failure)
         */
        public function permanently_delete_old_events()
        {
        }
    }
    /**
     * Helpers for handling timezone based event datetimes.
     *
     * In our timezone logic, the term "local" refers to the locality of an event
     * rather than the local WordPress timezone.
     */
    class Tribe__Events__Timezones extends \Tribe__Timezones
    {
        public static function init()
        {
        }
        /**
         * Takes care of appending timezone information to the display of
         * event date/times.
         */
        protected static function display_timezones()
        {
        }
        /**
         * Adds the timezone to the event schedule information.
         *
         * @param string   $schedule_text
         * @param int|null $event_id
         *
         * @return string
         */
        public static function append_timezone($schedule_text, $event_id = \null)
        {
        }
        /**
         * Returns the timezone string for the specified event (if null it assumes the
         * current event where that can be determined).
         *
         * If no timezone has explicitly been set for the event, it returns the global
         * WordPress timezone string.
         *
         * @param int|null $event_id
         *
         * @return string
         */
        public static function get_event_timezone_string($event_id = \null)
        {
        }
        /**
         * Returns the event's timezone abbreviation if it can be determined, or else
         * falls back on the full timezone string/offset text (again, if known - if it
         * is not it will assume the global WP timezone setting).
         *
         * @param int|null $event_id
         *
         * @return string
         */
        public static function get_event_timezone_abbr($event_id = \null)
        {
        }
        /**
         * Returns a timestamp for the event start date that can be passed to tribe_format_date()
         * in order to produce the time in the correct timezone.
         *
         * @param int    $event_id
         * @param string $timezone
         *
         * @return int
         */
        public static function event_start_timestamp($event_id, $timezone = \null)
        {
        }
        /**
         * Returns a timestamp for the event end date that can be passed to tribe_format_date()
         * in order to produce the time in the correct timezone.
         *
         * @param int    $event_id
         * @param string $timezone
         *
         * @return int
         */
        public static function event_end_timestamp($event_id, $timezone = \null)
        {
        }
        /**
         * Returns a timestamp for the event date that can be passed to tribe_format_date()
         * in order to produce the time in the correct timezone.
         *
         * @param int    $event_id
         * @param string $type (expected to be 'Start' or 'End')
         * @param string $timezone
         *
         * @return int
         */
        protected static function get_event_timestamp($event_id, $type = 'Start', $timezone = \null)
        {
        }
        /**
         * Returns a string representing the timezone/offset currently desired for
         * the display of dates and times.
         *
         * @return string
         */
        public static function mode()
        {
        }
        /**
         * Confirms if the current timezone mode matches the $possible_mode.
         *
         * @param string $possible_mode
         *
         * @return bool
         */
        public static function is_mode($possible_mode)
        {
        }
    }
    /**
     * Class Tribe__Events__Privacy
     */
    class Tribe__Events__Privacy
    {
        /**
         * Class initialization
         *
         * @since 4.6.20
         */
        public function hook()
        {
        }
        /**
         * Add the suggested privacy policy text to the policy postbox.
         *
         * @since 4.6.20
         */
        public function privacy_policy_content()
        {
        }
        /**
         * Return the default suggested privacy policy content.
         *
         * @param bool $descr Whether to include the descriptions under the section headings. Default false.
         *
         * @since 4.6.20
         *
         * @return string The default policy content.
         */
        public function default_privacy_policy_content($descr = \false)
        {
        }
    }
    class Tribe__Events__Constants implements \ArrayAccess
    {
        /**
         * @var bool Whether the class will define and read real constants or not.
         */
        protected $volatile;
        /**
         * @var array An array that will store volatile values if the class is used in volatile mode.
         */
        protected $volatile_values;
        /**
         * Tribe__Events__Constants constructor.
         *
         * @param bool $volatile If `true` the class will not define and read real constants.
         */
        public function __construct($volatile = \false)
        {
        }
        /**
         * Whether a constant is defined or not.
         *
         * @param string $offset
         *
         * @return bool
         */
        public function offsetExists($offset)
        {
        }
        /**
         * Gets a constant value.
         *
         * @param string $offset
         *
         * @return mixed
         */
        public function offsetGet($offset)
        {
        }
        /**
         * Sets the value of a constant if not already defined.
         *
         * @param string $offset
         * @param mixed $value
         */
        public function offsetSet($offset, $value)
        {
        }
        /**
         * Unsets a constant if in volatile mode.
         *
         * @param string $offset
         */
        public function offsetUnset($offset)
        {
        }
    }
}
namespace Tribe\Events\Integrations\Fusion {
    /**
     * Class Service_Provider
     *
     * @since   5.5.0
     *
     * @package Tribe\Events\Integrations\Fusion
     */
    class Service_Provider extends \tad_DI52_ServiceProvider
    {
        /**
         * Registers the bindings and hooks the filters required for the Fusion Core integration to work.
         *
         * @since   5.5.0
         */
        public function register()
        {
        }
        /**
         * Register the hooks for Fusion integration.
         *
         * @since   5.5.0
         */
        public function register_hooks()
        {
        }
        /**
         * Builds and hooks the class that will handle shortcode support in the context of Fusipn Core.
         *
         * @since 5.5.0
         *
         * @param array  $out       The output array of shortcode attributes.
         * @param array  $pairs     The supported attributes and their defaults.
         * @param array  $atts      The user defined shortcode attributes.
         * @param string $shortcode The shortcode name.
         *
         * @return array Change the attributes to fix the class name after WordPress borks the Namespaced method.
         */
        public function filter_shortcode_widget_atts($out, $pairs, $atts, $shortcode)
        {
        }
    }
    /**
     * Class Widget_Shortcode
     *
     * @since   5.5.0
     *
     * @package Tribe\Events\Pro\Integrations\Fusion
     */
    class Widget_Shortcode
    {
        /**
         * Fetches a list of widgets we will fix inside of the Fusion Core builder.
         *
         * @since 5.5.0
         *
         * @return array
         */
        public function get_widget_class_map()
        {
        }
        /**
         * Filters the attributes for shortcodes to modify the class names for Avada/Fusion core widgets.
         *
         * @since 5.5.0
         *
         *
         * @param array  $out       The output array of shortcode attributes.
         * @param array  $pairs     The supported attributes and their defaults.
         * @param array  $atts      The user defined shortcode attributes.
         * @param string $shortcode The shortcode name.
         *
         * @return array Change the attributes to fix the class name after WordPress borks the Namespaced method.
         */
        public function fix_type_for_namespaced_widgets($out, $pairs, $atts, $shortcode)
        {
        }
    }
}
namespace Tribe\Events\Integrations {
    /**
     * Integrations with Beaver Builder plugin.
     *
     * @package Tribe\Events\Integrations
     *
     * @since 5.0.2
     */
    class Beaver_Builder
    {
        /**
         * Hooks all the required methods for Beaver_Builder usage on our code.
         *
         * @since 5.0.2
         *
         * @return void  Action hook with no return.
         */
        public function hook()
        {
        }
        /**
         * Restore main post for Beaver Builder plugin.
         *
         * @since 5.0.2
         *
         * @param int    $post_id Which Beaver Builder layout.
         *
         * @return void           Action hook with no return.
         */
        public function action_restore_post($post_id)
        {
        }
    }
}
namespace {
    /**
     * Facilitates smoother integration with the Twenty Seventeen theme.
     *
     * @since 4.5.10
     */
    class Tribe__Events__Integrations__Twenty_Seventeen
    {
        /**
         * Performs setup for the Twenty Seventeen integration singleton.
         *
         * @since 4.5.10
         */
        public function hook()
        {
        }
        /**
         * Filters body classes for event archives.
         *
         * The default for event views is to remove the 'has-sidebar' class and
         * modify 'page-one-column' to 'page-two-column', to achieve better fit
         * and avoid JS errors.
         *
         * @since 4.5.10
         * @see   https://central.tri.be/issues/70853
         *
         * @param array $classes
         *
         * @return array
         */
        public function body_classes($classes)
        {
        }
    }
    /**
     * Facilitates smoother integration with the Freemius.
     *
     * @since 4.9
     */
    class Tribe__Events__Integrations__Freemius
    {
        /**
         * Stores the instance for the Freemius.
         *
         * @since  4.9
         *
         * @var Freemius
         */
        private $instance;
        /**
         * The object class used for assets.
         *
         * @since 5.0.2
         *
         * @var string
         */
        private $object_class = 'Tribe__Events__Main';
        /**
         * Stores the public key for Freemius.
         *
         * @since 5.0.2
         *
         * @var string
         */
        private $public_key = 'pk_e32061abc28cfedf231f3e5c4e626';
        /**
         * Stores the ID for the Freemius application.
         *
         * @since  4.9
         *
         * @var string
         */
        private $freemius_id = '3069';
        /**
         * Stores the slug for the Freemius application.
         *
         * @since  4.9
         *
         * @var string
         */
        private $slug = 'the-events-calendar';
        /**
         * Stores the name for the Freemius application.
         *
         * @since 5.0.2
         *
         * @var string
         */
        private $name = 'The Events Calendar';
        /**
         * Store the value from the 'page' in the request.
         *
         * @since 4.9.5
         *
         * @var string
         */
        private $page = 'tribe-common';
        /**
         * Tribe__Tickets__Integrations__Freemius constructor.
         *
         * @since  5.0.2
         */
        public function __construct()
        {
        }
        /**
         * Performs setup for the Freemius integration singleton.
         *
         * @since 5.0.2
         */
        public function setup()
        {
        }
        /**
         * For some reason Freemius is redirecting some customers to a page that doesnt exist. So we catch that page and
         * redirect them back to the actual page that we are using to setup the plugins integration.
         *
         * @since  5.0.2
         *
         * @link https://moderntribe.atlassian.net/browse/TEC-3218
         *
         * @return void  Retuning a Redirect header, so nothing gets returned otherwise.
         */
        public function action_redirect_incorrect_page()
        {
        }
        /**
         * Get the connect page URL.
         *
         * @since  5.0.2
         *
         * @param string $connect_url Current connect page URL.
         *
         * @return string The connect page URL.
         */
        public function get_connect_url($connect_url)
        {
        }
        /**
         * Get the Settings page URL.
         *
         * @since  5.0.2
         *
         * @return string The Settings page URL.
         */
        public function get_settings_url()
        {
        }
        /**
         * Get the plugin icon URL.
         *
         * @since  5.0.2
         *
         * @return string The plugin icon URL.
         */
        public function get_plugin_icon_url()
        {
        }
        /**
         * Get the Settings page path.
         *
         * @since  5.0.2
         *
         * @return string The Settings page path.
         */
        public function get_settings_path()
        {
        }
        /**
         * Get the Welcome page URL.
         *
         * @since 5.1.6
         *
         * @return string The welcome page URL.
         */
        public function get_welcome_url()
        {
        }
        /**
         * Action to skip activation since Freemius code does not skip correctly here.
         *
         * @since  4.9
         *
         * @return bool Whether activation was skipped.
         */
        public function action_skip_activation()
        {
        }
        /**
         * Filter the content for the Freemius Popup.
         *
         * @since  4.9
         *
         * @param string $message         The message content.
         * @param string $user_first_name The first name of user.
         * @param string $product_title   The product title.
         * @param string $user_login      The user_login of user.
         * @param string $site_link       The site URL.
         * @param string $freemius_link   The Freemius URL.
         *
         * @return string
         */
        public function filter_connect_message_on_update($message, $user_first_name, $product_title, $user_login, $site_link, $freemius_link)
        {
        }
        /**
         * Returns the instance of Freemius plugin.
         *
         * @since  4.9
         *
         * @return Freemius
         */
        public function get()
        {
        }
        /**
         * Method to remove the sticky message when the plugin is active for Freemius.
         *
         * @since  4.9
         */
        public function maybe_remove_activation_complete_notice()
        {
        }
    }
    /**
     * Class Tribe__Events__Integrations__X_Theme__X_Theme
     *
     * Handles the integration between The Events Calendar plugin and
     * the X Theme.
     *
     * This class is meant to be an entry point hooking specialized classes and not
     * a logic hub per se.
     */
    class Tribe__Events__Integrations__X_Theme__X_Theme
    {
        /**
         * @var Tribe__Events__Integrations__X_Theme__X_Theme
         */
        protected static $instance;
        /**
         * @return Tribe__Events__Integrations__X_Theme__X_Theme
         */
        public static function instance()
        {
        }
        /**
         * Hooks the filters and actions needed for this integration to work.
         */
        public function hook()
        {
        }
        /**
         * Tries to "catch" the loading of X theme content templates that render a highly-filtered
         * excerpt view instead of full content, which often ruins the display of our Month View etc.
         *
         * @since 4.6.2
         * @see x_get_view()
         *
         * @return array $view An array of X-theme view data with the template file and render options.
         */
        public function force_full_content($view, $directory, $file_base, $file_extension)
        {
        }
        /**
         * Use the filter as an action to remove further filtering on X theme side
         * if the query is for our content.
         *
         * @param string $template
         *
         * @return string $template
         */
        public function filter_template_include($template)
        {
        }
        /**
         * Checks if we're in a "main" calendar view, like Month View etc., where we want to apply our
         * various integration filters and overrides.
         *
         * @since 4.6.2
         *
         * @return boolean
         */
        public function should_run_tribe_overrides()
        {
        }
    }
    /**
     * Class Tribe__Events__Integrations__ACF__ACF
     *
     * Handles the integration between The Events Calendar plugin and Advanced Custom Fields.
     *
     * This class is meant to be an entry point hooking specialized classes and not
     * a logic hub per se.
     */
    class Tribe__Events__Integrations__ACF__ACF
    {
        /**
         * @var Tribe__Events__Integrations__ACF__ACF
         */
        protected static $instance;
        /**
         * @return Tribe__Events__Integrations__ACF__ACF
         */
        public static function instance()
        {
        }
        /**
         * Hooks the filters and actions neede for this integration to work.
         *
         * @since 4.6.3
         */
        public function hook()
        {
        }
        /**
         * Load our compatability JS script to supplement the events-admin.js script.
         *
         * @since 4.6.3
         */
        public function load_compat_js()
        {
        }
    }
    /**
     * Class Tribe__Events__Integrations__WPML__Rewrites
     *
     * Handles modifications to rewrite rules taking WPML into account.
     */
    class Tribe__Events__Integrations__WPML__Rewrites
    {
        /**
         * @var Tribe__Events__Integrations__WPML__Linked_Posts
         */
        protected static $instance;
        /**
         * @var string The English version of the venue slug.
         */
        protected $venue_slug = 'venue';
        /**
         * @var string The English version of the organizer slug.
         */
        protected $organizer_slug = 'organizer';
        /**
         * @var array An array of translations for the venue slug
         */
        protected $venue_slug_translations = [];
        /**
         * @var array An array of translations for the organizer slug
         */
        protected $organizer_slug_translations = [];
        /**
         * @var array An array containing the translated version of each venue and organizer rule
         */
        protected $translated_rules = [];
        /**
         * @var array
         */
        protected $replacement_rules = [];
        /**
         * @return Tribe__Events__Integrations__WPML__Linked_Posts
         */
        public static function instance()
        {
        }
        /**
         * Filters the rewrite rules array to add support for translated versions of
         * venue and organizer slugs in their rules.
         *
         * @param array $rewrite_rules
         *
         * @return array
         */
        public function filter_rewrite_rules_array(array $rewrite_rules)
        {
        }
        protected function prepare_venue_slug_translations()
        {
        }
        protected function prepare_organizer_slug_translations()
        {
        }
        protected function replace_rules_with_translations(array $rewrite_rules)
        {
        }
        /**
         * Adds support for the translated version of the venue slug in all venues rewrite
         * rules regular expressions.
         *
         * E.g. `venue/then-some` becomes `(?:venue|luogo|lieu)/then-some`; the match uses
         * non-capturing groups not to mess up the match keys.
         *
         * @param string $rule  A rewrite rule scheme assigning pattern matches to vars.
         * @param string $regex A rewrite rule regular expression.
         */
        public function translate_venue_rules($rule, $regex)
        {
        }
        protected function is_venue_rule($candidate_rule)
        {
        }
        /**
         * Adds support for the translated version of the organizer slug in all organizers rewrite
         * rules regular expressions.
         *
         * E.g. `organizer/then-some` becomes `(?:organizer|organizzatore|organisateur)/then-some`;
         * the match uses non-capturing groups not to mess up the match keys.
         *
         * @param string $rule  A rewrite rule scheme assigning pattern matches to vars.
         * @param string $regex A rewrite rule regular expression.
         */
        public function translate_organizer_rules($rule, $regex)
        {
        }
        protected function is_organizer_rule($candidate_rule)
        {
        }
        /**
         * Adds translated versions of the events category base slug to the rewrite rules.
         *
         * @param array  $bases
         * @param string $method
         *
         * @return array
         */
        public function filter_tax_base_slug($bases, $method)
        {
        }
    }
    /**
     * Class Tribe__Events__Integrations__WPML__Permalinks
     *
     * Handles permalink generations taking WPML into account.
     */
    class Tribe__Events__Integrations__WPML__Permalinks
    {
        /**
         * @var static
         */
        protected static $instance;
        /**
         * @var array
         */
        protected $supported_post_types;
        /**
         * Tribe__Events__Integrations__WPML__Permalinks constructor.
         *
         * @param array|null $supported_post_types An injectable array of supported post types.
         */
        public function __construct(array $supported_post_types = \null)
        {
        }
        /**
         * @return Tribe__Events__Integrations__WPML__Permalinks
         */
        public static function instance()
        {
        }
        /**
         * Filters the post type link to remove WPML language query arg/frags on non translated posts.
         *
         * @param string  $post_link The post's permalink.
         * @param WP_Post $post      The post in question.
         */
        public function filter_post_type_link($post_link, \WP_Post $post)
        {
        }
        /**
         * Returns the post link withe the language query arg removed or updated to the post language.
         *
         * @param string  $post_link
         * @param WP_Post $post
         * @param string  $post_language The post language code.
         *
         * @return string
         */
        protected function update_language_query_arg($post_link, $post_language)
        {
        }
        /**
         * Returns the post permalink taking the post language into account.
         *
         * @param WP_Post      $post
         * @param       string $post_language The post language code.
         *
         * @return string The post permalink.
         */
        protected function get_post_permalink(\WP_Post $post, $post_language)
        {
        }
    }
    class Tribe__Events__Integrations__WPML__Filters
    {
        /**
         * @var Tribe__Events__Integrations__WPML__Filters
         */
        protected static $instance;
        /**
         * @return Tribe__Events__Integrations__WPML__Filters
         */
        public static function instance()
        {
        }
        /**
         * Filters the bases used to generate TEC rewrite rules to use WPML managed translations.
         *
         * @param array  $bases
         * @param string $method
         * @param array  $domains
         *
         * @return array An array of bases each with its (optional) WPML managed translations set.
         */
        public function filter_tribe_events_rewrite_i18n_slugs_raw($bases, $method, $domains)
        {
        }
        /**
         * @param $bases
         *
         * @return array
         */
        protected function translate_single_slugs(array $bases)
        {
        }
    }
    class Tribe__Events__Integrations__WPML__Language_Switcher
    {
        /**
         * @var Tribe__Events__Integrations__WPML__Language_Switcher
         */
        protected static $instance;
        /**
         * @return Tribe__Events__Integrations__WPML__Language_Switcher
         */
        public static function instance()
        {
        }
        /**
         * Updates the `url` field in each language information array to preserve correct calendar links.
         *
         * While the default view of the calendar will will be served on `/events` non default calendar
         * views like `list` or `photo` will be served, respectively, at `/events/list`, `/events/photo`
         * and so on.
         * For any view that's not the default one the `url` field in the language informtion array has to
         * be set to the correct one.
         *
         * @param array $languages The original languages information array.
         *
         * @return array The languages with maybe updated URLs
         */
        public function filter_icl_ls_languages(array $languages = [])
        {
        }
    }
    /**
     * Class Tribe__Events__Integrations__WPML__WPML
     *
     * Handles anything relating to The Events Calendar and WPML integration
     *
     * This class is meant to be an entry point hooking specialized classes and not
     * a logic hub per se.
     */
    class Tribe__Events__Integrations__WPML__WPML
    {
        /**
         * @var Tribe__Events__Integrations__WPML__WPML
         */
        protected static $instance;
        /**
         * The class singleton constructor.
         *
         * @return Tribe__Events__Integrations__WPML__WPML
         */
        public static function instance()
        {
        }
        /**
         * Hooks into The Events Calendar and WPML hooks to make the plugins play nice.
         */
        public function hook()
        {
        }
        protected function hook_actions()
        {
        }
        protected function hook_filters()
        {
        }
        protected function setup_cache_expiration_triggers()
        {
        }
    }
    /**
     * Handles the translation of the plugin settings.
     *
     * @since   5.2.0
     *
     * @package Tribe__Events__Integrations__WPML__Option
     */
    /**
     * Class Tribe__Events__Integrations__WPML__Option
     *
     * @since 5.2.0
     */
    class Tribe__Events__Integrations__WPML__Option
    {
        /**
         * The singleton instance of this class.
         *
         * @since 5.2.0
         *
         * @var Tribe__Events__Integrations__WPML__Option
         */
        protected static $instance;
        /**
         * The singleton method of this class.
         *
         * @since 5.2.0
         *
         * @return Tribe__Events__Integrations__WPML__Option The singleton instance of this class.
         */
        public static function instance()
        {
        }
        /**
         * Translate the option value using WPML filters.
         *
         * @since 5.2.0
         *
         * @param string $option_value The value of the option to translate.
         * @param string $default      The option default value.
         * @param string $option_name  The name of the option to translate.
         *
         * @return string The translated option value.
         *
         * @see   https://wpml.org/wpml-hook/wpml_translate_single_string/
         */
        public function translate($option_value, $default, $option_name)
        {
        }
    }
    /**
     * Translate post ids in Event meta data.
     *
     * @since 4.6.21
     */
    class Tribe__Events__Integrations__WPML__Meta
    {
        /**
         * @since 4.6.21
         *
         */
        public function hook()
        {
        }
        /**
         * Translates post id in the Event meta data.
         *
         * @since 4.6.21
         *
         * @param string $value
         * @param int    $object_id
         * @param string $meta_key
         *
         * @return mixed The translated id for _EventOrganizerID & _EventVenueID or false.
         */
        public function translate_post_id($value, $object_id, $meta_key)
        {
        }
        /**
         * Get meta value skipping filters (using direct DB query).
         *
         * @since 4.6.21
         *
         * @param int $post_id
         * @param string $meta_key
         * @return array
         */
        private function get_post_meta($post_id, $meta_key)
        {
        }
        /**
         * Query all translations of organizer or venue to fetch events.
         *
         * @since 4.6.21
         *
         * @param object $q
         */
        public function include_all_languages($q)
        {
        }
    }
    /**
     * Class Tribe__Events__Integrations__WPML__Linked_Posts
     *
     * Handles linked posts fetching taking WPML managed translations into account.
     */
    class Tribe__Events__Integrations__WPML__Linked_Posts
    {
        /**
         * @var Tribe__Events__Integrations__WPML__Linked_Posts
         */
        protected static $instance;
        /**
         * @var string
         */
        public $current_language;
        /**
         * @var int
         */
        protected $element_id;
        /**
         * @var Tribe__Cache
         */
        protected $cache;
        /**
         * Tribe__Events__Integrations__WPML__Linked_Posts constructor.
         *
         * @param Tribe__Cache|null $cache
         */
        public function __construct(\Tribe__Cache $cache = \null)
        {
        }
        /**
         * @return Tribe__Events__Integrations__WPML__Linked_Posts
         */
        public static function instance()
        {
        }
        /**
         * Assign linked posts managed by The Events Calendar a language.
         *
         * We use the filter as an action to assign linked posts a language.
         * WPML will not "see" posts that have not a language assigned: here we make sure that linked posts like
         * venues and organizers will be assigned the language of the event they are being linked to.
         *
         * @param int    $id               The linked post ID; this would be `null` by default but we know TEC is inserting
         *                                 the post at priority 10.
         * @param array  $data             Unused, an array of data representing the linked post submission.
         * @param string $linked_post_type The linked post type, e.g. `tribe_venue` or `tribe_organizer`.
         * @param string $post_status      Unused, the linked post type post status.
         * @param int    $event_id         The post ID of the event this post is linked to; this will be null for newly created events.
         *
         * @return int The untouched linked post ID.
         */
        public function filter_tribe_events_linked_post_create($id, $data, $linked_post_type, $post_status, $event_id)
        {
        }
        /**
         * Filters the query for linked posts to return an array that will contain the translated version of linked
         * posts or the original one if a translation is missing.
         *
         * @param array $results  An array of linked post types results; comes `null` from the filter but other plugins
         *                        might set it differently.
         * @param array $args     An array of WP_Query args
         *
         * @return array|null An array of linked posts populated taking WPML managed translations into account or `null` if
         *                    WPML is not active or the current language is the default one.
         */
        public function filter_tribe_events_linked_posts_query($results = \null, array $args = [])
        {
        }
        /**
         * Returns a list of post IDs of linked posts for the current language.
         *
         * @param array $args An array WP_Query arguments
         *
         * @return array An array of linked posts filtered by the current language
         */
        protected function get_current_language_linked_posts_ids(array $args)
        {
        }
        /**
         * Returns a list of linked post IDs for the default language.
         *
         *
         * @param array $args An array WP_Query arguments
         *
         * @return array An array of linked posts filtered by the default language
         */
        protected function get_default_language_linked_post_ids(array $args)
        {
        }
        /**
         * Returns the post ID(s) of post(s) of the type specified in the args linked to the current event.
         *
         * @param array $args An array of arguments in the format supported by `WP_Query`
         *
         * @return array An array of linked post IDs or an empty array if no post types, more than one post type
         *               is specified in the args, or the current post is not an event.
         */
        protected function get_linked_post_assigned_to_current(array $args)
        {
        }
        /**
         * Conditionally sets up a `shutdown` action to translated the linked post IDs.
         *
         * @param array $data An array of data about the translation provided by WPML.
         *
         * @return bool Whether the `shutdown` action has been hooked or not.
         */
        public function maybe_translate_linked_posts(array $data)
        {
        }
        /**
         * Translates the linked posts when creating the translated version of a post.
         */
        public function translate_linked_posts()
        {
        }
        /**
         * Replaces the linked post IDs for the current post with the IDs of the translated versions if available.
         *
         * @param int    $post_id
         * @param string $current_language
         * @param array  $linked_post_ids
         */
        protected function set_linked_post_translations_for($post_id, $current_language, $linked_post_ids, $meta_key)
        {
        }
        /**
         * Whether a post ID has a translation in the current language or not.
         *
         * @param int $id The post ID
         *
         * @return bool `true` if the post lacks a WPML managed translation, `false` if the post has a WPML managed translation.
         */
        protected function is_not_translated($id)
        {
        }
    }
    /**
     * Class Tribe__Events__Integrations__WPML__Category_Translation
     *
     * Translates category links on the site front-end.
     */
    class Tribe__Events__Integrations__WPML__Category_Translation
    {
        /**
         * @var static
         */
        protected static $instance;
        /**
         * @return Tribe__Events__Integrations__WPML__Category_Translation
         */
        public static function instance()
        {
        }
        /**
         * Filters the `tribe_events_category_slug` to return the category slug that's WPML aware.
         *
         * WPML does not currently support translation of custom taxonomies root ,e.g. `category` in
         * The Events Calendar case. But we do take WPML-managed translations of the `category` slug
         * into account in our rewrite rules and try to show a localized version of the `category` slug
         * in the permalinks.
         *
         * @param string $slug The original, possibily translated, category slug.
         *
         * @return string The category slug in its ENG form if the Events Category translation is not active
         *                or in a translation that The Events Calendar supports.
         */
        public function filter_tribe_events_category_slug($slug)
        {
        }
        /**
         * Supplies an array containing all translated forms of the events category slug.
         *
         * The default (English) slug will not be containied in the resulting array.
         * Example: [ 'categorie', 'kategorie', 'categoria' ] // French, German, Italian
         *
         * @return array
         */
        public function get_translated_base_slugs()
        {
        }
    }
    /**
     * Class Tribe__Events__Integrations__WPML__Utils
     *
     * A utility class offering WPML related convenience methods.
     */
    class Tribe__Events__Integrations__WPML__Utils
    {
        /**
         * Returns the translation of an array of strings using WPML supported languages to do so.
         *
         * @param array  $strings
         *
         * @param string $locale    Optional; the locale the strings should be translated to;
         *                          should be in the "fr_FR" format.
         *
         * @return array
         */
        public static function get_wpml_i18n_strings(array $strings, $locale = \null, array $domains = \null)
        {
        }
        /**
         * Fetches the optional post slug translations for a post type.
         *
         * WPML allows translating a custom post type slug  when the String Translation
         * accessory plugin is active.
         *
         * @param string $type The custom post type slug.
         *
         * @return array An associative array in the format [ <language> => <translation> ] of
         *               translations for the slug or an empty array if String Translation is not active or
         *               the post type slug is not translated. Please note that the translation does not
         *               include the original slug.
         */
        public static function get_post_slug_translations_for($type)
        {
        }
        /**
         * Returns an array of currently active locales (other than English).
         *
         * Example: [ 'fr_FR', 'de_DE', 'it_IT' ]
         *
         * @return array
         */
        public static function get_active_locales()
        {
        }
    }
    /**
     * Class Tribe__Events__Integrations__WPML__Defaults
     *
     * Handles sensible defaults for to The Events Calendar in WPML.
     */
    class Tribe__Events__Integrations__WPML__Defaults
    {
        /**
         * @var Tribe__Events__Integrations__WPML__Defaults
         */
        protected static $instance;
        /**
         * @var string The name of the sub-option that will store the first run flag.
         */
        public $defaults_option_name = 'wpml_tec_did_set_defaults';
        /**
         * @var Tribe__Settings_Manager
         */
        protected $settings_manager;
        /**
         * Tribe__Events__Integrations__WPML__Defaults constructor.
         *
         * @param SitePress|null               $sitepress
         * @param Tribe__Settings_Manager|null $settings_manager
         */
        public function __construct(\Tribe__Settings_Manager $settings_manager = \null)
        {
        }
        /**
         * The class singleton constructor
         *
         * @return Tribe__Events__Integrations__WPML__Defaults
         */
        public static function instance()
        {
        }
        /**
         * Checks whether default custom field translation option values have been for the current installation.
         *
         * @return bool Whether defaaults have been set already or not.
         */
        public function has_set_defaults()
        {
        }
        /**
         * Dumps the contents of the default WPML config file for the plugin to the root plugin folder.
         *
         * @return bool `true` if the file was correctly written or exists already, `false` if the file does not exist
         *              and the plugin could not write it; in the latter case the plugin will show a notice.
         */
        public function setup_config_file()
        {
        }
        /**
         * Returns the path to the WPML config file for the plugin.
         *
         * @return string
         */
        protected function get_config_file_path()
        {
        }
        /**
         * Returns the default content of WPML config file for the plugin.
         *
         * @return string
         */
        protected function get_config_file_contents()
        {
        }
        /**
         * Returns the notice that will be shown to the user if the WPML config file could not be written.
         *
         * @return string
         */
        protected function get_config_file_fail_message()
        {
        }
    }
}
namespace Tribe\Events\Integrations\WPML\Views\V2 {
    /**
     * Class Filters
     *
     * @since   5.2.1
     *
     * @package Tribe\Events\Integrations\WPML\Views\V2
     */
    class Filters
    {
        /**
         * Translates the View URL.
         *
         * @since 5.2.1
         *
         * @param string $url The original View URL.
         *
         * @return string The translated View URL.
         */
        public static function translate_view_url($url)
        {
        }
        /**
         * Returns the current request language, read from the request cookie.
         *
         * @since 5.2.1
         *
         * @return string|false Either the request language, e.g. `fr`, or `false` to indicate the language could not be
         *                      parsed from the request context.
         */
        protected static function get_request_lang()
        {
        }
        /**
         * Translates the URls contained in the View template variables.
         *
         * @since 5.2.1
         *
         * @param array<string,mixed> $template_vars The original View template variables.
         *
         * @return array<string,mixed> The View template variables, with the URLs there contained translated, if required.
         */
        public static function translate_template_vars_urls($template_vars = [])
        {
        }
        /**
         * Translates the URL of the public Views, the ones selectable in the Views selector.
         *
         * @since 5.2.1
         *
         * @param array<string,array<string,mixed>> $public_views The original data for the current public Views.
         *
         * @return array<string,array<string,mixed>> $public_views The modified data for the current public Views.
         */
        public static function translate_public_views_urls($public_views = [])
        {
        }
        /**
         * Updates the Views v2 request URI used to set up the `$_SERVER['REQUEST_URI']` in the `View::setup_the_loop`
         * method to make sure it will point to the correct URL.
         *
         * @since 5.2.1
         *
         * @param string $request_uri The original request URI.
         *
         * @return string The corrected request URI.
         */
        public static function translate_view_request_uri($request_uri)
        {
        }
        /**
         * Returns whether the current WPML URL translation setting is the sub-directory one (e.g. `http://foo.bar/it`) or
         * not.
         *
         * @since 5.2.1
         *
         * @return bool Whether the current WPML URL translation setting is the sub-directory one or not.
         */
        protected static function using_subdir()
        {
        }
    }
}
namespace {
    /**
     * Class Tribe__Events__Integrations__Manager
     *
     * Loads and manages the third-party plugins integration implementations.
     */
    class Tribe__Events__Integrations__Manager
    {
        /**
         * @var Tribe__Events__Integrations__Manager
         */
        protected static $instance;
        /**
         * The class singleton constructor.
         *
         * @return Tribe__Events__Integrations__Manager
         */
        public static function instance()
        {
        }
        /**
         * Conditionally loads the classes needed to integrate with third-party plugins.
         *
         * Third-party plugin integration classes and methods will be loaded only if
         * supported plugins are activated.
         */
        public function load_integrations()
        {
        }
        /**
         * Loads our Events Freemius integration
         *
         * @since 4.9
         *
         * @return bool
         */
        private function load_freemius()
        {
        }
        /**
         * Loads our ACF integrations if that theme is active.
         *
         * @return bool
         */
        private function load_acf_integration()
        {
        }
        /**
         * Loads our Twenty Seventeen integrations if that theme is active.
         *
         * @since 4.5.10
         *
         * @return bool
         */
        protected function load_twenty_seventeen_integration()
        {
        }
        /**
         * Loads WPML integration classes and event listeners.
         *
         * @return bool
         */
        private function load_wpml_integration()
        {
        }
        /**
         * Loads our X Theme integrations if that theme is active.
         *
         * @return bool
         */
        private function load_X_theme_integration()
        {
        }
        /**
         * Loads our WP Rocket plugin integration.
         *
         * @since 5.0.0.2
         *
         * @return bool Whether we loaded WP Rocket compatibility or not.
         */
        private function load_wp_rocket_integration()
        {
        }
        /**
         * Loads our beaver builder plugin integration.
         *
         * @since  5.0.2
         *
         * @return bool Whether we loaded Beaver Builder compatibility or not.
         */
        private function load_beaver_builder_integration()
        {
        }
        /**
         * Loads the Fusion integration if Fusion Core is currently active.
         *
         * @since 5.5.0
         */
        public function load_fusion_integration()
        {
        }
    }
}
namespace Tribe\Events\Integrations {
    /**
     * Integrations with WP Rocket plugin.
     *
     * @package Tribe\Events\Integrations
     * @since 5.0.0.2
     */
    class WP_Rocket
    {
        /**
         * Hooks all the required methods for WP_Rocket usage on our code.
         *
         * @since 5.0.0.2
         */
        public function hook()
        {
        }
        /**
         * Filters the content of the WP Rocket excluded inline JS concat.
         *
         * @since 5.0.0.2
         *
         * @param array $excluded_inline Items to be excluded by WP Rocket.
         *
         * @return array Excluded inline scripts after adding the breakpoint code.
         */
        public function filter_excluded_inline_js_concat(array $excluded_inline)
        {
        }
    }
}
namespace {
    /**
     * Controls getting a previous or next event from the context of a single event being viewed.
     */
    class Tribe__Events__Adjacent_Events
    {
        /**
         * @var int
         */
        protected $current_event_id = 0;
        /**
         * @var int
         */
        public $previous_event_id;
        /**
         * @var int
         */
        public $next_event_id;
        /**
         * @var string
         */
        public $previous_event_link = '';
        /**
         * @var string
         */
        public $next_event_link = '';
        /**
         * Set the "center" event ID to look on either side of in prev/next methods.
         *
         * @since 4.6.12
         *
         * @param int $event_id The event ID to look on either side of in prev/next methods.
         */
        public function set_current_event_id($event_id)
        {
        }
        /**
         * Get the "center" event ID to look on either side of in prev/next methods.
         *
         * @since 4.6.12
         *
         * @param int $event_id The event ID to look on either side of in prev/next methods.
         */
        public function get_current_event_id()
        {
        }
        /**
         * Get link to the previous event.
         *
         * @since 4.6.12
         *
         * @param boolean $anchor
         * @return string
         */
        public function get_prev_event_link($anchor)
        {
        }
        /**
         * Get link to the next event.
         *
         * @since 4.6.12
         *
         * @param boolean $anchor
         * @return string
         */
        public function get_next_event_link($anchor)
        {
        }
        /**
         * Modify the WHERE clause of query when fetching next/prev posts so events with identical times are not excluded
         *
         * This method ensures that when viewing single events that occur at a given time, other events
         * that occur at the exact same time are are not excluded from the prev/next links
         *
         * @since 4.0.2
         * @since 4.6.12 Moved to new Tribe__Events__Adjacent_Events class.
         *
         * @param string $where_sql WHERE SQL statement
         * @param WP_Query $query WP_Query object
         *
         * @return string
         */
        public function get_closest_event_where($where_sql)
        {
        }
        /**
         * Get the prev/next post for a given event. Ordered by start date instead of ID.
         *
         * @since 4.6.12
         *
         * @param string  $mode Either 'next' or 'previous'.
         *
         * @return null|WP_Post
         */
        public function get_closest_event($mode = 'next')
        {
        }
        /**
         * Get a "previous/next post" link for events. Ordered by start date instead of ID.
         *
         * @since 4.6.12
         *
         * @param string  $mode Either 'next' or 'previous'.
         * @param mixed   $anchor
         *
         * @return string The link (with <a> tags).
         */
        public function get_event_link($mode = 'next', $anchor = \false)
        {
        }
    }
    class Tribe__Events__Cost_Utils extends \Tribe__Cost_Utils
    {
        const UNCOSTED_EVENTS_TRANSIENT = 'tribe_events_have_uncosted_events';
        /**
         * Static Singleton Factory Method
         *
         * @return Tribe__Events__Cost_Utils
         */
        public static function instance()
        {
        }
        /**
         * Fetches all event costs from the database
         *
         * @return array
         */
        public function get_all_costs()
        {
        }
        /**
         * Fetches an event's cost values
         *
         * @param int|WP_Post $event The Event post object or event ID
         *
         * @return array
         */
        public function get_event_costs($event)
        {
        }
        /**
         * Returns a formatted event cost
         *
         * @param int|WP_Post $event                The Event post object or event ID
         * @param bool        $with_currency_symbol Include the currency symbol (optional)
         *
         * @return string
         */
        public function get_formatted_event_cost($event, $with_currency_symbol = \false)
        {
        }
        /**
         * Returns boolean true if there are events for which a cost has not been specified.
         *
         * @return bool
         */
        public function has_uncosted_events()
        {
        }
    }
    class Tribe__Events__Default_Values
    {
        public function __call($method, $args)
        {
        }
        public function venue()
        {
        }
        public function venue_id()
        {
        }
        public function organizer()
        {
        }
        public function organizer_id()
        {
        }
        public function address()
        {
        }
        public function city()
        {
        }
        public function state()
        {
        }
        public function province()
        {
        }
        public function zip()
        {
        }
        public function country()
        {
        }
        public function phone()
        {
        }
    }
    /**
     * Converts recurring events to single instances
     * and back when pro plugin is activated or
     * deactivated
     */
    class Tribe__Events__Recurring_Event_Cleanup
    {
        private $recurring = \false;
        public function __construct()
        {
        }
        /**
         * Modify the database appropriately to reflect the current
         * recurring events status
         */
        public function toggle_recurring_events()
        {
        }
        /**
         * Convert hidden instances back to normal start dates
         */
        private function restore_hidden_events()
        {
        }
        /**
         * Convert all but the first instance of a recurring event
         * to a hidden start date
         *
         * Reference for the subqueries: http://bugs.mysql.com/bug.php?id=21262
         */
        private function hide_recurring_events()
        {
        }
    }
}
namespace Tribe\Events {
    /**
     * Class I18n
     *
     * @since   5.1.1
     *
     * @package Tribe\Events
     */
    class I18n
    {
        /**
         * A flag to require translation compilation of the input as is.
         *
         * @since 5.1.5
         */
        const COMPILE_INPUT = 1;
        /**
         * A flag to require translation compilation of the lower-case version of the input.
         *
         * @since 5.1.5
         */
        const COMPILE_STRTOLOWER = 2;
        /**
         * A flag to require translation compilation of the input in its title form.
         *
         * @since 5.1.5
         */
        const COMPILE_UCFIRST = 4;
        /**
         * A flag to require translation compilation of the input in all the available forms.
         *
         * @since 5.1.5
         */
        const COMPILE_ALL = 7;
        /**
         * An instance of the The Events Calendar main class.
         *
         * @since 5.1.1
         *
         * @var TEC
         */
        protected $tec;
        /**
         * I18n constructor.
         *
         * @param TEC $tec An instance of The Events Calendar main class.
         */
        public function __construct(\Tribe__Events__Main $tec)
        {
        }
        /**
         * Get all possible translations for a String based on the given Languages and Domains
         *
         * WARNING: This function is slow because it deals with files, so don't overuse it!
         *
         * @since 5.1.1 Moved here from Tribe__Events__Main.
         * @since 5.1.5   Add support for the $flags argument.
         *
         * @param array  $strings          An array of strings (required).
         * @param array  $languages        Which l10n to fetch the string (required).
         * @param array  $domains          Possible Domains to re-load.
         * @param string $default_language The default language to avoid re-doing that.
         * @param int    $flags            An integer resulting from the combination of compilation flags;
         *                                 defaults to `static::COMPILE_ALL` to compile all versions of the translations.
         *                                 `static::COMPILE_INPUT` will compile the translation for the string, as input.
         *                                 `static::COMPILE_STRTOLOWER` will compile the translation for the string in its
         *                                 lowercase version.
         *                                 `static::COMPILE_UCFIRST` will compile the translation for the string in its
         *                                 title version.
         *
         * @return array<array<string>> A multi level array with the possible translations for the given strings
         */
        public function get_i18n_strings($strings, $languages, $domains = [], $default_language = 'en_US', $flags = 7)
        {
        }
        /**
         * Get all possible translations for a String based on the given Languages and Domains
         *
         * WARNING: This function is slow because it deals with files, so don't overuse it!
         * Differently from the `get_i18n_strings` method this will not use any domain that's not specified.
         *
         * @since 5.1.1
         * @since 5.1.5   Add support for the $flags argument.
         *
         * @param array $strings    An array of strings (required).
         * @param array $languages Which l10n to fetch the string (required).
         * @param array $domains   Possible domains to re-load.
         * @param int   $flags     An integer resulting from the combination of compilation flags;
         *                         defaults to `static::COMPILE_ALL` to compile all versions of the translations.
         *                         `static::COMPILE_INPUT` will compile the translation for the string, as input.
         *                         `static::COMPILE_STRTOLOWER` will compile the translation for the string in its lowercase
         *                         version.
         *                         `static::COMPILE_UCFIRST` will compile the translation for the string in its title
         *                         version.
         *
         * @return array<string,array|string> A multi level array with the possible translations for the given strings.
         *
         * @todo Include support for the `load_theme_textdomain` + `load_muplugin_textdomain`
         */
        public function get_i18n_strings_for_domains($strings, $languages, $domains = ['default'], $flags = 7)
        {
        }
        /**
         * Executes a callback ensuring the `current_locale` will be set to the specified language code.
         *
         * The method will backup and detach the functions and methods currently filtering the `locale` filter to execute
         * the callback in isolation and restore the filters after that.
         * The main purpose of this method is to avoid a rat race against plugins and themes that will filter the locale
         * by attaching the filtering method or function at `PHP_INT_MAX`.
         *
         * @since 5.1.1
         * @since 5.4.0 Changed the method visibility to public.
         *
         * @param string       $locale The locale to set for the execution of the callback.
         * @param callable     $do     The callable to execute in the context of a specific locale.
         * @param array<mixed> $args   A set of arguments that will be passed to the callback.
         *
         * @return mixed The callback return value, if any.
         */
        public function with_locale($locale, callable $do, array $args = [])
        {
        }
        /**
         * Compiles the translations for a set of strings iterating on a set of domains.
         *
         * The 4th argument is a bitmask to control the compiled translations.
         * E.g. `$i18n->compile_translations( $strings, $domains, I18n::COMPILE_STRTOLOWER);` will only compile
         * translations of the strings in their `strtolower` versions.
         * Combine the flags using the usual PHP syntax: `I18n::COMPILE_INPUT | I18n::COMPILE_STRTOLOWER` to compile
         * only the translation of the string as input and in their lowercase version.
         *
         * @since 5.1.1
         * @since 5.1.5   Add support for the $flags argument.
         *
         * @param array<string,array|string> $strings The set of strings to compile the translations for.
         * @param string|array<string>       $domains The domain(s) that should be used to compile the string translations.
         * @param int                        $flags   An integer resulting from the combination of compilation flags;
         *                                            defaults to `static::COMPILE_ALL` to compile all versions of the
         *                                            translations.
         *                                            `static::COMPILE_INPUT` will compile the translation for the string,
         *                                            as input.
         *                                            `static::COMPILE_STRTOLOWER` will compile the translation for the
         *                                            string in its lowercase version.
         *                                            `static::COMPILE_UCFIRST` will compile the translation for the string
         *                                            in its title version.
         *
         * @return array<string|array> A map of the compiled string translations.
         */
        public function compile_translations(array $strings, $domains, $flags = 7)
        {
        }
    }
}
namespace {
    /**
     * Class Tribe__Events__Linked_Posts__Chooser_Meta_Box
     *
     * Handles the Organizer section inside the Events meta box
     */
    class Tribe__Events__Linked_Posts__Chooser_Meta_Box
    {
        /**
         * @var WP_Post
         */
        protected $event;
        /**
         * @var Tribe__Events__Main
         */
        protected $tribe;
        /**
         * @var Tribe__Events__Linked_Posts
         */
        protected $linked_posts;
        /**
         * @var string
         */
        protected $post_type;
        /**
         * @var string
         */
        protected $singular_name;
        public function __construct($event = \null, $post_type = \null)
        {
        }
        /**
         * Work with the specifed event object or else use a placeholder if in the middle of creating a new event.
         *
         * @param mixed $event
         */
        protected function get_event($event = \null)
        {
        }
        /**
         * Render the organizer chooser section for the events meta box
         */
        public function render()
        {
        }
        /**
         * Displays the saved linked post dropdown in the event metabox.
         *
         * @since 3.0
         * @since 4.5.11 Genericized to work for all linked posts, not just organizers like it was originally.
         */
        public function render_dropdowns()
        {
        }
        /**
         * Render a single row of the linked post's table
         *
         * @since 3.0
         *
         * @param int $linked_post_id
         */
        protected function single_post_dropdown($linked_post_id)
        {
        }
        /**
         * Render a link to edit the linked post
         *
         * @since 3.0
         *
         * @param int $linked_post_id
         */
        protected function edit_post_link($linked_post_id)
        {
        }
        /**
         * Determine if the event can use the default setting
         *
         * @param array $current_posts
         * @return bool
         */
        protected function use_default_post($current_posts)
        {
        }
        /**
         * Renders the "Add Another Organizer" button
         */
        protected function render_add_post_button()
        {
        }
        /**
         * Renders the handle for sorting linked posts
         *
         * @since 3.0
         */
        protected function move_handle()
        {
        }
        /**
         * Renders the handle for deleting a linked post
         *
         * @since 3.0
         */
        protected function delete_handle()
        {
        }
        /**
         * Supply previously submitted linked post field values to the events-admin.js script in order to provide
         * them with sticky qualities. This *must* run later than the action:priority used to enqueue events-admin.js.
         */
        public function sticky_form_data()
        {
        }
        /**
         * Parse candidate linked posts.
         *
         * @param $current_linked_posts
         * @return mixed
         */
        private function maybe_parse_candidate_linked_posts(array $current_linked_posts = [])
        {
        }
    }
    /**
     * Class Event_Cleaner
     *
     * @since 4.6.13
     */
    class Tribe__Events__Event_Cleaner
    {
        /**
         * @var $scheduler
         */
        private $scheduler;
        /**
         * The option name to move old events to trash.
         *
         * @var $key_trash_events
         *
         * @since 4.6.13
         */
        public $key_trash_events = 'trash-past-events';
        /**
         * The option name to permanently delete old events.
         *
         * @var $key_delete_events
         *
         * @since 4.6.13
         */
        public $key_delete_events = 'delete-past-events';
        public function __construct(\Tribe__Events__Event_Cleaner_Scheduler $scheduler = \null)
        {
        }
        /**
         * Receives the existing value and the new value (modified by user) for the $key_trash_events option,
         * compares them and runs the scheduler if the conditions are satisfied.
         *
         * @param array<string,mixed>|null $old_value The old value of the `tribe_events_calendar_options` option.
         * @param array<string,mixed>|null $new_value The old value of the `tribe_events_calendar_options` option.
         *
         * @since 4.6.13
         * @since 5.3.0 Loosen the type-checking to avoid errors during option updates.
         */
        public function move_old_events_to_trash($old_value = [], $new_value = [])
        {
        }
        /**
         * Receives the existing value and the new value (modified by user) for the $key_delete_events option,
         * compares them and runs the scheduler if the conditions are satisfied.
         *
         * @param array $old_value
         * @param array $new_value
         *
         * @since 4.6.13
         */
        public function permanently_delete_old_events(array $old_value, array $new_value)
        {
        }
    }
    /**
     * Run schema updates on plugin activation or updates
     */
    class Tribe__Events__Updater
    {
        protected $version_option = 'schema-version';
        protected $reset_version = '3.9';
        // when a reset() is called, go to this version
        protected $current_version = 0;
        public $capabilities;
        public function __construct($current_version)
        {
        }
        /**
         * We've had problems with the notoptions and
         * alloptions caches getting out of sync with the DB,
         * forcing an eternal update cycle
         *
         */
        protected function clear_option_caches()
        {
        }
        public function do_updates()
        {
        }
        public function update_version_option($new_version)
        {
        }
        /**
         * Returns an array of callbacks with version strings as keys.
         * Any key higher than the version recorded in the DB
         * and lower than $this->current_version will have its
         * callback called.
         *
         * This method has been deprecated in favor of a more testable public function
         *
         * @return array
         * @deprecated 4.0
         */
        protected function get_updates()
        {
        }
        /**
         * Returns an array of callbacks with version strings as keys.
         * Any key higher than the version recorded in the DB
         * and lower than $this->current_version will have its
         * callback called.
         *
         * @return array
         */
        public function get_update_callbacks()
        {
        }
        /**
         * Returns an array of callbacks that should be called
         * every time the version is updated
         *
         * @return array
         */
        public function get_constant_update_callbacks()
        {
        }
        public function get_version_from_db()
        {
        }
        /**
         * Returns true if the version in the DB is less than the provided version
         *
         * @return boolean
         */
        public function is_version_in_db_less_than($version)
        {
        }
        /**
         * Returns true if this is a new install
         *
         * @return boolean
         */
        public function is_new_install()
        {
        }
        /**
         * Returns true if an update is required
         *
         * @return boolean
         */
        public function update_required()
        {
        }
        public function migrate_from_sp_events()
        {
        }
        public function migrate_from_sp_options()
        {
        }
        public function flush_rewrites()
        {
        }
        /**
         * Set the Capabilities for Events and Related Post Types.
         *
         * @since 5.1.1 - change method of calling set_capabilities.
         */
        public function set_capabilities()
        {
        }
        /**
         * Reset the $current_user global after capabilities have been changed
         *
         */
        public function reload_current_user()
        {
        }
        /**
         * Reset update flags. All updates past $this->reset_version will
         * run again on the next page load
         *
         */
        public function reset()
        {
        }
        /**
         * Make sure the tribeEnableViews option is always set
         *
         */
        public function set_enabled_views()
        {
        }
        /**
         * Bump the :30 min EOD cutoff option to the next full hour
         *
         */
        public function remove_30_min_eod_cutoffs()
        {
        }
        /**
         * Migrate the previous import mapping to the new naming and cleanup
         * the old.
         */
        public function migrate_import_option()
        {
        }
        /**
         * Update WordPress Custom Field Setting moved from Pro
         * only update setting if show|hide
         *
         * @since 4.6.23
         */
        public function migrate_wordpress_custom_field_option()
        {
        }
    }
    class Tribe__Events__API
    {
        public static $valid_venue_keys = ['Venue', 'Address', 'City', 'Province', 'State', 'StateProvince', 'Province', 'Zip', 'Phone'];
        public static $valid_organizer_keys = ['Organizer', 'Phone', 'Email', 'Website'];
        /**
         * Create a new event
         *
         * @param array $args The post args.
         *
         * @return int|WP_Error The created event ID or a WP_Error object if it fails.
         */
        public static function createEvent($args)
        {
        }
        /**
         * Update an existing event
         *
         * @param int   $event_id The event ID to update.
         * @param array $args     The post args.
         *
         * @return int|WP_Error The updated event ID or a WP_Error object if it fails.
         */
        public static function updateEvent($event_id, $args)
        {
        }
        /**
         * Delete an event - all instances if recurring
         *
         * @param int  $eventId      The Event ID to delete.
         * @param bool $force_delete Same as the WP parameter.
         *
         * @return mixed
         */
        public static function deleteEvent($eventId, $force_delete = \false)
        {
        }
        /**
         * Used by createEvent and updateEvent - saves all the various event meta
         *
         * @param int     $event_id The event ID we are modifying meta for.
         * @param array   $data     The meta fields we want saved.
         * @param WP_Post $event    The event post, itself.
         *
         * @return bool
         */
        public static function saveEventMeta($event_id, $data, $event = \null)
        {
        }
        /**
         * Determines if a meta value has been changed
         *
         * @param string $field Field to compare against
         * @param array $new New data
         * @param array $old Old post data
         *
         * @return boolean
         */
        public static function is_meta_value_changed($field, $new, $old)
        {
        }
        /**
         * Determines if a post value has been changed
         *
         * @param string $field Field to compare against
         * @param array $new New data
         * @param array $old WP_Post pre-update
         *
         * @return boolean
         */
        public static function is_post_value_changed($field, $new, $old)
        {
        }
        /**
         * given a set of meta data, prepare date data if it exists
         *
         * @param $data array Associative array of event meta data
         *
         * @return array|WP_Error
         */
        protected static function prepare_event_date_meta($event_id, $data)
        {
        }
        //end prepare_event_date_meta
        /**
         * Triggers an update of the cost meta data (min <-> max) for an event.
         *
         * This is primarily for internal use where an addon needs to update the cost meta
         * data for an event (but no other meta fields). To actually add to or modify the
         * range of cost values the tribe_events_event_costs filter hook should be
         * leveraged.
         *
         * @param $event_id
         */
        public static function update_event_cost($event_id)
        {
        }
        /**
         * @param int $event_id The event post ID
         * @param array $args An array of arguments supported by the `wp_get_object_terms` function.
         *
         * @since 4.5
         *
         * @see wp_get_object_terms()
         *
         * @return array An associative array of terms in the [ <taxonomy> => [ <term_1>, <term_2>, ...], ...] format.
         */
        public static function get_event_terms($event_id, array $args = [])
        {
        }
        /**
         * Saves the event organizer information passed via an event
         *
         * @param array   $data        The organizer data.
         * @param WP_Post $post        The post.
         * @param string  $post_status The intended post status.
         *
         * @return mixed
         */
        private static function saveEventOrganizer($data, $post = \null, $post_status = 'publish')
        {
        }
        /**
         * Saves the event venue information passed via an event
         *
         * @param array   $data        The venue data.
         * @param WP_Post $post        The venue object.
         * @param string  $post_status The intended post status.
         *
         * @return mixed.
         */
        private static function saveEventVenue($data, $post = \null, $post_status = 'publish')
        {
        }
        /**
         * Creates a new organizer
         *
         * @param array  $data        The organizer data.
         * @param string $post_status the intended post status.
         *
         * @return mixed
         */
        public static function createOrganizer($data, $post_status = 'publish')
        {
        }
        /**
         * Check to see if any organizer data set
         *
         * @param array $data the organizer data.
         *
         * @return bool If there is ANY organizer data set, return true.
         */
        private static function someOrganizerDataSet($data)
        {
        }
        /**
         * Deletes an organizer
         *
         * @param int  $organizer_id  The organizer ID to delete.
         * @param bool $force_delete Same as WP param.
         *
         */
        public static function deleteOrganizer($organizer_id, $force_delete = \false)
        {
        }
        /**
         * Updates an organizer
         *
         * @param int   $organizer_id The organizer ID to update.
         * @param array $data        The organizer data.
         *
         */
        public static function updateOrganizer($organizer_id, $data)
        {
        }
        /**
         * Saves organizer meta
         *
         * @param int   $organizer_id The organizer ID.
         * @param array $data        The organizer data.
         *
         */
        private static function saveOrganizerMeta($organizer_id, $data)
        {
        }
        /**
         * Creates a new venue
         *
         * @param array  $data        The venue data.
         * @param string $post_status the intended post status.
         *
         * @return mixed
         */
        public static function createVenue($data, $post_status = 'publish')
        {
        }
        /**
         * Check to see if any venue data set
         *
         * @param array $data the venue data.
         *
         * @return bool If there is ANY venue data set, return true.
         */
        private static function someVenueDataSet($data)
        {
        }
        /**
         * Updates an venue
         *
         * @param int   $venue_id The venue ID to update.
         * @param array $data    The venue data.
         *
         */
        public static function updateVenue($venue_id, $data)
        {
        }
        /**
         * Deletes a venue
         *
         * @param int  $venue_id      The venue ID to delete.
         * @param bool $force_delete Same as WP param.
         *
         */
        public static function deleteVenue($venue_id, $force_delete = \false)
        {
        }
        /**
         * Saves venue meta
         *
         * @param int   $venue_id The venue ID.
         * @param array $data    The venue data.
         *
         */
        private static function saveVenueMeta($venue_id, $data)
        {
        }
        /**
         * Gets all post meta and flattens it out a bit
         *
         * @param int $event_id Post ID for event
         *
         * @return array
         */
        public static function get_and_flatten_event_meta($event_id)
        {
        }
        /**
         * Sanitize the arguments array before sending to create/update an event post.
         *
         * Use this prior to sending arguments to post create/update function.
         *
         * @since 4.6.20
         *
         * @see Tribe__Events__API::sanitize_meridian_meta_value
         * @see Tribe__Events__API::sanitize_hour_meta_value
         * @see Tribe__Events__API::sanitize_minute_meta_value
         *
         * @param array $args The arguments sent to create/update an event post.
         *
         * @return array|WP_Error
         */
        public static function sanitize_event_post_create_update_args($args)
        {
        }
        /**
         * Sanitize a string to be used as an event meridian post meta value: am|pm.
         *
         * Use this prior to sending value to the database.
         *
         * @since 4.6.20
         *
         * @param string $value            The post meta value to be checked, such as 'am'.
         * @param bool   $empty_if_invalid If true, set an invalid value to an empty string, else generate WP_Error.
         *
         * @return string|WP_Error
         */
        public static function sanitize_meridian_meta_value($value, $empty_if_invalid = \true)
        {
        }
        /**
         * Sanitize a string to be used as an event hour post meta value: 1-12 if `Event{Start|End}Meridian`
         * is also passed, else 0-23.
         *
         * Use this prior to sending value to the database.
         *
         * @since 4.6.20
         *
         * @param string $value       The post meta value to be checked, such as '07'.
         * @param bool   $twelve_hour If false, allow 0-23. If true, only allow 1-12.
         *
         * @return string|WP_Error
         */
        public static function sanitize_hour_meta_value($value, $twelve_hour = \false)
        {
        }
        /**
         * Sanitize a string to be used as an event minute post meta value: 0-59.
         *
         * Use this prior to sending value to the database.
         *
         * @since 4.6.20
         *
         * @param string $value The post meta value to be checked, such as '30'.
         *
         * @return string|WP_Error
         */
        public static function sanitize_minute_meta_value($value)
        {
        }
    }
    /**
     * Class Tribe__Events__Revisions__Preview
     */
    class Tribe__Events__Revisions__Preview
    {
        /**
         * @var static
         */
        protected static $instance;
        /**
         * @var int
         */
        protected $event_id;
        /**
         * @var WP_Post
         */
        protected $latest_revision;
        /**
         * The class singleton constructor.
         *
         * @return Tribe__Events__Revisions__Preview
         */
        public static function instance()
        {
        }
        /**
         * Conditionally hooks the filters needed to fetch a revision meta data.
         */
        public function hook()
        {
        }
        /**
         * Intercepts a meta value request for a revision
         *
         * Returns the revision associated meta if present or the original event meta otherwise.
         *
         * @param mixed $original_value
         * @param int $object_id
         * @param string $meta_key
         * @param bool $single
         *
         * @return mixed
         */
        public function intercept_post_metadata($original_value, $object_id, $meta_key, $single)
        {
        }
        /**
         * @return bool
         */
        protected function is_saving_preview()
        {
        }
        /**
         * @return bool
         */
        protected function is_previewing()
        {
        }
        /**
         * @return int
         */
        protected function get_event_id()
        {
        }
    }
    /**
     * Class Tribe__Events__Revisions__Post
     *
     * Handles the saving operations of a generic post revision.
     *
     * @since 4.2.5
     */
    class Tribe__Events__Revisions__Post
    {
        /**
         * @var WP_Post
         */
        protected $post;
        /**
         * Tribe__Events__Revisions__Post constructor.
         *
         * @param WP_Post $post
         */
        public function __construct(\WP_Post $post)
        {
        }
        /**
         * @param int|WP_Post $post
         *
         * @return Tribe__Events__Revisions__Post
         */
        public static function new_from_post($post)
        {
        }
        /**
         * Saves the revision.
         */
        public function save()
        {
        }
    }
    /**
     * Class Tribe__Events__Revisions__Event
     *
     * Handles the saving operations of an event revision.
     *
     * @since 4.2.5
     */
    class Tribe__Events__Revisions__Event extends \Tribe__Events__Revisions__Post
    {
        /**
         * @var Tribe__Events__Meta__Save
         */
        protected $meta_save;
        /**
         * Tribe__Events__Revisions__Event constructor.
         *
         * @param Tribe__Events__Meta__Save|null $meta_save
         */
        public function __construct(\WP_Post $post, \Tribe__Events__Meta__Save $meta_save = \null)
        {
        }
        /**
         * Saves the revision.
         */
        public function save()
        {
        }
    }
    class Tribe__Events__Query
    {
        /**
         * @since 4.9.4
         *
         * @var array The WP_Query arguments used in the last `getEvents` method
         *            query.
         */
        protected static $last_result = [];
        /**
         * Initialize The Events Calendar query filters and post processing.
         */
        public static function init()
        {
        }
        /**
         * determines whether a date field can be injected into various parts of a query
         *
         * @param $query WP_Query Query object
         *
         * @return boolean
         */
        public static function can_inject_date_field($query)
        {
        }
        /**
         * Set any query flags
         *
         * @param WP_Query $query
         */
        public static function parse_query($query)
        {
        }
        /**
         * Is hooked by init() filter to parse the WP_Query arguments for main and alt queries.
         *
         * @param object $query WP_Query object args supplied or default
         *
         * @return object $query (modified)
         */
        public static function pre_get_posts($query)
        {
        }
        /**
         * Return a false ID when the SQL query is being constructed to avoid create a false positive with a page and
         * add the virtual ID to the SQL query. Once this one has been added we need to remove the filter as is no
         * longer required or used.
         *
         * This is done after we have results of the posts so the filter can be safely removed at this stage.
         *
         * @since 4.6.15
         *
         * @param $posts
         *
         * @return mixed
         */
        public static function posts_results($posts)
        {
        }
        /**
         * Returns whether or not the event date & upcoming filters should be removed from the query
         *
         * @since 4.0
         * @param WP_Query $query WP_Query object
         * @return boolean
         */
        public static function should_remove_date_filters($query)
        {
        }
        /**
         * Adds DISTINCT to the query.
         *
         * @param string $distinct The current DISTINCT statement.
         *
         * @return string The modified DISTINCT statement.
         */
        public static function posts_distinct($distinct)
        {
        }
        /**
         * Adds the proper fields to the FIELDS statement in the query.
         *
         * @param string   $field_sql The current/original FIELDS statement.
         * @param WP_Query $query     The current query object.
         *
         * @return string The modified FIELDS statement.
         */
        public static function posts_fields($field_sql, $query)
        {
        }
        /**
         * Adds the proper fields to the FIELDS statement in the query.
         *
         * @param string   $field_sql The current/original FIELDS statement.
         * @param WP_Query $query     The current query object.
         *
         * @return string The modified FIELDS statement.
         */
        public static function multi_type_posts_fields($field_sql, $query)
        {
        }
        /**
         * Custom SQL join for event end date
         *
         * @param string   $join_sql
         * @param wp_query $query
         *
         * @return string
         */
        public static function posts_join($join_sql, $query)
        {
        }
        /**
         * Custom SQL conditional for event duration meta field
         *
         * @param string   $where_sql
         * @param WP_Query $query
         *
         * @return string
         */
        public static function posts_where($where_sql, $query)
        {
        }
        /**
         * Internal method for properly setting a curated orderby value to $wp_query
         * Internal method for properly setting a currated orderby value to $wp_query.
         *
         * If optional param $default is not provided it will default to 'event_date' - unless a custom
         * orderby param was specified (via tribe_get_events() for example) - in which case that value
         * will be used.
         *
         * @param string   $default
         * @param WP_Query $query
         *
         * @return string
         */
        public static function set_orderby($default = \null, $query = \null)
        {
        }
        /**
         * Internal method for properly setting a currated order value to $wp_query.
         *
         * If optional param $default is not provided it will default to 'ASC' - unless a custom order
         * was specified (via tribe_get_events() for example) - in which case that value will be used.
         *
         * @param string   $default
         * @param WP_Query $query
         *
         * @return string
         */
        public static function set_order($default = \null, $query = \null)
        {
        }
        /**
         * Custom SQL order by statement for Event Start Date result order.
         *
         * @param string   $order_sql
         * @param wp_query $query
         *
         * @return string
         */
        public static function posts_orderby($order_sql, $query)
        {
        }
        /**
         * Adds a custom SQL join when ordering by venue or organizer is desired.
         *
         * @param string   $join_sql
         * @param wp_query $query
         *
         * @return string
         */
        public static function posts_join_venue_organizer($join_sql, $query)
        {
        }
        /**
         * Appends the necessary conditions to the order clause to sort by either venue or
         * organizer.
         *
         * @param  array    $clauses
         * @param  WP_Query $query
         * @return string
         */
        public static function posts_orderby_venue_organizer(array $clauses, $query)
        {
        }
        /**
         * Custom SQL to retrieve post_id list of events marked to be hidden from upcoming lists.
         *
         * @return array
         */
        public static function getHideFromUpcomingEvents()
        {
        }
        /**
         * Gets the event counts for individual days.
         *
         * @param array $args
         *
         * @return array The counts array.
         */
        public static function getEventCounts($args = [])
        {
        }
        /**
         * Customized WP_Query wrapper to setup event queries with default arguments.
         *
         * @param array $args {
         *      Optional. Array of Query parameters.
         *
         *      @type bool $found_posts Return the number of found events.
         * }
         * @param bool  $full Whether the full WP_Query object should returned (`true`) or just the
         *                    found posts (`false`)
         *
         * @return array|WP_Query
         */
        public static function getEvents($args = [], $full = \false)
        {
        }
        /**
         * Determine what postmeta table should be used,
         * to avoid conflicts with previous postmeta joins
         *
         * @return string
         **/
        private static function postmeta_table($query)
        {
        }
        /**
         * Remove empty values from the query args
         *
         * @param mixed $arg
         *
         * @return bool
         **/
        private static function filter_args($arg)
        {
        }
        /**
         * If the user has the Main events page set on the reading options it should return 0 or the default value in
         * order to avoid to set the:
         * - p
         * - page_id
         *
         * variables when using  pre_get_posts or posts_where
         *
         * This filter is removed when this funtions has finished the execution
         *
         * @since 4.6.15
         *
         * @param $value
         *
         * @return int
         */
        public static function default_page_on_front($value)
        {
        }
        /**
         * Reruns the last query used to `getEvents` to fetch
         * all the found IDs.
         *
         * Pagination is ignored; this methods provides a way to
         * not only count the found posts but to get their ID too.
         *
         * @since 4.9.4
         *
         * @return array
         */
        public static function last_found_events()
        {
        }
    }
    class Tribe__Events__Aggregator
    {
        /**
         * Cache key used to storage the services list returned by the call to:
         * - Tribe__Events__Aggregator__Service::instance()->get_origins();
         *
         * @since 4.6.12
         */
        public $KEY_CACHE_SERVICES = 'tribe_aggregator_services_list';
        /**
         * @var Tribe__Events__Aggregator__Meta_Box Event Aggregator Meta Box object
         */
        public $meta_box;
        /**
         * @var Tribe__Events__Aggregator__Page Event Aggregator page root object
         */
        public $page;
        /**
         * @var Tribe__Events__Aggregator__Service Event Aggregator service object
         */
        public $service;
        /**
         * @var Tribe__Events__Aggregator__Record__Queue_Processor Event Aggregator record queue processor
         */
        public $queue_processor;
        /**
         * @var Tribe__Events__Aggregator__Record__Queue_Realtime Event Aggregator record queue processor in realtime
         */
        public $queue_realtime;
        /**
         * @var Tribe__Events__Aggregator__Settings Event Aggregator settings object
         */
        public $settings;
        /**
         * @var Tribe__PUE__Checker PUE Checker object
         */
        public $pue_checker;
        /**
         * @var array Collection of API objects
         */
        protected $api;
        /**
         * People who modify this value are not nice people.
         *
         * @var int Maximum number of import requests per day
         */
        private $daily_limit = 100;
        /**
         * A variable holder if Aggregator is loaded
         * @var boolean
         */
        private $is_loaded = \false;
        /**
         * Static Singleton Factory Method
         *
         * @return Tribe__Events__Aggregator
         */
        public static function instance()
        {
        }
        /**
         * Add Event Aggregator System Status to the Help page
         */
        public function add_status_to_help()
        {
        }
        /**
         * Set up any necessary notices
         */
        public function setup_notices()
        {
        }
        /**
         * Initializes and provides the API objects
         *
         * @param string $api Which API to provide
         *
         * @return Tribe__Events__Aggregator__API__Abstract|stdClass|null
         */
        public function api($api = \null)
        {
        }
        /**
         * Creates the Required Endpoint for the Aggregator Service to Query
         *
         * @param array $query_vars
         *
         * @return void
         */
        public function action_endpoint_configuration($rewrite)
        {
        }
        /**
         * Adds the required Query Vars for the Aggregator Endpoint to work
         *
         * @param array $query_vars
         *
         * @return array
         */
        public function filter_endpoint_query_vars($query_vars = [])
        {
        }
        /**
         * Allows the API to call the website
         *
         * @param  WP    $wp
         *
         * @return void
         */
        public function action_endpoint_parse_request($wp)
        {
        }
        /**
         * Handles the filtering of the PUE "plugin name" for event aggregator which...isn't a plugin
         *
         * @param string $plugin_name Plugin name to filter
         * @param string $plugin_slug Plugin slug
         *
         * @return string
         */
        public function filter_pue_plugin_name($plugin_name, $plugin_slug)
        {
        }
        /**
         * Filters the list of post types for Event Tickets to remove Import Records
         *
         * @param array $post_types Post Types
         *
         * @return array
         */
        public function filter_remove_record_post_type($post_types)
        {
        }
        /**
         * Purges the aggregator transients that are tied to the event-aggregator license
         *
         * @param string $option Option key
         *
         * @return boolean
         */
        public function action_purge_transients($option)
        {
        }
        /**
         * Verify if Aggregator was fully loaded and is active
         *
         * @param  boolean $service  Should compare if the service is also active
         *
         * @return boolean
         */
        public function is_active($service = \false)
        {
        }
        /**
         * Verifies if the service is active
         *
         * @return boolean
         */
        public static function is_service_active()
        {
        }
        /**
         * Verifies if user has a license key
         *
         * @return boolean
         *
         * @since 4.6.19
         */
        public function has_license_key()
        {
        }
        /**
         * Returns the daily import limit
         *
         * @return int
         */
        public function get_daily_limit()
        {
        }
        /**
         * Returns the available daily limit of import requests
         *
         * @return int
         */
        public function get_daily_limit_available()
        {
        }
        /**
         * Reduces the daily limit by the provided amount
         *
         * @param int $amount Amount to reduce the daily limit by
         *
         * @return bool
         */
        public function reduce_daily_limit($amount = 1)
        {
        }
        /**
         * Generates the current daily transient key
         */
        private function daily_limit_transient_key()
        {
        }
        /**
         * Tells whether the legacy ical plugin is active
         *
         * @return boolean
         */
        public function is_legacy_ical_active()
        {
        }
        /**
         * Tells whether the legacy facebook plugin is active
         *
         * @return boolean
         */
        public function is_legacy_facebook_active()
        {
        }
        /**
         * Loads and initializes Events Aggregator.
         *
         * Will set the `is_loaded` flag property if successfully loaded.
         *
         * @return bool Whether Events Aggregator successfully loaded or not.
         */
        public function load()
        {
        }
        /**
         * Adds support for CSV's multiple mime types
         *
         * WordPress mime support requires a one to one mapping of an extension to a type, but CSV can come in multiple types
         *
         * @param  array $mimes supported mime types
         * @return array        mime types with expanded support
         */
        public function add_csv_mimes($info, $file, $filename, $mimes)
        {
        }
        /**
         * Adds the Items for Aggregator on the Admin bar
         *
         * @since   4.5.12
         *
         * @return  void
         */
        public function add_admin_bar_items()
        {
        }
        /**
         * Hooks all the filters and actions needed for Events Aggregator to work.
         *
         * No action or filter will be loaded if Events Aggregator has not loaded first.
         *
         * @return bool `true` if the hooks and filters were added, `false` otherwise.
         */
        public function hook()
        {
        }
        /**
         * Function used to remove cache stored in transients.
         *
         * @since 4.6.12
         *
         * @return boolean
         */
        public function clear_services_list_cache()
        {
        }
        public function notice_facebook_oauth_feedback()
        {
        }
        public function notice_facebook_token_expired()
        {
        }
    }
    /**
     *  Class that implements the export to iCal functionality
     *  both for list and single events
     */
    class Tribe__Events__iCal
    {
        /**
         * @var int The number of events that will be exported when generating the iCal feed.
         */
        protected $feed_default_export_count = 30;
        /**
         * The $post where the *.ics file is generated
         *
         * @since 4.9.4
         *
         * @var null
         */
        protected $post = \null;
        /**
         * An array with all the events that are part of the *.ics file
         *
         * @since 4.9.4
         *
         * @var array
         */
        protected $events = [];
        /**
         * Set all the filters and actions necessary for the operation of the iCal generator.
         */
        public function hook()
        {
        }
        /**
         * outputs a <link> element for the ical feed
         */
        public function set_feed_link()
        {
        }
        /**
         * Returns the url for the iCal generator for lists of posts.
         *
         * @param string $type The type of iCal link to return, defaults to 'home'.
         *
         * @return string
         */
        public function get_ical_link($type = 'home')
        {
        }
        /**
         * Make sure when we grab a month link it includes the correct month.
         *
         * @param string $event_date Date of the month we are getting the link for.
         *
         * @return string The iCal export URL for the Month view.
         */
        public function month_view_ical_link($event_date = \null)
        {
        }
        /**
         * Make sure ical link has the date in the URL instead of "today" on day view
         *
         * @param $link
         *
         * @return string
         */
        public function day_view_ical_link($link)
        {
        }
        /**
         * Generates the markup for iCal and gCal single event links
         **/
        public function single_event_links()
        {
        }
        /**
         * Generates the markup for the "iCal Import" link for the views.
         */
        public function maybe_add_link()
        {
        }
        /**
         * Executes the iCal generator when the appropriate query_var or $_GET is setup.
         */
        public function do_ical_template()
        {
        }
        /**
         * Generates the iCal file
         *
         * @param int|null $post If you want the ical file for a single event
         * @param boolean  $echo Whether the content should be echoed or returned
         *
         * @return string
         */
        public function generate_ical_feed($post = \null, $echo = \true)
        {
        }
        /**
         * Get an array with all the Events to be used to process the *.ics file
         *
         * @since 4.9.4
         *
         * @return array|null
         */
        protected function get_event_posts()
        {
        }
        /**
         * Gets all events in the current month, matching those presented in month view
         * by default (and therefore potentially including some events from the tail end
         * of the previous month and start of the following month).
         *
         * We build a fresh 'custom'-type query here rather than taking advantage of the
         * main query since page spoofing can render the actual query and results
         * inaccessible (and it cannot be recovered via a query reset).
         *
         * @return array events in the month
         */
        private function get_month_view_events()
        {
        }
        /**
         * Set the headers before the file is delivered.
         *
         * @since 4.9.4
         */
        protected function set_headers()
        {
        }
        /**
         * Get the file name of the *.ics file
         *
         * @since 4.9.4
         *
         * @return mixed The calendar name
         */
        protected function get_file_name()
        {
        }
        /**
         * Get the full content of the *.ics file.
         *
         * @since 4.9.4
         *
         * @return string
         */
        protected function get_content()
        {
        }
        /**
         * Get the start of the .ics File
         *
         * @since 4.9.4
         *
         * @return mixed
         */
        protected function get_start()
        {
        }
        /**
         * Add the VTIMEZONE group to the file
         *
         * @since 4.9.4
         *
         * @param array $events
         *
         * @return string
         */
        protected function get_timezones($events = [])
        {
        }
        /**
         * Create an array of arrays with unique Timezones for all the events, every timezone has
         * the following fields:
         *
         * - timezone. The Timezone Object
         * - events. List with all the events
         *
         * @since 4.9.4
         *
         * @param $events array An array with all the events to parse the timezones.
         *
         * @return array
         */
        protected function parse_timezones($events)
        {
        }
        /**
         * Format the offset into Hours and minutes from seconds.
         *
         * @since 4.9.4
         *
         * @param $offset
         *
         * @return string
         */
        protected function format_offset($offset)
        {
        }
        /**
         * Get the Body With all the events of the .ics file
         *
         * @since 4.9.4
         * @since5.1.6 - Utilize get_ical_output_for_an_event() to get the iCal output.
         *
         * @param array $posts
         *
         * @return string
         */
        protected function get_body($posts = [])
        {
        }
        /**
         * Get the iCal Output for the provided event object.
         *
         * @since5.1.6
         *
         * @param \WP_Post             $event_post The event post object.
         * @param \Tribe__Events__Main $tec        An instance of the main TEC Class.
         *
         * @return array  An array of iCal output fields.
         */
        public function get_ical_output_for_an_event($event_post, \Tribe__Events__Main $tec)
        {
        }
        /**
         * Replace the text and encode the text before doing the replacement.
         *
         * @since 4.9.4
         *
         * @param string $text The text to be replaced.
         * @param array  $search What elements to search to replace.
         * @param array  $replacement New values used to replace.
         *
         * @return mixed
         */
        protected function replace($text = '', $search = [], $replacement = [])
        {
        }
        /**
         * Apply html_entity_decode on a string using ENT_QUOTES style
         *
         * @since 4.9.4
         *
         * @param string $text
         *
         * @return string
         */
        protected function html_decode($text = '')
        {
        }
        /**
         * Return the timezone name associated with the event
         *
         * @since 4.9.4
         *
         * @param $event \WP_Post The $event post
         *
         * @return string
         */
        protected function get_timezone($event)
        {
        }
        /**
         * Return the end of the .ics file
         *
         * @since 4.9.4
         *
         * @return string
         */
        protected function get_end()
        {
        }
        /**
         * Get a list of events, the function make sure it uses the default values used on the main events page
         * so if is called from a different location like a page or post (shortcode) it will retain the original values
         * to generate the events feed.
         *
         * @since 4.6.11
         *
         * @param array $args The WP_Query arguments.
         * @param mixed $query A WP_Query object or null if none.
         * @return array
         */
        protected function get_events_list($args = [], $query = \null)
        {
        }
        /**
         * Get the number of posts per page to be used on the feed of the iCal, make sure it passes the value via the filter
         * tribe_ical_feed_posts_per_page and validates the number is greater than 0.
         *
         * @since 4.6.11
         *
         * @return int
         */
        public function feed_posts_per_page()
        {
        }
        /**
         * Gets the number of events that should be exported when generating the iCal feed.
         *
         * @return int
         */
        public function get_feed_default_export_count()
        {
        }
        /**
         * Sets the number of events that should be exported when generating the iCal feed.
         *
         * @param int $count
         */
        public function set_feed_default_export_count($count)
        {
        }
    }
}
namespace Tribe\Events\Collections {
    /**
     * Class Lazy_Post_Collection
     *
     * @since   5.0.0
     *
     * @package Tribe\Events\Collections
     */
    class Lazy_Post_Collection extends \Tribe\Utils\Lazy_Collection
    {
        /**
         * The callback function that should be called to rebuild the collection items from an array of post IDs.
         *
         * @since 5.0.0
         *
         * @var callable|string
         */
        protected $unserialize_callback;
        /**
         * Lazy_Post_Collection constructor.
         *
         * @since 5.0.0
         *
         * @param callable $callback             The callback that should be used to fetch the collection items.
         * @param string   $unserialize_callback The callback that should be used to rebuild the collection items from the
         *                                       serialized post IDs.
         */
        public function __construct(callable $callback, $unserialize_callback = 'get_post')
        {
        }
        /**
         * Plucks the post IDs from the collection items before serialization.
         *
         * While serializing a post object w/ added properties will not generate any error during serialization, doing the
         * same during unserialization will yield a `false` result.
         * To avoid dealing with the lower level details of how the post object is built or decorated, here we extract
         * the post IDs to only store those.
         *
         * @since 5.0.0
         *
         * @param array<\WP_Post> $items The posts part of this collection.
         *
         * @return array The collection post IDs and callback.
         *
         * @see   Lazy_Post_Collection::custom_unserialize() for the other part of the post handling.
         */
        protected function before_serialize(array $items)
        {
        }
        /**
         * Custom handling of the lazy collection unserialization, this method will build complete post objects from
         * the serialized post IDs.
         *
         * @since 5.0.0
         *
         * @param string $serialized The serialized values, usually an array of post IDs.
         *
         * @return array<\WP_Post>|null Either the rebuilt collection, or `null` if the serialized string cannot be
         *                             unserialized.
         */
        protected function custom_unserialize($serialized)
        {
        }
    }
}
namespace Tribe\Events\Views\V2 {
    /**
     * Class Hooks
     *
     * @since 4.9.2
     *
     * @package Tribe\Events\Views\V2
     */
    class Hooks extends \tad_DI52_ServiceProvider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 4.9.2
         */
        public function register()
        {
        }
        /**
         * Adds the actions required by each Views v2 component.
         *
         * @since 4.9.2
         */
        protected function add_actions()
        {
        }
        /**
         * Adds the filters required by each Views v2 component.
         *
         * @since 4.9.2
         */
        protected function add_filters()
        {
        }
        /**
         * Includes includes edge cases for filtering when we need to manually overwrite theme's read
         * more link when excerpt is cut programmatically.
         *
         * @see   tribe_events_get_the_excerpt
         *
         * @since 4.9.11
         *
         * @return void
         */
        public function action_include_filters_excerpt()
        {
        }
        /**
         * Fires to deregister v1 assets correctly.
         *
         * @since 4.9.11
         *
         * @return void
         */
        public function action_disable_assets_v1()
        {
        }
        /**
         * Fires to deregister v1 assets correctly for shortcodes.
         *
         * @since 4.9.11
         *
         * @return void
         */
        public function action_disable_shortcode_assets_v1()
        {
        }
        /**
         * Fires when common is loaded.
         *
         * @since 4.9.2
         */
        public function on_tribe_common_loaded()
        {
        }
        /**
         * Fires when WordPress head is printed.
         *
         * @since 4.9.2
         */
        public function on_wp_head()
        {
        }
        /**
         * Fires when Tribe rewrite rules are processed.
         *
         * @since 4.9.2
         *
         * @param  \Tribe__Events__Rewrite  $rewrite  An instance of the Tribe rewrite abstraction.
         */
        public function on_tribe_events_pre_rewrite(\Tribe__Rewrite $rewrite)
        {
        }
        /**
         * Filters the template included file.
         *
         * @since 4.9.2
         *
         * @param  string  $template  The template included file, as found by WordPress.
         *
         * @return string The template file to include, depending on the query and settings.
         */
        public function filter_template_include($template)
        {
        }
        /**
         * Registers the REST endpoints that will be used to return the Views HTML.
         *
         * @since 4.9.2
         */
        public function register_rest_endpoints()
        {
        }
        /**
         * Filters the posts before the query runs but after its SQL and arguments are finalized to
         * inject posts in it, if needed.
         *
         * @since 4.9.2
         *
         * @param  null|array  $posts The posts to filter, a `null` value by default or an array if set by other methods.
         * @param  \WP_Query|null  $query The query object to (maybe) control and whose posts will be populated.
         *
         * @return array An array of injected posts, or the original array of posts if no post injection is required.
         */
        public function filter_posts_pre_query($posts = null, \WP_Query $query = null)
        {
        }
        /**
         * Filters the publicly available query variables to add the ones supported by Views v2.
         *
         * To keep back-compatibility with v1 we're registering the same query vars making this method
         * a copy of the original `Tribe__Events__Main::eventQueryVars` one.
         *
         * @since 4.9.2
         *
         * @param  array  $query_vars  The list of publicly available query variables.
         *
         * @return array The filtered list of publicly available query variables.
         */
        public function filter_query_vars(array $query_vars = [])
        {
        }
        /**
         * Include the The Events calendar mapping for query args, into to canonical url.
         *
         * @since 4.9.5
         *
         * @param array          $map  Associative array following the format: `[ 'eventDate' => [ 'event-date', 'event_date', 'tribe-bar-date' ], ]`.
         * @param string         $url  The input URL to resolve to a canonical one.
         * @param Tribe__Rewrite $this This rewrite object.
         *
         * @return  array
         */
        public function filter_map_canonical_query_args($map, $url, $rewrite)
        {
        }
        /**
         * Filters the body classes to add theme compatibility ones.
         *
         * @since 4.9.3
         *
         * @param  array $classes Classes that are been passed to the body.
         *
         * @return array $classes
         */
        public function filter_body_classes($classes)
        {
        }
        /**
         * Add body classes.
         *
         * @since 5.1.5
         *
         * @return void
         */
        public function add_body_classes()
        {
        }
        /**
         * Contains hooks to the logic for if this object's classes should be added to the queue.
         *
         * @since 5.1.5
         *
         * @param boolean $add   Whether to add the class to the queue or not.
         * @param array   $class The array of body class names to add.
         * @param string  $queue The queue we want to get 'admin', 'display', 'all'.
         * @return boolean
         */
        public function body_class_should_add_to_queue($add, $class, $queue)
        {
        }
        /**
         * Logic for if body classes should be added.
         *
         * @since 5.1.5
         *
         * @param boolean $add   Whether to add classes or not.
         * @param string  $queue The queue we want to get 'admin', 'display', 'all'.
         *
         * @return boolean Whether to add classes or not.
         */
        public function body_classes_should_add($add, $queue)
        {
        }
        /**
         * Filter the plural events label for Featured V2 Views.
         *
         * @since 5.1.5
         *
         * @param string  $label   The plural events label as it's been generated thus far.
         * @param Context $context The context used to build the title, it could be the global one, or one externally
         *                         set.
         *
         * @return string the original label or updated label for virtual archives.
         */
        public function filter_wp_title_plural_events_label($label, \Tribe__Context $context)
        {
        }
        /**
         * Filters the `wp_title` template tag.
         *
         * @since 4.9.10
         *
         * @param      string $title The current title value.
         * @param string|null $sep The separator char, or sequence, to use to separate the page title from the blog one.
         *
         * @return string The modified page title, if required.
         */
        public function filter_wp_title($title, $sep = null)
        {
        }
        /**
         * Filters the `pre_get_document_title` to prevent conflicts when other plugins
         * modify this initial value on our pages.
         *
         * @since 5.0.0
         *
         * @param string $title The current title value.
         *
         * @return string The current title or empty string.
         */
        public function pre_get_document_title($title)
        {
        }
        /**
         * Filters the `wp_get_document_title` template tag.
         *
         * This is the template tag introduced in WP 4.4 to get the page title.
         *
         * @since 4.9.10
         *
         * @param string $title The page title.
         *
         * @return string The modified page title, if required.
         */
        public function filter_document_title_parts($title)
        {
        }
        /**
         * Filters the `excerpt_length`.
         *
         * @since 4.9.10
         *
         * @param int $length The excerpt length.
         *
         * @return int The modified excerpt length, if required.
         */
        public function filter_excerpt_length($length)
        {
        }
        /**
         * Filters the `excerpt_more`.
         *
         * @since 4.9.10
         *
         * @param string $link The excerpt read more link.
         *
         * @return string The modified excerpt read more link, if required.
         */
        public function filter_excerpt_more($link)
        {
        }
        /**
         * Filters the `admin_post_thumbnail_html` to add image aspect ratio recommendation.
         *
         * @since 4.9.11
         *
         * @param string $html The HTML for the featured image box.
         *
         * @return string The modified html, if required.
         */
        public function filter_admin_post_thumbnail_html($html)
        {
        }
        /**
         * Filters the `redirect_canonical` to prevent any redirects on embed URLs.
         *
         * @since 4.9.13
         *
         * @param mixed      $redirect_url URL which we will redirect to.
         * @param string|int $original_url The original URL if this method runs on the `redirect_canonical` filter, else
         *                                 the redirect status (e.g. `301`) if this method runs in the context of the
         *                                 `wp_redirect` filter.
         *
         * @return string A redirection URL, or `false` to prevent redirection.
         */
        public function filter_redirect_canonical($redirect_url = null, $original_url = null)
        {
        }
        /**
         * Modifies the Live update tooltip properly.
         *
         * @since  4.9.13
         *
         * @param  array $fields  Fields that were passed for the Settings tab.
         *
         * @return array          Fields after changing the tooltip.
         */
        public function filter_general_settings_tab_live_update($fields)
        {
        }
        /**
         * Registers The Events Calendar with the views/overrides update checker.
         *
         * @since  4.9.13
         *
         * @param array $plugins List of plugins to be checked.
         *
         * @return array
         */
        public function filter_register_template_updates(array $plugins = [])
        {
        }
        /**
         * Suppress v1 query filters on a per-query basis, if required.
         *
         * @since 4.9.11
         *
         * @param \WP_Query $query The current WordPress query object.
         */
        public function parse_query($query)
        {
        }
        /**
         * Adds the period repository to the map of available repositories.
         *
         * @since 4.9.13
         *
         * @param array $repository_map The current repository map.
         *
         * @return array The filtered repository map.
         */
        public function add_period_repository(array $repository_map, $repository, array $args = [])
        {
        }
        /**
         * Flush rewrite rules after the site language setting changes.
         *
         * @since 4.9.13
         *
         * @param string $option The option name that was updated.
         * @param string $old    The option old value.
         * @param string $new    The option updated value.
         */
        public function action_save_wplang($option, $old, $new)
        {
        }
        /**
         * Filters rewrite rules to modify and update them for Views V2.
         *
         * @since 5.0.0
         *
         * @param array  $bases  An array of rewrite bases that have been generated.
         * @param string $method The method that's being used to generate the bases; defaults to `regex`.
         *
         * @return array<string,array> An array of rewrite rules. Modified, if required, to support Views V2.
         */
        public function filter_rewrite_i18n_slugs_raw($bases, $method)
        {
        }
        /**
         * Fires to manage sensitive information on password protected posts.
         *
         * @since 5.0.0
         *
         * @param \WP_Post|int $post The event post ID or object currently being decorated.
         */
        public function manage_sensitive_info($post)
        {
        }
        /**
         * Include the promo banner after the after component.
         *
         * @since 5.1.5
         *
         * @param string   $file     Complete path to include the PHP File.
         * @param array    $name     Template name.
         * @param Template $template Current instance of the Template.
         *
         * @return void  Template render has no return.
         */
        public function action_add_promo_banner($file, $name, $template)
        {
        }
        /**
         * Updates and modifies the properties added to the event post object by the `tribe_get_event` function to
         * hide some sensitive information, if required.
         *
         * @since 5.0.0
         *
         * @param \WP_Post $event The event post object, decorated w/ properties added by the `tribe_get_event` function.
         *
         * @return \WP_Post The event post object, decorated w/ properties added by the `tribe_get_event` function, some of
         *                  them updated to hide sensitive information, if required.
         */
        public function filter_events_properties($event)
        {
        }
        /**
         * Filter the template file in case we're in single event
         * and we need to use the theme overrides.
         *
         * @see   tribe_template_file
         *
         * @since 5.0.0
         *
         * @param string $file      Complete path to include the PHP File
         * @param array  $name      Template name
         * @param object $template  Instance of the Tribe__Template
         *
         * @return string
         */
        public function filter_template_file($file, $name, $template)
        {
        }
        /**
         * Filter the stylesheet option to do some switching for V2
         *
         * @since  5.0.2
         *
         * @param  string $value The option value.
         * @param  string $key   The option key.
         *
         * @return string Which value we are converting to.
         */
        public function filter_get_stylesheet_option($value, $key)
        {
        }
        /**
         * Filter the liveFiltersUpdate option to do some switching for V2.
         * Note: this triggers on option_liveFiltersUpdate, tribe_get_option, AND tribe_field_value. We
         * don't have to add/remove filters because we don't need to get the value - it's already provided.
         *
         * @since 5.0.3
         *
         * @param  string $value  The option value.
         * @param  string $key    The option key.
         *
         * @return string Converted value of the Live Filters string.
         */
        public function filter_live_filters_option_value($value, $key)
        {
        }
        /**
         * Converts old (boolean) values to the new string values.
         *
         * @since 5.0.3
         *
         * @param  mixed  $value The value to maybe convert.
         *
         * @return string Modified value of Live filters Update.
         */
        public function live_filters_maybe_convert($value)
        {
        }
        /**
         * Print Single Event JSON-LD.
         *
         * @since 5.0.3
         */
        public function print_single_json_ld()
        {
        }
        /**
         * Add views stylesheets to customizer styles array to check.
         * Remove unused legacy stylesheets.
         *
         * @since 5.1.1
         *
         * @param array<string> $sheets Array of sheets to search for.
         * @param string        $css_template String containing the inline css to add.
         *
         * @return array Modified array of sheets to search for.
         */
        public function customizer_inline_stylesheets($sheets, $css_template)
        {
        }
        /**
         * Changes the action the Customizer should use to try and print inline styles to print the inline
         * styles in the footer.
         *
         * @since 5.3.1
         *
         * @return string The action the Customizer should use to print inline styles.
         */
        public function print_inline_styles_in_footer()
        {
        }
        /**
         * Adds new Global Elements settings via the hook in common.
         *
         * @since 5.3.1
         *
         * @param \Tribe__Customizer__Section $section    The Global Elements Customizer section.
         * @param WP_Customize_Manager        $manager    The settings manager.
         * @param \Tribe__Customizer          $customizer The Customizer object.
         */
        public function action_include_global_elements_settings($section, $manager, $customizer)
        {
        }
        /**
         * Adds new Single Event settings via the hook in common.
         *
         * @since 5.3.1
         *
         * @param \Tribe__Customizer__Section $section    The Single Event Customizer section.
         * @param WP_Customize_Manager        $manager    The settings manager.
         * @param \Tribe__Customizer          $customizer The Customizer object.
         */
        public function action_include_single_event_settings($section, $manager, $customizer)
        {
        }
        /**
         * Filters the Global Elements section CSS template to add Views v2 related style templates to it.
         *
         * @since 5.3.1
         *
         * @param string                      $css_template The CSS template, as produced by the Global Elements.
         * @param \Tribe__Customizer__Section $section      The Global Elements section.
         * @param \Tribe__Customizer          $customizer   The current Customizer instance.
         *
         * @return string The filtered CSS template.
         */
        public function filter_global_elements_css_template($css_template, $section, $customizer)
        {
        }
        /**
         * Filters the Single Event section CSS template to add Views v2 related style templates to it.
         *
         * @since 5.3.1
         *
         * @param string                      $css_template The CSS template, as produced by the Global Elements.
         * @param \Tribe__Customizer__Section $section      The Single Event section.
         * @param \Tribe__Customizer          $customizer   The current Customizer instance.
         *
         * @return string The filtered CSS template.
         */
        public function filter_single_event_css_template($css_template, $section, $customizer)
        {
        }
        /**
         * Enqueues Customizer controls styles specific to Views v2 components.
         *
         * @since 5.4.0
         */
        public function enqueue_customizer_controls_styles()
        {
        }
        /**
         * Filter the website link label and change it for Single Event Classic Editor.
         * Use the following in functions.php to disable:
         * remove_filter( 'tribe_get_venue_website_link_label', [ tribe( 'events.views.v2.hooks' ), 'filter_single_event_details_website_label' ] );
         *
         * @since 5.5.0
         *
         * @param string     $label The filtered label.
         * @param null|string|int $post_id The current post ID.
         *
         * @return string
         */
        public function filter_single_event_details_event_website_label($label, $post_id = null)
        {
        }
        /**
         * Filter the website link label and change it for Single Event Classic Editor.
         * Use the following in functions.php to disable:
         * remove_filter( 'tribe_get_venue_website_link_label', [ tribe( 'events.views.v2.hooks' ), 'filter_single_event_details_venue_website_label' ] );
         *
         * @since 5.5.0
         *
         * @param string     $label The filtered label.
         * @param null|string|int $post_id The current post ID.
         *
         * @return string
         */
        public function filter_single_event_details_venue_website_label($label, $post_id = null)
        {
        }
        /**
         * Filter the website link label and change it for Single Event Classic Editor.
         * Use the following in functions.php to disable:
         * remove_filter( 'tribe_get_organizer_website_link_label', [ tribe( 'events.views.v2.hooks' ), 'filter_single_event_details_organizer_website_label' ] );
         *
         * @since 5.5.0
         *
         * @param string     $label The filtered label.
         * @param null|string|int $post_id The current post ID.
         *
         * @return string
         */
        public function filter_single_event_details_organizer_website_label($label, $post_id = null)
        {
        }
        /**
         * Sugar function for the above that determines if the labels should be filtered.
         *
         * @since 4.6.0
         *
         * @param null|string|int $post_id The current post ID.
         *
         * @return boolean
         */
        public function is_v1_or_blocks($post_id = null)
        {
        }
        /**
         * Overrides the default iCalendar export link logic to inject a list of event
         * post IDs fitting the Views V2 criteria.
         *
         * @since 4.6.0
         *
         * @param array<int>|false $event_ids Either a list of event post IDs that has been
         *                                    explicitly requested or `false` to indicate the
         *                                    iCalendar export link did not indicate a specific
         *                                    set of event post IDs.
         *
         * @return array<int> Either the original input value if a specific set of event post IDs
         *                    was requested as part of the iCalendar export link, or a filtered
         *                    set of event post IDs compiled depending on the current View context
         *                    and request arguments.
         */
        public function inject_ical_event_ids($event_ids = null)
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Interfaces {
    /**
     * Interface Url_Provider_Interface
     *
     * @since   4.9.3
     * @package Tribe\Events\Views\V2\Interfaces
     */
    interface View_Url_Provider_Interface
    {
        /**
         * Returns the URL associated to this View, if any.
         *
         * @since 4.9.3
         *
         * @param bool $canonical Whether to return the canonical version of the URL or the normal one.
         * @param bool $force Whether to force the re-fetch and ignore cached values or not.
         *
         * @return string The current URL associated to the view or an empty string if this View does not correspond to a
         *                URL.
         */
        public function get_url($canonical = false, $force = false);
        /**
         * Returns the URL associated to this View logical, next view.
         *
         * @since 4.9.3
         *
         * @param bool $canonical Whether to return the canonical version of the URL or the normal one.
         * @param array $passthru_vars An array of query arguments that will be passed thru intact, and appended to the URL.
         *
         * @return string The URL associated to this View logical, next view or an empty string if no next View exists.
         */
        public function next_url($canonical = false, array $passthru_vars = []);
        /**
         * Returns the URL associated to this View logical, previous view.
         *
         * @since 4.9.3
         *
         * @param bool $canonical Whether to return the canonical version of the URL or the normal one.
         * @param array $passthru_vars An array of query arguments that will be passed thru intact, and appended to the URL.
         *
         * @return string The URL associated to this View logical, next view or an empty string if no previous View exists.
         */
        public function prev_url($canonical = false, array $passthru_vars = []);
        /**
         * Returns the URL object used by the View, if any.
         *
         * @since 4.9.3
         *
         * @return \Tribe\Events\Views\V2\Url|null
         */
        public function get_url_object();
    }
    /**
     * Class Repository_User_Interface
     *
     * @since   4.9.3
     * @package Tribe\Events\Views\V2\Interfaces
     */
    interface Repository_User_Interface
    {
        /**
         * Sets the repository the instance should use.
         *
         * @since 4.9.3
         *
         * @param  Repository  $repository The repository object the instance should use or `null` to unset it.
         */
        public function set_repository(\Tribe__Repository__Interface $repository = null);
        /**
         * Returns the repository currently used by the instance, if any.
         *
         * @since 4.9.3
         *
         * @return Repository The repository instance used by the instance or `null` if the instance is not using a
         *                         repository.
         */
        public function get_repository();
        /**
         * Restores the loop variables by restoring the global query.
         *
         * @since 4.9.3
         */
        public function restore_the_loop();
    }
}
namespace Tribe\Events\Views\V2 {
    /**
     * Interface View_Interface
     *
     * @package Tribe\Events\Views\V2
     * @since   4.9.2
     */
    interface View_Interface extends \Tribe\Events\Views\V2\Interfaces\View_Url_Provider_Interface, \Tribe\Events\Views\V2\Interfaces\Repository_User_Interface
    {
        /**
         * Returns a View HTML code.
         *
         * @since 4.9.2
         *
         * @return string
         */
        public function get_html();
        /**
         * Returns a View label.
         *
         * @since  4.9.4
         *
         * @return string
         */
        public function get_label();
        /**
         * Returns if this view is publicly visible by default. Which will make it show up
         * on the events-bar of the views UI.
         *
         * @since 4.9.4
         * @since 4.9.11 Made the method static.
         *
         * @return bool
         */
        public static function is_publicly_visible();
        /**
         * Returns the context instance the view will render from.
         *
         * Views that have not been explicitly assigned a Context will use, and return here,
         * the global one.
         *
         * @since 4.9.2
         *
         * @return Context The View current Context instance or the global context if the view
         *                 has not been assigned a context.
         */
        public function get_context();
        /**
         * Sets, or unset, the View context.
         *
         * @since 4.9.2
         *
         * @param \Tribe__Context|null $context Either a context instance or null to make the View use the global one.
         */
        public function set_context(\Tribe__Context $context = null);
        /**
         * Sets the View slug, usually the one it was registered with in the `tribe_events_views` filter.
         *
         * @since 4.9.2
         *
         * @param string $slug The slug to set for the View instance.
         */
        public function set_slug($slug);
        /**
         * Returns a View slug, usually the one it was registered with in the `tribe_events_views` filter.
         *
         * @since 4.9.2
         *
         * @return string The view slug, usually the one it was registered with in the `tribe_events_views` filter.
         */
        public function get_slug();
        /**
         * Returns a View template path, usually a prefix for the template slug.
         *
         * @since 5.2.1
         *
         * @return string The view template path, usually a prefix for the template slug.
         */
        public function get_template_path();
        /**
         * Returns all the parent views that the current class as an array of slugs.
         *
         * @since 4.9.13
         *
         * @return string[] Array of string with the slugs of all the registered views.
         */
        public function get_parents_slug();
        /**
         * Returns all html classes for the view instance we are handling.
         *
         * @since 4.9.13
         *
         * @param array $classes  Array of classes that are going to be appended to this instance.
         *
         * @return string[]       Array of string with the classes used
         */
        public function get_html_classes(array $classes = []);
        /**
         * Returns a View template class.
         *
         * @since 4.9.2
         *
         * @return Template The template instance used by the View.
         */
        public function get_template();
        /**
         * Sets a view Template.
         *
         * @since 4.9.2
         *
         * @param Template $template The template instance the View should use.
         */
        public function set_template(\Tribe\Events\Views\V2\Template $template);
        /**
         * Sets up, by replacing the global query, the loop variables.
         *
         * The variables can be restored by using the `replace_the_loop` method.
         *
         * @since 4.9.3
         *
         * @param  array|null  $args An array of associative arguments used to setup the repository for the View.
         *
         */
        public function setup_the_loop(array $args = []);
        /**
         * Sets a View URL object either from some arguments or from the current URL.
         *
         * @since 4.9.3
         *
         * @param array|null $args   An associative array of arguments that will be mapped to the corresponding query
         *                           arguments by the View, or `null` to use the current URL.
         * @param bool       $merge  Whether to merge the arguments or override them.
         */
        public function set_url(array $args = null, $merge = false);
        /**
         * Returns the post IDs of the posts the View is displaying in the order it's displaying them.
         *
         * @since 4.9.4
         *
         * @return array An array of post IDs of the posts the view is currently displaying.
         */
        public function found_post_ids();
        /**
         * Returns the slug that should be used to find the View template.
         *
         * It's usually the same returned by the `View_Interface::get_slug` method but some Views might implement a
         * different logic (e.g. the `/all` view).
         *
         * @since 4.9.5
         *
         * @return string The slug that should be used to find the View template.
         */
        public function get_template_slug();
        /**
         * Sets the View template slug.
         *
         * @since 4.9.5
         *
         * @param string $slug The slug the View should use to locate its template.
         */
        public function set_template_slug($slug);
        /**
         * Returns the View template variables, as they would be set up and filtered before rendering the template.
         *
         * @since 4.9.7
         *
         * @return array An associative array of the View template variables.
         */
        public function get_template_vars();
        /**
         * Returns the URL to show the View for today.
         *
         * @since 4.9.8
         *
         * @param bool $canonical Whether to return the canonical, pretty, version of the URL or not; default to `false`.
         *
         * @return string
         */
        public function get_today_url($canonical = false);
        /**
         * Returns an array of user-facing messages the View will display on the front-end.
         *
         * @since 4.9.11
         *
         * @return array An array of user-facing messages the View will display on the front-end.
         */
        public function get_messages();
        /**
         * Returns the URL to get the View for a date and a set of arguments.
         *
         * @since 4.9.13
         *
         * @param string|int|\DateTimeInterface $date       The date to return the URL for.
         * @param array|string                  $query_args The query string or arguments to append to the URL.
         *
         * @return string The URL to fetch the View for a date.
         */
        public function url_for_query_args($date = null, $query_args = null);
        /**
         * Returns the Event post IDs the View would render in its template, but
         * filtered and formatted for iCalendar export.
         *
         * @since 4.6.0
         *
         * @param int $per_page The number of events per page to return.
         *
         * @return array<int> A filtered list of Event post IDs; note the order of the
         *                    result is NOT relevant as much as that the order that's been
         *                    used to fetch the Events.
         */
        public function get_ical_ids($per_page);
    }
    class Theme_Compatibility
    {
        /**
         * List of themes which have compatibility.
         *
         * @since 4.9.4
         *
         * @var   array
         */
        protected $themes = ['avada', 'divi', 'enfold', 'genesis', 'twentyseventeen', 'twentynineteen', 'twentytwenty', 'twentytwentyone'];
        /**
         * Checks if theme needs a compatibility fix.
         *
         * @since  4.9.3
         *
         * @return boolean
         */
        public function is_compatibility_required()
        {
        }
        /**
         * Add the theme to the body class.
         *
         * @since 4.9.3
         *
         * @param  array $classes Classes that are been passed to the body.
         *
         * @return array $classes
         */
        public function filter_add_body_classes(array $classes)
        {
        }
        /**
         * Contains the logic for if this object's classes should be added to the queue.
         *
         * @since 5.1.5
         *
         * @param boolean $add   Whether to add the class to the queue or not.
         * @param array   $class The array of body class names to add.
         * @param string  $queue The queue we want to get 'admin', 'display', 'all'.
         * @return boolean Whether body classes should be added or not.
         */
        public function should_add_body_class_to_queue($add, $class, $queue)
        {
        }
        /**
         * Add body classes.
         *
         * @since 5.1.5
         *
         * @return void
         */
        public function add_body_classes()
        {
        }
        /**
         * Fetches the correct class strings for theme and child theme if available + the container class.
         *
         * @since 5.5.0
         *
         * @return array $classes
         */
        public function get_container_classes()
        {
        }
        /**
         * Fetches the correct class strings for theme and child theme if available.
         *
         * @since 4.9.3
         *
         * @return array $classes
         */
        public function get_body_classes()
        {
        }
        /**
         * Returns a list of themes registered for compatibility with our Views.
         *
         * @since  4.9.4
         *
         * @return array An array of the themes registered.
         */
        public function get_registered_themes()
        {
        }
    }
    /**
     * Class Service_Provider
     *
     * @since   4.9.2
     *
     * @package Tribe\Events\Views\V2
     */
    class Service_Provider extends \tad_DI52_ServiceProvider
    {
        /**
         * Binds and sets up implementations.
         */
        public function register()
        {
        }
        /**
         * Registers the provider handling all the 1st level filters and actions for Views v2.
         *
         * @since 4.9.3
         */
        protected function register_assets()
        {
        }
        /**
         * Registers the provider handling all the 1st level filters and actions for Views v2.
         *
         * @since 4.9.2
         */
        protected function register_hooks()
        {
        }
        /**
         * Registers the provider handling compatibility with v1 of the View system.
         *
         * @since 4.9.2
         */
        protected function register_v1_compat()
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Repository {
    /**
     * Class Events_Result_Set
     *
     * @since   4.9.13
     *
     * @package Tribe\Events\Views\V2\Repository
     */
    class Events_Result_Set implements \Tribe\Utils\Collection_Interface
    {
        use \Tribe\Utils\Collection_Trait;
        /**
         * An array of event results in this result set.
         *
         * @since 4.9.13
         *
         * @var array
         */
        protected $items;
        /**
         * Events_Result_Set constructor.
         *
         * @param Event_Result[]|array $event_results An array of event results.
         */
        public function __construct(array $event_results = [])
        {
        }
        /**
         * Returns whether a string represents a serialized instance of the class or not.
         *
         * @since 5.0.0
         *
         * @param mixed $value The value to test.
         *
         * @return bool Whether the input value is a string representing a serialized instance of the class or not.
         */
        protected static function is_serialized($value)
        {
        }
        /**
         * Unserializes, with error handling, a result set to return a new instance of this class.
         *
         * @since 5.0.0
         *
         * @param string $value The serialized version of the result set.
         *
         * @return Events_Result_Set The unserialized result set, or an empty result set on failure.
         */
        protected static function from_serialized($value)
        {
        }
        /**
         * Builds a set from an array of event results.
         *
         * @since 5.0.0
         *
         * @param array<Event_Result> $event_results An array of event results.
         *
         * @return Events_Result_Set A new set, built from the input Event Results.
         */
        protected static function from_array($event_results)
        {
        }
        /**
         * Builds a result set from different type of values.
         *
         * @since 4.9.13
         *
         * @param mixed $value A result set, that will be returned intact, an array of event results
         *
         * @return Events_Result_Set The original set, a set built on an array of `Event_Result` instances, or a set
         *                           built on an empty array if the set could not be built.
         */
        public static function from_value($value)
        {
        }
        /**
         * Returns the number of Event Results in this set.
         *
         * @since 5.0.0
         *
         * @return int The number of Event Results in this set.
         */
        public function count()
        {
        }
        /**
         * Orders the Event Results by a specified criteria.
         *
         * @since 5.0.0
         *
         * @param string $order_by The key to order the Event Results by, currently supported is only `start_date`.
         * @param string $order The order direction, one of `ASC` or `DESC`.
         *
         * @return $this The current object, for chaining.
         */
        public function order_by($order_by, $order)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function all()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function jsonSerialize()
        {
        }
        /**
         * Plucks a key from all the event results in the collection.
         *
         * @since 4.9.13
         *
         * @param string $column The key to pluck.
         *
         * @return array An array of all the values associated to the key for each event result in the set.
         */
        public function pluck($column)
        {
        }
        /**
         * Iterates over the result set and to return the array version of each result.
         *
         * @since 4.9.13
         *
         * @return array An array of arrays, each one the array version of an `Event_Result`.
         */
        public function to_array()
        {
        }
        /**
         * Overrides the base `Collection_Trait` implementation to normalize all the items in the result set.
         *
         * @since 4.9.13
         *
         * @param string $data The serialized data.
         */
        public function unserialize($data)
        {
        }
        /**
         * Normalizes the event results in this set ensuring each one is an instance of `Event_Result`.
         *
         * @since 4.9.13
         *
         * @param array $event_results A set of event results in array or object format..
         *
         * @return Event_Result[] The normalized set of results.
         */
        protected function normalize_event_results(array $event_results)
        {
        }
    }
    /**
     * Class Event_Result
     *
     * @since   4.9.13
     *
     * @package Tribe\Events\Views\V2\Repository
     */
    class Event_Result
    {
        /**
         * An array of data keys that are required for an event result to be valid.
         *
         * @since 4.9.13
         *
         * @var array
         */
        protected static $required_keys = ['ID', 'post_status', 'start_date', 'end_date', 'timezone', 'all_day'];
        /**
         * The data wrapped by the value object.
         *
         * @since 4.9.13
         *
         * @var array
         */
        protected $data = [];
        /**
         * Event_Result constructor.
         *
         * @param array $result
         */
        public function __construct(array $data)
        {
        }
        /**
         * Builds and returns a result set from an array of values.
         *
         * @since 4.9.13
         *
         * @param array $value The value to build the instance from.
         *
         * @return static An result instance.
         */
        public static function from_value($value)
        {
        }
        /**
         * Returns the event post ID.
         *
         * @since 4.9.13
         *
         * @return int The event post ID.
         */
        public function id()
        {
        }
        /**
         * Returns the event start date in the site timezone.
         *
         * @since 4.9.13
         *
         * @return string The event start date and time, in the `Y-m-d H:i:s` format.
         */
        public function start_date()
        {
        }
        /**
         * Returns the event end date in the site timezone.
         *
         * @since 4.9.13
         *
         * @return string The event end date and time, in the `Y-m-d H:i:s` format.
         */
        public function end_date()
        {
        }
        /**
         * Returns the event timezone string.
         *
         * @since 4.9.13
         *
         * @return string The event timezone string.
         */
        public function timezone()
        {
        }
        /**
         * Returns a flag indicating whether the event is an all-day one or not.
         *
         * @since 4.9.13
         *
         * @return bool Whether the event is an all-day one or not.
         */
        public function all_day()
        {
        }
        /**
         * Returns the event post status.
         *
         * @since 4.9.13
         *
         * @return bool The event post status.
         */
        public function status()
        {
        }
        /**
         * Dumps the event result data to array.
         *
         * @since 4.9.13
         *
         * @return array The event result data.
         */
        public function to_array()
        {
        }
        public function __get($name)
        {
        }
        /**
         * Sets a property on the result, returning a modified clone.
         *
         * @since 4.9.13
         *
         * @param string $name  The name of the property to set.
         * @param mixed  $value The property value.
         *
         * @return Event_Result A clone of this result.
         */
        public function __set($name, $value)
        {
        }
        /**
         * Checks whether a data entry is set or not.
         *
         * @since 4.9.13
         *
         * @param string $name The name of the data entry to set.
         *
         * @return bool Whether a data entry is set or not.
         */
        public function __isset($name)
        {
        }
    }
    /**
     * Class Event_Period
     *
     * @since   4.9.13
     *
     * @package Tribe\Events\Views\V2\Repository
     */
    class Event_Period implements \Tribe\Repository\Core_Read_Interface
    {
        use \Tribe\Repository\Filter_Validation;
        /**
         * A definition of each filter required argument count and nature.
         *
         * @since 4.9.13
         *
         * @var array
         */
        protected static $filter_args_map = ['period' => ['start date' => [\Tribe__Date_Utils::class, 'is_valid_date'], 'end date' => [\Tribe__Date_Utils::class, 'is_valid_date']]];
        /**
         * Whether the repository should cache sets and results in WP cache or not.
         *
         * @since 4.9.13
         *
         * @var bool
         */
        public $cache_results = false;
        /**
         * The period start date.
         *
         * @since 4.9.13
         *
         * @var \DateTime
         */
        protected $period_start;
        /**
         * The period end date.
         *
         * @since 4.9.13
         *
         * @var \DateTime
         */
        protected $period_end;
        /**
         * A flag property to indicate whether the sets should be fetched and built using the site timezone or not.
         *
         * @since 4.9.13
         *
         * @var bool
         */
        protected $use_site_timezone;
        /**
         * The last fetched sets.
         *
         * @since 4.9.13
         *
         * @var Events_Result_Set[]
         */
        protected $sets;
        /**
         * The "base" repository used by this repository.
         * This repository will handle any non-period related filter.
         *
         * @since 4.9.13
         *
         * @var \Tribe__Repository__Interface
         */
        protected $base_repository;
        /**
         * A flag property to indicate whether there are filters for the base repository or not.
         *
         * @since 4.9.13
         *
         * @var bool
         */
        protected $has_base_filters = false;
        /**
         * Batch filter application method.
         *
         * This is the same as calling `by` multiple times with different arguments.
         *
         * @since 4.7.19
         *
         * @param array $args An associative array of arguments to filter
         *                    the posts by in the shape [ <key>, <value> ]. * * @return Tribe__Repository__Read_Interface
         */
        public function by_args(array $args)
        {
        }
        /**
         * Just an alias of the `by` method to allow for easier reading.
         *
         * @since 4.7.19
         *
         * @param string $key
         * @param mixed  $value
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function where($key, $value = null)
        {
        }
        /**
         * {@inheritDoc}
         *
         * @since 4.9.13
         */
        public function by($key, $value = null)
        {
        }
        /**
         * Returns the base event repository used by this repository.
         *
         * @since 4.9.13
         *
         * @return \Tribe__Repository__Interface The base repository instance used by this repository.
         */
        public function base_repository()
        {
        }
        /**
         * Sets the page of posts to fetch.
         *
         * Mind that this implementation does not support a `by( 'page', 2 )`
         * filter to force more readable code.
         *
         * @since 4.7.19
         *
         * @param int $page
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function page($page)
        {
        }
        /**
         * Sets the number of posts to retrieve per page.
         *
         * Mind that this implementation does not support a `by( 'per_page', 5 )`
         * filter to force more readable code; by default posts per page is set to
         * the pagination defaults for the post type.
         *
         * @param int $per_page
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function per_page($per_page)
        {
        }
        /**
         * Returns the number of posts found matching the query.
         *
         * Mind that this value ignores the offset returning the
         * number of results if limits where not applied.
         *
         * @since 4.7.19
         *
         * @return int
         */
        public function found()
        {
        }
        /**
         * Returns all posts matching the query.
         *
         * Mind that "all" means "all the posts matching all the filters" so pagination applies.
         *
         * @return array
         */
        public function all()
        {
        }
        /**
         * Sets the offset on the query.
         *
         * Mind that this implementation does not support a `by( 'offset', 2 )`
         * filter to force more readable code.
         *
         * @since 4.7.19
         *
         * @param int  $offset
         * @param bool $increment Whether to increment the offset by the value
         *                        or replace it.
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function offset($offset, $increment = false)
        {
        }
        /**
         * Sets the order on the query.
         *
         * Mind that this implementation does not support a `by( 'order', 2 )`
         * filter to force more readable code.
         *
         * @since 4.7.19
         *
         * @param string $order
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function order($order = 'ASC')
        {
        }
        /**
         * Sets the order criteria results should be fetched by.
         *
         * Mind that this implementation does not support a `by( 'order_by', 'title' )`
         * filter to force more readable code.
         *
         * @since 4.7.19
         *
         * @param string $order_by The post field, custom field or alias key to order posts by.
         * @param string $order    The order direction; optional; shortcut for the `order` method; defaults
         *                         to `DESC`.
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function order_by($order_by, $order = 'DESC')
        {
        }
        /**
         * Sets the fields that should be returned by the query.
         *
         * Mind that this implementation does not support a `by( 'fields', 'ids' )`
         * filter to force more readable code.
         *
         * @since 4.7.19
         *
         * @param string $fields
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function fields($fields)
        {
        }
        /**
         * Sugar method to set the `post__in` argument.
         *
         * Successive calls will stack, not replace each one.
         *
         * @since 4.7.19
         *
         * @param array|int $post_ids
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function in($post_ids)
        {
        }
        /**
         * Sugar method to set the `post__not_in` argument.
         *
         * Successive calls will stack, not replace each one.
         *
         * @since 4.7.19
         *
         * @param array|int $post_ids
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function not_in($post_ids)
        {
        }
        /**
         * Sugar method to set the `post_parent__in` argument.
         *
         * Successive calls will stack, not replace each one.
         *
         * @since 4.7.19
         *
         * @param array|int $post_id
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function parent($post_id)
        {
        }
        /**
         * Sugar method to set the `post_parent__in` argument.
         *
         * Successive calls will stack, not replace each one.
         *
         * @since 4.7.19
         *
         * @param array $post_ids
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function parent_in($post_ids)
        {
        }
        /**
         * Sugar method to set the `post_parent__not_in` argument.
         *
         * Successive calls will stack, not replace each one.
         *
         * @since 4.7.19
         *
         * @param array $post_ids
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function parent_not_in($post_ids)
        {
        }
        /**
         * Sugar method to set the `s` argument.
         *
         * Successive calls will replace the search string.
         * This is the default WordPress searh, to search by title,
         * content or excerpt only use the `title`, `content`, `excerpt` filters.
         *
         * @param $search
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function search($search)
        {
        }
        /**
         * Returns the number of posts found matching the query in the current page.
         *
         * While the `found` method will return the number of posts found
         * across all pages this method will only return the number of
         * posts found in the current page.
         * Differently from the `found` method this method will apply the
         * offset if set.
         *
         * @since 4.7.19
         *
         * @return int
         */
        public function count()
        {
        }
        /**
         * Returns the first post of the page matching the current query.
         *
         * If, by default or because set with the `per_page` method, all
         * posts matching the query should be returned then this will be
         * the first post of all those matching the query.
         *
         * @since 4.7.19
         *
         * @return WP_Post|mixed|null
         *
         * @see   Tribe__Repository__Read_Interface::per_page()
         */
        public function first()
        {
        }
        /**
         * Returns the last post of the page matching the current query.
         *
         * If, by default or because set with the `per_page` method, all
         * posts matching the query should be returned then this will be
         * the last post of all those matching the query.
         *
         * @since 4.7.19
         *
         * @return WP_Post|mixed|null
         *
         * @see   Tribe__Repository__Read_Interface::per_page()
         */
        public function last()
        {
        }
        /**
         * Returns the nth post (1-based) of the page matching the current query.
         *
         * Being 1-based the second post can be fetched using `nth( 2 )`.
         * If, by default or because set with the `per_page` method, all
         * posts matching the query should be returned then this will be
         * the nth post of all those matching the query.
         *
         * @since 4.7.19
         *
         * @param int $n
         *
         * @return WP_Post|mixed|null
         *
         * @see   Tribe__Repository__Read_Interface::per_page()
         */
        public function nth($n)
        {
        }
        /**
         * Returns the first n posts of the page matching the current query.
         *
         * If, by default or because set with the `per_page` method, all
         * posts matching the query should be returned then this method will
         * return the first n posts of all those matching the query.
         *
         * @since 4.7.19
         *
         * @return array An array of posts matching the query.
         *
         * @see   Tribe__Repository__Read_Interface::per_page()
         */
        public function take($n)
        {
        }
        /**
         * Plucks a field from all results and returns it.
         *
         * This method will implicitly build and use a `WP_List_Util` instance on the return
         * value of a call to the `all` method.
         *
         * @since 4.9.5
         *
         * @param string $field The field to pluck from each result.
         *
         * @return array An array of the plucked results.
         *
         * @see   \wp_list_pluck()
         */
        public function pluck($field)
        {
        }
        /**
         * Filters the results according to the specified criteria.
         *
         * This method will implicitly build and use a `WP_List_Util` instance on the return
         * value of a call to the `all` method.
         *
         * @since 4.9.5
         *
         * @param array  $args     Optional. An array of key => value arguments to match
         *                         against each object. Default empty array.
         * @param string $operator Optional. The logical operation to perform. 'AND' means
         *                         all elements from the array must match. 'OR' means only
         *                         one element needs to match. 'NOT' means no elements may
         *                         match. Default 'AND'.
         *
         * @return array An array of the filtered results.
         *
         * @see   \wp_list_filter()
         */
        public function filter($args = array(), $operator = 'AND')
        {
        }
        /**
         * Sorts the results according to the specified criteria.
         *
         * This method will implicitly build and use a `WP_List_Util` instance on the return
         * value of a call to the `all` method.
         *
         * @since 4.9.5
         *
         * @param string|array $orderby       Optional. Either the field name to order by or an array
         *                                    of multiple orderby fields as $orderby => $order.
         * @param string       $order         Optional. Either 'ASC' or 'DESC'. Only used if $orderby
         *                                    is a string.
         * @param bool         $preserve_keys Optional. Whether to preserve keys. Default false.
         *
         * @return array An array of the sorted results.
         *
         * @see   \wp_list_sort()
         */
        public function sort($orderby = array(), $order = 'ASC', $preserve_keys = false)
        {
        }
        /**
         * Builds a collection on the result of the `all()` method call.
         *
         * @since 4.9.5
         *
         * @return \Tribe__Utils__Post_Collection
         */
        public function collect()
        {
        }
        /**
         * Gets the ids of the posts matching the query.
         *
         * @since 4.9.13
         *
         * @return array An array containing the post IDs to update.
         */
        public function get_ids()
        {
        }
        /**
         * Flattens and returns the post IDs of all events in the a sets collection.
         *
         * @since 4.9.13
         *
         * @param array $sets The sets to parse.
         *
         * @return int[] An array of the sets post IDs.
         */
        protected function get_sets_ids(array $sets)
        {
        }
        /**
         * Returns an array of result sets, one for each period day.
         *
         * @since 4.9.13
         *
         * @return Events_Result_Set[] An array of result sets, in the shape `[ <Y-m-d> => <Event_Result_Set> ]`.
         */
        public function get_sets()
        {
        }
        /**
         * Returns the already fetched set, or a sub-set of it.
         *
         * @since 4.9.13
         *
         * @param array              $sets  The sets, by day, to get the subset from.
         * @param \DateTimeInterface $start The sub-set start.
         * @param \DateTimeInterface $end   The sub-set end.
         *
         * @return Events_Result_Set[] The result sub-set, or the whole set if the dates are the same.
         */
        protected function get_sub_set(array $sets, \DateTimeInterface $start, \DateTimeInterface $end)
        {
        }
        /**
         * Queries the database to fetch the sets.
         *
         * @since 4.9.13
         *
         * @return array|false Either the results of the query, or `false` on error.
         */
        protected function query_for_sets(\DateTimeInterface $start, \DateTimeInterface $end)
        {
        }
        /**
         * Queries for all the events that start before the period ends.
         *
         * @since 4.9.13
         *
         * @param int                $limit   The value of the LIMIT that should be respected to send queries (in respect
         *                                    to the
         *                                    `$post_in` parameter) or fetch results (the SQL LIMIT clause). This limit
         *                                    should be defined using the
         *                                    `Tribe__Feature_Detection::mysql_limit_for_example` method.
         * @param \DateTimeInterface $end     The period end date.
         * @param array              $post_in An array of post IDs to limit the search to.
         *
         * @return array A result set, an array of arrays in the shape `[ <ID> => [ 'ID' => <ID>, 'start_date' =>
         *               <start_date> ] ]`;
         */
        protected function query_for_sets_starting_before_period_end($limit, \DateTimeInterface $end, array $post_in = [])
        {
        }
        /**
         * Runs a query within a SQL LIMIT.
         *
         * The method will run multiple queries if the limit is lower than the number of results or the number of post IDs
         * in the `$post_in` parameter.
         *
         * @since 4.9.13
         *
         * @param int        $limit        The value of the LIMIT that should be respected to send queries (in respect to
         *                                 the `$post_in` parameter) or fetch results (the SQL LIMIT clause). This limit
         *                                 should be defined using the `Tribe__Feature_Detection::mysql_limit_for_example`
         *                                 method.
         * @param string     $query        The un-prepared SQL query to run, if should contains placeholders in the format
         *                                 used by the `wpdb::prepare` method.
         * @param array|null $prepare_args An array of arguments that will be used, in order, to prepare the query using
         *                                 the
         *                                 `wpdb::prepare` method.
         * @param array|null $post_in      An array of post IDs that will be  used to pivot the query. The `$limit`
         *                                 parameter will apply to these values too chunking them if they are too many to
         *                                 avoid hitting MySQL packet size. When applied to post IDs the limit is overly
         *                                 conservative.
         *
         * @return array An array of results. Whether one or more queries ran, the return value will always have the format
         *               a single query run would have.
         *
         * @see   Tribe__Feature_Detection::mysql_limit_for_example for the method that should be used to set the limit.
         * @see   wpdb::prepare() for the format of the placeholders to use to prepare the query.
         */
        protected function query_w_limit($limit, $query, array $prepare_args = [], array $post_in = [])
        {
        }
        /**
         * Queries for all the events that end after the period starts.
         *
         * @since 4.9.13
         *
         * @param int                $limit   The value of the LIMIT that should be respected to send queries (in respect
         *                                    to the
         *                                    `$post_in` parameter) or fetch results (the SQL LIMIT clause). This limit
         *                                    should be defined using the
         *                                    `Tribe__Feature_Detection::mysql_limit_for_example` method.
         * @param \DateTimeInterface $start   The period start date.
         * @param array              $post_in An array of post IDs to limit the search to.
         *
         * @return array A result set, an array of arrays in the shape `[ <ID> => [ 'ID' => <ID>, 'end_date' => <end_date>
         *               ] ]`;
         */
        protected function query_for_sets_ending_after_period_start($limit, \DateTimeInterface $start, array $post_in = [])
        {
        }
        /**
         * Queries the database to fetch all the values of a single meta entry for all the post IDs in the datatbase or in
         * a defined interval.
         *
         * @since 4.9.13
         *
         * @param int        $limit           The value of the LIMIT that should be respected to send queries (in respect
         *                                    to the
         *                                    `$post_in` parameter) or fetch results (the SQL LIMIT clause). This limit
         *                                    should be defined using the
         *                                    `Tribe__Feature_Detection::mysql_limit_for_example` method.
         * @param string     $meta_key        The meta key to fetch from the database, this is the value of the `meta_key`
         *                                    column, e.g. `_EventTimezone`.
         * @param array|null $post_ids        An array of post IDs to limit the query.
         * @param string     $join            The type of JOIN to use; defaults to `INNER`, but `LEFT` should be used when
         *                                    fetching meta that might be not set for all posts.
         *
         * @return array An array of meta results, the post IDs as keys.
         *
         * @see   Tribe__Feature_Detection::mysql_limit_for_example for the method that should be used to set the limit.
         * @see   wpdb::prepare() for the format of the placeholders to use to prepare the query.
         */
        protected function query_for_meta($limit, $meta_key, array $post_ids = null, $join = 'INNER')
        {
        }
        /**
         * Groups a set of raw database results by start date.
         *
         * @since 4.9.13
         *
         * @param array $results A raw set of database results.
         *
         * @return array The database results, grouped by days, in the shape `[ <Y-m-d> => [ ...<results> ] ]`. Each result
         *               is an instance `Event_Result`.
         */
        protected function group_sets_by_start_date($results)
        {
        }
        /**
         * Casts each set to an `Event_Result_Set`.
         *
         * @since 4.9.13
         *
         * @param array $raw_sets The raw sets.
         *
         * @return array The set, each element cast to an `Event_Result_Set`.
         */
        protected function cast_sets(array $raw_sets)
        {
        }
        /**
         * Adds to the sets any missing day.
         *
         * @since 4.9.13
         *
         * @param array $sets The current sets, by day.
         *
         * @return array The filled sets.
         */
        protected function add_missing_sets(array $sets)
        {
        }
        /**
         * Caches the resulting sets using `Tribe__Cache`.
         *
         * As a result sets might be cached either in a real object cache or in transients.
         *
         * @param array $sets The sets to cache.
         */
        protected function set_results_cache($sets)
        {
        }
        /**
         * Returns the full cache key for a partial key.
         *
         * @since 4.9.13
         *
         * @param string $key The partial key.
         *
         * @return string The full cache key.
         */
        private static function get_cache_key($key)
        {
        }
        /**
         * Further filters the sets using a default event repository to handle the non-period related filters.
         *
         * @since 4.9.13
         *
         * @param array $sets The sets found by this repository so far.
         */
        protected function filter_sets_w_base_repository(array $sets)
        {
        }
        /**
         * An alias of the `get_sets` method to stick with the convention of naming database-querying methods w/ "fetch".
         *
         * This method will "warm up" the instance cache of the repository fetching the events in the period.
         *
         * @since 4.9.13
         */
        public function fetch()
        {
        }
        /**
         * Short-hand to fetch events for a single date.
         *
         * A wrapper around the `by_period` method.
         *
         * @since 4.9.13
         *
         * @param string|int|\DateTimeInterface $date The day date.
         *
         * @return $this For chaining.
         */
        public function by_date($date)
        {
        }
        /**
         * Sets up the filter to fetch events sets in a period.
         *
         * @since 4.9.13
         *
         * @param string|int|\DateTimeInterface $start_date The period start date.
         * @param string|int|\DateTimeInterface $end_date   The period end date.
         *
         * @return static For chaining.
         */
        public function by_period($start_date, $end_date)
        {
        }
        /**
         * Try and fetch sets from cache to share data between diff. instances of the repository.
         *
         * In cache we store periods.
         * A cached period has a start and an end.
         * If the current request period overlaps a cached period, then we fetch sets for each day in the period from the
         * cache.
         *
         * @since 4.9.13
         *
         * @return array|null Either a set of results fetched from the cache, or `null` if nothing was found in cache.
         */
        protected function fetch_cached_sets()
        {
        }
        /**
         * Shorthand method to get the first set of a search.
         *
         * @since 4.9.13
         *
         * @return Events_Result_Set Either the first found set, or an empty set.
         */
        public function get_set()
        {
        }
        /**
         * Sets, or unsets if the passed value is `null`, the base repository used by this repository.
         *
         * @since 4.9.13
         *
         * @param Core_Read_Interface $base_repository The base repository this repository should use; a `null` value will
         *                                             unset it.
         */
        public function set_base_repository(\Tribe\Repository\Core_Read_Interface $base_repository = null)
        {
        }
    }
}
namespace Tribe\Events\Views\V2 {
    /**
     * Class Template
     *
     * @package Tribe\Events\Views\V2
     * @since   4.9.2
     */
    class Template extends \Tribe__Template
    {
        use \Tribe\Traits\Cache_User;
        /**
         * The view the template should use to build its path.
         *
         * @var View_Interface
         */
        protected $view;
        /**
         * The repository instance that provided the template with posts, if any.
         *
         * @var Repository_Interface
         */
        protected $repository;
        /**
         * An array cache to keep track of  resolved template files on a per-name basis.
         * The file look-around needs not to be performed twice per request.
         *
         * @since 4.9.4
         *
         * @var array
         */
        protected $template_file_cache = [];
        /**
         * Renders and returns the View template contents.
         *
         * @since 4.9.2
         *
         * @param array $context_overrides Any context data you need to expose to this file
         *
         * @return string The rendered template contents.
         */
        public function render(array $context_overrides = [])
        {
        }
        /**
         * Template constructor.
         *
         * @param View_Interface $view The view the template should use to build its path.
         *
         * @since 4.9.2
         * @since 4.9.4 Modified the first param to only accept View_Interface instances.
         */
        public function __construct($view)
        {
        }
        /**
         * Returns the template file the View will use to render.
         *
         * If a template cannot be found for the view then the base template for the view will be returned.
         *
         * @since 4.9.2
         *
         * @param string|array|null $name Either a specific name to check, the frgments of a name to check, or `null` to let
         *                                the view pick the template according to the template override rules.
         *
         * @return string The path to the template file the View will use to render its contents.
         */
        public function get_template_file($name = null)
        {
        }
        /**
         * Returns the absolute path to the view base template file.
         *
         * @since 4.9.2
         *
         * @return string The absolute path to the Views base template.
         */
        public function get_base_template_file()
        {
        }
        /**
         * Sets up the post data and replace the global post variable on all required places.
         *
         * @since 4.9.13
         *
         * @param WP_Post $event Which event will replace the Post for the templates
         *
         * @return bool|void  Returns whatever WP_Query::setup_postdata() sends back.
         */
        public function setup_postdata(\WP_Post $event)
        {
        }
        /**
         * Returns the absolute path to the view "not found" template file.
         *
         * @since 4.9.2
         *
         * @return string The absolute path to the Views "not found" template.
         */
        public function get_not_found_template()
        {
        }
        /**
         * Sets the template view.
         *
         * @since 4.9.4 Modified the Param to only accept View_Interface instances
         *
         * @param View_Interface  $view  Which view we are using this template on.
         */
        public function set_view($view)
        {
        }
        /**
         * Returns the current template view, either set in the constructor or using the `set_view` method.
         *
         * @since 4.9.4 Modified the Param to only accept View_Interface instances
         *
         * @return View_Interface The current template view.
         */
        public function get_view()
        {
        }
        /**
         * Returns the current template context.
         *
         * @since 5.0.0
         *
         * @return \Tribe__Context The template context instance, or the global context if no context is set.
         */
        public function get_context()
        {
        }
    }
    /**
     * Class Index
     *
     * @package Tribe\Events\Views\V2
     * @since   4.9.2
     */
    class Index extends \Tribe\Events\Views\V2\Template
    {
        /**
         * Index constructor.
         *
         * Overrides the base implementation to allow plugins and themes to override the index file.
         */
        public function __construct()
        {
        }
    }
    /**
     * Class Rest_Endpoint
     *
     * @since   4.9.2
     *
     * @package Tribe\Events\Views\V2
     */
    class Rest_Endpoint
    {
        /**
         * Rest Endpoint namespace
         *
         * @since  4.9.7
         *
         * @var  string
         */
        const ROOT_NAMESPACE = 'tribe/views/v2';
        /**
         * AJAX action for the fallback when REST is inactive.
         *
         * @since  4.9.7
         *
         * @var  string
         */
        public static $ajax_action = 'tribe_events_views_v2_fallback';
        /**
         * A flag, set on a per-request basis, to indicate if the `rest_authentication_errors` filter fired or not.
         *
         * @since 4.9.12
         *
         * @var bool
         */
        protected static $did_rest_authentication_errors;
        /**
         * Returns the URL View will use to fetch their content.
         *
         * Depending on whether the REST API is enabled or not on the site, the URL might be a REST API one or an
         * admin AJAX one.
         *
         * @since   4.9.2
         * @since   5.2.1 Add filtering to the URL.
         *
         * @return  string The URL of the backend endpoint Views will use to fetch their content.
         */
        public function get_url()
        {
        }
        /**
         * Get the arguments used to setup the HTML route for Views V2 in the REST API.
         *
         * @link  https://developer.wordpress.org/rest-api/requests/
         *
         * @since  4.9.7
         *
         * @return array $arguments Request arguments following the WP_REST API Standards [ name => options, ... ]
         */
        public function get_request_arguments()
        {
        }
        /**
         * Register the endpoint if available.
         *
         * @since  4.9.7
         * @since 5.2.1 Add support for the POST method.
         *
         * @return boolean If we registered the endpoint.
         */
        public function register()
        {
        }
        /**
         * When REST is not available add AJAX fallback into the correct action.
         *
         * @since  4.9.7
         * @since  4.9.12 Always enable this.
         *
         * @return void
         */
        public function enable_ajax_fallback()
        {
        }
        /**
         * Get the mocked rest request used for the AJAX fallback used to make sure users without
         * the REST API still have the Views V2 working.
         *
         * @since  4.9.7
         * @since 5.2.1 Changed the mock request HTTP method to POST (was GET).
         *
         * @param  array $params Associative array with the params that will be used on this mocked request
         *
         * @return Request The mocked request.
         */
        public function get_mocked_rest_request(array $params)
        {
        }
        /**
         * AJAX fallback for when REST endpoint is disabled. We try to mock a WP_REST_Request
         * and use the same method behind the scenes to make sure we have consistency.
         *
         * @since  4.9.7
         * @since 5.2.1 Look up the POST data before the GET one to process the request.
         */
        public function handle_ajax_request()
        {
        }
        /**
         * Check if the REST endpoint is available.
         *
         * @since  4.9.7
         *
         * @return boolean If the REST API endpoint is available.
         */
        public function is_available()
        {
        }
        /**
         * Tracks if the `rest_authentication_errors` filter fired or not, using this filter as an action.
         *
         * This is a work-around fro the lack of the `did_filter` function.
         *
         * @since 4.9.12
         *
         * @param mixed $errors The authentication error, if any, unused by the method.
         *
         * @return mixed The authentication error.
         */
        public static function did_rest_authentication_errors($errors = null)
        {
        }
        /**
         * Returns the filtered HTTP method Views should use to fetch their content from the backend endpoint.
         *
         * @since 5.2.1
         *
         * @return string The filtered HTTP method Views should use to fetch their content from the back-end endpoint.
         */
        public function get_method()
        {
        }
    }
    /**
     * Class Rewrite
     *
     * @since   5.0.0
     *
     * @package Tribe\Events\Views\V2
     */
    class Rewrite
    {
        /**
         * Filters The Events Calendar rewrite rules to fix and update them, if required.
         *
         * @since 5.0.0
         *
         * @param array  $bases  An array of rewrite bases that have been generated.
         * @param string $method The method that's being used to generate the bases; defaults to `regex`.
         *
         * @return array<string,array> The filtered rewrite rules, updated or modified if required.
         */
        public function filter_raw_i18n_slugs(array $bases, $method)
        {
        }
        /**
         * Adds the URL encoded version of the slugs to the rewrite rules to ensure rewrites will keep working
         * in localized installations.
         *
         * This method wil "fill-in" wrongly formatted or encoded bases too and order bases so that the `Tribe__Rewrite`
         * URL resolving methods will, preferably, resolve to the "pretty" (non URL-encoded) and human readable version.
         *
         * @since 5.0.0
         *
         * @param array<string,array> $bases The raw bases, as generated by The Events Calendar rewrite handler.
         *
         * @return array<string,array> The rules, updated to include the URL encoded version of the slugs.
         */
        protected function add_url_encoded_slugs($bases)
        {
        }
        /**
         * Detects, in a very specific manner, if the string is urlencoded or not.
         *
         * Refrain from moving this into a general-purpose function: this detections system makes a number of assumptions
         * that are just wrong in other contexts.
         *
         * @since 5.0.0
         *
         * @param string $string The string to check for encoding.
         *
         * @return bool Whether the string is encoded or not.
         */
        protected function is_encoded($string)
        {
        }
        /**
         * Sorts a set of English, localize, encoded and not encoded slugs trying to put English and "pretty" first.
         *
         * URL encoded versions will be moved down the set, English will be put first, then "pretty" localized versions.
         *
         * @since 5.0.0
         *
         * @param string $a The first localized slug to check.
         * @param string $b The second localized slug to check.
         *
         * @return int The check result, `0` if the positions should not change, `-1` or `1` to move `$a` before `$b` or
         *             viceversa.
         */
        protected function sort_by_encoding($a, $b)
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Template\Settings {
    class Advanced_Display
    {
        /**
         * Key for the Before HTML settings on the tribe option.
         *
         * @since  4.9.11
         *
         * @var string
         */
        public static $key_before_events_html = 'tribeEventsBeforeHTML';
        /**
         * Key for the After HTML settings on the tribe option.
         *
         * @since  4.9.11
         *
         * @var string
         */
        public static $key_after_events_html = 'tribeEventsAfterHTML';
        /**
         * Fetches from the tribe options setting the string for the before events,
         * applies all the required methods for proper usage and returns it.
         *
         * @since  4.9.11
         *
         * @param  View_Interface|null $view Instance of the view we are getting this for.
         *
         * @return string HTML with all the methods have been applied to it.
         */
        public function get_before_events_html($view = null)
        {
        }
        /**
         * Fetches from the tribe options setting the string for after the events,
         * applies all the required methods for proper usage and returns it.
         *
         * @since  4.9.11
         *
         * @param  View_Interface|null $view Instance of the view we are getting this for.
         *
         * @return string HTML with all the methods have been applied to it.
         */
        public function get_after_events_html($view = null)
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Template {
    class Event
    {
        /**
         * @var boolean Whether or not we are currently filtering out content due to password protection
         */
        protected $managing_sensitive_info = false;
        /**
         * The current template bootstrap instance.
         *
         * @since 5.0.0
         *
         * @var Template_Bootstrap
         */
        protected $template_bootstrap;
        /**
         * Event constructor.
         *
         * @since 5.0.0
         *
         * @param Template_Bootstrap $template_bootstrap The current template bootstrap instance.
         */
        public function __construct(\Tribe\Events\Views\V2\Template_Bootstrap $template_bootstrap)
        {
        }
        /**
         * Determines the Path for the PHP file to be used as the main template
         * For Page base template setting it will select from theme or child theme
         *
         * @todo  Integrate with Template + Context classes
         *
         * @since  4.9.2
         *
         * @return string
         */
        public function get_path()
        {
        }
        /**
         * Add/remove filters to hide/show sensitive event info on password protected posts
         *
         * @since 5.0.0
         *
         * @param int|\WP_Post $post The post ID or object to filter.
         **/
        public function manage_sensitive_info($post)
        {
        }
        /**
         * Filters the post title as WordPress does in `get_the_title` to apply the password-protected prefix in
         * the context of AJAX requests.
         *
         * @since 5.0.0
         *
         * @param string      $title   The post title.
         * @param int|\WP_Post $post_id The post ID, or object, to apply the filter for.
         *
         * @return string The filtered post title.
         */
        public function filter_get_the_title($title, $post_id = 0)
        {
        }
        /**
         * Filters and modifies the event WP_Post object returned from the `tribe_get_event` function to hide some
         * sensitive information if required.
         *
         * @since 5.0.0
         *
         * @param \WP_Post $event The event post object, decorated w/ properties added by the `tribe_get_event` function.
         *
         * @return \WP_Post The event post object, decorated w/ properties added by the `tribe_get_event` function, some of
         *                  them updated to hide sensitive information, if required.
         */
        public function filter_event_properties(\WP_Post $event)
        {
        }
        /**
         * Filter the display of the_title for password protected events, venues, and organizers.
         *
         * @since 5.3.1
         *
         * @param string       $title   The post title.
         * @param int|\WP_Post $post_id The post ID, or object, to apply the filter for.
         *
         * @return string The post title or empty string if password protected.
         */
        public function filter_the_title_display($title, $post_id = 0)
        {
        }
    }
    /**
     * Class Title
     *
     * @since   4.9.10
     *
     * @package Tribe\Events\Views\V2\Template
     */
    class Title
    {
        /**
         * The instance of the Context object that will be used to build the title, the global one otherwise.
         *
         * @since 4.9.10
         *
         * @var Context
         */
        protected $context;
        /**
         * An array of the events matching the query the title should be built for.
         *
         * @since 4.9.10
         *
         * @var array
         */
        protected $posts;
        /**
         * The plural Events label.
         *
         * @since 4.9.10
         *
         * @var string
         */
        protected $events_label_plural;
        /**
         * Title constructor.
         *
         * @since 4.9.10
         */
        public function __construct()
        {
        }
        /**
         * Builds and returns the page title, to be used to filter the `wp_title` tag.
         *
         * @since 4.9.10
         *
         * @param string      $title The page title built so far.
         * @param null|string $sep   The separator sequence to separate the title components..
         *
         * @return string the filtered page title.
         */
        public function filter_wp_title($title, $sep = null)
        {
        }
        /**
         * Builds the page title from a context.
         *
         * This method is a rewrite of the `tribe_get_events_title` function to make it leverage the local context,
         * injectable and controllable, in place of the global one.
         *
         * @since 4.9.10
         * @since 5.1.5 - Add filter for plural events label and move featured label to a method.
         *
         * @param string $current_title Current Title used on the page.
         * @param bool   $depth         Whether to use depth to build the taxonomy archive title, or not.
         *
         * @return string The page title.
         */
        public function build_title($current_title = '', $depth = true)
        {
        }
        /**
         * Builds the title for a range of posts.
         *
         * @since 4.9.10
         *
         * @param Context $context    The context to use to build the title.
         * @param mixed   $event_date The event date object, string or timestamp.
         *
         * @return array The built post range title.
         */
        public function build_post_range_title(\Tribe__Context $context, $event_date)
        {
        }
        /**
         * Filters and returns the `title` part of the array produced by the  `wp_get_document_title` function.
         *
         * @since 4.9.10
         *
         * @param array $title The document title parts.
         *
         * @return array The filtered document title parts.
         */
        public function filter_document_title_parts(array $title = [])
        {
        }
        /**
         * Sets the context this title object should use to build the title.
         *
         * @since 4.9.10
         *
         * @param Context|null $context The context to use, `null` values will unset it causing the object ot use the
         *                              global context.
         *
         * @return $this For chaining.
         */
        public function set_context(\Tribe__Context $context = null)
        {
        }
        /**
         * Sets the posts this object should reference to build the title.
         *
         * We build some title components with notion of what events we found for a View. Here we set them.
         *
         * @since 4.9.10
         *
         * @param array|null $posts  An array of posts matching the context query, `null` will unset it causing the object
         *                           to use the posts found by the global `$wp_query` object.
         *
         * @return $this For chaining.
         */
        public function set_posts(array $posts = null)
        {
        }
        /**
         * Returns the post the title should use to build some title fragments.
         *
         * @since 4.9.10
         *
         * @return array An array of injected posts, or the globally found posts.
         */
        protected function get_posts()
        {
        }
        /**
         * Builds the Month view title.
         *
         * @since 4.9.10
         *
         * @param mixed $event_date The date to use to build the title.
         *
         * @return string The Month view title.
         */
        public function build_month_title($event_date)
        {
        }
        /**
         * Builds the Day view title.
         *
         * @since 4.9.10
         *
         * @param mixed $event_date The date to use to build the title.
         *
         * @return string The Day view title.
         */
        protected function build_day_title($event_date)
        {
        }
        /**
         * Builds, wrapping the current  title, the Event Category archive title.
         *
         * @since 4.9.10
         *
         * @param string $title The input title.
         * @param  \WP_Term $cat The category term to use to build the title.
         *
         * @return string The built category archive title.
         */
        protected function build_category_title($title, $cat)
        {
        }
    }
    /**
     * Class Featured_Title
     *
     * @since   5.1.5
     *
     * @package Tribe\Events\Views\V2\Template
     */
    class Featured_Title
    {
        /**
         * Filter the plural events label for Featured V2 Views.
         *
         * @since 5.1.5
         *
         * @param string  $label   The plural events label as it's been generated thus far.
         * @param Context $context The context used to build the title, it could be the global one, or one externally
         *                         set.
         *
         * @return string the original label or updated label for virtual archives.
         */
        public function filter_views_v2_wp_title_plural_events_label($label, \Tribe__Context $context)
        {
        }
    }
    /**
     * Class Excerpt
     *
     * @since   4.9.10
     *
     * @package Tribe\Events\Views\V2\Template
     */
    class Excerpt extends \Tribe__Template
    {
        /**
         * Excerpt constructor.
         *
         * @since 4.9.10
         */
        public function __construct()
        {
        }
        /**
         * Filters the excerpt length.
         *
         * Set the excerpt length for list and day view.
         *
         * @since 4.9.10
         *
         * @param int $length The excerpt length.
         *
         * @return int The excerpt length modified, if necessary.
         */
        public function maybe_filter_excerpt_length($length)
        {
        }
        /**
         * Filters the excerpt more button.
         *
         * Set the excerpt more button styles for twentyseventeen.
         *
         * @since 4.9.10
         *
         * @param string $link The excerpt read more link.
         *
         * @return string The excerpt read more link modified, if necessary.
         */
        public function maybe_filter_excerpt_more($link)
        {
        }
        /**
         * Handles the infinite loop that could happen when the excerpt filtering fires as a consequence of a
         * `Lazy_String` resolution in the `tribe_get_event` function.
         *
         * To correctly apply the `read-more` template, and account for possible third-parties overrides, we need the
         * result of a call to the `tribe_get_event` function.
         * If object caching is active that function will be fired on `shutdown` and will resolve all of its `Lazy_String`
         * instances.
         * One of those is the one holding the value of the filtered post excerpt.
         * This will cause an infinite loop if not handled.
         *
         * @since 5.0.0
         *
         * @param callable $function The function that should be resolved avoiding a filter infinite loop.
         *
         * @return mixed The result value of the function call.
         */
        protected function avoiding_filter_loop(callable $function)
        {
        }
    }
    /**
     * Class Promo
     *
     * @since   5.1.5
     *
     * @package Tribe\Events\Views\V2\Template
     */
    class Promo
    {
        /**
         * Include the promo banner after the after component.
         *
         * @since 5.1.5
         *
         * @param string   $file     Complete path to include the PHP File.
         * @param array    $name     Template name.
         * @param Template $template Current instance of the Template.
         *
         * @return void  Template render has no return.
         */
        public function action_add_promo_banner($file, $name, $template)
        {
        }
    }
    class Page
    {
        /**
         * Makes sure we save the current post before hijacking for a page.
         *
         * @since  5.0.2
         *
         * @var array[ WP_Post ] $hijacked_post All WP_Posts on this query.
         */
        protected $hijacked_posts;
        /**
         * Determines the Path for the PHP file to be used as the main template.
         * For Page base template setting it will select from theme or child theme.
         *
         * @since  4.9.2
         *
         * @return string Path for the Page template to be loaded.
         */
        public function get_path()
        {
        }
        /**
         * Fires when the loop starts, and tries to hijack the loop for post.
         *
         * @since  4.9.10
         *
         * @param  WP_Query  $query  Main WordPress query where we are hijacking the_content.
         *
         * @return void              Action hook with no return.
         */
        public function hijack_on_loop_start(\WP_Query $query)
        {
        }
        /**
         * When using Page template we need to specifically hijack the WordPress templating
         * system at a specific point after `loop_start`.
         *
         * @since  4.9.2
         *
         * @param  WP_Query $query WordPress query executed to get here.
         *
         * @return boolean         Whether we did hijack the post or not.
         */
        public function maybe_hijack_page_template(\WP_Query $query)
        {
        }
        /**
         * Remove any possible comments template from Page that the theme might have.
         *
         * @todo  Take in consideration tribe_get_option( 'showComments', false ) values later on.
         *
         * @since  4.9.2
         *
         * @return bool  False to remove comments on the Event Page template.
         */
        public function filter_remove_comments()
        {
        }
        /**
         * Determines if we have hijacked posts for this request.
         *
         * @since  5.0.2
         *
         * @return bool Did we hijack posts on this request.
         */
        public function has_hijacked_posts()
        {
        }
        /**
         * Gets the hijacked posts that we stored.
         *
         * @since  5.0.2
         *
         * @return array[ WP_Post ] Posts that we hijacked earlier.
         */
        public function get_hijacked_posts()
        {
        }
        /**
         * Sets the hijacked posts for later restoring.
         *
         * @since  5.0.2
         *
         * @param array[WP_Post] $posts Which posts to be set as the one hijacked.
         *
         * @return void                 No return when setting hijacked posts.
         */
        public function set_hijacked_posts(array $posts)
        {
        }
        /**
         * Prevents the Edit link to ever be displayed on any well designed theme.
         * Ideally this method is here to return an empty string for the Mock Page.
         *
         * @since  4.9.2
         *
         * @param  string     $url     Old URL for editing the post
         * @param  string|int $post_id Post ID in question
         *
         * @return string              Modify the link to return nothing for when we hijacked the page.
         */
        public function filter_prevent_edit_link($url, $post_id)
        {
        }
        /**
         * Inject a Ghost Post into `the_post`
         *
         * @since  4.9.2
         *
         * @return void  Action hook with no return.
         */
        public function hijack_the_post()
        {
        }
        /**
         * Depending on params from Default templating for events we will Hijack the main query for events to mimic a
         * ghost page element so the theme can properly run `the_content` so we can hijack the content of that page as
         * well as `the_title`.
         *
         * @since  4.9.2
         *
         * @return boolean Whether we hijacked the main query or not.
         */
        public function maybe_hijack_main_query()
        {
        }
        /**
         * Restored the Hijacked posts from the main query so that we can run
         * the template method properly with a fully populated WP_Query object.
         *
         * @global WP_Query $wp_query Global WP query we are dealing with.
         *
         * @since 4.9.2
         *
         * @return void Action hook with no return.
         */
        public function restore_main_query()
        {
        }
        /**
         * Prevents Looping multiple pages when including Page templates by modifying the global WP_Query object by
         * pretending there are no posts to loop
         *
         * @since 4.9.2
         *
         * @return void Action hook with no return.
         */
        protected function prevent_page_looping()
        {
        }
        /**
         * Include our own Page template into `the_content` of their Page template
         *
         * @todo  Integrate with Template + Context classes
         *
         * @since  4.9.2
         *
         * @param  string $content Default content of the page we hijacked
         *
         * @return string          HTML for the view when using Page Template.
         */
        public function filter_hijack_page_content($content = '')
        {
        }
        /**
         * When using Page template we need to specifically hijack the WordPress templating
         * system at a specific point after `loop_start`.
         *
         * @since  4.9.2
         *
         * @param  WP_Query $query WordPress query executed to get here.
         *
         * @return boolean         Should we hijack to use page template.
         */
        public function should_hijack_page_template(\WP_Query $query)
        {
        }
        /**
         * Object to allow the Bootstrap to manipulate page Requests and avoid 404s when
         * no events are available by default.
         *
         * @since  4.9.2
         *
         * @return object A Mocked stdClass that mimics a WP_Post.
         */
        protected function get_mocked_page()
        {
        }
    }
    /**
     * Class JSON_LD
     *
     * @since 5.0.3
     *
     * @package Tribe\Events\Views\V2\Template
     */
    class JSON_LD
    {
        /**
         * Fires to Print JSON LD to Single Event.
         *
         * @since 5.0.3
         */
        public function print_single_json_ld()
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Utils {
    /**
     * Class Utils View
     * @since   4.9.4
     * @package Tribe\Events\Views\V2\Utils
     */
    class View
    {
        /**
         * Reads a view data entry from the current request.
         *
         * @since 4.9.4
         *
         * @param string|array $indexes One ore more indexes to check for in the view data.
         * @param null|mixed   $default The default value to return if the data is not found.
         *
         * @return mixed|null The view data, if found, or a default value.
         */
        public static function get_data($indexes, $default = null)
        {
        }
        /**
         * Based on the `permalink_structure` determines which variable the view should read `event_display_mode` for past
         * URL management.
         *
         * @since 5.0.0
         *
         * @return string URL Query Variable Key
         */
        public static function get_past_event_display_key()
        {
        }
        /**
         * Cleans the View data that will be printed by the `components/data.php` template to avoid its mangling.
         *
         * By default, the View data is a copy of the View template variables, to avoid the mangling of the JSON data
         * some entries of the data might require to be removed, some might require to be formatted or escaped.
         *
         * @since 5.1.5
         *
         * @param array<string,string|array> $view_data The initial View data.
         *
         * @return array<string,string|array> The filtered View data, some entries removed from it to avoid the data script
         *                                    being mangled by escaping and texturizing functions running on it.
         */
        public static function clean_data($view_data)
        {
        }
    }
    /**
     * Class Stack
     *
     * @since   4.9.7
     * @package Tribe\Events\Views\V2\Utils
     */
    class Stack
    {
        /**
         * The current day, in the `Y-m-d` format.
         *
         * @since 4.9.7
         *
         * @var int|string
         */
        protected $current_day;
        /**
         * The current day events, a list of event post IDs.
         *
         * @since 4.9.7
         *
         * @var array
         */
        protected $day_events;
        /**
         * An associative array relating each event ID to its current position in the stack.
         *
         * @var array
         */
        protected $stack_positions;
        /**
         * The current stack.
         *
         * @since 4.9.7
         *
         * @var array
         */
        protected $stack;
        /**
         * Whether to "recycle" the empty stack spaces, where possible, or not..
         *
         * @since 4.9.7
         *
         * @var bool
         */
        protected $recycle_space;
        /**
         * The spacer currently used to mark empty spaces in the stack.
         *
         * @since 4.9.7
         *
         * @var mixed
         */
        protected $spacer;
        /**
         * A flag to indicate whether the stack elements should be normalized or not.
         *
         * @since 4.9.7
         *
         * @var bool
         */
        protected $normalize_stack;
        /**
         * Builds and returns the stack for a group of events, divided by days.
         *
         * @since 4.9.7
         *
         * @param array      $events_by_day   An array of events, per-day, in the shape `[ <Y-m-d> => [ ...<event_ids> ] ]`.
         *
         * @param null|mixed $spacer          The spacer that should be used to indicate an empty space in the stack.
         *                                    Defaults to the filtered spacer.
         * @param null|bool  $recycle_space   Whether to recycle spaces or not; defaults to the filtered value.
         * @param null|bool $normalize_stack  Whether to normalize the stack by padding the bottom of it with spacers or
         *                                    not; defaults to the filtered value.
         *
         * @return array An associative array of days, each with the events "stacked", including spacers, in the shape:
         *               `[
         *                  <Y-m-d> => [<event_1>, <event_2>, <spacer> ],
         *                  <Y-m-d> => [<event_1>, <event_2>, <event_3> ],
         *                  <Y-m-d> => [<event_1>, <spacer>, <event_3> ],
         *                ]`
         *              and so on. Each stack column (a day) will be padded with spacers to have consistent stack height
         *               which means that all arrays in the stack will have the same length.
         */
        public function build_from_events(array $events_by_day = [], $spacer = null, $recycle_space = null, $normalize_stack = null)
        {
        }
        /**
         * Returns the "spacer" used to indicate an empty space in the stack.
         *
         * @since 4.9.7
         *
         * @return mixed The spacer used to indicate an empty space in the stack.
         */
        public function get_spacer()
        {
        }
        /**
         * Filters and returns a value indicating whether the stack should be built "recycling" spaces or not.
         *
         * @since 4.9.7
         *
         * @param array $events_by_day An array of event IDs, divided by day, with shape `[ <Y-m-d> => [...<events>] ]`.
         *
         * @return bool Whether the stack should be built "recycling" spaces or not.
         */
        protected function should_recycle_spaces(array $events_by_day = [])
        {
        }
        /**
         * Builds and returns the stack for the current day.
         *
         * @since 4.9.7
         *
         * @param string $current_day    The current day date, in the `Y-m-d` format.
         * @param array  $the_day_events All the current day event post IDs.
         *
         * @return array The stack for the current day in the shape `[ <event_id>, <spacer>, <event_id>, ...]`.
         */
        protected function build_day_stack($current_day, array $the_day_events)
        {
        }
        /**
         * Filters an array of events to remove any event that should not be in the stack.
         *
         * The default filtering strategy, in the `filter_stack_event` method, will filter out any non multi-day event.
         * If, in the future, we'll need to change this strategy then either extend the class or use the .
         *
         * @since 4.9.7
         *
         * @param array $events An array of events, post objects or post IDs, to filter.
         *
         * @return array The filtered array of events.
         */
        protected function filter_stack_events($events)
        {
        }
        /**
         * Parses, and sets if required, the stack positions of each event, in the current day, in the stack.
         *
         * @since 4.9.7
         */
        protected function assign_day_events_position()
        {
        }
        /**
         * Normalizes the day stack by adding spacers in each empty position.
         *
         * @since 4.9.7
         *
         * @return array The day stack with each position, starting from the `0` position, filled with either an event ID or
         *               a spacer.
         */
        protected function fill_day_stack()
        {
        }
        /**
         * Normalize the stack by adding padding each stack day to make sure all days are present and have the same length.
         *
         * @since 4.9.7
         */
        protected function normalize_stack()
        {
        }
        /**
         * Checks an event to ensure it should be part of the stack.
         *
         * The default strategy is to filter out any non multi-day event, but extending classes can change this.
         *
         * @since 4.9.7
         *
         * @param int|\WP_Post $event The event post object or ID.
         *
         * @return bool Whether teh event should be part of the stack or not.
         */
        protected function filter_stack_event($event)
        {
        }
        /**
         * Returns the filtered value to decide if the stack should be normalized or not padding each element with spacers
         * to the same height as the one of the stack elements with more events in it or not.
         *
         * @since 4.9.7
         *
         * @param array $events_by_day An array of event IDs, divided by day, with shape `[ <Y-m-d> => [...<events>] ]`.
         *
         * @return bool Whether the stack should be normalized by padding each one of its elements with spacers at the
         *              bottom or not.
         */
        protected function should_normalize_stack(array $events_by_day = [])
        {
        }
        /**
         * Adds the missing days in the passed events by day to make sure all dates in the period will appear.
         *
         * @since 4.9.7
         *
         * @param array $events_by_day The events part of the stack, divided by day.
         *
         * @return array The events part of the stack, divided by day with added missing days, if any.
         */
        protected function add_missing_days(array $events_by_day)
        {
        }
        /**
         * Assigns to each event the first available position in the day stack.
         *
         * This method will "fill" empty spaces in the stack to recycle the space.
         *
         * @since 4.9.9
         *
         * @param array $stack_positions        The currently assigned stack positions, in the shape
         *                                      `[ <id> => <position> ]`.
         * @param array $wo_position            An array of event post IDs for events that do not have a position assigned
         *                                      in the day stack.
         *
         * @return array An updated array of stack positions, in the shape `[ <id> => <position> ]`.
         */
        protected function assign_open_positions(array $stack_positions, array $events)
        {
        }
        /**
         * Assigns a stack postion to each event w/o one not recycling space.
         *
         * @since 4.9.9
         *
         * @param array $stack_positions The current stack positions.
         * @param array $event_ids       The events to position in the stack, events that already have a position will not
         *                               be re-positioned.
         *
         * @return array The finalized stack positions, where each event has been assigned a position in the stack.
         */
        protected function assign_next_positions(array $stack_positions, array $event_ids)
        {
        }
    }
    /**
     * Class Utils Separators
     * @since   4.9.4
     * @package Tribe\Events\Views\V2\Utils
     */
    class Separators
    {
        /**
         * Determines if a given event from a list of events should have a month separator
         * for the List view template structure.
         *
         * Note that events will NOT be sorted by date for this check: this is by design. There are other criteria by which
         * events might be sorted this method should not interfere with.
         * The method will perform the check using the "display" date of the events since this is a front-end facing method.
         *
         * @since  4.9.4
         *
         * @param array                          $events       WP_Post or numeric ID for events.
         * @param \WP_Post|int                   $event        Event we want to check.
         * @param string|\DateTimeInterface|null $request_date A request date that should be used as context for the
         *                                                     evaluation.
         *
         * @return boolean Whether the event, in the context of this event set, should show the month separator or not.
         */
        public static function should_have_month($events, $event, $request_date = null)
        {
        }
        /**
         * Determines if a given event from a list of events should have a day separator
         * for some List view template structures (such as month view mobile/widget).
         *
         * Note that events will NOT be sorted by date for this check: this is by design. There are other criteria by which
         * events might be sorted this method should not interfere with.
         * The method will perform the check using the "display" date of the events since this is a front-end facing method.
         *
         * @since  4.6.0
         *
         * @param array                          $events       WP_Post or numeric ID for events.
         * @param \WP_Post|int                   $event        Event we want to check.
         * @param string|\DateTimeInterface|null $request_date A request date that should be used as context for the
         *                                                     evaluation.
         *
         * @return boolean Whether the event, in the context of this event set and request date, should show the separator or not.
         */
        public static function should_have_day($events, $event, $request_date = null)
        {
        }
        /**
         * Determines if a given event from a list of events should have a time separator
         * for the Day view template structure. Rounded down to the hour.
         *
         * @since  4.9.5
         *
         * @param  array       $events WP_Post or numeric ID for events.
         * @param  \WP_Post|int $event  Event we want to check.
         *
         * @return boolean
         */
        public static function should_have_time($events, $event)
        {
        }
        /**
         * Determines if a given event from a list of events should have a type separator
         * for the day view template structure.
         *
         * @since  4.9.11
         *
         * @param  array       $events WP_Post or numeric ID for events.
         * @param  WP_Post|int $event  Event we want to determine.
         *
         * @return boolean
         */
        public static function should_have_type(array $events, \WP_Post $event)
        {
        }
    }
}
namespace Tribe\Events\Views\V2 {
    /**
     * Class Customizer
     *
     * @since   5.3.1
     *
     * @package Tribe\Events\Views\V2
     */
    class Customizer
    {
        /**
         * Adds new settings/controls to the Global Elements section via the hook in common.
         *
         * @since 5.3.1
         *
         * @param \Tribe__Customizer__Section $section    The Global Elements Customizer section.
         * @param WP_Customize_Manager        $manager    The settings manager.
         * @param \Tribe__Customizer          $customizer The Customizer object.
         */
        public function include_global_elements_settings($section, $manager, $customizer)
        {
        }
        /**
         * Adds new settings/controls to the Single Events section via the hook in common.
         *
         * @since 5.3.1
         *
         * @param \Tribe__Customizer__Section $section    The Single Events Customizer section.
         * @param WP_Customize_Manager        $manager    The settings manager.
         * @param \Tribe__Customizer          $customizer The Customizer object.
         */
        public function include_single_event_settings($section, $manager, $customizer)
        {
        }
        /**
         * Filters the Global Elements section CSS template to add Views v2 related style templates to it.
         *
         * @since 5.3.1
         *
         * @param string                      $css_template The CSS template, as produced by the Global Elements.
         * @param \Tribe__Customizer__Section $section      The Global Elements section.
         * @param \Tribe__Customizer          $customizer   The current Customizer instance.
         *
         * @return string The filtered CSS template.
         */
        public function filter_global_elements_css_template($css_template, $section, $customizer)
        {
        }
        /**
         * Filters the Single Event section CSS template to add Views v2 related style templates to it.
         *
         * @since 5.3.1
         *
         * @param string                      $css_template The CSS template, as produced by the Single Event.
         * @param \Tribe__Customizer__Section $section      The Single Event section.
         * @param \Tribe__Customizer          $customizer   The current Customizer instance.
         *
         * @return string The filtered CSS template.
         */
        public function filter_single_event_css_template($css_template, $section, $customizer)
        {
        }
        /**
         * Enqueues Customizer controls styles specific to Views v2 components.
         *
         * @since 5.4.0
         */
        public function enqueue_customizer_controls_styles()
        {
        }
        /**
         * Check whether the Single Event styles overrides can be applied
         *
         * @return false/true
         */
        public function should_add_single_view_v2_styles()
        {
        }
    }
    /**
     * Class Url
     *
     * @package Tribe\Events\Views\V2
     * @since   4.9.2
     */
    class Url
    {
        /**
         * The URL abstracted by the instance.
         *
         * @since 4.9.3
         *
         * @var string
         */
        protected $url = '';
        /**
         * An array of the default URL components produced by the `parse_url` function.
         *
         * @since 4.9.3
         *
         * @var array
         */
        protected static $default_url_components = ['scheme' => '', 'host' => '', 'port' => '', 'user' => '', 'pass' => '', 'path' => '', 'query' => '', 'fragment' => ''];
        /**
         * An array of the URL components as produced by the `parse_url` function.
         *
         * @since 4.9.3
         *
         * @var array
         */
        protected $components = [];
        /**
         * An array of the parsed query arguments from the URL.
         *
         * @since 4.9.3
         *
         * @var array
         */
        protected $query_args = [];
        /**
         * A flag to define how conflicts between parameters set in the query arguments and parameters set by the path
         * should be resolved.
         * If `false` then arguments parsed from the path will override the query ones, if `false` the arguments parsed from
         * the query will override the path ones.
         *
         * @var bool
         */
        protected $query_overrides_path = false;
        /**
         * Url constructor.
         *
         * @param null|string $url The url to build the object with or `null` to use the current URL.
         * @param bool $query_overrides_path A flag to define how conflicts between parameters set in the query
         *                                   arguments and parameters set by the path should be resolved.
         */
        public function __construct($url = null, $query_overrides_path = false)
        {
        }
        /**
         * Returns the slug of the view as defined in the URL.
         *
         * @since 4.9.2
         *
         * @return mixed|string The view slug as defined in the URL.
         */
        public function get_view_slug()
        {
        }
        /**
         * Returns the full URL this instance was built on.
         *
         * @since 4.9.3
         *
         * @return string The full URL this instance was built on; an empty string if the URL is not set.
         */
        public function __toString()
        {
        }
        /**
         * Returns the current page number for the URL.
         *
         * @since 4.9.3
         *
         * @return int The current page number if specified in the URL or the default value.
         */
        public function get_current_page()
        {
        }
        /**
         * Returns the current query arguments
         *
         * @since 4.9.3
         *
         * @return array Returns the current Query Arguments
         */
        public function get_query_args()
        {
        }
        /**
         * Parses the current URL and initializes its components.
         *
         * @since 4.9.3
         *
         * @return Url This object instance.
         */
        public function parse_url()
        {
        }
        /**
         * Adds query args to the object merging them witht the current ones.
         *
         * @since 4.9.3
         *
         * @param array $query_args An associative array of query args to add to the object.
         *
         * @return $this The object instance.
         */
        public function add_query_args(array $query_args = [])
        {
        }
        /**
         * Sets whether the parameters set in the query should override the ones parsed by the path or not.
         *
         * By default path parameters will take precedence over query parameters.
         * When set to `false`  then `/events/list?eventDisplay=month` will result in an `eventDisplay=list`;
         * when set to `true` the resulting `eventDisplay` will be `month`.
         *
         * @since 4.9.3
         *
         * @param bool $query_overrides_path Whether the parameters set in the query should override the ones parsed by the
         *                                   path or not.
         *
         * @return Url This object instance to chain method calls.
         */
        public function query_overrides_path($query_overrides_path)
        {
        }
        /**
         * Returns the alias of the variable set in the Url query args, if any.
         *
         * @since 4.9.4
         *
         * @param              string $var The name of the variable to search an alias for.
         * @param Context|null $context The Context object to use to fetch locations, if `null` the global Context will be
         *                              used.
         *
         * @return false|string The variable alias set in the URL query args, or `false` if no alias was found.
         */
        public function get_query_arg_alias_of($var, \Tribe__Context $context = null)
        {
        }
        /**
         * Returns the value of a query arg set on the URL, or a default value if not found.
         *
         * @since 4.9.4
         *
         * @param      string $key The
         * @param null $default
         *
         * @return mixed
         */
        public function get_query_arg($key, $default = null)
        {
        }
        /**
         * Returns all the aliases of the variable set in the Url query args, if any.
         *
         * @since 4.9.9
         *
         * @param string       $var     The name of the variable to search the aliases for.
         * @param Context|null $context The Context object to use to fetch locations, if `null` the global Context will be
         *                              used.
         *
         * @return array An array of the variable aliases set in the URL query args.
         */
        public function get_query_args_aliases_of($var, \Tribe__Context $context = null)
        {
        }
        /**
         * Builds and returns an instance of the object taking care to parse additional parameters to use the correct URL.
         *
         * @since 4.9.10
         *
         * @param string $url The URL address to build the object on.
         * @param array  $params An array of additional parameters to parse; these parameters might be more up to date in
         *                       respect to the `$url` argument and will be used to build an instance of the class on the
         *                       correct URL. Passing an empty array here is, in fact, the same as calling
         *                       `new Url( $url )`;
         *
         * @return static The built instance of this class.
         */
        public static function from_url_and_params($url = null, array $params = [])
        {
        }
        /**
         * Differentiates two URLs with knowledge of rewrite rules to check if, resolved request arguments wise, they are
         * the same or not.
         *
         * @since 4.9.11
         *
         * @param string $url_a  The first URL to check.
         * @param string $url_b  The second URL to check.
         * @param array  $ignore An array of resolved query arguments that should not be taken into account in the check.
         *
         * @return bool Whether the two URLs, resolved request arguments wise, they are the same or not.
         */
        public static function is_diff($url_a, $url_b, array $ignore = [])
        {
        }
    }
    /**
     * Class Kitchen_Sink
     *
     * @package Tribe\Events\Views\V2
     * @since   4.9.2
     */
    class Kitchen_Sink extends \Tribe__Template
    {
        /**
         * Setup the Kitchen Sink Template constructor.
         *
         * @since 4.9.2
         */
        public function __construct()
        {
        }
        /**
         * Gets the available pages for the Kitchen sink code
         *
         * @since  4.9.2
         *
         * @return array
         */
        public function get_available_pages()
        {
        }
        /**
         * Add the events kitchen sink variable to the WP Query Vars
         *
         * @since  4.9.2
         *
         * @param  array $vars query vars array
         *
         * @return array
         */
        public function filter_register_query_vars($vars = [])
        {
        }
        /**
         * Add the rewrite rules for Kitchen Sink URL
         *
         * @since 4.9.2
         *
         * @param \Tribe__Events__Rewrite $rewrite
         *
         * @return void
         */
        public function generate_rules(\Tribe__Events__Rewrite $rewrite)
        {
        }
    }
    /**
     * Class Views Manager
     *
     * @package Tribe\Events\Views\V2
     * @since   4.9.4
     */
    class Manager
    {
        /**
         * The name of the Tribe option the enabled/disabled flag for
         * View v2 will live in.
         *
         * @var string
         */
        public static $option_enabled = 'views_v2_enabled';
        /**
         * The name of the Tribe option the default Views v2 slug will live in.
         *
         * @since 4.9.11 Use v1 option.
         *
         * @var string
         */
        public static $option_default = 'viewOption';
        /**
         * The name of the Tribe option the default mobile Views v2 slug will live in.
         *
         * @since 4.9.11 Use v1 option.
         *
         * @var string
         */
        public static $option_mobile_default = 'mobile_default_view';
        /**
         * Returns an associative array of Views currently registered.
         *
         * @since  4.9.4
         *
         * @return array An array in the shape `[ <slug> => <View Class> ]`.
         */
        public function get_registered_views()
        {
        }
        /**
         * Get the class name for the default registered view.
         *
         * The use of the `wp_is_mobile` function is not about screen width, but about payloads and how "heavy" a page is.
         * All the Views are responsive, what we want to achieve here is serving users a version of the View that is
         * less "heavy" on mobile devices (limited CPU and connection capabilities).
         * This allows users to, as an example, serve the Month View to desktop users and the day view to mobile users.
         *
         * @since  4.9.4
         *
         * @param string|null $type The type of default View to return, either 'desktop' or 'mobile'; defaults to `mobile`.
         *
         * @return string The default View slug, this value could be different depending on the requested `$type` or
         *                the context.
         *
         * @see wp_is_mobile()
         * @link https://developer.wordpress.org/reference/functions/wp_is_mobile/
         */
        public function get_default_view_option($type = null)
        {
        }
        /**
         * Get the class name for the default registered view.
         *
         * @since  4.9.4
         *
         * @return bool|string Returns boolean false when no views are registered or default not found.
         */
        public function get_default_view()
        {
        }
        /**
         * Returns an associative array of Views currently registered that are publicly visible.
         *
         * @since  4.9.4
         *
         * @return array An array in the shape `[ <slug> => <View Class> ]`.
         */
        public function get_publicly_visible_views()
        {
        }
        /**
         * Returns an array of data of the public views.
         *
         * @since 5.0.0
         *
         * @return array
         */
        public function get_publicly_visible_views_data()
        {
        }
        /**
         * Returns the slug and class of a given view, accepts slug or class.
         * Will return false for both in case both fail.
         *
         * @since 4.9.4
         *
         * @param string $requested_view The view slug or fully qualified class name
         *
         * @return array  Formatted [ (string|bool) $view_slug, (string|bool) $view_class ]
         */
        public function get_view($requested_view)
        {
        }
        /**
         * Returns the slug currently associated to a View class, if any.
         *
         * @since 4.9.4
         *
         * @param string $view_class The view fully qualified class name.
         *
         * @return int|string|false  The slug currently associated to a View class if it is found, `false` otherwise.
         */
        public function get_view_slug_by_class($view_class)
        {
        }
        /**
         * Returns the class currently associated to a View slug, if any.
         *
         * @since 4.9.4
         *
         * @param  string $slug The view slug.
         *
         * @return string|false The class currently associated to a View slug if it is found, `false` otherwise.
         */
        public function get_view_class_by_slug($slug)
        {
        }
        /**
         * Returns the view label based on the fully qualified class name.
         *
         * @since 5.0.0
         *
         * @param  string $view_class The view fully qualified class name.
         *
         * @return string|false The label associated with a given View.
         */
        public function get_view_label_by_class($view_class)
        {
        }
        /**
         * Returns the view label based on the view slug.
         *
         * @since 5.0.0
         *
         * @param  string $slug The view slug.
         *
         * @return string|false The label associated with a given View.
         */
        public function get_view_label_by_slug($slug)
        {
        }
        /**
         * Prepare the view Label with filters for the domain and label.
         *
         * @param  string $slug       The view slug.
         * @param  string $view_class The view fully qualified class name.
         *
         * @return string             The filtered label associated with a given View.
         */
        protected function prepare_view_label($slug, $view_class)
        {
        }
    }
    /**
     * Class View
     *
     * @package Tribe\Events\Views\V2
     * @since   4.9.2
     */
    class View implements \Tribe\Events\Views\V2\View_Interface
    {
        use \Tribe\Events\Views\V2\Views\Traits\Breakpoint_Behavior;
        use \Tribe\Events\Views\V2\Views\Traits\HTML_Cache;
        use \Tribe\Events\Views\V2\Views\Traits\iCal_Data;
        use \Tribe\Events\Views\V2\Views\Traits\Json_Ld_Data;
        /**
         * An instance of the DI container.
         *
         * @var Container
         */
        protected static $container;
        /**
         * The slug of the not found view.
         *
         * @var string
         */
        protected $not_found_slug;
        /**
         * An instance of the context the View will use to render, if any.
         *
         * @var Context
         */
        protected $context;
        /**
         * The slug of the View instance, usually the one it was registered with in the `tribe_events_views`filter.
         *
         * This value will be set by the `View::make()` method while building a View instance.
         *
         * @var string
         */
        protected $slug = '';
        /**
         * The template slug the View instance will use to locate its template files.
         *
         * This value will be set by the `View::make()` method while building a View instance.
         *
         * @var string
         */
        protected $template_slug;
        /**
         * The template path will be used as a prefix for template slug when locating its template files.
         *
         * @since 5.2.1
         *
         * @var string
         */
        protected $template_path = '';
        /**
         * The Template instance the view will use to locate, manage and render its template.
         *
         * This value will be set by the `View::make()` method while building a View instance.
         *
         * @var Template
         */
        protected $template;
        /**
         * The repository object the View is currently using.
         *
         * @var Repository
         */
        protected $repository;
        /**
         * The URL object the View is currently.
         *
         * @var Url
         */
        protected $url;
        /**
         * An associative array of global variables backed up by the view before replacing the global loop.
         *
         * @since 4.9.3
         *
         * @var array
         */
        protected $global_backup;
        /**
         * Whether a given View is visible publicly or not.
         *
         * @since 4.9.4
         * @since 4.9.11 Made the property static.
         *
         * @var bool
         */
        protected static $publicly_visible = false;
        /**
         * An associative array of the arguments used to setup the repository filters.
         *
         * @since 4.9.3
         *
         * @var array
         */
        protected $repository_args = [];
        /**
         * The key that should be used to indicate the page in an archive.
         * Extending classes should not need to modify this.
         *
         * @since 4.9.4
         *
         * @var string
         */
        protected $page_key = 'paged';
        /**
         * Indicates whether there are more events beyond the current view
         *
         * @since 5.0.0
         *
         * @var bool
         */
        protected $has_next_event = false;
        /**
         * Whether the View instance should manage the URL
         *
         * @since 4.9.7
         *
         * @var bool
         */
        protected $should_manage_url = true;
        /**
         * An collection of user-facing messages the View should display.
         *
         * @since 4.9.11
         *
         * @var Messages
         */
        protected $messages;
        /**
         * Whether this View should reset the page/pagination or not.
         * This acts as an instance cache for the `View::should_reset_page` method.
         *
         * @since 4.9.11
         *
         * @var bool
         */
        protected $should_reset_page;
        /**
         * Whether the View should display the events bar or not.
         *
         * @since 4.9.11
         *
         * @var bool
         */
        protected $display_events_bar = true;
        /**
         * The instance of the rewrite handling class to use.
         * Extending classes can override this to use more specific rewrite handlers (e.g. PRO Views).
         *
         * @since 4.9.13
         *
         * @var TEC_Rewrite
         */
        protected $rewrite;
        /**
         * A flag property to indicate whether the View date is part of the "pretty" URL (true) or is supported only as
         * a query argument like. `tribe-bar-date` (false).
         *
         * @var bool
         */
        protected static $date_in_url = true;
        /**
         * Cached URLs
         *
         * @since 5.0.0
         *
         * @var array
         */
        protected $cached_urls = [];
        /**
         * View constructor.
         *
         * @since 4.9.11
         *
         * @param Messages|null $messages An instance of the messages collection.
         */
        public function __construct(\Tribe\Events\Views\V2\Messages $messages = null)
        {
        }
        /**
         * Builds a View instance in response to a REST request to the Views endpoint.
         *
         * @since 4.9.2
         *
         * @param \WP_REST_Request $request
         *
         * @return \Tribe\Events\Views\V2\View_Interface
         */
        public static function make_for_rest(\WP_REST_Request $request)
        {
        }
        /**
         * Builds and returns an instance of a View by slug or class.
         *
         * @since  4.9.2
         *
         * @param  string        $view     The view slug, as registered in the `tribe_events_views` filter, or class.
         * @param  Context|null  $context  The context this view should render from; if not set then the global
         *                                 one will be used.
         *
         * @return View_Interface An instance of the built view.
         */
        public static function make($view = null, \Tribe__Context $context = null)
        {
        }
        /**
         * Sets the DI container the class should use to build views.
         *
         * @param Container $container The DI container instance to use.
         *
         * @since 4.9.2
         *
         */
        public static function set_container(\Tribe__Container $container)
        {
        }
        /**
         * Sends, echoing it and exiting, the view HTML on the page.
         *
         * @since 4.9.2
         *
         * @param null|string $html A specific HTML string to print on the page or the HTML produced by the view
         *                          `get_html` method.
         *
         */
        public function send_html($html = null)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_html()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_label()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_context()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function set_context(\Tribe__Context $context = null)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_slug()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_template_path()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_parents_slug()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_html_classes(array $classes = [])
        {
        }
        /**
         * {@inheritDoc}
         */
        public function set_slug($slug)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_template()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function set_template(\Tribe\Events\Views\V2\Template $template)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_url($canonical = false, $force = false)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function next_url($canonical = false, array $passthru_vars = [])
        {
        }
        /**
         * {@inheritDoc}
         */
        public function prev_url($canonical = false, array $passthru_vars = [])
        {
        }
        /**
         * Filters URL query args with a predictable filter
         *
         * @since 5.0.0
         *
         * @param array $query_args An array of query args that will be used to build the URL for the View.
         * @param bool  $canonical  Whether the URL should be the canonical one or not.
         *
         * @return array            Filtered array of query arguments.
         */
        public function filter_query_args($query_args, $canonical)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_url_object()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function set_repository(\Tribe__Repository__Interface $repository = null)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_repository()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function setup_the_loop(array $args = [])
        {
        }
        /**
         * {@inheritDoc}
         */
        public function restore_the_loop()
        {
        }
        /**
         * Sets a View URL object either from some arguments or from the current URL.
         *
         * @since 4.9.3
         *
         * @param array|null $args   An associative array of arguments that will be mapped to the corresponding query
         *                           arguments by the View, or `null` to use the current URL.
         * @param bool       $merge  Whether to merge the arguments or override them.
         */
        public function set_url(array $args = null, $merge = false)
        {
        }
        /**
         * Maps a set of arguments to query arguments, ready to be appended to a URL.
         *
         * @since 4.9.3
         *
         * @param  array  $args An associative array of arguments to map (translate) to query arguments.
         *
         * @return array An associative array of query arguments mapped from the input ones.
         */
        protected function map_args_to_query_args(array $args = null)
        {
        }
        /**
         * Filters the array of values that a View will set on the Template before rendering it.
         *
         * Template variables are exported, alongside being set, in the template context: the keys of the variables array
         * will become the names of the exported variables.
         *
         * @since 4.9.3
         *
         * @param array $template_vars An associative array of variables that will be set, and exported, in the template.
         *
         * @return array An associative array of variables that will be set, and exported, in the template.
         */
        protected function filter_template_vars(array $template_vars)
        {
        }
        /**
         * Sets up the View repository arguments from the View context or a provided Context object.
         *
         * @since 4.9.3
         *
         * @param  Context|null $context A context to use to setup the args, or `null` to use the View Context.
         *
         * @return array The arguments, ready to be set on the View repository instance.
         */
        protected function setup_repository_args(\Tribe__Context $context = null)
        {
        }
        /**
         * Filters the offset value separate from the posts_per_page/paged calculation.
         *
         * This allows us to save a query when determining pagination for list-like views.
         *
         * @since 5.0.0
         *
         * @param null|int $offset_override Offset override value.
         * @param \WP_Query $query WP Query object.
         *
         * @return null|int
         */
        public function filter_repository_query_arg_offset_override($offset_override, $query)
        {
        }
        /**
         * Filters the current URL returned for a specific View.
         *
         * @since 4.9.3
         *
         * @param  bool $canonical Whether the normal or canonical version of the next URL is being requested.
         * @param string $url The previous URL, this could be an empty string if the View does not have a next.
         *
         * @return string The filtered previous URL.
         */
        protected function filter_view_url($canonical, $url)
        {
        }
        /**
         * Filters the previous (page, event, etc.) URL returned for a specific View.
         *
         * @since 4.9.3
         *
         * @param  bool $canonical Whether the normal or canonical version of the next URL is being requested.
         * @param string $url The previous URL, this could be an empty string if the View does not have a next.
         *
         * @return string The filtered previous URL.
         */
        protected function filter_prev_url($canonical, $url)
        {
        }
        /**
         * Filters the next (page, event, etc.) URL returned for a specific View.
         *
         * @since 4.9.3
         *
         * @param  bool $canonical Whether the normal or canonical version of the next URL is being requested.
         * @param string $url The next URL, this could be an empty string if the View does not have a next.
         *
         * @return string The filtered next URL.
         */
        protected function filter_next_url($canonical, $url)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function found_post_ids()
        {
        }
        /**
         * {@inheritDoc}
         */
        public static function is_publicly_visible()
        {
        }
        /**
         * Sets the has_next_event boolean flag, which determines if we have events in the next page.
         *
         * This flag is required due to being required to optimize the determination of whether
         * there are future events, we increased events_per_page by +1 during setup_repository_args. Because of that
         * if the number of events returned are greater than events_per_page, we need to
         * pop an element off the end and set a boolean.
         *
         * @since 5.0.0
         *
         * @param boolean $value Which value will be set to has_next_event, will be casted as boolean.
         *
         * @return mixed         Value passed after being saved and casted as boolean.
         */
        public function set_has_next_event($value)
        {
        }
        /**
         * Determines from a given array of events if we have next events or not.
         *
         * @since 5.0.0
         *
         * @param array   $events          Array that will be counted to verify if we have events.
         * @param boolean $overwrite_flag  If we should overwrite the flag when we discover the result.
         *
         * @return mixed                   Weather the array of events has a next page.
         */
        public function has_next_event(array $events, $overwrite_flag = true)
        {
        }
        /**
         * Sets up the View template variables.
         *
         * @since 4.9.4
         * @since 5.2.1 Add the `rest_method` to the template variables.
         *
         * @return array An array of Template variables for the View Template.
         */
        protected function setup_template_vars()
        {
        }
        /**
         * Filters the repository arguments that will be used to set up the View repository instance.
         *
         * @since 4.9.5
         *
         * @param array        $repository_args The repository arguments that will be used to set up the View repository instance.
         * @param Context|null $context Either a specific Context or `null` to use the View current Context.
         *
         * @return array The filtered repository arguments.
         */
        protected function filter_repository_args(array $repository_args, \Tribe__Context $context = null)
        {
        }
        /**
         * Returns the View request URI.
         *
         * This value can be used to set the `$_SERVER['REQUEST_URI']` global when rendering the View to make sure WordPress
         * functions relying on that value will work correctly.
         *
         * @since 4.9.5
         *
         * @return string The View request URI, a value suitable to be used to set the `$_SERVER['REQUEST_URI']` value.
         */
        protected function get_request_uri()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_template_slug()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function set_template_slug($template_slug)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_template_vars()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_today_url($canonical = false)
        {
        }
        /**
         * Builds the link label to use from the URL.
         *
         * This is usually used to build the next and prev link URLs labels.
         * Extending classes can customize the format of the the label by overriding the `get_label_format` method.
         *
         * @todo  @bordoni move this method to a supporting class.
         *
         * @see View::get_label_format(), the method child classes should override to customize the link label format.
         *
         * @since 4.9.9
         *
         * @param string $url The input URL to build the link label from.
         *
         * @return string The formatted and localized, but not HTML escaped, link label.
         */
        public function get_link_label($url)
        {
        }
        /**
         * Returns the date format, a valid PHP `date` function format, that should be used to build link labels.
         *
         * This format will, usually, apply to next and previous links.
         *
         * @todo  @bordoni move this method to a supporting class.
         *
         * @see View::get_link_label(), the method using this method to build a link label.
         * @see date_i18n() as the formatted date will, then, be localized using this method.
         *
         * @since 4.9.9
         *
         * @return string The date format, a valid PHP `date` function format, that should be used to build link labels.
         */
        protected function get_label_format()
        {
        }
        /**
         * Gets this View title, the one that will be set in the `title` tag of the page.
         *
         * @since 4.9.10
         *
         * @param  array $events An array of events to generate the title for.
         *
         * @return string The filtered view title.
         */
        public function get_title(array $events = [])
        {
        }
        /**
         * Returns a collection of user-facing messages the View will display on the front-end.
         *
         * @since 4.9.11
         *
         * @param array $events An array of the events found by the View that is currently rendering.
         *
         * @return Messages A collection of user-facing messages the View will display on the front-end.
         */
        public function get_messages(array $events = [])
        {
        }
        /**
         * Sets up the user-facing messages the View will print on the frontend.
         *
         * @since 4.9.11
         *
         * @param array $events An array of the View events, if any.
         */
        protected function setup_messages(array $events)
        {
        }
        /**
         * Returns whether the View page should be reset or not.
         *
         * The View page should be reset when the View or filtering parameters that are not the page change.
         *
         * @since 4.9.11
         *
         * @return bool Whether the View page should be reset or not.
         */
        protected function should_reset_page()
        {
        }
        /**
         * Acts on the View variables, properties and context when a page reset is required.
         *
         * By default this method will reset the page in the context, but extending classes can implement their own,
         * custom version.
         *
         * @since 4.9.11
         */
        protected function on_page_reset()
        {
        }
        /**
         * Returns the breadcrumbs data the View will display on the front-end.
         *
         * @since 4.9.11
         *
         * @return array
         */
        protected function get_breadcrumbs()
        {
        }
        /**
         * Returns if the view should display the events bar.
         *
         * @since 4.9.11
         *
         * @return array
         */
        protected function filter_display_events_bar($display)
        {
        }
        /**
         * Returns a boolean on whether to show the datepicker submit button.
         *
         * @since 4.9.13
         *
         * @return bool
         */
        protected function get_show_datepicker_submit()
        {
        }
        /**
         * Manipulates public views data, if necessary, and returns result.
         *
         * @since 5.0.0
         *
         * @param string|bool $url_event_date The value, `Y-m-d` format, of the `eventDate` request variable to
         *                                    append to the view URL, if any.
         *
         * @return array
         */
        protected function get_public_views($url_event_date)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function url_for_query_args($date = null, $query_args = [])
        {
        }
        /**
         * Returns the date format that should be used to format the date in the View URL.
         *
         * Extending Views cal override this to customize the URL output (e.g. Month View).
         *
         * @since 4.9.13
         *
         * @return string The date format that should be used to format the date in the View URL.
         */
        protected function get_url_date_format()
        {
        }
        /**
         * Returns the filtered container data attributes for the View top-level container.
         *
         * @since 5.0.0
         *
         * @return array<string,string> The filtered list of data attributes for the View top-level container.
         */
        protected function get_container_data()
        {
        }
        /**
         * Filters Whether the Latest Past Events Should Show for a specific View.
         *
         * @since 5.1.0
         *
         * @return boolean If we should display Latest Past Events.
         */
        protected function should_show_latest_past_events_view()
        {
        }
        /**
         * Setup of Additional Views into another View.
         *
         * @since 5.1.0
         *
         * @param array $events        Array that will be counted to verify if we have events.
         * @param array $template_vars An associative array of variables that will be set, and exported, in the template.
         */
        protected function setup_additional_views(array $events = [], array $template_vars = [])
        {
        }
        /**
         * Returns the number of upcoming events in relation to the "now" time.
         *
         * @since 5.2.0
         *
         * @return int The number of upcoming events from "now".
         */
        protected function upcoming_events_count()
        {
        }
        /**
         * Returns the View current URL query arguments, parsed from the View `get_url()` method.
         *
         * Since there are a number of parties filtering each View URL arguments, this method will
         * parse a View URL query arguments from its filtered URL. This will include all the modifications
         * done to a View URL by other plugins and add-ons.
         *
         * @since 5.3.0
         *
         * @return array<string,mixed> The current View URL args or an empty array if the View URL is empty
         *                             or not valid..
         */
        public function get_url_args()
        {
        }
        /**
         * Initializes the View repository args, if required, and
         * applies them to the View repository instance.
         *
         * @since 4.6.0
         */
        protected function get_repository_args()
        {
        }
        /**
         * Sets up the View repository args to produce the correct list of Events
         * in the context of an iCalendar export.
         *
         * @since 4.6.0
         *
         * @param int $per_page The number of events per page to show in the iCalendar
         *                      export. The value will override whatever events per page
         *                      setting the View might have.
         */
        protected function setup_ical_repository_args($per_page)
        {
        }
        /**
         * Filters the repository arguments that will be used to set up the View repository instance for iCal requests.
         *
         * @since 4.6.0
         *
         * @param array  $repository_args The repository arguments that will be used to set up the View repository instance.
         *
         * @return array The filtered repository arguments for ical requests.
         */
        protected function filter_ical_repository_args($repository_args)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function get_ical_ids($per_page)
        {
        }
    }
    /**
     * Class V1_Compat
     *
     * @package Tribe\Events\Views\V2
     * @since 4.9.2
     */
    class V1_Compat extends \tad_DI52_ServiceProvider
    {
        /**
         * Registers the provider and sets it up to update, move or remove Views v1 filters.
         */
        public function register()
        {
        }
        /**
         * Removes a list of Views v1 filters to ensure a "clean slate" to handle requests using Views v2 logic.
         *
         * This method is meant to fire after Common and `Tribe__Events__Main` did bootstrap.
         *
         * @since 4.9.2
         */
        public function remove_v1_filters()
        {
        }
    }
    /**
     * Class Template_Bootstrap
     *
     * @since   4.9.2
     *
     * @package Tribe\Events\Views\V2
     */
    class Template_Bootstrap
    {
        /**
         * A cache array shared among instances.
         *
         * @since 5.0.1
         *
         * @var array<string,array>
         */
        protected static $cache = ['should_load' => []];
        /**
         * An instance of the Template Manager object.
         *
         * @since 4.9.11
         *
         * @var Manager
         */
        protected $manager;
        /**
         * Template_Bootstrap constructor.
         *
         * @param Manager $manager An instance of the manager object.
         */
        public function __construct(\Tribe\Events\Views\V2\Manager $manager)
        {
        }
        /**
         * Disables the Views V1 implementation of a Template Hijack
         *
         * @todo   use a better method to remove Views V1 from been initialized
         *
         * @since  4.9.2
         *
         * @return void
         */
        public function disable_v1()
        {
        }
        /**
         * Determines, with backwards compatibility in mind, which template user has selected
         * on the Events > Settings page as their base Default template.
         *
         * @since  4.9.2
         * @since 5.0.3 specifically pass 'event' to be clearer down the line where we check for custom templates.
         *
         * @return string Either 'event', 'page' or custom based templates
         */
        public function get_template_setting()
        {
        }
        /**
         * Based on the admin template setting we fetch the respective object
         * to handle the inclusion of the main file.
         *
         * @since  4.9.2
         * @since 5.0.3 inverted logic, as all the custom templates are page templates
         *
         * @return object
         */
        public function get_template_object()
        {
        }
        /**
         * Determines whether we are in a Single event page or not, base only on global context.
         *
         * @since  4.9.11
         *
         * @return bool Whether the current request is for the single event template or not.
         */
        public function is_single_event()
        {
        }
        /**
         * Fetches the HTML for the Single Event page using the legacy view system
         *
         * @since  4.9.4
         *
         * @return string
         */
        protected function get_v1_single_event_html()
        {
        }
        /**
         * Fetches the template for the Single Embed Event page using the legacy view system.
         *
         * @since  4.9.13
         *
         * @return string
         */
        protected function get_v1_embed_template_path()
        {
        }
        /**
         * Gets the View HTML
         *
         * @todo Stop handling kitchen sink template here.
         *
         * @since  4.9.2
         *
         * @return string
         */
        public function get_view_html()
        {
        }
        /**
         * Determines when we should bootstrap the template for The Events Calendar
         *
         * @since  4.9.2
         *
         * @param  WP_Query $query Which WP_Query object we are going to load on
         *
         * @return boolean Whether any template managed by this class should load at all or not.
         */
        public function should_load($query = null)
        {
        }
        /**
         * Filters the `template_include` filter to return the Views router template if required..
         *
         * @since 4.9.2
         *
         * @param string $template The template located by WordPress.
         *
         * @return string Path to the File that initializes the template
         */
        public function filter_template_include($template)
        {
        }
        /**
         * Set the correct body classes for our plugin.
         *
         * @since  4.9.11
         *
         * @return array The array containing the body classes
         */
        public function filter_add_body_classes($classes)
        {
        }
        /**
         * Contains the logic for if this object's classes should be added to the queue.
         *
         * @since 5.1.5
         *
         * @param boolean $add   Whether to add the class to the queue or not.
         * @param array   $class The array of body class names to add.
         * @param string  $queue The queue we want to get 'admin', 'display', 'all'.
         * @return boolean Whether body classes should be added or not.
         */
        public function should_add_body_class_to_queue($add, $class, $queue)
        {
        }
        /**
         * Add body classes.
         *
         * @since 5.1.5
         *
         * @return void
         */
        public function add_body_classes()
        {
        }
        /**
         * Filter the template file in case we're in single event
         * and we need to use the theme overrides.
         *
         * @since  5.0.0
         *
         * @param string $file      Complete path to include the PHP File
         * @param array  $name      Template name
         * @param object $template  Instance of the Tribe__Template
         *
         * @return string
         */
        public function filter_template_file($file, $name, $template)
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Query {
    /**
     * Class Abstract_Query_Controller
     *
     * @package Tribe\Events\Views\V2\Query
     * @since 4.9.2
     */
    abstract class Abstract_Query_Controller
    {
        /**
         * The query object currently being filtered.
         *
         * @var \WP_Query
         */
        protected $filtering_query;
        /**
         * Conditionally modify or populate the posts before a query runs.
         *
         * The injection, or modification, will only happen if the query is the main one and if the requested post types
         * are all supported by the Event_Query_Controller.
         *
         * @param  null|array  $posts  The array of posts to populate. By default empty when coming from the WP_Query class,
         *                            it might have been pre-populated by other methods though.
         * @param  \WP_Query|null  $query  The query object currently being filtered, if any.
         *
         * @return array|null A populated list of posts, or the original value if the filtering should not apply.
         * @since 4.9.2
         *
         */
        public function inject_posts($posts = null, \WP_Query $query = null)
        {
        }
        /**
         * Returns the list of post types supported by the Event_Query_Controller.
         *
         * This list will be used to decide if a query post injection should be performed by the Event_Query_Controller or
         * not. If not all the post types the query is for are supported then the Event_Query_Controller will not
         * intervene.
         *
         * @since 4.9.2
         *
         * @return array An array of post types supported by the Event_Query_Controller.
         */
        public function get_supported_post_types()
        {
        }
        /**
         * Returns the name that will be used to build the controller filters.
         *
         * @since 4.9.2
         *
         * @return string The name that will be used to build the controller filters, a slug.
         */
        protected abstract function get_filter_name();
        /**
         * Returns the default list of post types supported by the query controller.
         *
         * This list will, usually, be filtered when getting the supported post types with the `get_supported_post_types`
         * method.
         *
         * @since 4.9.2
         *
         * @return array An array of post types supported by default from the query controller.
         */
        protected abstract function get_default_post_types();
        /**
         * Returns the repository the controller will use to fetch posts.
         *
         * @return \Tribe__Repository__Interface
         * @since 4.9.2
         *
         */
        protected abstract function repository();
        /**
         * Checks whether the query controller should control the query or not.
         *
         * @since 5.0.3
         *
         * @param null|\WP_Query $query The current query object.
         *
         * @return bool Whether the query controller should control the query or not.
         */
        protected function control_query($query = null)
        {
        }
    }
    /**
     * Class Event_Query_Controller
     *
     * @package Tribe\Events\Views\V2\Query
     * @since 4.9.2
     */
    class Event_Query_Controller extends \Tribe\Events\Views\V2\Query\Abstract_Query_Controller
    {
        /**
         * {@inheritDoc}
         */
        public function get_filter_name()
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function get_default_post_types()
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function repository()
        {
        }
        /**
         * Parses the query to add/remove properties.
         *
         * @since 4.9.11
         *
         * @param \WP_Query $query The current WordPress query object.
         */
        public function parse_query(\WP_Query $query)
        {
        }
    }
}
namespace Tribe\Events\Views\V2 {
    /**
     * Class Implementation_Error
     *
     * @package Tribe\Events\Views\V2
     * @since   4.9.2
     */
    class Implementation_Error extends \Exception
    {
        /**
         * Signals a class extending the View class is not implementing a required API method.
         *
         * @since 4.9.2
         *
         * @param string $method The not implemented method.
         * @param object An instance of the object not implementing the method.
         *
         * @return \Tribe\Events\Views\V2\Implementation_Error A built instance of the exception.
         */
        public static function because_extending_view_should_define_this_method($method, $object)
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Views {
    /**
     * Class By_Day_View
     *
     * @since   4.9.7
     *
     * @package Tribe\Events\Views\V2\Views
     */
    abstract class By_Day_View extends \Tribe\Events\Views\V2\View
    {
        use \Tribe\Traits\Cache_User;
        const CHUNK_SIZE = 200;
        /**
         * The date input by the user, either by selecting the default view or using the bar.
         *
         * @var string
         */
        protected $user_date;
        /**
         * An array of cached event IDs per day.
         * Used by the `Cache_User` trait.
         *
         * @since 4.9.7
         *
         * @var array
         */
        protected $grid_days_cache = [];
        /**
         * An array of cached event counts per day.
         * Used by the `Cache_User` trait.
         *
         * @since 4.9.7
         *
         * @var array
         */
        protected $grid_days_found_cache = [];
        /**
         * An array of cached events for the grid.
         *
         * @since 5.0.0
         *
         * @var array
         */
        protected $grid_events = [];
        /**
         * An instance of the Stack object.
         *
         * @since 4.9.9
         *
         * @var Stack
         */
        protected $stack;
        /**
         * By_Day_View constructor.
         *
         * @since 4.9.7
         * @since 4.9.11 Added inheritance from View object and `$messages` parameter.
         *
         * @param Messages $messages An instance of the view messages handler.
         * @param Stack    $stack    An instance of the stack handler.
         */
        public function __construct(\Tribe\Events\Views\V2\Messages $messages, \Tribe\Events\Views\V2\Utils\Stack $stack)
        {
        }
        /**
         * Returns the post IDs of all the events found in the View.
         *
         * Note: multi-day events will appear once; this is a conflation of all events on the View.
         *
         * @since 4.9.7
         *
         * @return array A flat array of all the events found on the calendar grid.
         */
        public function found_post_ids()
        {
        }
        /**
         * Returns an array of event post IDs, divided by days.
         *
         * Note that multi-day events will show up in multiple days.
         *
         * @since 4.9.7
         *
         * @param null|string $date  The date to use as pivot, defaults to the current ones if not set.
         * @param bool        $force Whether to force a re-fetch or try and use the cached values or not.
         *
         * @return array An array in the shape `[ <Y-m-d> => [...<events>], <Y-m-d> => [...<events>] ]`.
         */
        public function get_grid_days($date = null, $force = false)
        {
        }
        /**
         * Calculates the date of the first and final grid cell for the view.
         *
         * Each cell is a day, usually.
         *
         * @since 4.9.7
         *
         * @param \DateTime|string $date The date that should be used to calculate the grid first and final cell date.
         *
         * @return array The View grid first and final cell dates, each one an instance of the `DateTime` class.
         */
        protected abstract function calculate_grid_start_end($date);
        /**
         * Returns the number of events to show per each day on the grid.
         *
         * Different Views with different implementations of this logic should override this method.
         *
         * @since 4.9.7
         *
         * @return int The number of events to show, per each day, in total, in the view.
         */
        protected function get_events_per_day()
        {
        }
        /**
         * Gets the current desired chunk size for breaking up batched queries.
         *
         * @since 5.0.0
         *
         * @return int
         */
        protected function get_chunk_size()
        {
        }
        /**
         * Fetches events for the grid in chunks so we do not have to fetch events a second time.
         *
         * @since 5.0.0
         *
         * @param array $event_ids
         *
         * @return array|void
         */
        protected function get_grid_events(array $event_ids = [])
        {
        }
        /**
         * Back-fills the days cache to add multi-day events that, due to events-per-day limits, might not appear on first
         * day.
         *
         * Multi-day events are pulled from the query as normal events.
         * When the LIMIT, imposed by events-per-day, is applied a multi-day event starting late in the day, might not
         * appear on the first day it starts as other, earlier, events, might fill the LIMIT for that day.
         * That same event will appear, but, on later days, starting from the 2nd one.
         * Here we go "back" and apply this principle to insert multi-days in previous day(s) cache(s) if required.
         *
         * @since 4.9.12
         *
         * @param array $events An array of event posts
         */
        protected function backfill_multiday_event_ids(array $events = [])
        {
        }
        /**
         * Adds the implied events to the grid days results.
         *
         * The combination of sticky events, other order rules and a limit to the number of events per day,
         * might yield incoherent results.
         * Fact: events do not have "gaps" in them (in the way we model them).
         * To avoid other queries here we apply the principle below and add "implied" events:
         * if a an event is present on day 1 and 3 or later, then it must be present on day 2 too.
         *
         * Note there's a fallacy in this method: if an event appears once and never again, in any of the days, then it
         * will never be implied. This is an issue, but this provides a close enough solution on most scenarios.
         *
         * @since 4.9.11
         *
         * @param array $grid_days The current array of grid days.
         *
         * @return array The grid days, modified to contain implied events, if required.
         */
        protected function add_implied_events(array $grid_days)
        {
        }
        protected function fill_week_duration_cache()
        {
        }
        /**
         * Returns the number of events found for each day.
         *
         * The number of events found ignores the per-page setting and it includes any event happening on the day.
         * This includes multi-day events happening on the day.
         *
         * @since 4.9.7
         *
         * @return array An array of days, each containing the count of found events for that day;
         *               the array has shape `[ <Y-m-d> => <count> ]`;
         */
        public function get_grid_days_counts()
        {
        }
        /**
         * Builds the next or prev URL given the date that should be used.
         *
         * @since 4.9.9
         *
         * @param mixed $date          The date to build the URL from, a date object or string.
         * @param bool  $canonical     Whether to return the canonical version of the URL or not.
         * @param array $passthru_vars An array of variables that should be preserved and applied to the resulting URL.
         *
         * @return string The URL as built from the event.
         */
        protected function build_url_for_date($date, $canonical, array $passthru_vars = [])
        {
        }
        /**
         * ${CARET}
         *
         * @since 4.9.13
         *
         * @return bool
         */
        protected function using_period_repository()
        {
        }
        /**
         * Overrides the base View implementation to limit the results to the View grid.
         *
         * {@inheritdoc}
         */
        protected function setup_ical_repository_args($per_page)
        {
        }
    }
    class Month_View extends \Tribe\Events\Views\V2\Views\By_Day_View
    {
        use \Tribe\Events\Views\V2\Views\Traits\With_Fast_Forward_Link;
        /**
         * The default number of events to show per-day.
         *
         * @since 4.9.7
         *
         * @var int
         */
        protected static $posts_per_page_default = 12;
        /**
         * Slug for this view.
         *
         * @since 4.9.3
         *
         * @var string
         */
        protected $slug = 'month';
        /**
         * Visibility for this view.
         *
         * @since 4.9.4
         * @since 4.9.11 Made the property static.
         *
         * @var bool
         */
        protected static $publicly_visible = true;
        /**
         * A instance cache property to store the currently fetched grid days.
         *
         * @since 4.9.11
         *
         * @var array
         */
        protected $grid_days = [];
        /**
         * {@inheritDoc}
         */
        public function prev_url($canonical = false, array $passthru_vars = [])
        {
        }
        /**
         * {@inheritDoc}
         */
        public function next_url($canonical = false, array $passthru_vars = [])
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function setup_repository_args(\Tribe__Context $context = null)
        {
        }
        /**
         * Overrides the base implementation to use the Month view custom number of events per day.
         *
         * @since 4.9.7
         *
         * @return int The Month view number of events per day.
         */
        protected function get_events_per_day()
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function setup_template_vars()
        {
        }
        /**
         * Parses the multi-day events and produces the multi-day "stack", including spacers.
         *
         * @since 4.9.7
         *
         * @param array $grid_events_by_day An array of events, per-day, in the shape `[ <Y-m-d> => [...<event_ids> ] ]`;
         *
         * @return array An array of all the month days, each entry filled with spacers and/or event post IDs in the correct
         *               order. E.g.
         *               `[ '2019-07-01' => [2, 3, false], '2019-07-02' => [2, 3, 4], '2019-07-03' => [false, 3, 4]]`.
         */
        protected function build_day_stacks(array $grid_events_by_day)
        {
        }
        /**
         * Populates the data for each day in the grid and returns it.
         *
         * @since 4.9.7
         *
         * @param array $grid_days An associative array of events per day, in the shape `[ <Y-m-d> => [...<events>] ]`.
         *
         * @return array An associative array of day data for each day in the shape `[ <Y-m-d> => <day_data> ]`.
         */
        protected function get_days_data(array $grid_days)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function calculate_grid_start_end($date)
        {
        }
        /**
         * {@inheritDoc}
         *
         * @since 4.9.9
         */
        protected function get_label_format()
        {
        }
        /**
         * Whether months w/o any event should be skipped while building navigation links or not.
         *
         * By default empty months will not be skipped.
         *
         * @since 4.9.9
         *
         * @return bool Whether to skip empty months or not.
         */
        protected function skip_empty()
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function get_url_date_format()
        {
        }
        /**
         * Overrides the base method to handle messages specific to the Month View.
         *
         * @since 4.9.11
         *
         * @param array $events An array of events found on the Month.
         */
        protected function setup_messages(array $events)
        {
        }
        /**
         * Overrides the base View implementation to limit the results to the View grid.
         *
         * {@inheritdoc}
         */
        protected function setup_ical_repository_args($per_page)
        {
        }
    }
    class Latest_Past_View extends \Tribe\Events\Views\V2\View
    {
        use \Tribe\Events\Views\V2\Views\Traits\List_Behavior;
        /**
         * Slug for this view
         *
         * @since 5.1.0
         *
         * @var string
         */
        protected $slug = 'latest-past';
        /**
         * Visibility for this view.
         *
         * @since 5.1.0
         *
         * @var bool
         */
        protected static $publicly_visible = false;
        /**
         * Safe list of Templates to display when Latest Past Events is Active.
         *
         * @since 5.1.0
         *
         * @var array
         */
        protected $safelist = [
            // Common Components.
            'components/icons/caret-down',
            'components/icons/caret-left',
            'components/icons/caret-right',
            'components/icons/day',
            'components/icons/dot',
            'components/icons/error',
            'components/icons/featured',
            'components/icons/list',
            'components/icons/map',
            'components/icons/messages-not-found',
            'components/icons/month',
            'components/icons/photo',
            'components/icons/recurring',
            'components/icons/search',
            'components/icons/virtual',
            'components/icons/week',
            // Standard View Components.
            'components/after',
            'components/before',
            'components/breadcrumbs',
            'components/breakpoints',
            'components/data',
            'components/events-bar',
            'components/events-bar/search-button',
            'components/events-bar/search',
            'components/events-bar/search/keyword',
            'components/events-bar/search/submit',
            'components/events-bar/views',
            'components/events-bar/views/list',
            'components/events-bar/views/list/item',
            'components/ical-link',
            'components/json-ld-data',
            'components/loader',
            'components/messages',
            'components/top-bar/today',
            'components/top-bar/actions',
            // Day View
            'day',
            'day/top-bar',
            'day/top-bar/nav',
            'day/top-bar/nav/prev',
            'day/top-bar/nav/next-disabled',
            'day/top-bar/datepicker',
            // List View.
            'list/top-bar',
            'list/top-bar/nav',
            'list/top-bar/nav/prev',
            'list/top-bar/nav/next-disabled',
            'list/top-bar/datepicker',
            'list',
            // Month View
            'month',
            'month/top-bar',
            'month/top-bar/nav',
            'month/top-bar/nav/prev',
            'month/top-bar/nav/next-disabled',
            'month/top-bar/datepicker',
            // Map View
            'map',
            'map/top-bar',
            'map/top-bar/nav',
            'map/top-bar/nav/prev',
            'map/top-bar/nav/next-disabled',
            'map/top-bar/datepicker',
            // Photo View
            'photo',
            'photo/top-bar',
            'photo/top-bar/nav',
            'photo/top-bar/nav/prev',
            'photo/top-bar/nav/next-disabled',
            'photo/top-bar/datepicker',
            // Week View
            'week',
            'week/top-bar',
            'week/top-bar/nav',
            'week/top-bar/nav/prev',
            'week/top-bar/nav/next-disabled',
            'week/top-bar/datepicker',
            // Latest Past Events Views.
            'latest-past',
            'latest-past/heading',
            'latest-past/event',
            'latest-past/event/date',
            'latest-past/event/title',
            'latest-past/event/venue',
            'latest-past/event/description',
            'latest-past/event/cost',
            'latest-past/event/date-tag',
            'latest-past/event/date/featured',
            'latest-past/event/date/meta',
            // Add-ons.
            'components/filter-bar',
        ];
        /**
         * Indicates Latest Past View supports the date as a query argument appended to its URL, not as part of a "pretty" URL.
         *
         * @var bool
         */
        protected static $date_in_url = false;
        /**
         * {@inheritDoc}
         */
        protected function setup_repository_args(\Tribe__Context $context = null)
        {
        }
        /**
         * Add Filters for safe list and Adding View HTML.
         *
         * @since 5.1.0
         */
        public function add_view_filters()
        {
        }
        /**
         * Connect safe list Filter to Tribe Template Done to Prevent some of the current View's
         * Templates from Displaying when the Latest Past Events Displays.
         *
         * @since 5.1.0
         */
        public function filter_template_done($html)
        {
        }
        /**
         * Filter the Template Files and Only Return HTML if in safe list.
         *
         * @since 5.1.0
         *
         * @param string  $done    Whether to continue displaying the template or not.
         * @param array   $name    Template name.
         * @param array   $context Any context data you need to expose to this file.
         * @param boolean $echo    If we should also print the Template.
         *
         * @return string
         */
        public function filter_template_display_by_safelist($done, $name, $context, $echo)
        {
        }
        /**
         * Add the HTML for Latest Past Events to the HTML of the View Being Rendered.
         *
         * @since 5.1.0
         *
         * @param $html string The HTML of the view being rendered.
         *
         * @return string The HTML of the View being Rendered and Latest Past Events HTML
         */
        public function add_view($html)
        {
        }
    }
    class List_View extends \Tribe\Events\Views\V2\View
    {
        use \Tribe\Events\Views\V2\Views\Traits\List_Behavior;
        /**
         * Slug for this view
         *
         * @since 4.9.3
         *
         * @var string
         */
        protected $slug = 'list';
        /**
         * Visibility for this view.
         *
         * @since 4.9.4
         * @since 4.9.11 Made the property static.
         *
         * @var bool
         */
        protected static $publicly_visible = true;
        /**
         * Indicates List View supports the date as a query argument appended to its URL, not as part of a "pretty" URL.
         *
         * @var bool
         */
        protected static $date_in_url = false;
        /**
         * {@inheritDoc}
         */
        public function prev_url($canonical = false, array $passthru_vars = [])
        {
        }
        /**
         * {@inheritDoc}
         */
        public function next_url($canonical = false, array $passthru_vars = [])
        {
        }
        /**
         * Return the URL to a page of past events.
         *
         * @since 4.9.3
         *
         * @param bool $canonical Whether to return the canonical version of the URL or the normal one.
         * @param int  $page The page to return the URL for.
         *
         * @return string The URL to the past URL page, if available, or an empty string.
         */
        protected function get_past_url($canonical = false, $page = 1)
        {
        }
        /**
         * Return the URL to a page of upcoming events.
         *
         * @since 4.9.3
         *
         * @param bool $canonical Whether to return the canonical version of the URL or the normal one.
         * @param int  $page The page to return the URL for.
         *
         * @return string The URL to the upcoming URL page, if available, or an empty string.
         */
        protected function get_upcoming_url($canonical = false, $page = 1)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function setup_repository_args(\Tribe__Context $context = null)
        {
        }
        /**
         * Overrides the base View method to fix the order of the events in the `past` display mode.
         *
         * @since 4.9.11
         *
         * @return array The List View template vars, modified if required.
         */
        protected function setup_template_vars()
        {
        }
        /**
         * Overrides the base implementation to remove notions of a "past" events request on page reset.
         *
         * @since 4.9.11
         */
        protected function on_page_reset()
        {
        }
    }
    class Day_View extends \Tribe\Events\Views\V2\View
    {
        use \Tribe\Events\Views\V2\Views\Traits\With_Fast_Forward_Link;
        /**
         * Slug for this view
         *
         * @since 4.9.4
         *
         * @var string
         */
        protected $slug = 'day';
        /**
         * Visibility for this view.
         *
         * @since 4.9.4
         * @since 4.9.11 Made the property static.
         *
         * @var bool
         */
        protected static $publicly_visible = true;
        /**
         * {@inheritDoc}
         */
        public function prev_url($canonical = false, array $passthru_vars = [])
        {
        }
        /**
         * {@inheritDoc}
         */
        public function next_url($canonical = false, array $passthru_vars = [])
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function setup_repository_args(\Tribe__Context $context = null)
        {
        }
        /**
         * Builds the Day View URL for a specific date.
         *
         * This is the method underlying the construction of the previous and next URLs.
         *
         * @since 4.9.10
         *
         * @param mixed $url_date          The date to build the URL for, a \DateTime object, a string or a timestamp.
         * @param bool  $canonical         Whether to return the canonical (pretty) version of the URL or not.
         * @param array $passthru_vars     An optional array of query variables that should pass thru the method untouched
         *                                 in key and value.
         *
         * @return string The Day View URL for the date.
         */
        protected function build_url_for_date($url_date, $canonical, array $passthru_vars = [])
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function setup_template_vars()
        {
        }
        /**
         * Add time slot and sort events for the day view.
         *
         * Iterate over the day events to add time slots and sort them.
         *
         * @since 4.9.11
         *
         * @param array $events  An array of events.
         *
         * @return array The sorted and modified array.
         */
        protected function sort_events($events)
        {
        }
        /**
         * Overrides the base View method to implement logic tailored to the Day View.
         *
         * @since 4.9.11
         *
         * @param array $events An array of the View events, if any.
         */
        protected function setup_messages(array $events)
        {
        }
    }
    /**
     * Class Reflector_View
     *
     * @since   4.9.3
     * @package Tribe\Events\Views\V2\Views
     */
    class Reflector_View extends \Tribe\Events\Views\V2\View
    {
        /**
         * Slug for this view.
         *
         * @since 4.9.4
         *
         * @var string
         */
        protected $slug = 'reflector';
        /**
         * Visibility for this view.
         *
         * @since 4.9.4
         * @since 4.9.11 Made the property static.
         *
         * @var bool
         */
        protected static $publicly_visible = false;
        /**
         * Overrides the base HTML method to return the JSON representation of the view context.
         *
         * @since 4.9.3
         *
         * @return false|string The result of the `json_encode` called on the current view context.
         */
        public function get_html()
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Views\Widgets {
    /**
     * Class Widget_View
     *
     * @since   5.2.1
     *
     * @package Tribe\Events\Views\V2\Views\Widgets
     */
    class Widget_View extends \Tribe\Events\Views\V2\View
    {
        /**
         * The slug for the template path.
         *
         * @since 5.2.1
         *
         * @var string
         */
        protected $template_path = 'widgets';
        /**
         * Visibility for this view.
         *
         * @since 5.2.1
         *
         * @var bool
         */
        protected static $publicly_visible = false;
        /**
         * Whether the View should display the events bar or not.
         *
         * @since 5.2.1
         *
         * @var bool
         */
        protected $display_events_bar = false;
        /**
         * Returns the widget "view more" text.
         *
         * @since 5.4.0
         *
         * @return string The widget "view more" text.
         */
        public function get_view_more_text()
        {
        }
        /**
         * Returns the widget "view more" title.
         * Adds context as needed for screen readers.
         * @see \Tribe\Events\Pro\Views\V2\Views\Widgets\Venue_View for an example.
         *
         * @since 5.4.0
         *
         * @return string The widget "view more" title.
         */
        public function get_view_more_title()
        {
        }
        /**
         * Returns the widget "view more" url.
         *
         * @since 5.4.0
         *
         * @return string The widget "view more" url.
         */
        public function get_view_more_link()
        {
        }
        /**
         * Overrides the base View method.
         *
         * @since 5.3.0
         *
         * @return array<string,mixed> The Widget View template vars, modified if required.
         */
        protected function setup_template_vars()
        {
        }
        /**
         * Sets up the View repository arguments from the View context or a provided Context object.
         *
         * @since 4.9.3
         *
         * @param  Context|null $context A context to use to setup the args, or `null` to use the View Context.
         *
         * @return array<string,mixed> The arguments, ready to be set on the View repository instance.
         */
        protected function setup_repository_args(\Tribe__Context $context = null)
        {
        }
        /**
         * Adds compatibility classes to the widget view container.
         * Not the view itself - the wrapping div around that
         *
         * @since 5.4.0
         *
         * @return array<string> An Array of class names to add to the container. Will contain
         *                       _at least_ 'tribe-compatibility-container' as an indicator.
         */
        public function get_compatibility_classes()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_html_classes(array $classes = [])
        {
        }
        /**
         * Modify the setup the loop method to only set the repository arguments.
         *
         * @since 5.3.0
         *
         * @param array|null $args An array of associative arguments used to setup the repository for the View.
         */
        public function setup_the_loop(array $args = [])
        {
        }
    }
    /**
     * Class Widget_List_View
     *
     * @since   5.2.1
     *
     * @package Tribe\Events\Views\V2\Views\Widgets
     */
    class Widget_List_View extends \Tribe\Events\Views\V2\Views\Widgets\Widget_View
    {
        /**
         * The slug for this view.
         *
         * @since 5.2.1
         *
         * @var string
         */
        protected $slug = 'widget-events-list';
        /**
         * Sets up the View repository arguments from the View context or a provided Context object.
         *
         * @since 5.3.0
         *
         * @param  Context|null $context A context to use to setup the args, or `null` to use the View Context.
         *
         * @return array<string,mixed> The arguments, ready to be set on the View repository instance.
         */
        protected function setup_repository_args(\Tribe__Context $context = null)
        {
        }
        /**
         * Overrides the base View method.
         *
         * @since 5.3.0
         *
         * @return array<string,mixed> The Widget List View template vars, modified if required.
         */
        protected function setup_template_vars()
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function setup_messages(array $events)
        {
        }
        /**
         * Overrides the base method to return an empty array, since the widget will not use breadcrumbs.
         *
         * @since 5.3.0
         *
         * @return array<array<string,string>> An empty array, the widget will not use breadcrumbs.
         */
        protected function get_breadcrumbs()
        {
        }
    }
}
namespace Tribe\Events\Views\V2\iCalendar {
    /**
     * Class Request
     *
     * @since   4.6.0
     *
     * @package Tribe\Events\Views\V2\iCalendar
     */
    class Request
    {
        /**
         * A reference to the base implementation of the iCalendar exports handler.
         *
         * @since 4.6.0
         *
         * @var iCal
         */
        protected $ical;
        /**
         * A reference the context used for the request.
         *
         * @since 4.6.0
         *
         * @var Context
         */
        protected $context;
        /**
         * Request constructor.
         *
         * @since 4.6.0
         *
         * @param Context|null $context Which context was used to prepare this request for iCal.
         * @param iCal|null    $ical    Either a reference to an explicit instance of the base
         *                              iCalendar exports handler, or `null` to use the one provided
         *                              by the `tribe` Service Locator.
         */
        public function __construct(\Tribe__Context $context = null, \Tribe__Events__iCal $ical = null)
        {
        }
        /**
         * Returns the ordered list of event post IDs that match the current
         * iCalendar export request.
         *
         * @since 4.6.0
         *
         * @return array<int> A list of event post IDs that match the current
         *                    iCalendar export request.
         */
        public function get_event_ids()
        {
        }
    }
}
namespace Tribe\Events\Views\V2 {
    /**
     * Class Messages
     *
     * @since   4.9.11
     *
     * @package Tribe\Events\Views\V2
     */
    class Messages
    {
        /**
         * A notice type of message.
         *
         * @since 4.9.11
         */
        const TYPE_NOTICE = 'notice';
        /**
         * The strategy that will print a single message, the last, per priority collection, per type.
         *
         * @since 4.9.11
         */
        const RENDER_STRATEGY_PRIORITY_LAST = 'priority_last';
        /**
         * The strategy that will print a single message, the first, per priority collection, per type.
         *
         * @since 4.9.11
         */
        const RENDER_STRATEGY_PRIORITY_FIRST = 'priority_first';
        /**
         * The strategy that will print all messages, of all types.
         *
         * @since 4.9.11
         */
        const RENDER_STRATEGY_LIST = 'list';
        /**
         * An array of the messages handled by the object.
         *
         * @since 4.9.11
         *
         * @var array
         */
        protected $messages = [];
        /**
         * The render strategy the collection will use to "render" the messages in the `to_array` method.
         *
         * @since 4.9.11
         *
         * @var string
         */
        protected $render_strategy;
        /**
         * Messages constructor.
         *
         * @param null|string $render_strategy The render strategy that should be used to render the messages in the
         *                                     `to_array` method.
         * @param array       $messages A list of messages to hydrate the collection with.
         */
        public function __construct($render_strategy = null, array $messages = [])
        {
        }
        /**
         * Returns the human-readable message for a key.
         *
         * @since 4.9.11
         *
         * @param string $key The message identification key or slug.
         * @param mixed  ...$values A variadic number of arguments that should be used to fill in the message placeholders, if
         *                       the message contains `sprintf` compatible placeholders at all.
         *
         * @return string The human readable message for the specified key, if found, or the key itself.
         */
        public static function for_key($key, ...$values)
        {
        }
        /**
         * Applies the current message render policy to the messages and returns an array of messages.
         *
         * @since 4.9.11
         *
         * @return array An array of messages in the shape `[ <message_type> => [ ...<messages> ] ]`.
         */
        public function to_array()
        {
        }
        /**
         * Applies the render strategy to the collection of messages.
         *
         * @since 4.9.11
         *
         * @param array $messages The collection of messages to apply the render strategy to.
         *
         * @return array An array of messages after the current strategy application.
         *               No matter the render strategy, the array always has shape
         *              `[ <message_type> => [ ...<messages> ] ]`.
         */
        protected function apply_render_strategy(array $messages = [])
        {
        }
        /**
         * Sets the render strategy that the collection should use to render the messages in the `to_array` method.
         *
         * @since 4.9.11
         *
         * @param string $render_strategy One of the `RENDER_STRATEGY_` constants.
         */
        public function set_render_strategy($render_strategy)
        {
        }
        /**
         * Inserts a message in the collection, at a specific priority.
         *
         * @since 4.9.11
         *
         * @param string $message_type    The type of message to insert, while there is no check on the type, the suggestion
         *                                is to use one of the `TYPE_` constants.
         * @param string $message         The message to insert.
         * @param int    $priority        the priority of the message among the types; defaults to `10`. Similarly to the
         *                                priority concept of WordPress filters, an higher number has a lower priority.
         */
        public function insert($message_type, $message, $priority = 10)
        {
        }
        /**
         * Resets a specific type of messages or all of them.
         *
         * @since 4.9.11
         *
         * @param null|string $type     The type of message to reset, or `null` to reset all messages.
         * @param null|int    $priority The specific priority to reset, this will be ignored if the `$type` parameter
         *                              is not set.
         */
        public function reset($type = null, $priority = null)
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Widgets {
    /**
     * The abstract all widgets should implement.
     *
     * @since   5.2.1
     *
     * @package Tribe\Widget
     */
    abstract class Widget_Abstract extends \Tribe\Widget\Widget_Abstract
    {
        /**
         * The view interface for the widget.
         *
         * @since 5.2.1
         *
         * @var View_Interface;
         */
        protected $view;
        /**
         * The slug of the widget view.
         *
         * @since 5.2.1
         *
         * @var string
         */
        protected $view_slug;
        /**
         * Widget css group slug.
         *
         * @since 5.5.0
         *
         * @var string
         */
        protected static $widget_css_group;
        /**
         * {@inheritDoc}
         */
        public function setup($args = [], $instance = [])
        {
        }
        /**
         * Setup the view for the widget.
         *
         * @since 5.2.1
         * @since 5.3.0 Correct asset enqueue method.
         * @since 5.5.0 Deprecated $arguments param since it should come from the instance.
         *
         * @param array<string,mixed> $_deprecated The widget arguments, as set by the user in the widget string.
         */
        public function setup_view($_deprecated)
        {
        }
        /**
         * Get local widget css group slug.
         *
         * @since 5.5.0
         *
         * @return string
         */
        public static function get_css_group()
        {
        }
        /**
         * Returns the rendered View HTML code.
         *
         * @since 5.2.1
         *
         * @return string
         */
        public function get_html()
        {
        }
        /**
         * Sets the template view.
         *
         * @since 5.2.1
         *
         * @param View_Interface $view Which view we are using this template on.
         */
        public function set_view(\Tribe\Events\Views\V2\View_Interface $view)
        {
        }
        /**
         * Returns the current template view, either set in the constructor or using the `set_view` method.
         *
         * @since 5.2.1
         *
         * @return View_Interface The current template view.
         */
        public function get_view()
        {
        }
        /**
         * Returns the widget view slug.
         *
         * @since 5.2.1
         *
         * @return string The widget view slug.
         */
        public function get_view_slug()
        {
        }
        /**
         * Alters the widget context with its arguments.
         *
         * @since  5.2.1
         *
         * @param \Tribe__Context     $context   Context we will use to build the view.
         * @param array<string,mixed> $arguments Current set of arguments.
         *
         * @return \Tribe__Context Context after widget changes.
         */
        public function alter_context(\Tribe__Context $context, array $arguments = [])
        {
        }
        /**
         * Translates widget arguments to their Context argument counterpart.
         *
         * For front-end display.
         *
         * @since 5.2.1
         *
         * @param array<string,mixed> $arguments Current set of arguments.
         * @param Context             $context   The request context.
         *
         * @return array<string,mixed> The translated widget arguments.
         */
        protected function args_to_context(array $arguments, \Tribe__Context $context)
        {
        }
        /**
         * Massages the data before asking tribe_format_field_dependency() to create the dependency attributes.
         *
         * @since 5.3.0
         *
         * @param array <string,mixed> $field The field info.
         *
         * @return string The dependency attributes.
         */
        public function format_dependency($field)
        {
        }
        /**********************
         * Deprecated Methods *
         **********************/
        /**
         * Filters the template vars for widget-specific items.
         *
         * @since 5.3.0
         * @deprecated 5.5.0 Removed due to using template vars properly, see Tribe\Events\Views\V2\Views\Widgets\Widget_View::setup_template_vars().
         *
         * @param array<string,mixed> $template_vars The current template variables.
         * @param View                $view          Which view we are dealing with.
         *
         * @return array<string,mixed> The modified template variables.
         */
        public function filter_widget_template_vars($template_vars, $view)
        {
        }
        /**
         * Empties the json_ld_data if jsonld_enable is false,
         * removing the need for additional checks in the template.
         *
         * @since 5.3.0
         * @deprecated 5.5.0 Removed due to using template vars properly, see Tribe\Events\Views\V2\Views\Widgets\Widget_View::setup_template_vars().
         *
         * @param array<string,mixed> $template_vars The current template variables.
         *
         * @return array<string,mixed> The modified template variables.
         */
        public function disable_json_data($template_vars)
        {
        }
        /**
         * Encapsulates and handles the logic for asset enqueues in it's own method.
         *
         * @since 5.3.0
         *
         * @deprecated 5.5.0 Removed to make use of just should enqueue setup in asset manager.
         *
         * @param mixed $_deprecated  (deprecated) Previously held context we are using to build the view.
         * @param mixed $__deprecated (deprecated) Previously held which view we are using the template on.
         */
        public function filter_enqueue_assets($_deprecated, $__deprecated)
        {
        }
        /**
         * Enqueues the assets for widgets.
         *
         * @since 5.3.0
         *
         * @deprecated 5.5.0 Removed to make use of just should enqueue setup in asset manager.
         *
         * @param mixed $_deprecated  (deprecated) Previously held context we are using to build the view.
         * @param mixed $__deprecated (deprecated) Previously held which view we are using the template on.
         */
        public function enqueue_assets($_deprecated, $__deprecated)
        {
        }
        /**
         * Determines whether to enqueue assets for widgets.
         *
         * @since 5.3.0
         *
         * @deprecated 5.5.0 Removed to make use of just should enqueue setup in asset manager.
         *
         * @param mixed $_deprecated  (deprecated) Previously held context we are using to build the view.
         * @param mixed $__deprecated (deprecated) Previously held which view we are using the template on.
         *
         * @return bool Whether assets are enqueued or not.
         */
        public function should_enqueue_assets($_deprecated, $__deprecated)
        {
        }
        /**
         * Returns the widget slug.
         *
         * @since 5.3.0
         * @deprecated 5.5.0 replaced by the static::get_widget_slug().
         *
         * @return string The widget slug.
         */
        public function get_slug()
        {
        }
    }
    /**
     * Class for the List Widget.
     *
     * @since   5.2.1
     *
     * @package Tribe\Events\Views\V2\Widgets
     */
    class Widget_List extends \Tribe\Events\Views\V2\Widgets\Widget_Abstract
    {
        /**
         * {@inheritDoc}
         */
        protected static $widget_in_use;
        /**
         * {@inheritDoc}
         *
         * @var string
         */
        protected static $widget_slug = 'events-list';
        /**
         * {@inheritDoc}
         *
         * @var string
         */
        protected $view_slug = 'widget-events-list';
        /**
         * {@inheritDoc}
         *
         * @var string
         */
        protected static $widget_css_group = 'events-list-widget';
        /**
         * {@inheritDoc}
         *
         * @var array<string,mixed>
         */
        protected $default_arguments = [
            // View options.
            'view' => null,
            'should_manage_url' => false,
            // Event widget options.
            'id' => null,
            'alias-slugs' => null,
            'title' => '',
            'limit' => 5,
            'no_upcoming_events' => false,
            'featured_events_only' => false,
            'jsonld_enable' => true,
            'tribe_is_list_widget' => true,
        ];
        /**
         * {@inheritDoc}
         */
        public static function get_default_widget_name()
        {
        }
        /**
         * {@inheritDoc}
         */
        public static function get_default_widget_options()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function setup_view($_deprecated)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function setup_default_arguments()
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function add_hooks()
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function remove_hooks()
        {
        }
        /**
         * Add this widget's css group to the VE list of widget groups to load icon styles for.
         *
         * @since 4.6.0
         *
         * @param array<string> $widgets The list of widgets
         *
         * @return array<string> The modified list of widgets.
         */
        public function add_self_to_virtual_widget_groups($groups)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function setup_admin_fields()
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function args_to_context(array $arguments, \Tribe__Context $context)
        {
        }
        /**
         * Add full events list widget stylesheets to customizer styles array to check.
         *
         * @since 5.3.0
         *
         * @param array<string> $sheets       Array of sheets to search for.
         * @param string        $css_template String containing the inline css to add.
         *
         * @return array Modified array of sheets to search for.
         */
        public function add_full_stylesheet_to_customizer($sheets, $css_template)
        {
        }
    }
    /**
     * Class Service_Provider
     *
     * @since   5.2.1
     *
     * @package Tribe\Events\Views\V2\Widgets
     */
    class Service_Provider extends \tad_DI52_ServiceProvider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 5.2.1
         */
        public function register()
        {
        }
        /**
         * Registers the provider handling all assets for widgets v2.
         *
         * @since 5.5.0
         */
        protected function register_assets()
        {
        }
        /**
         * Registers the provider handling for compatibility hooks.
         *
         * @since 5.3.0
         */
        protected function register_compatibility()
        {
        }
        /**
         * Function used to attach the hooks associated with this class.
         *
         * @since 5.2.1
         */
        public function hook()
        {
        }
        /**
         * Add the widgets to register with WordPress.
         *
         * @since 5.2.1
         *
         * @param array<string,string> $widgets An array of widget classes to register.
         *
         * @return array<string,string> An array of registered widget classes.
         */
        public function register_widget($widgets)
        {
        }
        /**
         * Add the widget views to the view manager.
         *
         * @since 5.2.1
         *
         * @param array<string,string> $views An associative array of views in the shape `[ <slug> => <class> ]`.
         *
         * @return array<string,string> $views The modified array of views in the shape `[ <slug> => <class> ]`.
         */
        public function add_views($views)
        {
        }
        /**
         * Unregister the existing List Widget.
         *
         * @since 5.3.0
         */
        public function unregister_list_widget()
        {
        }
    }
    /**
     * Class Admin_Template
     *
     * @since   5.3.0
     *
     * @package Tribe\Events\Views\V2\Widgets
     */
    class Admin_Template extends \Tribe__Template
    {
        /**
         * Template constructor.
         *
         * Sets the correct paths for templates in this plugin (as opposed to The Events Calendar).
         *
         * @since 5.3.0
         */
        public function __construct()
        {
        }
    }
    /**
     * Class Compatibility
     *
     * @since   5.3.0
     *
     * @package Tribe\Events\Views\V2\Widgets
     */
    class Compatibility
    {
        /**
         * The default primary list widget id base string.
         *
         * @var string
         */
        protected $primary_id_base = 'tribe-events-list-widget';
        /**
         * The default alternative list widget id base string.
         *
         * @var string
         */
        protected $alternative_id_base = 'tribe-events-adv-list-widget';
        /**
         * Switches the primary and alternative id base when v1 is active
         * or v2 widgets are disabled, this enables support for upgrading from
         * v1 free list widget to the v1 Pro advanced list widget.
         * This class lives here as it could support the v1 advanced list widget
         * turning back to the free widget.
         *
         * @since 5.3.0
         */
        public function switch_compatibility()
        {
        }
        /**
         * Function that determines which version of the widget we should load based on the ECP version.
         *
         * @since 5.3.0
         *
         * @return boolean
         */
        public function is_v2_adv_list_widget()
        {
        }
        /**
         * Remap the widget id_base for the Pro Advanced List Widget.
         *
         * @since 5.3.0
         *
         * @param array<string,mixed> $widget_areas An array of widgets areas with the saved widgets in each location.
         *
         * @return array<string,mixed> $widget_areas A modified array of widgets areas with the saved widgets in each location.
         */
        public function remap_list_widget_id_bases($widget_areas)
        {
        }
        /**
         * Merge the Event List and Advanced List Widget Options.
         *
         * @since 5.3.0
         *
         * @param array<int,mixed> $widgets An array of saved widgets.
         *
         * @return array<int,mixed> $widgets The modified array of saved widgets.
         */
        public function merge_list_widget_options($widgets)
        {
        }
    }
    /**
     * Register Assets related to Widgets.
     *
     * @since 5.5.0
     *
     * @package Tribe\Events\Views\V2\Widgets
     */
    class Assets extends \tad_DI52_ServiceProvider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 5.5.0
         */
        public function register()
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Interfaces {
    /**
     * Interface View_Partial_Interface
     *
     * @since   4.9.5
     * @package Tribe\Events\Views\V2\Interfaces
     */
    interface View_Partial_Interface
    {
        /**
         * Renders the partials and returns its HTML code.
         *
         * @since 4.9.5
         *
         * @param \Tribe__Template $template The template instance currently rendering.
         *
         * @return string
         */
        public function render(\Tribe__Template $template);
    }
}
namespace Tribe\Events\Views\V2 {
    /**
     * Register
     *
     * @since 4.9.2
     *
     * @package Tribe\Events\Views\V2
     */
    class Assets extends \tad_DI52_ServiceProvider
    {
        /**
         * Key for this group of assets.
         *
         * @since 4.9.4
         *
         * @var string
         */
        public static $group_key = 'events-views-v2';
        /**
         * Key for the widget group of assets.
         *
         * @since 5.3.0
         *
         * @var string
         */
        public static $widget_group_key = 'events-views-v2-widgets';
        /**
         * Caches the result of the `should_enqueue_frontend` check.
         *
         * @since 4.9.13
         *
         * @var bool
         */
        protected $should_enqueue_frontend;
        /**
         * Applies a filter to allow users that are experiencing issues w/ the Views v2 datepicker to load
         * it in no-conflict mode.
         *
         * When loaded in no-conflict mode, then the jquery-ui-datepicker script bundled with WordPress will be
         * loaded before it.
         *
         * @since 5.3.0
         *
         * @return bool Whether to load Views v2 datepicker in no conflict mode, loading the jquery-ui-datepicker
         *              script before it, or not
         */
        protected static function datepicker_no_conflict_mode()
        {
        }
        /**
         * Binds and sets up implementations.
         *
         * @since 4.9.2
         */
        public function register()
        {
        }
        /**
         * Removes assets from View V1 when V2 is loaded.
         *
         * @since 4.9.5
         *
         * @return void
         */
        public function disable_v1()
        {
        }
        /**
         * Checks if we should enqueue frontend assets for the V2 views.
         *
         * @since 4.9.4
         * @since 4.9.13 Cache the check value.
         *
         * @return bool $should_enqueue Should the frontend assets be enqueued.
         */
        public function should_enqueue_frontend()
        {
        }
        /**
         * Checks if we are using skeleton setting for Style.
         *
         * @since  4.9.11
         *
         * @return bool
         */
        public function is_skeleton_style()
        {
        }
        /**
         * Verifies if we don't have skeleton active, which will trigger true for the two other possible options.
         * Options:
         * - `full` - Deprecated
         * - `tribe`  - All styles load
         *
         * @since  4.9.11
         *
         * @return bool
         */
        public function should_enqueue_full_styles()
        {
        }
        /**
         * Verifies if we are on V2 and on Event Single in order to enqueue the override styles for Single Event.
         *
         * @since 5.5.0
         *
         * @return boolean
         */
        public function should_enqueue_single_event_styles()
        {
        }
    }
}
namespace {
    /**
     *
     */
    class Tribe__Events__Bar
    {
        // Each row should be an associative array with three fields: name, caption and html (html is the markup of the field)
        private $filters = [];
        // Each row should be an associative array with three fields: displaying, anchor and url.
        // Displaying is the value of Tribe__Events__Main->displaying
        private $views = [];
        /**
         * Hooking the required Filters and Actions for this Class
         *
         * @since  4.6.21
         *
         * @return void
         */
        public function hook()
        {
        }
        /**
         * Decide if the TribeBar should be shown in a particular pageview.
         *
         * @filter tribe-events-bar-views to get all the registered views that the Bar will show
         * @filter tribe-events-bar-should-show to allow themers to always hide the bar if they want.
         *
         * To always hide the Bar, add this to your theme's functions.php:
         *        add_filter( 'tribe-events-bar-should-show', '__return_false' );
         *
         * @return bool
         *
         */
        public function should_show()
        {
        }
        /**
         * Adds a body class of tribe-bar-is-disabled when the Tribe Bar is disabled.
         *
         * @return array The new body class array
         */
        public function body_class($classes)
        {
        }
        /**
         * Returns the opening tag of the disabled bar wrapper
         *
         * @return string
         */
        public function disabled_bar_before($before)
        {
        }
        /**
         * Returns the closing tag of the disabled bar wrapper
         *
         * @return array The new body class array
         */
        public function disabled_bar_after($after)
        {
        }
        /**
         * Load the CSSs and JSs only if the Bar will be shown
         */
        public function load_script()
        {
        }
        /**
         * @deprecated 4.6.21
         *
         * @return Tribe__Events__Bar
         */
        public static function instance()
        {
        }
    }
    class Tribe__Events__Plugin_Register extends \Tribe__Abstract_Plugin_Register
    {
        protected $main_class = 'Tribe__Events__Main';
        protected $dependencies = ['addon-dependencies' => ['Tribe__Events__Pro__Main' => '5.6.0-dev', 'Tribe__Events__Filterbar__View' => '4.10.0-dev', 'Tribe__Events__Tickets__Eventbrite__Main' => '4.6-dev', 'Tribe__Events__Community__Main' => '4.7.0-dev', 'Tribe__Events__Community__Tickets__Main' => '4.7.2-dev']];
        public function __construct()
        {
        }
    }
    class Tribe__Events__Post_Exception extends \Exception
    {
        /**
         * Display the exception message in the div #tribe-events-post-error
         *
         * @param int $post ->ID
         */
        public static function displayMessage($postId)
        {
        }
    }
}
namespace Tribe\Events\Service_Providers {
    /**
     * Class Context
     *
     * @since   4.9.4
     *
     * @package Tribe\Events\Service_Providers
     */
    class Context extends \tad_DI52_ServiceProvider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 4.9.4
         */
        public function register()
        {
        }
        /**
         * Filters the context locations to add the ones used by The Events Calendar.
         *
         * @since 4.9.4
         *
         * @param array $locations The array of context locations.
         *
         * @return array The modified context locations.
         */
        public function filter_context_locations(array $locations = [])
        {
        }
    }
}
namespace {
    /**
     * Hooks and registers the functions and implementations needed to provide
     * the ORM/Repository classes.
     *
     * @since 4.9
     */
    /**
     * Class Tribe__Events__Service_Providers__ORM
     *
     * @since 4.9
     */
    class Tribe__Events__Service_Providers__ORM extends \tad_DI52_ServiceProvider
    {
        /**
         * Binds and sets up implementations.
         */
        public function register()
        {
        }
        /**
         * Handles next and previous links arguments when generated on a repository-managed query.
         *
         * The next and previous links are built by using the global query arguments and slightly altering them.
         * This approach, when done on the arguments provided by a repository generated query, might yield duplicated
         * meta queries that will, in turn, return wrong results.
         * The arguments will be already set in the arguments of the query.
         *
         * @since 4.9
         *
         * @param array          $args An array of query arguments that will be used to check if there are next or previous
         *                             events.
         * @param \WP_Query|null $query The query the arguments were taken from.
         *
         * @return array A filtered array of arguments where the date-related contents of the meta query are removed to
         *               avoid duplicates.
         */
        public function maybe_remove_date_meta_queries(array $args = [], \WP_Query $query = \null)
        {
        }
    }
}
namespace Tribe\Events\Service_Providers {
    /**
     * Class First_Boot
     *
     * @since   5.1.5
     *
     * @package Tribe\Events\Service_Providers
     */
    class First_Boot extends \tad_DI52_ServiceProvider
    {
        /**
         * Hooks the filters required to set up The Events Calendar after a fresh install.
         *
         * @since 5.1.5
         */
        public function register()
        {
        }
        /**
         * Sets up The Events Calendar default options on first boot.
         *
         * @since 5.1.5
         */
        public function set_default_options()
        {
        }
    }
}
namespace {
    class Tribe__Events__List_Widget extends \WP_Widget
    {
        private static $limit = 5;
        public static $posts = [];
        /**
         * Allows widgets extending this one to pass through their own unique name, ID base etc.
         *
         * @param string $id_base
         * @param string $name
         * @param array  $widget_options
         * @param array  $control_options
         */
        public function __construct($id_base = '', $name = '', $widget_options = [], $control_options = [])
        {
        }
        /**
         * The main widget output function.
         *
         * @param array $args
         * @param array $instance
         *
         * @return string The widget output (html).
         */
        public function widget($args, $instance)
        {
        }
        /**
         * The main widget output function (called by the class's widget() function).
         *
         * @param array  $args
         * @param array  $instance
         * @param string $template_name The template name.
         * @param string $subfolder     The subfolder where the template can be found.
         * @param string $namespace     The namespace for the widget template stuff.
         * @param string $pluginPath    The pluginpath so we can locate the template stuff.
         */
        public function widget_output($args, $instance, $template_name = 'widgets/list-widget')
        {
        }
        /**
         * The function for saving widget updates in the admin section.
         *
         * @param array $new_instance
         * @param array $old_instance
         *
         * @return array The new widget settings.
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * Output the admin form for the widget.
         *
         * @param array $instance
         *
         * @return string The output for the admin widget form.
         */
        public function form($instance)
        {
        }
        /**
         * Accepts and returns the widget's instance array - ensuring any missing
         * elements are generated and set to their default value.
         *
         * @param array $instance
         *
         * @return array
         */
        protected function default_instance_args(array $instance)
        {
        }
        /**
         * Enqueue the appropriate CSS for the list widget
         *
         * @since 4.6.24
         */
        public static function enqueue_widget_styles()
        {
        }
    }
    class Tribe__Events__REST__V1__Documentation__Venue_Definition_Provider implements \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
    }
    class Tribe__Events__REST__V1__Documentation__Event_Definition_Provider implements \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
    }
    class Tribe__Events__REST__V1__Documentation__Organizer_Definition_Provider implements \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
    }
    class Tribe__Events__REST__V1__Auth
    {
        public function can_post_event()
        {
        }
    }
    interface Tribe__Events__REST__V1__Validator__Interface extends \Tribe__Events__Validator__Interface
    {
    }
    class Tribe__Events__REST__V1__Validator__Base extends \Tribe__Events__Validator__Base implements \Tribe__Events__REST__V1__Validator__Interface
    {
        /**
         * Determine if a value is a Venue ID, entry, or empty.
         *
         * @since 4.6.20
         *
         * @param string|array $venue Venue ID or entry.
         *
         * @return bool Whether a value is a Venue ID, entry, or empty.
         */
        public function is_venue_id_or_entry_or_empty($venue)
        {
        }
        public function is_venue_id_or_entry($venue)
        {
        }
        /**
         * Determine if a value is a Organizer ID, entry, or empty.
         *
         * @since 4.6.20
         *
         * @param string|array $organizer Organizer ID or entry.
         *
         * @return bool Whether a value is a Organizer ID, entry, or empty.
         */
        public function is_organizer_id_or_entry_or_empty($organizer)
        {
        }
        public function is_organizer_id_or_entry($organizer)
        {
        }
    }
    abstract class Tribe__Events__REST__V1__Endpoints__Base
    {
        /**
         * @var Tribe__REST__Messages_Interface
         */
        protected $messages;
        /**
         * @var array
         */
        protected $supported_query_vars = [];
        /**
         * Tribe__Events__REST__V1__Endpoints__Base constructor.
         *
         * @param Tribe__REST__Messages_Interface $messages
         */
        public function __construct(\Tribe__REST__Messages_Interface $messages)
        {
        }
        /**
         * Converts an array of arguments suitable for the WP REST API to the Swagger format.
         *
         * @param array $args
         * @param array $defaults
         *
         * @return array The converted arguments.
         */
        public function swaggerize_args(array $args = [], array $defaults = [])
        {
        }
        /**
         * Falls back on an allowed post status in respect to the user user capabilities of publishing.
         *
         * @param string $post_status
         * @param string $post_type
         *
         * @return string
         */
        public function scale_back_post_status($post_status, $post_type)
        {
        }
        /**
        * Returns the default value of posts per page.
        an*
        * Cascading fallback is TEC `posts_per_page` option, `posts_per_page` option and, finally, 20.
        *
        * @return int
        */
        protected function get_default_posts_per_page()
        {
        }
        /**
         * Modifies a request argument marking it as not required.
         *
         * @param array $arg
         *
         * @since 4.6
         */
        protected function unrequire_arg(array &$arg)
        {
        }
        /**
         * Parses the arguments populated parsing the request filling out with the defaults.
         *
         * @param array $args
         * @param array $defaults
         *
         * @return array
         *
         * @since 4.6
         */
        protected function parse_args(array $args, array $defaults)
        {
        }
        /**
         * Whether a value is null or not.
         *
         * @param mixed $value
         *
         * @return bool
         *
         * @since 4.6
         */
        public function is_not_null($value)
        {
        }
        /**
         * Converts REST format type argument to the correspondant Swagger.io definition.
         *
         * @since 4.6
         *
         * @param string $type
         *
         * @return string
         */
        protected function convert_type($type)
        {
        }
    }
    abstract class Tribe__Events__REST__V1__Endpoints__Archive_Base extends \Tribe__Events__REST__V1__Endpoints__Base
    {
        /**
         * @var string The post type managed by this archive
         */
        protected $post_type = '';
        /**
         * @var array An array mapping the REST request supported query vars to the args used in a TEC WP_Query.
         */
        protected $supported_query_vars = [];
        /**
         * @var Tribe__Events__REST__Interfaces__Post_Repository
         */
        protected $repository;
        /**
         * @var Tribe__Events__Validator__Interface
         */
        protected $validator;
        /**
         * @var int The total number of posts according to the current request parameters and user access rights.
         */
        protected $total;
        /**
         * Tribe__Events__REST__V1__Endpoints__Archive_Event constructor.
         *
         * @param Tribe__REST__Messages_Interface                  $messages
         * @param Tribe__Events__REST__Interfaces__Post_Repository $repository
         * @param Tribe__Events__Validator__Interface              $validator
         */
        public function __construct(\Tribe__REST__Messages_Interface $messages, \Tribe__Events__REST__Interfaces__Post_Repository $repository, \Tribe__Events__Validator__Interface $validator)
        {
        }
        /**
         * Parses the `per_page` argument from the request.
         *
         * @param int $per_page The `per_page` param provided by the request.
         *
         * @return bool|int The `per_page` argument provided in the request or `false` if not set.
         */
        public function sanitize_per_page($per_page)
        {
        }
        /**
         * Returns the maximum number of posts per page fetched via the REST API.
         *
         * @return int
         */
        public abstract function get_max_posts_per_page();
        /**
         * Returns the total number of pages depending on the `per_page` setting.
         *
         * @param int $total
         * @param int $per_page
         *
         * @return int
         */
        protected function get_total_pages($total, $per_page = \null)
        {
        }
        /**
         * Returns the archive base REST URL
         *
         * @return string
         */
        protected abstract function get_base_rest_url();
        /**
         * Builds and returns the current rest URL depending on the query arguments.
         *
         * @param array $args
         * @param array $extra_args
         *
         * @return string
         */
        protected function get_current_rest_url(array $args = [], array $extra_args = [])
        {
        }
        /**
         * Builds and returns the next page REST URL.
         *
         * @param string $rest_url
         * @param int $page
         *
         * @return string
         */
        protected function get_next_rest_url($rest_url, $page)
        {
        }
        /**
         * Builds and returns the previous page REST URL.
         *
         * @param string $rest_url
         * @param int $page
         *
         * @return string
         */
        protected function get_previous_rest_url($rest_url, $page)
        {
        }
        /**
         * Filters a list of post stati returning only those accessible by the current user for the post type
         * managed by the endpoint.
         *
         * @since 4.6
         *
         * @param array|string $post_stati An array of post stati or a comma separated list of post stati.
         *
         * @return array|bool An array of post stati accessible by the current user or `false` if the no requested
         *               stati are accessible by the user.
         */
        public function filter_post_status_list($post_stati = 'publish')
        {
        }
    }
    class Tribe__Events__REST__V1__Endpoints__Archive_Organizer extends \Tribe__Events__REST__V1__Endpoints__Archive_Base implements \Tribe__REST__Endpoints__READ_Endpoint_Interface, \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * @var array An array mapping the REST request supported query vars to the args used in a TEC WP_Query.
         */
        protected $supported_query_vars = ['page' => 'paged', 'per_page' => 'posts_per_page', 'search' => 's', 'event' => 'event', 'has_events' => 'has_events', 'only_with_upcoming' => 'only_with_upcoming', 'status' => 'post_status'];
        /**
         * Tribe__Events__REST__V1__Endpoints__Archive_Organizer constructor.
         *
         * @since 4.6
         *
         * @param Tribe__REST__Messages_Interface                  $messages
         * @param Tribe__Events__REST__Interfaces__Post_Repository $repository
         * @param Tribe__Events__Validator__Interface              $validator
         */
        public function __construct(\Tribe__REST__Messages_Interface $messages, \Tribe__Events__REST__Interfaces__Post_Repository $repository, \Tribe__Events__Validator__Interface $validator)
        {
        }
        /**
         * Returns an array in the format used by Swagger 2.0
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
        /**
         * Handles GET requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data on success or a WP_Error instance on failure.
         *
         * @since 4.6
         */
        public function get(\WP_REST_Request $request)
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         *
         * @since 4.5
         */
        public function READ_args()
        {
        }
        /**
         * Returns the maximum number of posts per page fetched via the REST API.
         *
         * @return int
         *
         * @since 4.5
         */
        public function get_max_posts_per_page()
        {
        }
        /**
         * Returns the total number of posts matching the request.
         *
         * @since 4.6
         *
         * @param array $args
         * @param bool  $only_with_upcoming
         *
         * @return int
         */
        protected function get_total($args, $only_with_upcoming = \false)
        {
        }
        /**
         * Returns the archive base REST URL
         *
         * @since 4.6
         *
         * @return string
         */
        protected function get_base_rest_url()
        {
        }
        /**
         * Whether there is a next page in respect to the specified one.
         *
         * @param array $args
         * @param int   $page
         *
         * @param bool  $only_with_upcoming
         *
         * @return bool
         *
         * @since 4.6
         */
        protected function has_next($args, $page, $only_with_upcoming)
        {
        }
        /**
         * Whether there is a previous page in respect to the specified one.
         *
         * @param int   $page
         * @param array $args
         * @param bool  $only_with_upcoming
         *
         * @return bool
         *
         * @since 4.5
         */
        protected function has_previous($page, $args, $only_with_upcoming)
        {
        }
    }
    interface Tribe__Events__REST__V1__Endpoints__Linked_Post_Endpoint_Interface extends \Tribe__REST__Endpoints__READ_Endpoint_Interface, \Tribe__REST__Endpoints__CREATE_Endpoint_Interface, \Tribe__REST__Endpoints__DELETE_Endpoint_Interface, \Tribe__REST__Endpoints__UPDATE_Endpoint_Interface
    {
        /**
         * Inserts a post of the linked post type.
         *
         * @param int|array $data Either an existing linked post ID or the linked post data.
         *
         * @return false|array|WP_Error `false` if the linked post data is empty, the linked post ID (in an array as requested by the
         *                              linked posts engine) or a `WP_Error` if the linked post insertion failed.
         *
         * @since 4.6
         */
        public function insert($data);
    }
    abstract class Tribe__Events__REST__V1__Endpoints__Linked_Post_Base extends \Tribe__Events__REST__V1__Endpoints__Base implements \Tribe__Events__REST__V1__Endpoints__Linked_Post_Endpoint_Interface
    {
        /**
         * @var Tribe__Events__REST__Interfaces__Post_Repository
         */
        protected $post_repository;
        /**
         * @var Tribe__Events__REST__V1__Validator__Interface
         */
        protected $validator;
        /**
         * Tribe__Events__REST__V1__Endpoints__Single_Venue constructor.
         *
         * @param Tribe__REST__Messages_Interface                  $messages
         * @param Tribe__Events__REST__Interfaces__Post_Repository $post_repository
         * @param Tribe__Events__REST__V1__Validator__Interface    $validator
         */
        public function __construct(\Tribe__REST__Messages_Interface $messages, \Tribe__Events__REST__Interfaces__Post_Repository $post_repository, \Tribe__Events__REST__V1__Validator__Interface $validator)
        {
        }
        /**
         * Inserts a post of the linked post type.
         *
         * @param int|array $data Either an existing linked post ID or the linked post data.
         *
         * @return false|array|WP_Error `false` if the linked post data is empty, the linked post ID (in an array as requested by the
         *                              linked posts engine) or a `WP_Error` if the linked post insertion failed.
         */
        public function insert($data)
        {
        }
        /**
         * Whether the data represents a valid post type ID.
         *
         * @param mixed $data
         *
         * @return bool
         */
        protected abstract function is_post_type($data);
        /**
         * Returns the linked post ID index used by the linked posts engine to identify a linked post based on its post ID.
         *
         * @return string
         */
        public function get_id_index()
        {
        }
        /**
         * Returns the post type handled by this linked post endpoint.
         *
         * @return string
         */
        protected abstract function get_post_type();
    }
    /**
     * Class Tribe__Events__REST__V1__Endpoints__Single_Organizer
     *
     * @since bucket/full-rest-api
     */
    class Tribe__Events__REST__V1__Endpoints__Single_Organizer extends \Tribe__Events__REST__V1__Endpoints__Linked_Post_Base implements \Tribe__Events__REST__V1__Endpoints__Linked_Post_Endpoint_Interface, \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * Handles GET requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data on success or a WP_Error instance on failure.
         *
         * @since bucket/full-rest-api
         */
        public function get(\WP_REST_Request $request)
        {
        }
        /**
         * Handles POST requests on the endpoint.
         *
         * @param WP_REST_Request $request
         * @param bool            $return_id Whether the created post ID should be returned or the full response object.
         *
         * @return WP_Error|WP_REST_Response|int An array containing the data on success or a WP_Error instance on failure.
         *
         * @since bucket/full-rest-api
         */
        public function create(\WP_REST_Request $request, $return_id = \false)
        {
        }
        /**
         * Inserts one or more organizers.
         *
         * @param int|array $data Either an existing linked post ID or the linked post data or an array of the previous options.
         *
         * @return false|array|WP_Error `false` if the linked post data is empty, the linked post ID (in an array as requested by the
         *                              linked posts engine) or a `WP_Error` if the linked post insertion failed.
         *
         * @since bucket/full-rest-api
         */
        public function insert($data)
        {
        }
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link  http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         *
         * @since bucket/full-rest-api
         */
        public function get_documentation()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         *
         * @since bucket/full-rest-api
         */
        public function READ_args()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         *
         * @since bucket/full-rest-api
         */
        public function CREATE_args()
        {
        }
        /**
         * Whether the current user can create content of the specified type or not.
         *
         * @return bool Whether the current user can post or not.
         */
        public function can_create()
        {
        }
        /**
         * Prepares an array with the or data from the specified request.
         *
         * @param WP_REST_Request $request
         *
         * @return array
         */
        public function prepare_postarr(\WP_REST_Request $request)
        {
        }
        /**
         * Returns the post type handled by this linked post endpoint.
         *
         * @return string
         *
         * @since bucket/full-rest-api
         */
        protected function get_post_type()
        {
        }
        /**
         * Whether the data represents a valid post type ID.
         *
         * @param mixed $data
         *
         * @return bool
         *
         * @since bucket/full-rest-api
         */
        protected function is_post_type($data)
        {
        }
        /**
         * Handles DELETE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the trashed post on
         *                                   success or a WP_Error instance on failure.
         */
        public function delete(\WP_REST_Request $request)
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         */
        public function DELETE_args()
        {
        }
        /**
         * Whether the current user can delete posts of the type managed by the endpoint or not.
         *
         * @since 4.6
         *
         * @return bool
         */
        public function can_delete()
        {
        }
        /**
         * Handles UPDATE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the updated post on
         *                                   success or a WP_Error instance on failure.
         */
        public function update(\WP_REST_Request $request)
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         */
        public function EDIT_args()
        {
        }
        /**
         * Whether the current user can update content of this type or not.
         *
         * @since 4.6
         *
         * @return bool Whether the current user can update or not.
         */
        public function can_edit()
        {
        }
    }
    class Tribe__Events__REST__V1__Endpoints__Single_Organizer_Slug extends \Tribe__Events__REST__V1__Endpoints__Single_Organizer
    {
        /**
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response|WP_Error An array containing the data on success or a WP_Error instance on failure.
         */
        public function get(\WP_REST_Request $request)
        {
        }
        /**
         * Provides the content of the `args` array to register the endpoint support for GET requests.
         *
         * @return array
         */
        public function READ_args()
        {
        }
        /**
         * Handles DELETE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the trashed post on
         *                                   success or a WP_Error instance on failure.
         */
        public function delete(\WP_REST_Request $request)
        {
        }
        /**
         * Handles UPDATE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the updated post on
         *                                   success or a WP_Error instance on failure.
         */
        public function update(\WP_REST_Request $request)
        {
        }
    }
    abstract class Tribe__Events__REST__V1__Endpoints__Term_Archive_Base extends \Tribe__Events__REST__V1__Endpoints__Archive_Base
    {
        /**
         * @var \WP_REST_Terms_Controller
         */
        protected $terms_controller;
        /**
         * @var array An array mapping the REST request supported query vars to the args used in a WP_REST_Terms_Controller query.
         */
        protected $supported_query_vars = ['page' => 'page', 'per_page' => 'per_page', 'search' => 'search', 'exclude' => 'exclude', 'include' => 'include', 'order' => 'order', 'orderby' => 'orderby', 'hide_empty' => 'hide_empty', 'parent' => 'parent', 'post' => 'post', 'event' => 'post', 'slug' => 'slug'];
        public function __construct(\Tribe__REST__Messages_Interface $messages, \Tribe__Events__REST__Interfaces__Post_Repository $repository, \Tribe__Events__Validator__Interface $validator, \WP_REST_Terms_Controller $terms_controller)
        {
        }
        /**
         * Handles GET requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data on success or a WP_Error instance on failure.
         */
        public function get(\WP_REST_Request $request)
        {
        }
        /**
         * Returns the maximum number of posts per page fetched via the REST API.
         *
         * @return int
         */
        public function get_max_posts_per_page()
        {
        }
        /**
         * Returns the taxonomy of the terms handled by the endpoint.
         *
         * @return string
         *
         * @since 4.6
         */
        protected abstract function get_taxonomy();
        /**
         * Returns the data key that will be used to store terms data in the response.
         *
         * @return string
         *
         * @since 4.6
         */
        protected abstract function get_data_key();
    }
    class Tribe__Events__REST__V1__Endpoints__Archive_Tag extends \Tribe__Events__REST__V1__Endpoints__Term_Archive_Base implements \Tribe__REST__Endpoints__READ_Endpoint_Interface, \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * @var array An array mapping the REST request supported query vars to the args used in a WP_REST_Terms_Controller query.
         */
        protected $supported_query_vars = ['page' => 'page', 'per_page' => 'per_page', 'search' => 'search', 'exclude' => 'exclude', 'include' => 'include', 'order' => 'order', 'orderby' => 'orderby', 'hide_empty' => 'hide_empty', 'post' => 'post', 'event' => 'post', 'slug' => 'slug'];
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @since 4.6
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
        /**
         * Returns the taxonomy of the terms handled by the endpoint.
         *
         * @since 4.6
         *
         * @return string
         */
        public function get_taxonomy()
        {
        }
        /**
         * Returns the archive base REST URL
         *
         * @since 4.6
         *
         * @return string
         */
        protected function get_base_rest_url()
        {
        }
        /**
         * Returns the data key that will be used to store terms data in the response.
         *
         * @since 4.6
         *
         * @return string
         */
        protected function get_data_key()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @since 4.6
         *
         * @return array
         */
        public function READ_args()
        {
        }
    }
    class Tribe__Events__REST__V1__Endpoints__Swagger_Documentation implements \Tribe__REST__Endpoints__READ_Endpoint_Interface, \Tribe__Documentation__Swagger__Provider_Interface, \Tribe__Documentation__Swagger__Builder_Interface
    {
        /**
         * @var string
         */
        protected $swagger_version = '2.0';
        /**
         * @var string
         */
        protected $tec_rest_api_version;
        /**
         * @var Tribe__Documentation__Swagger__Provider_Interface[]
         */
        protected $documentation_providers = [];
        /**
         * @var Tribe__Documentation__Swagger__Provider_Interface[]
         */
        protected $definition_providers = [];
        /**
         * Tribe__Events__REST__V1__Endpoints__Swagger_Documentation constructor.
         *
         * @param string $tec_rest_api_version
         */
        public function __construct($tec_rest_api_version)
        {
        }
        /**
         * Handles GET requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data on success or a WP_Error instance on failure.
         */
        public function get(\WP_REST_Request $request)
        {
        }
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
        protected function get_api_info()
        {
        }
        protected function get_paths()
        {
        }
        /**
         * Registers a documentation provider for a path.
         *
         * @param                                            $path
         * @param Tribe__Documentation__Swagger__Provider_Interface $endpoint
         */
        public function register_documentation_provider($path, \Tribe__Documentation__Swagger__Provider_Interface $endpoint)
        {
        }
        protected function get_own_documentation()
        {
        }
        protected function get_definitions()
        {
        }
        /**
         * @return Tribe__Documentation__Swagger__Provider_Interface[]
         */
        public function get_registered_documentation_providers()
        {
        }
        /**
         * Registers a documentation provider for a definition.
         *
         * @param                                                  string $type
         * @param Tribe__Documentation__Swagger__Provider_Interface       $provider
         */
        public function register_definition_provider($type, \Tribe__Documentation__Swagger__Provider_Interface $provider)
        {
        }
        /**
         * @return Tribe__Documentation__Swagger__Provider_Interface[]
         */
        public function get_registered_definition_providers()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         */
        public function READ_args()
        {
        }
    }
    class Tribe__Events__REST__V1__Endpoints__Single_Event extends \Tribe__Events__REST__V1__Endpoints__Base implements \Tribe__REST__Endpoints__READ_Endpoint_Interface, \Tribe__REST__Endpoints__CREATE_Endpoint_Interface, \Tribe__REST__Endpoints__DELETE_Endpoint_Interface, \Tribe__REST__Endpoints__UPDATE_Endpoint_Interface, \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * @var Tribe__REST__Main
         */
        protected $main;
        /**
         * @var WP_REST_Request
         */
        protected $serving;
        /**
         * @var Tribe__Events__REST__Interfaces__Post_Repository
         */
        protected $post_repository;
        /**
         * @var Tribe__Events__REST__V1__Validator__Interface
         */
        protected $validator;
        /**
         * @var Tribe__Events__REST__V1__Endpoints__Linked_Post_Endpoint_Interface
         */
        protected $venue_endpoint;
        /**
         * @var Tribe__Events__REST__V1__Endpoints__Linked_Post_Endpoint_Interface
         */
        protected $organizer_endpoint;
        /**
         * Tribe__Events__REST__V1__Endpoints__Single_Event constructor.
         *
         * @param Tribe__REST__Messages_Interface                                    $messages
         * @param Tribe__Events__REST__Interfaces__Post_Repository                   $post_repository
         * @param Tribe__Events__REST__V1__Validator__Interface                      $validator
         * @param Tribe__Events__REST__V1__Endpoints__Linked_Post_Endpoint_Interface $venue_endpoint
         * @param Tribe__Events__REST__V1__Endpoints__Linked_Post_Endpoint_Interface $organizer_endpoint
         */
        public function __construct(\Tribe__REST__Messages_Interface $messages, \Tribe__Events__REST__Interfaces__Post_Repository $post_repository, \Tribe__Events__REST__V1__Validator__Interface $validator, \Tribe__Events__REST__V1__Endpoints__Linked_Post_Endpoint_Interface $venue_endpoint, \Tribe__Events__REST__V1__Endpoints__Linked_Post_Endpoint_Interface $organizer_endpoint)
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response|WP_Error An array containing the data on success or a WP_Error instance on failure.
         */
        public function get(\WP_REST_Request $request)
        {
        }
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
        /**
         * Provides the content of the `args` array to register the endpoint support for GET requests.
         *
         * @return array
         */
        public function READ_args()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         */
        public function CREATE_args()
        {
        }
        /**
         * Handles POST requests on the endpoint.
         *
         * @param WP_REST_Request $request
         * @param bool            $return_id Whether the created post ID should be returned or the full response object.
         *
         * @return WP_Error|WP_REST_Response|int An array containing the data on success or a WP_Error instance on failure.
         */
        public function create(\WP_REST_Request $request, $return_id = \false)
        {
        }
        /**
         * Whether the current user can create content of the specified type or not.
         *
         * @return bool Whether the current user can post or not.
         */
        public function can_create()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         */
        public function DELETE_args()
        {
        }
        /**
         * Handles DELETE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the trashed post on
         *                                   success or a WP_Error instance on failure.
         */
        public function delete(\WP_REST_Request $request)
        {
        }
        /**
         * Whether the current user can delete posts of the type managed by the endpoint or not.
         *
         * @since 4.6
         *
         * @return bool
         */
        public function can_delete()
        {
        }
        /**
         * Handles UPDATE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the updated post on
         *                                   success or a WP_Error instance on failure.
         */
        public function update(\WP_REST_Request $request)
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         */
        public function EDIT_args()
        {
        }
        /**
         * Whether the current user can update content of this type or not.
         *
         * @since 4.6
         *
         * @return bool Whether the current user can update or not.
         */
        public function can_edit()
        {
        }
        /**
         * Prepares an array with the event data from the specified request.
         *
         * @param WP_REST_Request $request
         *
         * @return array|WP_Error An array specifying the event data, a `WP_Error` if an error occurred.
         */
        protected function prepare_postarr(\WP_REST_Request $request)
        {
        }
    }
    class Tribe__Events__REST__V1__Endpoints__Single_Event_Slug extends \Tribe__Events__REST__V1__Endpoints__Single_Event
    {
        /**
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response|WP_Error An array containing the data on success or a WP_Error instance on failure.
         */
        public function get(\WP_REST_Request $request)
        {
        }
        /**
         * Provides the content of the `args` array to register the endpoint support for GET requests.
         *
         * @return array
         */
        public function READ_args()
        {
        }
        /**
         * Handles DELETE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the trashed post on
         *                                   success or a WP_Error instance on failure.
         */
        public function delete(\WP_REST_Request $request)
        {
        }
        /**
         * Handles UPDATE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the updated post on
         *                                   success or a WP_Error instance on failure.
         */
        public function update(\WP_REST_Request $request)
        {
        }
    }
    abstract class Tribe__Events__REST__V1__Endpoints__Term_Single_Base extends \Tribe__Events__REST__V1__Endpoints__Base
    {
        /**
         * @var \Tribe__Events__REST__Interfaces__Post_Repository
         */
        protected $repository;
        /**
         * @var \Tribe__Events__Validator__Interface
         */
        protected $validator;
        /**
         * @var \WP_REST_Terms_Controller
         */
        protected $terms_controller;
        /**
         * Tribe__Events__REST__V1__Endpoints__Term_Single_Base constructor.
         *
         * @since 4.6
         *
         * @param \Tribe__REST__Messages_Interface                  $messages
         * @param \Tribe__Events__REST__Interfaces__Post_Repository $repository
         * @param \Tribe__Events__Validator__Interface              $validator
         * @param \WP_REST_Terms_Controller                         $terms_controller
         */
        public function __construct(\Tribe__REST__Messages_Interface $messages, \Tribe__Events__REST__Interfaces__Post_Repository $repository, \Tribe__Events__Validator__Interface $validator, \WP_REST_Terms_Controller $terms_controller)
        {
        }
        /**
         * Returns the taxonomy of the terms handled by the endpoint.
         *
         * @since 4.6
         *
         * @return string
         */
        public abstract function get_taxonomy();
        /**
         * Handles GET requests on the endpoint.
         *
         * @since 4.6
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data on success or a WP_Error instance on failure.
         */
        public function get(\WP_REST_Request $request)
        {
        }
        /**
         * Returns the term namespace used by the endpoint.
         *
         * @since 4.6
         *
         * @return string
         */
        protected abstract function get_term_namespace();
        /**
         * Handles POST requests on the endpoint.
         *
         * @since 4.6
         *
         * @param WP_REST_Request $request
         * @param bool            $return_id Whether the created post ID should be returned or the full response object.
         *
         * @return WP_Error|WP_REST_Response|int An array containing the data on success or a WP_Error instance on failure.
         */
        public function create(\WP_REST_Request $request, $return_id = \false)
        {
        }
        /**
         * Whether the current user can create content of the specified type or not.
         *
         * @since 4.6
         *
         * @return bool Whether the current user can post or not.
         */
        public function can_create()
        {
        }
        /**
         * Whether the current user can update content of this type or not.
         *
         * @since 4.6
         *
         * @return bool Whether the current user can update or not.
         */
        public function can_edit()
        {
        }
        /**
         * Handles UPDATE requests on the endpoint.
         *
         * @since 4.6
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the updated post on
         *                                   success or a WP_Error instance on failure.
         */
        public function update(\WP_REST_Request $request)
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @since 4.6
         *
         * @return array
         */
        public function EDIT_args()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @since 4.6
         *
         * @return array
         */
        public function DELETE_args()
        {
        }
        /**
         * Whether the current user can delete content of this type or not.
         *
         * @since 4.6
         *
         * @return bool Whether the current user can delete or not.
         */
        public function can_delete()
        {
        }
        /**
         * Handles DELETE requests on the endpoint.
         *
         * @since 4.6
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the trashed post on
         *                                   success or a WP_Error instance on failure.
         */
        public function delete(\WP_REST_Request $request)
        {
        }
    }
    class Tribe__Events__REST__V1__Endpoints__Single_Category extends \Tribe__Events__REST__V1__Endpoints__Term_Single_Base implements \Tribe__REST__Endpoints__READ_Endpoint_Interface, \Tribe__REST__Endpoints__CREATE_Endpoint_Interface, \Tribe__REST__Endpoints__DELETE_Endpoint_Interface, \Tribe__REST__Endpoints__UPDATE_Endpoint_Interface, \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @since 4.6
         *
         * @return array
         */
        public function CREATE_args()
        {
        }
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @since 4.6
         *
         * @link  http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @since 4.6
         *
         * @return array
         */
        public function READ_args()
        {
        }
        /**
         * Returns the taxonomy of the terms handled by the endpoint.
         *
         * @since 4.6
         *
         * @return string
         */
        public function get_taxonomy()
        {
        }
        /**
         * Returns the term namespace used by the endpoint.
         *
         * @since 4.6
         *
         * @return string
         */
        protected function get_term_namespace()
        {
        }
    }
    class Tribe__Events__REST__V1__Endpoints__Archive_Category extends \Tribe__Events__REST__V1__Endpoints__Term_Archive_Base implements \Tribe__REST__Endpoints__READ_Endpoint_Interface, \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @since 4.6
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
        /**
         * Returns the taxonomy of the terms handled by the endpoint.
         *
         * @since 4.6
         *
         * @return string
         */
        public function get_taxonomy()
        {
        }
        /**
         * Returns the archive base REST URL
         *
         * @since 4.6
         *
         * @return string
         */
        protected function get_base_rest_url()
        {
        }
        /**
         * Returns the data key that will be used to store terms data in the response.
         *
         * @since 4.6
         *
         * @return string
         */
        protected function get_data_key()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @since 4.6
         *
         * @return array
         */
        public function READ_args()
        {
        }
    }
    /**
     * Class Tribe__Events__REST__V1__Endpoints__Single_Venue
     *
     * @since bucket/full-rest-api
     */
    class Tribe__Events__REST__V1__Endpoints__Single_Venue extends \Tribe__Events__REST__V1__Endpoints__Linked_Post_Base implements \Tribe__Events__REST__V1__Endpoints__Linked_Post_Endpoint_Interface, \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * @var string
         */
        protected $post_type = \Tribe__Events__Main::VENUE_POST_TYPE;
        /**
         * Handles GET requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data on success or a WP_Error instance on failure.
         *
         * @since bucket/full-rest-api
         */
        public function get(\WP_REST_Request $request)
        {
        }
        /**
         * Handles POST requests on the endpoint.
         *
         * @param WP_REST_Request $request
         * @param bool            $return_id Whether the created post ID should be returned or the full response object.
         *
         * @return WP_Error|WP_REST_Response|int An array containing the data on success or a WP_Error instance on failure.
         *
         * @since bucket/full-rest-api
         */
        public function create(\WP_REST_Request $request, $return_id = \false)
        {
        }
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link  http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         *
         * @since bucket/full-rest-api
         */
        public function get_documentation()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         *
         * @since bucket/full-rest-api
         */
        public function READ_args()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         *
         * @since bucket/full-rest-api
         */
        public function CREATE_args()
        {
        }
        /**
         * Prepares an array with the venue data from the specified request.
         *
         * @param WP_REST_Request $request
         *
         * @return array
         */
        public function prepare_postarr(\WP_REST_Request $request)
        {
        }
        /**
         * Returns the post type handled by this linked post endpoint.
         *
         * @return string
         *
         * @since bucket/full-rest-api
         */
        protected function get_post_type()
        {
        }
        /**
         * Whether the data represents a valid post type ID.
         *
         * @param mixed $data
         *
         * @return bool
         *
         * @since bucket/full-rest-api
         */
        protected function is_post_type($data)
        {
        }
        /**
         * @return bool Whether the current user can post or not.
         */
        public function can_create()
        {
        }
        /**
         * Handles DELETE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the trashed post on
         *                                   success or a WP_Error instance on failure.
         */
        public function delete(\WP_REST_Request $request)
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         */
        public function DELETE_args()
        {
        }
        /**
         * Whether the current user can delete posts of the type managed by the endpoint or not.
         *
         * @since 4.6
         *
         * @return bool
         */
        public function can_delete()
        {
        }
        /**
         * Handles UPDATE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the updated post on
         *                                   success or a WP_Error instance on failure.
         */
        public function update(\WP_REST_Request $request)
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         */
        public function EDIT_args()
        {
        }
        /**
         * Whether the current user can update content of this type or not.
         *
         * @since 4.6
         *
         * @return bool Whether the current user can update or not.
         */
        public function can_edit()
        {
        }
    }
    class Tribe__Events__REST__V1__Endpoints__Archive_Event extends \Tribe__Events__REST__V1__Endpoints__Archive_Base implements \Tribe__REST__Endpoints__READ_Endpoint_Interface, \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * @var array An array mapping the REST request supported query vars to the args used in a TEC WP_Query.
         */
        protected $supported_query_vars = ['page' => 'paged', 'per_page' => 'posts_per_page', 'start_date' => 'start_date', 'end_date' => 'end_date', 'search' => 's', 'categories' => 'categories', 'tags' => 'tags', 'venue' => 'venue', 'organizer' => 'organizer', 'featured' => 'featured', 'geoloc' => 'tribe_geoloc', 'geoloc_lat' => 'tribe_geoloc_lat', 'geoloc_lng' => 'tribe_geoloc_lng', 'status' => 'post_status', 'post_parent' => 'post_parent', 'include' => 'post__in'];
        /**
         * Tribe__Events__REST__V1__Endpoints__Archive_Event constructor.
         *
         * @since 4.6
         *
         * @param Tribe__REST__Messages_Interface                  $messages
         * @param Tribe__Events__REST__Interfaces__Post_Repository $repository
         * @param Tribe__Events__Validator__Interface              $validator
         */
        public function __construct(\Tribe__REST__Messages_Interface $messages, \Tribe__Events__REST__Interfaces__Post_Repository $repository, \Tribe__Events__Validator__Interface $validator)
        {
        }
        /**
         * Handles GET requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data on success or a WP_Error instance on failure.
         */
        public function get(\WP_REST_Request $request)
        {
        }
        /**
         * Parses the `page` argument from the request.
         *
         * @param WP_REST_Request $request
         * @return bool|int The `page` argument provided in the request or `false` if not set.
         */
        protected function parse_page(\WP_REST_Request $request)
        {
        }
        /**
         * Parses the request for featured events.
         *
         * @param string $featured
         *
         * @return array|bool Either the meta query for featured events or `false` if not specified.
         */
        protected function parse_featured_meta_query_entry($featured)
        {
        }
        /**
         * @param array|string $terms A list of terms term_id or slugs or a single term term_id or slug.
         * @param string $taxonomy The taxonomy of the terms to parse.
         *
         * @return array|bool Either an array of `terms_ids` or `false` on failure.
         *
         * @throws Tribe__REST__Exceptions__Exception If one of the terms does not exist for the specified taxonomy.
         */
        protected function parse_terms_query($terms, $taxonomy)
        {
        }
        /**
         * Parses and created a meta query entry in from the request.
         *
         * @param string $meta_value The value that should be used for comparison.
         * @param string $meta_key   The meta key that should be used for the comparison.
         * @param string $compare    The comparison operator.
         * @param string $type       The type to which compared values should be cast.
         * @param string $relation   If multiple meta values are provided then this is the relation that the query should use.
         *
         * @return array|bool The meta query entry or `false` on failure.
         */
        protected function parse_meta_query_entry($meta_value, $meta_key, $compare = '=', $type = 'CHAR', $relation = 'OR')
        {
        }
        /**
         * Whether there is a next page in respect to the specified one.
         *
         * @param array $args
         * @param int $page
         *
         * @return bool
         */
        protected function has_next($args, $page)
        {
        }
        /**
         * Whether there is a previous page in respect to the specified one.
         *
         * @param array $args
         * @param int $page
         *
         * @return bool
         */
        protected function has_previous($page, $args)
        {
        }
        /**
         * Returns the maximum number of posts per page fetched via the REST API.
         *
         * @return int
         */
        public function get_max_posts_per_page()
        {
        }
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         */
        public function READ_args()
        {
        }
        /**
         * Returns the total number of posts matching the request.
         *
         * @since 4.6
         *
         * @param array $args
         *
         * @return int
         */
        protected function get_total($args)
        {
        }
        /**
         * Returns the archive base REST URL
         *
         * @since 4.6
         *
         * @return string
         */
        protected function get_base_rest_url()
        {
        }
    }
    class Tribe__Events__REST__V1__Endpoints__Archive_Venue extends \Tribe__Events__REST__V1__Endpoints__Archive_Base implements \Tribe__REST__Endpoints__READ_Endpoint_Interface, \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * @var array An array mapping the REST request supported query vars to the args used in a TEC WP_Query.
         */
        protected $supported_query_vars = array('page' => 'paged', 'per_page' => 'posts_per_page', 'search' => 's', 'event' => 'event', 'has_events' => 'has_events', 'only_with_upcoming' => 'only_with_upcoming', 'status' => 'post_status');
        /**
         * Tribe__Events__REST__V1__Endpoints__Archive_Venue constructor. *
         * @param Tribe__REST__Messages_Interface                  $messages
         * @param Tribe__Events__REST__Interfaces__Post_Repository $repository
         * @param Tribe__Events__Validator__Interface              $validator
         */
        public function __construct(\Tribe__REST__Messages_Interface $messages, \Tribe__Events__REST__Interfaces__Post_Repository $repository, \Tribe__Events__Validator__Interface $validator)
        {
        }
        /**
         * Returns an array in the format used by Swagger 2.0
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
        /**
         * Handles GET requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data on success or a WP_Error instance on failure.
         *
         * @since 4.6
         */
        public function get(\WP_REST_Request $request)
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         *
         * @since 4.5
         */
        public function READ_args()
        {
        }
        /**
         * Returns the maximum number of posts per page fetched via the REST API.
         *
         * @return int
         *
         * @since 4.5
         */
        public function get_max_posts_per_page()
        {
        }
        /**
         * Returns the total number of posts matching the request.
         *
         * @since 4.6
         *
         * @param array $args
         * @param bool  $only_with_upcoming
         *
         * @return int
         */
        protected function get_total($args, $only_with_upcoming = \false)
        {
        }
        /**
         * Returns the archive base REST URL
         *
         * @since 4.6
         *
         * @return string
         */
        protected function get_base_rest_url()
        {
        }
        /**
         * Whether there is a next page in respect to the specified one.
         *
         * @param array $args
         * @param int   $page
         *
         * @param bool  $only_with_upcoming
         *
         * @return bool
         *
         * @since 4.6
         */
        protected function has_next($args, $page, $only_with_upcoming)
        {
        }
        /**
         * Whether there is a previous page in respect to the specified one.
         *
         * @param int   $page
         * @param array $args
         * @param bool  $only_with_upcoming
         *
         * @return bool
         *
         * @since 4.5
         */
        protected function has_previous($page, $args, $only_with_upcoming)
        {
        }
    }
    class Tribe__Events__REST__V1__Endpoints__Single_Venue_Slug extends \Tribe__Events__REST__V1__Endpoints__Single_Venue
    {
        /**
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response|WP_Error An array containing the data on success or a WP_Error instance on failure.
         */
        public function get(\WP_REST_Request $request)
        {
        }
        /**
         * Provides the content of the `args` array to register the endpoint support for GET requests.
         *
         * @return array
         */
        public function READ_args()
        {
        }
        /**
         * Handles DELETE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the trashed post on
         *                                   success or a WP_Error instance on failure.
         */
        public function delete(\WP_REST_Request $request)
        {
        }
        /**
         * Handles UPDATE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the updated post on
         *                                   success or a WP_Error instance on failure.
         */
        public function update(\WP_REST_Request $request)
        {
        }
    }
    class Tribe__Events__REST__V1__Endpoints__Single_Tag extends \Tribe__Events__REST__V1__Endpoints__Term_Single_Base implements \Tribe__REST__Endpoints__READ_Endpoint_Interface, \Tribe__REST__Endpoints__CREATE_Endpoint_Interface, \Tribe__REST__Endpoints__DELETE_Endpoint_Interface, \Tribe__REST__Endpoints__UPDATE_Endpoint_Interface, \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @since 4.6
         *
         * @return array
         */
        public function CREATE_args()
        {
        }
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @since 4.6
         *
         * @link  http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @since 4.6
         *
         * @return array
         */
        public function READ_args()
        {
        }
        /**
         * Returns the taxonomy of the terms handled by the endpoint.
         *
         * @since 4.6
         *
         * @return string
         */
        public function get_taxonomy()
        {
        }
        /**
         * Returns the term namespace used by the endpoint.
         *
         * @since 4.6
         *
         * @return string
         */
        protected function get_term_namespace()
        {
        }
    }
    /**
     * Class Tribe__Events__REST__V1__Settings
     *
     * Adds and manages the TEC REST API settings.
     */
    class Tribe__Events__REST__V1__Settings
    {
        /**
         * @var Tribe__Events__REST__V1__System
         */
        protected $system;
        /**
         * Tribe__Events__REST__V1__Settings constructor.
         *
         * @param Tribe__Events__REST__V1__System $system
         */
        public function __construct(\Tribe__Events__REST__V1__System $system)
        {
        }
        /**
         * @param array $fields
         *
         * @return array
         */
        public function filter_tribe_addons_tab_fields(array $fields = [])
        {
        }
        /**
         * @param array $fields
         *
         * @return array
         */
        protected function add_fields(array $fields = [])
        {
        }
    }
    class Tribe__Events__REST__V1__Messages implements \Tribe__REST__Messages_Interface
    {
        /**
         * @var string
         */
        protected $message_prefix = 'rest-v1:';
        public function __construct()
        {
        }
        /**
         * Returns the localized message associated with the slug.
         *
         * @param string $message_slug
         *
         * @return string
         */
        public function get_message($message_slug)
        {
        }
        /**
         * Returns the associative array of all the messages handled by the class.
         *
         * @return array An associative array in the `[ <slug> => <localized message> ]` format.
         */
        public function get_messages()
        {
        }
        /**
         * Prefixes a message slug with a common root.
         *
         * Used to uniform the slug format to the one used by the `Tribe__Events__Aggregator__Service` class.
         *
         * @see Tribe__Events__Aggregator__Service::register_messages()
         *
         * @param string $message_slug
         *
         * @return string The prefixed message slug.
         */
        public function prefix_message_slug($message_slug)
        {
        }
    }
    class Tribe__Events__REST__V1__EA_Messages extends \Tribe__Events__REST__V1__Messages implements \Tribe__REST__Messages_Interface
    {
        public function __construct()
        {
        }
    }
    /**
     * Class Tribe__Events__REST__V1__Main
     *
     * The main entry point for TEC REST API.
     *
     * This class should not contain business logic and merely set up and start the TEC REST API support.
     */
    class Tribe__Events__REST__V1__Main extends \Tribe__REST__Main
    {
        /**
         * The Events Calendar REST API URL prefix.
         *
         * This prefx is appended to the Modern Tribe REST API URL ones.
         *
         * @var string
         */
        protected $url_prefix = '/events/v1';
        /**
         * @var array
         */
        protected $registered_endpoints = [];
        /**
         * Binds the implementations needed to support the REST API.
         */
        public function bind_implementations()
        {
        }
        /**
         * Hooks the filters and actions required for the REST API support to kick in.
         */
        public function hook()
        {
        }
        /**
         * Hooks the additional headers and meta tags related to the REST API.
         */
        protected function hook_headers()
        {
        }
        /**
         * Hooks the additional Events Settings related to the REST API.
         */
        protected function hook_settings()
        {
        }
        protected function hook_messages()
        {
        }
        /**
         * Registers the endpoints, and the handlers, supported by the REST API
         *
         * @param bool $register_routes Whether routes should be registered as well or not.
         */
        public function register_endpoints($register_routes = \true)
        {
        }
        /**
         * Builds and hooks the documentation endpoint
         *
         * @since 4.5
         *
         * @param bool $register_routes Whether routes for the endpoint should be registered or not.
         *
         */
        protected function register_documentation_endpoint($register_routes = \true)
        {
        }
        protected function get_semantic_version()
        {
        }
        /**
         * Returns the events REST API namespace string that should be used to register a route.
         *
         * @return string
         */
        protected function get_events_route_namespace()
        {
        }
        /**
         * Returns the string indicating the REST API version.
         *
         * @return string
         */
        public function get_version()
        {
        }
        /**
         * Builds and hooks the event archives endpoint
         *
         * @since 4.5
         *
         * @param bool $register_routes Whether routes for the endpoint should be registered or not.
         *
         */
        protected function register_event_archives_endpoint($register_routes = \true)
        {
        }
        /**
         * Registers the endpoint that will handle requests for a single event.
         *
         * @since 4.5
         *
         * @param bool $register_routes Whether routes for the endpoint should be registered or not.
         *
         */
        protected function register_single_event_endpoint($register_routes = \true)
        {
        }
        /**
         * Registers the endpoint that will handle requests for a single event slug.
         *
         * @since 4.5
         *
         * @param bool $register_routes Whether routes for the endpoint should be registered or not.
         *
         */
        protected function register_single_event_slug_endpoint($register_routes = \true)
        {
        }
        /**
         * Returns the URL where the API users will find the API documentation.
         *
         * @return string
         */
        public function get_reference_url()
        {
        }
        /**
         * Filters the messages returned by the Event Aggregator Service to add those specific to the REST API v1.
         *
         * @param array $messages
         *
         * @return array The original messages plus those specific to the REST API V1.
         */
        public function filter_service_messages(array $messages = [])
        {
        }
        /**
         * Filters the messages localized by the Event Aggregator Service to add those specific to the REST API v1.
         *
         * @param array $localized_data
         *
         * @return array
         */
        public function filter_localized_data(array $localized_data = [])
        {
        }
        /**
         * Builds an instance of the single venue endpoint.
         *
         * @return Tribe__Events__REST__V1__Endpoints__Single_Venue
         */
        public function build_single_venue_endpoint()
        {
        }
        /**
         * Builds an instance of the single organizer endpoint.
         *
         * @return Tribe__Events__REST__V1__Endpoints__Single_Organizer
         */
        public function build_single_organizer_endpoint()
        {
        }
        /**
         * Returns the REST API URL prefix that will be appended to the namespace.
         *
         * The prefix should be in the `/some/path` format.
         *
         * @return string
         */
        protected function url_prefix()
        {
        }
        /**
         * Registers the endpoint that will handle requests for a single venue.
         *
         * @since 4.6
         *
         * @param bool $register_routes Whether routes for the endpoint should be registered or not.
         *
         */
        protected function register_single_venue_endpoint($register_routes = \true)
        {
        }
        /**
         * Registers the endpoint that will handle requests for a single venue slug.
         *
         * @since 4.6
         *
         * @param bool $register_routes Whether routes for the endpoint should be registered or not.
         *
         */
        protected function register_single_venue_slug_endpoint($register_routes = \true)
        {
        }
        /**
         * Registers the endpoint that will handle requests for a single organizer.
         *
         * @since bucket/full-rest-api
         *
         * @param bool $register_routes Whether routes for the endpoint should be registered or not.
         *
         */
        protected function register_single_organizer_endpoint($register_routes = \true)
        {
        }
        /**
         * Registers the endpoint that will handle requests for a single organizer slug.
         *
         * @since bucket/full-rest-api
         *
         * @param bool $register_routes Whether routes for the endpoint should be registered or not.
         *
         */
        protected function register_single_organizer_slug_endpoint($register_routes = \true)
        {
        }
        /**
         * Builds and hooks the venue archives endpoint
         *
         * @since 4.6
         *
         * @param bool $register_routes Whether routes for the endpoint should be registered or not.
         *
         */
        protected function register_venue_archives_endpoint($register_routes = \true)
        {
        }
        /**
         * Builds and hooks the organizer archives endpoint
         *
         * @since 4.6
         *
         * @param bool $register_routes Whether routes for the endpoint should be registered or not.
         *
         */
        protected function register_organizer_archives_endpoint($register_routes = \true)
        {
        }
        /**
         * Builds and hooks the event categories archives endpoint
         *
         * @since 4.6
         *
         * @param bool $register_routes Whether routes for the endpoint should be registered or not.
         */
        protected function register_categories_endpoint($register_routes)
        {
        }
        /**
         * Builds and hooks the event tags archives endpoint
         *
         * @since 4.6
         *
         * @param bool $register_routes Whether routes for the endpoint should be registered or not.
         */
        protected function register_tags_endpoint($register_routes)
        {
        }
        /**
         * Filters the event category taxonomy registration arguments to make it show in REST API requests.
         *
         * @since 4.6
         *
         * @param array $taxonomy_args
         *
         * @return array
         */
        public function filter_taxonomy_args(array $taxonomy_args)
        {
        }
    }
    /**
     * Class Tribe__Events__REST__V1__System
     *
     * Handles scanning and asserting the current WordPress installation support of
     * TEC REST API.
     */
    class Tribe__Events__REST__V1__System extends \Tribe__REST__System
    {
        /**
         * @var string The name of the option that enables or disables the TEC REST API support.
         */
        protected static $disable_option_name = 'rest-v1-disabled';
        /**
         * Whether TEC REST API is supported by the WP installation or not.
         *
         * @return bool
         */
        public function supports_tec_rest_api()
        {
        }
        /**
         * Whether The Events Calendar REST API is enabled or not for the WP installation.
         *
         * @return bool
         */
        public function tec_rest_api_is_enabled()
        {
        }
        /**
         * Returns the name of the option used to indicate whether TEC REST API is enabled or not for
         * the WP installation.
         *
         * The option is stored in The Events Calendar options database record: use `tribe_get_option()`
         * to get it.
         *
         * @return string
         */
        public static function get_disable_option_name()
        {
        }
    }
    class Tribe__Events__REST__V1__Headers__Base implements \Tribe__REST__Headers__Base_Interface
    {
        /**
         * @var string
         */
        protected $api_version_header = 'X-TEC-API-VERSION';
        /**
         * @var string
         */
        protected $api_root_header = 'X-TEC-API-ROOT';
        /**
         * @var string
         */
        protected $api_origin_header = 'X-TEC-API-ORIGIN';
        /**
         * @var string
         */
        protected $api_version_meta_name = 'tec-api-version';
        /**
         * @var string
         */
        protected $api_origin_meta_name = 'tec-api-origin';
        /**
         * Returns the header that the REST API will print on the page head to report
         * its version.
         *
         * @return string
         */
        public function get_api_version_header()
        {
        }
        /**
         * Returns the header the REST API will print on the page head to report its root
         * url.
         *
         * @return string
         */
        public function get_api_root_header()
        {
        }
        /**
         * Returns the header the REST API will print on the page head to report its origin
         * url. Normaly the home_url()
         *
         * @return string
         */
        public function get_api_origin_header()
        {
        }
        /**
         * Returns the `name` of the meta tag that will be printed on the page to indicate
         * the REST API version.
         *
         * @return string
         */
        public function get_api_version_meta_name()
        {
        }
        /**
         * Returns the `name` of the meta tag that will be printed on the page to indicate
         * the REST API Origin URL.
         *
         * @return string
         */
        public function get_api_origin_meta_name()
        {
        }
        /**
         * Returns the REST API URL.
         *
         * @return string
         */
        public function get_rest_url()
        {
        }
        /**
         * Returns the REST API Origin Site.
         *
         * @return string
         */
        public function get_rest_origin_url()
        {
        }
    }
    interface Tribe__Events__REST__Interfaces__Post_Repository
    {
        /**
         * Returns an array representation of an event.
         *
         * @param int    $event_id An event post ID.
         * @param string $context  Context of data.
         *
         * @return array|WP_Error Either the array representation of an event or an error object.
         *
         * @since 4.6 Added $context param
         */
        public function get_event_data($event_id, $context = '');
        /**
         * Returns an array representation of an event venue.
         *
         * @param int    $event_or_venue_id An event or venue post ID.
         * @param string $context           Context of data.
         *
         * @return array|WP_Error Either the array representation of a venue or an error object.
         *
         * @since 4.6 Added $context param
         */
        public function get_venue_data($event_or_venue_id, $context = '');
        /**
         * Returns an array representation of an event organizer(s).
         *
         * @param int    $event_or_organizer_id An event or organizer post ID.
         * @param string $context               Context of data.
         *
         * @return array|WP_Error Either an the array representation of an orgnanizer, an
         *                        arrya of array representations of an event organizer or
         *                        an error object.
         *
         * @since 4.6 Added $context param
         */
        public function get_organizer_data($event_or_organizer_id, $context = '');
        /**
         * Returns an array of prepared array representations of a taxonomy term.
         *
         * @param array $terms_data An array of term objects.
         * @param string $taxonomy The taxonomy of the term objects.
         *
         * @return array|\WP_Error Either the array representation of taxonomy terms or an error object.
         *
         * @since 4.6
         */
        public function prepare_terms_data(array $terms_data, $taxonomy);
        /**
         * Prepares a single term data for the response.
         *
         * @since 4.6
         *
         * @param array  $term_data
         * @param string $taxonomy
         * @param string $namespace
         *
         * @return array
         */
        public function prepare_term_data($term_data, $taxonomy, $namespace);
    }
    class Tribe__Events__REST__V1__Post_Repository implements \Tribe__Events__REST__Interfaces__Post_Repository
    {
        /**
         * A post type to get data request handler map.
         *
         * @var array
         */
        protected $types_get_map = [];
        /**
         * @var Tribe__REST__Messages_Interface
         */
        protected $messages;
        public function __construct(\Tribe__REST__Messages_Interface $messages = \null)
        {
        }
        /**
         * Retrieves an array representation of the post.
         *
         * @param int    $id      The post ID.
         * @param string $context Context of data.
         *
         * @return array An array representation of the post.
         *
         * @since 4.6 Added $context param
         */
        public function get_data($id, $context = '')
        {
        }
        /**
         * Returns an array representation of an event.
         *
         * @param int    $event_id An event post ID.
         * @param string $context  Context of data.
         *
         * @return array|WP_Error Either the array representation of an event or an error object.
         *
         * @since 4.6 Added $context param
         */
        public function get_event_data($event_id, $context = '')
        {
        }
        /**
         * Returns an array representation of an event venue.
         *
         * @param int    $event_or_venue_id An event or venue post ID.
         * @param string $context           Context of data.
         *
         * @return array|WP_Error Either the array representation of a venue or an error object.
         *
         * @since 4.6 Added $context param
         */
        public function get_venue_data($event_or_venue_id, $context = '')
        {
        }
        protected function get_featured_image($id)
        {
        }
        /**
         * Adds the Global ID fields to a set of rest data
         *
         * @param array $data Rest Array of data
         * @param int   $id   Post ID
         *
         * @return array
         */
        protected function add_global_id_fields($data, $post_id)
        {
        }
        /**
         * Returns an array representation of an event organizer(s).
         *
         * @param int    $event_or_organizer_id An event or organizer post ID.
         * @param string $context               Context of data.
         *
         * @return array|WP_Error Either an the array representation of an orgnanizer, an
         *                        arrya of array representations of an event organizer or
         *                        an error object.
         *
         * @since 4.6 Added $context param
         */
        public function get_organizer_data($event_or_organizer_id, $context = '')
        {
        }
        /**
         * @param string $date A date string in a format `strtotime` can parse.
         *
         * @return array
         */
        protected function get_date_details($date)
        {
        }
        /**
         * Returns an ASC array of event costs.
         *
         * @param int|WP_Post $event_id The event post or the post ID.
         *
         * @return array
         */
        protected function get_cost_values($event_id)
        {
        }
        /**
         * Returns the categories assigned to the specified event.
         *
         * @since 4.6
         *
         * @param int $event_id
         *
         * @return array
         */
        protected function get_categories($event_id)
        {
        }
        /**
         * Returns the terms associated with an event.
         *
         * @since 4.6
         *
         * @param int $event_id An event post ID.
         * @param string $taxonomy
         *
         * @return array
         */
        public function get_terms($event_id, $taxonomy)
        {
        }
        /**
         * Returns the tags assigned to the specified event.
         *
         * @since 4.6
         *
         * @param int $event_id
         *
         * @return array
         */
        protected function get_tags($event_id)
        {
        }
        /**
         * Returns an array of prepared array representations of a taxonomy term.
         *
         * @since 4.6
         *
         * @param array $terms_data An array of term objects.
         * @param string $taxonomy The taxonomy of the term objects.
         *
         * @return array|\WP_Error Either the array representation of taxonomy terms or an error object.
         */
        public function prepare_terms_data(array $terms_data, $taxonomy)
        {
        }
        /**
         * Prepares a single term data for the response.
         *
         * @since 4.6
         *
         * @param array  $term_data
         * @param string $taxonomy
         * @param string $namespace
         *
         * @return array
         */
        public function prepare_term_data($term_data, $taxonomy, $namespace)
        {
        }
    }
    class Tribe__Events__Editor__Blocks__Event_Organizer extends \Tribe__Editor__Blocks__Abstract
    {
        /**
         * Which is the name/slug of this block
         *
         * @since 4.7
         *
         * @return string
         */
        public function slug()
        {
        }
        /**
         * Since we are dealing with a Dynamic type of Block we need a PHP method to render it
         *
         * @since 4.7
         *
         * @param  array $attributes
         *
         * @return string
         */
        public function render($attributes = [])
        {
        }
        /**
         * Register the Assets for when this block is active
         *
         * @since 4.7
         *
         * @return void
         */
        public function assets()
        {
        }
    }
    class Tribe__Events__Editor__Blocks__Event_Links extends \Tribe__Editor__Blocks__Abstract
    {
        /**
         * Which is the name/slug of this block
         *
         * @since 4.7
         *
         * @return string
         */
        public function slug()
        {
        }
        /**
         * Set the default attributes of this block
         *
         * @since 4.7
         *
         * @return array
         */
        public function default_attributes()
        {
        }
        /**
         * Since we are dealing with a Dynamic type of Block we need a PHP method to render it
         *
         * @since 4.7
         *
         * @param  array $attributes
         *
         * @return string
         */
        public function render($attributes = [])
        {
        }
        /**
         * Register the Assets for when this block is active
         *
         * @since 4.7
         *
         * @return void
         */
        public function assets()
        {
        }
    }
    class Tribe__Events__Editor__Blocks__Event_Tags extends \Tribe__Editor__Blocks__Abstract
    {
        /**
         * Which is the name/slug of this block
         *
         * @since 4.7
         *
         * @return string
         */
        public function slug()
        {
        }
        /**
         * Since we are dealing with a Dynamic type of Block we need a PHP method to render it
         *
         * @since 4.7
         *
         * @param  array $attributes
         *
         * @return string
         */
        public function render($attributes = [])
        {
        }
        /**
         * Register the Assets for when this block is active
         *
         * @since 4.7
         *
         * @return void
         */
        public function assets()
        {
        }
    }
    class Tribe__Events__Editor__Blocks__Classic_Event_Details extends \Tribe__Editor__Blocks__Abstract
    {
        /**
         * Which is the name/slug of this block
         *
         * @since 4.7
         *
         * @return string
         */
        public function slug()
        {
        }
        /**
         * Since we are dealing with a Dynamic type of Block we need a PHP method to render it
         *
         * @since 4.7
         *
         * @param  array $attributes
         *
         * @return string
         */
        public function render($attributes = [])
        {
        }
        /**
         * Register the Assets for when this block is active
         *
         * @since 4.7
         *
         * @return void
         */
        public function assets()
        {
        }
    }
    class Tribe__Events__Editor__Blocks__Event_Datetime extends \Tribe__Editor__Blocks__Abstract
    {
        /**
         * Which is the name/slug of this block
         *
         * @since 4.7
         *
         * @return string
         */
        public function slug()
        {
        }
        /**
         * Since we are dealing with a Dynamic type of Block we need a PHP method to render it
         *
         * @since 4.7
         *
         * @param  array $attributes
         *
         * @return string
         */
        public function render($attributes = [])
        {
        }
        /**
         * Register the Assets for when this block is active
         *
         * @since 4.7
         *
         * @return void
         */
        public function assets()
        {
        }
        /**
         * Returns the block data for the block editor.
         *
         * @since 5.1.1
         *
         * @return array<string,mixed> The block data for the editor.
         */
        public function block_data()
        {
        }
    }
    class Tribe__Events__Editor__Blocks__Event_Category extends \Tribe__Editor__Blocks__Abstract
    {
        /**
         * Which is the name/slug of this block
         *
         * @since 4.7
         *
         * @return string
         */
        public function slug()
        {
        }
        /**
         * Since we are dealing with a Dynamic type of Block we need a PHP method to render it
         *
         * @since 4.7
         *
         * @param  array $attributes
         *
         * @return string
         */
        public function render($attributes = [])
        {
        }
        /**
         * Register the Assets for when this block is active
         *
         * @since 4.7
         *
         * @return void
         */
        public function assets()
        {
        }
    }
    class Tribe__Events__Editor__Blocks__Event_Price extends \Tribe__Editor__Blocks__Abstract
    {
        /**
         * Which is the name/slug of this block
         *
         * @since 4.7
         *
         * @return string
         */
        public function slug()
        {
        }
        /**
         * Set the default attributes of this block
         *
         * @since 4.7
         *
         * @return array
         */
        public function default_attributes()
        {
        }
        /**
         * Since we are dealing with a Dynamic type of Block we need a PHP method to render it
         *
         * @since 4.7
         *
         * @param  array $attributes
         *
         * @return string
         */
        public function render($attributes = [])
        {
        }
        /**
         * Register the Assets for when this block is active
         *
         * @since 4.7
         *
         * @return void
         */
        public function assets()
        {
        }
    }
    class Tribe__Events__Editor__Blocks__Event_Website extends \Tribe__Editor__Blocks__Abstract
    {
        /**
         * Which is the name/slug of this block
         *
         * @since 4.7
         *
         * @return string
         */
        public function slug()
        {
        }
        /**
         * Set the default attributes of this block
         *
         * @since 4.7
         *
         * @return array
         */
        public function default_attributes()
        {
        }
        /**
         * Since we are dealing with a Dynamic type of Block we need a PHP method to render it
         *
         * @since 4.7
         *
         * @param  array $attributes
         *
         * @return string
         */
        public function render($attributes = [])
        {
        }
        /**
         * Register the Assets for when this block is active
         *
         * @since 4.7
         *
         * @return void
         */
        public function assets()
        {
        }
    }
    class Tribe__Events__Editor__Blocks__Event_Venue extends \Tribe__Editor__Blocks__Abstract
    {
        /**
         * Which is the name/slug of this block
         *
         * @since 4.7
         *
         * @return string
         */
        public function slug()
        {
        }
        /**
         * Since we are dealing with a Dynamic type of Block we need a PHP method to render it
         *
         * @since 4.7
         *
         * @param  array $attributes
         *
         * @return string
         */
        public function render($attributes = [])
        {
        }
        /**
         * Register the Assets for when this block is active
         *
         * @since 4.7
         *
         * @return void
         */
        public function assets()
        {
        }
    }
    class Tribe__Events__Editor__Blocks__Featured_Image extends \Tribe__Editor__Blocks__Abstract
    {
        /**
         * Which is the name/slug of this block
         *
         * @since 4.7
         *
         * @return string
         */
        public function slug()
        {
        }
        /**
         * Since we are dealing with a Dynamic type of Block we need a PHP method to render it
         *
         * @since 4.7
         *
         * @param  array $attributes
         *
         * @return string
         */
        public function render($attributes = [])
        {
        }
        /**
         * Register the Assets for when this block is active
         *
         * @since 4.7
         *
         * @return void
         */
        public function assets()
        {
        }
    }
    /**
     * Fetch the Tribe Settings to use on the JS side
     *
     * @since 4.7
     */
    class Tribe__Events__Editor__Settings
    {
        /**
         * Hook into the required places to make it work
         *
         * @since 4.7
         *
         * @return void
         */
        public function hook()
        {
        }
        /**
         * Based on a set of rules determines if a Tribe Option is private or not
         *
         * @since 4.7
         *
         * @param string $key Which key we are checking against
         *
         * @return boolean
         */
        public function is_private_option($key)
        {
        }
        /**
         * Get all Public options of Tribe Options
         *
         * @since 4.7
         *
         * @todo   move the filtering into Core Tribe__Settings_Manager::get_options
         *
         * @return array
         */
        public function get_options()
        {
        }
    }
    /**
     * Initialize template overwrite for block single pages
     *
     * @since 4.7
     */
    class Tribe__Events__Editor__Template__Overwrite
    {
        /**
         * Hook into the Events Template single page to allow Blocks to be properly reordered
         *
         * @since 4.7
         *
         * @return void
         */
        public function hook()
        {
        }
        /**
         * Gets the file path in Gutenberg Ext
         *
         * @since 4.7
         *
         * @param  array|string  $slug  Which file we want to include
         *
         * @return string
         */
        public function get_path($slug)
        {
        }
        /**
         * Silence the actual templating and lets use an action to prevent Old Stuff to have any sort of interactions
         * with what we are constructing here.
         *
         * @since 4.7
         *
         * @param string $file Which file would be loaded
         *
         * @return string
         */
        public function silence($file)
        {
        }
        /**
         * After `tribe_events_before_view` we will include the blocks template for Single Events
         *
         * @since 4.7
         *
         * @param string $silence Unused file path, since it's always the same for Blocks editor
         *
         * @return string
         */
        public function include_blocks($silence)
        {
        }
        /**
         * If function gutenberg_disable_editor_settings_wpautop() does not exist, use this to
         * disable wpautop in classic editor if blocks exist.
         *
         * @todo This function is a copy of gutenberg_disable_editor_settings_wpautop() from the
         * gutenberg plugin. If WP 5.0 patches this, this function should be removed.
         *
         * @since 4.7
         *
         * @param  array  $settings  Original editor settings.
         * @param  string $editor_id ID for the editor instance.
         *
         * @return array  Filtered settings.
         */
        public function disable_editor_settings_wpautop($settings, $editor_id)
        {
        }
        /**
         * If function gutenberg_wpautop() does not exist, use this to disable wpautop.
         *
         * @deprecated 4.9.5
         *
         * @param  string $content Post content.
         * @return string Paragraph-converted text if non-block content.
         */
        public function wpautop($content)
        {
        }
    }
    /**
     * Initialize Gutenberg Event Meta fields
     *
     * @since 4.7
     */
    class Tribe__Events__Editor__Meta extends \Tribe__Editor__Meta
    {
        /**
         * Register the required Meta fields for good Gutenberg saving
         *
         * @since 4.7
         *
         * @return void
         */
        public function register()
        {
        }
        /**
         * Short-circuits deleting metadata items that dont exist, for compatibility purposes we need to make sure
         * WordPress doesn't throw an error when the meta is not present.
         *
         * @since 5.5.0
         * @since 4.6.0 Apply to all Rest Endpoints not only Events.
         *
         * @param null|bool $delete     Whether to allow metadata deletion of the given type.
         * @param int       $object_id  ID of the object metadata is for.
         * @param string    $meta_key   Metadata key.
         * @param mixed     $meta_value Metadata value. Must be serializable if non-scalar.
         * @param bool      $delete_all Whether to delete the matching metadata entries
         *                              for all objects, ignoring the specified $object_id.
         *                              Default false.
         *
         * @return bool
         */
        public function filter_allow_meta_delete_non_existent_key($delete, $object_id, $meta_key, $meta_value, $delete_all)
        {
        }
        /**
         * Make sure we make the REST response backwards compatible.
         *
         * @since 4.7
         *
         * @param WP_REST_Response $data
         * @param WP_Post          $post    Post object.
         * @param WP_REST_Request  $request Request object.
         *
         * @return WP_REST_Response $data
         */
        public function meta_backwards_compatibility($data, $post, $request)
        {
        }
        /**
         * Adds, triggering their updates, the UTC start and end dates to the post insertion or
         * update REST payload.
         *
         * @since 4.9
         *
         * @param             \stdClass     $post_data The post insertion/update payload.
         * @param \WP_REST_Request $request The current insertion or update request object.
         *
         * @return \stdClass The post insertion/update payload with an added `meta_input` entry if
         *                   the insertion/update of UTC dates is required.
         */
        public function add_utc_dates($post_data, \WP_REST_Request $request)
        {
        }
    }
}
namespace Tribe\Events\Editor\Objects {
    /**
     * Class Editor_Object_Interface
     *
     * @since   5.1.0
     *
     * @package Tribe\Events\Editory\Objects
     */
    interface Editor_Object_Interface
    {
        /**
         * Returns the editor object data in the format required by the block editor.
         *
         * @since 5.1.0
         *
         * @param string|null $key     The specific data key to get, or `null` to get all data.
         * @param mixed       $default The default value to return if the specified data key is not found, ignored if the
         *                             data key is `null`.
         *
         * @return array<string,mixed> An array representation of the block editor object.
         */
        public function data($key = null, $default = null);
    }
    /**
     * Class Event
     *
     * @since   5.1.0
     *
     * @package Tribe\Events\Editory\Objects
     */
    class Event implements \Tribe\Events\Editor\Objects\Editor_Object_Interface
    {
        /**
         * The event data in the format required by the block editor.
         *
         * @since 5.1.0
         *
         * @var array<string,mixed>
         */
        protected $data;
        /**
         * The post object to model the data on.
         *
         * @since 5.1.0
         *
         * @var \WP_Post
         */
        protected $post;
        /**
         * Event constructor.
         *
         * @since 5.1.0
         *
         * @param int|\WP_Post|null $event The event post ID or object, or `null` to use the global `post` object.
         */
        public function __construct($event = null)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function data($key = null, $default = null)
        {
        }
    }
}
namespace {
    /**
     * Class Tribe__Events__Editor__Configuration
     *
     * @since 4.7
     */
    class Tribe__Events__Editor__Configuration implements \Tribe__Editor__Configuration_Interface
    {
        /**
         * Hook used to attach actions / filters
         *
         * @since 4.7
         */
        public function hook()
        {
        }
        /**
         * Add custom variables to be localized
         *
         * @since 4.7
         *
         * @param array $editor_config
         * @return array
         */
        public function editor_config($editor_config)
        {
        }
        /**
         * Return the variables to be localized
         *
         * @since 4.7
         *
         * @return array
         */
        public function localize()
        {
        }
        /**
         * Check if post is from classic editor
         *
         * @since 4.7
         *
         * @param int|WP_Post $post
         *
         * @return bool
         */
        public function post_is_from_classic_editor($post)
        {
        }
        /**
         * Returns the site timezone as a string
         *
         * @since 4.7.2
         *
         * @return string
         */
        public function get_timezone_label()
        {
        }
    }
    /**
     * Include translations to Gutenberg Ext
     *
     * @since 4.7
     */
    class Tribe__Events__Editor__I18n
    {
        /**
         * Hook into the required places to make it work
         *
         * @since 4.7
         *
         * @return void
         */
        public function hook()
        {
        }
        /**
         * Include the Inline Script with locale
         *
         * @since 4.7
         *
         * @return void
         */
        public function include_inline_script($value)
        {
        }
    }
    class Tribe__Events__Editor__Provider extends \tad_DI52_ServiceProvider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 4.7
         *
         */
        public function register()
        {
        }
        /**
         * Any hooking any class needs happen here.
         *
         * In place of delegating the hooking responsibility to the single classes they are all hooked here.
         *
         * @since 4.7
         *
         */
        protected function hook()
        {
        }
        /**
         * Binds and sets up implementations at boot time.
         *
         * @since 4.7
         */
        public function boot()
        {
        }
    }
    /**
     * Allow including of Gutenberg Template
     *
     * @since 4.7
     */
    class Tribe__Events__Editor__Template extends \Tribe__Template
    {
        /**
         * Building of the Class template configuration
         *
         * @since 4.7
         */
        public function __construct()
        {
        }
        /**
         * Return the attributes of the template
         *
         * @since 4.7
         *
         * @param array $default_attributes
         * @return array
         */
        public function attributes($default_attributes = [])
        {
        }
        /**
         * Return a specific attribute
         *
         * @since 4.7
         *
         * @param  mixed $default
         * @return mixed
         */
        public function attr($index, $default = \null)
        {
        }
        /**
         * Set notices
         *
         * @since 4.7
         *
         * @return void
         */
        public function set_notices()
        {
        }
    }
    /**
     * Events Editor Compatibility
     *
     * @since 4.7
     */
    class Tribe__Events__Editor__Compatibility
    {
        /**
         * Any hooking any class needs happen here.
         *
         * In place of delegating the hooking responsibility to the single classes they are all hooked here.
         *
         * @since 4.7
         *
         * @return void
         */
        public function hook()
        {
        }
        /**
         * On any administration page that we see the Gutenberg Extension plugin we deactivate and redirect
         * to the Plugins page so the user can't do anything weird.
         *
         * @since 4.7
         *
         * @return void
         */
        public function deactivate_gutenberg_extension_plugin()
        {
        }
        /**
         * Filter when we are in the classic editor page
         *
         * @since  4.7.4
         *
         * @param  boolean $pre
         *
         * @return boolean
         */
        public function filter_is_classic_editor($is_classic_editor = \false)
        {
        }
        /**
         * Gets if user toggled blocks editor on the settings
         *
         * @since 4.7
         *
         * @return bool
         */
        public function is_blocks_editor_toggled_on()
        {
        }
        /**
         * Gets the option key for toggling Blocks Editor active
         *
         * @since 4.7
         *
         * @return string
         */
        public function get_toggle_blocks_editor_key()
        {
        }
        /**
         * Gets the option key for the Hidden Field of toggling blocks editor
         *
         * @since 4.7
         *
         * @return string
         */
        public function get_toggle_blocks_editor_hidden_key()
        {
        }
        /**
         * Inserts the Toggle and Hidden Field for the Activation of Blocks Editor
         *
         * @since 4.7
         *
         * @param array $fields Fields from Options General
         *
         * @return array
         */
        public function insert_toggle_blocks_editor_field($fields = [])
        {
        }
    }
    /**
     * Events Gutenberg Assets
     *
     * @since 4.7
     */
    class Tribe__Events__Editor__Assets
    {
        /**
         * Caches the result of the `should_enqueue_frontend` check.
         *
         * @since 4.9.13
         *
         * @var bool
         */
        protected $should_enqueue_frontend;
        /**
         *
         * @since 4.7
         *
         * @return void
         */
        public function hook()
        {
        }
        /**
         * Registers and Enqueues the assets
         *
         * @since 4.7
         *
         * @param string $key Which key we are checking against
         *
         * @return boolean
         */
        public function register()
        {
        }
        /**
         * Checks if we should enqueue frontend assets
         *
         * @since 4.7
         * @since 4.9.13 Cache the check value.
         *
         * @return bool
         */
        public function should_enqueue_frontend()
        {
        }
    }
    /**
     * Class Tribe__Events__Ajax__Operations
     *
     * Handles The Events Calendar specific class operations.
     */
    class Tribe__Events__Ajax__Operations extends \Tribe__Ajax__Operations
    {
    }
    /**
     * Registers and Enqueues the assets
     *
     * @since  4.6.21
     */
    class Tribe__Events__Assets
    {
        /**
         * Hooks any required filters and action
         *
         * @since  4.6.21
         *
         * @return void
         */
        public function hook()
        {
        }
        /**
         * Registers and Enqueues the assets
         *
         * @since  4.6.21
         *
         * @return void
         */
        public function register()
        {
        }
        /**
         * Add admin scripts and styles
         *
         * @since  4.6.21
         */
        public function load_admin()
        {
        }
        /**
         * Compatibility fix: some plugins enqueue jQuery UI/other styles on all post screens,
         * breaking our own custom styling of event editor components such as the datepicker.
         *
         * Needs to execute late enough during admin_enqueue_scripts that the items we are removing
         * have already been registered and enqueued.
         *
         * @since  4.6.21
         *
         * @see https://github.com/easydigitaldownloads/easy-digital-downloads/issues/3033
         */
        public function dequeue_incompatible()
        {
        }
        /**
         * Checks if we should enqueue on frontend and backend on our pages
         *
         * @since  4.6.21
         *
         * @return bool
         */
        public function should_enqueue_on_tribe()
        {
        }
        /**
         * Checks if we should enqueue frontend assets
         *
         * @since  4.6.21
         *
         * @return bool
         */
        public function should_enqueue_frontend()
        {
        }
        /**
         * Checks if we should enqueue full styles assets
         *
         * @since  4.6.21
         *
         * @return bool
         */
        public function should_enqueue_full_styles()
        {
        }
        /**
         * Checks if we are on the correct admin pages to enqueue admin
         *
         * @since  4.6.21
         *
         * @return bool
         */
        public function should_enqueue_admin()
        {
        }
        /**
         * Checks if we have a mobile Breakpoint
         *
         * @since  4.6.21
         *
         * @return bool
         */
        public function is_mobile_breakpoint()
        {
        }
        /**
         * Checks if we are using Tribe setting for Style
         *
         * @since  4.6.21
         *
         * @return bool
         */
        public function is_style_option_tribe()
        {
        }
        /**
         * Checks if we are using "Full Styles" setting for Style
         *
         * @since  4.6.23
         *
         * @return bool
         */
        public function is_style_option_full()
        {
        }
        /**
         * Checks if we are on the correct admin settings page
         *
         * @since  4.6.21
         *
         * @return bool
         */
        public function is_settings_page()
        {
        }
        /**
         * Playing ping-pong with WooCommerce. They keep changing their script.
         *
         * @since 4.6.21
         *
         * @see https://github.com/woothemes/woocommerce/issues/3623
         *
         * @return string
         */
        public function get_placeholder_handle()
        {
        }
        /**
         * Due to how we define which style we use based on an Option on the Administration
         * we need to determine this file.
         *
         * @since  4.6.21
         *
         * @return string
         */
        public function get_style_file()
        {
        }
        /**
         * Gets the Localize variable for TEC admin JS
         *
         * @since  4.6.21
         *
         * @return array
         */
        public function get_ajax_url_data()
        {
        }
        /**
         * Gets the Localize variable for Calendar Script JS
         *
         * @since  4.6.21
         *
         * @return array
         */
        public function get_js_calendar_script_data()
        {
        }
        /**
         * Gets the Localize variable for Dynamic JS
         *
         * @since  4.6.21
         *
         * @return array
         */
        public function get_js_dynamic_data()
        {
        }
        /**
         * Add legacy stylesheets to customizer styles array to check.
         *
         * @since 5.1.1
         *
         * @param array  $sheets Array of sheets to search for.
         * @param string $css_template String containing the inline css to add.
         *
         * @return array Modified array of sheets to search for.
         */
        public function customizer_inline_stylesheets($sheets, $css_template)
        {
        }
    }
    /**
     * Merge pre-3.0 duplicate venues and organizers
     */
    class Tribe__Events__Amalgamator
    {
        private $default_venue = 0;
        private $default_community_venue = 0;
        private $default_organizer = 0;
        private $default_community_organizer = 0;
        /**
         * constructor
         */
        public function __construct()
        {
        }
        /**
         * Merge all duplicate event-related posts
         *
         */
        public function merge_duplicates()
        {
        }
        /**
         * Merge identical organizers
         *
         */
        public function merge_identical_organizers()
        {
        }
        /**
         * Merge identical venues
         *
         */
        public function merge_identical_venues()
        {
        }
        /**
         * Get all post titles of the given post type that have duplicates
         *
         * @param string $type The post type to query
         *
         * @return array
         */
        private function get_redundant_titles($type)
        {
        }
        /**
         * Find all posts of the given type with the given title
         *
         * @param string $title
         * @param string $type
         *
         * @return array
         */
        private function get_posts_with_title($title, $type)
        {
        }
        /**
         * Merge all venues in the given list into one post (keeping the first)
         *
         * @param array $venue_ids
         *
         */
        private function amalgamate_venues($venue_ids)
        {
        }
        /**
         * Merge all organizers in the given list into one post (keeping the first)
         *
         * @param array $organizer_ids
         *
         */
        public function amalgamate_organizers($organizer_ids)
        {
        }
        /**
         * If a removed venue is being used as a default, change the default to
         * its replacement.
         *
         * @param int   $keep
         * @param array $replace
         *
         */
        private function update_default_venues($keep, array $replace)
        {
        }
        /**
         * If a removed organizer is being used as a default, change the default to
         * its replacement.
         *
         * @param int   $keep
         * @param array $replace
         *
         */
        private function update_default_organizers($keep, array $replace)
        {
        }
        /**
         * Delete all the posts given
         *
         * @param array $post_ids
         */
        private function delete_posts($post_ids)
        {
        }
        /**
         * Make a button to trigger the amalgamation process
         *
         * @param string $text
         *
         * @return string
         */
        public static function migration_button($text = '')
        {
        }
        /**
         * If the migration button is clicked, start working
         *
         */
        public static function listen_for_migration_button()
        {
        }
    }
    /**
     * @internal
     */
    class Tribe__Events__Featured_Events__Query_Helper
    {
        public function hook()
        {
        }
        public function pre_get_posts($query)
        {
        }
    }
    /**
     * @internal
     */
    class Tribe__Events__Featured_Events__Permalinks_Helper
    {
        public function hook()
        {
        }
        public function maybe_add_featured_slug($url, $type, $secondary, $term, $url_args, $featured)
        {
        }
    }
    abstract class TribeEventsImporter_FileImporter extends \Tribe__Events__Importer__File_Importer
    {
    }
    class TribePluginUpdateUtility extends \Tribe__PUE__Utility
    {
    }
    /**
     * Class Tribe__Events__Importer__Plugin
     */
    class Tribe__Events__Importer__Plugin
    {
        private static $plugin_basename = '';
        /** @var Tribe__Events__Importer__Admin_Page */
        public static $admin = \null;
        public static function path($path)
        {
        }
        public static function set_plugin_basename($basename)
        {
        }
        public static function initialize_admin()
        {
        }
        public static function get_admin_object()
        {
        }
    }
    class TribeEventsImporter_Plugin extends \Tribe__Events__Importer__Plugin
    {
    }
    class Tribe_PU_PluginInfo extends \Tribe__PUE__Plugin_Info
    {
    }
    class TribeValidate extends \Tribe__Validate
    {
    }
    abstract class Tribe__Events__Asset__Abstract_Asset
    {
        /**
         * @var string
         */
        protected $name;
        /**
         * @var array
         */
        protected $deps;
        /**
         * @var string
         */
        protected $vendor_url;
        /**
         * @var string
         */
        protected $prefix;
        /**
         * @var Tribe__Events__Main
         */
        protected $tec;
        /**
         * @var array An array specifying aliases for this asset package scripts or styles.
         *
         * @see Tribe__Events__Asset__Abstract_Asset::has_script_alias()
         */
        protected $aliases = [];
        public function set_name($name)
        {
        }
        public function set_deps($deps)
        {
        }
        public function set_vendor_url($vendor_url)
        {
        }
        public function set_prefix($prefix)
        {
        }
        public function set_tec($tec)
        {
        }
        /*
         * Handles the asset request
         */
        public abstract function handle();
        /**
         * @return array
         */
        public function get_aliases()
        {
        }
        /**
         * @param array $aliases
         */
        public function set_aliases($aliases)
        {
        }
        /**
         * Filters the script version.
         *
         * Uses `Tribe__Events__Main::VERSION` by default.
         *
         * @param string $filter The filter name, `tribe_events_js_version` by
         *                       default.
         *
         * @return mixed|void
         */
        protected function filter_js_version($filter = \null)
        {
        }
        /**
         * Whether drop-in replacement for this asset package script have been already loaded
         * from other plugins or not.
         *
         * The drop-in replacements in the `aliases` property are manually curated and tested on a
         * single asset package base; the method will not make any guessing or interpolation.
         * E.g. the `Select2` asset package specifies that if ACF is active and the `select2` handle
         * has been queued already then there is no need to queue our own version of `select2`.
         *
         * If a more complex and context aware test is needed to discern the presence of script
         * alias then the value of an `aliases` entry can be set to a callable that should return a bool value, e.g.:
         *
         *      $aliases = array(
         *          'select2' => array(
         *              'some-plugin/plugin.php' => 'select-2-js', // normal handle test
         *              'another-plugin/plugin.php' => array( 'Tribe__Spotter' , 'loaded_select_2' ),
         *           ),
         *      );
         *
         * @param string $slug The slug this script is registered with in the `aliases` property.
         *
         * @return bool `true` if a know and tested plugin is active and has already queued a drop-in
         *              replacement for the script or `false` otherwise.
         */
        public function has_script_alias($slug)
        {
        }
    }
    class Tribe__Events__Asset__PHP_Date_Formatter extends \Tribe__Events__Asset__Abstract_Asset
    {
        public function handle()
        {
        }
    }
    class TribeEventsBar extends \Tribe__Events__Bar
    {
    }
    class TribeEventsViewHelpers extends \Tribe__View_Helpers
    {
    }
    class Tribe__Events__Asset__Jquery_Placeholder extends \Tribe__Events__Asset__Abstract_Asset
    {
        public function handle()
        {
        }
    }
    class TribeRecurringEventCleanup extends \Tribe__Events__Recurring_Event_Cleanup
    {
    }
    class Tribe__Events__PUE__Utility extends \Tribe__PUE__Utility
    {
    }
    abstract class Tribe__Events__Asset__Abstract_Events_Css
    {
        public abstract function handle(array &$stylesheets, $mobile_break);
    }
    class TribeEventsOptionsException extends \Tribe__Events__Options_Exception
    {
    }
    class TribeEventsImporter_FileReader extends \Tribe__Events__Importer__File_Reader
    {
    }
    class TribePluginUpdateEngineChecker extends \Tribe__PUE__Checker
    {
    }
    class TribeEventsImporter_FileImporter_Venues extends \Tribe__Events__Importer__File_Importer_Venues
    {
    }
    class TribeEventsSupport extends \Tribe__Support
    {
    }
    class Tribe__Events__Asset__Ajax_Dayview extends \Tribe__Events__Asset__Abstract_Asset
    {
        public function handle()
        {
        }
    }
    class TribeEventsAPI extends \Tribe__Events__API
    {
    }
    class Tribe__Events__Aggregator__Record__Facebook extends \Tribe__Events__Aggregator__Record__Abstract
    {
        public $origin = 'facebook';
        /**
         * Queues the import on the Aggregator service
         */
        public function queue_import($args = [])
        {
        }
        /**
         * Gets the Regular Expression string to match a source URL
         *
         * @since 4.6.18
         *
         * @return string
         */
        public static function get_source_regexp()
        {
        }
        /**
         * Returns the Facebook authorization token generation URL.
         *
         * @param array $args
         *
         * @return string Either the URL to obtain FB authorization token or an empty string.
         */
        public static function get_auth_url($args = [])
        {
        }
        /**
         * Public facing Label for this Origin
         *
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * Filters the event to ensure that a proper URL is in the EventURL
         *
         * @param array $event Event data
         * @param Tribe__Events__Aggregator__Record__Abstract $record Aggregator Import Record
         *
         * @return array
         */
        public static function filter_event_to_force_url($event, $record)
        {
        }
        /**
         * Filters the event to ensure that fields are preserved that are not otherwise supported by Facebook
         *
         * @param array $event Event data
         * @param Tribe__Events__Aggregator__Record__Abstract $record Aggregator Import Record
         *
         * @return array
         */
        public static function filter_event_to_preserve_fields($event, $record)
        {
        }
    }
    /**
     * Class Tribe__Events__Importer__Admin_Page
     */
    class Tribe__Events__Importer__Admin_Page
    {
        private $state = '';
        private $output = '';
        private $messages = [];
        private $errors = [];
        /**
         * Static Singleton Holder
         * @var Tribe__Settings|null
         */
        private static $instance;
        /**
         * Static Singleton Factory Method
         *
         * @return Tribe__Settings
         */
        public static function instance()
        {
        }
        /**
         * Admin page for the importer URL, relative to `admin_url()`
         * @var null|string
         */
        public $admin_page_url = \null;
        /**
         * The actual Page Slug used
         * @var null|string
         */
        public $admin_page_slug = \null;
        public function __construct()
        {
        }
        /**
         * Returns the main admin settings URL.
         *
         * @return string
         */
        public function get_url(array $args = [])
        {
        }
        public function register_admin_page()
        {
        }
        public function add_settings_fields($fields = [])
        {
        }
        public function render_admin_page_contents()
        {
        }
        public function render_general_tab()
        {
        }
        public function render_csv_tab()
        {
        }
        public function get_active_tab()
        {
        }
        public function get_available_tabs()
        {
        }
        public function handle_submission()
        {
        }
        private function get_action()
        {
        }
        private function handle_file_submission()
        {
        }
        private function handle_column_mapping()
        {
        }
        private function begin_import()
        {
        }
        private function reset_tracking_options()
        {
        }
        private function continue_import()
        {
        }
        private function do_import(\Tribe__Events__Importer__File_Importer $importer)
        {
        }
        private function get_importer()
        {
        }
        private function log_import_results(\Tribe__Events__Importer__File_Importer $importer)
        {
        }
        private function clean_up_after_import()
        {
        }
    }
    class TribeEventsImporter_AdminPage extends \Tribe__Events__Importer__Admin_Page
    {
    }
    class Tribe__Events__Asset__Dynamic extends \Tribe__Events__Asset__Abstract_Asset
    {
        public function handle()
        {
        }
    }
    class Tribe__Events__Asset__Tribe_Events_Bar extends \Tribe__Events__Asset__Abstract_Asset
    {
        public function handle()
        {
        }
    }
    class TribeEvents_EmbeddedMaps extends \Tribe__Events__Embedded_Maps
    {
    }
    class Tribe__Events__PUE__Checker extends \Tribe__PUE__Checker
    {
    }
    class TribeEventsUpdate extends \Tribe__Events__Updater
    {
    }
    class Tribe__Events__PUE__Plugin_Info extends \Tribe__PUE__Plugin_Info
    {
    }
    class Tribe__Events__Asset__Chosen extends \Tribe__Events__Asset__Abstract_Asset
    {
        public function handle()
        {
        }
    }
    class Tribe_Template_Factory extends \Tribe__Events__Template_Factory
    {
    }
    class Tribe__Events__Asset__Ecp_Plugins extends \Tribe__Events__Asset__Abstract_Asset
    {
        public function handle()
        {
        }
    }
    class TribeAppShop extends \Tribe__Events__App_Shop
    {
    }
    /**
     * Event Meta Register
     *
     * Handle retrieval of event meta.
     *
     * @deprecated 4.3
     */
    class Tribe__Events__Advanced_Functions__Register_Meta
    {
        /**
         * The the title
         *
         * @deprecated 4.3
         *
         * @return string title
         */
        public static function the_title()
        {
        }
        /**
         * Get the event date
         *
         * @deprecated 4.3
         *
         * @param int $meta_id
         *
         * @return string
         */
        public static function event_date($meta_id)
        {
        }
        /**
         * Get event categories
         *
         * @deprecated 4.3
         *
         * @param int $meta_id
         *
         * @return array
         */
        public static function event_category($meta_id)
        {
        }
        /**
         * Get event tags
         *
         * @deprecated 4.3
         *
         * @param int $meta_id
         *
         * @return array
         */
        public static function event_tag($meta_id)
        {
        }
        /**
         * Get the event link
         *
         * @deprecated 4.3
         *
         * @param int $meta_id
         *
         * @return string
         */
        public static function event_website($meta_id)
        {
        }
        /**
         * Get event origin
         *
         * @deprecated 4.3
         *
         * @param int $meta_id
         *
         * @return string
         */
        public static function event_origin($meta_id)
        {
        }
        /**
         * Get organizer name
         *
         * @deprecated 4.3
         *
         * @param int $meta_id
         *
         * @return string
         */
        public static function organizer_name($meta_id)
        {
        }
        /**
         * Get organizer email
         *
         * @deprecated 4.3
         *
         * @param int $meta_id
         *
         * @return string
         */
        public static function organizer_email($meta_id)
        {
        }
        /**
         * Get the venue name
         *
         * @deprecated 4.3
         *
         * @param int $meta_id
         *
         * @return string
         */
        public static function venue_name($meta_id)
        {
        }
        /**
         * Get the venue address
         *
         * @deprecated 4.3
         *
         * @param int $meta_id
         *
         * @return string
         */
        public static function venue_address($meta_id)
        {
        }
        /**
         * Get the venue map
         *
         * @deprecated 4.3
         *
         * @param int $meta_id
         *
         * @return string
         */
        public static function venue_map($meta_id)
        {
        }
    }
    class Tribe_Register_Meta extends \Tribe__Events__Advanced_Functions__Register_Meta
    {
    }
    class TribeSettingsTab extends \Tribe__Settings_Tab
    {
    }
    class Tribe__Events__Asset__Bootstrap_Datepicker extends \Tribe__Events__Asset__Abstract_Asset
    {
        public function handle()
        {
        }
    }
    class Tribe_Events_List_Template extends \Tribe__Events__Template__List
    {
    }
    class Tribe__Events__Asset__Events_Css_Full extends \Tribe__Events__Asset__Abstract_Events_Css
    {
        public function handle(array &$stylesheets, $mobile_break)
        {
        }
    }
    class Tribe__Events__Asset__Ajax_Calendar extends \Tribe__Events__Asset__Abstract_Asset
    {
        public function handle()
        {
        }
    }
    class TribeEventsImporter_FileUploader extends \Tribe__Events__Importer__File_Uploader
    {
    }
    class TribeEventsAdminList extends \Tribe__Events__Admin_List
    {
    }
    class Tribe__Events__Asset__Tribe_Select2 extends \Tribe__Events__Asset__Abstract_Asset
    {
        /**
         * @var array
         */
        protected $aliases = ['tribe-select2' => ['advanced-custom-fields-pro/acf.php' => 'select2']];
        public function handle()
        {
        }
    }
    class Tribe__Events__Admin__Front_Page_View
    {
        public function hook()
        {
        }
        public function save_setting()
        {
        }
    }
    class TribeEventsQuery extends \Tribe__Events__Query
    {
    }
    class Tribe__Events__Asset__Datepicker extends \Tribe__Events__Asset__Abstract_Asset
    {
        public function handle()
        {
        }
    }
    final class Tribe__Events__Customizer__Text extends \Tribe__Customizer__Section
    {
        /**
         * Object instance.
         *
         * @return mixed|object|Tribe__Container The instance of the requested class.
         */
        public static function instance()
        {
        }
        /**
         * Grab the CSS rules template.
         *
         * @since 5.0.1
         *
         * @param string  $template
         * @return string $template
         */
        public function get_css_template($template)
        {
        }
        /**
         * Setup the Customizer section.
         *
         * @since 5.0.1
         *
         * @return void
         */
        public function setup()
        {
        }
        /**
         * Create the Fields/Settings for this sections.
         *
         * @param  WP_Customize_Section $section The WordPress section instance.
         * @param  WP_Customize_Manager $manager [description]
         *
         * @return void
         */
        public function register_settings(\WP_Customize_Section $section, \WP_Customize_Manager $manager)
        {
        }
    }
    class Tribe__Events__Asset__Dialog extends \Tribe__Events__Asset__Abstract_Asset
    {
        public function handle()
        {
        }
    }
    class Tribe_Amalgamator extends \Tribe__Events__Amalgamator
    {
    }
    class Tribe_Events_Single_Event_Template extends \Tribe__Events__Template__Single_Event
    {
    }
    class TribeEventsPostException extends \Tribe__Events__Post_Exception
    {
    }
    /**
     * Handles output of Google structured data markup
     */
    abstract class Tribe__Events__Google_Data_Markup
    {
        /**
         * Compile the schema.org event data into an array
         */
        protected function build_data()
        {
        }
        /**
         * This method is kept for backwards compatiblity, does nothing!
         */
        protected function filter_data($data)
        {
        }
        /**
         * puts together the actual html/json javascript block for output
         * @return string
         */
        public function script_block()
        {
        }
    }
    class Tribe__Events__Admin__Organizer_Chooser_Meta_Box extends \Tribe__Events__Linked_Posts__Chooser_Meta_Box
    {
        /**
         * Render a single row of the organizers table
         *
         * @param int $organizer_id
         *
         */
        protected function single_organizer_dropdown($organizer_id)
        {
        }
        /**
         * Render a link to edit the organizer post
         *
         * @param int $organizer_id
         *
         */
        protected function edit_organizer_link($organizer_id)
        {
        }
        /**
         * Determine if the event can use the default organizer setting
         *
         * @param array $current_organizers
         *
         * @return bool
         */
        protected function use_default_organizer($current_organizers)
        {
        }
        /**
         * Renders the "Add Another Organizer" button
         *
         */
        protected function render_add_organizer_button()
        {
        }
    }
    class TribeEvents extends \Tribe__Events__Main
    {
    }
    abstract class TribeSettings extends \Tribe__Settings
    {
    }
    class TribeiCal extends \Tribe__Events__iCal
    {
    }
    class TribeEventsCacheListener extends \Tribe__Events__Cache_Listener
    {
    }
    class Tribe__Events__Asset__Admin_Menu extends \Tribe__Events__Asset__Abstract_Asset
    {
        public function handle()
        {
        }
    }
    class TribeEventsImporter_FileImporter_Events extends \Tribe__Events__Importer__File_Importer_Events
    {
    }
    class Tribe__Events__Meta_Factory
    {
        public $meta = [];
        public $meta_group = [];
        const META_IDS = 'meta_ids';
        /**
         * register meta or meta_groups
         *
         * @deprecated 4.3
         *
         * @param  string $meta
         * @param  array  $args
         *
         * @return bool
         */
        public static function register($meta_id, $args = [])
        {
        }
        /**
         * check to see if meta item has been defined
         *
         * @deprecated 4.3
         *
         * @param  string $meta_id
         * @param  string $type
         *
         * @return boolean
         */
        public static function check_exists($meta_id, $type = 'meta')
        {
        }
        /**
         * get meta arguments
         *
         * @deprecated 4.3
         *
         * @param  string $meta_id
         * @param  string $type
         *
         * @return array of arguments
         */
        public static function get_args($meta_id, $type = 'meta')
        {
        }
        /**
         * get the set order of meta items
         * useful when generically displaying meta for skeleton view or bulk assignments
         *
         * @param  string $meta_id
         *
         * @return array of ordered meta ids
         */
        public static function get_order($meta_id = \null)
        {
        }
        /**
         * set the visibility of a meta item when using a bulk display tag
         *
         * @param string  $meta_id
         * @param string  $type
         * @param boolean $status
         */
        public static function set_visibility($meta_id, $type = 'meta', $status = \true)
        {
        }
        /**
         * embed css classes for templating the meta item on display
         *
         * @param  string $template
         * @param  array  $classes
         *
         * @return string $template
         */
        public static function embed_classes($template, $classes = [])
        {
        }
        /**
         * return a completed meta template for display
         * @uses   self::embed_classes for css classes
         *
         * @param  string $label
         * @param  string $meta
         * @param  string $meta_id
         * @param  string $type
         *
         * @return string $html finished meta item for display
         */
        public static function template($label, $meta, $meta_id, $type = 'meta')
        {
        }
    }
    class TribeField extends \Tribe__Field
    {
    }
    class TribeEventsImporter_ColumnMapper extends \Tribe__Events__Importer__Column_Mapper
    {
    }
    interface Tribe__Events__Admin__Notices__Notice_Interface
    {
        /**
         * Echoes the notice.
         *
         * @param string $message
         * @param string $class
         *
         * @return void
         */
        public function render($message, $class = 'updated');
        /**
         * Return the notice content.
         *
         * @param string $message
         * @param string $class
         *
         * @return string
         */
        public function get($message, $class);
    }
    class Tribe__Events__Admin__Notices__Base_Notice implements \Tribe__Events__Admin__Notices__Notice_Interface
    {
        /**
         * Echoes the notice.
         *
         * @param string $message
         * @param string $class
         *
         * @return void
         */
        public function render($message, $class = 'updated')
        {
        }
        /**
         * Return the notice content.
         *
         * @param string $message
         * @param string $class
         *
         * @return string
         */
        public function get($message, $class)
        {
        }
    }
    class TribeEventsImporter_FileImporter_Organizers extends \Tribe__Events__Importer__File_Importer_Organizers
    {
    }
    class Tribe__Events__Asset__Calendar_Script extends \Tribe__Events__Asset__Abstract_Asset
    {
        public function handle()
        {
        }
    }
    class TribeDateUtils extends \Tribe__Date_Utils
    {
    }
    class Tribe_Events_Month_Template extends \Tribe__Events__Template__Month
    {
    }
    class Tribe__Events__Google_Data_Markup__Event extends \Tribe__Events__Google_Data_Markup
    {
    }
    class Tribe__Events__Asset__Ajax_List extends \Tribe__Events__Asset__Abstract_Asset
    {
        public function handle()
        {
        }
    }
    /**
     * The Events Calendar Customizer
     * Add "Main Events Page" to Homepage Selection
     *
     * @package The Events Calendar
     * @subpackage Customizer
     * @since 4.6.12
     */
    class Tribe__Events__Customizer__Front_Page_View extends \Tribe__Customizer__Section
    {
        /**
         * PHP 5.2 method of creating "instances" of an abstract require this
         * Note: This is the only required method for a Connector to work
         *
         * @since 4.6.12
         *
         * @return self The dynamic instance of this Class
         */
        public static function instance($name = \null)
        {
        }
        /**
         * Filter the wp_dropdown_pages markup in the Customizer "Homepage Settings" screen so users can
         * select "Main Events Page" as an option.
         *
         * @since 4.6.12
         */
        public function setup()
        {
        }
        /**
         * Add "Main Events Page" option to the Customizer's "Homepage Settings" static-page dropdown.
         *
         * @since 4.6.12
         *
         * @param string $output HTML output for drop down list of pages.
         * @param array  $args   The parsed arguments array.
         * @param array  $pages  List of WP_Post objects returned by `get_pages()`
         *
         * @return string
         */
        public function add_events_page_option($output, $args, $pages)
        {
        }
    }
    class Tribe__Events__Asset__Events_Css_Skeleton extends \Tribe__Events__Asset__Abstract_Events_Css
    {
        public function handle(array &$stylesheets, $mobile_break)
        {
        }
    }
    class Tribe__Events__Asset__Events_Css extends \Tribe__Events__Asset__Abstract_Asset
    {
        /**
         * @var string
         */
        protected $dir;
        /**
         * @var string
         */
        protected $class_name;
        public function __construct()
        {
        }
        public function handle()
        {
        }
        protected function get_child_class_name($style_option)
        {
        }
        /**
         * @return string
         */
        protected function get_default_child_class_path()
        {
        }
        /**
         * @return string
         */
        protected function get_abstract_child_class_path()
        {
        }
        /**
         * @param $child_class_name
         *
         * @return string
         */
        protected function get_child_class_path($child_class_name)
        {
        }
    }
    class TribeEventsTemplates extends \Tribe__Events__Templates
    {
    }
    class Tribe__Events__Asset__Factory extends \Tribe__Asset__Factory
    {
        /**
         * @return string
         */
        protected function get_asset_class_name_prefix()
        {
        }
        /**
         * @return Tribe__Events__Asset__Factory
         */
        public static function instance()
        {
        }
    }
    class Tribe__Events__Asset__Settings extends \Tribe__Events__Asset__Abstract_Asset
    {
        public function handle()
        {
        }
    }
    /**
     * Tribe__Events__Importer__Options
     *
     */
    class Tribe__Events__Importer__Options
    {
        public static $options = ['imported_post_status', 'imported_encoding_status'];
        public static function process_general_form_submission()
        {
        }
        public static function settings_saved_message()
        {
        }
        /**
         * Get value for a specific option
         *
         * @param string $optionName name of option
         * @param string $default    default value
         *
         * @return mixed results of option query
         */
        public static function getOption($optionName, $default = '')
        {
        }
        /**
         * Return Default Post Status Per Import Method
         *
         * @param string $type
         *
         * @return mixed|void
         */
        public static function get_default_post_status($type = 'csv')
        {
        }
        /**
         * Dropdown Options for Imported Event Status
         *
         * @return mixed|void
         */
        public static function get_possible_stati()
        {
        }
        /**
         * Return Encoding Status
         *
         * @param string $type importer type
         *
         * @return mixed|void
         */
        public static function get_default_encoding_status($type = 'csv')
        {
        }
        /**
         * Dropdown Options for Encoding Status
         *
         * @return mixed|void
         */
        public static function get_encoding_status()
        {
        }
    }
    class Tribe_Events_Day_Template extends \Tribe__Events__Template__Day
    {
    }
    class Tribe_Meta_Factory extends \Tribe__Events__Meta_Factory
    {
    }
    class TribeEventsListWidget extends \Tribe__Events__List_Widget
    {
    }
    class Tribe__Events__Asset__Admin_Ui extends \Tribe__Events__Asset__Abstract_Asset
    {
        public function handle()
        {
        }
    }
    class TribeEventsCache extends \Tribe__Events__Cache
    {
    }
    class Tribe__Events__Asset__Admin extends \Tribe__Events__Asset__Abstract_Asset
    {
        public function handle()
        {
        }
    }
    class Tribe__Events__Asset__Events_Css_Default extends \Tribe__Events__Asset__Abstract_Events_Css
    {
        public function handle(array &$stylesheets, $mobile_break)
        {
        }
    }
    class Tribe__Events__Asset__Smoothness extends \Tribe__Events__Asset__Abstract_Asset
    {
        public function handle()
        {
        }
    }
    class Tribe__Events__Asset__Jquery_Resize extends \Tribe__Events__Asset__Abstract_Asset
    {
        public function handle()
        {
        }
    }
}
/**
 * Calendar Class Functions
 *
 * @since 5.1.1
 */
namespace Tribe\Events\Views\V2 {
    /**
     * Used in the multiday month loop.
     * Outputs classes for the multiday event (article).
     *
     * @since 5.1.1
     *
     * @param WP_Post $event            An event post object with event-specific properties added from the the `tribe_get_event`
     *                                  function.
     * @param string  $day_date         The `Y-m-d` date of the day currently being displayed.
     * @param bool    $is_start_of_week Whether the current grid day being rendered is the first day of the week or not.
     * @param string  $today_date       Today's date in the `Y-m-d` format.
     *
     * @return array<string> $classes   The classes to add to the multiday event.
     */
    function month_multiday_classes($event, $day_date, $is_start_of_week, $today_date)
    {
    }
}
namespace {
    /**
     * Returns a value set on the current view template.
     *
     * This template tag should be used in View templates, after the View set up the loop.
     *
     * @since 4.9.4
     *
     * @param string|array $key     The key, or nested keys, to fetch the variable.
     * @param mixed        $default The default value that will be returned if the value is not set in the template or the
     *                              template is not set at all.
     *
     * @example
     *        ```php
     *        <?php
     *        // Return the value of the `events` variable set on the template or an empty array if not found.
     *        $events = tribe_events_template_var( 'events', [] );
     *
     * // Return the `keyword` value set in the `bar` array if the array `bar` variable is set and the `keyword` index
     * // is set on it or an empty string
     * $events = tribe_events_template_var( [ 'bar', 'keyword' ], '' );
     * ```
     *
     * @return mixed The template variable value, or the default value if not found.
     */
    function tribe_events_template_var($key, $default = \null)
    {
    }
    /**
     * Compares a given version to the required PHP version
     *
     * Normally we use Constant: PHP_VERSION
     *
     * @param  string  $version  Which PHP version we are checking against
     *
     * @since  4.8
     *
     * @return bool
     */
    function tribe_is_not_min_php_version($version = \PHP_VERSION)
    {
    }
    /**
     * Which is our required PHP min version
     *
     * @since  4.8
     *
     * @return string
     */
    function tribe_get_php_min_version()
    {
    }
    /**
     * Returns the error message when php version min doesnt check
     *
     * @since  4.8
     *
     * @return string
     */
    function tribe_not_php_version_message()
    {
    }
    /**
     * Fetches the name of the plugins that are not compatible with current PHP version
     *
     * @since  4.8
     *
     * @return array
     */
    function tribe_not_php_version_names()
    {
    }
    /**
     * Echoes out the error for the PHP min version as a WordPress admin Notice
     *
     * @since  4.8
     *
     * @return void
     */
    function tribe_not_php_version_notice()
    {
    }
    /**
     * Loads the Text domain for non-compatible PHP versions
     *
     * @since  4.8
     *
     * @param string $domain Which domain we will try to translate to
     * @param string $file   Where to look for the lang folder
     *
     * @return void
     */
    function tribe_not_php_version_textdomain($domain, $file)
    {
    }
    /**
     * Retrieves the posts used in the List Widget loop.
     *
     * @return array WP_Posts of the retrieved events.
     **/
    function tribe_get_list_widget_events()
    {
    }
    /**
     * Fetches and returns a decorated post object representing a Venue.
     *
     * @since 4.9.9
     *
     * @param null|int|WP_Post $venue  The venue ID or post object or `null` to use the global one.
     * @param string|null      $output The required return type. One of `OBJECT`, `ARRAY_A`, or `ARRAY_N`, which
     *                                 correspond to a WP_Post object, an associative array, or a numeric array,
     *                                 respectively. Defaults to `OBJECT`.
     * @param string           $filter Type of filter to apply. Accepts 'raw'.
     * @param bool             $force  Whether to force a re-fetch ignoring cached results or not.
     *
     * @return array|mixed|void|WP_Post|null {
     *                              The Venue post object or array, `null` if not found.
     *
     *                              @type string $address The venue address field, normally street and number.
     *                              @type string $country Which country the venue happens, full name of the country, no abbr.
     *                              @type string $city The city for the venue.
     *                              @type string $state_province State or province for the venue, available for venues outside of the US.
     *                              @type string $state The state for the venue in case of a US based venue.
     *                              @type string $province Province for the venue, mostly deprecated, use state_province.
     *                              @type string $zip Zip code of the venue.
     *                              @type boolean $overwrite_coordinates Did this venue get it's coordinates overwritten manually.
     *                              @type string $latitude The latitude of the venue.
     *                              @type string $longitude The longitude of the venue.
     *                              @type string $geolocation_string The string we use to crawl and link to the maps provider.
     *                          }
     */
    function tribe_get_venue_object($venue = \null, $output = \OBJECT, $filter = 'raw', $force = \false)
    {
    }
    /**
     * Returns the event Venue ID.
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return int        The venue ID.
     */
    function tribe_get_venue_id($postId = \null)
    {
    }
    /**
     * Returns the singular version of the Venue Label.
     *
     * Note: the output of this function is not escaped.
     * You should escape it wherever you use it!
     *
     * @since 3.7
     * @since5.1.6 remove escaping.
     *
     * @return string The singular version of the Venue Label.
     */
    function tribe_get_venue_label_singular()
    {
    }
    /**
     * Returns the plural version of the Venue Label.
     *
     * Note: the output of this function is not escaped.
     * You should escape it wherever you use it!
     *
     * @since 3.7
     * @since5.1.6 remove escaping.
     *
     * @return string The plural version of the Venue Label.
     */
    function tribe_get_venue_label_plural()
    {
    }
    /**
     * Returns true or false depending on if the post id for the event has a venue or if the post id is a venue
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return bool
     */
    function tribe_has_venue($postId = \null)
    {
    }
    /**
     * Returns the event venue name
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return string Venue Name
     */
    function tribe_get_venue($postId = \null)
    {
    }
    /**
     * Returns or display the event Venue Name with a link to the venue
     *
     * @since ??
     *
     * @param int  $postId    Either event id or venue id, if none specified, current post is used.
     * @param bool $full_link If true outputs a complete HTML <a> link, otherwise only the URL is output
     * @return string         HTML link if $full_link is set to true, URL string if it's set to false.
     */
    function tribe_get_venue_link($postId = \null, $full_link = \true)
    {
    }
    /**
     * Returns the venue's country
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return string     The escaped country name of the venue.
     */
    function tribe_get_country($postId = \null)
    {
    }
    /**
     * Returns the full address for the venue. Function uses the views/modules/address.php template which you can override in your theme.
     *
     * @since ??
     *
     * @param int  $postId           Either event id or venue id, if none specified, current post is used.
     * @param bool $includeVenueName To include the venue name or not.
     * @return string                Formatted event address.
     */
    function tribe_get_full_address($postId = \null, $includeVenueName = \false)
    {
    }
    /**
     * Returns true if any of the following exist: address, city, state/province (region), country or zip
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return bool True if any part of an address exists.
     */
    function tribe_address_exists($postId = \null)
    {
    }
    /**
     * Returns the venue street address
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return string     The escaped venue street address.
     */
    function tribe_get_address($postId = \null)
    {
    }
    /**
     * Returns the venue city
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return string     The escaped venue city
     */
    function tribe_get_city($postId = \null)
    {
    }
    /**
     * Returns the venue state or province
     *
     * @since ??
     *
     * @todo Deprecate tribe_get_stateprovince or tribe_get_region
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return string     The escaped venue state or province.
     */
    function tribe_get_stateprovince($postId = \null)
    {
    }
    /**
     * Returns the venue state
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return string     The escaped venue state or province.
     */
    function tribe_get_state($postId = \null)
    {
    }
    /**
     * Returns the venue province
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return string     The escaped venue province.
     */
    function tribe_get_province($postId = \null)
    {
    }
    /**
     * Returns the state or province for US or non-US addresses (effectively the same thing as tribe_get_stateprovince())
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return string     The state or province for the event.
     * @todo Deprecate tribe_get_region or tribe_get_stateprovince
     */
    function tribe_get_region($postId = \null)
    {
    }
    /**
     * Returns the event zip code
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return string     The venue zip code.
     */
    function tribe_get_zip($postId = \null)
    {
    }
    /**
     * Gets the full region name of a given event's Venue address.
     *
     * @since ??
     *
     * @param int $event_id The post ID of the event.
     * @return string       The full region for this event's address.
     */
    function tribe_get_full_region($event_id)
    {
    }
    /**
     * Returns the coordinates of the venue
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return array      An Array with the Latitude and Longitude of the venue.
     */
    function tribe_get_coordinates($postId = \null)
    {
    }
    /**
     * Conditional if the venue has it's coordinates overwritten
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return bool       Depending on the venue checkbox of overwrite coordinates.
     */
    function tribe_is_venue_overwrite($postId = \null)
    {
    }
    /**
     * Returns the venue phone number
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return string     The escaped phone number for the venue.
     */
    function tribe_get_phone($postId = \null)
    {
    }
    /**
     * Get all the venues
     *
     * @param bool  $only_with_upcoming Only return venues with upcoming events attached to them.
     * @param int   $posts_per_page
     * @param bool  $suppress_filters
     * @param array $args {
     *      Optional. Array of Query parameters.
     *
     *      @type int  $event       Only venues linked to this event post ID.
     *      @type bool $has_events  Only venues that have events.
     *      @type bool $found_posts Return the number of found venues.
     * }
     *
     * @return array An array of venue post objects.
     */
    function tribe_get_venues($only_with_upcoming = \false, $posts_per_page = -1, $suppress_filters = \true, array $args = [])
    {
    }
    /**
     * Get the link for the venue website.
     *
     * @since ??
     *
     * @param null|int    $post_id The event or venue ID.
     * @param null|string $label   The label for the link.
     * @return string              Formatted link to the venue website
     */
    function tribe_get_venue_website_link($post_id = \null, $label = \null)
    {
    }
    /**
     * Get the link for the venue website.
     *
     * @since 5.5.0
     *
     * @param null|int $post_id The event or venue ID.
     * @return string  Formatted title for the venue website link
     */
    function tribe_events_get_venue_website_title($post_id = \null)
    {
    }
    /**
     * Returns the venue website URL related to the current post or for the optionally
     * specified post.
     *
     * @since ??
     *
     * @param int|null $post_id The event ID.
     * @return string
     */
    function tribe_get_venue_website_url($post_id = \null)
    {
    }
    /**
     * Gets venue details for use in some single-event templates.
     *
     * @since ??
     *
     * @param int|null $post_id The venue ID.
     * @return array            The venue name and venue address.
     */
    function tribe_get_venue_details($post_id = \null)
    {
    }
    /**
     * Gets the venue name and address on a single line.
     *
     * @since ??
     *
     * @param int     $event_id The event ID.
     * @param boolean $link     Whether or not to wrap the text in a venue link.
     * @return string           Single-line address string.
     */
    function tribe_get_venue_single_line_address($event_id, $link = \true)
    {
    }
    /**
     * Fetches and returns a decorated post object representing an Event.
     *
     * @since 4.9.7
     *
     * @param null|int|WP_Post $event  The event ID or post object or `null` to use the global one.
     * @param string|null      $output The required return type. One of `OBJECT`, `ARRAY_A`, or `ARRAY_N`, which
     *                                 correspond to a WP_Post object, an associative array, or a numeric array,
     *                                 respectively. Defaults to `OBJECT`.
     * @param string           $filter Type of filter to apply. Accepts 'raw', a valid date string or
     *                                 object to localize the event in a specific time-frame.
     * @param bool             $force  Whether to force a re-fetch ignoring cached results or not.
     *
     * @return array|mixed|void|WP_Post|null {
     *                              The Event post object or array, `null` if not found.
     *
     *                              @type string $start_date The event start date, in `Y-m-d H:i:s` format.
     *                              @type string $start_date_utc The event UTC start date, in `Y-m-d H:i:s` format.
     *                              @type string $end_date The event end date, in `Y-m-d H:i:s` format.
     *                              @type string $end_date_utc The event UTC end date, in `Y-m-d H:i:s` format.
     *                              @type array $dates An array containing the event.start, end and UTC date objects. {
     *                                              @type DateTimeImmutable $start The event start date object.
     *                                              @type DateTimeImmutable $start_utc The event UTC start date object.
     *                                              @type DateTimeImmutable $end The event end date object.
     *                                              @type DateTimeImmutable $end_utc The event UTC end date object.
     *                                              @type DateTimeImmutable $start_site The event start date object in
     *                                                                                  the site timezone.
     *                                              @type DateTimeImmutable $end_site The event end date object in the
     *                                                                                  site timezone.
     *                                              @type DateTimeImmutable $start_display The event start date object
     *                                                                                     in the site or event timezone
     *                                                                                     depending on the setting.
     *                                              @type DateTimeImmutable $end_display The event end date object in
     *                                                                                     the site or event timezone
     *                                                                                     depending on the setting.
     *                                          }
     *                              @type string $timezone The event timezone string.
     *                              @type int $duration The event duration in seconds.
     *                              @type false|int $multiday Whether the event is multi-day or not and its day.
     *                                                        duration if it is.
     *                              @type bool $all_day Whether the event is an all-day one or not.
     *                              @type null|bool $starts_this_week Whether the event starts on the week of the date
     *                                                                specified in the `$filter` argument or not, `null`
     *                                                                if no date is specified in the filter.
     *                              @type null|bool $ends_this_week Whether the event ends on the week of the date
     *                                                              specified in the `$filter` argument or not, `null`
     *                                                              if no date is specified in the filter.
     *                              @type null|bool $happens_this_week Whether the event happens on the week of the date
     *                                                              specified in the `$filter` argument or not, `null`
     *                                                              if no date is specified in the filter.
     *                              @type null|int $this_week_duration The days duration of the event on the week
     *                                                                 specified in the `$filter` argument, `null`
     *                                                                 if no date is specified in the filter.
     *                              @type bool $featured Whether the event is a featured one or not.
     *                              @type string $cost The event formatted cost string, as returned by the `tribe_get_cost`
     *                                                 `tribe_get_cost` function.
     *                              @type Lazy_Collection $organizers A collection of Organizers, lazily fetched and
     *                                                                eventually resolved to an array.
     *                              @type Lazy_Collection $venues A collection of Venues, lazily fetched and
     *                                                            eventually resolved to an array.
     *                              @type Post_Thumbnail $thumbnail The post thumbnail information.
     *                              @type Lazy_String $schedule_details The event schedule details, as produced by the
     *                                                                  `tribe_events_event_schedule_details` function.
     *                              @type Lazy_String $plain_schedule_details The event schedule details, without HTML
     *                                                                        tags.
     *                          }
     */
    function tribe_get_event($event = \null, $output = \OBJECT, $filter = 'raw', $force = \false)
    {
    }
    /**
     * Single Day Test
     *
     * Returns true if the query is set for single day, false otherwise
     *
     * @category Events
     * @return bool
     */
    function tribe_is_day()
    {
    }
    /**
     * Link Event Day
     *
     * @category Events
     * @param string $date
     *
     * @return string URL
     */
    function tribe_get_day_link($date = \null)
    {
    }
    /**
     * Day View Link
     *
     * Get a link to day view
     *
     * @category Events
     * @param string $date
     * @param string $day
     *
     * @return string HTML linked date
     */
    function tribe_get_linked_day($date, $day)
    {
    }
    /**
     * Output an html link to a day
     *
     * @category Events
     * @param string $date 'previous day', 'next day', 'yesterday', 'tomorrow', or any date string that strtotime() can parse
     * @param string $text text for the link
     *
     **/
    function tribe_the_day_link($date = \null, $text = \null)
    {
    }
    /**
     * Get the label for the day navigation link
     *
     * @category Events
     * @param string $date_description
     *
     * @return string
     */
    function tribe_get_the_day_link_label($date_description)
    {
    }
    /**
     * Get the date for the day navigation link.
     *
     * @category Events
     * @param string $date_description
     *
     * @return string
     * @throws OverflowException
     */
    function tribe_get_the_day_link_date($date_description)
    {
    }
    /**
     * Get the next day's date
     *
     * @category Events
     * @param string $start_date
     *
     * @return string
     * @throws OverflowException
     */
    function tribe_get_next_day_date($start_date)
    {
    }
    /**
     * Get the previous day's date
     *
     * @category Events
     * @param string $start_date
     *
     * @return string
     * @throws OverflowException
     */
    function tribe_get_previous_day_date($start_date)
    {
    }
    /**
     * Display a month
     *
     * Inline example:
     * < code >
     * <?php
     * // output the events in May 2016 using the full month view template
     * tribe_show_month( array( 'eventDate' => '2016-05-01' ) )
     * ?>
     * </ code >
     *
     * @param array  $args          query args to pass to the month view
     * @param string $template_path template to use, defaults to the full month view
     *
     **/
    function tribe_show_month($args = [], $template_path = 'month/content')
    {
    }
    /**
     * Month view conditional tag
     *
     * Returns true when on the "real" Month View itself, but not in other secondary instances of the
     * Month View like instance of the [tribe_events] shortcode.
     *
     * @return bool
     */
    function tribe_is_month()
    {
    }
    /**
     * Used in the month loop.
     * Returns true if there are more calendar days available in the loop.
     *
     * Example:
     * < code >
     * <?php
     * // loop through the days in the current month query
     * while( tribe_events_have_month_days() ) : tribe_events_the_month_day();
     *        // do stuff
     * endwhile;
     * ?>
     * </ code >
     *
     * @return bool
     * @see Tribe__Events__Template__Month::have_days()
     **/
    function tribe_events_have_month_days()
    {
    }
    /**
     * Used in the month loop.
     * Advances the loop pointer to the next day, and sets that day up for use.
     *
     * Example:
     * < code >
     * <?php
     * // loop through the days in the current month query
     * while( tribe_events_have_month_days() ) : tribe_events_the_month_day();
     *        // do stuff
     * endwhile;
     * ?>
     * </ code >
     *
     * @see Tribe__Events__Template__Month::the_day()
     **/
    function tribe_events_the_month_day()
    {
    }
    /**
     * Used in the month loop.
     * Returns the counter for the current week in the month loop
     *
     * Example:
     * < code >
     * <?php
     * // loop through the days in the current month query
     * if( tribe_events_get_current_week == 3 );
     *        // do stuff
     * endif;
     * ?>
     * </ code >
     *
     * @return int
     * @see Tribe__Events__Template__Month::get_current_week()
     **/
    function tribe_events_get_current_week()
    {
    }
    /**
     * Used in the month loop.
     * Gets the current day in the month loop
     *
     * Returned array contains the following elements if the day is in the currently displaying month:
     *  'daynum'       => Day of the month (int)
     *  'date'         => Complete date (Y-m-d)
     *  'events'       => Object containing events on this day (WP_Query)
     *  'total_events' => Number of events on this day (int)
     *  'view_more'    => Link to the single day (URL)
     *
     * If the day is part of the previous or next month, the array simply contains:
     *    'date' => 'previous' or 'next'
     *
     * @return array
     * @see Tribe__Events__Template__Month::get_current_day()
     **/
    function tribe_events_get_current_month_day()
    {
    }
    /**
     * Used in the month loop.
     * Outputs classes for the current month day, including special classes for past / present / future days
     *
     * @see Tribe__Events__Template__Month::day_classes()
     **/
    function tribe_events_the_month_day_classes()
    {
    }
    /**
     * Used in the month loop.
     * Outputs classes for the current single event in the month loop
     *
     * @see Tribe__Events__Template__Month::event_classes()
     **/
    function tribe_events_the_month_single_event_classes()
    {
    }
    /**
     * Returns whether there are any events in the specific month.
     * Independently if there are filters or not.
     *
     * @return bool
     * @see Tribe__Events__Template__Month::get_daily_counts()
     * @since 3.1.1
     **/
    function tribe_events_month_has_events()
    {
    }
    /**
     * Returns whether there are any events in the month,
     * with the filtered results.
     *
     * @return bool
     *
     * @since 4.6.19
     * @see Tribe__Events__Template__Month::has_events_filtered()
     **/
    function tribe_events_month_has_events_filtered()
    {
    }
    /**
     * Drop Menu Post Link
     *
     * Returns the URL where the jump menu sends the month/year request.
     *
     * @return string URL
     */
    function tribe_get_dropdown_link_prefix()
    {
    }
    /**
     * Month View Date
     *
     * Get current calendar month view date
     *
     * @return string Date currently queried
     */
    function tribe_get_month_view_date()
    {
    }
    /**
     * Display an html link to the previous month. Used in the month navigation.
     *
     * No link will be returned if the link is to a month that precedes any existing
     * events.
     *
     * @uses tribe_get_previous_month_text()
     **/
    function tribe_events_the_previous_month_link()
    {
    }
    /**
     * Display an html link to the next month. Used in the month navigation.
     *
     * @uses tribe_get_next_month_text()
     **/
    function tribe_events_the_next_month_link()
    {
    }
    /**
     * Link to Previous Month
     *
     * Returns a link to the previous month's events page. Used in the month view.
     *
     * @return string URL
     */
    function tribe_get_previous_month_link()
    {
    }
    /**
     * Previous Month Text
     *
     * Returns a textual description of the previous month
     *
     * @return string Name of the previous month.
     */
    function tribe_get_previous_month_text()
    {
    }
    /**
     * Link to Next Month
     *
     * Returns a link to the next month's events page. Used in the month view.
     *
     * @return string URL
     */
    function tribe_get_next_month_link()
    {
    }
    /**
     * Current Month Text
     *
     * Returns a textual description of the current month
     *
     * @return string Name of the current month.
     */
    function tribe_get_current_month_text()
    {
    }
    /**
     * Next Month Text
     *
     * Returns a textual description of the next month
     *
     * @return string Name of the next month.
     */
    function tribe_get_next_month_text()
    {
    }
    /**
     * Determines if the current site is using The Events Calendar's default Google Maps API
     * Key, in which case only basic Maps Embed API requests are allowed.
     *
     * See https://developers.google.com/maps/documentation/embed/usage-and-billing#embed for
     * more info.
     *
     * @since 4.6.24
     *
     * @return boolean
     */
    function tribe_is_using_basic_gmaps_api()
    {
    }
    /**
     * Google Map Link
     *
     * Returns a url to google maps for the given event
     *
     * @category Events
     *
     * @param string $postId
     *
     * @return string A fully qualified link to https://maps.google.com/ for this event
     */
    function tribe_get_map_link($postId = \null)
    {
    }
    /**
     * Returns a formed HTML link to Google Maps for the given event.
     *
     * @category Events
     *
     * @param string $postId
     *
     * @return string A fully qualified link to https://maps.google.com/ for this event
     */
    function tribe_get_map_link_html($postId = \null)
    {
    }
    /**
     * Google Map Embed
     *
     * Returns an embedded google maps for an event
     *
     * @category Events
     *
     * @param string $post_id
     * @param int    $width
     * @param int    $height
     * @param bool   $force_load If true, then load the map even if an address is not provided.
     *
     * @return string An iframe pulling https://maps.google.com/ for this event
     */
    function tribe_get_embedded_map($post_id = \null, $width = \null, $height = \null, $force_load = \false)
    {
    }
    /**
     * Google Map Embed Test
     *
     * Check if embed google map is enabled for this event (or venue ).
     *
     * @category Events
     *
     * @param int $postId Id of the post, if none specified, current post is used
     *
     * @return bool True if google map option is set to embed the map
     */
    function tribe_embed_google_map($postId = \null)
    {
    }
    /**
     * Google Map Link Test
     *
     * Check if google map link is enabled for this event
     *
     * @category Events
     *
     * @param int $postId Id of the post, if none specified, current post is used
     *
     * @return bool True if google map link is set to display the event
     */
    function tribe_show_google_map_link($postId = \null)
    {
    }
    /**
     * Gets a full URL for a basic Google Maps embed.
     * See https://developers.google.com/maps/documentation/embed/guide for more info.
     *
     * @since 4.6.24
     *
     * @param string $address_string The full address for the marker to be shown on the map (e.g. an event venue).
     */
    function tribe_get_basic_gmap_embed_url($address_string)
    {
    }
    /**
     * Link to Previous Event (Display)
     *
     * Displays a link to the previous post by start date for the given event
     *
     * @param bool|string $anchor link text. Use %title% to place the post title in your string.
     *
     * @see tribe_get_prev_event_link()
     */
    function tribe_the_prev_event_link($anchor = \false)
    {
    }
    /**
     * Return a link to the previous event by start date for the given event.
     *
     * @param bool|string $anchor link text. Use %title% to place the post title in your string.
     *
     * @return string
     */
    function tribe_get_prev_event_link($anchor = \false)
    {
    }
    /**
     * Link to Next Event (Display)
     *
     * Display a link to the next post by start date for the given event
     *
     * @param bool|string $anchor link text. Use %title% to place the post title in your string.
     *
     * @return void
     * @see tribe_get_next_event_link()
     */
    function tribe_the_next_event_link($anchor = \false)
    {
    }
    /**
     * Return a link to the next post by start date for the given event
     *
     * @param bool|string $anchor link text. Use %title% to place the post title in your string.
     *
     * @return string
     */
    function tribe_get_next_event_link($anchor = \false)
    {
    }
    /**
     * Get a link to the previous events
     *
     * @return string
     */
    function tribe_get_previous_events_link()
    {
    }
    /**
     * Get a link to the next events
     *
     * @return string
     */
    function tribe_get_next_events_link()
    {
    }
    /**
     * Link to All Events
     *
     * Returns a link to the events URL
     *
     * @param string $context Optional; defaults to 'href'. Can be 'display', in which case non-latin chars are not url-encoded.
     * @return string URL
     */
    function tribe_get_events_link($context = 'href')
    {
    }
    /**
     * Link to Grid View
     *
     * Returns a link to the general or category calendar grid view
     *
     * @param string $term Optional event category to link to.
     *
     * @return string URL
     * @todo rename
     */
    function tribe_get_gridview_link($term = \null)
    {
    }
    /**
     * Link to List View
     *
     * Returns a link to the general or category upcoming view
     *
     * @param int $term Optional event category ID to link to.
     *
     * @return string URL
     */
    function tribe_get_listview_link($term = \null)
    {
    }
    /**
     * Link to List View (Past)
     *
     * Returns a link to the general or category past view
     *
     * @param int|null $term Term ID
     *
     * @return string URL
     */
    function tribe_get_listview_past_link($term = \null)
    {
    }
    /**
     * Link to a nearby List View page
     *
     * Returns a link to the next/previous list view page
     *
     * @param string $direction 'next' or 'prev'
     * @param int|null $term Term ID
     * @param string $currently_displaying Type of listview page that is currently being displayed ('past' or 'list')
     * @param int $page Current page number being displayed
     *
     * @return string URL
     */
    function tribe_get_listview_dir_link($direction = 'next', $term = \null, $currently_displaying = \null, $page = \null)
    {
    }
    /**
     * Utility function to update the pagination and current display on the list view.
     *
     * @since 4.6.12
     *
     * @param int $page
     * @param string $direction
     * @param null $currently_displaying
     *
     * @return array
     */
    function tribe_get_listview_args($page = 1, $direction = 'next', $currently_displaying = \null)
    {
    }
    /**
     * Validates that the current view is inside of the Two allowed: list or view if not default to the list view.
     *
     * @since 4.6.12
     *
     * @return string
     */
    function tribe_get_listview_display()
    {
    }
    /**
     * Link to prev List View
     *
     * Returns a link to the previous list view page
     *
     * @param int|null $term Term ID
     *
     * @return string URL
     */
    function tribe_get_listview_prev_link($term = \null)
    {
    }
    /**
     * Link to next List View
     *
     * Returns a link to the next list view page
     *
     * @param int|null $term Term ID
     *
     * @return string URL
     */
    function tribe_get_listview_next_link($term = \null)
    {
    }
    /**
     * Single Event Link
     *
     * Get link to a single event
     *
     * @param WP_Post|int $post_id   Optional. WP Post that this affects
     * @param bool        $full_link Optional. If true outputs a complete HTML <a> link, otherwise only the URL is output
     *
     * @return string|bool Link to post or false if none found
     */
    function tribe_get_event_link($post_id = \null, $full_link = \false)
    {
    }
    /**
     * Event Website Link (more info)
     *
     * @param null|object|int $event
     * @param null|string     $label
     *
     * @return string $html
     */
    function tribe_get_event_website_link($event = \null, $label = \null)
    {
    }
    /**
     * Get the link for the event website.
     *
     * @since 5.5.0
     *
     * @param null|int $post_id The event or event ID.
     * @return string  Formatted title for the event website link
     */
    function tribe_events_get_event_website_title($post_id = \null)
    {
    }
    /**
     * Event Website URL
     *
     * @param null|object|int $event
     *
     * @return string The event's website URL
     */
    function tribe_get_event_website_url($event = \null)
    {
    }
    /**
     * Organizer ID
     *
     * Returns the event Organizer ID.
     *
     * @param int $postId Can supply either event id or organizer id.
     *                    If none specified, current post is used.
     *                    If given an event with multiple organizers,
     *                    the first organizer ID is returned.
     *
     * @return int Organizer
     */
    function tribe_get_organizer_id($postId = \null)
    {
    }
    /**
     * Get the IDs of all organizers associated with an event.
     *
     * @param int $event_id The event post ID. Defaults to the current event.
     *
     * @return array
     */
    function tribe_get_organizer_ids($event_id = \null)
    {
    }
    /**
     * An organizers can have two sources the list of ordered items and the meta field associated with organizers,
     * where the meta field takes precedence we need to respect the order of the meta order only when the present items
     * on the meta field.
     *
     * @deprecated 4.6.23
     * @todo Remove on 4.7
     *
     * @since 4.6.15
     *
     * @param array $current
     * @param array $ordered
     *
     * @return array
     */
    function tribe_sanitize_organizers($current = [], $ordered = [])
    {
    }
    /**
     * Get Organizer Label Singular.
     * Returns the singular version of the Organizer Label.
     *
     * Note: the output of this function is not escaped.
     * You should escape it wherever you use it!
     *
     * @since 3.7
     * @since5.1.6 remove escaping.
     *
     * @return string The singular version of the Organizer Label.
     */
    function tribe_get_organizer_label_singular()
    {
    }
    /**
     * Get Organizer Label Plural
     * Returns the plural version of the Organizer Label.
     *
     * Note: the output of this function is not escaped.
     * You should escape it wherever you use it!
     *
     * @since 3.7
     * @since5.1.6 remove escaping.
     *
     * @return string The plural version of the Organizer Label.
     */
    function tribe_get_organizer_label_plural()
    {
    }
    /**
     * Get the organizer label.
     *
     * Note: the output of this function is not escaped.
     * You should escape it wherever you use it!
     *
     * @param bool $singular TRUE to return the singular label, FALSE to return plural.
     *
     * @return string
     */
    function tribe_get_organizer_label($singular = \true)
    {
    }
    /**
     * Returns a summary of key information for the specified organizer.
     *
     * Typically this is a pipe separated format containing the organizer's telephone
     * number, email address and website where available.
     *
     * @param int $post_id Either the organizer or event ID, if none specified, current post is used.
     *
     * @return string
     */
    function tribe_get_organizer_details($post_id = \null)
    {
    }
    /**
     * Get Organizer
     *
     * Returns the name of the Organizer
     *
     * @param int $postId Either event id or organizer id, if none specified, current post is used.
     *
     * @return string Organizer's Name
     */
    function tribe_get_organizer($postId = \null)
    {
    }
    /**
     * Organizer Test
     *
     * Returns true or false depending on if the post id has/is an organizer
     *
     * @param int $postId Either event id or organizer id, if none specified, current post is used.
     *
     * @return bool
     */
    function tribe_has_organizer($postId = \null)
    {
    }
    /**
     * Organizer Email
     *
     * Returns the Organizer's Email.
     *
     * @param int  $postId      Either event id or organizer id, if none specified, current post is used.
     * @param bool $antispambot Whether the email should pass through the `antispambot` function or not.
     *
     * @return string Organizer's Email
     */
    function tribe_get_organizer_email($postId = \null, $antispambot = \true)
    {
    }
    /**
     * Organizer Page Link
     *
     * Returns the event Organizer Name with a link to their single organizer page.
     *
     * @param int  $post_id   Either event id or organizer id, if none specified, current post is used.
     * @param bool $full_link If true outputs a complete HTML <a> link, otherwise only the URL is output.
     * @param bool $echo      Deprecated. If true, echo the link, otherwise return.
     *
     * @return string Organizer Name and Url
     */
    function tribe_get_organizer_link($post_id = \null, $full_link = \true, $echo = \false)
    {
    }
    /**
     * Organizer Phone
     *
     * Returns the event Organizer's phone number
     *
     * @param int $postId Can supply either event id or organizer id, if none specified, current post is used
     *
     * @return string Organizer's Phone Number
     */
    function tribe_get_organizer_phone($postId = \null)
    {
    }
    /**
     * Organizer website link
     *
     * Returns the event Organizer Name with a link to their supplied website
     *
     * @param null|int    $post_id The post ID for an event.
     * @param null|string $label   The text for the link.
     *
     * @return string
     **/
    function tribe_get_organizer_website_link($post_id = \null, $label = \null)
    {
    }
    /**
     * Get the link for the organizer website.
     *
     * @since 5.5.0
     *
     * @param null|int $post_id The event or organizer ID.
     * @return string  Formatted title for the organizer website link
     */
    function tribe_events_get_organizer_website_title($post_id = \null)
    {
    }
    /**
     * Get all the organizers
     *
     * @param bool  $only_with_upcoming Only return organizers with upcoming events attached to them.
     * @param int   $posts_per_page
     * @param bool  $suppress_filters
     * @param array $args {
     *      Optional. Array of Query parameters.
     *
     *      @type int  $event       Only organizers linked to this event post ID.
     *      @type bool $has_events  Only organizers that have events.
     *      @type bool $found_posts Return the number of found organizers.
     * }
     *
     * @return array|int An array of organizer post objects or an integer value if `found_posts` is set to a truthy value.
     */
    function tribe_get_organizers($only_with_upcoming = \false, $posts_per_page = -1, $suppress_filters = \true, array $args = [])
    {
    }
    /**
     * Fetches and returns a decorated post object representing a Organizer.
     *
     * @since 5.3.0
     *
     * @param null|int|WP_Post $organizer  The organizer ID or post object or `null` to use the global one.
     * @param string|null      $output The required return type. One of `OBJECT`, `ARRAY_A`, or `ARRAY_N`, which
     *                                 correspond to a WP_Post object, an associative array, or a numeric array,
     *                                 respectively. Defaults to `OBJECT`.
     * @param string           $filter Type of filter to apply. Accepts 'raw'.
     * @param bool             $force  Whether to force a re-fetch ignoring cached results or not.
     *
     * @return array|mixed|void|WP_Post|null {
     *                              The Organizer post object or array, `null` if not found.
     *
     *                              @type string $phone The organizer phone number NOT filtered, apply anti-spambot filters if required.
     *                              @type string $website The organizer full website URL.
     *                              @type string $email The organizer email address NOT filtered, apply anti-spambot filters if required.
     *                          }
     */
    function tribe_get_organizer_object($organizer = \null, $output = \OBJECT, $filter = 'raw', $force = \false)
    {
    }
    /**
     * Functions, or polyfills, related to URL manipulation on events
     *
     * @since 4.9.4
     */
    /**
     * Given a set of query strings returns the clean and canonical URL.
     *
     * @since  4.9.4
     *
     * @param  string|array $query Query string arguments.
     * @param  string|null  $url   Base url to apply those query arguments.
     *
     * @return string              Final clean and canonical URL for events.
     */
    function tribe_events_get_url($query = [], $url = \null)
    {
    }
    /**
     * End Date formatted for display
     *
     * Returns the event end date that observes the end of day cutoff
     *
     * @category Events
     * @see      http://php.net/manual/en/function.date.php
     *
     * @param int|WP_Post $event        The event (optional).
     * @param bool        $display_time If true shows date and time, if false only shows date.
     * @param string      $date_format  Allows date and time formatting using standard php syntax.
     * @param string      $timezone     Timezone in which to present the date/time (or default behaviour if not set).
     *
     * @return string|null Date
     */
    function tribe_get_display_end_date($event = \null, $display_time = \true, $date_format = '', $timezone = \null)
    {
    }
    /**
     * Given a date and an event, returns true or false if the event is happening on that date
     * This function properly adjusts for the EOD cutoff and multi-day events
     *
     * @param null $date
     * @param null $event
     *
     * @return mixed|void
     */
    function tribe_event_is_on_date($date = \null, $event = \null)
    {
    }
    /**
     * Event-specific wrapper for wp_timezone_choice().
     *
     * @since 4.6.5
     *
     * @param string $selected_zone
     * @param string $locale (optional)
     *
     * @return string
     */
    function tribe_events_timezone_choice($selected_zone, $locale = \null)
    {
    }
    /**
     * Checks whether the specified event ends on date or not.
     *
     * The method is aware of timezone settings and will mark an event as ending on a date depending on that.
     * E.g. an America/Los_Angeles, 2019-04-10, 2pm to 7pm event ends on the same day if using the
     * America/Los_Angeles timezone but ends on the following day (4am of 2019-04-11) in the Paris timezone.
     * The method id day based, hours and minutes, if provided in the date, are not considered.
     *
     * @since 4.9
     *
     * @param WP_Post|int $event The event post object; the `EventEndDate` property must be set.
     * @param mixed      $date  The date to compare the event end date with; it can be an object, string or timestamp.
     *
     * @return bool Whether the specified date is the last day of the event, timezone-wise, or not.
     */
    function tribe_event_ends_on($event, $date)
    {
    }
    /**
     * display the events slug description
     *
     * @return string, the string to display
     */
    function tribe_display_current_events_slug()
    {
    }
    /**
     * display the event single slug description
     *
     * @return string, the string to display
     */
    function tribe_display_current_single_event_slug()
    {
    }
    /**
     * display the iCal description
     *
     * @return string, the string to display
     */
    function tribe_display_current_ical_link()
    {
    }
    /**
     * Conditional tag to check if current page is an event category page
     *
     * @return bool
     **/
    function tribe_is_event_category()
    {
    }
    /**
     * Conditional tag to check if current page is an event venue page
     *
     * @return bool
     **/
    function tribe_is_event_venue()
    {
    }
    /**
     * Conditional tag to check if current page is an event organizer page
     *
     * @return bool
     **/
    function tribe_is_event_organizer()
    {
    }
    /**
     * Conditional tag to check if current page is displaying event query
     *
     * @return bool
     **/
    function tribe_is_event_query()
    {
    }
    /**
     * Tests if the current page is the My Events page
     *
     * @return bool whether it is the My Events page.
     * @since 1.0.1
     */
    function tribe_is_community_my_events_page()
    {
    }
    /**
     * Tests if the current page is the Edit Event page
     *
     * @return bool whether it is the Edit Event page.
     * @author Paul Hughes
     * @since 1.0.1
     */
    function tribe_is_community_edit_event_page()
    {
    }
    /**
     * iCal Link (Single)
     *
     * Returns an ical feed for a single event. Must be used in the loop.
     *
     * @return string URL for ical for single event.
     */
    function tribe_get_single_ical_link()
    {
    }
    /**
     * iCal Link
     *
     * Returns a sitewide "Export Events" iCal link.
     *
     * @return string URL for ical dump.
     */
    function tribe_get_ical_link()
    {
    }
    /**
     * Google Calendar Link
     *
     * Returns an "Add to Google Calendar" link for a single event.
     *
     * @param int $postId (optional) Function must be used in the loop if empty.
     *
     * @return string URL for Google Calendar.
     */
    function tribe_get_gcal_link($postId = \null)
    {
    }
    /**
     * Instantiate the template class, preparing a view file for use. If no name is passed, defaults to the class for the current view
     *
     * @param bool|string $class Classname you want to instantiate
     *
     * @uses Tribe__Events__Templates::instantiate_template_class()
     **/
    function tribe_initialize_view($class = \false)
    {
    }
    /**
     * Includes a view file, runs hooks around the view
     *
     * @param bool|string $view View slug
     *
     **/
    function tribe_get_view($view = \false)
    {
    }
    /**
     * Get Event Label Singular.
     * Returns the singular version of the Event Label.
     *
     * Note: the output of this function is not escaped.
     * You should escape it wherever you use it!
     *
     * @since 3.10
     * @since5.1.6 remove escaping.
     *
     * @return string The singular version of the Event Label.
     */
    function tribe_get_event_label_singular()
    {
    }
    /**
     * Get Event Label Singular lowercase.
     * Returns the lowercase singular version of the Event Label.
     *
     * Note: the output of this function is not escaped.
     * You should escape it wherever you use it!
     *
     * @since 4.1.1
     * @since5.1.6 remove escaping.
     *
     * @return string The lowercase singular version of the Event Label.
     */
    function tribe_get_event_label_singular_lowercase()
    {
    }
    /**
     * Get Event Label Plural.
     * Returns the plural version of the Event Label.
     *
     * Note: the output of this function is not escaped.
     * You should escape it wherever you use it!
     *
     * @since 3.10
     * @since5.1.6 remove escaping.
     *
     * @return string The plural version of the Event Label.
     */
    function tribe_get_event_label_plural()
    {
    }
    /**
     * Get Event Label Plural lowercase.
     * Returns the plural version of the Event Label.
     *
     * Note: the output of this function is not escaped.
     * You should escape it wherever you use it!
     *
     * @since 4.1.1
     * @since5.1.6 remove escaping.
     *
     * @return string The lowercase plural version of the Event Label.
     */
    function tribe_get_event_label_plural_lowercase()
    {
    }
    /**
     * Includes a template part, similar to the WP get template part, but looks
     * in the correct directories for Tribe Events templates
     *
     * @param string      $slug
     * @param null|string $name
     * @param array       $data optional array of vars to inject into the template part
     *
     * @uses Tribe__Templates::getTemplateHierarchy
     **/
    function tribe_get_template_part($slug, $name = \null, array $data = \null)
    {
    }
    /**
     * Check if the current request is for a tribe view via ajax
     *
     * @category Events
     * @param bool $view
     * @return bool
     */
    function tribe_is_ajax_view_request($view = \false)
    {
    }
    /**
     * Event Type Test
     *
     * Checks type of $postId to determine if it is an Event
     *
     * @category Events
     * @param int $postId (optional)
     *
     * @return bool true if this post is an Event post type
     */
    function tribe_is_event($postId = \null)
    {
    }
    /**
     * Get Event
     *
     * Queries the events using WordPress get_posts() by setting the post type and sorting by event date.
     *
     * @category Events
     *
     * @link http://codex.wordpress.org/Template_Tags/get_posts
     * @link http://codex.wordpress.org/Function_Reference/get_post
     *
     * @uses get_posts()
     *
     * @param array $args {
     *      Optional. Array of Query parameters.
     *
     *      @type string    $start_date      Minimum start date of the Event.
     *      @type string    $end_date        Maximum end date of the Event.
     *      @type string    $eventDate       A specific Event date for the Query.
     *      @type bool      $hide_upcoming   Hide events that are not on eventDate, internal usage
     *      @type int       $venue           Select events from a specific Venue
     *      @type int       $organizer       Select events from a specific Organizer
     *      @type string    $eventDisplay    How to display the Events, internal usage
     *
     *      @see  get_posts()  for more params
     * }
     *
     * @param bool $full Whether to return an array of event posts (default) or the query object
     *                   to fetch them.
     *
     * @return array|WP_Query A list of event posts matching the query arguments or a WP_Query instance
     *                        if the `$full` argument is set to `true`.
     */
    function tribe_get_events($args = [], $full = \false)
    {
    }
    /**
     * Returns the current event post object (if there is one) or else null.
     *
     * Optionally the post object or ID of an event can be passed in and,
     * again, the event post object will be returned if possible.
     *
     * @category Events
     * @param $event
     * @return null|WP_Post
     */
    function tribe_events_get_event($event = \null)
    {
    }
    /**
     * All Day Event Test
     *
     * Returns true if the event is an all day event
     *
     * @category Events
     * @param int $postId (optional)
     *
     * @return bool
     */
    function tribe_event_is_all_day($postId = \null)
    {
    }
    /**
     * Multi-day Event Test
     *
     * Returns true if the event spans multiple days
     *
     * @category Events
     * @param int $postId (optional)
     *
     * @return bool true if event spans multiple days
     */
    function tribe_event_is_multiday($postId = \null)
    {
    }
    /**
     * Detect if an Event is Past
     *
     * Returns true if the current time is past the event end time
     *
     * @param null $event
     *
     * @return bool
     */
    function tribe_is_past_event($event = \null)
    {
    }
    /**
     * Event Category ID's
     *
     * Display the event category ID as a class for events wrapper
     *
     * @category Events
     * @uses wp_get_object_terms()
     */
    function tribe_get_event_cat_ids($post_id = 0)
    {
    }
    /**
     * Event Category slugs
     *
     * Display the event category ID as a class for events wrapper
     *
     * @category Events
     * @uses wp_get_object_terms()
     */
    function tribe_get_event_cat_slugs($post_id = 0)
    {
    }
    /**
     * Single event taxonomy terms
     *
     * Get the term list by taxonomy (default categories) for a single event
     *
     * @category Events
     * @param  int   $post_id
     * @param  array $args
     *
     * @return string HTML string of taxonomy terms
     */
    function tribe_get_event_taxonomy($post_id = \null, $args = [])
    {
    }
    /**
     * Event Categories (Display)
     *
     * Display the event categories with display param
     *
     * @category Events
     * @uses     tribe_get_event_taxonomy()
     * @replaces tribe_meta_event_cats()
     *
     * @param int   $post_id
     * @param array $args
     *
     * @return string $html (echo if provided in $args)
     */
    function tribe_get_event_categories($post_id = \null, $args = [])
    {
    }
    /**
     * Event Tags (Display)
     *
     * Display the event tags
     *
     * @category Events
     * @param null|string $label
     * @param string      $separator
     * @param bool        $echo
     *
     * @return array
     * @uses the_terms()
     */
    function tribe_meta_event_tags($label = \null, $separator = ', ', $echo = \true)
    {
    }
    /**
     * Event Post Meta
     *
     * Get event post meta.
     *
     * @category Events
     * @param int|null    $postId (optional)
     * @param string|bool $meta   name of the meta_key
     * @param bool        $single determines if the results should be a single item or an array of items.
     *
     * @return mixed meta value(s)
     */
    function tribe_get_event_meta($postId = \null, $meta = \false, $single = \true)
    {
    }
    /**
     * Event Category Name
     *
     * Return the current event category name based the url.
     *
     * @category Events
     * @return string Name of the Event Category
     */
    function tribe_meta_event_category_name()
    {
    }
    /**
     * Current Template
     *
     * Get the current page template that we are on
     *
     * @category Events
     * @return string Page template
     */
    function tribe_get_current_template()
    {
    }
    /**
     * Venue Type Test
     *
     * Checks type of $postId to determine if it is a Venue
     *
     * @category Venues
     * @param int $postId (optional)
     *
     * @return bool True if post type id Venue
     */
    function tribe_is_venue($postId = \null)
    {
    }
    /**
     * Organizer Type Test
     *
     * Checks type of $postId to determine if it is a Organizer
     *
     * @category Organizers
     * @param int $postId (optional)
     *
     * @return bool True if post type id Venue
     */
    function tribe_is_organizer($postId = \null)
    {
    }
    /**
     * HTML Before Event (Display)
     *
     * Display HTML to output before the event template
     *
     * @category Events
     */
    function tribe_events_before_html()
    {
    }
    /**
     * HTML After Event (Display)
     *
     * Display HTML to output after the event template
     *
     * @category Events
     */
    function tribe_events_after_html()
    {
    }
    /**
     * Prints out or returns classes on an event wrapper
     *
     * @category Events
     * @param $event |0 post id or object
     * @param $echo  |true
     *
     **/
    function tribe_events_event_classes($event = 0, $echo = \true)
    {
    }
    /**
     * Prints out data attributes used in the template header tags
     *
     * @category Events
     * @param string|null $current_view
     *
     **/
    function tribe_events_the_header_attributes($current_view = \null)
    {
    }
    /**
     * Return an array with the days of the week, numbered with respect to the start_of_week WP option
     *
     * @category Events
     * @param string $format the display format for the days of the week
     *
     * @return array Days of the week.
     **/
    function tribe_events_get_days_of_week($format = \null)
    {
    }
    /**
     * Display Cost Field
     *
     * Conditional tag to determine if the cost field should be shown in the admin editors.
     *
     * @category Cost
     * @return bool
     */
    function tribe_events_admin_show_cost_field()
    {
    }
    /**
     * Get an event's cost
     *
     * @category Cost
     * @param null|int $post_id             (optional)
     * @param bool     $with_currency_symbol Include the currency symbol
     *
     * @return string Cost of the event.
     */
    function tribe_get_cost($post_id = \null, $with_currency_symbol = \false)
    {
    }
    /**
     * Returns the event cost complete with currency symbol.
     *
     * Essentially an alias of tribe_get_cost(), as if called with the $withCurrencySymbol
     * argument set to true. Useful for callbacks.
     *
     * @category Cost
     * @param null $postId
     *
     * @return mixed|void
     */
    function tribe_get_formatted_cost($postId = \null)
    {
    }
    /**
     * Get the minimum cost of all events.
     *
     * @category Cost
     * @return int the minimum cost.
     */
    function tribe_get_minimum_cost()
    {
    }
    /**
     * Get the maximum cost of all events.
     *
     * @category Cost
     * @return int the maximum cost.
     */
    function tribe_get_maximum_cost()
    {
    }
    /**
     * Indicates if there events without a specific cost (as distinct from
     * free events).
     *
     * @return bool if uncosted events exist
     */
    function tribe_has_uncosted_events()
    {
    }
    /**
     * Maps the cost array to make finding the minimum and maximum costs possible.
     *
     * @category Cost
     * @param array $costs
     *
     * @return array $costs
     */
    function tribe_map_cost_array_callback($costs)
    {
    }
    /**
     * Event in Category Conditional
     *
     * Returns true if the event is in the specified category slug
     *
     * @category Events
     * @param string $event_cat_slug
     * @param int    $event_id
     *
     * @return bool
     */
    function tribe_event_in_category($event_cat_slug, $event_id = \null)
    {
    }
    /**
     * Placeholder function that is used for ticketing plugins meant to be filtered by such plugins
     *
     * @todo possible candidate for deprecation - confirm if still required by other plugins
     * @category Tickets
     */
    function tribe_get_ticket_form()
    {
    }
    /**
     * Return the featured image for an event (within the loop automatically will get event ID).
     *
     * Where possible, the image will be returned as a well formed <img> tag contained in a link
     * element and wrapped in a div used for targetting featured images from stylesheet. By setting
     * the two final and optional parameters to false, however, it is possible to retrieve only
     * the image URL itself.
     *
     * @category Events
     *
     * @param int    $post_id
     * @param string $size
     * @param bool   $link
     * @param bool   $wrapper
     *
     * @return string
     */
    function tribe_event_featured_image($post_id = \null, $size = 'full', $link = \true, $wrapper = \true)
    {
    }
    /**
     * Return the details of the start/end date/time.
     *
     * The highest level means of customizing this function's output is simply to adjust the date format settings under
     * Events > Settings > Display, and WordPress time formats (via the General Settings admin screen).
     * Beyond that, however, there are two filters which can be used to exercise further control here.
     *
     * The first is 'tribe_events_event_schedule_details_formatting' which allows an array of format settings to be
     * altered - it's basic make-up is as a simple set of key:value pairs as follows.
     *
     * "show_end_time": for single day events only (not including all day events) it may not always be desirable to
     *     include the end time. In that situation, this setting can be set to false and the end time will not be
     *     displayed.
     *
     * "time": if it is undesirable to show times and only dates should be displayed then this setting can be set to
     *     false. If it is false it will by extension cause 'show_end_time' to be false.
     *
     * The resulting string can also be caught and manipulated, or completely overridden, using the
     * 'tribe_events_event_schedule_details' filter, should none of the above settings be sufficient.
     *
     * @category Events
     * @todo [BTRIA-644]: Use tribe_get_datetime_format() and related functions if possible.
     *
     * @param int|null $event The event post ID, or `null` to use the global event.
     * @param string $before A string to prepend before the schedule details.
     * @param string $after A string to append after the schedule details.
     * @param bool $html Whether to use HTML elements in the output string or not; defaults to `true`.
     *
     * @return string The human-readable event schedule details formatted according to the current settings.
     */
    function tribe_events_event_schedule_details($event = \null, $before = '', $after = '', $html = \true)
    {
    }
    /**
     * Return the short details of the start/end date/time.
     *
     * @see tribe_events_event_schedule_details() for the format of the schedule details.
     *
     * @param int|null $event  The event post ID, or `null` to use the global event.
     * @param string   $before A string to prepend before the schedule details.
     * @param string   $after  A string to append after the schedule details.
     * @param bool     $html   Whether to use HTML elements in the output string or not; defaults to `true`.
     *
     * @return string The human-readable event short schedule details formatted according to the current settings.
     */
    function tribe_events_event_short_schedule_details($event = \null, $before = '', $after = '', $html = \true)
    {
    }
    /**
     * Returns json for javascript templating functions throughout the plugin.
     *
     * @category Events
     *
     * @param $event
     * @param $additional
     *
     * @return string
     */
    function tribe_events_template_data($event = \null, array $additional = \null)
    {
    }
    /**
     * Include the List view
     *
     * Accepts an array of query arguments, retrieves them, and returns the html for those events in list view
     *
     * Optional inline example:
     * < code >
     * <?php
     * echo myfunction();
     * ?>
     * </ code >
     *
     * @category Events
     *
     * @param array $args       Args to be passed to Tribe__Events__Query::getEvents()
     * @param bool  $initialize Whether the list view template class needs to be included and initialized
     *
     * @return string
     **/
    function tribe_include_view_list($args = \null, $initialize = \true)
    {
    }
    /**
     * Get a list of the views that are enabled
     *
     * @category Events
     *
     * @param $deprecated deprecated
     *
     * @return array
     * @see tribeEnableViews option
     * @todo remove deprecated param in 4.0
     **/
    function tribe_events_enabled_views($deprecated = \null)
    {
    }
    /**
     * Get a list of the views that are disabled
     *
     * @category Events
     *
     * @return array
     * @deprecated
     * @todo remove in 4.0
     **/
    function tribe_events_disabled_views()
    {
    }
    /**
     * Display the Events Calendar promo banner
     *
     * @category Events
     *
     * @param bool $echo Whether or not to echo the banner, if false, it's returned
     *
     * @return string
     **/
    function tribe_events_promo_banner($echo = \true)
    {
    }
    /**
     * Return the filters registered in the tribe bar
     *
     * @category Events
     *
     * @return array
     **/
    function tribe_events_get_filters()
    {
    }
    /**
     * Return the views registered in the tribe bar
     *
     * @category Events
     *
     * @return array
     **/
    function tribe_events_get_views()
    {
    }
    /**
     * Returns the URL for use in the tribe bar form's action attribute.
     *
     * @return string URL for current tribe bar form action.
     */
    function tribe_events_get_current_filter_url()
    {
    }
    /**
     * Get and increment tab index in form fields
     *
     */
    function tribe_events_get_tab_index()
    {
    }
    /**
     * Echo and increment tab index in form fields
     *
     */
    function tribe_events_tab_index()
    {
    }
    /**
     * Check if a particular view is enabled
     *
     * @category Events
     *
     * @param string $view Name of view to check, should match what's in Tribe__Events__Main->displaying when on that view
     *
     * @return bool
     **/
    function tribe_events_is_view_enabled($view)
    {
    }
    /**
     * A Excerpt method used across the board on our Events Plugin Suite.
     *
     * By default it removes all shortcodes, the reason for this is that shortcodes added by other plugins/themes
     * may not have been registered by the time our ajax responses are generated. To avoid leaving unparsed
     * shortcodes in our excerpts then we strip out anything that looks like one.
     *
     * @category Events
     *
     * @param WP_Post|int|null $post The Post Object|ID, if null defaults to `get_the_ID()`
     * @param array $allowed_html The wp_kses compatible array
     * @param boolean $skip_postdata_manipulation Optional. Defaults to false. When true, the resetting of global $post variable is disabled. (Useful for some contexts like month view.)
     *
     * @return string|null Will return null on Bad Post Instances
     */
    function tribe_events_get_the_excerpt($post = \null, $allowed_html = \null, $skip_postdata_manipulation = \false)
    {
    }
    /**
     * Returns the latest known event end date, which can be expected to be a string
     * in MySQL datetime format (unless some other specific format is provided).
     *
     * If this is impossible to determine it will return boolean false.
     *
     * @category Events
     *
     * @param string $format
     *
     * @return mixed bool|string
     */
    function tribe_events_latest_date($format = \Tribe__Date_Utils::DBDATETIMEFORMAT)
    {
    }
    /**
     * Returns the earliest known event start date, which can be expected to be a string
     * in MySQL datetime format (unless some other specific format is provided).
     *
     * If this is impossible to determine it will return boolean false.
     *
     * @category Events
     *
     * @param string $format
     *
     * @return mixed bool|string
     */
    function tribe_events_earliest_date($format = \Tribe__Date_Utils::DBDATETIMEFORMAT)
    {
    }
    /**
     * Get the default value for a field
     *
     * @param string $field
     * @return mixed
     */
    function tribe_get_default_value($field)
    {
    }
    /**
     * Gets the render context of the given query
     *
     * @param WP_Query $query Query object
     * @return string
     */
    function tribe_get_render_context($query = \null)
    {
    }
    /**
     * Returns or echoes a url to a file in the Events Calendar plugin resources directory
     *
     * @category Events
     * @param string $resource the filename of the resource
     * @param bool   $echo     whether or not to echo the url
     * @param string $root_dir directory to hunt for resource files (src or common)
     *
     * @return string
     **/
    function tribe_events_resource_url($resource, $echo = \false, $root_dir = 'src')
    {
    }
    /**
     * Utility function to compile separated lists.
     *
     * @param string $body
     * @param string $separator
     * @param string $field
     *
     * @return string
     */
    function tribe_separated_field($body, $separator, $field)
    {
    }
    /**
     * Tests if we are on the site homepage and if it is set to display the main events page.
     *
     * As WordPress front page it might be different from is_home, if we have a front page on the reading options and
     * if the User is on that page, this function will return true otherwise will return false. So either if the User has
     * the frontpage set on the reading options and the User is visiting this page.
     *
     * Another consideration about this is it might behave as a WordPress function which means after any Ajax action is
     * fired the result of call this function via Ajax might not be the expected result so ideally can be used to test
     * if you are on the front page on first load of the page only.
     *
     * @since 4.6.9
     *
     * @return bool
     */
    function tribe_is_events_front_page()
    {
    }
    /**
     * Test if we are on the home of events either if is set to frontpage or the default /events page.
     *
     * Utility function to test if we are on the home of events, it makes a test in cases when the page is set to be on
     * the frontpage of the site and if the User is on that page is on the homepage or if the User is on the events page
     * where the eventDisplay is set to default.
     *
     * Also consider this might not work as expected inside of Ajax Calls as this one is fired on initial loading of the
     * page so be aware of unexpected results via Ajax calls.
     *
     * @since 4.6.9
     *
     * @return bool
     */
    function tribe_is_events_home()
    {
    }
    /**
     * New Day Test
     *
     * Called inside of the loop, returns true if the current post's meta_value (EventStartDate)
     * is different than the previous post. Will always return true for the first event in the loop.
     *
     * @return bool
     */
    function tribe_is_new_event_day()
    {
    }
    /**
     * Past Loop View Test
     *
     * Returns true if the query is set for past events, false otherwise
     *
     * @return bool
     */
    function tribe_is_past()
    {
    }
    /**
     * Upcoming Loop View Test
     *
     * Returns true if the query is set for upcoming events, false otherwise
     *
     * @return bool
     */
    function tribe_is_upcoming()
    {
    }
    /**
     * Show All Test
     *
     * Returns true if the query is set to show all events, false otherwise
     *
     * @return bool
     * @todo move to ECP
     */
    function tribe_is_showing_all()
    {
    }
    /**
     * Date View Test
     *
     *  Check if current display is "bydate"
     *
     * @return bool
     */
    function tribe_is_by_date()
    {
    }
    /**
     * Event Title (Display)
     *
     * Display an event's title with pseudo-breadcrumb if on a category
     *
     * @param bool $depth include linked title
     */
    function tribe_events_title($depth = \true)
    {
    }
    /**
     * Event Title
     *
     * Return an event's title with pseudo-breadcrumb if on a category
     *
     * @param bool $depth include linked title
     *
     * @return string title
     * @todo move logic to template classes
     */
    function tribe_get_events_title($depth = \true)
    {
    }
    /**
     * Link to Upcoming Events
     *
     * Returns a link to the upcoming events in list view. Used in the loop view.
     *
     * @return string URL
     */
    function tribe_get_upcoming_link()
    {
    }
    /**
     * Are there any events previous to the current events in $wp_query
     *
     * @return bool
     */
    function tribe_has_previous_event()
    {
    }
    /**
     * Are there any events next (in the future) to the current events in $wp_query
     *
     * @return bool
     */
    function tribe_has_next_event()
    {
    }
    /**
     * Link to Past Events
     *
     * Returns a link to the previous events in list view. Used in the loop view.
     *
     * @return string URL
     */
    function tribe_get_past_link()
    {
    }
    /**
     * Determines if we are in the main Loop (home/archives/tags)
     *
     * @return bool
     */
    function tribe_is_in_main_loop()
    {
    }
    /**
     * Determines if we are in list view.
     *
     * @return bool
     */
    function tribe_is_list_view()
    {
    }
    /**
     * Used in list loop, displays the date headers between events in the loop when the month / year has changed
     *
     **/
    function tribe_events_list_the_date_headers()
    {
    }
    /**
     * Determine classes to apply to left side nav links
     *
     * @param $side
     */
    function tribe_left_navigation_classes()
    {
    }
    /**
     * Determine classes to apply to right side nav links
     *
     * @param $side
     */
    function tribe_right_navigation_classes()
    {
    }
    /**
     * Checks whether we're on a particular view
     *
     * @return bool
     **/
    function tribe_is_view($view = \false)
    {
    }
    /**
     * Builds and returns the correct event repository.
     *
     * @since 4.9
     *
     * @param string $repository The slug of the repository to build/return.
     *
     * @return Tribe__Repository__Interface An instance of the requested repository
     *                                      class.
     */
    function tribe_events($repository = 'default')
    {
    }
    /**
     * Builds and returns the correct organizer repository.
     *
     * @since 4.9
     *
     * @param string $repository The slug of the repository to build/return.
     *
     * @return Tribe__Repository__Interface An instance of the requested repository
     *                                      class.
     */
    function tribe_organizers($repository = 'default')
    {
    }
    /**
     * Builds and returns the correct venue repository.
     *
     * @since 4.9
     *
     * @param string $repository The slug of the repository to build/return.
     *
     * @return Tribe__Repository__Interface An instance of the requested repository
     *                                      class.
     */
    function tribe_venues($repository = 'default')
    {
    }
    /**** CALENDAR / GRID / MONTH VIEW DEPRECATED TAGS *****/
    /**
     * Calendar Grid (Display)
     *
     * Display the full size grid calendar table
     *
     * @deprecated
     * @uses load_template()
     */
    function tribe_calendar_grid()
    {
    }
    /**
     * Calendar Mini Grid (Display)
     *
     * Displays the mini grid calendar table (usually in a widget)
     *
     * @deprecated
     * @uses load_template()
     */
    function tribe_calendar_mini_grid()
    {
    }
    /**
     * Sort Events by Day
     *
     * Maps events to days of the month.
     *
     * @deprecated
     *
     * @param array  $results Array of events from tribe_get_events()
     * @param string $date
     *
     * @return array Days of the month with events as values
     */
    function tribe_sort_by_month($results, $date)
    {
    }
    /**
     * Month / Year Dropdown Selector (Display)
     *
     * Display the year & month dropdowns. JavaScript in the resources/events-admin.js file will autosubmit on the change event.
     *
     * @deprecated
     *
     * @param string      $prefix A prefix to add to the ID of the calendar elements.  This allows you to reuse the calendar on the same page.
     * @param string|null $date
     */
    function tribe_month_year_dropdowns($prefix = '', $date = \null)
    {
    }
    /**
     * Link to This Month
     *
     * Returns a link to the currently displayed month (if in "jump to month" mode)
     *
     * @deprecated
     * @return string URL
     */
    function tribe_get_this_month_link()
    {
    }
    /**
     * Current Month Date
     *
     * Returns a formatted date string of the currently displayed month (in "jump to month" mode)
     *
     * @deprecated
     * @return string Name of the displayed month.
     */
    function tribe_get_displayed_month()
    {
    }
    /**
     * @deprecated
     */
    function tribe_get_display_day_title($day, $monthView, $date)
    {
    }
    /**
     * @deprecated
     */
    function tribe_the_display_day($day, $monthView)
    {
    }
    /**
     * @deprecated
     */
    function tribe_get_display_day($day, $monthView)
    {
    }
    /**** GENERAL DEPRECATED TAGS *****/
    /**
     * tribe_get_object_property_from_array loop through an array of objects to retrieve a single property
     *
     * @deprecated
     *
     * @param array  $array_objects
     * @param string $property
     *
     * @return array
     */
    function tribe_get_object_property_from_array($array_objects = [], $property = \null)
    {
    }
    /**** WIDGET DEPRECATED TAGS *****/
    /**
     * @deprecated
     */
    function tribe_mini_display_day($day, $monthView)
    {
    }
    /**
     * Formatted Date
     *
     * Returns formatted date
     *
     * @category Events
     * @see http://php.net/manual/en/function.date.php
     *
     * @param string $date        String representing the datetime, assumed to be UTC (relevant if timezone conversion is used)
     * @param bool   $displayTime If true shows date and time, if false only shows date
     * @param string $dateFormat  Allows date and time formating using standard php syntax
     *
     * @return string
     */
    function tribe_event_format_date($date, $displayTime = \true, $dateFormat = '')
    {
    }
    /**
     * Returns formatted date for the official beginning of the day according to the Multi-day cutoff time option
     *
     * @category Events
     * @see http://php.net/manual/en/function.date.php
     *
     * @param string $date   The date to find the beginning of the day, defaults to today
     * @param string $format Allows date and time formating using standard php syntax
     *
     * @return string
     */
    function tribe_event_beginning_of_day($date = \null, $format = 'Y-m-d H:i:s')
    {
    }
    /**
     * Returns formatted date for the official end of the day according to the Multi-day cutoff time option
     *
     * @category Events
     * @see http://php.net/manual/en/function.date.php
     *
     * @param string $date   The date to find the end of the day, defaults to today
     * @param string $format Allows date and time formating using standard php syntax
     *
     * @return string
     */
    function tribe_event_end_of_day($date = \null, $format = 'Y-m-d H:i:s')
    {
    }
    /**
     * Generates html for any notices that have been queued on the current view
     *
     * @category Events
     *
     * @param bool $echo Whether or not to echo the notices html
     *
     * @return string
     * @see Tribe__Notices::get()
     **/
    function tribe_events_the_notices($echo = \true)
    {
    }
    /**
     * Verifies that the current install of The Events Calendar is not
     * a pre-existing setup, and trigger the activation of View V2.
     *
     * @since  4.9.13
     *
     * @return  bool  When to activate the View V2 or not.
     */
    function tribe_events_is_new_install()
    {
    }
    /**
     * Utility functions dealing with arrays
     */
    /**
     * Drop-in replacement for array_unique(), designed to operate on an array of arrays
     * where each inner array is populated with strings (or types that can be stringified
     * while essentially keeping their unique value).
     *
     * @param array $original array_of_arrays
     *
     * @return array
     */
    function tribe_array_unique(array $original)
    {
    }
    /**
     * Utility functions for assessing the values of various post type labels.
     */
    /**
     * A simple function for knowing if the "Event"/"Events" label has been changed.
     *
     * @since 4.6.3
     *
     * @return bool
     */
    function tribe_is_event_label_customized()
    {
    }
    /**
     * A simple function for knowing if the "Venue"/"Venues" label has been changed.
     *
     * @since 4.6.3
     *
     * @return bool
     */
    function tribe_is_venue_label_customized()
    {
    }
    /**
     * A simple function for knowing if the "Organizer"/"Organizers" label has been changed.
     *
     * @since 4.6.3
     *
     * @return bool
     */
    function tribe_is_organizer_label_customized()
    {
    }
    /**
     * Create a Venue
     *
     * $args accepts all the args that can be passed to wp_insert_post().
     * In addition to that, the following args can be passed specifically
     * for the process of creating a Venue:
     *
     * - Venue string - Title of the Venue. (required)
     * - Country string - Country code for the Venue country.
     * - Address string - Street address of the Venue.
     * - City string - City of the Venue.
     * - State string - Two letter state abbreviation.
     * - Province string - Province of the Venue.
     * - Zip string - Zip code of the Venue.
     * - Phone string - Phone number for the Venue.
     *
     * @param array $args Elements that make up post to insert.
     *
     * @return int ID of the Venue that was created. False if insert failed.
     * @link     http://codex.wordpress.org/Function_Reference/wp_insert_post
     * @see      wp_insert_post()
     * @category Venues
     */
    function tribe_create_venue($args)
    {
    }
    /**
     * Update a Venue
     *
     * @param int   $postId ID of the Venue to be modified.
     * @param array $args   Args for updating the post. See {@link tribe_create_venue()} for more info.
     *
     * @return int ID of the Venue that was created. False if update failed.
     * @link     http://codex.wordpress.org/Function_Reference/wp_update_post
     * @see      wp_update_post()
     * @see      tribe_create_venue()
     * @category Venues
     */
    function tribe_update_venue($postId, $args)
    {
    }
    /**
     * Delete a Venue
     *
     * @param int  $postId       ID of the Venue to be deleted.
     * @param bool $force_delete Whether to bypass trash and force deletion. Defaults to false.
     *
     * @return bool false if delete failed.
     * @link     http://codex.wordpress.org/Function_Reference/wp_delete_post
     * @see      wp_delete_post()
     * @category Venues
     */
    function tribe_delete_venue($postId, $force_delete = \false)
    {
    }
    /**
     * Create's an Event.
     *
     * Note: If ONLY the 'VenueID'/'OrganizerID' value is set in the 'Venue'/'Organizer' array,
     * then the specified Venue/Organizer will be associated with this Event without attempting
     * to edit the Venue/Organizer. If NO 'VenueID'/'OrganizerID' is passed, but other Venue/Organizer
     * data is passed, then a new Venue/Organizer will be created.
     *
     * Also note that this function can be used only for the creation of events, supplying
     * a post_type argument therefore is superfluous as it will be reset to the events post
     * type in any case.
     *
     * @category Events
     *
     * @link     http://codex.wordpress.org/Function_Reference/wp_insert_post
     *
     * @see      wp_insert_post()
     * @see      tribe_create_venue()
     * @see      tribe_create_organizer()
     *
     * @param array $args {
     *     An array of elements that make up a post to update or insert. Accepts anything from {@see wp_insert_post()}.
     *
     *     @type int    $ID                      The post ID. If equal to something other than 0,
     *                                           the post with that ID will be updated. Default 0.
     *     @type int    $post_author             The ID of the user who added the post. Default is
     *                                           the current user ID.
     *     @type string $post_date               The date of the post. Default is the current time.
     *     @type string $post_date_gmt           The date of the post in the GMT timezone. Default is
     *                                           the value of `$post_date`.
     *     @type mixed  $post_content            The post content. Default empty.
     *     @type string $post_content_filtered   The filtered post content. Default empty.
     *     @type string $post_title              The post title. Default empty.
     *     @type string $post_excerpt            The post excerpt. Default empty.
     *     @type string $post_status             The post status. Default 'draft'.
     *     @type string $post_type               The post type. Default 'post'.
     *     @type string $comment_status          Whether the post can accept comments. Accepts 'open' or 'closed'.
     *                                           Default is the value of 'default_comment_status' option.
     *     @type string $ping_status             Whether the post can accept pings. Accepts 'open' or 'closed'.
     *                                           Default is the value of 'default_ping_status' option.
     *     @type string $post_password           The password to access the post. Default empty.
     *     @type string $post_name               The post name. Default is the sanitized post title
     *                                           when creating a new post.
     *     @type string $to_ping                 Space or carriage return-separated list of URLs to ping.
     *                                           Default empty.
     *     @type string $pinged                  Space or carriage return-separated list of URLs that have
     *                                           been pinged. Default empty.
     *     @type string $post_modified           The date when the post was last modified. Default is
     *                                           the current time.
     *     @type string $post_modified_gmt       The date when the post was last modified in the GMT
     *                                           timezone. Default is the current time.
     *     @type int    $post_parent             Set this for the post it belongs to, if any. Default 0.
     *     @type int    $menu_order              The order the post should be displayed in. Default 0.
     *     @type string $post_mime_type          The mime type of the post. Default empty.
     *     @type string $guid                    Global Unique ID for referencing the post. Default empty.
     *     @type array  $post_category           Array of category IDs.
     *                                           Defaults to value of the 'default_category' option.
     *     @type array  $tags_input              Array of tag names, slugs, or IDs. Default empty.
     *     @type array  $tax_input               Array of taxonomy terms keyed by their taxonomy name. Default empty.
     *     @type array  $meta_input              Array of post meta values keyed by their post meta key. Default empty.
     *     @type string $EventStartDate          Start date of event (required).
     *     @type string $EventEndDate            End date of event (required).
     *     @type bool   $EventAllDay             Set to true if event has no start / end time and should run all day.
     *     @type string $EventStartHour          Event start hour (01-12 if `EventStartMeridian` is also passed, else 00-23).
     *     @type string $EventStartMinute        Event start minute (00-59).
     *     @type string $EventStartMeridian      Event start meridian (am or pm).
     *     @type string $EventEndHour            Event end hour (01-12 if `EventEndMeridian` is also passed, else 00-23).
     *     @type string $EventEndMinute          Event end minute (00-59).
     *     @type string $EventEndMeridian        Event end meridian (am or pm).
     *     @type bool   $EventHideFromUpcoming   Set to true to hide this Event from the upcoming list view.
     *     @type bool   $EventShowMapLink        Set to true to display a link to the map in the Event view.
     *     @type string $EventShowMap            Set to true to embed the map in the Event view.
     *     @type string $EventCost               Default cost of the Event.
     *     @type string $EventURL                Link to the Event Website or Third-Party page.
     *     @type string $FeaturedImage           URL or ID of a featured image.
     *     @type string $Venue                   Array of data to create or update an Venue to be associated with the Event {@link tribe_create_venue}.
     *     @type string $Organizer               Array of data to create or update an Organizer to be associated with the Event {@link tribe_create_organizer}.
     *     @type string $_ecp_custom_[ID]        Pro Custom fields (Events Calendar Pro only).
     * }
     *
     * @return int|bool ID of the event that was created. False if insert failed.
     */
    function tribe_create_event($args)
    {
    }
    /**
     * Update an Event.
     *
     * @category Events
     *
     * @link     http://codex.wordpress.org/Function_Reference/wp_update_post
     *
     * @see      wp_update_post()
     * @see      tribe_create_event()
     *
     * @param int|bool   $postId  ID of the event to be modified.
     * @param array      $args    Args for updating the post. See {@link tribe_create_event()} for more info.
     *
     * @return int|bool ID of the event that was created. False if update failed.
     */
    function tribe_update_event($postId, $args)
    {
    }
    /**
     * Delete an Event.
     *
     * @link     http://codex.wordpress.org/Function_Reference/wp_delete_post
     * @see      wp_delete_post()
     * @category Events
     *
     * @param int  $post_id      Post ID of the Event.
     * @param bool $force_delete Whether to bypass trash and force deletion. Defaults to false.
     *
     * @return bool false if delete failed.
     */
    function tribe_delete_event($post_id, $force_delete = \false)
    {
    }
    /**
     * Returns TEC REST API URL prefix.
     *
     * @return string TEC REST API URL prefix; default `wp-json/tec/v1`.
     */
    function tribe_events_rest_url_prefix()
    {
    }
    /**
     * Retrieves the URL to a TEC REST endpoint on a site.
     *
     * Note: The returned URL is NOT escaped.
     *
     * @global WP_Rewrite $wp_rewrite
     *
     * @param string      $path    Optional. TEC REST route. Default '/'.
     * @param string      $scheme  Optional. Sanitization scheme. Default 'rest'.
     * @param int         $blog_id Optional. Blog ID. Default of null returns URL for current blog.
     *
     * @return string Full URL to the endpoint.
     */
    function tribe_events_rest_url($path = '/', $scheme = 'rest', $blog_id = \null)
    {
    }
    /**
     * Create an Organizer
     *
     * $args accepts all the args that can be passed to wp_insert_post().
     * In addition to that, the following args can be passed specifically
     * for the process of creating an Organizer:
     *
     * - Organizer string - Title of the Organizer. (required)
     * - Email string - Email address of the Organizer.
     * - Website string - URL of the Organizer.
     * - Phone string - Phone number for the Organizer.
     *
     * @param array $args Elements that make up post to insert.
     *
     * @return int ID of the Organizer that was created. False if insert failed.
     * @link     http://codex.wordpress.org/Function_Reference/wp_insert_post
     * @see      wp_insert_post()
     * @category Organizers
     */
    function tribe_create_organizer($args)
    {
    }
    /**
     * Update an Organizer
     *
     * @param int   $postId ID of the Organizer to be modified.
     * @param array $args   Args for updating the post. See {@link tribe_create_organizer()} for more info.
     *
     * @return int ID of the Organizer that was created. False if update failed.
     * @link     http://codex.wordpress.org/Function_Reference/wp_update_post
     * @see      wp_update_post()
     * @see      tribe_create_organizer()
     * @category Organizers
     */
    function tribe_update_organizer($postId, $args)
    {
    }
    /**
     * Delete an Organizer
     *
     * @param int  $postId       ID of the Organizer to be deleted.
     * @param bool $force_delete Whether to bypass trash and force deletion. Defaults to false.
     *
     * @return bool false if delete failed.
     * @link     http://codex.wordpress.org/Function_Reference/wp_delete_post
     * @see      wp_delete_post()
     * @category Organizers
     */
    function tribe_delete_organizer($postId, $force_delete = \false)
    {
    }
    /**
     * Registers a post type as a linked post type for events
     *
     * @since 4.2
     *
     * @param string $post_type Post type slug
     * @param array $args Arguments for the linked post type - note: gets merged with get_post_type_object data
     *
     * @return boolean
     */
    function tribe_register_linked_post_type($post_type, $args = [])
    {
    }
    /**
     * Deregisters a post type as a linked post type for events
     *
     * @since 4.2
     *
     * @param string $post_type Post type slug
     *
     * @return boolean
     */
    function tribe_deregister_linked_post_type($post_type, $args = [])
    {
    }
    /**
     * Returns whether or not there are any linked posts for the given post id
     *
     * @since 4.2
     *
     * @param int $post_id Post ID of the object
     *
     * @return boolean
     */
    function tribe_has_linked_posts($post_id)
    {
    }
    /**
     * Returns all linked posts for the given post id
     *
     * Post collection is indexed by post type
     *
     * @since 4.2
     *
     * @param int $post_id Post ID of the object
     *
     * @return array
     */
    function tribe_get_linked_posts($post_id)
    {
    }
    /**
     * Returns whether or not there are linked posts of the specified post type
     *
     * @since 4.2
     *
     * @param int $post_id Post ID of the object
     * @param string $post_type Post type of linked posts to look for
     *
     * @return boolean
     */
    function tribe_has_linked_posts_by_post_type($post_id, $post_type)
    {
    }
    /**
     * Returns linked posts of the specified post type
     *
     * @since 4.2
     *
     * @param int $post_id Post ID of the object
     * @param string $post_type Post type of linked posts to look for
     *
     * @return array
     */
    function tribe_get_linked_posts_by_post_type($post_id, $post_type)
    {
    }
    /**
     * Returns the linked post types
     *
     * @since 4.2
     *
     * @return array
     */
    function tribe_get_linked_post_types()
    {
    }
    /**
     * Returns whether or not there are any linked post types
     *
     * @since 4.2
     *
     * @return boolean
     */
    function tribe_has_linked_post_types()
    {
    }
    /**
     * Returns whether or not the provided post type is a linked post type
     *
     * @since 4.2
     *
     * @param string $post_type Post type slug
     *
     * @return boolean
     */
    function tribe_is_linked_post_type($post_type)
    {
    }
    /**
     * Links two posts together
     *
     * @since 4.2
     *
     * @param int $target_post_id Post ID of post to add linked post to
     * @param int $subject_post_id Post ID of post to add as a linked post to the target
     *
     * @return boolean
     */
    function tribe_link_post($target_post_id, $subject_post_id)
    {
    }
    /**
     * Unlinks two posts from eachother
     *
     * @since 4.2
     *
     * @param int $target_post_id Post ID of post to remove linked post from
     * @param int $subject_post_id Post ID of post to remove as a linked post from the target
     */
    function tribe_unlink_post($target_post_id, $subject_post_id)
    {
    }
    /**
     * Returns the post type's form field container name
     *
     * @since 4.2
     *
     * @param string $linked_post_type Linked post type
     *
     * @return string
     */
    function tribe_get_linked_post_container($post_type)
    {
    }
    /**
     * Returns the post type's ID field name
     *
     * @since 4.2
     *
     * @param string $linked_post_type Linked post type
     *
     * @return string
     */
    function tribe_get_linked_post_id_field_index($post_type)
    {
    }
    /**
     * Returns the post type's name field
     *
     * @since 4.2
     *
     * @param string $linked_post_type Linked post type
     *
     * @return string
     */
    function tribe_get_linked_post_name_field_index($post_type)
    {
    }
    /**
     * Checks whether v2 of the Views is enabled or not.
     *
     * In order the function will check the `TRIBE_EVENTS_V2_VIEWS` constant,
     * the `TRIBE_EVENTS_V2_VIEWS` environment variable and, finally, the `Manager::$option_enabled` option.
     *
     * @since 4.9.2
     *
     * @return bool Whether v2 of the Views are enabled or not.
     */
    function tribe_events_views_v2_is_enabled()
    {
    }
    /**
     * Checks smart activation of the view v2, is not a function for verification of v2 is active or not.
     *
     * Current only being triggered on plugin activation hook.
     *
     * @since 4.9.13
     *
     * @return bool Wether we just activated the v2 on the database.
     */
    function tribe_events_views_v2_smart_activation()
    {
    }
    /**
     * Returns whether the Event Period repository should be used or not.
     *
     * @since 4.9.13
     *
     * @return bool whether the Event Period repository should be used or not.
     */
    function tribe_events_view_v2_use_period_repository()
    {
    }
    /**
     * Checks whether to disable V2 widgets.
     *
     * In order the function will check the `TRIBE_EVENTS_WIDGETS_V2_DISABLED` constant,
     * the `TRIBE_EVENTS_WIDGETS_V2_DISABLED` environment variable.
     *
     * Note the internal logic is inverted, as the name of the function is "...is_enabled"
     * while the names of the constant/env_var are "...DISABLED".
     *
     * @since 5.3.0
     *
     * @return bool Whether Widgets v2 should load.
     */
    function tribe_events_widgets_v2_is_enabled()
    {
    }
    /**
     * Checks whether to disable V2 Single Event styles overrides.
     *
     * In order the function will check the `TRIBE_EVENTS_SINGLE_VIEW_V2_DISABLED` constant,
     * the `TRIBE_EVENTS_SINGLE_VIEW_V2_DISABLED` environment variable.
     *
     * Note the internal logic is inverted, as the name of the function is "...is_enabled"
     * while the names of the constant/env_var are "...DISABLED".
     *
     * @since 5.5.0
     *
     * @return bool Whether Single Event v2 styles overrides should load.
     */
    function tribe_events_single_view_v2_is_enabled()
    {
    }
    /**
     * register a meta group
     *
     * @uses Tribe__Events__Meta_Factory::register()
     * @deprecated 4.3
     *
     * @param string $meta_group_id
     * @param array  $args
     *
     * @return bool $success
     */
    function tribe_register_meta_group($meta_group_id, $args = [])
    {
    }
    /**
     * register a meta item
     *
     * @uses Tribe__Events__Meta_Factory::register()
     * @deprecated 4.3
     *
     * @param int   $meta_id
     * @param array $args
     *
     * @return bool $success
     */
    function tribe_register_meta($meta_id, $args = [])
    {
    }
    /**
     * Get the meta group.
     *
     * @deprecated 4.3
     *
     * @param      $meta_group_id
     * @param bool $is_the_meta
     *
     * @return bool|mixed|void
     */
    function tribe_get_meta_group($meta_group_id, $is_the_meta = \false)
    {
    }
    /**
     * Get the meta.
     *
     * @deprecated 4.3
     *
     * @param      $meta_id
     * @param bool $is_the_meta
     *
     * @return bool|mixed|void
     */
    function tribe_get_meta($meta_id, $is_the_meta = \false)
    {
    }
    /**
     * Get the args for a meta object.
     *
     * @deprecated 4.3
     *
     * @param        $meta_id
     * @param        $arg_key
     * @param string $type
     *
     * @return bool
     */
    function tribe_get_meta_arg($meta_id, $arg_key, $type = 'meta')
    {
    }
    /**
     * Get the template part for the meta object.
     *
     * @deprecated 4.3
     *
     * @param        $meta_id
     * @param        $template_key
     * @param string $type
     *
     * @return bool
     */
    function tribe_get_meta_template_part($meta_id, $template_key, $type = 'meta')
    {
    }
    /**
     * Set the visibility of the meta object.
     *
     * @deprecated 4.3
     *
     * @param        $meta_id
     * @param bool   $status
     * @param string $type
     */
    function tribe_set_the_meta_visibility($meta_id, $status = \true, $type = 'meta')
    {
    }
    /**
     * Set the template for the meta object.
     *
     * @deprecated 4.3
     *
     * @param        $meta_id
     * @param array  $template
     * @param string $type
     *
     * @return bool
     */
    function tribe_set_the_meta_template($meta_id, $template = [], $type = 'meta')
    {
    }
    /**
     * Set the meta priority to manage positioning.
     *
     * @deprecated 4.3
     *
     * @param        $meta_id
     * @param int    $priority
     * @param string $type
     *
     * @return bool
     */
    function tribe_set_meta_priority($meta_id, $priority = 100, $type = 'meta')
    {
    }
    /**
     * Set meta value for meta object.
     *
     * @deprecated 4.3
     *
     * @param        $meta_id
     * @param        $value
     * @param string $value_type
     * @param string $type
     *
     * @return bool
     */
    function tribe_set_meta_value($meta_id, $value, $value_type = 'meta_value', $type = 'meta')
    {
    }
    /**
     * Set the meta label for the meta object.
     *
     * @deprecated 4.3
     *
     * @param        $meta_id
     * @param string $label
     * @param string $type
     *
     * @return bool
     */
    function tribe_set_meta_label($meta_id, $label = '', $type = 'meta')
    {
    }
    /**
     * Get the event meta
     *
     * @deprecated 4.3
     *
     * @return mixed|void
     */
    function tribe_get_the_event_meta()
    {
    }
    /**
     * Simple display of meta group tag
     *
     * @deprecated 4.3
     *
     * @uses tribe_get_meta_group()
     * @return echo tribe_get_meta_group( $meta_group_id )
     */
    function tribe_display_the_event_meta()
    {
    }
    /**
     *  Simple diplay of meta group tag
     *
     * @uses tribe_get_meta_group()
     * @deprecated 4.3
     *
     * @param string $meta_group_id
     *
     * @return echo tribe_get_meta_group( $meta_group_id )
     */
    function tribe_display_meta_group($meta_group_id)
    {
    }
    /**
     *  Simple diplay of meta tag
     *
     * @uses tribe_get_meta()
     * @deprecated 4.3
     *
     * @param string $meta_id
     *
     * @return echo tribe_get_meta( $meta_id )
     */
    function tribe_display_meta($meta_id)
    {
    }
    function Tribe_Events_Importer_Load()
    {
    }
}
