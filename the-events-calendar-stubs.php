<?php

namespace TEC\Common\Configuration {
    /**
     * Interface Configuration_Provider_Interface.
     *
     * @since 5.1.3
     *
     * @package TEC\Common\Configuration;
     */
    interface Configuration_Provider_Interface
    {
        /**
         * Whether a particular variable is defined or not.
         *
         * @since 5.1.3
         *
         * @param $key string Variable name.
         *
         * @return bool Whether the variable is defined or not.
         */
        public function has(string $key) : bool;
        /**
         * Retrieves the value for the given variable.
         *
         * @since 5.1.3
         *
         * @param $key string Variable name.
         *
         * @return null|mixed
         */
        public function get(string $key);
        /**
         * Retrieve all variables defined in an associative array.
         *
         * @since 5.1.3
         *
         * @return array All vars.
         */
        public function all() : array;
    }
    /**
     * Class Configuration.
     *
     * @since 5.1.3
     *
     * @package TEC\Common\Configuration;
     */
    class Configuration implements \TEC\Common\Configuration\Configuration_Provider_Interface
    {
        /**
         * The Configuration loader.
         *
         * @since 5.1.3
         *
         * @var Configuration_Loader The loader.
         */
        protected \TEC\Common\Configuration\Configuration_Loader $loader;
        /**
         * The configuration service.
         *
         * @since 5.1.3
         *
         * @param Configuration_Loader $loader
         */
        public function __construct(\TEC\Common\Configuration\Configuration_Loader $loader)
        {
        }
        /**
         * @inheritDoc
         */
        public function all() : array
        {
        }
        /**
         * @inheritDoc
         */
        public function get($key)
        {
        }
        /**
         * @inheritDoc
         */
        public function has($key) : bool
        {
        }
    }
    /**
     * Class Configuration_Loader.
     *
     * @since 5.1.3
     *
     * @package TEC\Common\Configuration;
     */
    class Configuration_Loader
    {
        /**
         * @var array<Configuration_Provider_Interface>
         */
        protected static $providers = [];
        /**
         * Add a var provider to the list of providers referenced when accessing a variable
         * from within the Configuration object.
         *
         * @since 5.1.3
         *
         * @param Configuration_Provider_Interface $provider
         *
         * @return $this
         */
        public function add(\TEC\Common\Configuration\Configuration_Provider_Interface $provider) : self
        {
        }
        /**
         * Retrieve a list of all Configuration_Provider_Interface providers loaded.
         *
         * @since 5.1.3
         *
         * @return Configuration_Provider_Interface[]
         */
        public function all() : array
        {
        }
        /**
         * Remove the providers.
         *
         * @since 5.1.3
         *
         * @return $this
         */
        public function reset() : self
        {
        }
    }
    /**
     * Class Constants_Provider.
     *
     * @since 5.1.3
     *
     * @package TEC\Common\Configuration;
     */
    class Constants_Provider implements \TEC\Common\Configuration\Configuration_Provider_Interface
    {
        /**
         * @inheritDoc
         */
        public function has($key) : bool
        {
        }
        /**
         * @inheritDoc
         */
        public function get($key)
        {
        }
        /**
         * @inheritDoc
         */
        public function all() : array
        {
        }
    }
}
namespace TEC\Common\Context {
    /**
     * Class Post_Request_Type.
     *
     * @since 5.0.13
     *
     * @package TEC\Common\Context;
     */
    class Post_Request_Type
    {
        /**
         * Whether the current request is one to quick edit a single post of the specified post type or not.
         *
         * @since 5.0.13
         *
         * @param string|array<string> $post_type The post type or post types to check.
         *
         * @return bool Whether the current request is one to quick edit a single post of the specified post type or not.
         */
        public function is_inline_editing_post($post_type) : bool
        {
        }
        /**
         * Whether the current request is one to edit a list of the specified post types or not.
         *
         * The admin edit screen for a post type is the one that lists all the posts of that typ,
         * it has the URL `/wp-admin/edit.php?post_type=<post_type>`.
         *
         * @since 5.0.13
         *
         * @param string|array<string> $post_type The post type or post types to check.
         *
         * @return bool Whether the current request is one to edit a list of the specified post types or not.
         */
        public function is_editing_post_list($post_type) : bool
        {
        }
        /**
         * Whether we are currently creating a new post, a post of post type(s) or not.
         *
         * @since 4.7.7
         *
         * @param null $post_type The optional post type to check.
         *
         * @return bool Whether we are currently creating a new post, a post of post type(s) or not.
         */
        public function is_new_post($post_type = null) : bool
        {
        }
        /**
         * Whether we are currently editing a post(s), post type(s) or not.
         *
         * @since 4.7.7
         *
         * @param null|array|string|int $post_or_type A post ID, post type, an array of post types or post IDs, `null`
         *                                            to just make sure we are currently editing a post.
         *
         * @return bool
         */
        public function is_editing_post($post_or_type = null) : bool
        {
        }
    }
}
namespace TEC\Common\StellarWP\ContainerContract {
    /**
     * Describes the interface of a container that exposes methods to read its entries.
     */
    interface ContainerInterface
    {
        /**
         * Binds an interface, a class or a string slug to an implementation.
         *
         * Existing implementations are replaced.
         *
         * @param string|class-string $id             Identifier of the entry to look for.
         * @param mixed               $implementation The implementation that should be bound to the alias(es); can be a
         *                                            class name, an object or a closure.
         *
         * @return void
         */
        public function bind(string $id, $implementation = null);
        /**
         * Finds an entry of the container by its identifier and returns it.
         *
         * @template T
         *
         * @param string|class-string<T> $id Identifier of the entry to look for.
         *
         * @return T|mixed
         * @phpstan-return ($id is class-string ? T : mixed)
         */
        public function get(string $id);
        /**
         * Returns true if the container can return an entry for the given identifier.
         * Returns false otherwise.
         *
         * `has($id)` returning true does not mean that `get($id)` will not throw an exception.
         * It does however mean that `get($id)` will not throw a `NotFoundExceptionInterface`.
         *
         * @param string|class-string $id Identifier of the entry to look for.
         *
         * @return bool
         */
        public function has(string $id);
        /**
         * Binds an interface a class or a string slug to an implementation and will always return the same instance.
         *
         * @param string|class-string $id             Identifier of the entry to look for.
         * @param mixed               $implementation The implementation that should be bound to the alias(es); can be a
         *                                            class name, an object or a closure.
         *
         * @return void This method does not return any value.
         */
        public function singleton(string $id, $implementation = null);
    }
}
namespace TEC\Common\Psr\Container {
    /**
     * Describes the interface of a container that exposes methods to read its entries.
     */
    interface ContainerInterface
    {
        /**
         * Finds an entry of the container by its identifier and returns it.
         *
         * @param string $id Identifier of the entry to look for.
         *
         * @throws NotFoundExceptionInterface  No entry was found for **this** identifier.
         * @throws ContainerExceptionInterface Error while retrieving the entry.
         *
         * @return mixed Entry.
         */
        public function get(string $id);
        /**
         * Returns true if the container can return an entry for the given identifier.
         * Returns false otherwise.
         *
         * `has($id)` returning true does not mean that `get($id)` will not throw an exception.
         * It does however mean that `get($id)` will not throw a `NotFoundExceptionInterface`.
         *
         * @param string $id Identifier of the entry to look for.
         *
         * @return bool
         */
        public function has(string $id);
    }
}
namespace TEC\Common\lucatume\DI52 {
    /**
     * Class Container
     *
     * @package lucatume\DI52
     * @implements ArrayAccess<string,object>
     */
    class Container implements \ArrayAccess, \TEC\Common\Psr\Container\ContainerInterface
    {
        const EXCEPTION_MASK_NONE = 0;
        const EXCEPTION_MASK_MESSAGE = 1;
        const EXCEPTION_MASK_FILE_LINE = 2;
        /**
         * An array cache to store the results of the class exists checks.
         *
         * @var array<string,bool>
         */
        protected $classIsInstantiatableCache = [];
        /**
         * A cache of what methods are static and what are not.
         *
         * @var array<string,bool>
         */
        protected $isStaticMethodCache = [];
        /**
         * A list of bound and resolved singletons.
         *
         * @var array<string|class-string,bool>
         */
        protected $singletons = [];
        /**
         * @var array<ServiceProvider>
         */
        protected $deferred = [];
        /**
         * @var array<string,array<string|object|callable>>
         */
        protected $tags = [];
        /**
         * @var array<ServiceProvider>
         */
        protected $bootable = [];
        /**
         * @var string
         */
        protected $whenClass;
        /**
         * @var string
         */
        protected $needsClass;
        /**
         * A map from class name and static methods to the built callback.
         *
         * @var array<string,Closure>
         */
        protected $callbacks = [];
        /**
         * @var Builders\Resolver
         */
        protected $resolver;
        /**
         * @var Builders\Factory
         */
        protected $builders;
        /**
         * Container constructor.
         *
         * @param false $resolveUnboundAsSingletons Whether unbound classes should be resolved as singletons by default,
         *                                          or not.
         */
        public function __construct($resolveUnboundAsSingletons = false)
        {
        }
        /**
         * Sets a variable on the container.
         *
         * @param string $key   The alias the container will use to reference the variable.
         * @param mixed  $value The variable value.
         *
         * @return void The method does not return any value.
         */
        public function setVar($key, $value)
        {
        }
        /**
         * Sets a variable on the container using the ArrayAccess API.
         *
         * When using the container as an array bindings will be bound as singletons.
         * These are equivalent: `$container->singleton('foo','ClassOne');`, `$container['foo'] = 'ClassOne';`.
         *
         * @param string $offset The alias the container will use to reference the variable.
         * @param mixed  $value  The variable value.
         *
         * @return void This method does not return any value.
         *
         * @throws ContainerException If the closure building fails.
         */
        #[\ReturnTypeWillChange]
        public function offsetSet($offset, $value)
        {
        }
        /**
         * Binds an interface a class or a string slug to an implementation and will always return the same instance.
         *
         * @param string             $id                A class or interface fully qualified name or a string slug.
         * @param mixed              $implementation    The implementation that should be bound to the alias(es); can be a
         *                                              class name, an object or a closure.
         * @param array<string>|null $afterBuildMethods An array of methods that should be called on the built
         *                                              implementation after resolving it.
         *
         * @return void This method does not return any value.
         * @throws ContainerException If there's any issue reflecting on the class, interface or the implementation.
         */
        public function singleton($id, $implementation = null, array $afterBuildMethods = null)
        {
        }
        /**
         * Returns a variable stored in the container.
         *
         * If the variable is a binding then the binding will be resolved before returning it.
         *
         * @param string     $key     The alias of the variable or binding to fetch.
         * @param mixed|null $default A default value to return if the variable is not set in the container.
         *
         * @return mixed The variable value or the resolved binding.
         * @throws ContainerException If there's an issue resolving the variable.
         *
         * @see Container::get()
         */
        public function getVar($key, $default = null)
        {
        }
        /**
         * Finds an entry of the container by its identifier and returns it.
         *
         * @template T
         *
         * @param string|class-string<T> $offset Identifier of the entry to look for.
         *
         * @return T|mixed The value for the offset.
         * @phpstan-return ($offset is class-string ? T : mixed)
         *
         * @throws ContainerException Error while retrieving the entry.
         * @throws NotFoundException  No entry was found for **this** identifier.
         */
        #[\ReturnTypeWillChange]
        public function offsetGet($offset)
        {
        }
        /**
         * Finds an entry of the container by its identifier and returns it.
         *
         * @template T
         *
         * @param  string|class-string<T>  $id  A fully qualified class or interface name or an already built object.
         *
         * @return T|mixed The entry for an id.
         * @phpstan-return ($id is class-string ? T : mixed)
         *
         * @throws ContainerException Error while retrieving the entry.
         */
        public function get($id)
        {
        }
        /**
         * Returns an instance of the class or object bound to an interface, class  or string slug if any, else it will try
         * to automagically resolve the object to a usable instance.
         *
         * If the implementation has been bound as singleton using the `singleton` method
         * or the ArrayAccess API then the implementation will be resolved just on the first request.
         *
         * @template T
         *
         * @param string|class-string<T> $id A fully qualified class or interface name or an already built object.
         *
         * @return T|mixed
         * @phpstan-return ($id is class-string ? T : mixed)
         *
         * @throws ContainerException If the target of the make is not bound and is not a valid,
         *                                              concrete, class name or there's any issue making the target.
         */
        public function make($id)
        {
        }
        /**
         * Returns true if the container can return an entry for the given identifier.
         * Returns false otherwise.
         *
         * `$container[$id]` returning true does not mean that `$container[$id]` will not throw an exception.
         * It does however mean that `$container[$id]` will not throw a `NotFoundExceptionInterface`.
         *
         * @param string|class-string $offset An offset to check for.
         *
         * @return boolean true on success or false on failure.
         */
        #[\ReturnTypeWillChange]
        public function offsetExists($offset)
        {
        }
        /**
         * Returns true if the container can return an entry for the given identifier.
         * Returns false otherwise.
         *
         * `has($id)` returning true does not mean that `get($id)` will not throw an exception.
         * It does however mean that `get($id)` will not throw a `NotFoundExceptionInterface`.
         *
         * @param string|class-string $id Identifier of the entry to look for.
         *
         * @return bool Whether the container contains a binding for an id or not.
         */
        public function has($id)
        {
        }
        /**
         * Tags an array of implementations bindings for later retrieval.
         *
         * The implementations can also reference interfaces, classes or string slugs.
         * Example:
         *
         *        $container->tag(['Posts', 'Users', 'Comments'], 'endpoints');
         *
         * @param array<string|callable|object> $implementationsArray The ids, class names or objects to apply the tag to.
         * @param string                        $tag                  The tag to apply.
         *
         * @return void This method does not return any value.
         * @see Container::tagged()
         *
         */
        public function tag(array $implementationsArray, $tag)
        {
        }
        /**
         * Retrieves an array of bound implementations resolving them.
         *
         * The array of implementations should be bound using the `tag` method:
         *
         *        $container->tag(['Posts', 'Users', 'Comments'], 'endpoints');
         *        foreach($container->tagged('endpoints') as $endpoint){
         *            $endpoint->register();
         *        }
         *
         * @param string $tag The tag to return the tagged values for.
         *
         * @return array<mixed> An array of resolved bound implementations.
         * @throws NotFoundException If nothing is tagged with the tag.
         * @throws ContainerException If one of the bindings is not of the correct type.
         * @see Container::tag()
         */
        public function tagged($tag)
        {
        }
        /**
         * Checks whether a tag group exists in the container.
         *
         * @param string $tag
         *
         * @return bool
         * @see Container::tag()
         *
         */
        public function hasTag($tag)
        {
        }
        /**
         * A wrapper around the `class_exists` function to capture and handle possible fatal errors on PHP 7.0+.
         *
         * @param string|class-string $class The class name to check.
         *
         * @return bool Whether the class exists or not.
         *
         * @throws ContainerException|ReflectionException If the class has syntax or other errors preventing its load.
         */
        protected function classIsInstantiable($class)
        {
        }
        /**
         * Checks a class, interface or trait exists.
         *
         * @param string|class-string $class The class, interface or trait to check.
         *
         * @return bool Whether the class, interface or trait exists or not.
         * @throws ReflectionException If the class should be checked for concreteness and it does not exist.
         */
        protected function checkClassIsInstantiatable($class)
        {
        }
        /**
         * Registers a service provider implementation.
         *
         * The `register` method will be called immediately on the service provider.
         *
         * If the provider overloads the  `isDeferred` method returning a truthy value then the `register` method will be
         * called only if one of the implementations provided by the provider is requested. The container defines which
         * implementations is offering overloading the `provides` method; the method should return an array of provided
         * implementations.
         *
         * If a provider overloads the `boot` method that method will be called when the `boot` method is called on the
         * container itself.
         *
         * @param class-string $serviceProviderClass The fully-qualified Service Provider class name.
         * @param string ...$alias             A list of aliases the provider should be registered with.
         * @return void This method does not return any value.
         * @throws ContainerException If the Service Provider is not correctly configured or there's an issue
         *                                     reflecting on it.
         * @see ServiceProvider::register()
         * @see ServiceProvider::isDeferred()
         * @see ServiceProvider::provides()
         * @see Container::getProvider()
         * @see ServiceProvider::boot()
         */
        public function register($serviceProviderClass, ...$alias)
        {
        }
        /**
         * Binds an interface, a class or a string slug to an implementation.
         *
         * Existing implementations are replaced.
         *
         * @param  string|class-string  $id                 A class or interface fully qualified name or a string slug.
         * @param  mixed                $implementation     The implementation that should be bound to the alias(es); can
         *                                                  be a class name, an object or a closure.
         * @param  string[]|null        $afterBuildMethods  An array of methods that should be called on the built
         *                                                  implementation after resolving it.
         *
         * @return void The method does not return any value.
         *
         * @throws ContainerException      If there's an issue while trying to bind the implementation.
         */
        public function bind($id, $implementation = null, array $afterBuildMethods = null)
        {
        }
        /**
         * Boots up the application calling the `boot` method of each registered service provider.
         *
         * If there are bootable providers (providers overloading the `boot` method) then the `boot` method will be
         * called on each bootable provider.
         *
         * @return void This method does not return any value.
         *
         * @see ServiceProvider::boot()
         */
        public function boot()
        {
        }
        /**
         * Binds a class, interface or string slug to a chain of implementations decorating a base
         * object; the chain will be lazily resolved only on the first call.
         * The base decorated object must be the last element of the array.
         *
         * @param  string|class-string            $id                 The class, interface or slug the decorator chain
         *                                                            should be bound to.
         * @param  array<string|object|callable>  $decorators         An array of implementations that decorate an object.
         * @param  string[]|null                  $afterBuildMethods  An array of methods that should be called on the
         *                                                            instance after it has been built; the methods should
         *                                                            not require any argument.
         *
         * @return void This method does not return any value.
         * @throws ContainerException
         */
        public function singletonDecorators($id, $decorators, array $afterBuildMethods = null)
        {
        }
        /**
         * Binds a class, interface or string slug to a chain of implementations decorating a
         * base object.
         *
         * The base decorated object must be the last element of the array.
         *
         * @param  string|class-string            $id                 The class, interface or slug the decorator chain
         *                                                            should be bound to.
         * @param  array<string|object|callable>  $decorators         An array of implementations that decorate an object.
         * @param  string[]|null                  $afterBuildMethods  An array of methods that should be called on the
         *                                                            instance after it has been built; the methods should
         *                                                            not require any argument.
         *
         * @return void This method does not return any value.
         * @throws ContainerException If there's any issue binding the decorators.
         */
        public function bindDecorators($id, array $decorators, array $afterBuildMethods = null)
        {
        }
        /**
         * Unsets a binding or tag in the container.
         *
         * @param mixed $offset The offset to unset.
         *
         * @return void The method does not return any value.
         */
        #[\ReturnTypeWillChange]
        public function offsetUnset($offset)
        {
        }
        /**
         * Starts the `when->needs->give` chain for a contextual binding.
         *
         * @param string|class-string $class The fully qualified name of the requesting class.
         *
         * Example:
         *
         *      // Any class requesting an implementation of `LoggerInterface` will receive this implementation ...
         *      $container->singleton('LoggerInterface', 'FilesystemLogger');
         *      // But if the requesting class is `Worker` return another implementation
         *      $container->when('Worker')
         *          ->needs('LoggerInterface')
         *          ->give('RemoteLogger');
         *
         * @return Container The container instance, to continue the when/needs/give chain.
         */
        public function when($class)
        {
        }
        /**
         * Second step of the `when->needs->give` chain for a contextual binding.
         *
         * Example:
         *
         *      // Any class requesting an implementation of `LoggerInterface` will receive this implementation ...
         *      $container->singleton('LoggerInterface', 'FilesystemLogger');
         *      // But if the requesting class is `Worker` return another implementation.
         *      $container->when('Worker')
         *          ->needs('LoggerInterface')
         *          ->give('RemoteLogger');
         *
         * @param string|class-string $id The class or interface needed by the class.
         *
         * @return Container The container instance, to continue the when/needs/give chain.
         */
        public function needs($id)
        {
        }
        /**
         * Third step of the `when->needs->give` chain for a contextual binding.
         *
         * Example:
         *
         *      // any class requesting an implementation of `LoggerInterface` will receive this implementation...
         *      $container->singleton('LoggerInterface', 'FilesystemLogger');
         *      // but if the requesting class is `Worker` return another implementation
         *      $container->when('Worker')
         *          ->needs('LoggerInterface')
         *          ->give('RemoteLogger');
         *
         * @param mixed $implementation The implementation specified
         *
         * @return void This method does not return any value.
         * @throws NotFoundException
         */
        public function give($implementation)
        {
        }
        /**
         * Returns a lambda function suitable to use as a callback; when called the function will build the implementation
         * bound to `$id` and return the value of a call to `$method` method with the call arguments.
         *
         * @param  string|class-string|object  $id      A fully-qualified class name, a bound slug or an object o call the
         *                                              callback on.
         * @param  string                      $method  The method that should be called on the resolved implementation
         *                                              with the specified array arguments.
         *
         * @return callable|Closure The callback function.
         * @throws ContainerException If the id is not a bound implementation or valid class name.
         */
        public function callback($id, $method)
        {
        }
        /**
         * Whether a method of an id, possibly not a class, is static or not.
         *
         * @param  object|string|class-string  $object  A class name, instance or something that does not map to a class.
         * @param  string                      $method  The method to check.
         *
         * @return bool Whether a method of an id or class is static or not.
         */
        protected function isStaticMethod($object, $method)
        {
        }
        /**
         * Returns a callable object that will build an instance of the specified class using the
         * specified arguments when called.
         * The callable will be a closure on PHP 5.3+ or a lambda function on PHP 5.2.
         *
         * @param  string|class-string|mixed  $id                 The fully qualified name of a class or an interface.
         * @param  array<mixed>               $buildArgs          An array of arguments that should be used to build the
         *                                                        instance; note that any argument will be resolved using
         *                                                        the container itself and bindings will apply.
         * @param  string[]|null              $afterBuildMethods  An array of methods that should be called on the built
         *                                                        implementation after resolving it.
         *
         * @return callable|Closure  A callable function that will return an instance of the specified class when
         *                   called.
         */
        public function instance($id, array $buildArgs = [], array $afterBuildMethods = null)
        {
        }
        /**
         * Protects a value to make sure it will not be resolved, if callable or if the name of an existing class.
         *
         * @param mixed $value The value to protect.
         *
         * @return ValueBuilder A protected value instance, its value set to the provided value.
         */
        public function protect($value)
        {
        }
        /**
         * Returns the Service Provider instance registered.
         *
         * @param string|class-string $providerId The Service Provider clas to return the instance for.
         *
         * @return ServiceProvider The service provider instance.
         *
         * @throws NotFoundException|ContainerException If the Service Provider class was never registered in the container
         *                                              or there's an issue retrieving it.
         */
        public function getProvider($providerId)
        {
        }
        /**
         * Returns whether a binding exists in the container or not.
         *
         * `isBound($id)` returning `true` means the a call to `bind($id, $implementaion)` or `singleton($id,
         * $implementation)` (or equivalent ArrayAccess methods) was explicitly made.
         *
         * @param string $id The id to check for bindings in the container.
         *
         * @return bool Whether an explicit binding for the id exists in the container or not.
         */
        public function isBound($id)
        {
        }
        /**
         * Sets the mask for the throwables that should be caught and re-thrown as container exceptions.
         *
         * @param int $maskThrowables The mask for the throwables that should be caught and re-thrown as container
         *
         * @return void
         */
        public function setExceptionMask($maskThrowables)
        {
        }
        /**
         * Upon cloning, clones the resolver and builders instances.
         *
         * @return void
         */
        public function __clone()
        {
        }
    }
}
namespace TEC\Common\Contracts {
    class Container extends \TEC\Common\lucatume\DI52\Container implements \TEC\Common\StellarWP\ContainerContract\ContainerInterface
    {
        /**
         * Finds an entry of the container by its identifier and returns it.
         *
         * @since 5.1.1.2
         *
         * @param string $id A fully qualified class or interface name or an already built object.
         *
         * @return mixed The entry for an id.
         * @throws Not_Bound_Exception Error while retrieving the entry.
         *
         */
        public function get($id)
        {
        }
        /**
         * Overrides the parent method to fire an action when a service provider is registered.
         *
         * @since 5.1.4
         *
         * @param string $serviceProviderClass The service provider class name.
         * @param string ...$alias             Optional. The alias(es) to register the service provider with.
         *
         * @return void
         *
         * @throws \TEC\Common\lucatume\DI52\ContainerException If the provider class is marked as deferred but
         *                                                      does not provide a set of deferred registrations.
         */
        public function register($serviceProviderClass, ...$alias)
        {
        }
        /**
         * Registers a service provider on a given action is dispatched.
         *
         * @since 5.1.4
         *
         * @param string $action The action to register the provider on.
         * @param string $class The service provider class name.
         * @param string ...$alias Optional. The alias(es) to register the service provider with.
         *
         * @return void The Service Provider is registered when the action fires,
         *               or immediately if the action has already fired.
         *
         * @throws \TEC\Common\lucatume\DI52\ContainerException If the provider class is marked as deferred but
         *                                                      does not provide a set of deferred registrations.
         */
        public function register_on_action(string $action, string $class, string ...$alias) : void
        {
        }
    }
}
namespace TEC\Common\lucatume\DI52 {
    /**
     * Class ServiceProvider
     *
     * @package lucatume\DI52
     */
    abstract class ServiceProvider
    {
        /**
         * Whether the service provider will be a deferred one or not.
         *
         * @var bool
         */
        protected $deferred = false;
        /**
         * @var Container
         */
        protected $container;
        /**
         * ServiceProvider constructor.
         *
         * @param Container $container
         */
        public function __construct(\TEC\Common\lucatume\DI52\Container $container)
        {
        }
        /**
         * Whether the service provider will be a deferred one or not.
         *
         * @return bool
         */
        public function isDeferred()
        {
        }
        /**
         * Returns an array of the class or interfaces bound and provided by the service provider.
         *
         * @return array<string> A list of fully-qualified implementations provided by the service provider.
         */
        public function provides()
        {
        }
        /**
         * Binds and sets up implementations at boot time.
         *
         * @return void The method will not return any value.
         */
        public function boot()
        {
        }
        /**
         * Registers the service provider bindings.
         *
         * @return void The method does not return any value.
         */
        public abstract function register();
    }
}
namespace TEC\Common\Contracts {
    abstract class Service_Provider extends \TEC\Common\lucatume\DI52\ServiceProvider
    {
        // Intentionally empty.
    }
}
namespace TEC\Common\Contracts\Provider {
    /**
     * Class Controller.
     *
     * @since 5.0.17
     *
     * @package TEC\Common\Provider;
     *
     * @property ContainerInterface $container
     */
    abstract class Controller extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Registers the filters and actions hooks added by the controller if the controller has not registered yet.
         *
         * @since 5.0.17
         *
         * @return void
         */
        public function register()
        {
        }
        /**
         * Registers the filters and actions hooks added by the controller.
         *
         * @since 5.0.17
         *
         * @return void
         */
        protected abstract function do_register() : void;
        /**
         * Removes the filters and actions hooks added by the controller.
         *
         * Bound implementations should not be removed in this method!
         *
         * @since 5.0.17
         *
         * @return void Filters and actions hooks added by the controller are be removed.
         */
        public abstract function unregister() : void;
        /**
         * Whether the controller is active or not.
         *
         * Controllers will be active by default, if that is not the case, the controller should override this method.
         *
         * @since 5.0.17
         *
         * @return bool Whether the controller is active or not.
         */
        public function is_active() : bool
        {
        }
        /**
         * Logs a message at the `debug` level.
         *
         * @since 5.0.17
         *
         * @param string $message The message to log.
         * @param array  $context An array of context to log with the message.
         *
         * @return void The message is logged.
         */
        protected function debug(string $message, array $context = []) : void
        {
        }
        /**
         * Logs a message at the `warning` level.
         *
         * @since 5.0.17
         *
         * @param string $message The message to log.
         * @param array  $context An array of context to log with the message.
         *
         * @return void The message is logged.
         */
        protected function warning(string $message, array $context = []) : void
        {
        }
        /**
         * Logs a message at the `error` level.
         *
         * @since 5.0.17
         *
         * @param string $message The message to log.
         * @param array  $context An array of context to log with the message.
         *
         * @return void The message is logged.
         */
        protected function error(string $message, array $context = []) : void
        {
        }
        /**
         * Returns whether any instance of this controller has been registered or not.
         *
         * @since 5.0.17
         *
         * @return bool Whether any instance of this controller has been registered or not.
         */
        public static function is_registered() : bool
        {
        }
    }
}
namespace TEC\Common\Editor\Full_Site {
    /**
     * Class Template_Utils.
     *
     * @since   4.14.18
     *
     * @package TEC\Common\Editor\Full_Site
     */
    class Template_Utils
    {
        /**
         * Returns an array containing the references of the passed blocks and their inner blocks.
         *
         * When we return we are replacing/overwriting $blocks with $all_blocks so we pass-by-reference.
         * If we don't pass-by-reference the non-event blocks get lost (ex: header and footer)
         *
         * @since 4.14.18
         *
         * @param array<array<string,mixed>> $blocks Array of parsed block objects.
         *
         * @return array<array<string,mixed>> Block references to the passed blocks and their inner blocks.
         */
        public static function flatten_blocks(&$blocks)
        {
        }
        /**
         * Parses wp_template content and injects the current theme's stylesheet as a theme attribute into
         * each wp_template_part.
         *
         * @since 4.14.18
         *
         * @param string $template_content serialized wp_template content.
         *
         * @return string Updated wp_template content.
         */
        public static function inject_theme_attribute_in_content($template_content)
        {
        }
        /**
         * Fetch a WP_Block_Template by the post_name and terms field.
         *
         * @since 5.1.14
         *
         * @param string $post_name The post_name field to search by.
         * @param string $terms     The terms field to search by, default to 'tec'.
         *
         * @return WP_Block_Template|null The newly created WP_Block_Template, or null on failure to locate.
         */
        public static function find_block_template_by_post(string $post_name, string $terms = 'tec') : ?\WP_Block_Template
        {
        }
        /**
         * Create a post for the wp_theme and return the hydrated WP_Block_Template.
         *
         * @since 5.1.14
         *
         * @param array $post_array Post array for insert.
         *
         * @return WP_Block_Template|null The newly created WP_Block_Template, or null on error.
         * @throws InvalidArgumentException
         */
        public static function save_block_template($post_array) : ?\WP_Block_Template
        {
        }
        /**
         * Hydrate a WP_Block_Template from a WP_Post object.
         *
         * @since 5.1.14
         *
         * @param WP_Post $post The post to hydrate the WP_Block_Template.
         *
         * @return WP_Block_Template|null The newly created WP_Block_Template, or null if missing required data.
         */
        public static function hydrate_block_template_by_post(\WP_Post $post) : ?\WP_Block_Template
        {
        }
    }
}
namespace TEC\Common\Exceptions {
    /**
     * Class Container_Exception.
     *
     * @since   5.1.1.2
     *
     * @package TEC\Common\Exceptions
     */
    class Container_Exception extends \RuntimeException
    {
        // Intentionally empty.
    }
    /**
     * Class Not_Bound_Exception.
     *
     * @since 5.1.1.2
     *
     * @package TEC\Common\Exceptions
     */
    class Not_Bound_Exception extends \TEC\Common\Exceptions\Container_Exception
    {
        // Intentionally empty.
    }
}
namespace TEC\Common\Integrations {
    /**
     * Class Integration_Abstract
     *
     * @link    https://docs.theeventscalendar.com/apis/integrations/including-new-integrations/
     *
     * @since   5.1.1
     *
     * @package TEC\Common\Integrations
     */
    abstract class Integration_Abstract extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 5.1.1
         */
        public function register()
        {
        }
        /**
         * Gets the slug for this integration parent, the main plugin that is being integrated to.
         *
         * @since 5.1.1
         *
         * @return string
         */
        public static abstract function get_parent() : string;
        /**
         * Gets the slug for this integration.
         *
         * @since 5.1.1
         *
         * @return string
         */
        public static abstract function get_slug() : string;
        /**
         * Determines whether this integration should load.
         *
         * @since  5.1.1
         *
         * @return bool
         */
        public function should_load() : bool
        {
        }
        /**
         * Filters whether the integration should load.
         *
         * @since 5.1.1
         *
         * @param bool $value Whether the integration should load.
         *
         * @return bool
         */
        protected function filter_should_load(bool $value) : bool
        {
        }
        /**
         * Determines if the integration in question should be loaded.
         *
         * @since  5.1.1
         *
         * @return bool
         */
        public abstract function load_conditionals() : bool;
        /**
         * Loads the integration itself.
         *
         * @since  5.1.1
         *
         * @return void
         */
        protected abstract function load() : void;
        /**
         * Determines the integration type.
         *
         * @since  5.1.1
         *
         * @return string
         */
        public static abstract function get_type() : string;
    }
    /**
     * Class Provider.
     *
     * @since   5.1.1
     *
     * @package TEC\Common\Integrations
     */
    class Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 5.1.1
         */
        public function register()
        {
        }
    }
}
namespace TEC\Common\Integrations\Traits {
    trait Module_Integration
    {
        /**
         * Gets the integration type.
         *
         * @since  5.1.1
         *
         * @return string
         */
        public static function get_type() : string
        {
        }
    }
    trait Plugin_Integration
    {
        /**
         * Gets the integration type.
         *
         * @since  5.1.1
         *
         * @return string
         */
        public static function get_type() : string
        {
        }
    }
    trait Server_Integration
    {
        /**
         * Gets the integration type.
         *
         * @since  5.1.1
         *
         * @return string
         */
        public static function get_type() : string
        {
        }
    }
    trait Theme_Integration
    {
        /**
         * Gets the integration type.
         *
         * @since  5.1.1
         *
         * @return string
         */
        public static function get_type() : string
        {
        }
    }
}
namespace TEC\Common\Libraries\Installer {
    class Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 5.0.10
         */
        public function register()
        {
        }
        /**
         * Filters the installer button classes.
         *
         * @since 5.0.10
         *
         * @param array|mixed $classes The button classes.
         *
         * @return array
         */
        public function filter_button_classes($classes)
        {
        }
    }
}
namespace TEC\Common\Libraries {
    class Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Hook prefix.
         *
         * @since 5.0.10
         *
         * @var string
         */
        protected static $hook_prefix = 'tec';
        /**
         * Binds and sets up implementations.
         *
         * @since 5.0.10
         */
        public function register()
        {
        }
        /**
         * Gets the hook prefix.
         *
         * @since 5.0.10
         *
         * @return string
         */
        public function get_hook_prefix() : string
        {
        }
    }
}
namespace TEC\Common\Site_Health {
    /**
     * Class Factory
     *
     * @link https://developer.wordpress.org/reference/hooks/debug_information/
     *
     * @since   5.1.0
     *
     * @package TEC\Common\Site_Health
     */
    class Factory
    {
        /**
         * Generates a Generic field from a set of arguments.
         *
         * @since 5.1.0
         *
         * @param string            $id
         * @param string            $label
         * @param array|string|null $value
         * @param int               $priority (optional) By default all fields are generated with priority 50.
         *
         * @return Info_Field_Abstract
         */
        public static function generate_generic_field(string $id, string $label, $value, int $priority = 50) : \TEC\Common\Site_Health\Info_Field_Abstract
        {
        }
        /**
         * Generates a Post type count field from a set of arguments.
         *
         * @since 5.1.0
         *
         * @param string $id
         * @param string $post_type
         * @param int    $priority (optional) By default all fields are generated with priority 50.
         *
         * @return Info_Field_Abstract
         */
        public static function generate_post_status_count_field(string $id, string $post_type, int $priority = 50) : \TEC\Common\Site_Health\Info_Field_Abstract
        {
        }
        /**
         * Gets all registered sections.
         *
         * @since 5.1.0
         *
         * @return array<string,Info_Section_Abstract>
         */
        public function get_sections() : array
        {
        }
        /**
         * Gets the section after which we will insert all the factory-generated sections.
         *
         * @since 5.1.0
         *
         * @return string
         */
        protected function get_insert_after_section_key() : string
        {
        }
        /**
         * Filters the actual site health data to include our sections.
         *
         * @since 5.1.0
         *
         * @param array $info
         *
         * @return array
         */
        public function filter_include_info_sections(array $info = [])
        {
        }
    }
    /**
     * Interface for Site Health Info Field.
     *
     * @link https://developer.wordpress.org/reference/hooks/debug_information/
     *
     * @since 5.1.0
     *
     * @package TEC\Common\Site_Health
     */
    interface Info_Field_Interface
    {
        /**
         * Gets the ID for this field.
         *
         * @since 5.1.0
         *
         * @return string
         */
        public function get_id() : string;
        /**
         * Gets the label for this field.
         *
         * @since 5.1.0
         *
         * @return string
         */
        public function get_label() : string;
        /**
         * Gets the value for this field.
         * Text should be translated. Can be an associative array that is displayed as name/value pairs.
         *
         * @since 5.1.0
         *
         * @return string|int|float|array<int>|array<float>|array<string>
         */
        public function get_value();
        /**
         * Gets the priority for the field, used to order fields in a section.
         *
         * @since 5.1.0
         *
         * @return int
         */
        public function get_priority() : int;
        /**
         * Get the debug value for the field.
         *
         * Optional. The output that is used for this field when the user copies the data. It should be more concise and
         * not translated. If not set, the content of $value is used. Note that the array keys are used as labels for
         * the copied data.
         *
         * @since 5.1.0
         *
         * @return string
         */
        public function get_debug() : string;
        /**
         * Determines if the field is private or not.
         *
         * Optional. If set to true, the field will be excluded from the copied data, allowing you to show, for example, API keys here. Default false.
         *
         * @since 5.1.0
         *
         * @return bool
         */
        public function is_private() : bool;
        /**
         * Pulls all the params for this field into an array consumable by the site health info page.
         *
         * @since 5.1.0
         *
         * @return array
         */
        public function to_array() : array;
    }
    /**
     * Class Info_Field_Abstract
     *
     * @link    https://developer.wordpress.org/reference/hooks/debug_information/
     *
     * @since   5.1.0
     *
     * @package TEC\Common\Site_Health
     */
    abstract class Info_Field_Abstract implements \TEC\Common\Site_Health\Info_Field_Interface
    {
        /**
         * Stores the ID for the field.
         *
         * @since 5.1.0
         *
         * @var string
         */
        protected string $id;
        /**
         * Stores the label for the field.
         *
         * @since 5.1.0
         *
         * @var string
         */
        protected string $label;
        /**
         * Stores the value for field.
         *
         * @since 5.1.0
         *
         * @return string|int|float|array<int>|array<float>|array<string>
         */
        protected $value;
        /**
         * Stores the priority for the field, used for sorting.
         *
         * @since 5.1.0
         *
         * @var int
         */
        protected int $priority;
        /**
         * Stores the flag for if the field is private.
         *
         * @since 5.1.0
         *
         * @var bool
         */
        protected bool $is_private;
        /**
         * Stores the debug value for the field.
         *
         * @since 5.1.0
         *
         * @var string
         */
        protected string $debug;
        /**
         * @inheritDoc
         */
        public function get_id() : string
        {
        }
        /**
         * @inheritDoc
         */
        public function get_label() : string
        {
        }
        /**
         * @inheritDoc
         */
        public function get_value()
        {
        }
        /**
         * @inheritDoc
         */
        public function get_priority() : int
        {
        }
        /**
         * @inheritDoc
         */
        public function is_private() : bool
        {
        }
        /**
         * @inheritDoc
         */
        public function get_debug() : string
        {
        }
        /**
         * @inheritDoc
         */
        public function to_array() : array
        {
        }
        /**
         * Internal method to the Field class, to allow filtering of specific values.
         *
         * @since 5.1.0
         *
         * @param string                $param   The field parameter we're filtering.
         * @param mixed                 $value   Value of the field.
         *
         * @return mixed
         */
        protected function filter_param(string $param, $value = null)
        {
        }
    }
}
namespace TEC\Common\Site_Health\Fields {
    /**
     * Class Generic_Info_Field
     *
     * @since   5.1.0
     *
     * @package TEC\Common\Site_Health
     */
    class Generic_Info_Field extends \TEC\Common\Site_Health\Info_Field_Abstract
    {
        /**
         * Configure all the params for a generic field.
         *
         * @param string                           $id
         * @param string                           $label
         * @param array<string,string>|string|null $value
         * @param int                              $priority
         */
        public function __construct(string $id, string $label, $value = null, int $priority = 50)
        {
        }
        /**
         * Given an array of configurations sets up a new generic field instance.
         *
         * @since 5.1.0
         *
         * @param array $field
         *
         * @return Info_Field_Abstract
         */
        public static function from_array(array $field) : \TEC\Common\Site_Health\Info_Field_Abstract
        {
        }
        /**
         * Given all the arguments create a new Generic Field.
         *
         * @since 5.1.0
         *
         * @param string      $id
         * @param string      $label
         * @param string|null $value
         * @param int         $priority
         *
         * @return Info_Field_Abstract
         */
        public static function from_args(string $id, string $label, ?string $value, int $priority = 50) : \TEC\Common\Site_Health\Info_Field_Abstract
        {
        }
    }
    /**
     * Class Post_Status_Count_Field
     *
     * @since   5.1.0
     *
     * @package TEC\Common\Site_Health
     */
    class Post_Status_Count_Field extends \TEC\Common\Site_Health\Fields\Generic_Info_Field
    {
        /**
         * Stores the post type for the field.
         *
         * @since 5.1.0
         *
         * @var string
         */
        protected string $post_type;
        /**
         * Configure all the params for a generic field.
         *
         * @param string                           $id
         * @param string                           $label
         * @param array<string,string>|string|null $value
         * @param int                              $priority
         */
        public function __construct(string $id, string $post_type = null, int $priority = 50)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_label() : string
        {
        }
        /**
         * @inheritDoc
         */
        public function get_value()
        {
        }
        /**
         * Converts a post status count object to an array in the format
         *            [ (string) status_slug => (int) count]
         *
         * @since 5.1.0
         *
         * @param stdClass $obj The object returned from wp_count_posts().
         *
         * @return array<string,int> An array of stati (key) with counts (value).
         */
        protected function get_counts() : array
        {
        }
    }
}
namespace TEC\Common\Site_Health {
    /**
     * Interface for Site Health Info Section.
     *
     * @link https://developer.wordpress.org/reference/hooks/debug_information/
     *
     * @since 5.1.0
     *
     * @package TEC\Common\Site_Health
     */
    interface Info_Section_Interface
    {
        /**
         * Static way of fetching the slug of this section.
         *
         * @since 5.1.0
         *
         * @return string
         */
        public static function get_slug() : string;
        /**
         * Returns the section as an array ready for WordPress site health.
         *
         * @since 5.1.0
         *
         * @return array
         */
        public function to_array() : array;
        /**
         * Returns the label for this section.
         *
         * @see Info_Section_Abstract::filter_param() For how to hook into this params.
         *
         * @since 5.1.0
         *
         * @return string
         */
        public function get_label() : string;
        /**
         * Returns the description for this section.
         *
         * @see Info_Section_Abstract::filter_param() For how to hook into this params.
         *
         * @since 5.1.0
         *
         * @return string
         */
        public function get_description() : string;
        /**
         * Whether it should show the count of fields for this section.
         *
         * @see Info_Section_Abstract::filter_param() For how to hook into this params.
         *
         * @since 5.1.0
         *
         * @return bool
         */
        public function get_show_count() : bool;
        /**
         * If this particular section should be copied when using the Site Health.
         *
         * @see Info_Section_Abstract::filter_param() For how to hook into this params.
         *
         * @since 5.1.0
         *
         * @return bool
         */
        public function is_private() : bool;
        /**
         * Returns an array of all the fields in this section.
         *
         * @see Info_Section_Abstract::filter_param() For how to hook into this params.
         *
         * @since 5.1.0
         *
         * @return array<string, Info_Field_Abstract>
         */
        public function get_fields() : array;
        /**
         * Determines if a given field exists.
         *
         * @since 5.1.0
         *
         * @param string|Info_Field_Abstract $field
         *
         * @return bool
         */
        public function has_field($field) : bool;
        /**
         * Based on the id of the field return the object.
         *
         * @since 5.1.0
         *
         * @param string $id
         *
         * @return Info_Field_Abstract|null
         */
        public function get_field(string $id) : ?\TEC\Common\Site_Health\Info_Field_Abstract;
        /**
         * Adds a field to this section.
         *
         * @see Generic_Info_Field If you are looking on how to quickly generate a field without creating a new class.
         *
         * @since 5.1.0
         *
         * @param Info_Field_Abstract $field     What field we are trying to add.
         * @param bool                $overwrite (optional) Determines if we will overwrite the field or not, if found.
         *
         * @return bool Determined by if we found a field with that id already.
         */
        public function add_field(\TEC\Common\Site_Health\Info_Field_Abstract $field, bool $overwrite = false) : bool;
    }
    /**
     * Class Abstract_Info_Section
     *
     * @link    https://developer.wordpress.org/reference/hooks/debug_information/
     *
     * @since   5.1.0
     *
     * @package TEC\Common\Site_Health
     */
    abstract class Info_Section_Abstract implements \TEC\Common\Site_Health\Info_Section_Interface
    {
        /**
         * Slug for the section.
         *
         * @since 5.1.0
         *
         * @var string $slug
         */
        protected static string $slug;
        /**
         * Label for the section.
         *
         * @since 5.1.0
         *
         * @var string $label
         */
        protected string $label;
        /**
         * If we should show the count of fields in the site health info page.
         *
         * @since 5.1.0
         *
         * @var bool $show_count
         */
        protected bool $show_count = true;
        /**
         * If this section is private.
         *
         * @since 5.1.0
         *
         * @var bool $is_private
         */
        protected bool $is_private = false;
        /**
         * Description for the section.
         *
         * @since 5.1.0
         *
         * @var string $description
         */
        protected string $description;
        /**
         * Which fields are stored on this section.
         *
         * @since 5.1.0
         *
         * @var array<string, Info_Field_Abstract> $fields
         */
        protected array $fields = [];
        /**
         * @inheritDoc
         */
        public static function get_slug() : string
        {
        }
        /**
         * @inheritDoc
         */
        public function to_array() : array
        {
        }
        /**
         * @inheritDoc
         */
        public function get_label() : string
        {
        }
        /**
         * @inheritDoc
         */
        public function get_description() : string
        {
        }
        /**
         * @inheritDoc
         */
        public function get_fields() : array
        {
        }
        /**
         * @inheritDoc
         */
        public function get_show_count() : bool
        {
        }
        /**
         * @inheritDoc
         */
        public function is_private() : bool
        {
        }
        /**
         * @inheritDoc
         */
        public function has_field($field) : bool
        {
        }
        /**
         * @inheritDoc
         */
        public function get_field(string $id) : ?\TEC\Common\Site_Health\Info_Field_Abstract
        {
        }
        /**
         * @inheritDoc
         */
        public function add_field(\TEC\Common\Site_Health\Info_Field_Abstract $field, bool $overwrite = false) : bool
        {
        }
        /**
         * Internal method to the Section class, to allow filtering of specific values.
         *
         * @since 5.1.0
         *
         * @param string $param
         * @param mixed  $value
         *
         * @return mixed
         */
        protected function filter_param(string $param, $value = null)
        {
        }
        /**
         * Sorts the fields stored on this section, will retain keys.
         *
         * @since 5.1.0
         *
         * @return void
         */
        protected function sort_fields() : void
        {
        }
    }
    /**
     * Class Provider
     *
     * @since   5.1.0
     *
     * @package TEC\Common\Site_Health
     *
     */
    class Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Register the functionality related to this module.
         *
         * @since 5.1.0
         *
         * @return void
         */
        public function register()
        {
        }
        /**
         * Include the filters related to this module.
         *
         * @since 5.1.0
         *
         * @return void
         */
        protected function add_filters() : void
        {
        }
        /**
         * Includes the info sections controlled by Common.
         *
         * @since 5.1.0
         *
         * @param array $info Current set of info sections.
         *
         * @return array
         */
        public function filter_include_info_section($info) : array
        {
        }
    }
}
namespace TEC\Common\Storage {
    /**
     * Class Timed_Option which will handle the storage of values that need to be transient in nature but without the
     * performance cost of Transients. This is specially important when dealing with WordPress installs that have no Object
     * Caching, on those cases Transients will execute two SQL queries when using `get_transient()`, which is demolishes
     * the performance of certain pages.
     *
     * @since   5.0.6
     *
     * @package TEC\Common
     */
    class Timed_Option
    {
        /**
         *
         *
         * @since 5.0.6
         *
         * @var bool
         */
        protected $active = true;
        /**
         * Prefix for all the Timed Options stored on the database.
         *
         * @since 5.0.6
         *
         * @var string
         */
        protected $option_name_prefix = 'tec_timed_';
        /**
         * Local storage of the data on the Options. Keys will not have the prefix used on the database.
         *
         * @since 5.0.6
         *
         * @var array
         */
        protected $data = [];
        /**
         * Deactivate the usage of Database Timed Options, all timed options are only a glorified memoization.
         *
         * @since 5.0.6
         *
         * @return void
         */
        public function deactivate() : void
        {
        }
        /**
         * Activate the usage of Database Timed Options.
         *
         * @since 5.0.6
         *
         * @return void
         */
        public function activate() : void
        {
        }
        /**
         * Is the timed options active?
         *
         * @since 5.0.6
         *
         * @return bool
         */
        public function is_active() : bool
        {
        }
        /**
         * Gets the option name for a given timed option, by attaching a prefix and allowing filtering.
         *
         * @since 5.0.6
         *
         * @param string $key Key for the option we are trying to get the option name for.
         *
         * @return string
         */
        public function get_option_name(string $key) : string
        {
        }
        /**
         * Fetches the value of a given timed option.
         *
         * @since 5.0.6
         *
         * @param string $key     Key for the option we are trying to get.
         * @param mixed  $default Default value when the option is either expired or not-set.
         * @param bool   $force   If we should expire cache and fetch from the database.
         *
         * @return mixed|null
         */
        public function get($key, $default = null, bool $force = false)
        {
        }
        /**
         * Delete a given timed option based on a key.
         * Will also clear local cache.
         *
         * @since 5.0.6
         *
         * @param string $key Which timed option we are checking.
         *
         * @return bool
         */
        public function delete($key) : bool
        {
        }
        /**
         * Checks if a given timed option exists.
         *
         * @since 5.0.6
         *
         * @param string $key   Which timed option we are checking.
         * @param bool   $force Clears the cache before get_option()
         *
         * @return bool
         */
        public function exists($key, bool $force = false) : bool
        {
        }
        /**
         * Update the value of a timed option on the database and on local cache.
         *
         * @since 5.0.6
         *
         * @param string $key        Key for this option.
         * @param mixed  $value      Value stored for this option.
         * @param int    $expiration Expiration in seconds for this timed option.
         *
         * @return bool
         */
        public function set($key, $value, int $expiration = DAY_IN_SECONDS) : bool
        {
        }
    }
}
namespace TEC\Common\Telemetry {
    /**
     * Class Migration
     *
     * @since   5.1.0
     * @package TEC\Common\Telemetry
     */
    class Migration
    {
        /**
         * The key we back up original fs_accounts data to.
         *
         * @since 5.1.0
         *
         * @var string
         */
        public static $fs_accounts_slug = 'tec_freemius_accounts_archive';
        /**
         * The key we back up modified fs_accounts data to.
         *
         * @since 5.1.0
         *
         * @var string
         */
        public static $fs_accounts_data = 'tec_freemius_accounts_data_archive';
        /**
         * The key we back up fs_active_plugins data to.
         *
         * @since 5.1.0
         *
         * @var string
         */
        public static $fs_plugins_slug = 'tec_freemius_plugins_archive';
        /**
         * Where Freemius stores the active plugins.
         *
         * @since 5.1.4
         *
         * @var string
         */
        protected static string $key_fs_active_plugins = 'fs_active_plugins';
        /**
         * List of our plugins to check for.
         *
         * @since 5.1.0
         *
         * @var array
         */
        public $our_plugins = ['the-events-calendar', 'event-tickets'];
        /**
         * Placeholder for if the user has opted in via Freemius.
         *
         * @since 5.1.0
         *
         * @var boolean
         */
        public static $is_opted_in;
        /**
         * Determine if we are opted-in to Freemius
         *
         * @since 5.1.0
         *
         * @return boolean
         */
        public function is_opted_in() : bool
        {
        }
        /**
         * Whether the class should load/run.
         *
         * @since 5.1.0
         *
         * @return boolean
         */
        public function should_load() : bool
        {
        }
        /**
         * Detect if the user has opted in to Freemius and auto-opt them in to Telemetry.
         *
         * @since 5.1.0
         */
        public function migrate_existing_opt_in() : void
        {
        }
        /**
         * Opts the user in to Telemetry.
         *
         * @since 5.1.0
         *
         */
        public function auto_opt_in()
        {
        }
    }
    /**
     * Class Opt_In
     *
     * @since   5.1.13
     * @package TEC\Common\Telemetry
     */
    class Opt_In
    {
        /**
         * Build the opt-in user data, store it, and fetch it.
         *
         * @since 5.1.13
         *
         * @return array
         */
        public function build_opt_in_user() : array
        {
        }
        /**
         * Get the opt-in user to be used in the opt_in_user telemetry field.
         *
         * @since 5.1.13
         *
         * @return WP_User|null
         */
        protected function get_generated_opt_in_user() : ?\WP_User
        {
        }
        /**
         * Get an admin user based on the admin email for the site.
         *
         * @since 5.1.13
         *
         * @return WP_User|null
         */
        protected function get_admin_user_by_admin_email() : ?\WP_User
        {
        }
        /**
         * Get the first admin user from the first 5,000 users of the site.
         *
         * @since 5.1.13
         *
         * @return WP_User|null
         */
        protected function get_first_admin_user() : ?\WP_User
        {
        }
    }
    /**
     * Class Provider
     *
     * @since   5.1.0
     * @package TEC\Common\Telemetry
     */
    class Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Registers the handlers and modifiers for notifying the site
         * that Legacy views are removed.
         *
         * @since 5.13.0
         */
        public function register()
        {
        }
        /**
         * Add the action hooks.
         *
         * @since 5.1.0
         */
        public function add_actions()
        {
        }
        /**
         * Add the filter hooks.
         *
         * @since 5.1.0
         */
        public function add_filters()
        {
        }
        /**
         * Filters the HTTP request arguments for TEC telemetry to add the tribe-common integration ID and version.
         * For versioning purposes.
         *
         * @since 5.1.8.1
         *
         * @param array  $parsed_args An array of HTTP request arguments.
         * @param string $url         The request URL.
         */
        public function filter_telemetry_http_request_args($parsed_args, $url)
        {
        }
        /**
         * Filters the arguments for telemetry data to add the opt-in user data if missing.
         *
         * @since 5.1.13
         *
         * @param array $args Telemetry args.
         *
         * @return array
         */
        public function filter_send_data_args($args)
        {
        }
        /**
         * It's super important to make sure when hooking to WordPress actions that we don't do before we are sure that
         * telemetry was properly booted into the system.
         *
         * @since 5.1.3
         * @since 5.1.13 Added filter of send_data_args to include opt-in data.
         */
        public function hook_telemetry_init() : void
        {
        }
        /**
         * Initialize our internal Telemetry code.
         * Drivers, start your engines...
         *
         * @since 5.1.0
         *
         * @return void
         */
        public function boot_telemetry()
        {
        }
        /**
         * Initialize our internal Telemetry code.
         * Drivers, start your engines...
         *
         * @since 5.1.0
         *
         * @return void
         */
        public function initialize_telemetry()
        {
        }
        /**
         * Placeholder for eventual Freemius removal hooking in to modify things.
         *
         * @since 5.1.0
         *
         * @return void
         */
        public function migrate_existing_opt_in()
        {
        }
        /**
         * Logic for if the opt-in modal should be shown.
         *
         * @since 5.1.0
         *
         * @return void
         */
        public function show_optin_modal($slug)
        {
        }
        /**
         * Filters the default opt-in modal args.
         *
         * @since 5.1.0
         *
         * @param array<string|mixed> $args The current optin modal args.
         *
         * @return array<string|mixed>
         */
        public function filter_optin_args($args) : array
        {
        }
        /**
         * Filters the exit questionnaire shown during plugin deactivation/uninstall.
         *
         * @since 5.1.0
         *
         * @param array<string,mixed> $args The current args.
         *
         * @return array<string,mixed> $args The modified args.
         */
        public function filter_exit_interview_args($args)
        {
        }
        /**
         * Ensure the assets for the modal are enqueued, if needed.
         *
         * @since 5.1.0
         */
        public function maybe_enqueue_admin_modal_assets() : void
        {
        }
    }
    /**
     * Class Telemetry
     *
     * @since   5.1.0
     * @package TEC\Common\Telemetry
     */
    final class Telemetry
    {
        /**
         * Array for the TEC plugins to add themselves to.
         *
         * @since 5.1.0
         *
         * @var array<string,string>
         */
        public static $tec_slugs = [];
        /**
         * Gentlefolk, start your engines.
         *
         * @since 5.1.0
         *
         * @return void
         */
        public function boot() : void
        {
        }
        /**
         * Initializes the plugins and triggers the "loaded" action.
         *
         * @since 5.1.0
         *
         * @return void
         */
        public function init() : void
        {
        }
        /**
         * Clean up some old data.
         * If the "tec" plugin exists, and it has no wp_slug, remove it.
         * This prevents a fatal with the Telemetry library when we call get_opted_in_plugins().
         *
         * @since 5.1.1.1
         *
         * @return void
         */
        public static function clean_up() : void
        {
        }
        public static function get_plugin_slug()
        {
        }
        /**
         * Get the slug of the parent plugin.
         * Hydrated lazily.
         *
         * @since 5.1.0
         *
         * @return string
         */
        public static function get_parent_plugin_slug() : string
        {
        }
        /**
         * Get the stellar slug based on the parent plugin.
         *
         * @since 5.1.0
         */
        public static function get_stellar_slug() : string
        {
        }
        /**
         * Filters the default optin modal args.
         *
         * @since 5.1.0
         *
         * @param array<string|mixed> $args The current optin modal args.
         *
         * @return array<string|mixed>
         */
        public function filter_optin_args($args) : array
        {
        }
        /**
         * Get the URL for the permission link in the optin modal.
         *
         * @since 5.1.0
         *
         * @return string
         */
        public static function get_permissions_url() : string
        {
        }
        /**
         * Get the URL for the Terms of Service link in the optin modal.
         *
         * @since 5.1.0
         *
         * @return string
         */
        public static function get_terms_url() : string
        {
        }
        /**
         * Get the URL for the Privacy Policy link in the optin modal.
         *
         * @since 5.1.0
         *
         * @return string
         */
        public static function get_privacy_url() : string
        {
        }
        /**
         * Filters the exit questionnaire shown during plugin deactivation/uninstall.
         *
         * @since 5.1.0
         *
         * @param array<string,mixed> $args The current args.
         *
         * @return array<string,mixed> $args The modified args.
         */
        public function filter_exit_interview_args($args)
        {
        }
        /**
         * Triggers Telemetry's opt-in modal with our parameters.
         *
         * @since 5.1.0
         *
         * @return void
         */
        public function show_optin_modal($slug) : void
        {
        }
        /**
         * Sugar function to get the status object from the container.
         *
         * @since 5.1.0
         *
         * @return Status
         */
        public static function get_status_object() : \TEC\Common\StellarWP\Telemetry\Opt_In\Status
        {
        }
        /**
         * Allows out plugins to hook in and add themselves,
         * automating a lot of the registration and opt in/out process.
         *
         * @since 5.1.0
         *
         * @return array<string,string> An array of plugins in the format [ 'plugin_slug' => 'plugin_path' ]
         */
        public static function get_tec_telemetry_slugs()
        {
        }
        /**
         * Register and opt in/out the plugins that are hooked into `tec_telemetry_slugs`.
         * This keeps all TEC plugins in sync and only requires one optin modal response.
         *
         * @since 5.1.0
         *
         * @return void
         */
        public function register_tec_telemetry_plugins($opted = NULL)
        {
        }
        /**
         * This ensures all our entries are the same.
         *
         * @since 5.1.8.1
         */
        public function normalize_optin_status() : void
        {
        }
        /**
         * Calculate the optin status for the TEC plugins from various sources.
         *
         * @since 6.1.0
         *
         * @param bool $opted
         *
         * @return bool $opted
         */
        public function calculate_optin_status($opted = null)
        {
        }
        /**
         * Calculate the optin status for the TEC plugins from various sources.
         *
         * @since 5.1.1.1
         *
         * @return bool $show If the modal should show
         */
        public static function calculate_modal_status() : bool
        {
        }
        /**
         * Sugar function to disable (or enable) the optin modal.
         *
         * @since 6.1.0
         *
         * @param string      $slug   The plugin slug for Telemetry.
         * @param boolean|int $enable Opt out (0|false) or in (1|true).
         */
        public static function disable_modal($slug, $enable = false)
        {
        }
    }
}
namespace TEC\Common {
    /**
     * Class Translations_Loader.
     *
     * @since   5.0.8
     *
     * @package TEC\Common;
     */
    class Translations_Loader
    {
        /**
         * The override locale that should be used.
         *
         * @since 5.0.8
         *
         * @var string
         */
        protected $override_locale = '';
        /**
         * Whether the locale has been switched or not.
         *
         * @since 5.0.8
         *
         * @var bool
         */
        protected $has_loaded_translations = false;
        /**
         * A list of the text domains translations have been loaded for.
         *
         * @since 5.0.8
         *
         * @var array<string>
         */
        protected $loaded_domains = [];
        /**
         * Switches the locale to the one specified.
         *
         * Note: the method will not check what the current locale is and will just load the
         * translations specified. The burden of checking the current locale is on the caller.
         *
         * @since 5.0.8
         *
         * @param string               $locale  The locale to switch to.
         * @param array<string,string> $domains A map from text domains to the directory containing the translations.
         *
         * @return bool Whether the locale was switched or not.
         */
        public function load(string $locale, array $domains = []) : bool
        {
        }
        /**
         * A proxy method to return the current override locale if set, or the input locale otherwise.
         *
         * Used during filter application.
         *
         * @since    5.0.8
         *
         * @param string $locale The locale to override.
         *
         * @return string The overridden locale.
         *
         * @internal This function is public only for the purpose of being used as a filter callback.
         */
        public function override_locale($locale)
        {
        }
        /**
         * Returns whether the locale has been switched or not.
         *
         * @since 5.0.8
         *
         * @return bool Whether the locale has been switched or not.
         */
        public function has_loaded_translations() : bool
        {
        }
        /**
         * Restored the locale to the previous one and removes the class filters.
         *
         * @since 5.0.8
         *
         * @return void Translations for each domain will be reloaded.
         */
        public function restore()
        {
        }
        /**
         * Load the translations for the map of domains for the current locale.
         *
         * @since 5.0.8
         *
         * @param array<string,string> $domains A map from text domains to the directory containing the translations.
         * @param string               $locale  The locale to load the translations for.
         *
         * @return void Translations for each domain will be loaded for the current plugin locale.
         */
        protected function load_locale_translations(array $domains, string $locale) : void
        {
        }
    }
}
namespace {
    abstract class Tribe__Abstract_Deactivation
    {
        protected $network = \false;
        public function __construct($network)
        {
        }
        /**
         * Tell WordPress to flush rewrite rules.
         * Since our post types are already registered,
         * we delete the option and let WP regenerate it
         * on the next page load.
         */
        protected function flush_rewrite_rules()
        {
        }
        /**
         * Deactivate the plugin. This should not remove data.
         * It's job is to remove run-time traces of the plugin.
         *
         * @return void
         */
        public function deactivate()
        {
        }
        /**
         * Run the deactivation script on every blog for a multisite install
         *
         * @return void
         */
        protected function multisite_deactivate()
        {
        }
        /**
         * The deactivation routine for a single blog
         *
         * @return void
         */
        protected abstract function blog_deactivate();
        /**
         * An abridged version that is less DB intensive for use on large networks.
         *
         * @see wp_is_large_network() and the 'wp_is_large_network' filter
         *
         * @return void
         */
        protected function short_blog_deactivate()
        {
        }
    }
    /**
     * Base Plugin register
     *
     * Register all plugins to Dependency Class
     *
     * @package Tribe
     * @since 4.9
     *
     */
    abstract class Tribe__Abstract_Plugin_Register
    {
        /**
         * The absolute path to the plugin file, the one that contains the plugin header.
         *
         * @var string
         */
        protected $base_dir;
        /**
         * @var string
         */
        protected $main_class;
        /**
         * @var string
         */
        protected $version;
        /**
         * @since 4.9.17
         *
         * @var array
         */
        protected $classes_req = [];
        /**
         * @var array
         */
        protected $dependencies = ['parent-dependencies' => [], 'co-dependencies' => [], 'addon-dependencies' => []];
        /**
         * Registers a plugin with dependencies
         */
        public function register_plugin()
        {
        }
        /**
         * Returns whether or not the dependencies have been met
         *
         * This is basically an aliased function - register_plugins, upon
         * second calling, returns whether or not a plugin should load.
         *
         * @deprecated since 4.9.17 It is unused by any Tribe plugins and returned void.
         * @todo       remove in 4.11
         */
        public function has_valid_dependencies()
        {
        }
    }
    /**
     * Shows a welcome or update message after the plugin is installed/updated.
     */
    class Tribe__Admin__Activation_Page
    {
        protected $args = [];
        public $update_slug = 'update-message-';
        public $welcome_slug = 'welcome-message-';
        protected $current_context = '';
        /**
         * Handles the update/welcome splash screen.
         *
         * @param array $args {
         *     Plugin specific slugs and option names used to manage when the splash screen displays.
         *
         *     @type string $slug
         *     @type string $version
         *     @type string $plugin_path
         *     @type string $version_history_slug
         *     @type string $update_page_title
         *     @type string $update_page_template
         *     @type string $welcome_page_title
         *     @type string $welcome_page_template
         * }
         */
        public function __construct(array $args = [])
        {
        }
        /**
         * Determines if we are currently on the Welcome page.
         *
         * @since 4.12.11
         *
         * @return bool
         */
        public function is_welcome_page()
        {
        }
        /**
         * Determines if we are currently on the update page.
         *
         * @since 4.12.11
         *
         * @return bool
         */
        public function is_update_page()
        {
        }
        /**
         * Listen for opportunities to show update and welcome splash pages.
         */
        public function hooks()
        {
        }
        /**
         * Filter the Default WordPress actions when updating the plugin to prevent users to be redirected if they have an
         * specific intention of going back to the plugins page.
         *
         * @param  array $actions The Array of links (html)
         * @param  string $plugin Which plugins are been updated
         * @return array          The filtered Links
         */
        public function update_complete_actions($actions, $plugin)
        {
        }
        /**
         * Maybe redirect to the welcome page (or to the update page - though this is
         * currently disabled).
         */
        public function maybe_redirect()
        {
        }
        /**
         * Have we shown the welcome/update message for the current version?
         *
         * @since 5.0.0 Turned this method public.
         *
         * @return bool
         */
        public function showed_update_message_for_current_version()
        {
        }
        /**
         * Records the fact that we displayed the update message in relation to a specific
         * version of the plugin (so we don't show it again until/unless they update to
         * a higher version).
         */
        protected function log_display_of_message_page()
        {
        }
        /**
         * The previous_ecp_versions option will be empty or set to 0
         * if the current version is the first version to be installed.
         *
         * @return bool
         * @see Tribe__Events__Main::maybeSetTECVersion()
         */
        protected function is_new_install()
        {
        }
        /**
         * Handles taking a user to a post-installation welcome page.
         */
        protected function redirect_to_welcome_page()
        {
        }
        /**
         * Handles taking the user to a post-update splash screen.
         *
         * Disused since TEC PR 88 (targeting Tribe__Events__Activation_Page,
         * which this class was derived from).
         *
         * @see https://github.com/the-events-calendar/the-events-calendar/pull/88
         *
         * @todo decide whether to reinstate or remove
         */
        protected function redirect_to_update_page()
        {
        }
        /**
         * Return the URL of the splash page.
         *
         * @param string $slug
         *
         * @return string
         */
        protected function get_message_page_url($slug)
        {
        }
        /**
         * Dynamically registers the splash page when required.
         */
        public function register_page()
        {
        }
        /**
         * Hooked to admin_body_class to add a class for the update or welcome page
         *
         * @param string $classes a space separated string of classes to be added to body
         *
         * @return string
         */
        public function admin_body_class($classes)
        {
        }
        /**
         * Deactivates the regular settings screen (the splash screen will display
         * in the Events > Settings slot instead, for this request only).
         */
        protected function disable_default_settings_page()
        {
        }
        /**
         * Prints the splash screen.
         *
         * @param string $context
         *
         * @return string|null
         */
        public function display_page()
        {
        }
        /**
         * Returns the output of the specified template.
         *
         * @param string $path
         *
         * @return string
         */
        protected function get_view($path)
        {
        }
    }
}
namespace Tribe\Admin\Conditional_Content {
    /**
     * Abstract class for conditional content.
     *
     * @since 4.14.7
     */
    abstract class Datetime_Conditional_Abstract
    {
        /**
         * Item slug.
         *
         * @since 4.14.7
         */
        protected $slug = '';
        /**
         * Start date.
         *
         * @since 4.14.7
         */
        protected $start_date;
        /**
         * Start time.
         *
         * @since 4.14.7
         */
        protected $start_time;
        /**
         * End date.
         *
         * @since 4.14.7
         */
        protected $end_date;
        /**
         * End time.
         *
         * @since 4.14.7
         */
        protected $end_time;
        /**
         * Stores the instance of the template engine that we will use for rendering the page.
         *
         * @since 4.14.7
         *
         * @var \Tribe__Template
         */
        protected $template;
        /**
         * Register actions and filters.
         *
         * @since 4.14.7
         * @return void
         */
        abstract function hook();
        /**
         * Unix datetime for content start.
         *
         * @since 4.14.7
         * @return \Tribe\Utils\Date_I18n - Date Object
         */
        protected function get_start_time()
        {
        }
        /**
         * Unix datetime for content end.
         *
         * @since 4.14.7
         * @return \Tribe\Utils\Date_I18n - Date Object
         */
        protected function get_end_time()
        {
        }
        /**
         * Whether the content should display.
         *
         * @since 4.14.7
         * @return boolean - Whether the content should display
         */
        protected function should_display()
        {
        }
        /**
         * Gets the template instance used to setup the rendering of the page.
         *
         * @since 4.14.7
         *
         * @return \Tribe__Template
         */
        public function get_template()
        {
        }
    }
    /**
     * Set up for Black Friday promo.
     *
     * @since 4.14.7
     */
    class Black_Friday extends \Tribe\Admin\Conditional_Content\Datetime_Conditional_Abstract
    {
        /**
         * Promo slug.
         *
         * @since 4.14.7
         */
        protected $slug = 'black_friday';
        /**
         * Start Date.
         *
         * @since 4.14.7
         */
        protected $start_date = 'fourth Thursday of November';
        /**
         * End Date.
         *
         * @since 4.14.7
         */
        protected $end_date = 'November 30th';
        /**
         * Register actions and filters.
         *
         * @since 4.14.7
         * @return void
         */
        public function hook()
        {
        }
        /**
         * Start the Monday before Thanksgiving.
         *
         * @since 4.14.7
         * @return \Tribe\Utils\Date_I18n - Date Object
         */
        protected function get_start_time()
        {
        }
        /**
         * Replace the opening markup for the general settings info box.
         *
         * @since 4.14.7
         * @return void
         */
        public function add_conditional_content($fields)
        {
        }
    }
    /**
     * Set up for end of year sale promo.
     *
     * @since 4.14.9
     */
    class End_Of_Year_Sale extends \Tribe\Admin\Conditional_Content\Datetime_Conditional_Abstract
    {
        /**
         * Promo slug.
         *
         * @since 4.14.9
         */
        protected $slug = 'end_of_year_sale';
        /**
         * Start Date.
         *
         * @since 4.14.9
         */
        protected $start_date = 'December 23';
        /**
         * End Date.
         *
         * @since 4.14.9
         */
        protected $end_date = 'December 31';
        /**
         * Register actions and filters.
         *
         * @since 4.14.9
         * @return void
         */
        public function hook()
        {
        }
        /**
         * Replace the opening markup for the general settings info box.
         *
         * @since 4.14.9
         * @return void
         */
        public function add_conditional_content($fields)
        {
        }
        /**
         * Unix time for notice end.
         *
         * @since 4.14.9
         *
         * @return \Tribe\Utils\Date_I18n - Date Object
         */
        public function get_end_time()
        {
        }
    }
    /**
     * Conditional Content Provider.
     *
     * @since 4.14.7
     */
    class Service_Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Registers the required objects and filters.
         *
         * @since 4.14.7
         */
        public function register()
        {
        }
        /**
         * Set up hooks for classes.
         *
         * @since 4.14.7
         */
        protected function hooks()
        {
        }
        /**
         * Setup for things that require plugins loaded first.
         *
         * @since 4.14.7
         */
        public function plugins_loaded()
        {
        }
    }
}
namespace {
    /**
     * Class with a few helpers for the Administration Pages
     *
     * @since  4.0
     *
     */
    class Tribe__Admin__Help_Page
    {
        /**
         * Static Singleton Factory Method
         *
         * @return Tribe__Admin__Help_Page
         */
        public static function instance()
        {
        }
        /**
         * Set up hooks.
         *
         * @since 4.15.0
         */
        public function hook()
        {
        }
        /**
         * Hooked to admin_body_class to add a class for help page.
         *
         * @since 4.15.0
         *
         * @param string $classes A space separated string of classes to be added to body.
         *
         * @return string $classes A space separated string of classes to be added to body.
         */
        public function admin_body_class($classes)
        {
        }
        /**
         * Checks if the current page is the Help one
         *
         * @since 4.5.7
         * @since 5.1.12 Verifying that the current page is a screen
         *
         * @return bool
         */
        public function is_current_page()
        {
        }
        /**
         * Checks if the current page is the TEC Help one
         *
         * @since 5.1.12
         *
         * @return bool
         */
        public function is_tec_events_help_page()
        {
        }
        /**
         * Checks if the current page is the Tickets Help one
         *
         * @since 5.1.12
         *
         * @return bool
         */
        public function is_tec_tickets_help_page()
        {
        }
        /**
         * Register the Admin assets for the help page
         *
         * @since  4.9.12
         *
         * @return void
         */
        public function register_assets()
        {
        }
        /**
         * Get the list of plugins
         *
         * @since  4.0
         *
         * @param  string  $plugin_name    Should get only one plugin?
         * @param  boolean $is_active Only get active plugins?
         * @return array
         */
        public function get_plugins($plugin_name = \null, $is_active = \true)
        {
        }
        /**
         * Get the formatted links of the possible plugins
         *
         * @since  4.0
         *
         * @param  boolean $is_active Filter only active plugins
         * @return array
         */
        public function get_plugin_forum_links($is_active = \true)
        {
        }
        /**
         * Get the formatted text of the possible plugins
         *
         * @since  4.0
         *
         * @param  boolean $is_active Filter only active plugins
         * @return string
         */
        public function get_plugins_text($is_active = \true)
        {
        }
        /**
         * Get the Addons
         *
         * @since  4.0
         *
         * @param  string $plugin Plugin Name to filter
         * @param  string $is_active Filter if it's active
         * @param  string $is_important filter if the plugin is important
         * @return array
         */
        public function get_addons($plugin = \null, $is_active = \null, $is_important = \null)
        {
        }
        public function is_active($should_be_active)
        {
        }
        /**
         * From a Given link returns it with a GA arguments
         *
         * @since  4.0
         *
         * @param  string  $link     An absolute or a Relative link
         * @param  boolean $relative Is the Link absolute or relative?
         * @return string            Link with the GA arguments
         */
        public function get_ga_link($link = \null, $relative = \true)
        {
        }
        /**
         * Gets the Feed items from The Events Calendar's Blog
         *
         * @since  4.0
         *
         * @return array Feed Title and Link
         */
        public function get_feed_items()
        {
        }
        /**
         * Parses the help text from an Array to the final HTML.
         *
         * It is the responsibility of code calling this function to ensure proper escaping
         * within any HTML.
         *
         * @since  4.0
         *
         * @param  string|array $mixed The mixed value to create the HTML from
         * @return string
         */
        public function get_content_html($mixed = '')
        {
        }
        /**
         * Incremented with each method call, then stored in $section->uid.
         *
         * Used when sorting two instances whose priorities are equal.
         *
         * @since 4.0
         *
         * @static
         * @access protected
         * @var int
         */
        protected static $section_count = 0;
        /**
         * Helper function to compare two objects by priority, ensuring sort stability via uid.
         *
         * @since 4.0
         *
         * @access protected
         * @param object $a Object A.
         * @param object $b Object B.
         *
         * @return int
         */
        protected function by_priority($a, $b)
        {
        }
        /**
         * Adds a new section to the Help Page
         *
         * @since  4.0
         *
         * @param string  $id       HTML like ID
         * @param string  $title    The Title of the section, doesn't allow HTML
         * @param integer $priority A Numeric ordering for the Section
         * @param string  $type     by default only 'default' or 'box'
         *
         * @return object The section added
         */
        public function add_section($id, $title = \null, $priority = 10, $type = 'default')
        {
        }
        /**
         * Add a New content Item to a Help page Section
         *
         * @since  4.0
         *
         * @param string  $section_id Which section this content should be assigned to
         * @param string|array  $content    Item text or array of items, will be passed to `$this->get_content_html`
         * @param integer $priority   A Numeric priority
         * @param array   $arguments  If you need arguments for item, they can be passed here
         *
         * @return object The content item added
         */
        public function add_section_content($section_id, $content, $priority = 10, $arguments = [])
        {
        }
        /**
         * Remove a section based on the ID
         * This method will remove any sections that are indexed at that ID on the sections array
         * And the sections that have a propriety of `id` equals to the given $section_id argument
         *
         * @param  string|int $section_id You can use Numeric or String indexes to search
         * @return bool|int               Returns `false` when no sections were removed and an `int` with the number of sections removed
         */
        public function remove_section($section_id)
        {
        }
        /**
         * Based on an Array of sections it render the Help Page contents
         *
         * @since  4.0
         *
         * @param  boolean $print    Return or Print the HTML after
         * @return void|string
         */
        public function get_sections($print = \true)
        {
        }
        /**
         * Prints the Plugin box for the given plugin
         *
         * @since  4.0
         *
         * @param  string $plugin Plugin Name key
         * @return void
         */
        public function print_plugin_box($plugin)
        {
        }
        /**
         * Defines TEC frequently asked questions and displays them in the UI.
         *
         * @since 4.14.2
         *
         * @return array of FAQs which are displayed on the calendar tab of the in-app help page.
         */
        public function get_calendar_faqs()
        {
        }
        /**
         * Defines calendar extensions and displays them in the UI.
         *
         * @since 4.14.2
         *
         * @return array of extensions which are displayed on the calendar and community tab of the in-app help page.
         */
        public function get_calendar_extensions()
        {
        }
        /**
         * Defines calendar products.
         *
         * @since 4.14.2
         *
         * @return array of products which are displayed on the calendar tab of the in-app help page.
         */
        public function get_calendar_products()
        {
        }
        /**
         * Defines ticketing frequently asked questions and displays them in the UI.
         *
         * @since 4.14.2
         *
         * @return array of FAQs which are displayed on the ticketing tab of the in-app help page.
         */
        public function get_ticketing_faqs()
        {
        }
        /**
         * Defines ticketing extensions and displays them in the UI.
         *
         * @since 4.14.2
         *
         * @return array of extensions which are displayed on the ticketing tab of the in-app help page.
         */
        public function get_ticketing_extensions()
        {
        }
        /**
         * Defines ticketing products.
         *
         * @since 4.14.2
         *
         * @return array of products which are displayed on the ticketing tab of the in-app help page.
         */
        public function get_ticketing_products()
        {
        }
        /**
         * Defines community extensions and displays them in the UI.
         *
         * @since 4.14.2
         *
         * @return array of extensions which are displayed on the community tab of the in-app help page.
         */
        public function get_community_extensions()
        {
        }
        /**
         * Defines community products.
         *
         * @since 4.14.2
         *
         * @return array of products which are displayed on the community tab of the in-app help page.
         */
        public function get_community_products()
        {
        }
    }
    /**
     * Class with a few helpers for the Administration Pages
     */
    class Tribe__Admin__Helpers
    {
        /**
         * Static Singleton Holder
         * @var Tribe__Admin__Helpers|null
         */
        protected static $instance;
        /**
         * Static Singleton Factory Method
         *
         * @return Tribe__Admin__Helpers
         */
        public static function instance()
        {
        }
        /**
         * Check if the current screen is an instance of WP_Screen
         * Hijack the return for tests
         *
         * @since 4.9.5
         *
         * @return boolean
         */
        public function is_wp_screen()
        {
        }
        /**
         * Matcher for Admin Pages related to Post Types
         *
         * @param string|array|null $id What will be checked to see if we return true or false
         *
         * @return boolean
         */
        public function is_post_type_screen($post_type = \null)
        {
        }
        /**
         * Matcher for administration pages that are from Tribe the easier way
         *
         * @param  string|array|null $id What will be checked to see if we return true or false
         *
         * @return boolean
         */
        public function is_screen($id = \null)
        {
        }
        /**
         * Matcher for administration pages action
         *
         * @param  string|array|null $action What will be checked to see if we return true or false
         *
         * @return boolean
         */
        public function is_action($action = \null)
        {
        }
    }
    /**
     * Facilitiates live date previews in the Events > Settings > Display admin screen.
     */
    class Tribe__Admin__Live_Date_Preview
    {
        protected $target_fields = ['dateWithYearFormat', 'dateWithoutYearFormat', 'monthAndYearFormat', 'weekDayFormat'];
        /**
         * Static Singleton Holder
         *
         * @var self
         */
        protected static $instance;
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        /**
         * Adds live date previews to the display settings tab (nothing is setup unless
         * the user is actually on that tab).
         */
        public function __construct()
        {
        }
        /**
         * If the user looking at the Display settings tab, adds live date preview facilities.
         */
        public function listen()
        {
        }
        public function setup_date_previews($html, $field)
        {
        }
    }
}
namespace Tribe\Admin\Notice {
    abstract class Date_Based
    {
        /**
         * The slug used to make filters specific to an individual notice.
         *
         * @since 4.14.2
         *
         * @var string
         */
        public $slug = '';
        /**
         * Placeholder for start date string.
         *
         * @since 4.14.2
         *
         * @var string
         */
        public $start_date;
        /**
         * Placeholder for start time int.
         *
         * @since 4.14.2
         *
         * @var int
         */
        public $start_time;
        /**
         * Placeholder for end date string.
         *
         * @since 4.14.2
         *
         * @var string
         */
        public $end_date;
        /**
         * Placeholder for end time int.
         *
         * @since 4.14.2
         *
         * @var int
         */
        public $end_time;
        /**
         * Placeholder for extension date string.
         *
         * @since 4.15.4
         *
         * @var string
         */
        public $extension_date;
        /**
         * Placeholder for extension time int.
         *
         * @since 4.14.2
         *
         * @var int
         */
        public $extension_time;
        /**
         * Whether or not The Events Calendar is active.
         *
         * @since 4.14.2
         *
         * @var boolean
         */
        public $tec_is_active;
        /**
         * Stores the instance of the template engine that we will use for rendering the page.
         *
         * @since 4.14.7
         *
         * @var \Tribe__Template
         */
        protected $template;
        /**
         * Whether or not Event Tickets is active.
         *
         * @since 4.14.2
         *
         * @var boolean
         */
        public $et_is_active;
        /**
         * The screens we show the notice on.
         *
         * @since 4.15.4
         *
         * @var array
         */
        public $screens = [
            'tribe_events_page_tribe-app-shop',
            // App shop.
            'events_page_tribe-app-shop',
            // App shop.
            'toplevel_page_tec-events',
            // New Events Welcome.
            'tribe_events_page_tec-events-settings',
            // New Events Settings.
            'tribe_events_page_tec-events-help',
            // New Events Help.
            'tribe_events_page_tec-troubleshooting',
            // New Events Troubleshooting.
            'tickets_page_tec-tickets-settings',
            // New Tickets Settings.
            'toplevel_page_tec-tickets',
            // New Tickets Welcome.
            'tickets_page_tec-tickets-help',
            // New Tickets Help.
            'tickets_page_tec-tickets-troubleshooting',
            // New Ticket Troubleshooting.
            'tribe_events_page_tribe-common',
            // Old Settings & Welcome.
            'events_page_tribe-common',
            // Settings & Welcome.
            'toplevel_page_tribe-common',
            // Settings & Welcome.
            'tribe_events_page_aggregator',
            // Import page
            'edit-tribe_events',
        ];
        public function __construct()
        {
        }
        /**
         * Register the various Marketing notices.
         *
         * @since 4.14.2
         */
        public function hook()
        {
        }
        /**
         * Register the notice.
         *
         * @since 4.14.2
         */
        public function hook_notice()
        {
        }
        /**
         * HTML for the notice.
         *
         * @since 4.14.2
         *
         * @return string The HTML string to be displayed.
         */
        abstract function display_notice();
        /**
         * Function to get and filter the screens the notice is displayed on.
         *
         * @since 4.15.4
         *
         * @return array<string> List of allowed screens.
         */
        public function get_screens()
        {
        }
        /**
         * Whether the notice should display.
         *
         * @since 4.14.2
         *
         * @return boolean $should_display Whether the notice should display or not.
         */
        public function should_display()
        {
        }
        /**
         * Unix time for notice start.
         *
         * @since 4.14.2
         *
         * @return \Tribe\Utils\Date_I18n - Date Object
         */
        public function get_start_time()
        {
        }
        /**
         * Unix time for notice end.
         *
         * @since 4.14.2
         *
         * @return \Tribe\Utils\Date_I18n - Date Object
         */
        public function get_end_time()
        {
        }
        /**
         * Unix time for notice extension end.
         *
         * @since 4.15.4
         *
         * @return int $end_time The date & time the notice should stop displaying, as a Unix timestamp.
         */
        public function get_extension_time()
        {
        }
        /**
         * Gets the template instance used to setup the rendering of the page.
         *
         * @since 4.14.7
         *
         * @return \Tribe__Template
         */
        public function get_template()
        {
        }
    }
}
namespace {
    class Tribe__Admin__Notice__Marketing
    {
        /**
         * Whether or not The Events Calendar is active.
         *
         * @since 4.7.23
         *
         * @var boolean
         */
        public $tec_is_active;
        /**
         * Whether or not Event Tickets is active.
         *
         * @since 4.7.23
         *
         * @var boolean
         */
        public $et_is_active;
        public function __construct()
        {
        }
        /**
         * Register the various Marketing notices.
         *
         * @since 4.7.23
         * @deprecated 5.1.10
         */
        public function hook()
        {
        }
        /**
         * Register the Black Friday notice.
         *
         * @since 4.12.14
         * @deprecated 5.1.10
         */
        public function black_friday_hook_notice()
        {
        }
        /**
         * Unix time for Monday of Thanksgiving week @ 11am UTC. (11am UTC is 6am EST).
         *
         * @since 4.12.14
         * @deprecated 5.1.10
         *
         * @return int
         */
        public function get_black_friday_start_time()
        {
        }
        /**
         * Unix time for Dec 1 @ 5am UTC. (5am UTC is 12am EST).
         *
         * @since 4.12.14
         * @deprecated 5.1.10
         *
         * @return int
         */
        public function get_black_friday_end_time()
        {
        }
        /**
         * Whether the Black Friday notice should display.
         *
         * Unix times for Monday of Thanksgiving week @ 6am UTC and Dec 1 2020 @ 6am UTC.
         * 6am UTC is midnight for TheEventsCalendar.com, which uses the America/Los_Angeles time zone.
         *
         * @since 4.12.14
         * @deprecated 5.1.10
         *
         * @return boolean
         */
        public function black_friday_should_display()
        {
        }
        /**
         * HTML for the Black Friday notice.
         *
         * @since 4.12.14
         * @deprecated 5.1.10
         *
         * @return string
         */
        public function black_friday_display_notice()
        {
        }
    }
}
namespace Tribe\Admin\Notice\Marketing {
    /**
     * Class Black_Friday
     *
     * @since 4.14.2
     *
     * @package Tribe\Admin\Notice\Marketing
     */
    class Black_Friday extends \Tribe\Admin\Notice\Date_Based
    {
        /**
         * {@inheritDoc}
         */
        public $slug = 'black-friday';
        /**
         * {@inheritDoc}
         */
        public $start_date = 'fourth Thursday of November';
        /**
         * {@inheritDoc}
         */
        public $end_date = 'November 29';
        /**
         * {@inheritDoc}
         */
        public $end_time = 23;
        /**
         * {@inheritDoc}
         */
        public $icon_url = 'images/icons/horns-white.svg';
        /**
         * {@inheritDoc}
         */
        public function display_notice()
        {
        }
        /**
         * Unix time for notice start.
         *
         * @since 4.14.2
         *
         * @return \Tribe\Utils\Date_I18n - Date Object
         */
        public function get_start_time()
        {
        }
        /**
         * Enqueue additional assets for the notice.
         *
         * @since 5.1.10
         */
        public function enqueue_additional_assets()
        {
        }
    }
    /**
     * Class End_Of_Year_Sale
     *
     * @since 4.14.9
     *
     * @package Tribe\Admin\Notice\Marketing
     */
    class End_Of_Year_Sale extends \Tribe\Admin\Notice\Date_Based
    {
        /**
         * {@inheritDoc}
         */
        public $slug = 'end-of-year-sale';
        /**
         * {@inheritDoc}
         */
        public $start_date = 'December 23';
        /**
         * {@inheritDoc}
         */
        public $end_date = 'December 31';
        /**
         * {@inheritDoc}
         */
        public function display_notice()
        {
        }
        /**
         * Unix time for notice end.
         *
         * @since 4.14.9
         *
         * @return \Tribe\Utils\Date_I18n - Date Object
         */
        public function get_end_time()
        {
        }
    }
    /**
     * Class Stellar_Sale
     *
     * @since 4.14.2
     *
     * @package Tribe\Admin\Notice\Marketing
     */
    class Stellar_Sale extends \Tribe\Admin\Notice\Date_Based
    {
        /**
         * {@inheritDoc}
         */
        public $slug = 'stellar-sale';
        /**
         * {@inheritDoc}
         */
        public $start_date = 'July 24th, 2023';
        /**
         * {@inheritDoc}
         *
         * 7am UTC is midnight PDT (-7) and 3am EDT (-4)
         */
        public $start_time = 19;
        /**
         * {@inheritDoc}
         */
        public $end_date = 'July 31st, 2023';
        /**
         * {@inheritDoc}
         *
         * 7am UTC is midnight PDT (-7) and 3am EDT (-4)
         */
        public $end_time = 19;
        /**
         * {@inheritDoc}
         */
        public $extension_date = 'August 2nd, 2023';
        /**
         * {@inheritDoc}
         *
         * 7am UTC is midnight PDT (-7) and 3am EDT (-4)
         */
        public $extension_time = 19;
        /**
         * {@inheritDoc}
         */
        public function display_notice()
        {
        }
    }
}
namespace {
    /**
     * Shows an admin notice for Php_Version
     */
    class Tribe__Admin__Notice__Php_Version
    {
        public function hook()
        {
        }
        /**
         * Return the list of the Tribe active plugins
         *
         * @since 4.7.16
         *
         * @return string String of items
         */
        public function get_active_plugins()
        {
        }
        /**
         * Implodes a list items using 'and' as the final separator and a comma everywhere else
         *
         * @param array $items List of items to implode
         * @since 4.7.16
         *
         * @return string String of items
         */
        public function implode_with_grammar($items)
        {
        }
        /**
         * We only want to display notices for users
         * who are in PHP < 5.6
         *
         * @since  4.7.16
         *
         * @return boolean
         */
        public function should_display()
        {
        }
        /**
         * HTML for the PHP notice
         *
         * @since  4.7.16
         *
         * @return string
         */
        public function display_notice()
        {
        }
    }
    /**
     * Shows an admin notice telling users which requisite plugins they need to download
     */
    class Tribe__Admin__Notice__Plugin_Download
    {
        /**
         * @param string $plugin_path Path to the plugin file we're showing a notice for
         */
        public function __construct($plugin_path)
        {
        }
        /**
         * Add a required plugin to the notice
         *
         * @since 4.8.3 Method introduced.
         * @since 4.9 Added $version and $addon parameters.
         * @since 4.9.12 Add $has_pue_notice param
         * @since 4.9.17 Appended "+" to all version numbers to indicate "or any later version".
         *
         * @param string $name           Name of the required plugin
         * @param null   $thickbox_url   Download or purchase URL for plugin from within /wp-admin/ thickbox
         * @param bool   $is_active      Indicates if the plugin is installed and active or not
         * @param string $version        Optional version number of the required plugin
         * @param bool   $addon          Indicates if the plugin is an add-on for The Events Calendar or Event Tickets
         * @param bool   $has_pue_notice Indicates that we need to change the messaging due to expired key.
         */
        public function add_required_plugin($name, $thickbox_url = \null, $is_active = \null, $version = \null, $addon = \false, $has_pue_notice = \false)
        {
        }
        /**
         * Echoes the admin notice, attach to admin_notices
         *
         * @see \Tribe__Admin__Notice__Plugin_Download::add_required_plugin()
         *
         * @since 4.9.17 Altered the notice to remove "latest version" verbiage since "+" is now added to the version numbers.
         */
        public function show_inactive_plugins_alert()
        {
        }
        /**
         * Implodes a list of items with proper grammar.
         *
         * If only 1 item, no grammar. If 2 items, just conjunction. If 3+ items, commas with conjunction.
         *
         * @param array $items List of items to implode
         *
         * @return string String of items
         */
        public function implode_with_grammar($items)
        {
        }
    }
    /**
     * When appropriate, displays a plugin upgrade message "inline" within the plugin
     * admin screen.
     *
     * This is drawn from the Upgrade Notice section of the plugin readme.txt file (ie,
     * the one belonging to the current stable accessible via WP SVN - at least by
     * default).
     */
    class Tribe__Admin__Notice__Plugin_Upgrade_Notice
    {
        /**
         * Currently installed version of the plugin
         *
         * @var string
         */
        protected $current_version = '';
        /**
         * The plugin path as it is within the plugins directory, ie
         * "some-plugin/main-file.php".
         *
         * @var string
         */
        protected $plugin_path = '';
        /**
         * Contains the plugin upgrade notice (empty if none are available).
         *
         * @var string
         */
        protected $upgrade_notice = '';
        /**
         * Test for and display any plugin upgrade messages (if any are available) inline
         * beside the plugin listing itself.
         *
         * The optional third param is the object which actually checks to see if there
         * are any upgrade notices worth displaying. If not provided, an object of the
         * default type will be created (which connects to WP SVN).
         *
         * @param string $current_version
         * @param string $plugin_path (ie "plugin-dir/main-file.php")
         */
        public function __construct($current_version, $plugin_path)
        {
        }
        /**
         * Test if there is a plugin upgrade notice and displays it if so.
         *
         * Expects to fire during "in_plugin_update_message-{plugin_path}", therefore
         * this should only run if WordPress has detected that an upgrade is indeed
         * available.
         */
        public function maybe_run()
        {
        }
        /**
         * Tests to see if an upgrade notice is available.
         */
        protected function test_for_upgrade_notice()
        {
        }
        /**
         * Returns a cache key unique to the current plugin path and version, that
         * still fits within the 45-char limit of regular WP transient keys.
         *
         * @return string
         */
        protected function cache_key()
        {
        }
        /**
         * Returns the period of time (in seconds) for which to cache plugin upgrade messages.
         *
         * @return int
         */
        protected function cache_expiration()
        {
        }
        /**
         * Looks at the current stable plugin readme.txt and parses to try and find the first
         * available upgrade notice relating to a plugin version higher than this one.
         *
         * By default, WP SVN is the source.
         */
        protected function discover_upgrade_notice()
        {
        }
        /**
         * Forms the expected URL to the trunk readme.txt file as it is on WP SVN
         * or an empty string if for any reason it cannot be determined.
         *
         * @return string
         */
        protected function form_wp_svn_readme_url()
        {
        }
        /**
         * Given a standard Markdown-format WP readme.txt file, finds the first upgrade
         * notice (if any) for a version higher than $this->current_version.
         *
         * @param  string $readme
         * @return string
         */
        protected function parse_for_upgrade_notice($readme)
        {
        }
        /**
         * Convert the plugin version header and any links from Markdown to HTML.
         */
        protected function format_upgrade_notice()
        {
        }
        /**
         * Render the actual upgrade notice.
         *
         * Please note if plugin-specific styling is required for the message, you can
         * use an ID generated by WordPress for one of the message's parent elements
         * which takes the form "{plugin_name}-update". Example:
         *
         *     #the-events-calendar-update .tribe-plugin-update-message { ... }
         */
        public function display_message()
        {
        }
    }
}
namespace Tribe\Admin\Notice {
    /**
     * Class Notice
     *
     * @since 4.14.2
     *
     * @package Tribe\Admin\Notice
     */
    class Service_Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Registers the objects and filters required by the provider to manage admin notices.
         *
         * @since 4.14.2
         */
        public function register()
        {
        }
        /**
         * Setup for things that require plugins loaded first.
         *
         * @since 4.14.2
         */
        public function plugins_loaded()
        {
        }
        /**
         * This method is used to enqueue additional assets for the admin notices.
         * Each should conditionally call an internal `enqueue_additional_assets()` function to handle the enqueueing.
         *
         * @since 5.1.10
         */
        public function enqueue_additional_assets()
        {
        }
    }
    /**
     * Various WordPress version notices.
     *
     * @since 4.12.17
     */
    class WP_Version
    {
        /**
         * Register the various WordPress version notices.
         *
         * @since 4.12.17
         */
        public function hook()
        {
        }
        /**
         * Whether the WordPress 5.7 notice should display.
         *
         * @since 4.12.17
         *
         * @return boolean
         */
        public function wp_version_57_should_display()
        {
        }
        /**
         * HTML for the WordPress 5.7 notice.
         *
         * @since 4.12.17
         *
         * @see https://evnt.is/wp5-7
         *
         * @return string
         */
        public function wp_version_57_display_notice()
        {
        }
    }
}
namespace {
    /**
     * @since 4.3
     */
    class Tribe__Admin__Notices
    {
        /**
         * The name of the transient that will store transient notices.
         *
         * @since 4.3
         *
         * @var string
         */
        public static $transient_notices_name = '_tribe_admin_notices';
        /**
         * Whether, in this request, transient notices have been pruned already or not.
         *
         * @since 4.3
         *
         * @var bool
         */
        protected $did_prune_transients = \false;
        /**
         * Static Singleton Factory Method
         *
         * @since 4.3
         *
         * @return self
         */
        public static function instance()
        {
        }
        /**
         * User Meta Key that stores which notices have been dismissed.
         *
         * @since 4.3
         *
         * @var string
         */
        public static $meta_key = 'tribe-dismiss-notice';
        /**
         * User Meta Key prefix that stores when notices have been dismissed.
         *
         * @since 4.13.0
         *
         * @var string
         */
        public static $meta_key_time_prefix = 'tribe-dismiss-notice-time-';
        /**
         * Stores all the Notices and it's configurations
         *
         * @since 4.3
         *
         * @var array
         */
        protected $notices = [];
        /**
         * This will happen on the `current_screen` and will hook to the correct actions and display the notices
         *
         * @since 4.3
         *
         * @return void
         */
        public function hook()
        {
        }
        /**
         * This will allow the user to Dismiss the Notice using JS.
         *
         * We will dismiss the notice without checking to see if the slug was already
         * registered (via a call to exists()) for the reason that, during dismissal
         * ajax request, some valid notices may not have been registered yet.
         *
         * @since 4.3
         *
         * @return void
         */
        public function maybe_dismiss()
        {
        }
        /**
         * Allows a Magic to remove the Requirement of creating a callback
         *
         * @since 4.3
         *
         * @param string $name      Name of the method used to create the slug of the notice.
         * @param array  $arguments Which arguments were used, normally empty.
         *
         * @return string
         */
        public function __call($name, $arguments)
        {
        }
        /**
         * This is a helper to actually print the Message
         *
         * @since 4.3
         *
         * @param string      $slug    The name of the notice.
         * @param string      $content The content of the notice.
         * @param boolean     $return  Echo or return the content.
         * @param string|bool $wrap    An optional HTML tag to wrap the content.
         *
         * @return bool|string
         */
        public function render($slug, $content = \null, $return = \true, $wrap = \false)
        {
        }
        /**
         * This is a helper to print the message surrounded by `p` tags.
         *
         * @since 4.3
         *
         * @param string  $slug    The name of the notice.
         * @param string  $content The content of the notice.
         * @param boolean $return  Echo or return the content.
         *
         * @return boolean|string
         */
        public function render_paragraph($slug, $content = \null, $return = \true)
        {
        }
        /**
         * Checks if a given notice is rendered
         *
         * @since  4.7.10
         *
         * @param string $slug Which notice to check.
         *
         * @return boolean
         */
        public function is_rendered($slug)
        {
        }
        /**
         * Checks if a given string is a notice rendered
         *
         * @since  4.7.10
         *
         * @param string $slug Which notice to check.
         * @param string $html Which html string we are check.
         *
         * @return boolean
         */
        public function is_rendered_html($slug, $html)
        {
        }
        /**
         * Checks if a given user has dismissed a given notice.
         *
         * @since 4.13.0
         *
         * @param string   $slug    The name of the notice.
         * @param int|null $user_id The user ID.
         *
         * @return boolean
         */
        public function has_user_dismissed($slug, $user_id = \null)
        {
        }
        /**
         * Checks if a given user has dismissed a given notice.
         *
         * @since      4.3
         * @deprecated 4.13.0 Deprecated in favor of correcting the typo.
         *
         * @param string   $slug    The Name of the Notice
         * @param int|null $user_id The user ID
         *
         * @return boolean
         */
        public function has_user_dimissed($slug, $user_id = \null)
        {
        }
        /**
         * Gets the last Dismissal for a given notice slug and user.
         *
         * @since 4.13.0
         *
         * @param string   $slug    Slug of the notice to look for.
         * @param int|null $user_id Which user? If null will default to current user.
         *
         * @return false|\Tribe\Utils\Date_I18n
         */
        public function get_last_dismissal($slug, $user_id = \null)
        {
        }
        /**
         * Determines if a given notice needs to be re-displayed in case of recurring notice.
         *
         * @since 4.13.0
         *
         * @param string   $slug    Slug of the notice to look for.
         * @param int|null $user_id Which user? If null will default to current user.
         *
         * @return false|\Tribe\Utils\Date_I18n
         */
        public function should_recurring_notice_show($slug, $user_id = \null)
        {
        }
        /**
         * A Method to actually add the Meta value telling that this notice has been dismissed
         *
         * @since 4.3
         *
         * @param string   $slug    The Name of the Notice
         * @param int|null $user_id The user ID
         *
         * @return boolean
         */
        public function dismiss($slug, $user_id = \null)
        {
        }
        /**
         * Removes the User meta holding if a notice was dismissed
         *
         * @param string   $slug    The Name of the Notice
         * @param int|null $user_id The user ID
         *
         * @return boolean
         */
        public function undismiss($slug, $user_id = \null)
        {
        }
        /**
         * Undismisses the specified notice for all users.
         *
         * @since 4.3
         *
         * @param string $slug
         *
         * @return int
         */
        public function undismiss_for_all($slug)
        {
        }
        /**
         * Register a Notice and attach a callback to the required action to display it correctly
         *
         * @since 4.3
         *
         * @param string          $slug             Slug to save the notice
         * @param callable|string $callback         A callable Method/Function to actually display the notice
         * @param array           $arguments        Arguments to Setup a notice
         * @param callable|null   $active_callback  An optional callback that should return bool values
         *                                          to indicate whether the notice should display or not.
         *
         * @return stdClass
         */
        public function register($slug, $callback, $arguments = [], $active_callback = \null)
        {
        }
        /**
         * Create a transient Admin Notice easily.
         *
         * A transient admin notice is a "fire-and-forget" admin notice that will display once registered and
         * until dismissed (if dismissible) without need, on the side of the source code, to register it on each request.
         *
         * @since  4.7.7
         *
         * @param string $slug      Slug to save the notice
         * @param string $html      The notice output HTML code
         * @param array  $arguments Arguments to Setup a notice
         * @param int    $expire    After how much time (in seconds) the notice will stop showing.
         *
         * @return stdClass Which notice was registered
         */
        public function register_transient($slug, $html, $arguments = [], $expire = \null)
        {
        }
        /**
         * Removes a transient notice based on its slug.
         *
         * @since 4.7.7
         *
         * @param string $slug
         */
        public function remove_transient($slug)
        {
        }
        /**
         * Removes a notice based on its slug.
         *
         * @since 4.3
         *
         * @param string $slug
         *
         * @return bool
         */
        public function remove($slug)
        {
        }
        /**
         * Gets the configuration for the Notices
         *
         * @since 4.3
         *
         * @param string $slug
         *
         * @return object|array|null
         */
        public function get($slug = \null)
        {
        }
        /**
         * Checks if a given notice exists
         *
         * @since 4.3
         *
         * @param string $slug
         *
         * @return bool
         */
        public function exists($slug)
        {
        }
        /**
         * Returns an array of registered transient notices.
         *
         * @since 4.7.7
         *
         * @return array An associative array in the shape [ <slug> => [ <html>, <args>, <expire timestamp> ] ]
         */
        protected function get_transients()
        {
        }
        /**
         * Updates/sets the transient notices transient.
         *
         * @since 4.7.7
         *
         * @param array $notices An associative array in the shape [ <slug> => [ <html>, <args>, <expire timestamp> ] ]
         */
        protected function set_transients($notices)
        {
        }
        /**
         * Checks whether a specific transient admin notices is being shown or not, depending on its expiration and
         * dismissible status.
         *
         *
         * @since 4.11.1
         *
         * @param string|array $slug The slug, or slugs, of the transient notices to check. This is the same slug used
         *                           to register the transient notice in the `tribe_transient_notice` function or the
         *                           `Tribe__Admin__Notices::register_transient()` method.
         *
         * @return bool Whether the transient notice is showing or not.
         */
        public function showing_transient_notice($slug)
        {
        }
        /**
         * Checks whether a transient notice expired or not.
         *
         * @since 4.11.1
         *
         * @param string|array $slug The slug, or slugs, of the transient notices to check. This is the same slug used
         *                           to register the transient notice in the `tribe_transient_notice` function or the
         *                           `Tribe__Admin__Notices::register_transient()` method.
         *
         * @return bool Whether the transient notice is expired or not.
         */
        protected function transient_notice_expired($slug)
        {
        }
        /**
         * Checks whether a notice is being shown or not; the result takes the notice callback and dismissible status into
         * account.
         *
         * @since 4.11.1
         *
         * @param string|array $slug The slug, or slugs, of the transient notices to check. This is the same slug used
         *                           to register the transient notice in the `tribe_transient_notice` function or the
         *                           `Tribe__Admin__Notices::register_transient()` method.
         *
         * @return bool Whether the notice is showing or not.
         */
        public function showing_notice($slug)
        {
        }
    }
}
namespace Tribe\Admin {
    /**
     * Class Pages.
     *
     * @since 4.15.0
     */
    class Pages
    {
        /**
         * Get registered pages.
         *
         * @since 4.15.0
         *
         * @return array $pages {
         *     Array containing the registered pages.
         *
         *     @type array $page_id {
         *         @type string      id           Id to reference the page.
         *         @type array       title        Page title. Used in menus and breadcrumbs.
         *         @type string|null parent       Parent ID. Null for new top level page.
         *         @type string      path         Path for this page, full path in app context; ex /analytics/report
         *         @type string      capability   Capability needed to access the page.
         *         @type string      icon         Icon. Dashicons helper class, base64-encoded SVG, or 'none'.
         *         @type int         position     Menu item position.
         *         @type int         order        Navigation item order.
         *         @type callable    callback     The function to be called to output the content for the page.
         *     }
         * }
         */
        public function get_pages()
        {
        }
        /**
         * Adds a page to `tec-admin`.
         *
         * @since 4.15.0
         *
         * @param array $options {
         *   Array describing the page.
         *
         *   @type string      id           Id to reference the page.
         *   @type string      title        Page title. Used in menus and breadcrumbs.
         *   @type string|null parent       Parent ID. Null for new top level page.
         *   @type string      path         Path for this page, full path in app context; ex /analytics/report
         *   @type string      capability   Capability needed to access the page.
         *   @type string      icon         Icon. Dashicons helper class, base64-encoded SVG, or 'none'.
         *   @type int         position     Menu item position.
         *   @type int         order        Navigation item order.
         *   @type callable    callback     The function to be called to output the content for the page.
         * }
         *
         * @return string $page The resulting page's hook_suffix.
         *
         */
        public function register_page($options = [])
        {
        }
        /**
         * Get the current page.
         *
         * @since 4.15.0
         *
         * @return string|boolean Current page or false if not registered with this controller.
         */
        public function get_current_page()
        {
        }
        /**
         * Determine the current page.
         *
         * @since 4.15.0
         *
         * @return string|boolean Current page or false if not registered with this controller.
         */
        public function determine_current_page()
        {
        }
        /**
         * Connect an existing page to wp-admin.
         *
         * @since 4.15.0
         *
         * @param array $options {
         *   Array describing the page.
         *
         *   @type string       id           Id to reference the page.
         *   @type string|array title        Page title. Used in menus and breadcrumbs.
         *   @type string|null  parent       Parent ID. Null for new top level page.
         *   @type string       path         Path for this page. E.g. admin.php?page=wc-settings&tab=checkout
         *   @type string       capability   Capability needed to access the page.
         *   @type string       icon         Icon. Dashicons helper class, base64-encoded SVG, or 'none'.
         *   @type int          position     Menu item position.
         * }
         */
        public function connect_page($options = [])
        {
        }
        /**
         * Get the capability.
         *
         * @param string $capability The capability required for a TEC page to be displayed to the user.
         *
         * @since 4.15.0
         *
         * @return string The capability required for a TEC page to be displayed to the user.
         */
        public static function get_capability($capability = 'manage_options')
        {
        }
        /**
         * Define if is a `tec` admin page (registered).
         *
         * @since 4.15.0
         *
         * @param string $page_id The ID of the page to check if is a `tec` admin page.
         *
         * @return boolean True if is a `tec` admin page, false otherwise.
         */
        public function is_tec_page($page_id = '')
        {
        }
        /**
         * Get pages with tabs.
         * @since 4.15.0
         *
         * @param array $pages The list of pages with tabs.
         * @return array $pages The list of pages with tabs, filtered.
         */
        public function get_pages_with_tabs($pages = [])
        {
        }
        /**
         * Check if the current page has tabs.
         *
         * @since 4.15.0
         *
         * @param string $page The page slug.
         * @return boolean True if the page has tabs, false otherwise.
         */
        public function has_tabs($page = '')
        {
        }
        /**
         * Generic page.
         *
         * @since 4.15.0
         */
        public static function render_page()
        {
        }
    }
    /**
     * Admin Settings class.
     *
     * @since 5.0.0
     */
    class Settings
    {
        /**
         * Loaded image field assets if not already loaded.
         *
         * @since 5.0.0
         *
         * @return void
         */
        public function maybe_load_image_field_assets()
        {
        }
        /**
         * Logic to load image field assets.
         *
         * @since 5.0.0
         *
         * @return bool
         */
        public function should_load_image_field_assets()
        {
        }
        /**
         * Load color field assets if not already loaded.
         *
         * @since 5.0.0
         *
         * @return void
         */
        public function maybe_load_color_field_assets()
        {
        }
        /**
         * Logic to load color field assets.
         *
         * @since 5.0.0
         *
         * @return bool
         */
        public function should_load_color_field_assets()
        {
        }
    }
    /**
     * Class Admin Troubleshooting.
     *
     * @since 4.14.2
     *
     * @package Tribe\Admin
     */
    class Troubleshooting
    {
        /**
         * Defines the slug of the troubleshooting page in the WP admin menu item.
         *
         * @since 4.14.2
         *
         * @var string the troubleshooting menu slug.
         */
        const MENU_SLUG = 'tec-troubleshooting';
        /**
         * Class constructor.
         *
         * @since 4.14.2
         *
         */
        public function hook()
        {
        }
        /**
         * This method created the troubleshooting page and adds it to TEC menu.
         *
         * @since 4.14.2
         *
         */
        public function add_menu_page()
        {
        }
        /**
         * Gets the required capability for the troubleshooting page.
         *
         * @since 4.14.2
         *
         * @return string Which capability we required for the troubleshooting page.
         */
        public function get_required_capability()
        {
        }
        /**
         * Hooked to admin_body_class to add a class for troubleshooting page.
         *
         * @since 4.15.0
         *
         * @param string $classes a space separated string of classes to be added to body.
         *
         * @return string $classes a space separated string of classes to be added to body.
         */
        public function admin_body_class($classes)
        {
        }
        /**
         * Adds the troubleshooting menu to the the WP admin bar under events.
         *
         * @since 4.14.2
         *
         */
        public function add_toolbar_item()
        {
        }
        /**
         * Checks if the current page is the troubleshooting page.
         *
         * @since 4.14.2
         *
         * @return boolean returns true if the current page is the troubleshooting page.
         */
        public function is_current_page()
        {
        }
        /**
         * Renders the Troubleshooting page.
         *
         * @since 4.14.2
         *
         */
        public function do_menu_page()
        {
        }
        /**
         * This method checks if there are any active issues that need to be flagged.
         *
         * @since 4.14.2
         *
         * @return boolean returns true if there are any active issues.
         */
        public function is_any_issue_active()
        {
        }
        /**
         * Checks if any active TEC plugins require an update.
         *
         * @since 4.14.2
         *
         * @return boolean returns true is any of the plugins requires an update.
         */
        public function is_any_tec_plugin_out_of_date()
        {
        }
        /**
         * Checks if any of the issues defined are active.
         *
         * @since 4.14.2
         *
         * @param string $slug the slug of active issue.
         *
         * @return boolean returns a boolean value for each individual issue depending on whether it is active or not.
         */
        public function is_active_issue($slug)
        {
        }
        /**
         * Displays issues found in the UI.
         *
         * @since 4.14.2
         *
         * @return array of issues which are displayed on the troubleshooting page.
         */
        public function get_issues_found()
        {
        }
        /**
         * Defines common troubleshooting issues and displays them in the UI.
         *
         * @since 4.14.2
         *
         * @return array of common issues which are displayed on the troubleshooting page.
         */
        public function get_common_issues()
        {
        }
        /**
         * Fired to display notices in the admin pages where the method is called.
         *
         * @since 4.14.2
         *
         * @param string $page the page which the action is being applied.
         *
         */
        public function admin_notice($page)
        {
        }
    }
}
namespace Tribe\Admin\Upsell_Notice {
    class Main
    {
        /**
         * Stores the instance of the template engine that we will use for rendering the page.
         *
         * @since 4.14.17
         *
         * @var Tribe__Template
         */
        protected $template;
        /**
         * Render upsell notice.
         * 
         * @since 4.14.17
         *
         * @param array  $args Array of arguments that will ultimately be sent to the template.
         * @param bool   $echo Whether or not to echo the HTML. Defaults to true.
         *
         * @return string HTML of upsell notice.
         */
        public function render($args, $echo = true)
        {
        }
    }
}
namespace Tribe\Admin {
    /**
     * Admin Wysiwyg class.
     *
     * @since 5.0.12
     */
    class Wysiwyg
    {
        /**
         * Unique name given to editor in case more than one is being used on the same page.
         *
         * @since 5.0.12
         *
         * @var string
         */
        protected $name = '';
        /**
         * Initial HTML of the editor.
         *
         * @since 5.0.12
         *
         * @var string
         */
        protected $value = '';
        /**
         * Settings to pass into the editor.
         *
         * @since 5.0.12
         *
         * @var array
         */
        protected $args = [];
        /**
         * Create a new Wysiwyg object.
         *
         * @since 5.0.12
         *
         * @param string $name  Unique name given to editor.
         * @param string $value Initial value/HTML.
         * @param array  $args  Array of settings.
         *
         * @return void
         */
        function __construct($name, $value = '', $args = [])
        {
        }
        /**
         * Filters editor buttons.
         *
         * @since 5.0.12
         *
         * @param  array $buttons Array of buttons to include.
         *
         * @return array Filtered array of buttons.
         */
        public function filter_buttons($buttons)
        {
        }
        /**
         * Filter 2nd row of buttons.
         *
         * @since 5.0.12
         *
         * @param  array $buttons Array of buttons to include.
         *
         * @return array Filtered array of buttons.
         */
        public function maybe_filter_buttons_2($buttons)
        {
        }
        /**
         * Get HTML of editor.
         *
         * @since 5.0.12
         *
         * @return string HTML of editor
         */
        public function get_html()
        {
        }
        /**
         * Renders editor HTML.
         *
         * @since 5.0.12
         *
         * @return void
         */
        public function render_html()
        {
        }
    }
}
namespace {
    /**
     * Handles common AJAX operations.
     *
     * @since  4.6
     */
    class Tribe__Ajax__Dropdown
    {
        /**
         * Hooks the AJAX for Select2 Dropdowns
         *
         * @since  4.6
         *
         * @return void
         */
        public function hook()
        {
        }
        /**
         * Search for Terms using Select2
         *
         * @since  4.6
         *
         * @param string|array<string|mixed> $search Search string from Select2
         * @param int                        $page   When we deal with pagination
         * @param array<string|mixed>        $args   Which arguments we got from the Template
         * @param string                     $source What source it is
         *
         * @return array<string|mixed>
         */
        public function search_terms($search, $page, $args, $source)
        {
        }
        /**
         * Search for Posts using Select2
         *
         * @since  4.12.17
         *
         * @param string|array<string,mixed> $search   Search string from Select2.
         * @param int                        $page     Page we want when we're dealing with pagination.
         * @param array<string,mixed>        $args     Arguments to pass to the query.
         * @param string|int                 $selected Selected item ID.
         *
         * @return array<string|mixed>        An Array of results.
         */
        public function search_posts($search, $page = 1, $args = [], $selected = \null)
        {
        }
        /**
         * Formats a given array of posts to be displayed into the Dropdown.js module with SelectWoo.
         *
         * @since 4.12.17
         *
         * @param array<WP_Post>    $posts
         * @param null|int $selected
         * @param boolean  $pagination
         *
         * @return array
         */
        public function format_posts_for_dropdown(array $posts, $selected = \null, $pagination = \false)
        {
        }
        /**
         * Sorts all the Terms for Select2 hierarchically.
         *
         * @since  4.6
         *
         * @param array<int|object>   &$terms  Array of Terms from `get_terms`.
         * @param array<string|mixed> &$into   Variable where we will store the.
         * @param integer              $parent Used for the recursion.
         *
         * @return array<string|mixed>
         */
        public function sort_terms_hierarchically(&$terms, &$into, $parent = 0)
        {
        }
        /**
         * Makes sure we have arrays for the JS data for Select2
         *
         * @since  4.6
         *
         * @param object|array<string|mixed> $results The Select2 results
         *
         * @return array<string|mixed>
         */
        public function convert_children_to_array($results)
        {
        }
        /**
         * Parses the Params coming from Select2 Search box
         *
         * @since  4.6
         *
         * @param array<string|mixed> $params Params to overwrite the defaults
         *
         * @return object
         */
        public function parse_params($params)
        {
        }
        /**
         * The default Method that will route all the AJAX calls from our Dropdown AJAX requests
         * It is like a Catch All on `wp_ajax_tribe_dropdown` and `wp_ajax_nopriv_tribe_dropdown`
         *
         * @since  4.6
         *
         * @return void
         */
        public function route()
        {
        }
        /**
         * Avoid throwing fatals or notices on sources that are invalid
         *
         * @since  4.6
         *
         * @param string $name
         * @param mixed  $arguments
         *
         * @return void
         */
        public function __call($name, $arguments)
        {
        }
    }
    /**
     * Class Tribe__Ajax__Operations
     *
     * Handles common AJAX operations.
     */
    class Tribe__Ajax__Operations
    {
        public function verify_or_exit($nonce, $action, $exit_data = [])
        {
        }
        public function exit_data($data = [])
        {
        }
    }
    /**
     * Class that handles the integration with our Shop App API
     */
    class Tribe__App_Shop
    {
        /**
         * Slug of the WP admin menu item
         */
        const MENU_SLUG = 'tribe-app-shop';
        /**
         * Class constructor
         */
        public function __construct()
        {
        }
        /**
         * Adds the page to the admin menu
         */
        public function add_menu_page()
        {
        }
        /**
         * Adds a link to the shop app to the WP admin bar
         */
        public function add_toolbar_item()
        {
        }
        /**
         * Registers the plugin assets
         */
        protected function register_assets()
        {
        }
        /**
         * Checks if the current page is the app shop
         *
         * @since 4.5.7
         *
         * @return bool
         */
        public function is_current_page()
        {
        }
        /**
         * Renders the Shop App page
         */
        public function do_menu_page()
        {
        }
        /**
         * Static Singleton Factory Method
         *
         * @return Tribe__App_Shop
         */
        public static function instance()
        {
        }
    }
    /**
     * Handles adding script data to the page in cases where localizing a
     * specific script is not suitable.
     *
     * Should generally be accessed via tribe( 'tribe.asset.script-data' )
     * rather than via direct instantiation.
     */
    class Tribe__Asset__Data
    {
        /**
         * Container for any JS data objects that should be added to the page.
         *
         * @var array
         */
        protected $objects = [];
        /**
         * Hooks up the method used to actually render the JSON data.
         */
        public function hook()
        {
        }
        /**
         * Adds the provided data to the list of objects that should be available
         * to other scripts.
         *
         * @param string $object_name Object name.
         * @param array  $data        Object data.
         */
        public function add($object_name, $data)
        {
        }
        /**
         * Outputs the
         * @internal
         */
        public function render_json()
        {
        }
    }
    class Tribe__Asset__Factory
    {
        /**
         * @param string $name
         *
         * @return Tribe__Asset__Abstract_Asset|false Either a new instance of the asset class or false.
         */
        public function make_for_name($name)
        {
        }
        protected function get_asset_class_name($name)
        {
        }
        /**
         * @return string
         */
        protected function get_asset_class_name_prefix()
        {
        }
        /**
         * @return Tribe__Asset__Factory
         */
        public static function instance()
        {
        }
    }
    /**
     * Class used to register and enqueue assets across our plugins.
     *
     * @since 4.3
     */
    class Tribe__Assets
    {
        /**
         * Stores all the Assets and it's configurations.
         *
         * @var array
         */
        protected $assets = [];
        /**
         * Static Singleton Factory Method.
         *
         * @since 4.3
         *
         * @return self
         */
        public static function instance()
        {
        }
        /**
         * Register the Methods in the correct places.
         *
         * @since 4.3
         */
        public function __construct()
        {
        }
        /**
         * Depending on how certain scripts are loaded and how much cross-compatibility is required we need to be able to
         * create noConflict backups and restore other scripts, which normally need to be printed directly on the scripts.
         *
         * @since 5.0.0
         *
         * @param string $tag    Tag we are filtering.
         * @param string $handle Which is the ID/Handle of the tag we are about to print.
         *
         * @return string Script tag with the before and after strings attached to it.
         */
        public function filter_print_before_after_script($tag, $handle) : string
        {
        }
        /**
         * Handles adding localization data, when attached to `script_loader_tag` which allows dependencies to load in their
         * localization data as well.
         *
         * @since 4.13.0
         *
         * @param string $tag    Tag we are filtering.
         * @param string $handle Which is the ID/Handle of the tag we are about to print.
         *
         * @return string Script tag with the localization variable HTML attached to it.
         */
        public function filter_add_localization_data($tag, $handle)
        {
        }
        /**
         * Filters the Script tags to attach Async and/or Defer based on the rules we set in our Asset class.
         *
         * @since 4.13.0
         *
         * @param string $tag    Tag we are filtering.
         * @param string $handle Which is the ID/Handle of the tag we are about to print.
         *
         * @return string Script tag with the defer and/or async attached.
         */
        public function filter_tag_async_defer($tag, $handle)
        {
        }
        /**
         * Filters the Script tags to attach type=module based on the rules we set in our Asset class.
         *
         * @since 4.14.14
         *
         * @param string $tag    Tag we are filtering.
         * @param string $handle Which is the ID/Handle of the tag we are about to print.
         *
         * @return string Script tag with the type=module
         */
        public function filter_modify_to_module($tag, $handle)
        {
        }
        /**
         * Register the Assets on the correct hooks.
         *
         * @since 4.3
         * @param array|object|null $assets Array of asset objects, single asset object, or null.
         *
         * @return void
         */
        public function register_in_wp($assets = \null)
        {
        }
        /**
         * Enqueues registered assets based on their groups.
         *
         * @since 4.7
         *
         * @uses  Tribe__Assets::enqueue()
         *
         * @param string|array $groups Which groups will be enqueued.
         */
        public function enqueue_group($groups)
        {
        }
        /**
         * Enqueues registered assets.
         *
         * This method is called on whichever action (if any) was declared during registration.
         *
         * It can also be called directly with a list of asset slugs to forcibly enqueue, which may be
         * useful where an asset is required in a situation not anticipated when it was originally
         * registered.
         *
         * @since 4.3
         *
         * @param string|array $forcibly_enqueue
         */
        public function enqueue($forcibly_enqueue = \null)
        {
        }
        /**
         * Returns the path to a minified version of a js or css file, if it exists.
         * If the file does not exist, returns false.
         *
         * @since 4.3
         * @since 4.5.10 Removed ability to pass a filepath as $url
         *
         * @param string $url The absolute URL to the un-minified file.
         *
         * @return string|false The url to the minified version or false, if file not found.
         */
        public static function maybe_get_min_file($url)
        {
        }
        /**
         * Register an Asset and attach a callback to the required action to display it correctly.
         *
         * @since 4.3
         *
         * @param object            $origin    The main object for the plugin you are enqueueing the asset for.
         * @param string            $slug      Slug to save the asset - passes through `sanitize_title_with_dashes()`.
         * @param string            $file      The asset file to load (CSS or JS), including non-minified file extension.
         * @param array             $deps      The list of dependencies or callable function that will return a list of dependencies.
         * @param string|array|null $action    The WordPress action(s) to enqueue on, such as `wp_enqueue_scripts`,
         *                                     `admin_enqueue_scripts`, or `login_enqueue_scripts`.
         * @param string|array      $arguments {
         *     Optional. Array or string of parameters for this asset.
         *
         *     @type array|string|null  $action         The WordPress action(s) this asset will be enqueued on.
         *     @type int                $priority       Priority in which this asset will be loaded on the WordPress action.
         *     @type string             $file           The relative path to the File that will be enqueued, uses the $origin to get the full path.
         *     @type string             $type           Asset Type, `js` or `css`.
         *     @type array              $deps           An array of other asset as dependencies.
         *     @type string             $version        Version number, used for cache expiring.
         *     @type string             $media          Used only for CSS, when to load the file.
         *     @type bool               $in_footer      A boolean determining if the javascript should be loaded on the footer.
         *     @type array|object       $localize       {
         *          Variables needed on the JavaScript side.
         *
         *          @type string       $name     Name of the JS variable.
         *          @type string|array $data     Contents of the JS variable.
         *     }
         *     @type callable[]   $conditionals   An callable method or an array of them, that will determine if the asset is loaded or not.
         * }
         *
         * @return object|false The registered object or false on error.
         */
        public function register($origin, $slug, $file, $deps = [], $action = \null, $arguments = [])
        {
        }
        /**
         * Parse the localize argument for a given asset object.
         *
         * @since 4.9.12
         *
         * @param  stdClass $asset Argument that set that asset.
         *
         * @return stdClass
         */
        public function parse_argument_localize(\stdClass $asset)
        {
        }
        /**
         * Removes an Asset from been registered and enqueue.
         *
         * @since 4.3
         *
         * @param  string $slug Slug of the Asset.
         *
         * @return bool
         */
        public function remove($slug)
        {
        }
        /**
         * Get the Asset Object configuration.
         *
         * @since 4.3
         * @since 4.11.0  Added $sort param.
         *
         * @param string|array $slug Slug of the Asset.
         * @param boolean      $sort  If we should do any sorting before returning.
         *
         * @return array|object|null Array of asset objects, single asset object, or null if looking for a single asset but
         *                           it was not in the array of objects.
         */
        public function get($slug = \null, $sort = \true)
        {
        }
        /**
         * Checks if an Asset exists.
         *
         * @param  string|array $slug Slug of the Asset.
         *
         * @return bool
         */
        public function exists($slug)
        {
        }
        /**
         * Prints the `script` (JS) and `link` (CSS) HTML tags associated with one or more assets groups.
         *
         * The method will force the scripts and styles to print overriding their registration and conditional.
         *
         * @since 4.12.6
         *
         * @param string|array $group Which group(s) should be enqueued.
         * @param bool         $echo  Whether to print the group(s) tag(s) to the page or not; default to `true` to
         *                            print the HTML `script` (JS) and `link` (CSS) tags to the page.
         *
         * @return string The `script` and `link` HTML tags produced for the group(s).
         */
        public function print_group($group, $echo = \true)
        {
        }
        /**
         * Enqueue StellarWP fonts.
         *
         * @since 5.1.3
         *
         * @return void
         */
        public function enqueue_stellar_wp_fonts()
        {
        }
    }
    /**
     * Class used to hook into the assets being loaded
     *
     * @since 4.7.7
     */
    class Tribe__Assets_Pipeline
    {
        /**
         * Filter to listen when a tag is attached to the HTML.
         *
         * @since 4.7.7
         */
        public function hook()
        {
        }
        /**
         * Before underscore is loaded to the FE we add two scripts on before and one after to prevent underscore from
         * taking place on the global namespace if lodash is present.
         *
         * @since 4.7.7
         *
         * @param string $tag    The <script> tag for the enqueued script.
         * @param string $handle The script's registered handle.
         *
         * @return string The <script> tag.
         */
        public function prevent_underscore_conflict($tag, $handle)
        {
        }
        /**
         * After select2 is loaded to the FE we add one scripts after to prevent select2 from breaking.
         *
         * @since 4.13.2
         * @since 4.14.18 Ensure we don't run this in the admin.
         *
         * @param string $tag    The <script> tag for the enqueued script.
         * @param string $handle The script's registered handle.
         *
         * @return string The <script> tag.
         */
        public function prevent_select2_conflict($tag, $handle)
        {
        }
    }
    /**
     * Class Tribe__Autoloader
     *
     * Allows for autoloading of Tribe plugins classes.
     *
     * Example usage:
     *
     *      // will be `/var/www/site/wp-content/plugins/the-events-calendar'
     *      $this_dir = dirname(__FILE__);
     *
     *      // gets hold of the singleton instance of the class
     *      $autoloader = Tribe__Autoloader::instance();
     *
     *      // register one by one or use `register_prefixes` method
     *      $autoloader->register_prefix( 'Tribe__Admin__', $this_dir . '/src/Tribe/admin' );
     *      $autoloader->register_prefix( 'Tribe__Admin__', $this_dir . '/src/Tribe/another-dir' );
     *      $autoloader->register_prefix( 'Tribe__Utils__', $this_dir . '/src/Tribe/another-dir' );
     *
     *      // register a direct class to path
     *      $autoloader->register_class( 'Tribe__Some_Class', $this_dir . '/some/path/to/Some_Class.php' );
     *
     *      // register a fallback dir to be searched for the class before giving up
     *      $autoloader->add_fallback_dir( $this_dir . '/all-the-classes' );
     *
     *      // calls `spl_autoload_register`
     *      $autoloader->register_autoloader();
     *
     *      // class will be searched in the path
     *      // `/var/www/site/wp-content/plugins/the-events-calendar/src/Tribe/admin/Some_Class.php'
     *      // and
     *      // `/var/www/site/wp-content/plugins/the-events-calendar/src/Tribe/another-dir/Some_Class.php'
     *      $i = new Tribe__Admin__Some_Class();
     *
     *      // class will be searched in the path
     *      // `/var/www/site/wp-content/plugins/the-events-calendar/utils/some-dir/Some_Util.php'
     *      $i = new Tribe__Utils__Some_Util();
     *
     *      // class will be searched in the path
     *      // `/var/www/site/wp-content/plugins/the-events-calendar/deprecated/Tribe_DeprecatedClass.php'
     *      $i = new Tribe_DeprecatedClass();
     */
    class Tribe__Autoloader
    {
        /**
         * @var Tribe__Autoloader
         */
        protected static $instance;
        /**
         * An arrays of arrays each containing absolute paths.
         *
         * Paths are stored trimming any trailing `/`.
         * E.g. `/var/www/tribe-pro/wp-content/plugins/the-events-calendar/src/Tribe`
         *
         * @var string[][]
         */
        protected $prefixes;
        /**
         * An array of registered prefixes with unique slugs.
         *
         * @var string[]
         */
        protected $prefix_slugs;
        /**
         * The string acting as a directory separator in a class name.
         *
         * E.g.: given `__` as `$dir_separator` then `Admin__Metabox__Some_Metabox`
         * will map to `/Admin/Metabox/SomeMetabox.php`.
         *
         * @var string
         */
        protected $dir_separator = '__';
        /** @var string[] */
        protected $fallback_dirs = [];
        /**
         * @var array
         */
        protected $class_paths = [];
        /**
         * Returns the singleton instance of the class.
         *
         * @return Tribe__Autoloader
         */
        public static function instance()
        {
        }
        /**
         * Registers prefixes and root dirs using an array.
         *
         * Same as calling `register_prefix` on each one.
         *
         * @param array $prefixes_to_root_dirs
         */
        public function register_prefixes(array $prefixes_to_root_dirs)
        {
        }
        /**
         * Associates a class prefix to an absolute path.
         *
         * @param string $prefix   A class prefix, e.g. `Tribe__Admin__`
         * @param string $root_dir The absolute path to the dir containing
         *                         the prefixed classes.
         * @param string $slug     An optional unique slug to associate to the prefix.
         */
        public function register_prefix($prefix, $root_dir, $slug = '')
        {
        }
        /**
         * Triggers the registration of the autoload method in the SPL
         * autoload register.
         */
        public function register_autoloader()
        {
        }
        /**
         * Includes the file defining a class.
         *
         * This is the function that's registered as an autoloader.
         *
         * @param string $class
         */
        public function autoload($class)
        {
        }
        protected function get_prefixed_path($class)
        {
        }
        protected function get_fallback_path($class)
        {
        }
        /**
         * Gets the absolute path to a class file.
         *
         * @param string $class The class name
         *
         * @return string Either the absolute path to the class file or an
         *                empty string if the file was not found.
         */
        public function get_class_path($class)
        {
        }
        /**
         * Get the registered prefix by slug
         *
         * @param string $slug Unique slug for registered prefix.
         *
         * @return false|string Either the prefix registered to the
         *                      unique slug or false if not found.
         */
        public function get_prefix_by_slug($slug)
        {
        }
        /**
         * Adds a folder to search for classes that were not found among
         * the prefixed ones.
         *
         * This is the method to use to register a directory of deprecated
         * classes.
         *
         * @param string $dir An absolute path dto a dir.
         */
        public function add_fallback_dir($dir)
        {
        }
        /**
         * @return string
         */
        public function get_dir_separator()
        {
        }
        /**
         * @param string $dir_separator
         */
        public function set_dir_separator($dir_separator)
        {
        }
        public function register_class($class, $path)
        {
        }
    }
    /**
     * Manage setting and expiring cached data
     *
     * Select actions can be used to force cached
     * data to expire. Implemented so far:
     *  - save_post
     *
     * When used in its ArrayAccess API the cache will provide non persistent storage.
     */
    class Tribe__Cache implements \ArrayAccess
    {
        const SCHEDULED_EVENT_DELETE_TRANSIENT = 'tribe_schedule_transient_purge';
        const NO_EXPIRATION = 0;
        const NON_PERSISTENT = -1;
        /**
         * @var array
         */
        protected $non_persistent_keys = [];
        /**
         * Bootstrap hook
         *
         * @since 4.11.0
         */
        public function hook()
        {
        }
        public static function setup()
        {
        }
        /**
         * @param string       $id
         * @param mixed        $value
         * @param int          $expiration
         * @param string|array $expiration_trigger
         *
         * @return bool
         */
        public function set($id, $value, $expiration = 0, $expiration_trigger = '')
        {
        }
        /**
         * @param              $id
         * @param              $value
         * @param int          $expiration
         * @param string|array $expiration_trigger
         *
         * @return bool
         */
        public function set_transient($id, $value, $expiration = 0, $expiration_trigger = '')
        {
        }
        /**
         * Get cached data. Optionally set data if not previously set.
         *
         * Note: When a default value or callback is specified, this value gets set in the cache.
         *
         * @param string       $id                 The key for the cached value.
         * @param string|array $expiration_trigger Optional. Hook to trigger cache invalidation.
         * @param mixed        $default            Optional. A default value or callback that returns a default value.
         * @param int          $expiration         Optional. When the default value expires, if it gets set.
         * @param mixed        $args               Optional. Args passed to callback.
         *
         * @return mixed
         */
        public function get($id, $expiration_trigger = '', $default = \false, $expiration = 0, $args = [])
        {
        }
        /**
         * @param string       $id
         * @param string|array $expiration_trigger
         *
         * @return mixed
         */
        public function get_transient($id, $expiration_trigger = '')
        {
        }
        /**
         * @param string       $id
         * @param string|array $expiration_trigger
         *
         * @return bool
         */
        public function delete($id, $expiration_trigger = '')
        {
        }
        /**
         * @param string       $id
         * @param string|array $expiration_trigger
         *
         * @return bool
         */
        public function delete_transient($id, $expiration_trigger = '')
        {
        }
        /**
         * Purge all expired tribe_ transients.
         *
         * This uses a modification of the the query from https://core.trac.wordpress.org/ticket/20316
         *
         * @since 4.11.0
         *
         * @return void Just execute the database SQL no return required.
         */
        public function delete_expired_transients()
        {
        }
        /**
         * Flag if we should delete
         *
         * @since 4.11.5
         *
         * @param boolean $value If we should delete transients or not on shutdown.
         *
         * @return void No return for setting the flag.
         */
        public function flag_required_delete_transients($value = \true)
        {
        }
        /**
         * Runs on hook `shutdown` and will delete transients on the end of the request.
         *
         * @since 4.11.5
         *
         * @return void No return for action hook method.
         */
        public function maybe_delete_expired_transients()
        {
        }
        /**
         * @param string       $key
         * @param string|array $expiration_trigger
         *
         * @return string
         */
        public function get_id($key, $expiration_trigger = '')
        {
        }
        /**
         * Returns the time of an action last occurrence.
         *
         * @since 4.9.14 Changed the return value type from `int` to `float`.
         * @since 5.0.17 No longer memoizes the first triggered timestamp.
         *
         * @param string $action The action to return the time for.
         *
         * @return float The time (microtime) an action last occurred, or the current microtime if it never occurred.
         */
        public function get_last_occurrence($action)
        {
        }
        /**
         * Sets the time (microtime) for an action last occurrence.
         *
         * @since 4.9.14 Changed the type of the time stored from an `int` to a `float`.
         *
         * @param string    $action    The action to record the last occurrence of.
         * @param int|float $timestamp The timestamp to assign to the action last occurrence or the current time (microtime).
         *
         * @return boolean IF we were able to set the last occurrence or not.
         */
        public function set_last_occurrence($action, $timestamp = 0)
        {
        }
        /**
         * Builds a key from an array of components and an optional prefix.
         *
         * @param mixed  $components Either a single component of the key or an array of key components.
         * @param string $prefix
         * @param bool   $sort       Whether component arrays should be sorted or not to generate the key; defaults to
         *                           `true`.
         *
         * @return string The resulting key.
         */
        public function make_key($components, $prefix = '', $sort = \true)
        {
        }
        /**
         * Whether a offset exists.
         *
         * @since 4.11.0
         * @since 5.0.13 Will check against cache expiration. Previously would give false positive
         *            if expiration had passed but was cached recently. Will now consider null not set.
         *
         * @param mixed $offset An offset to check for.
         *
         * @return boolean Whether the offset exists in the cache.
         *@link  http://php.net/manual/en/arrayaccess.offsetexists.php
         *
         */
        #[\ReturnTypeWillChange]
        public function offsetExists($offset) : bool
        {
        }
        /**
         * Offset to retrieve.
         *
         * @link  http://php.net/manual/en/arrayaccess.offsetget.php
         *
         * @since 4.11.0
         *
         * @param mixed $offset The offset to retrieve.
         *
         * @return mixed Can return all value types.
         */
        #[\ReturnTypeWillChange]
        public function offsetGet($offset)
        {
        }
        /**
         * Offset to set.
         *
         * @since 4.11.0
         *
         * @link  http://php.net/manual/en/arrayaccess.offsetset.php
         *
         * @param mixed $offset The offset to assign the value to.
         * @param mixed $value  The value to set.
         *
         * @return void
         */
        #[\ReturnTypeWillChange]
        public function offsetSet($offset, $value) : void
        {
        }
        /**
         * Offset to unset.
         *
         * @since 4.11.0
         *
         * @link  http://php.net/manual/en/arrayaccess.offsetunset.php
         *
         * @param mixed $offset The offset to unset.
         *
         * @return void
         */
        #[\ReturnTypeWillChange]
        public function offsetUnset($offset) : void
        {
        }
        /**
         * Removes a group of the cache, for now only `non_persistent` is supported.
         *
         * @since 4.14.13
         *
         * @return bool
         */
        public function reset($group = 'non_persistent')
        {
        }
        /**
         * Warms up the caches for a collection of posts.
         *
         * @since 4.10.2
         *
         * @param array|int $post_ids               A post ID, or a collection of post IDs.
         * @param bool      $update_post_meta_cache Whether to warm-up the post meta cache for the posts or not.
         */
        public function warmup_post_caches($post_ids, $update_post_meta_cache = \false)
        {
        }
        /**
         * If NOT using an external object caching system, then check if the size, in bytes, of the data
         * to write to the database would fit into the `max_allowed_packet` setting or not.
         *
         * @since 4.12.14
         *
         * @param string|array|object $value The value to check.
         *
         * @return bool Whether the data, in its serialized form, would fit into the current database `max_allowed_packet`
         *              setting or not.
         */
        public function data_size_over_packet_size($value)
        {
        }
        /**
         * Returns a transient that might have been stored, due ot its size, in chunks.
         *
         * @since 4.13.3
         *
         * @param string               $id                 The name of the transients to return.
         * @param string|array<string> $expiration_trigger The transient expiration trigger(s).
         *
         * @return false|mixed Either the transient value, joined back into one, or `false` to indicate
         *                     the transient was not found or was malformed.
         */
        public function get_chunkable_transient($id, $expiration_trigger = '')
        {
        }
        /**
         * Sets a transient in the database with the knowledge that, if too large to be stored in one
         * DB row, it will be chunked.
         *
         * The method will redirect to the `set_transient` function if the site is using object caching.
         *
         *
         * @since 4.13.3
         *
         * @param string               $id                 The transient ID.
         * @param mixed                $value              The value to store, that could be chunked.
         * @param int                  $expiration         The transient expiration, in seconds.
         * @param string|array<string> $expiration_trigger The transient expiration trigger(s).
         *
         * @return bool Whether the transient, or the transient chunks, have been stored correctly or not.
         */
        public function set_chunkable_transient($id, $value, $expiration = 0, $expiration_trigger = '')
        {
        }
    }
    /**
     * Listen for events and update their timestamps
     */
    class Tribe__Cache_Listener
    {
        /**
         * The name of the trigger that will be fired when rewrite rules are generated.
         */
        const TRIGGER_GENERATE_REWRITE_RULES = 'generate_rewrite_rules';
        /**
         * The name of the trigger that will be fired when a post is saved.
         */
        const TRIGGER_SAVE_POST = 'save_post';
        /**
         * The name of the trigger that will be fired when an option is updated
         */
        const TRIGGER_UPDATED_OPTION = 'updated_option';
        /**
         * Class constructor.
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Run the init functionality (like add_hooks).
         *
         * @return void
         */
        public function init()
        {
        }
        /**
         * Run the caching functionality that is executed on save post.
         *
         * @param int     $post_id The post_id.
         * @param WP_Post $post    The current post object being saved.w
         */
        public function save_post($post_id, $post)
        {
        }
        /**
         * Run the caching functionality that is executed on saving tribe calendar options.
         *
         * @see 'updated_option'
         *
         * @param string $option_name Name of the updated option.
         * @param mixed  $old_value   The old option value.
         * @param mixed  $value       The new option value.
         */
        public function update_last_save_post($option_name, $old_value, $value)
        {
        }
        /**
         * Run the caching functionality that is executed on saving tribe calendar options.
         *
         * @see   'updated_option'
         *
         * @since 4.11.0
         *
         * @param string $option_name Name of the updated option.
         * @param mixed  $old_value   The old option value.
         * @param mixed  $value       The new option value.
         */
        public function update_last_updated_option($option_name, $old_value, $value)
        {
        }
        /**
         * Filtering for last occurrence triggers.
         *
         * @since 4.13.2
         *
         * @param array<string,bool> $triggers Which options will trigger this given action last occurrence.
         * @param string             $action   Which action this trigger will set.
         * @param array              $args     Which arguments from the updated option method.
         *
         * @return array
         */
        public function filter_action_last_occurrence_triggers(array $triggers = [], $action = '', array $args = [])
        {
        }
        /**
         * For any hook that doesn't need any additional filtering
         *
         * @param $method
         * @param $args
         */
        public function __call($method, $args)
        {
        }
        /**
         * Instance method of the cache listener.
         *
         * @return Tribe__Cache_Listener
         */
        public static function instance()
        {
        }
        /**
         * Run the caching functionality that is executed when rewrite rules are generated.
         *
         * @since 4.9.11
         */
        public function generate_rewrite_rules()
        {
        }
        /**
         * Returns the list of post types that should trigger a cache invalidation on `save_post.
         *
         * @since 5.1.10
         *
         * @return array<string> The list of post types that should trigger a cache invalidation on `save_post`.
         */
        protected function get_cache_invalidation_post_types() : array
        {
        }
    }
    class Tribe__Changelog_Reader
    {
        protected $version_count = 3;
        protected $readme_file = '';
        public function __construct($version_count = 3, $readme_file = '')
        {
        }
        protected function default_readme_file()
        {
        }
        public function get_changelog()
        {
        }
        protected function extract_changelog_section()
        {
        }
        protected function get_readme_file_contents()
        {
        }
    }
    /**
     * Class Tribe__Container
     *
     * Tribe Dependency Injection Container.
     */
    class Tribe__Container extends \TEC\Common\Contracts\Container
    {
        /**
         * @var Tribe__Container
         */
        protected static $instance;
        /**
         * @return Tribe__Container
         */
        public static function init()
        {
        }
    }
    /**
     * Class Tribe__Context
     *
     * @since 4.7.7
     * @since 4.9.5 Made the context immutable.
     */
    class Tribe__Context
    {
        /**
         * The value that will be used to indicate no value was found in any location while trying to read it.
         *
         * @since 4.9.11
         */
        const NOT_FOUND = '__not_found__';
        /**
         * The key to locate a context value as the value of a request variable.
         *
         * @since 4.9.11
         */
        const REQUEST_VAR = 'request_var';
        /**
         * The key to locate a context value as the value of a Tribe option.
         *
         * @since 4.9.11
         */
        const TRIBE_OPTION = 'tribe_option';
        /**
         * The key to locate a context value as the value of an option.
         *
         * @since 4.9.11
         */
        const OPTION = 'option';
        /**
         * The key to locate a context value as the value of a transient.
         *
         * @since 4.9.11
         */
        const TRANSIENT = 'transient';
        /**
         * The key to locate a context value as the value of the main query (global `$wp_query`) query var.
         *
         * @since 4.9.11
         */
        const QUERY_VAR = 'query_var';
        /**
         * The key to locate a context value as the value of the main query (global `$wp_query`) property.
         *
         * @since 4.9.11
         */
        const QUERY_PROP = 'query_prop';
        /**
         * The key to locate a context value as the value of the main query (global `$wp_query`) method return value.
         *
         * @since 4.9.20
         */
        const QUERY_METHOD = 'query_method';
        /**
         * The key to locate a context value as the value of a constant.
         *
         * @since 4.9.11
         */
        const CONSTANT = 'constant';
        /**
         * The key to locate a context value as a static class property.
         *
         * @since 4.9.11
         */
        const STATIC_PROP = 'static_prop';
        /**
         * The key to locate a context value as property of an object.
         *
         * @since 4.9.11
         */
        const PROP = 'prop';
        /**
         * The key to locate a context value as result running a static class method.
         *
         * @since 4.9.11
         */
        const STATIC_METHOD = 'static_method';
        /**
         * The key to locate a context value as result running a method on an object.
         *
         * @since 4.9.11
         */
        const METHOD = 'method';
        /**
         * The key to locate a context value as result running a callback function (e.g. a callable, a closure).
         *
         * @since 4.9.11
         */
        const FUNC = 'func';
        /**
         * The key to locate a context value as result of reading a global value.
         *
         * @since 4.9.11
         */
        const GLOBAL_VAR = 'global_var';
        /**
         * The key to locate a context value as result of an `apply_filters` call.
         *
         * @since 4.9.11
         */
        const FILTER = 'filter';
        /**
         * The key to locate a context value among the values parsed by `WP::parse_request`.
         *
         * @since 4.9.11
         */
        const WP_PARSED = 'wp_parsed';
        /**
         * The key to locate a context value among the values in the query mached by `WP::parse_request`.
         *
         * @since 4.9.11
         */
        const WP_MATCHED_QUERY = 'wp_matched_query';
        /**
         * The key to indicate a location should be read by applying a callback to the value of another context location.
         *
         * @since 4.9.18
         */
        const LOCATION_FUNC = 'location_func';
        /*
         *
         * An array defining the properties the context will be able to read and (dangerously) write.
         *
         * This is the configuration that should be modified to add/remove/modify values and locations
         * provided by the global context.
         * Each entry has the shape [ <key> => [ 'read' => <read_locations>, 'write' => <write_locations> ] ].
         * The key is used to identify the property that will be accessible with the `get` and
         * 'dangerously_set_global_context' method, e.g. `$context->get( 'event_display', 'list' );`.
         * The locations is a list of locations the context will search, top to bottom, left to right, to find a value that's
         * not empty or the default one, here's a list of supported lookup locations:
         *
         * request_var - look into $_GET, $_POST, $_PUT, $_DELETE, $_REQUEST.
         * query_var - get the value from the main WP_Query object query vars.
         * query_prop - get the value from a property of the main WP_Query object.
         * tribe_option - get the value from a Tribe option.
         * option - get the value from a database option.
         * transient - get the value from a transient.
         * constant - get the value from a constant, can also be a class constant with <class>::<const>.
         * global_var - get the value from a global variable
         * static_prop - get the value from a class static property, format: `array( $class, $prop )`.
         * prop - get the value from a tribe() container binding, format `array( $binding, $prop )`.
         * static_method - get the value from a class static method.
         * method - get the value calling a method on a tribe() container binding.
         * func - get the value from a function or a closure.
         * filter - get the value by applying a filter.
         * location_func - get the value by applying a callback to the value of a location.
         *
         * For each location additional arguments can be specified:
         * orm_arg - if `false` then the location will never produce an ORM argument, if provided the ORM arg produced bye the
         * location will have this name.
         * orm_transform - if provided the value of the location will be obtained by passing it as an argument to a callable.
         *
         * As the Context locations increase in number it would be impractical to define them inline here.
         * The locations will be loaded by the `Tribe__Context::populate_locations` method from the `Context/locations.php`
         * file.
         *
         * @var array
         */
        protected static $locations = [];
        /**
         * A utility static property keeping track of write locations that
         * will be defined as associative arrays.
         *
         * @var array
         */
        protected static $associative_locations = [self::TRANSIENT, self::METHOD, self::STATIC_METHOD, self::PROP, self::STATIC_PROP];
        /**
         * Whether the static dynamic locations were set or not.
         *
         * @var bool
         */
        protected static $did_populate_locations = \false;
        /**
         * A list of override locations to read and write from.
         *
         * This list has the same format and options as the static `$locations` property
         * but allows a context instance to override, or add, read and write locations.
         *
         * @var array
         */
        protected $override_locations = [];
        /**
         * Whether the context of the current HTTP request is an AJAX one or not.
         *
         * @var bool
         */
        protected $doing_ajax;
        /**
         * Whether the context of the current HTTP request is a Cron one or not.
         *
         * @var bool
         */
        protected $doing_cron;
        /**
         * A request-based array cache to store the values fetched by the context.
         *
         * @var array
         */
        protected $request_cache = [];
        /**
         * Whether this context should use the default locations or not.
         * This flag property is set to `false` when a context is obtained using
         * the `set_locations` method; it will otherwise be set to `true`.
         *
         * @var bool
         */
        protected $use_default_locations = \true;
        /**
         * An instance of the post state handler.
         *
         * @since 5.0.13
         *
         * @var Post_Request_Type
         */
        protected \TEC\Common\Context\Post_Request_Type $post_state;
        /**
         * Tribe__Context constructor.
         *
         * since 5.0.13
         *
         * @param Post_Request_Type|null $post_state An instance of the post state handler.
         */
        public function __construct(\TEC\Common\Context\Post_Request_Type $post_state = \null)
        {
        }
        /**
         * Whether we are currently creating a new post, a post of post type(s) or not.
         *
         * @since 4.7.7
         * @since 5.0.13 Extracted the logic to the `TEC\Common\Context\Post_Request_Type` class.
         *
         * @param null $post_type The optional post type to check.
         *
         * @return bool Whether we are currently creating a new post, a post of post type(s) or not.
         */
        public function is_new_post($post_type = \null)
        {
        }
        /**
         * Whether we are currently editing a post(s), post type(s) or not.
         *
         * @since 4.7.7
         * @since 5.0.13 Extracted the logic to the `TEC\Common\Context\Post_Request_Type` class.
         *
         * @param null|array|string|int $post_or_type A post ID, post type, an array of post types or post IDs, `null`
         *                                            to just make sure we are currently editing a post.
         *
         * @return bool
         */
        public function is_editing_post($post_or_type = \null) : bool
        {
        }
        /**
         * Helper function to indicate whether the current execution context is AJAX.
         *
         * This method exists to allow us test code that behaves differently depending on the execution
         * context.
         *
         * @since 4.7.12
         * @since 4.9.5 Removed the $doing_ajax parameter.
         *
         * @return boolean
         */
        public function doing_ajax()
        {
        }
        /**
         * Checks whether the context of the current HTTP request is a Cron one or not.
         *
         * @since 4.7.23
         * @since 4.9.5 Removed the $doing_cron parameter.
         *
         * @return bool Whether the context of the current HTTP request is a Cron one or not.
         */
        public function doing_cron()
        {
        }
        /**
         * Gets a value reading it from the location(s) defined in the `Tribe__Context::$props
         *
         * @since 4.9.5
         *
         * @param string     $key     The key of the variable to fetch.
         * @param mixed|null $default The default value to return if not found.
         * @param bool $force Whether to force the re-fetch of the value from the context or
         *                    not; defaults to `false`.
         *
         * @return mixed The value from the first location that can provide it or the default
         *               value if not found.
         */
        public function get($key, $default = \null, $force = \false)
        {
        }
        /**
         * Alters the context.
         *
         * Due to its immutable nature setting values on the context will NOT modify the
         * context but return a modified clone.
         * If you need to modify the global context update the location(s) it should read from
         * and call the `refresh` method.
         * Example: `$widget_context = tribe_context()->alter( $widget_args );`.
         *
         * @since 4.9.5
         *
         * @param array $values An associative array of key-value pairs to modify the context.
         *
         * @return \Tribe__Context A clone, with modified, values, of the context the method was called on.
         */
        public function alter(array $values)
        {
        }
        /**
         * Clears the context cache forcing a re-fetch of the variables from the context.
         *
         * @since 4.9.5
         *
         * @param string $key An optional specific key to refresh, if passed only this key
         *                    will be refreshed.
         */
        public function refresh($key = \null)
        {
        }
        /**
         * Returns the read and write locations set on the context.
         *
         * @since 4.9.5
         *
         * @return array An array of read and write location in the shape of the `Tribe__Context::$locations` one,
         *               `[ <location> => [ 'read' => <read_locations>, 'write' => <write_locations> ] ]`.
         */
        public function get_locations()
        {
        }
        /**
         * Reads the value from one or more $_REQUEST vars.
         *
         * @since 4.9.5
         *
         * @param array $request_vars The list of request vars to lookup, in order.
         * @param mixed $default The default value to return.
         *
         * @return mixed The first valid value found or the default value.
         */
        protected function request_var(array $request_vars, $default)
        {
        }
        /**
         * Reads the value from one or more global WP_Query object query variables.
         *
         * @since 4.9.5
         *
         * @param array $query_vars The list of query vars to look up, in order.
         * @param mixed $default The default value to return.
         *
         * @return mixed The first valid value found or the default value.
         */
        protected function query_var(array $query_vars, $default)
        {
        }
        /**
         * Reads the value from one or more global WP_Query object properties.
         *
         * @since 4.9.5
         *
         * @param array $query_props The list of properties to look up, in order.
         * @param mixed $default The default value to return.
         *
         * @return mixed The first valid value found or the default value.
         */
        protected function query_prop(array $query_props, $default)
        {
        }
        /**
         * Reads the value from one more more `tribe_option`s.
         *
         * @since 4.9.5
         *
         * @param array $tribe_options The list of `tribe_option`s to lookup, in order.
         * @param mixed $default The default value to return.
         *
         * @return mixed The first valid value found or the default value.
         */
        protected function tribe_option(array $tribe_options, $default)
        {
        }
        /**
         * Reads the value from one or more options.
         *
         * @since 4.9.5
         *
         * @param array $options The list of options to lookup, in order.
         * @param mixed $default The default value to return.
         *
         * @return mixed The first valid value found or the default value.
         */
        protected function option(array $options, $default)
        {
        }
        /**
         * Reads the value from one or more transients.
         *
         * @since 4.9.5
         *
         * @param array $transients The list of transients to lookup, in order.
         * @param mixed $default The default value to return.
         *
         * @return mixed The first valid value found or the default value.
         */
        protected function transient(array $transients, $default)
        {
        }
        /**
         * Reads the value from one or more constants.
         *
         * @since 4.9.5
         *
         * @param array $constants The list of constants to lookup, in order.
         * @param mixed $default The default value to return.
         *
         * @return mixed The first valid value found or the default value.
         */
        protected function constant(array $constants, $default)
        {
        }
        /**
         * Reads the value from one or more global variable.
         *
         * @since 4.9.5
         *
         * @param array $global_vars The list of global variables to look up, in order.
         * @param mixed $default The default value to return.
         *
         * @return mixed The first valid value found or the default value.
         */
        protected function global_var(array $global_vars, $default)
        {
        }
        /**
         * Reads the value from one or more class static properties.
         *
         * @since 4.9.5
         *
         * @param array $classes_and_props An associative array in the shape [ <class> => <prop> ].
         * @param mixed $default The default value to return.
         *
         * @return mixed The first valid value found or the default value.
         */
        protected function static_prop(array $classes_and_props, $default)
        {
        }
        /**
         * Reads the value from one or more properties of implementations bound in the `tribe()` container.
         *
         * @since 4.9.5
         *
         * @param array $bindings_and_props An associative array in the shape [ <binding> => <prop> ].
         * @param mixed $default The default value to return.
         *
         * @return mixed The first valid value found or the default value.
         */
        protected function prop(array $bindings_and_props, $default)
        {
        }
        /**
         * Reads the values from one or more static class methods.
         *
         * @since 4.9.5
         *
         * @param array $classes_and_methods An associative array in the shape [ <class> => <method> ].
         * @param mixed $default The default value to return.
         *
         * @return mixed The first value that's not equal to the default one, the default value
         *               otherwise.
         */
        protected function static_method(array $classes_and_methods, $default)
        {
        }
        /**
         * Reads the value from one or more methods called on implementations bound in the `tribe()` container.
         *
         * @since 4.9.5
         *
         * @param array $bindings_and_methods An associative array in the shape [ <binding> => <method> ].
         * @param mixed $default              The default value to return.
         *
         * @return mixed The first value that's not equal to the default one, the default value
         *               otherwise.
         */
        protected function method(array $bindings_and_methods, $default)
        {
        }
        /**
         * Reads the value from one or more functions until one returns a value that's not the default one.
         *
         * @since 4.9.5
         *
         * @param array $functions An array of functions to call, in order.
         * @param mixed $default The default value to return.
         *
         * @return mixed The first value that's not equal to the default one, the default value
         *               otherwise.
         */
        protected function func(array $functions, $default)
        {
        }
        /**
         * Modifies the global context using the defined write locations to persist the altered values.
         *
         * Please keep in mind this will set the the global context for the whole request and, when the
         * write location is an option, to the database.
         * With great power comes great responsibility: think a lot before using this.
         *
         * @param array|null $fields    An optional whitelist or blacklist of fields to write
         *                              depending on the value of the `$whitelist` parameter;
         *                              defaults to writing all available fields.
         * @param bool       $whitelist Whether the list of fields provided in the `$fields`
         *                              parameter should be treated as a whitelist (`true`) or
         *                              blacklist (`false`).
         *
         * @since 4.9.5
         */
        public function dangerously_set_global_context(array $fields = \null, $whitelist = \true)
        {
        }
        /**
         * Writes an altered context value to a request var.
         *
         * @since 4.9.5
         *
         * @param string $request_var The request var to write.
         * @param mixed  $value       The value to set on the request var.
         */
        protected function write_request_var($request_var, $value)
        {
        }
        /**
         * Writes an altered context value to a global WP_Query object properties.
         *
         * @since 4.9.5
         *
         * @param string $query_prop The global WP_Query object property to write.
         * @param mixed  $value      The value to set on the query property.
         */
        protected function write_query_prop($query_prop, $value)
        {
        }
        /**
         * Writes an altered context value to a global WP_Query object query var.
         *
         * @since 4.9.5
         *
         * @param string $query_var The global WP_Query query var to write.
         * @param mixed  $value     The value to set on the query var.
         */
        protected function write_query_var($query_var, $value)
        {
        }
        /**
         * Writes an altered context value to a `tribe_option`.
         *
         * @since 4.9.5
         *
         * @param string $tribe_option The `tribe_option` to write.
         * @param mixed  $value        The value to set on the `tribe_option`.
         */
        protected function write_tribe_option($tribe_option, $value)
        {
        }
        /**
         * Writes an altered context value to an option.
         *
         * @since 4.9.5
         *
         * @param string $option_name The option to write.
         * @param mixed  $value       The value to set on the option.
         */
        protected function write_option($option_name, $value)
        {
        }
        /**
         * Writes an altered context value to a transient.
         *
         * @since 4.9.5
         *
         * @param string $transient  The transient to write.
         * @param int    $expiration The transient expiration time, in seconds.
         * @param mixed  $value      The value to set on the transient.
         */
        protected function write_transient($transient, $expiration, $value)
        {
        }
        /**
         * Writes an altered context value to a constant.
         *
         * @since 4.9.5
         *
         * @param string $constant The constant to define.
         * @param mixed  $value    The value to set on the constant.
         */
        protected function write_constant($constant, $value)
        {
        }
        /**
         * Writes an altered context value to a global var.
         *
         * @since 4.9.5
         *
         * @param string $global_var The global var to set.
         * @param mixed  $value      The value to set on the global_var.
         */
        protected function write_global_var($global_var, $value)
        {
        }
        /**
         * Writes an altered context value setting a public static property on a class.
         *
         * @since 4.9.5
         *
         * @param string $class The class to set the static public property on.
         * @param string $prop  The static public property to set.
         * @param mixed  $value The value to set on the property.
         */
        protected function write_static_prop($class, $prop, $value)
        {
        }
        /**
         * Writes an altered context value setting a public property on a `tribe()` binding.
         *
         * @since 4.9.5
         *
         * @param string $binding The container binding to set the public property on.
         * @param string $prop    The public property to set.
         * @param mixed  $value   The value to set on the property.
         */
        protected function write_prop($binding, $prop, $value)
        {
        }
        /**
         * Writes an altered context value calling a public static method on a class.
         *
         * @since 4.9.5
         *
         * @param string $class  The class to call the public static method on.
         * @param string $method The static method to call.
         * @param mixed  $value  The value to pass to the public static method.
         */
        protected function write_static_method($class, $method, $value)
        {
        }
        /**
         * Writes an altered context value calling a public method on a `tribe()` binding.
         *
         * @since 4.9.5
         *
         * @param string $binding The `tribe()` container binding to call the public method on.
         * @param string $method  The method to call.
         * @param mixed  $value   The value to pass to the public method.
         */
        protected function write_method($binding, $method, $value)
        {
        }
        /**
         * Writes an altered context value calling a function or closure.
         *
         * @since 4.9.5
         *
         * @param callable $func  function, closure or callable to call.
         * @param mixed    $value The value to pass to the callable.
         */
        protected function write_func($func, $value)
        {
        }
        /**
         * Adds/replaces read and write locations to a context.
         *
         * Locations are merged with an `array_merge` call. To refine the locations get them first with the
         * `get_locations` method.
         *
         * @since 4.9.5
         *
         * @param array $locations An array of read and write locations to add to the context.
         *                         The array should have the same shape as the static `$locations`
         *                         one: `[ <location> => [ 'read' => <read_locations>, 'write' => <write_locations> ] ]`.
         *
         *
         * @return \Tribe__Context A clone of the current context with the additional read and
         *                         write locations added.
         */
        public function add_locations(array $locations)
        {
        }
        /**
         * Sets, replacing them, the locations used by this context.
         *
         *
         * @since 4.9.5
         *
         * @param array $locations An array of locations to replace the current ones.
         * @param bool  $use_default_locations Whether the context should use the default
         *                                     locations defined in the static `$locations`
         *                                     property or not.
         *
         * @return \Tribe__Context A clone of the current context with modified locations.
         */
        public function set_locations(array $locations, $use_default_locations = \true)
        {
        }
        /**
         * Returns an array representation of the context.
         *
         * @since 4.9.5
         *
         * @return array An associative array of the context keys and values.
         */
        public function to_array()
        {
        }
        /**
         * Returns the current context state in a format suitable to hydrate a Redux-like
         * store on the front-end.
         *
         * This method is a filtered wrapper around the the `Tribe__Context::to_array` method to allow the
         * customization of the format when producing a store-compatible state.
         *
         * @param array|null $fields    An optional whitelist or blacklist of fields to include
         *                              depending on the value of the `$whitelist` parameter;
         *                              defaults to returning all available fields.
         * @param bool       $whitelist Whether the list of fields provided in the `$fields`
         *                              parameter should be treated as a whitelist (`true`) or
         *                              blacklist (`false`).
         *
         * @since 4.9.5
         *
         * @return array
         */
        public function get_state(array $fields = \null, $whitelist = \true)
        {
        }
        /**
         * Returns an array of ORM arguments generated from the current context values.
         *
         * @since 4.9.5
         *
         * @param array|null $fields    An optional whitelist or blacklist of fields to include
         *                              depending on the value of the `$whitelist` parameter;
         *                              defaults to returning all available fields.
         * @param bool       $whitelist Whether the list of fields provided in the `$fields`
         *                              parameter should be treated as a whitelist (`true`) or
         *                              blacklist (`false`).
         *
         * @return array A map of ORM fields produced from the context current values.
         */
        public function get_orm_args(array $fields = \null, $whitelist = \true)
        {
        }
        /**
         * Sets some locations that can only be set at runtime.
         *
         * Using a flag locations are added only once per request.
         *
         * @since 4.9.8
         */
        protected function populate_locations()
        {
        }
        /**
         * Just dont...
         * Unless you very specifically know what you are doing **DO NOT USE THIS METHOD**!
         *
         * Please keep in mind this will set force the context to repopulate all locations for the whole request, expensive
         * and very dangerous overall since it could affect all this things we hold dear in the request.
         *
         * With great power comes great responsibility: think a lot before using this.
         *
         * @since 4.13.0
         */
        public function dangerously_repopulate_locations()
        {
        }
        /**
         * Reads (gets) the value applying one or more filters.
         *
         * @since 4.9.8
         *
         * @param array $filters The list of filters to apply, in order.
         * @param mixed $default The default value to return.
         *
         * @return mixed The first valid value found or the default value.
         */
        public function filter(array $filters, $default)
        {
        }
        /**
         * Reads (gets) the value reading it from a query var parsed from the global `$wp` object.
         *
         * @since 4.9.8
         *
         * @param array $vars    The list of variables to read, in order.
         * @param mixed $default The default value to return if no variable was parsed.
         *
         * @return mixed The first valid value found or the default value.
         */
        public function wp_parsed(array $vars, $default)
        {
        }
        /**
         * Reads (gets) the value reading it from a query var parsed from the query matched by the global `$wp` object.
         *
         * @since 4.9.8
         *
         * @param array $vars    The list of variables to read, in order.
         * @param mixed $default The default value to return if no variable was parsed.
         *
         * @return mixed The first valid value found or the default value.
         */
        public function wp_matched_query(array $vars, $default)
        {
        }
        /**
         * Maps an input array to the corresponding read locations.
         *
         * The resulting array can be used as input for the `alter_values` method.
         * The main use of this method is to leverage the Context knowledge of the read locations, and their types, to
         * "translate" an array of values to an array of valid read sources. As an example this is useful to "translate"
         * the locations to an array of query vars:
         *      $input = [ 'event_display' => 'some-view', 'event_date' => '2018-01-03' ];
         *      $query_args = tribe_context()->map_to_read( $input, Tribe__Context::REQUEST_VAR );
         *      $url = add_query_arg( $query_args, home_url() );
         *
         * @since 4.9.11
         *
         * @param array             $input       An associative array of values in the shape `[ <location> => <value> ]`;
         *                                       where `location` is the name of the location registered in the Context
         *                                       locations.
         * @param string|array|null $types       A white-list of read location types to include in the mapped output;
         *                                       `null`
         *                                       means all types are allowed.
         * @param bool              $passthru    Whether to pass unknown locations in the output or not; if `false` then
         *                                       any input key that's not a context location will not appear in the output;
         *                                       defaults to `false` to remove unknown locations from the output.
         *
         * @return array An associative array in the shape `[ <read_location> => <input_value> ]`. Since some read
         *              locations could have multiple sources the number of elements in this array will likely NOT be the
         *              same as the number of elements in the input array. When a read location as more than 1 source then
         *              the value will be duplicated, in the output array, to both sources.
         */
        public function map_to_read(array $input, $types = \null, $passthru = \false)
        {
        }
        /**
         * Translates sub-locations to their respective location key.
         *
         * This method leverages the inherent knowledge of aliases stored in the Context locations to "translate" a
         * sub-location to its location key.
         * E.g. assume the `car` location is `read` from the [ 'carriage', 'vehicle', 'transport_mean' ] query var; calling
         * `$context->populate_aliases( [ 'vehicle' => 'hyunday' ], 'read', Context::QUERY_VAR )` would yield
         * `[ 'car' => 'hyunday' ]`.
         *
         * @since 4.9.12
         *
         * @param array  $values    An associative array of value to use as "masters" to populate the aliases.
         * @param string $type      The type of Context location to use, e.g. `Tribe__Context::QUERY_VAR`.
         * @param string $direction The direction to use for the location, one of `read` or `write`.
         *
         * @return array The original array, merged with the populated values.
         */
        public function translate_sub_locations(array $values, $type, $direction = 'read')
        {
        }
        /**
         * Convenience method to get and check if a location has a truthy value or not.
         *
         * @since 4.9.18
         *
         * @param string $flag_key The location to check.
         * @param bool   $default  The default value to return if the location is not set.
         *
         * @return bool Whether the location has a truthy value or not.
         */
        public function is($flag_key, $default = \false)
        {
        }
        /**
         * Reads the value from one callback, passing it the value of another Context location.
         *
         * @since 4.9.18
         *
         * @param array $location_and_callback An array of two elements: the location key and the callback to call on the
         *                                     location value. The callback will receive the location value as argument.
         *
         * @return mixed The return value of the callback, called on the location value.
         */
        public function location_func(array $location_and_callback)
        {
        }
        /**
         * Checks whether the current request is a REST API one or not.
         *
         * @since 4.9.20
         *
         * @return bool Whether the current request is a REST API one or not.
         */
        public function doing_rest()
        {
        }
        /**
         * Reads the value from one or more global WP_Query object methods.
         *
         * @since 4.9.20
         *
         * @param array $query_vars The list of query methods to call, in order.
         * @param mixed $default The default value to return if no method was defined on the global `WP_Query` object.
         *
         * @return mixed The first valid value found or the default value.
         */
        public function query_method($methods, $default)
        {
        }
        /**
         * Whether the current request is for a PHP-rendered initial state or not.
         *
         * This method is a shortcut to make sure we're not doing an AJAX, REST or Cron request.
         *
         * @since 4.9.20
         *
         * @return bool Whether the current request is for a PHP-rendered initial state or not.
         */
        public function doing_php_initial_state()
        {
        }
        /**
         * Returns the first key, if there are many, that will be used to read a location.
         *
         * The type ar
         *
         * @since 4.9.20
         *
         * @param string      $location The location to get the read key for.
         * @param string|null $type     The type of read location to return the key for; default to `static::REQUEST_VAR`.
         *
         * @return string Either the first key for the type of read location, or the input location if not found.
         */
        public function get_read_key_for($location, $type = \null)
        {
        }
        /**
         * Safely set the value of a group of locations.
         *
         * This method can only augment the context, without altering it; it can only add new values.
         *
         * @since 4.10.2
         *
         * @param array|string $values The values to set, if not already set or the key of the value to set, requires
         *                             the `$value` to be passed.
         * @param mixed|null $value    The value to set for the key, this parameter will be ignored if the `$values_or_key`
         *                             parameter is not a string.
         */
        public function safe_set($values_or_key, $value = \null)
        {
        }
        /**
         * Whether the current request is one to edit a list of the specified post types or not.
         *
         * The admin edit screen for a post type is the one that lists all the posts of that typ,
         * it has the URL `/wp-admin/edit.php?post_type=<post_type>`.
         *
         * @since 5.0.13
         * @since 5.0.13 Extracted the logic to the `TEC\Common\Context\Post_Request_Type` class.
         *
         * @param string|array<string> $post_type The post type or post types to check.
         *
         * @return bool Whether the current request is one to edit a list of the specified post types or not.
         */
        public function is_editing_posts_list($post_type) : bool
        {
        }
        /**
         * Whether the current request is one to quick edit a single post of the specified post type or not.
         *
         * @since 5.0.13
         *
         * @param string|array<string> $post_type The post type or post types to check.
         *
         * @return bool Whether the current request is one to quick edit a single post of the specified post type or not.
         */
        public function is_inline_editing_post($post_type) : bool
        {
        }
    }
    /**
     * Class Tribe__Cost_Utils
     *
     * Utility methods to deal with costs.
     *
     * @since 4.3
     */
    class Tribe__Cost_Utils
    {
        /**
         * @var string
         */
        protected $_current_original_cost_separator;
        /**
         * @var string
         */
        protected $_supported_decimal_separators = '.,';
        /**
         * Static Singleton Factory Method
         *
         * @return Tribe__Events__Cost_Utils
         */
        public static function instance()
        {
        }
        /**
         * Check if a string is a valid cost.
         *
         * @param  string $cost String to be checked.
         *                      Can include decimal and thousands separator.
         *
         * @return boolean
         */
        public function is_valid_cost($cost, $allow_negative = \true)
        {
        }
        /**
         * Returns the regular expression that shold be used to  identify a valid
         * cost string.
         *
         * @return string
         */
        public function get_cost_regex()
        {
        }
        /**
         * Fetch the possible separators
         *
         * @return array
         */
        public function get_separators()
        {
        }
        /**
         * If the cost is "0", call it "Free"
         *
         * @param int|float|string $cost Cost to analyze
         *
         * @return int|float|string
         */
        public function maybe_replace_cost_with_free($cost)
        {
        }
        /**
         * Formats a cost with a currency symbol
         *
         * @param int|float|string $cost              Cost to format
         *
         * return string
         * @param int|WP_Post      $event             An event post ID or post object.
         * @param string           $currency_symbol
         * @param string           $currency_position Either "prefix" or "posfix"
         *
         * @return float|int|string
         */
        public function maybe_format_with_currency($cost, $event = \null, $currency_symbol = \null, $currency_position = \null)
        {
        }
        /**
         * @param       string       $original_string_cost A string cost with or without currency symbol,
         *                                                 e.g. `10 - 20`, `Free` or `2$ - 4$`.
         * @param       array|string $merging_cost         A single string cost representation to merge or an array of
         *                                                 string cost representations to merge, e.g. ['Free', 10, 20,
         *                                                 'Donation'] or `Donation`.
         * @param       bool         $with_currency_symbol Whether the output should prepend the currency symbol to the
         *                                                 numeric costs or not.
         * @param array              $sorted_mins          An array of non numeric price minimums sorted smaller to larger,
         *                                                 e.g. `['Really free', 'Somewhat free', 'Free with 3 friends']`.
         * @param array              $sorted_maxs          An array of non numeric price maximums sorted smaller to larger,
         *                                                 e.g. `['Donation min $10', 'Donation min $20', 'Donation min
         *                                                 $100']`.
         *
         * @return string|array The merged cost range.
         */
        public function merge_cost_ranges($original_string_cost, $merging_cost, $with_currency_symbol, $sorted_mins = [], $sorted_maxs = [])
        {
        }
        /**
         * Returns a maximum cost in a list of costs. If an array of costs is not passed in, the array of costs is fetched
         * via query.
         *
         * @param $costs mixed Cost(s) to review for max value
         *
         * @return float
         */
        public function get_maximum_cost($costs = \null)
        {
        }
        /**
         * Returns a particular cost within an array of costs
         *
         * @param $costs    mixed Cost(s) to review for max value
         * @param $function string Function to use to determine which cost to return from range. Valid values: max, min
         *
         * @return float
         */
        protected function get_cost_by_func($costs = \null, $function = 'max')
        {
        }
        /**
         * Parses a cost into an array of ranges.
         *
         * If a range isn't provided, the resulting array will hold a single
         * value.
         *
         * @param string|array $costs        A cost string or an array of cost strings.
         * @param null         $max_decimals The maximum number of decimal values that should be returned in the range.
         * @param bool         $sort         Whether the returned values should be sorted.
         *
         * @return array An associative array of parsed costs in [ <string cost> => <cost number> ] format.
         */
        public function parse_cost_range($costs, $max_decimals = \null, $sort = \true)
        {
        }
        /**
         * Returns a minimum cost in a list of costs. If an array of costs is not passed in, the array of costs is fetched
         * via query.
         *
         * @param $costs mixed Cost(s) to review for min value
         *
         * @return float
         */
        public function get_minimum_cost($costs = \null)
        {
        }
        /**
         * Converts the original decimal separator to ".".
         *
         * @param string|int $value
         *
         * @return string
         */
        protected function convert_decimal_separator($value)
        {
        }
        /**
         * Restores the decimal separator to its original symbol.
         *
         * @param string $value
         *
         * @return string
         */
        protected function restore_original_decimal_separator($value)
        {
        }
        /**
         * Extracts int and floats from a numeric "dirty" string like strings that might contain other symbols.
         *
         * E.g. "$10" will yield "10"; "23.55$" will yield "23.55".
         *
         * @param string|int $value
         *
         * @return int|float
         */
        protected function numerize_numbers($value)
        {
        }
        /**
         * Parses the currency symbol part of a cost string.
         *
         * @param string|array $cost A string cost, a comma separated array of string costs or an array of costs.
         *
         * @return false|string Either the inferred currency symbol or `false` if the currency symbol is missing or not consistent.
         */
        public function parse_currency_symbol($cost)
        {
        }
        /**
         * Parses the currency symbol position  part of a cost string.
         *
         * @param string|array $cost A string cost, a comma separated array of string costs or an array of costs.
         *
         * @return false|string Either the inferred currency symbol position or `false` if not present or not consistent.
         */
        public function parse_currency_position($cost)
        {
        }
        /**
         * Parses the cost value and current locale to infer decimal and thousands separators.
         *
         * The cost values stored in the meta table might not use the same decimal and thousands separator as the current
         * locale.
         * To work around this we parse the value assuming the decimal separator will be the last non-numeric symbol,
         * if any.
         *
         * @since 4.9.12
         *
         * @param string|int|float $value The cost value to parse.
         *
         * @return array An array containing the parsed decimal and thousands separator symbols.
         */
        public function parse_separators($value)
        {
        }
    }
    /**
     * Handles output of The Events Calendar credits
     */
    class Tribe__Credits
    {
        public static function init()
        {
        }
        /**
         * Hook the functionality of this class into the world
         */
        public function hook()
        {
        }
        /**
         * Add credit in HTML page source
         *
         * @return void
         **/
        public function html_comment_credit($after_html)
        {
        }
        /**
         * Add ratings nudge in admin footer
         *
         * @param $footer_text
         *
         * @return string
         */
        public function rating_nudge($footer_text)
        {
        }
        /**
         * temporary function to filter event types down to only tribe-specific types
         *
         * This will limit the request for ratings to only those post type pages
         */
        public function tmp_return_tribe_events($unused_post_types)
        {
        }
        /**
         * @return self
         */
        public static function instance()
        {
        }
    }
    /**
     * Tribe Customizer class
     *
     * @package Tribe Common
     * @subpackage Customizer
     * @since 4.0
     */
    final class Tribe__Customizer
    {
        /**
         * Static Singleton Factory Method
         *
         * @return self
         *
         * @deprecated since 4.12.6, use `tribe( 'customizer' )` instead.
         */
        public static function instance()
        {
        }
        /**
         * WP_Customize_Manager instance.
         *
         * @since 4.0
         * @access public
         * @var WP_Customize_Manager
         */
        public $manager;
        /**
         * Instance of Customize Panel
         *
         * @since 4.0
         * @access public
         * @var WP_Customize_Panel
         */
        public $panel;
        /**
         * The Panel ID
         *
         * @since 4.0
         * @access public
         * @var string
         */
        public $ID;
        /**
         * Loads the Basic Settings for the Class to work
         *
         * @since  4.0
         *
         * @see  self::instance()
         * @access private
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Backwards compatibility for the old Customizer Option Save
         *
         * @since  4.4
         *
         * @param  mixed $sections
         *
         * @return mixed
         */
        public function maybe_fallback_get_option($sections)
        {
        }
        /**
         * Loads a Section to the Customizer on The Events Calendar's Panel
         *
         * @since  4.4
         *
         * @param  object $section An Object that extends the Abstract `Tribe__Customizer__Section`
         *
         * @return bool
         */
        public function load_section($section)
        {
        }
        /**
         * Fetches all Section Classes
         *
         * @since  4.4
         *
         * @return array
         */
        public function get_loaded_sections()
        {
        }
        /**
         * Returns the section requested by ID.
         *
         * @since 4.13.3
         *
         * @param string $id The ID of the desired section.
         *
         * @return boolean|Tribe__Customizer__Section The requested section or boolean false if not found.
         */
        public function get_section($id)
        {
        }
        /**
         * A easy way to check if customize is active
         *
         * @since  4.2.2
         *
         * @return boolean
         */
        public function is_active()
        {
        }
        /**
         * A method to easily search on an array
         *
         * @since 4.0
         *
         * @param  array $variable  Variable to be searched
         * @param  array $indexes   The index that the method will try to retrieve
         * @param  mixed $default   If the variable doesn't exist, what is the default
         *
         * @return mixed            Return the variable based on the index
         */
        public static function search_var($variable = \null, $indexes = [], $default = \null)
        {
        }
        /**
         * Get an option from the database, using index search you can retrieve the full panel, a section or even a setting.
         *
         * @since 4.4
         *
         * @param  array $search   Index search, array( 'section_name', 'setting_name' ).
         * @param  mixed $default  The default, if the requested variable doesn't exits.
         *
         * @return mixed           The requested option or the default.
         */
        public function get_option($search = \null, $default = \null)
        {
        }
        /**
         * Check if the option exists, this method is used allow only sections that were saved to be applied.
         *
         * @param strings Using the following structure: self::has_option( 'section_name', 'setting_name' );
         *
         * @return boolean Whether the option exists in the database
         */
        public function has_option()
        {
        }
        /**
         * Add an action for some backwards compatibility.
         *
         * @since 4.14.2
         *
         * @return void
         */
        public function customize_controls_print_footer_scripts()
        {
        }
        /**
         * Print the CSS for the customizer on `wp_print_footer_scripts`
         *
         * @since 4.12.6 Moved the template building code to the `get_styles_scripts` method.
         *
         * @return void
         */
        public function print_css_template()
        {
        }
        /**
         * Print the CSS for the customizer for shortcodes.
         *
         * @since 4.12.6
         */
        public function shortcode_inline_style()
        {
        }
        /**
         * Print the CSS for the customizer for widgets.
         *
         * @since 4.12.14
         */
        public function widget_inline_style()
        {
        }
        /**
         * Print the CSS for the customizer using wp_add_inline_style
         *
         * @since 4.12.15 Added the `$force` parameter to force the print of the style inline.
         *
         * @param bool $force Whether to ignore the context to try and print the style inline, or not.
         */
        public function inline_style($force = \false)
        {
        }
        /**
         * Method to start setting up the Customizer Section and Fields
         *
         * @since  4.0
         *
         * @param  WP_Customize_Manager $customizer WordPress Customizer variable
         * @return void
         */
        public function register(\WP_Customize_Manager $customizer)
        {
        }
        /**
         * Returns a URL to the TEC Customizer panel.
         *
         * @since 4.14.0
         *
         * @return string The URL to the TEC Customizer panel.
         */
        public function get_panel_url()
        {
        }
        /**
         * Returns an HTML link directly to the (opened) TEC Customizer panel
         *
         * @since 4.14.0
         *
         * @param string $link_text The (pre)translated text for the link.
         *
         * @return string The HTML anchor element, linking to the TEC Customizer panel.
         *                An empty string is returned if missing a parameter.
         */
        public function get_panel_link($link_text)
        {
        }
        /**
         * Use a "alias" method to register sections to allow users to filter args and the ID
         *
         * @since 4.0
         *
         * @param  string $id   The Unique section ID
         * @param  array $args  Arguments to register the section
         *
         * @link https://codex.wordpress.org/Class_Reference/WP_Customize_Manager/add_section
         *
         * @return WP_Customize_Section
         */
        public function register_section($id, $args)
        {
        }
        /**
         * Returns a URL to the a specific TEC Customizer section.
         *
         * @since 4.14.0
         *
         * @param string $section The slug for the desired section.
         *
         * @return string The URL to the TEC Customizer section.
         */
        public function get_section_url($section)
        {
        }
        /**
         * Gets the HTML link to a section in the TEC Customizer.
         *
         * @since 4.14.0
         *
         * @param string $section   The section "slug" to link to.
         * @param string $link_text The text for the link.
         *
         * @return string The HTML anchor element, linking to the TEC Customizer section.
         *                An empty string is returned if missing a parameter.
         */
        public function get_section_link($section, $link_text = '')
        {
        }
        /**
         * Build the Setting name using the HTML format for Arrays
         *
         * @since  4.0
         *
         * @param  string $slug                         The actual Setting name
         * @param  string|WP_Customize_Section $section The section the setting lives in.
         *
         * @return string          HTML name Attribute name of the setting.
         */
        public function get_setting_name($slug, $section = \null)
        {
        }
        /**
         * Adds a setting field name to the Array of Possible Selective refresh fields
         *
         * @since  4.2
         *
         * @param  string $name The actual Setting name
         *
         * @return array The list of existing Settings, the new one included
         */
        public function add_setting_name($name)
        {
        }
        /**
         * Gets the URL to a specific control/setting in the TEC Customizer.
         *
         * @since 4.14.0
         *
         * @param string $section The section "slug" to link into.
         * @param string $setting The setting "slug" to link to.
         *
         * @return string The URL to the setting.
         *                An empty string is returned if a parameter is missing or the setting control cannot be found.
         */
        public function get_setting_url($section, $setting)
        {
        }
        /**
         * Gets the link to the a specific control/setting in the TEC Customizer.
         *
         * @since 4.14.0
         *
         * @param string $section   The section "slug" to link into.
         * @param string $setting   The setting "slug" to link to.
         * @param string $link_text The translated text for the link.
         *
         * @return string The HTML anchor element, linking to the TEC Customizer setting.
         *                An empty string is returned if missing a parameter or the setting control cannot be found.
         */
        public function get_setting_link($section, $setting, $link_text)
        {
        }
        /**
         * Using the Previously created CSS element, we not just re-create it every setting change
         *
         * @since  4.2
         *
         * @return void
         */
        public function maybe_selective_refresh()
        {
        }
        /**
         * Builds and returns the Customizer CSS template contents.
         *
         * The method DOES NOT check if the current context is the one where the Customizer template should
         * be printed or not; that care is left to the code calling this method.
         *
         * @since 4.12.6 Extracted this method from the `print_css_template` one.
         *
         * @return string The CSS template contents.
         */
        public function get_styles_scripts()
        {
        }
        /**
         * Inserts link to TEC Customizer section for FSE themes in admin (left) menu.
         *
         * @since 4.14.8
         */
        public function add_fse_customizer_link()
        {
        }
        /**
         * Inserts link to TEC Customizer section for FSE themes in Events > Settings > Display.
         *
         * @since 4.14.8
         *
         * @param array<string|mixed> $settings The existing settings array.
         *
         * @return array<string|mixed> $settings The modified settings array.
         */
        public function add_fse_customizer_link_to_display_tab($settings)
        {
        }
    }
}
namespace Tribe\Customizer {
    /**
     * Class Control
     *
     * @since   4.12.14
     *
     * @package Tribe\Customizer
     */
    abstract class Control extends \WP_Customize_Control
    {
    }
}
namespace Tribe\Customizer\Controls {
    /**
     * Class Heading
     *
     * @since   4.12.14
     *
     * @package Tribe\Customizer\Controls
     */
    class Heading extends \Tribe\Customizer\Control
    {
        /**
         * Control's Type.
         *
         * @since 4.13.3
         *
         * @var string
         */
        public $type = 'heading';
        /**
         * Anyone able to set theme options will be able to see the header.
         *
         * @since 4.12.14
         *
         * @var string
         */
        public $capability = 'edit_theme_options';
        /**
         * The heading does not control any setting.
         *
         * @since 4.12.14
         *
         * @var array<string,mixed>
         */
        public $settings = [];
        /**
         * Render the control's content
         *
         * @since 4.12.14
         */
        public function render_content()
        {
        }
    }
    /**
     * Class Number
     *
     * @since   4.12.13
     *
     * @package Tribe\Customizer\Controls
     */
    class Number extends \Tribe\Customizer\Control
    {
        /**
         * Control's Type.
         *
         * @since 4.12.13
         *
         * @var string
         */
        public $type = 'number';
        /**
         * Anyone able to set theme options will be able to see the input.
         *
         * @since 4.12.13
         *
         * @var string
         */
        public $capability = 'edit_theme_options';
        /**
         * Render the control's content
         *
         * @since 4.12.13
         */
        public function render_content()
        {
        }
    }
    /**
     * Class Radio
     *
     * @since   4.13.3
     *
     * @package Tribe\Customizer\Controls
     */
    class Radio extends \Tribe\Customizer\Control
    {
        /**
         * Anyone able to set theme options will be able to see the header.
         *
         * @since 4.13.3
         *
         * @var string
         */
        public $capability = 'edit_theme_options';
        /**
         * Render the control's content
         *
         * @since 4.13.3
         */
        public function render_content()
        {
        }
    }
    /**
     * Class Range_Slider
     *
     * @since 4.12.13
     *
     * @package Tribe\Customizer\Controls
     */
    class Range_Slider extends \Tribe\Customizer\Control
    {
        /**
         * Control's Type.
         *
         * @since 4.12.13
         *
         * @var string
         */
        public $type = 'range-slider';
        /**
         * Anyone able to set theme options will be able to see the slider.
         *
         * @since 4.12.13
         *
         * @var string
         */
        public $capability = 'edit_theme_options';
        /**
         * Render the control's content
         *
         * @since 4.12.13
         */
        public function render_content()
        {
        }
    }
    /**
     * Class Separator
     *
     * @since   4.13.3
     *
     * @package Tribe\Customizer\Controls
     */
    class Separator extends \Tribe\Customizer\Control
    {
        /**
         * Control's Type.
         *
         * @since 4.13.3
         *
         * @var string
         */
        public $type = 'separator';
        /**
         * Anyone able to set theme options will be able to see the header.
         *
         * @since 4.13.3
         *
         * @var string
         */
        public $capability = 'edit_theme_options';
        /**
         * The heading does not control any setting.
         *
         * @since 4.13.3
         *
         * @var array<string,mixed>
         */
        public $settings = [];
        /**
         * Render the control's content
         *
         * @since 4.13.3
         */
        public function render_content()
        {
        }
    }
    /**
     * Class Toggle
     *
     * @since 4.12.13
     *
     * @package Tribe\Customizer\Controls
     */
    class Toggle extends \Tribe\Customizer\Control
    {
        /**
         * Control's Type.
         *
         * @since 4.12.13
         *
         * @var string
         */
        public $type = 'toggle';
        /**
         * Anyone able to set theme options will be able to see the slider.
         *
         * @since 4.12.13
         *
         * @var string
         */
        public $capability = 'edit_theme_options';
        /**
         * Render the control's content
         *
         * @since 4.12.13
         */
        public function render_content()
        {
        }
    }
}
namespace {
    /**
     * The Events Calendar Customizer Section Abstract.
     * Extend this when you are trying to create a new The Events Calendar Section
     * on the Customize from WordPress.
     *
     * @package Common
     * @subpackage Customizer
     * @since 4.0
     */
    abstract class Tribe__Customizer__Section
    {
        /**
         * ID of the section.
         *
         * @since 4.0
         *
         * @access public
         * @var string
         */
        public $ID;
        /**
         * Load this section by default.
         *
         * @since 4.4
         *
         * @access public
         * @var string
         */
        public $load = \true;
        /**
         * Default values for the settings on this class.
         *
         * @since 4.0
         *
         * @access private
         * @var array
         */
        public $defaults = [];
        /**
         * Information to setup the Section.
         *
         * @since 4.0
         *
         * @access public
         * @var array
         */
        public $arguments = ['priority' => 10, 'capability' => 'edit_theme_options', 'title' => \null, 'description' => \null];
        /**
         * Allows sections to be loaded in order for overrides.
         *
         * @var integer
         */
        public $queue_priority = 15;
        /**
         * Contains the arguments for the section headings.
         *
         * @since 4.14.2
         *
         * @var array
         */
        protected $content_headings = [];
        /**
         * Contains the arguments for the section settings.
         *
         * @since 4.14.2
         *
         * @var array
         */
        protected $content_settings = [];
        /**
         * Contains the arguments for the section controls.
         *
         * @since 4.14.2
         *
         * @var array
         */
        protected $content_controls = [];
        /**
         * Setup and Load hooks for this Section.
         *
         * @since  4.0
         *
         * @return Tribe__Customizer__Section
         */
        public final function __construct()
        {
        }
        /**
         * This method will be executed when the Class is Initialized.
         * Overwrite this method to be able to setup the arguments of your section.
         *
         * @return void
         */
        public function setup()
        {
        }
        /**
         * Register this Section.
         *
         * @param  array  $sections   Array of Sections.
         * @param  Tribe__Customizer $customizer Our internal Cutomizer Class Instance.
         *
         * @return array  Return the modified version of the Section array.
         */
        public function register($sections, \Tribe__Customizer $customizer)
        {
        }
        /**
         * Overwrite this method to create the Fields/Settings for this section.
         *
         * @param  WP_Customize_Section $section The WordPress section instance.
         * @param  WP_Customize_Manager $manager The WordPress Customizer Manager.
         *
         * @return void
         */
        public function register_settings(\WP_Customize_Section $section, \WP_Customize_Manager $manager)
        {
        }
        /**
         * Function that encapsulates the logic for if a setting should be added to the Customizer style template.
         * Note: this depends on a default value being set -
         *       if the setting value is empty OR set to the default value, it's not displayed.
         *
         * @since 4.13.3
         *
         * @param string $setting The setting slug, like 'grid_lines_color'.
         * @param int $section_id The ID for the section - defaults to the current one if not set.
         *
         * @return boolean If the setting should be added to the style template.
         */
        public function should_include_setting_css($setting, $section_id = \null)
        {
        }
        /**
         * Function to simplify getting an option value.
         *
         * @since 4.13.3
         *
         * @param string $setting The setting slug, like 'grid_lines_color'.
         *
         * @return string The setting value;
         */
        public function get_option($setting)
        {
        }
        /**
         * Overwrite this method to be able to create dynamic settings.
         *
         * @param  array  $settings The actual options on the database.
         *
         * @return array $settings The modified settings.
         */
        public function create_ghost_settings($settings = [])
        {
        }
        /**
         * Get the section slug based on the Class name.
         *
         * @param  string $class_name The name of this Class.
         * @return string $slug The slug for this Class.
         */
        public static final function get_section_slug($class_name)
        {
        }
        /**
         * Hooks to the `tribe_customizer_pre_get_option`. This applies the `$this->create_ghost_settings()` method
         * to the settings on the correct section.
         *
         * @param  array $settings  Values from the Database from Customizer actions.
         * @param  array $search	Indexed search @see Tribe__Customizer::search_var().
         *
         * @return array
         */
        public function filter_settings($settings, $search)
        {
        }
        /* Arguments */
        /**
         * Set up section arguments.
         *
         * @since 4.13.3
         *
         * @return void
         */
        public function setup_arguments()
        {
        }
        /**
         * Filter section arguments.
         *
         * @since 4.14.0
         *
         * @return void
         */
        public function filter_arguments($arguments)
        {
        }
        /**
         * Retrieve section arguments.
         *
         * @since 4.14.0
         *
         * @return void
         */
        public function get_arguments()
        {
        }
        /**
         * Sets up the Customizer section content.
         *
         * @since 4.13.3
         */
        public function setup_content_arguments()
        {
        }
        /* Default Values */
        /**
         * Set up default values.
         *
         * @since 4.13.3
         */
        public function setup_defaults()
        {
        }
        /**
         * Get the (filtered) default settings.
         *
         * @return array The filtered defaults.
         */
        public function get_defaults($settings = [])
        {
        }
        public function filter_defaults($settings)
        {
        }
        /**
         * Get a single Default Value by key.
         *
         * @param string $key The key for the requested value.
         *
         * @return mixed The requested value.
         */
        public function get_default($key)
        {
        }
        /* Utility Functions */
        /**
         * Sugar function that returns the results of Tribe__Customizer->get_section_url() for the current section.
         *
         * @since 4.14.0
         *
         * @return string The URL to the TEC Customizer section.
         */
        public function get_section_url()
        {
        }
        /**
         * Sugar function that returns the results of Tribe__Customizer->get_section_link() for the current section.
         * Gets the HTML link to the current section in the TEC Customizer.
         *
         * @since 4.14.0
         *
         * @param string $link_text The text for the link.
         *
         * @return string The HTML anchor element, linking to the TEC Customizer section.
         *                An empty string is returned if missing a parameter.
         */
        public function get_section_link($link_text)
        {
        }
        /**
         * Sugar function that returns the results of Tribe__Customizer->get_settings_url()
         * for the specified setting in the _current section_.
         *
         * @since 4.14.0
         *
         * @param string $setting    The setting "slug" to link to.
         *
         * @return string The URL to the setting.
         */
        public function get_setting_url($setting)
        {
        }
        /**
         * Sugar function that returns the results of Tribe__Customizer->get_settings_url()
         * for the specified setting in the _current section_.
         *
         * @since 4.14.0
         *
         * @param string $setting    The setting "slug" to link to.
         * @param string $link_text The translated text for the link.
         *
         * @return string The HTML anchor element, linking to the TEC Customizer setting.
         */
        public function get_setting_link($setting, $link_text)
        {
        }
        /* Settings */
        /**
         * Sets up the Customizer settings arguments.
         *
         * @since 4.13.3
         */
        public function setup_content_settings()
        {
        }
        /**
         * Get the (filtered) content setting arguments.
         * @see filter_content_settings()
         *
         * @since 4.13.3
         *
         * @return array<string,mixed> The filtered arguments.
         */
        public function get_content_settings()
        {
        }
        /**
         * Filter the content settings arguments
         *
         * @since 4.13.3
         *
         * @param array<string,mixed> $arguments The list of arguments for settings.
         *
         * @return array<string,mixed> $arguments The filtered array of arguments.
         */
        public function filter_content_settings($arguments)
        {
        }
        /**
         * Sugar syntax to add a setting to the customizer content.
         *
         * @since 4.13.3
         *
         * @param WP_Customize_Manager $manager	  The instance of the Customizer Manager.
         * @param string			   $setting_name HTML name Attribute name of the setting.
         * @param string			   $key		  The key for the default value.
         * @param array<string,mixed>  $arguments	The control arguments.
         */
        protected function add_setting($manager, $setting_name, $key, $args)
        {
        }
        /* Headings */
        /**
         * Sets up the Customizer section Header and Separator arguments.
         *
         * @since 4.13.3
         */
        public function setup_content_headings()
        {
        }
        /**
         * Get the (filtered) content headings and separator arguments.
         * @see filter_content_headings()
         *
         * @since 4.13.3
         *
         * @return array<string,mixed> The filtered arguments.
         */
        public function get_content_headings()
        {
        }
        /**
         * Filter the content headings arguments
         *
         * @since 4.13.3
         *
         * @param array<string,mixed> $arguments The list of arguments for headings and separators.
         *
         * @return array<string,mixed> $arguments The filtered array of arguments.
         */
        public function filter_content_headings($arguments)
        {
        }
        /**
         * Sugar syntax to add heading and separator sections to the customizer content.
         * These are controls only in name: they do not actually control or save any setting.
         *
         * @since 4.13.3
         *
         * @param WP_Customize_Manager $manager   The instance of the Customizer Manager.
         * @param string			   $name	  HTML name Attribute name of the setting.
         * @param array<string,mixed>  $arguments The control arguments.
         *
         */
        protected function add_heading($section, $manager, $name, $args)
        {
        }
        /* Controls */
        /**
         * Sets up the Customizer controls arguments.
         *
         * @since 4.13.3
         */
        public function setup_content_controls()
        {
        }
        /**
         * Get a list (array) of accepted control types.
         * In the format slug => control class name.
         *
         * @since 4.13.3
         *
         * @return array<string,string> The array of control types and their associated classes.
         */
        public function get_accepted_control_types()
        {
        }
        /**
         * Determine if a control type is in our list of accepted ones.
         *
         * @since 4.13.3
         *
         * @param string $type The "slug" of the control type.
         *
         * @return boolean If a control type is in our list of accepted ones.
         */
        public function is_control_type_accepted($type)
        {
        }
        /**
         * Gets the class object associated with a control type.
         *
         * @since 4.13.3
         *
         * @param string $type The "slug" of the control type.
         *
         * @return object|false The control type class or false if type not found.
         */
        public function get_control_type($type)
        {
        }
        /**
         * Get the (filtered) content control arguments.
         * @see filter_content_controls()
         *
         * @since 4.13.3
         *
         * @return array<string,mixed> The filtered arguments.
         */
        public function get_content_controls()
        {
        }
        /**
         * Filter the content control arguments
         *
         * @since 4.13.3
         *
         * @param array<string,mixed> $arguments The list of arguments for controls.
         *
         * @return array<string,mixed> $arguments The filtered array of arguments.
         */
        public function filter_content_controls($arguments)
        {
        }
        /**
         * Sugar syntax to add a control to the customizer content.
         *
         * @since 4.13.3
         *
         * @param WP_Customize_Manager $manager	  The instance of the Customizer Manager.
         * @param string			   $setting_name HTML name Attribute name of the setting.
         * @param array<string,mixed>  $arguments	The control arguments.
         */
        protected function add_control($section, $manager, $setting_name, $args)
        {
        }
        /* CSS Output Functions */
        public function setup_css_template($template)
        {
        }
        /**
         * Overwrite this method to be able to implement the CSS template related to this section.
         *
         * @return string The CSS template.
         */
        public function get_css_template($template)
        {
        }
        /**
         * Filter the content headings arguments
         *
         * @since 4.13.3
         *
         * @param array<string,mixed> $arguments The list of arguments for headings and separators.
         *
         * @return array<string,mixed> $arguments The filtered array of arguments.
         */
        public function filter_css_template($template)
        {
        }
        /**
         * Utility function for when we need a color in RGB format,
         * since the Customizer always works with hex. Keepin' it DRY.
         *
         * @since 4.14.2
         *
         * @param string $option The option slug, like "grid-lines-color"
         * @param string $section The optional section slug, like 'global_elements'
         *
         * @return string $color_rgb The hex color expressed as an rgb string, like "255,255,255"
         */
        public function get_rgb_color($option, $section = \null)
        {
        }
    }
}
namespace Tribe {
    /**
     * Class DB_Lock
     *
     * @since   4.12.6
     *
     * @package Tribe
     */
    class DB_Lock
    {
        /**
         * The prefix of the options used to manage the database lock without use of MySQL functions
         * in the options table.
         *
         * @since 4.12.6
         *
         * @var string
         */
        public static $db_lock_option_prefix = 'tribe_db_lock_';
        /**
         * A map, shared among all instance of this trait in the session, of the currently held locks the
         * time the locks where acquired, a UNIX timestamp w/ micro-seconds.
         *
         * @since 4.12.6
         *
         * @var array<string,float>
         */
        protected static $held_db_locks = [];
        /**
         * Prunes the stale locks stored in the options table.
         *
         * @since 4.12.6
         *
         * @return int|false The number of pruned locks, or `false` to indicate the query to prune the locks generated
         *                   an error (logged).
         */
        public static function prune_stale_db_locks()
        {
        }
        /**
         * Acquires a db lock.
         *
         * To ensure back-compatibility with MySQL 5.6, the lock will hash the lock key using SHA1.
         *
         * @since 4.12.6
         *
         * @param string $lock_key The name of the db lock key to acquire.
         *
         * @return bool Whether the lock acquisition was successful or not.
         */
        public function acquire_db_lock($lock_key)
        {
        }
        /**
         * Returns whether the traits should try to acquire and release locks using MySQL `GET_LOCK` and `RELEASE_LOCK`
         * functions or not.
         *
         * If not, then the trait will manage the locks by means of direct SQL queries on the options table.
         *
         * @since 4.12.6
         *
         * @return bool Whether the trait should use MySQL functions to manage the locks, or not.
         */
        protected function manage_db_lock_w_mysql_functions()
        {
        }
        /**
         * Tries to acquire the database lock using MySQL functions (`GET_LOCK` and `IS_FREE_LOCK`).
         *
         * @since 4.12.6
         *
         * @param string $lock_key The lock key to try and acquire the lock for.
         * @param int    $timeout  The timeout, in seconds, to try and acquire the lock.
         *
         * @return bool Whether the lock was acquired or not.
         */
        protected function acquire_db_lock_w_mysql_functions($lock_key, $timeout)
        {
        }
        /**
         * Tries to acquire the lock using SQL queries.
         *
         * This kind of lock does not support timeout to avoid sieging the MySQL server during processes
         * that are most likely already stressing it. Either the lock is available the moment it's required or not.
         * The method leverages `INSERT IGNORE` that it's available on MySQL 5.6 and is atomic provided one of the values
         * we're trying to insert is UNIQUE or PRIMARY: `option_name` is UNIQUE in the `options` table.
         *
         * @since 4.12.6
         *
         * @param string $lock_key The lock key to try and acquire the lock for.
         *
         * @return bool Whether the lock was acquired or not.
         */
        protected function acquire_db_lock_w_queries($lock_key)
        {
        }
        /**
         * Returns the option name used to manage the lock for a key in the options table.
         *
         * @since 4.12.6
         *
         * @param string $lock_key The lock key to build the option name for.
         *
         * @return string The name of the option that will be used to manage the lock for the specified key in the
         *                options table.
         */
        public function get_db_lock_option_name($lock_key)
        {
        }
        /**
         * Releases the database lock of the record.
         *
         * Release a not held db lock will return `null`, not `false`.
         *
         * @since 4.12.6
         *
         * @param string $lock_key The name of the lock to release.
         *
         * @return bool Whether the lock was correctly released or not.
         */
        public function release_db_lock($lock_key)
        {
        }
        /**
         * Releases a DB lock held by the current database session (`$wpdb` instance) by
         * using the MySQL `RELEASE_LOCK` function.
         *
         * @since 4.12.6
         *
         * @param string $lock_key The lock key to release the lock for.
         *
         * @return bool Whether the lock was correctly released or not.
         */
        protected function release_db_lock_w_mysql_functions($lock_key)
        {
        }
        /**
         * Releases a lock using SQL queries.
         *
         * Note: differently from the `release_db_lock_w_mysql_functions`, this method will release the lock
         * even if the current session is not the one holding the lock.
         * To protect from this the trait uses a map of registered locks and when the locks where registered.
         *
         * @since 4.12.6
         *
         * @param string $lock_key The lock key to release the lock for.
         *
         * @return bool Whether the lock was released or not, errors will be logged, a `false` value is returned if
         *              the lock was not held to begin with.
         */
        protected function release_db_lock_w_queries($lock_key)
        {
        }
    }
}
namespace {
    /**
     * Class Tribe__Data
     *
     * A value object implementing the ArrayAccess interface.
     *
     * Example usage:
     *      $my_data = array( 'lorem' => 'dolor' );
     *
     *      // by default return 'nope' when a value is not set in the data
     *      $data = new Tribe__Data( $my_data, 'nope' );
     *
     *      // set some values in the data
     *      $data['foo'] = 'bar';
     *      $data['bar'] = 23;
     *
     *      // fetch some values
     *      $var_1 = $data['foo']; // "bar"
     *      $var_2 = $data['bar']; // 23
     *      $var_3 = $data['lorem']; // "dolor"
     *      $var_4 = $data['woo']; // "nope"
     *
     *      $data->set_default( 'not found' );
     *
     *      $var_4 = $data['woo']; // "not found"
     *
     */
    class Tribe__Data implements \ArrayAccess, \Iterator
    {
        /**
         * @var int
         */
        protected $index = 0;
        /**
         * @var array The data managed by this object.
         */
        protected $data;
        /**
         * @var mixed The default value that will be returned when trying to get the value
         *            of a non set key.
         */
        protected $default;
        /**
         * Tribe__Data constructor.
         *
         * @param array|object $data    An array or object of data.
         * @param mixed        $default The default value that should be returned if a key is not set
         */
        public function __construct($data = [], $default = \false)
        {
        }
        /**
         * Whether a offset exists
         *
         * @link  http://php.net/manual/en/arrayaccess.offsetexists.php
         * @param mixed $offset <p>
         *                      An offset to check for.
         *                      </p>
         * @return boolean true on success or false on failure.
         *                      </p>
         *                      <p>
         *                      The return value will be casted to boolean if non-boolean was returned.
         * @since 4.11.0
         */
        public function offsetExists($offset) : bool
        {
        }
        /**
         * Offset to retrieve
         *
         * @link  http://php.net/manual/en/arrayaccess.offsetget.php
         * @param mixed $offset <p>
         *                      The offset to retrieve.
         *                      </p>
         * @return mixed Can return all value types.
         * @since 4.11.0
         */
        public function offsetGet($offset)
        {
        }
        /**
         * Offset to set
         *
         * @link  http://php.net/manual/en/arrayaccess.offsetset.php
         * @param mixed $offset <p>
         *                      The offset to assign the value to.
         *                      </p>
         * @param mixed $value  <p>
         *                      The value to set.
         *                      </p>
         * @return void
         * @since 4.11.0
         */
        public function offsetSet($offset, $value)
        {
        }
        /**
         * Offset to unset
         *
         * @link  http://php.net/manual/en/arrayaccess.offsetunset.php
         * @param mixed $offset <p>
         *                      The offset to unset.
         *                      </p>
         * @return void
         * @since 4.11.0
         */
        public function offsetUnset($offset)
        {
        }
        /**
         * Gets the data this object manages.
         *
         * @return array
         */
        public function get_data()
        {
        }
        /**
         * Sets the data this object will manage.
         *
         * @param array $data
         */
        public function set_data(array $data)
        {
        }
        /**
         * Gets the default value that will be returned when a key is not set.
         *
         * @return mixed
         */
        public function get_default()
        {
        }
        /**
         * Sets the default value that should be returned when a key is not set.
         *
         * @param mixed $default
         */
        public function set_default($default)
        {
        }
        /**
         * Return the current element
         *
         * @link  http://php.net/manual/en/iterator.current.php
         * @return mixed Can return any type.
         * @since 4.11.0
         */
        public function current()
        {
        }
        /**
         * Move forward to next element
         *
         * @link  http://php.net/manual/en/iterator.next.php
         * @return void Any returned value is ignored.
         * @since 4.11.0
         */
        public function next()
        {
        }
        /**
         * Return the key of the current element
         *
         * @link  http://php.net/manual/en/iterator.key.php
         * @return mixed scalar on success, or null on failure.
         * @since 4.11.0
         */
        public function key()
        {
        }
        /**
         * Checks if current position is valid
         *
         * @link  http://php.net/manual/en/iterator.valid.php
         * @return boolean The return value will be casted to boolean and then evaluated.
         * Returns true on success or false on failure.
         * @since 4.11.0
         */
        public function valid()
        {
        }
        /**
         * Rewind the Iterator to the first element
         *
         * @link  http://php.net/manual/en/iterator.rewind.php
         * @return void Any returned value is ignored.
         * @since 4.11.0
         */
        public function rewind()
        {
        }
        /**
         * Converts the data object in an array.
         *
         * @return array
         *
         * @since 4.6
         */
        public function to_array()
        {
        }
    }
    class Tribe__Date_Utils
    {
        // Default formats, they are overridden by WP options or by arguments to date methods
        const DATEONLYFORMAT = 'F j, Y';
        const TIMEFORMAT = 'g:i A';
        const HOURFORMAT = 'g';
        const MINUTEFORMAT = 'i';
        const MERIDIANFORMAT = 'A';
        const DBDATEFORMAT = 'Y-m-d';
        const DBDATETIMEFORMAT = 'Y-m-d H:i:s';
        const DBTZDATETIMEFORMAT = 'Y-m-d H:i:s O';
        const DBTIMEFORMAT = 'H:i:s';
        const DBYEARMONTHTIMEFORMAT = 'Y-m';
        /**
         * Get the datepickerFormat index.
         *
         * @since 4.11.0.1
         *
         * @return int
         */
        public static function get_datepicker_format_index()
        {
        }
        /**
         * Try to format a Date to the Default Datepicker format
         *
         * @since  4.5.12
         *
         * @param  string      $date       Original Date that came from a datepicker
         * @param  string|int  $datepicker Datepicker format
         * @return string
         */
        public static function maybe_format_from_datepicker($date, $datepicker = \null)
        {
        }
        /**
         * Get the datepicker format, that is used to translate the option from the DB to a string
         *
         * @param  int $translate The db Option from datepickerFormat
         * @return string|array            If $translate is not set returns the full array, if not returns the `Y-m-d`
         */
        public static function datepicker_formats($translate = \null)
        {
        }
        /**
         * As PHP 5.2 doesn't have a good version of `date_parse_from_format`, this is how we deal with
         * possible weird datepicker formats not working
         *
         * @param  string $format The weird format you are using
         * @param  string $date   The date string to parse
         *
         * @return string         A DB formated Date, includes time if possible
         */
        public static function datetime_from_format($format, $date)
        {
        }
        /**
         * Returns the date only.
         *
         * @param int|string $date        The date (timestamp or string).
         * @param bool       $isTimestamp Is $date in timestamp format?
         * @param string|null $format The format used
         *
         * @return string The date only in DB format.
         */
        public static function date_only($date, $isTimestamp = \false, $format = \null)
        {
        }
        /**
         * Returns as string the nearest half a hour for a given valid string datetime.
         *
         * @since  4.10.2
         *
         * @param string $date Valid DateTime string.
         *
         * @return string Rounded datetime string
         */
        public static function round_nearest_half_hour($date)
        {
        }
        /**
         * Returns the time only.
         *
         * @param string $date The date.
         *
         * @return string The time only in DB format.
         */
        public static function time_only($date)
        {
        }
        /**
         * Returns the hour only.
         *
         * @param string $date The date.
         *
         * @return string The hour only.
         */
        public static function hour_only($date)
        {
        }
        /**
         * Returns the minute only.
         *
         * @param string $date The date.
         *
         * @return string The minute only.
         */
        public static function minutes_only($date)
        {
        }
        /**
         * Returns the meridian (am or pm) only.
         *
         * @param string $date The date.
         *
         * @return string The meridian only in DB format.
         */
        public static function meridian_only($date)
        {
        }
        /**
         * Returns the number of seconds (absolute value) between two dates/times.
         *
         * @param string $date1 The first date.
         * @param string $date2 The second date.
         *
         * @return int The number of seconds between the dates.
         */
        public static function time_between($date1, $date2)
        {
        }
        /**
         * The number of days between two arbitrary dates.
         *
         * @param string $date1 The first date.
         * @param string $date2 The second date.
         *
         * @return int The number of days between two dates.
         */
        public static function date_diff($date1, $date2)
        {
        }
        /**
         * Returns the last day of the month given a php date.
         *
         * @param int $timestamp THe timestamp.
         *
         * @return string The last day of the month.
         */
        public static function get_last_day_of_month($timestamp)
        {
        }
        /**
         * Returns true if the timestamp is a weekday.
         *
         * @param int $curDate A timestamp.
         *
         * @return bool If the timestamp is a weekday.
         */
        public static function is_weekday($curdate)
        {
        }
        /**
         * Returns true if the timestamp is a weekend.
         *
         * @param int $curDate A timestamp.
         *
         * @return bool If the timestamp is a weekend.
         */
        public static function is_weekend($curdate)
        {
        }
        /**
         * Gets the last day of the week in a month (ie the last Tuesday).  Passing in -1 gives you the last day in the month.
         *
         * @param int $curdate     A timestamp.
         * @param int $day_of_week The index of the day of the week.
         *
         * @return int The timestamp of the date that fits the qualifications.
         */
        public static function get_last_day_of_week_in_month($curdate, $day_of_week)
        {
        }
        /**
         * Gets the first day of the week in a month (ie the first Tuesday).
         *
         * @param int $curdate     A timestamp.
         * @param int $day_of_week The index of the day of the week.
         *
         * @return int The timestamp of the date that fits the qualifications.
         */
        public static function get_first_day_of_week_in_month($curdate, $day_of_week)
        {
        }
        /**
         * From http://php.net/manual/en/function.date.php
         *
         * @param int $number A number.
         *
         * @return string The ordinal for that number.
         */
        public static function number_to_ordinal($number)
        {
        }
        /**
         * check if a given string is a timestamp
         *
         * @param $timestamp
         *
         * @return bool
         */
        public static function is_timestamp($timestamp)
        {
        }
        /**
         * Accepts a string representing a date/time and attempts to convert it to
         * the specified format, returning an empty string if this is not possible.
         *
         * @since 5.1.5 Make use of `wp_date` for i18n.
         *
         * @param $dt_string
         * @param $new_format
         *
         * @return string
         */
        public static function reformat($dt_string, $new_format)
        {
        }
        /**
         * Accepts a numeric offset (such as "4" or "-6" as stored in the gmt_offset
         * option) and converts it to a strtotime() style modifier that can be used
         * to adjust a DateTime object, etc.
         *
         * @param $offset
         *
         * @return string
         */
        public static function get_modifier_from_offset($offset)
        {
        }
        /**
         * Returns the weekday of the 1st day of the month in
         * "w" format (ie, Sunday is 0 and Saturday is 6) or
         * false if this cannot be established.
         *
         * @param  mixed $month
         * @return int|bool
         */
        public static function first_day_in_month($month)
        {
        }
        /**
         * Returns the weekday of the last day of the month in
         * "w" format (ie, Sunday is 0 and Saturday is 6) or
         * false if this cannot be established.
         *
         * @param  mixed $month
         * @return int|bool
         */
        public static function last_day_in_month($month)
        {
        }
        /**
         * Returns the day of the week the week ends on, expressed as a "w" value
         * (ie, Sunday is 0 and Saturday is 6).
         *
         * @param  int $week_starts_on
         *
         * @return int
         */
        public static function week_ends_on($week_starts_on)
        {
        }
        /**
         * Helper method to convert EventAllDay values to a boolean
         *
         * @param mixed $all_day_value Value to check for "all day" status. All day values: (true, 'true', 'TRUE', 'yes')
         *
         * @return boolean Is value considered "All Day"?
         */
        public static function is_all_day($all_day_value)
        {
        }
        /**
         * Determine if "now" is between two dates.
         *
         * @since 5.0.2
         *
         * @param string|DateTime|int $start_date A `strtotime` parsable string, a DateTime object or a timestamp.
         * @param string|DateTime|int $end_date   A `strtotime` parsable string, a DateTime object or a timestamp.
         * @param string|DateTime|int $now        A `strtotime` parsable string, a DateTime object or a timestamp. Defaults to 'now'.
         *
         * @return boolean Whether the current datetime (or passed "now") is between the passed start and end dates.
         */
        public static function is_now($start_date, $end_date, $now = 'now') : bool
        {
        }
        /**
         * Sort an array of dates.
         *
         * @since 5.0.2
         *
         * @param mixed  $dates     A single array of dates, or dates passed as individual params.
         *                          Individual dates can be a `strtotime` parsable string, a DateTime object or a timestamp.
         * @param string $direction 'ASC' or 'DESC' for ascending/descending sorting. Defaults to 'ASC'.
         *
         * @return array<DateTime> A sorted array of DateTime objects.
         */
        public static function sort(array $dates, string $direction = 'ASC') : array
        {
        }
        /**
         * Given 2 datetime ranges, return whether the 2nd one occurs during the 1st one
         * Note: all params should be unix timestamps
         *
         * @param integer $range_1_start timestamp for start of the first range
         * @param integer $range_1_end timestamp for end of the first range
         * @param integer $range_2_start timestamp for start of the second range
         * @param integer $range_2_end timestamp for end of the second range
         *
         * @return bool
         */
        public static function range_coincides($range_1_start, $range_1_end, $range_2_start, $range_2_end)
        {
        }
        /**
         * Converts a locally-formatted date to a unix timestamp. This is a drop-in
         * replacement for `strtotime()`, except that where strtotime assumes GMT, this
         * assumes local time (as described below). If a timezone is specified, this
         * function defers to strtotime().
         *
         * If there is a timezone_string available, the date is assumed to be in that
         * timezone, otherwise it simply subtracts the value of the 'gmt_offset'
         * option.
         *
         * @see  strtotime()
         * @uses get_option() to retrieve the value of 'gmt_offset'
         *
         * @param string $string A date/time string. See `strtotime` for valid formats
         *
         * @return int UNIX timestamp.
         */
        public static function wp_strtotime($string)
        {
        }
        /**
         * Returns an array of localized full month names.
         *
         * @return array
         */
        public static function get_localized_months_full()
        {
        }
        /**
         * Returns an array of localized short month names.
         *
         * @return array
         */
        public static function get_localized_months_short()
        {
        }
        /**
         * Returns an array of localized full week day names.
         *
         * @return array
         */
        public static function get_localized_weekdays_full()
        {
        }
        /**
         * Returns an array of localized short week day names.
         *
         * @return array
         */
        public static function get_localized_weekdays_short()
        {
        }
        /**
         * Returns an array of localized week day initials.
         *
         * @return array
         */
        public static function get_localized_weekdays_initial()
        {
        }
        /**
         * Return a WP Locale weekday in the specified format
         *
         * @since 4.4.3
         *
         * @param int|string $weekday Day of week
         * @param string $format Weekday format: full, weekday, initial, abbreviation, abbrev, abbr, short
         *
         * @return string
         */
        public static function wp_locale_weekday($weekday, $format = 'weekday')
        {
        }
        /**
         * Return a WP Locale month in the specified format
         *
         * @since 4.4.3
         *
         * @param int|string $month Month of year
         * @param string $format Month format: full, month, abbreviation, abbrev, abbr, short
         *
         * @return string
         */
        public static function wp_locale_month($month, $format = 'month')
        {
        }
        // DEPRECATED METHODS
        // @codingStandardsIgnoreStart
        /**
         * Deprecated camelCase version of self::date_only
         *
         * @param int|string $date        The date (timestamp or string).
         * @param bool       $isTimestamp Is $date in timestamp format?
         *
         * @return string The date only in DB format.
         */
        public static function dateOnly($date, $isTimestamp = \false)
        {
        }
        /**
         * Deprecated camelCase version of self::time_only
         *
         * @param string $date The date.
         *
         * @return string The time only in DB format.
         */
        public static function timeOnly($date)
        {
        }
        /**
         * Deprecated camelCase version of self::hour_only
         *
         * @param string $date The date.
         *
         * @return string The hour only.
         */
        public static function hourOnly($date)
        {
        }
        /**
         * Deprecated camelCase version of self::minutes_only
         *
         * @param string $date The date.
         *
         * @return string The minute only.
         */
        public static function minutesOnly($date)
        {
        }
        /**
         * Deprecated camelCase version of self::meridian_only
         *
         * @param string $date The date.
         *
         * @return string The meridian only in DB format.
         */
        public static function meridianOnly($date)
        {
        }
        /**
         * Returns the end of a given day.
         *
         * @deprecated since 3.10 - use tribe_event_end_of_day()
         * @todo       remove in 4.1
         *
         * @param int|string $date        The date (timestamp or string).
         * @param bool       $isTimestamp Is $date in timestamp format?
         *
         * @return string The date and time of the end of a given day
         */
        public static function endOfDay($date, $isTimestamp = \false)
        {
        }
        /**
         * Returns the beginning of a given day.
         *
         * @deprecated since 3.10
         * @todo       remove in 4.1
         *
         * @param int|string $date        The date (timestamp or string).
         * @param bool       $isTimestamp Is $date in timestamp format?
         *
         * @return string The date and time of the beginning of a given day.
         */
        public static function beginningOfDay($date, $isTimestamp = \false)
        {
        }
        /**
         * Deprecated camelCase version of self::time_between
         *
         * @param string $date1 The first date.
         * @param string $date2 The second date.
         *
         * @return int The number of seconds between the dates.
         */
        public static function timeBetween($date1, $date2)
        {
        }
        /**
         * Deprecated camelCase version of self::date_diff
         *
         * @param string $date1 The first date.
         * @param string $date2 The second date.
         *
         * @return int The number of days between two dates.
         */
        public static function dateDiff($date1, $date2)
        {
        }
        /**
         * Deprecated camelCase version of self::get_last_day_of_month
         *
         * @param int $timestamp THe timestamp.
         *
         * @return string The last day of the month.
         */
        public static function getLastDayOfMonth($timestamp)
        {
        }
        /**
         * Deprecated camelCase version of self::is_weekday
         *
         * @param int $curDate A timestamp.
         *
         * @return bool If the timestamp is a weekday.
         */
        public static function isWeekday($curdate)
        {
        }
        /**
         * Deprecated camelCase version of self::is_weekend
         *
         * @param int $curDate A timestamp.
         *
         * @return bool If the timestamp is a weekend.
         */
        public static function isWeekend($curdate)
        {
        }
        /**
         * Deprecated camelCase version of self::get_last_day_of_week_in_month
         *
         * @param int $curdate     A timestamp.
         * @param int $day_of_week The index of the day of the week.
         *
         * @return int The timestamp of the date that fits the qualifications.
         */
        public static function getLastDayOfWeekInMonth($curdate, $day_of_week)
        {
        }
        /**
         * Deprecated camelCase version of self::get_first_day_of_week_in_month
         *
         * @param int $curdate     A timestamp.
         * @param int $day_of_week The index of the day of the week.
         *
         * @return int The timestamp of the date that fits the qualifications.
         */
        public static function getFirstDayOfWeekInMonth($curdate, $day_of_week)
        {
        }
        /**
         * Deprecated camelCase version of self::number_to_ordinal
         *
         * @param int $number A number.
         *
         * @return string The ordinal for that number.
         */
        public static function numberToOrdinal($number)
        {
        }
        /**
         * Deprecated camelCase version of self::is_timestamp
         *
         * @param $timestamp
         *
         * @return bool
         */
        public static function isTimestamp($timestamp)
        {
        }
        /**
         * Gets the timestamp of a day in week, month and year context.
         *
         * Kudos to [icedwater StackOverflow user](http://stackoverflow.com/users/1091386/icedwater) in
         * [his answer](http://stackoverflow.com/questions/924246/get-the-first-or-last-friday-in-a-month).
         *
         * Usage examples:
         * "The second Wednesday of March 2015" - `get_day_timestamp( 3, 2, 3, 2015, 1)`
         * "The last Friday of December 2015" - `get_day_timestamp( 5, 1, 12, 2015, -1)`
         * "The first Monday of April 2016 - `get_day_timestamp( 1, 1, 4, 2016, 1)`
         * "The penultimate Thursday of January 2012" - `get_day_timestamp( 4, 2, 1, 2012, -1)`
         *
         * @param int $day_of_week    The day representing the number in the week, Monday is `1`, Tuesday is `2`, Sunday is `7`
         * @param int $week_in_month  The week number in the month; first week is `1`, second week is `2`; when direction is reverse
         *                  then `1` is last week of the month, `2` is penultimate week of the month and so on.
         * @param int $month          The month number in the year, January is `1`
         * @param int $year           The year number, e.g. "2015"
         * @param int $week_direction Either `1` or `-1`; the direction for the search referring to the week, defaults to `1`
         *                       to specify weeks in natural order so:
         *                       $week_direction `1` and $week_in_month `1` means "first week of the month"
         *                       $week_direction `1` and $week_in_month `3` means "third week of the month"
         *                       $week_direction `-1` and $week_in_month `1` means "last week of the month"
         *                       $week_direction `-1` and $week_in_month `2` means "penultimmate week of the month"
         *
         * @return int The day timestamp
         */
        public static function get_weekday_timestamp($day_of_week, $week_in_month, $month, $year, $week_direction = 1)
        {
        }
        /**
         * Unescapes date format strings to be used in functions like `date`.
         *
         * Double escaping happens when storing a date format in the database.
         *
         * @param mixed $date_format A date format string.
         *
         * @return mixed Either the original input or an unescaped date format string.
         */
        public static function unescape_date_format($date_format)
        {
        }
        /**
         * Builds a date object from a given datetime and timezone.
         *
         * @since 4.9.5
         *
         * @param string|DateTime|int      $datetime      A `strtotime` parsable string, a DateTime object or
         *                                                a timestamp; defaults to `now`.
         * @param string|DateTimeZone|null $timezone      A timezone string, UTC offset or DateTimeZone object;
         *                                                defaults to the site timezone; this parameter is ignored
         *                                                if the `$datetime` parameter is a DatTime object.
         * @param bool                     $with_fallback Whether to return a DateTime object even when the date data is
         *                                                invalid or not; defaults to `true`.
         *
         * @return DateTime|false A DateTime object built using the specified date, time and timezone; if `$with_fallback`
         *                        is set to `false` then `false` will be returned if a DateTime object could not be built.
         */
        public static function build_date_object($datetime = 'now', $timezone = \null, $with_fallback = \true)
        {
        }
        /**
         * Validates a date string to make sure it can be used to build DateTime objects.
         *
         * @since 4.9.5
         *
         * @param string $date The date string that should validated.
         *
         * @return bool Whether the date string can be used to build DateTime objects, and is thus parsable by functions
         *              like `strtotime`, or not.
         */
        public static function is_valid_date($date)
        {
        }
        /**
         * Returns the DateTime object representing the start of the week for a date.
         *
         * @since 4.9.21
         *
         * @throws Exception
         *
         * @param string|int|\DateTime $date          The date string, timestamp or object.
         * @param int|null             $start_of_week The number representing the start of week day as handled by
         *                                            WordPress: `0` (for Sunday) through `6` (for Saturday).
         *
         * @return array An array of objects representing the week start and end days, or `false` if the
         *                        supplied date is invalid. The timezone of the returned object is set to the site one.
         *                        The week start has its time set to `00:00:00`, the week end will have its time set
         *                        `23:59:59`.
         */
        public static function get_week_start_end($date, $start_of_week = \null)
        {
        }
        /**
         * Given a specific DateTime we determine the end of that day based on our Internal End of Day Cut-off.
         *
         * @since 4.11.2
         *
         * @param string|DateTimeInterface $date    Date that we are getting the end of day from.
         * @param null|string              $cutoff  Which cutoff to use.
         *
         * @return DateTimeInterface|false Returns a DateTimeInterface when a valid date is given or false.
         */
        public static function get_shifted_end_of_day($date, $cutoff = \null)
        {
        }
        /**
         * Given a specific DateTime we determine the start of that day based on our Internal End of Day Cut-off.
         *
         * @since 4.11.2
         *
         * @param string|DateTimeInterface $date    Date that we are getting the start of day from.
         * @param null|string              $cutoff  Which cutoff to use.
         *
         * @return DateTimeInterface|false Returns a DateTimeInterface when a valid date is given or false.
         */
        public static function get_shifted_start_of_day($date, $cutoff = \null)
        {
        }
        /**
         * Builds and returns a `DateInterval` object from the interval specification.
         *
         * For performance purposes the use of `DateInterval` specifications is preferred, so `P1D` is better than
         * `1 day`.
         *
         * @since 4.10.2
         *
         * @return DateInterval The built date interval object.
         */
        public static function interval($interval_spec)
        {
        }
        /**
         * Builds the immutable version of a date from a string, integer (timestamp) or \DateTime object.
         *
         * It's the immutable version of the `Tribe__Date_Utils::build_date_object` method.
         *
         * @since 4.10.2
         *
         * @param string|DateTime|int      $datetime      A `strtotime` parsable string, a DateTime object or
         *                                                a timestamp; defaults to `now`.
         * @param string|DateTimeZone|null $timezone      A timezone string, UTC offset or DateTimeZone object;
         *                                                defaults to the site timezone; this parameter is ignored
         *                                                if the `$datetime` parameter is a DatTime object.
         * @param bool                     $with_fallback Whether to return a DateTime object even when the date data is
         *                                                invalid or not; defaults to `true`.
         *
         * @return DateTimeImmutable|false A DateTime object built using the specified date, time and timezone; if
         *                                 `$with_fallback` is set to `false` then `false` will be returned if a
         *                                 DateTime object could not be built.
         */
        static function immutable($datetime = 'now', $timezone = \null, $with_fallback = \true)
        {
        }
        /**
         * Builds a date object from a given datetime and timezone.
         *
         * An alias of the `Tribe__Date_Utils::build_date_object` function.
         *
         * @since 4.10.2
         *
         * @param string|DateTime|int      $datetime      A `strtotime` parsable string, a DateTime object or
         *                                                a timestamp; defaults to `now`.
         * @param string|DateTimeZone|null $timezone      A timezone string, UTC offset or DateTimeZone object;
         *                                                defaults to the site timezone; this parameter is ignored
         *                                                if the `$datetime` parameter is a DatTime object.
         * @param bool                     $with_fallback Whether to return a DateTime object even when the date data is
         *                                                invalid or not; defaults to `true`.
         *
         * @return DateTime|false A DateTime object built using the specified date, time and timezone; if `$with_fallback`
         *                        is set to `false` then `false` will be returned if a DateTime object could not be built.
         */
        public static function mutable($datetime = 'now', $timezone = \null, $with_fallback = \true)
        {
        }
    }
    /**
     * Class Tribe__Db
     *
     * Provides information about the database settings.
     */
    class Tribe__Db
    {
        /**
         * Gets the value of the `max_allowed_packet` setting.
         *
         * @since 4.7.12
         *
         * @return int
         *
         * @link  https://dev.mysql.com/doc/refman/5.7/en/packet-too-large.html
         */
        public function get_max_allowed_packet_size()
        {
        }
    }
    class Tribe__Debug
    {
        /**
         * constructor
         */
        public function __construct()
        {
        }
        /**
         * Tribe debug function. usage: self::debug( 'Message', $data, 'log' );
         *
         * @param string      $title  Message to display in log
         * @param string|bool $data   Optional data to display
         * @param string      $format Optional format (log|warning|error|notice)
         *
         * @return void
         */
        public static function debug($title, $data = \false, $format = 'log')
        {
        }
        /**
         * Render the debug logging to the php error log. This can be over-ridden by removing the filter.
         *
         * @param string      $title  - message to display in log
         * @param string|bool $data   - optional data to display
         * @param string      $format - optional format (log|warning|error|notice)
         *
         * @return void
         */
        public static function render($title, $data = \false, $format = 'log')
        {
        }
        /**
         * Static Singleton Factory Method
         *
         * @return Tribe__Debug
         */
        public static function instance()
        {
        }
    }
    /**
     * Tracks which Tribe (or related) plugins are registered, activated, or requirements satisfied.
     */
    class Tribe__Dependency
    {
        /**
         * A multidimensional array of active tribe plugins in the following format
         *
         * [
         *  'class'   => 'main class name',
         *  'version' => 'version num', (optional)
         *  'path'    => 'Path to the main plugin/bootstrap file' (optional)
         * ]
         */
        protected $active_plugins = [];
        /**
         * A multidimensional array of active tribe plugins in the following format
         *
         * [
         *  'class'             => 'main class name',
         *  'path'              => 'Path to the main plugin/bootstrap file'
         *  'version'           => 'version num', (optional)
         *  'dependencies'      => 'A multidimensional of dependencies' (optional)
         * ]
         */
        protected $registered_plugins = [];
        /**
         * An array of class Tribe__Admin__Notice__Plugin_Download per plugin
         *
         * @since 4.9
         *
         */
        protected $admin_messages = [];
        /**
         * Adds a plugin to the active list
         *
         * @since 4.9
         *
         * @param string      $main_class   Main/base class for this plugin
         * @param null|string $version      Version number of plugin
         * @param null|string $path         Path to the main plugin/bootstrap file
         * @param array       $dependencies An array of dependencies for a plugin
         */
        public function add_registered_plugin($main_class, $version = \null, $path = \null, $dependencies = [])
        {
        }
        /**
         * Retrieves registered plugin array
         *
         * @since 4.9
         *
         * @return array
         */
        public function get_registered_plugins()
        {
        }
        /**
         * Adds a plugin to the active list
         *
         * @param string $main_class Main/base class for this plugin
         * @param string $version    Version number of plugin
         * @param string $path       Path to the main plugin/bootstrap file
         */
        public function add_active_plugin($main_class, $version = \null, $path = \null)
        {
        }
        /**
         * Retrieves active plugin array
         *
         * @return array
         */
        public function get_active_plugins()
        {
        }
        /**
         * Searches the plugin list for key/value pair and return the full details for that plugin
         *
         * @param string $search_key The array key this value will appear in
         * @param string $search_val The value itself
         *
         * @return array|null
         */
        public function get_plugin_by_key($search_key, $search_val)
        {
        }
        /**
         * Retrieves the plugins details by class name
         *
         * @param string $main_class Main/base class for this plugin
         *
         * @return array|null
         */
        public function get_plugin_by_class($main_class)
        {
        }
        /**
         * Retrieves the version of the plugin
         *
         * @param string $main_class Main/base class for this plugin
         *
         * @return string|null Version
         */
        public function get_plugin_version($main_class)
        {
        }
        /**
         * Checks if the plugin is active
         *
         * @param string $main_class Main/base class for this plugin
         *
         * @return bool
         */
        public function is_plugin_active($main_class)
        {
        }
        /**
         * Searches the registered plugin list for key/value pair and return the full details for that plugin
         *
         * @since 4.9
         *
         * @param string $search_key The array key this value will appear in
         * @param string $search_val The value itself
         *
         * @return array|null
         */
        public function get_registered_plugin_by_key($search_key, $search_val)
        {
        }
        /**
         * Retrieves the registered plugins details by class name
         *
         * @since 4.9
         *
         * @param string $main_class Main/base class for this plugin
         *
         * @return array|null
         */
        public function get_registered_plugin_by_class($main_class)
        {
        }
        /**
         * Retrieves the version of the registered plugin
         *
         * @since 4.9
         *
         * @param string $main_class Main/base class for this plugin
         *
         * @return string|null Version
         */
        public function get_registered_plugin_version($main_class)
        {
        }
        /**
         * Checks if the plugin is active
         *
         * @since 4.9
         *
         * @param string $main_class Main/base class for this plugin
         *
         * @return bool
         */
        public function is_plugin_registered($main_class)
        {
        }
        /**
         * Checks if a plugin is active and has the specified version
         *
         * @since 4.9
         *
         * @param string $main_class Main/base class for this plugin
         * @param string $version Version to do a compare against
         * @param string $compare Version compare string, defaults to >=
         *
         * @return bool
         */
        public function is_plugin_version($main_class, $version, $compare = '>=')
        {
        }
        /**
         * Is the plugin registered with at least the minimum version
         *
         * @since 4.9
         *
         * @param string $main_class Main/base class for this plugin
         * @param string $version Version to do a compare against
         * @param string $compare Version compare string, defaults to >=
         *
         * @return bool
         */
        public function is_plugin_version_registered($main_class, $version, $compare = '>=')
        {
        }
        /**
         * Checks if each plugin is active and exceeds the specified version number
         *
         * @param array $plugins_required Each item is a 'class_name' => 'min version' pair. Min ver can be null.
         *
         * @return bool
         */
        public function has_requisite_plugins($plugins_required = [])
        {
        }
        /**
         * Retrieves Registered Plugin by Class Name from Array
         *
         * @since 4.9
         *
         * @return array|boolean
         */
        public function get_registered_plugin($class)
        {
        }
        /**
         * Gets all dependencies or single class requirements if parent, co, add does not exist use array as is if they
         * do exist check each one in turn.
         *
         * @since 4.9
         *
         * @param array $plugin       An array of data for given registered plugin.,
         * @param array $dependencies An array of dependencies for a plugin.
         * @param bool  $addon        Indicates if the plugin is an add-on for The Events Calendar or Event Tickets.
         *
         * @return true|int  The number of failed dependency checks; `true` or `0` to indicate no checks failed.
         */
        public function has_valid_dependencies($plugin, $dependencies = [], $addon = \false)
        {
        }
        /**
         * Gets the Tribe__PUE__Checker instance of a given plugin based on the class.
         *
         * @since  4.9.12
         *
         * @param  string $class Which plugin main class we are looking for.
         *
         * @return Tribe__PUE__Checker
         */
        public function get_pue_from_class($class)
        {
        }
        /**
         * Register a Plugin
         *
         * @since 4.9
         *
         * @param string $file_path    Full file path to the base plugin file.
         * @param string $main_class   The Main/base class for this plugin.
         * @param string $version      The plugin version.
         * @param array  $classes_req  Any Main class files/tribe plugins required for this to run.
         * @param array  $dependencies an array of dependencies to check.
         */
        public function register_plugin($file_path, $main_class, $version, $classes_req = [], $dependencies = [])
        {
        }
        /**
         * Checks if this plugin has permission to run, if not it notifies the admin
         *
         * @since 4.9
         *
         * @param string $main_class   The Main/base class for this plugin
         *
         * @return bool Indicates if plugin should continue initialization
         */
        public function check_plugin($main_class)
        {
        }
        /**
         * Check an add-on dependencies for its parent
         *
         * @since 4.9
         *
         * @param string $main_class A string of the main class for the plugin being checked.
         *
         * @return bool  Returns false if any dependency is invalid.
         */
        protected function check_addon_dependencies($main_class)
        {
        }
        /**
         * Static Singleton Factory Method
         *
         * @deprecated  4.9.12  We shouldn't be handling singletons internally.
         *
         * @return self
         */
        public static function instance()
        {
        }
        /**
         * Test if plugin is an extension.
         * This is cludgy as none of our extensions flag themselves as such.
         * THus, we have to do some text searching.
         *
         * @since 5.1.3
         *
         * @param string $class - the classname to use to look up the plugin.
         *
         * @return boolean
         */
        public function is_extension($class) : bool
        {
        }
        /**
         * Return if we have a premium plugin active.
         * Results may be unreliable if called before the tribe_plugins_loaded hook.
         *
         * @since 5.1.3
         *
         * @return bool
         */
        public function has_active_premium_plugin() : bool
        {
        }
    }
    /**
     * Class Tribe__Deprecation
     *
     * Utilities to deprecate code.
     *
     * @since 4.3
     */
    class Tribe__Deprecation
    {
        /**
         * @var self
         */
        protected static $instance;
        /**
         * An array specifying the tag, version and optional replacements
         * for deprecated filters.
         *
         * Use the format `<new_filter_tag> => array(<version>, <deprecated_filter_tag>)`.
         * e.g. `'tribe_current' => array ('4.3', 'tribe_deprecated')`
         *
         * For performance reasons this array is manually set and **not**
         * dynamically populated.
         *
         * @var array
         */
        protected $deprecated_filters = ['tribe_cost_regex' => ['4.3', 'tribe_events_cost_regex'], 'tribe_rewrite_prepared_slug' => ['4.3', 'tribe_events_rewrite_prepared_slug']];
        /**
         * An array specifying the tag, version and optional replacements
         * for deprecated actions.
         *
         * Use the format `<new_action_tag> => array(<version>, <deprecated_action_tag>)`.
         * e.g. `'tribe_current' => array ('4.3', 'tribe_deprecated')`
         *
         * For performance reasons this array is manually set and **not**
         * dynamically populated.
         *
         * @var array
         */
        protected $deprecated_actions = ['tribe_pre_rewrite' => ['4.3', 'tribe_events_pre_rewrite']];
        /**
         * @return Tribe__Deprecation
         */
        public static function instance()
        {
        }
        /**
         * Hooks the deprecation notices for actions.
         *
         * @internal
         */
        public function deprecate_actions()
        {
        }
        /**
         * Hooks the deprecation notices for filters.
         *
         * @internal
         */
        public function deprecate_filters()
        {
        }
        /**
         * Triggers a deprecation notice if there is any callback hooked on a deprecated action.
         */
        public function deprecated_action_message()
        {
        }
        /**
         * Triggers a deprecation notice if there is any callback hooked on a deprecated filter.
         *
         * @since 4.5.13 the filtered value is passed through unchanged
         *
         * @param mixed $value
         *
         * @return mixed
         */
        public function deprecated_filter_message($value = \null)
        {
        }
        /**
         * @param array $deprecated_filters
         *
         * @internal
         */
        public function set_deprecated_filters($deprecated_filters)
        {
        }
        /**
         * @param array $deprecated_actions
         *
         * @internal
         */
        public function set_deprecated_actions($deprecated_actions)
        {
        }
        /**
         * @param string $deprecated_tag
         *
         * @return int|string
         */
        protected function get_action_for_deprecated_tag($deprecated_tag)
        {
        }
        /**
         * @param string $deprecated_tag
         *
         * @return int|string
         */
        protected function get_filter_for_deprecated_tag($deprecated_tag)
        {
        }
    }
    class Tribe__Template
    {
        /**
         * The folders into which we will look for the template.
         *
         * @since  4.6.2
         *
         * @var array
         */
        protected $folder = [];
        /**
         * The origin class for the plugin where the template lives
         *
         * @since  4.6.2
         *
         * @var object
         */
        public $origin;
        /**
         * The local context for templates, mutable on every self::template() call
         *
         * @since  4.6.2
         *
         * @var array
         */
        protected $context = [];
        /**
         * The global context for this instance of templates
         *
         * @since  4.6.2
         *
         * @var array
         */
        protected $global = [];
        /**
         * Used for finding templates for public templates on themes inside of a folder.
         *
         * @since  4.10.2
         *
         * @var string[]
         */
        protected $template_origin_base_folder = ['src', 'views'];
        /**
         * Allow changing if class will extract data from the local context
         *
         * @since  4.6.2
         *
         * @var boolean
         */
        protected $template_context_extract = \false;
        /**
         * Current template hook name.
         *
         * @since 4.12.1
         *
         * @var string|null
         */
        protected $template_current_hook_name;
        /**
         * Base template for where to look for template
         *
         * @since  4.6.2
         *
         * @var array
         */
        protected $template_base_path;
        /**
         * Should we use a lookup into the list of folders to try to find the file
         *
         * @since  4.7.20
         *
         * @var  bool
         */
        protected $template_folder_lookup = \false;
        /**
         * Create a class variable for the include path, to avoid conflicting with extract.
         *
         * @since  4.11.0
         *
         * @var  string
         */
        protected $template_current_file_path;
        /**
         * Whether to look for template files in common or not; defaults to true.
         *
         * @since 4.12.10
         *
         * @var bool
         */
        protected $common_lookup = \true;
        /**
         * A map of aliases to add a rewritten version of the paths to the template lists.
         * The map has format `original => alias`.
         *
         * @since 4.12.10
         *
         * @var array<string,string>
         */
        protected $aliases = [];
        /**
         * Configures the class origin plugin path
         *
         * @since  4.6.2
         *
         * @param  object|string  $origin   The base origin for the templates
         *
         * @return self
         */
        public function set_template_origin($origin = \null)
        {
        }
        /**
         * Configures the class with the base folder in relation to the Origin
         *
         * @since  4.6.2
         *
         * @param  array|string   $folder  Which folder we are going to look for templates
         *
         * @return self
         */
        public function set_template_folder($folder = \null)
        {
        }
        /**
         * Returns the array for which folder this template instance is looking into.
         *
         * @since 4.11.0
         *
         * @return array Current folder we are looking for templates.
         */
        public function get_template_folder()
        {
        }
        /**
         * Configures the class with the base folder in relation to the Origin
         *
         * @since  4.7.20
         *
         * @param  mixed $value Should we look for template files in the list of folders.
         *
         * @return self
         */
        public function set_template_folder_lookup($value = \true)
        {
        }
        /**
         * Gets in this instance of the template engine whether we are looking public folders like themes.
         *
         * @since 4.12.1
         *
         * @return bool Whether we are looking into theme folders.
         */
        public function get_template_folder_lookup()
        {
        }
        /**
         * Configures the class global context
         *
         * @since  4.6.2
         *
         * @param  array  $context  Default global Context
         *
         * @return self
         */
        public function add_template_globals($context = [])
        {
        }
        /**
         * Configures if the class will extract context for template
         *
         * @since  4.6.2
         *
         * @param  bool  $value  Should we extract context for templates
         *
         * @return self
         */
        public function set_template_context_extract($value = \false)
        {
        }
        /**
         * Set the current hook name for the template include.
         *
         * @since  4.12.1
         *
         * @param  string  $value  Which value will be saved as the current hook name.
         *
         * @return self  Allow daisy-chaining.
         */
        public function set_template_current_hook_name($value)
        {
        }
        /**
         * Gets the hook name for the current template setup.
         *
         * @since  4.12.1
         *
         * @return string Hook name currently set on the class.
         */
        public function get_template_current_hook_name()
        {
        }
        /**
         * Sets an Index inside of the global or local context.
         * Final to prevent extending the class when the `get` already exists on the child class.
         *
         * @see    Tribe__Utils__Array::set()
         *
         * @since  4.6.2
         *
         * @param array|string $index    Specify each nested index in order.
         *                               Example: [ 'lvl1', 'lvl2' ];
         * @param mixed        $default  Default value if the search finds nothing.
         * @param boolean      $is_local Use the Local or Global context.
         *
         * @return mixed The value of the specified index or the default if not found.
         */
        public final function get($index, $default = \null, $is_local = \true)
        {
        }
        /**
         * Sets a Index inside of the global or local context
         * Final to prevent extending the class when the `set` already exists on the child class
         *
         * @since  4.6.2
         *
         * @see    Tribe__Utils__Array::set
         *
         * @param  string|array  $index     To set a key nested multiple levels deep pass an array
         *                                  specifying each key in order as a value.
         *                                  Example: array( 'lvl1', 'lvl2', 'lvl3' );
         * @param  mixed         $value     The value.
         * @param  boolean       $is_local  Use the Local or Global context
         *
         * @return array Full array with the key set to the specified value.
         */
        public final function set($index, $value = \null, $is_local = \true)
        {
        }
        /**
         * Merges local and global context, and saves it locally.
         *
         * @since  4.6.2
         *
         * @param  array  $context   Local Context array of data.
         * @param  string $file      Complete path to include the PHP File.
         * @param  array  $name      Template name.
         *
         * @return array
         */
        public function merge_context($context = [], $file = \null, $name = \null)
        {
        }
        /**
         * Fetches the path for locating files in the Plugin Folder
         *
         * @since  4.7.20
         *
         * @return string
         */
        protected function get_template_plugin_path()
        {
        }
        /**
         * Fetches the Namespace for the public paths, normally folders to look for
         * in the theme's directory.
         *
         * @since  4.7.20
         * @since  4.11.0  Added param $plugin_namespace.
         *
         * @param string $plugin_namespace Overwrite the origin namespace with a given one.
         *
         * @return array Namespace where we to look for templates.
         */
        protected function get_template_public_namespace($plugin_namespace)
        {
        }
        /**
         * Fetches which base folder we look for templates in the origin plugin.
         *
         * @since  4.10.2
         *
         * @return array The base folders we look for templates in the origin plugin.
         */
        public function get_template_origin_base_folder()
        {
        }
        /**
         * Fetches the path for locating files given a base folder normally theme related.
         *
         * @since  4.7.20
         * @since  4.11.0 Added the param $namespace.
         *
         * @param  mixed  $base      Base path to look into.
         * @param  string $namespace Adds the plugin namespace to the path returned.
         *
         * @return string  The public path for a given base.˙˙
         */
        protected function get_template_public_path($base, $namespace)
        {
        }
        /**
         * Fetches the folders in which we will look for a given file
         *
         * @since 4.7.20
         * @since 4.12.10 Add support for common lookup.
         *
         * @return array<string,array> A list of possible locations for the template file.
         */
        protected function get_template_path_list()
        {
        }
        /**
         * Get the list of theme related folders we will look up for the template.
         *
         * @since 4.11.0
         *
         * @param string $namespace Which plugin namespace we are looking for.
         *
         * @return array
         */
        protected function get_template_theme_path_list($namespace)
        {
        }
        /**
         * Tries to locate the correct file we want to load based on the Template class
         * configuration and it's list of folders
         *
         * @since  4.7.20
         *
         * @param  mixed  $name  File name we are looking for.
         *
         * @return string
         */
        public function get_template_file($name)
        {
        }
        /**
         * Runs the entry point hooks and filters.
         *
         * @param string  $entry_point_name The name of the entry point.
         * @param boolean $echo             If we should also print the entry point content.
         *
         * @return null|string `null` if an entry point is disabled or the entry point HTML.
         */
        public function do_entry_point($entry_point_name, $echo = \true)
        {
        }
        /**
         * A very simple method to include a Template, allowing filtering and additions using hooks.
         *
         * @since  4.6.2
         *
         * @param string|array $name    Which file we are talking about including.
         *                              If an array, each item will add a directory separator to get to the single template.
         * @param array        $context Any context data you need to expose to this file
         * @param boolean      $echo    If we should also print the Template
         *
         * @return string|false Either the final content HTML or `false` if no template could be found.
         */
        public function template($name, $context = [], $echo = \true)
        {
        }
        /**
         * Based on a path it determines what is the namespace that should be used.
         *
         * @since 4.11.0
         *
         * @param string $path Which file we are going to load.
         *
         * @return string|false The found namespace for that path or false.
         */
        public function template_get_origin_namespace($path)
        {
        }
        /**
         * Includes a give PHP inside of a safe context.
         *
         * This method is required to prevent template files messing with local variables used inside of the
         * `self::template` method. Also shelters the template loading from any possible variables that could
         * be overwritten by the context.
         *
         * @since 4.11.0
         *
         * @param string $file Which file will be included with safe context.
         *
         * @return string Contents of the included file.
         */
        public function template_safe_include($file)
        {
        }
        /**
         * Sets a number of values at the same time.
         *
         * @since 4.9.11
         *
         * @param array $values   An associative key/value array of the values to set.
         * @param bool  $is_local Whether to set the values as global or local; defaults to local as the `set` method does.
         *
         * @see   Tribe__Template::set()
         */
        public function set_values(array $values = [], $is_local = \true)
        {
        }
        /**
         * Returns the Template global context.
         *
         * @since 4.9.11
         *
         * @return array An associative key/value array of the Template global context.
         */
        public function get_global_values()
        {
        }
        /**
         * Returns the Template local context.
         *
         * @since 4.9.11
         *
         * @return array An associative key/value array of the Template local context.
         */
        public function get_local_values()
        {
        }
        /**
         * Returns the Template global and local context values.
         *
         * Local values will override the template global context values.
         *
         * @since 4.9.11
         *
         * @return array An associative key/value array of the Template global and local context.
         */
        public function get_values()
        {
        }
        /**
         * Fetches the path for locating files in the Common folder part of the plugin that is currently providing it.
         *
         * Note: the Common path will be dependent on the version that is loaded from the plugin that is bundling it.
         * E.g. if both TEC and ET are active (both will bundle Common) and the ET version of Common has been loaded as
         * most recent and the ET version of Common does not have a template file, then the template file will not be found.
         * This will allow versioning the existence and nature of the template files part of common.
         *
         * @since 4.12.10
         *
         * @return string The absolute path, with no guarantee of its existence, to the Common version of the template file.
         */
        protected function get_template_common_path()
        {
        }
        /**
         * Sets the aliases the template should use.
         *
         * @since 4.12.10
         *
         * @param array<string,string> $aliases A map of aliases that should be used to add lookup locations, in the format
         *                                      `[ original => alias ]`;
         *
         * @return static This instance, for method chaining.
         */
        public function set_aliases(array $aliases = [])
        {
        }
        /**
         * Applies the template path aliases, if any, to a list of folders.
         *
         * @since 4.12.10
         *
         * @param array<string,array> $folders The list of folder to apply the aliases to, if any.
         *
         * @return array<string,array> The list of new folder entries to add to the folders, in the same input format of the
         *                             folders.
         */
        protected function apply_aliases(array $folders)
        {
        }
        /**
         * Filters the full HTML for the template.
         *
         * @since 4.13.0
         *
         * @param string $html      The final HTML.
         * @param string $file      Complete path to include the PHP File.
         * @param array  $name      Template name.
         * @param string $hook_name The hook used to create the filter by name.
         *
         * @return string HTML after filtering.
         */
        protected function filter_template_html($html, $file, $name, $hook_name)
        {
        }
        /**
         * Filters the HTML for the Before include actions.
         *
         * @since 4.13.0
         *
         * @param string $html      The final HTML.
         * @param string $file      Complete path to include the PHP File.
         * @param array  $name      Template name.
         * @param string $hook_name The hook used to create the filter by name.
         *
         * @return string HTML after filtering.
         */
        protected function filter_template_before_include_html($html, $file, $name, $hook_name)
        {
        }
        /**
         * Filters the HTML for the PHP safe include.
         *
         * @since 4.13.0
         *
         * @param string $html      The final HTML.
         * @param string $file      Complete path to include the PHP File.
         * @param array  $name      Template name.
         * @param string $hook_name The hook used to create the filter by name.
         *
         * @return string HTML after filtering.
         */
        protected function filter_template_include_html($html, $file, $name, $hook_name)
        {
        }
        /**
         * Filters the HTML for the after include actions.
         *
         * @since 4.13.0
         *
         * @param string $html      The final HTML.
         * @param string $file      Complete path to include the PHP File.
         * @param array  $name      Template name.
         * @param string $hook_name The hook used to create the filter by name.
         *
         * @return string HTML after filtering.
         */
        protected function filter_template_after_include_html($html, $file, $name, $hook_name)
        {
        }
        /**
         * Fires of actions before including the template.
         *
         * @since 4.13.0
         *
         * @param string $file      Complete path to include the PHP File.
         * @param array  $name      Template name.
         * @param string $hook_name The hook used to create the filter by name.
         *
         * @return string HTML printed by the before actions.
         */
        protected function actions_before_template($file, $name, $hook_name)
        {
        }
        /**
         * Fires of actions after including the template.
         *
         * @since 4.13.0
         *
         * @param string $file      Complete path to include the PHP File.
         * @param array  $name      Template name.
         * @param string $hook_name The hook used to create the filter by name.
         *
         * @return string HTML printed by the after actions.
         */
        protected function actions_after_template($file, $name, $hook_name)
        {
        }
    }
}
namespace Tribe\Dialog {
    /**
     * Class View
     *
     * @since 4.10.0
     */
    class View extends \Tribe__Template
    {
        /**
         * Where in the themes we will look for templates.
         *
         * @since 4.10.0
         *
         * @var string
         */
        public $template_namespace = 'dialogs';
        /**
         * View constructor
         *
         * @since 4.10.0
         */
        public function __construct()
        {
        }
        /**
         * Public wrapper for build method.
         * Contains all the logic/validation checks.
         *
         * @since 4.10.0
         *
         * @param string  $content Content as an HTML string.
         * @param array   $args    {
         *     List of arguments to override dialog template.
         *
         *     @type string  $button_id               The ID for the trigger button (optional).
         *     @type array   $button_classes          Any desired classes for the trigger button (optional).
         *     @type array   $button_attributes       Any desired attributes for the trigger button (optional).
         *     @type boolean $button_disabled         Should the button be disabled (optional).
         *     @type string  $button_text             The text for the dialog trigger button ("Open the dialog window").
         *     @type string  $button_type             The type for the trigger button (optional).
         *     @type string  $button_value            The value for the trigger button (optional).
         *     @type boolean $button_display          If the dialog button should be displayed or not (optional).
         *     @type string  $close_event             The dialog close event hook name (`tribe_dialog_close_dialog`).
         *     @type string  $content_classes         The dialog content classes ("tribe-dialog__content").
         *     @type array   $context                 Any additional context data you need to expose to this file (optional).
         *     @type string  $id                      The unique ID for this dialog (`uniqid()`).
         *     @type string  $show_event              The dialog event show hook name (`tribe_dialog_show_dialog`).
         *     @type string  $template                The dialog template name (dialog).
         *     @type string  $title                   The dialog title (optional).
         *     @type string  $trigger_classes         Classes for the dialog trigger ("tribe_dialog_trigger").
         *
         *     Dialog script option overrides.
         *
         *     @type string  $append_target           The dialog will be inserted after the button, you could supply a selector string here to override (optional).
         *     @type boolean $body_lock               Whether to lock the body while dialog open (false).
         *     @type string  $close_button_aria_label Aria label for the close button ("Close this dialog window").
         *     @type string  $close_button_classes    Classes for the close button ("tribe-dialog__close-button").
         *     @type string  $content_wrapper_classes Dialog content wrapper classes. This wrapper includes the close button ("tribe-dialog__wrapper").
         *     @type string  $effect                  CSS effect on open. none or fade (optional).
         *     @type string  $effect_easing           A css easing string to apply ("ease-in-out").
         *     @type int     $effect_speed            CSS effect speed in milliseconds (optional).
         *     @type string  $overlay_classes         The dialog overlay classes ("tribe-dialog__overlay").
         *     @type boolean $overlay_click_closes    If clicking the overlay closes the dialog (false).
         *     @type string  $wrapper_classes         The wrapper class for the dialog ("tribe-dialog").
         * }
         * @param string  $id      The unique ID for this dialog. Gets prepended to the data attributes. Generated if not passed (`uniqid()`).
         * @param boolean $echo    Whether to echo the script or to return it (default: true).
         *
         * @return string An HTML string of the dialog.
         */
        public function render_dialog($content, $args = [], $id = null, $echo = true)
        {
        }
        /**
         * Syntactic sugar for `render_dialog()` to make creating modals easier.
         * Adds sensible defaults for modals.
         *
         * @since 4.10.0
         *
         * @param string  $content Content as an HTML string.
         * @param array   $args    {
         *     List of arguments to override dialog template.
         *
         *     @type string  $button_id               The ID for the trigger button (optional).
         *     @type array   $button_classes          Any desired classes for the trigger button (optional).
         *     @type array   $button_attributes       Any desired attributes for the trigger button (optional).
         *     @type boolean $button_disabled         Should the button be disabled (optional).
         *     @type string  $button_text             The text for the dialog trigger button ("Open the modal window").
         *     @type string  $button_type             The type for the trigger button (optional).
         *     @type string  $button_value            The value for the trigger button (optional).
         *     @type boolean $button_display          If the dialog button should be displayed or not (optional).
         *     @type string  $close_event             The dialog close event hook name (`tribe_dialog_close_modal`).
         *     @type string  $content_classes         The dialog content classes ("tribe-dialog__content tribe-modal__content").
         *     @type string  $title_classes           The dialog title classes ("tribe-dialog__title tribe-modal__title").
         *     @type array   $context                 Any additional context data you need to expose to this file (optional).
         *     @type string  $id                      The unique ID for this dialog (`uniqid()`).
         *     @type string  $show_event              The dialog event hook name (`tribe_dialog_show_modal`).
         *     @type string  $template                The dialog template name (modal).
         *     @type string  $title                   The dialog title (optional).
         *     @type string  $trigger_classes         Classes for the dialog trigger ("tribe_dialog_trigger").
         *
         *     Dialog script option overrides.
         *
         *     @type string  $append_target           The dialog will be inserted after the button, you could supply a selector string here to override ("body").
         *     @type boolean $body_lock               Whether to lock the body while dialog open (true).
         *     @type string  $close_button_aria_label Aria label for the close button ("Close this modal window").
         *     @type string  $close_button_classes    Classes for the close button ("tribe-dialog__close-button tribe-modal__close-button").
         *     @type string  $content_wrapper_classes Dialog content wrapper classes. This wrapper includes the close button ("tribe-dialog__wrapper tribe-modal__wrapper").
         *     @type string  $effect                  CSS effect on open. none or fade ("fade").
         *     @type string  $effect_easing           A css easing string to apply ("ease-in-out").
         *     @type int     $effect_speed            CSS effect speed in milliseconds (300).
         *     @type string  $overlay_classes         The dialog overlay classes ("tribe-dialog__overlay tribe-modal__overlay").
         *     @type boolean $overlay_click_closes    If clicking the overlay closes the dialog (true).
         *     @type string  $wrapper_classes         The wrapper class for the dialog ("tribe-dialog").
         * }
         * @param string  $id      The unique ID for this dialog. Gets prepended to the data attributes. Generated if not passed (`uniqid()`).
         * @param boolean $echo    Whether to echo the script or to return it (default: true).
         *
         * @return string An HTML string of the dialog.
         */
        public function render_modal($content, $args = [], $id = null, $echo = true)
        {
        }
        /**
         * Syntactic sugar for `render_dialog()` to make creating custom confirmation dialogs easier.
         * Adds sensible defaults for confirmation dialogs.
         *
         * @since 4.10.0
         *
         * @param string  $content Content as an HTML string.
         * @param array   $args    {
         *     List of arguments to override dialog template.
         *
         *     @type string  $button_id               The ID for the trigger button (optional).
         *     @type array   $button_classes          Any desired classes for the trigger button (optional).
         *     @type array   $button_attributes       Any desired attributes for the trigger button (optional).
         *     @type boolean $button_disabled         Should the button be disabled (optional).
         *     @type string  $button_text             The text for the dialog trigger button ("Open the dialog window").
         *     @type string  $button_type             The type for the trigger button (optional).
         *     @type string  $button_value            The value for the trigger button (optional).
         *     @type boolean $button_display          If the dialog button should be displayed or not (optional).
         *     @type string  $cancel_button_text      Text for the "Cancel" button ("Cancel").
         *     @type string  $content_classes         The dialog content classes ("tribe-dialog__content tribe-confirm__content").
         *     @type string  $continue_button_text    Text for the "Continue" button ("Confirm").
         *     @type array   $context                 Any additional context data you need to expose to this file (optional).
         *     @type string  $id                      The unique ID for this dialog (`uniqid()`).
         *     @type string  $template                The dialog template name (confirm).
         *     @type string  $title                   The dialog title (optional).
         *     @type string  $trigger_classes         Classes for the dialog trigger ("tribe_dialog_trigger").
         *
         *     Dialog script option overrides.
         *
         *     @type string  $append_target           The dialog will be inserted after the button, you could supply a selector string here to override (optional).
         *     @type boolean $body_lock               Whether to lock the body while dialog open (true).
         *     @type string  $close_button_aria_label Aria label for the close button (optional).
         *     @type string  $close_button_classes    Classes for the close button ("tribe-dialog__close-button--hidden").
         *     @type string  $close_event             The dialog close event hook name (`tribe_dialog_close_confirm`).
         *     @type string  $content_wrapper_classes Dialog content wrapper classes. This wrapper includes the close button ("tribe-dialog__wrapper tribe-confirm__wrapper").
         *     @type string  $effect                  CSS effect on open. none or fade (optional).
         *     @type string  $effect_easing           A css easing string to apply ("ease-in-out").
         *     @type int     $effect_speed            CSS effect speed in milliseconds (optional).
         *     @type string  $overlay_classes         The dialog overlay classes ("tribe-dialog__overlay tribe-confirm__overlay").
         *     @type boolean $overlay_click_closes    If clicking the overlay closes the dialog (false).
         *     @type string  $show_event              The dialog event hook name (`tribe_dialog_show_confirm`).
         *     @type string  $wrapper_classes         The wrapper class for the dialog ("tribe-dialog").
         * }
         * @param string  $id      The unique ID for this dialog. Gets prepended to the data attributes. Generated if not passed (`uniqid()`).
         * @param boolean $echo    Whether to echo the script or to return it (default: true).
         *
         * @return string An HTML string of the dialog.
         */
        public function render_confirm($content, $args = [], $id = null, $echo = true)
        {
        }
        /**
         * Syntactic sugar for `render_dialog()` to make creating custom confirmation dialogs easier.
         * Adds sensible defaults for warning dialogs.
         *
         * @since 4.12.13
         *
         * @param string  $content Content as an HTML string.
         * @param array   $args    {
         *     List of arguments to override dialog template.
         *
         *     @type string  $button_id               The ID for the trigger button (optional).
         *     @type array   $button_classes          Any desired classes for the trigger button (optional).
         *     @type array   $button_attributes       Any desired attributes for the trigger button (optional).
         *     @type boolean $button_disabled         Should the button be disabled (optional).
         *     @type string  $button_text             The text for the dialog trigger button ("Open the dialog window").
         *     @type string  $button_type             The type for the trigger button (optional).
         *     @type string  $button_value            The value for the trigger button (optional).
         *     @type boolean $button_display          If the dialog button should be displayed or not (optional).
         *     @type string  $cancel_button_text      Text for the "Cancel" button ("Cancel").
         *     @type string  $cancel_button_classes   Any desired classes for the cancel button (optional).
         *     @type string  $content_classes         The dialog content classes ("tribe-dialog__content tribe-confirm__content").
         *     @type string  $continue_button_text    Text for the "Continue" button ("Confirm").
         *     @type string  $continue_button_classes Any desired classes for the continue button (optional).
         *     @type array   $context                 Any additional context data you need to expose to this file (optional).
         *     @type string  $id                      The unique ID for this dialog (`uniqid()`).
         *     @type string  $template                The dialog template name (confirm).
         *     @type string  $title                   The dialog title (optional).
         *     @type string  $trigger_classes         Classes for the dialog trigger ("tribe_dialog_trigger").
         *
         *     Dialog script option overrides.
         *
         *     @type string  $append_target           The dialog will be inserted after the button, you could supply a selector string here to override (optional).
         *     @type boolean $body_lock               Whether to lock the body while dialog open (true).
         *     @type string  $close_button_aria_label Aria label for the close button (optional).
         *     @type string  $close_button_classes    Classes for the close button ("tribe-dialog__close-button--hidden").
         *     @type string  $close_event             The dialog close event hook name (`tribe_dialog_close_confirm`).
         *     @type string  $content_wrapper_classes Dialog content wrapper classes. This wrapper includes the close button ("tribe-dialog__wrapper tribe-confirm__wrapper").
         *     @type string  $effect                  CSS effect on open. none or fade (optional).
         *     @type string  $effect_easing           A css easing string to apply ("ease-in-out").
         *     @type int     $effect_speed            CSS effect speed in milliseconds (optional).
         *     @type string  $overlay_classes         The dialog overlay classes ("tribe-dialog__overlay tribe-confirm__overlay").
         *     @type boolean $overlay_click_closes    If clicking the overlay closes the dialog (false).
         *     @type string  $show_event              The dialog event hook name (`tribe_dialog_show_confirm`).
         *     @type string  $wrapper_classes         The wrapper class for the dialog ("tribe-dialog").
         * }
         * @param string  $id      The unique ID for this dialog. Gets prepended to the data attributes. Generated if not passed (`uniqid()`).
         * @param boolean $echo    Whether to echo the script or to return it (default: true).
         *
         * @return string An HTML string of the dialog.
         */
        public function render_warning($content, $args = [], $id = null, $echo = true)
        {
        }
        /**
         * Syntactic sugar for `render_dialog()` to make creating custom alerts easier.
         * Adds sensible defaults for alerts.
         *
         * @since 4.10.0
         *
         * @param string  $content Content as an HTML string.
         * @param array   $args    {
         *     List of arguments to override dialog template.
         *
         *     @type string  $alert_button_text       Text for the "OK" button ("OK").
         *     @type string  $button_id               The ID for the trigger button (optional).
         *     @type array   $button_classes          Any desired classes for the trigger button (optional).
         *     @type array   $button_attributes       Any desired attributes for the trigger button (optional).
         *     @type boolean $button_disabled         Should the button be disabled (optional).
         *     @type string  $button_text             The text for the dialog trigger button ("Open the dialog window").
         *     @type string  $button_type             The type for the trigger button (optional).
         *     @type string  $button_value            The value for the trigger button (optional).
         *     @type boolean $button_display          If the dialog button should be displayed or not (optional).
         *     @type string  $content_classes         The dialog content classes ("tribe-dialog__content tribe-alert__content").
         *     @type string  $title_classes           The dialog title classes ("tribe-dialog__title tribe-alert__title").
         *     @type array   $context                 Any additional context data you need to expose to this file (optional).
         *     @type string  $id                      The unique ID for this dialog (`uniqid()`).
         *     @type string  $template                The dialog template name (alert).
         *     @type string  $title                   The dialog title (optional).
         *     @type string  $trigger_classes         Classes for the dialog trigger ("tribe_dialog_trigger").
         *
         *     Dialog script option overrides.
         *
         *     @type string  $append_target           The dialog will be inserted after the button, you could supply a selector string here to override (optional).
         *     @type boolean $body_lock               Whether to lock the body while dialog open (true).
         *     @type string  $close_button_aria_label Aria label for the close button (optional).
         *     @type string  $close_button_classes    Classes for the close button ("tribe-dialog__close-button--hidden").
         *     @type string  $close_event             The dialog close event hook name (`tribe_dialog_close_alert`).
         *     @type string  $content_wrapper_classes Dialog content wrapper classes. This wrapper includes the close button ("tribe-dialog__wrapper tribe-alert__wrapper").
         *     @type string  $effect                  CSS effect on open. none or fade (optional).
         *     @type string  $effect_easing           A css easing string to apply ("ease-in-out").
         *     @type int     $effect_speed            CSS effect speed in milliseconds (optional).
         *     @type string  $overlay_classes         The dialog overlay classes ("tribe-dialog__overlay tribe-alert__overlay").
         *     @type boolean $overlay_click_closes    If clicking the overlay closes the dialog (false).
         *     @type string  $show_event              The dialog event hook name (`tribe_dialog_show_alert`).
         *     @type string  $wrapper_classes         The wrapper class for the dialog ("tribe-dialog").
         * }
         * @param string  $id      The unique ID for this dialog. Gets prepended to the data attributes. Generated if not passed (`uniqid()`).
         * @param boolean $echo    Whether to echo the script or to return it (default: true).
         *
         * @return string An HTML string of the dialog.
         */
        public function render_alert($content, $args = [], $id = null, $echo = true)
        {
        }
        /**
         * Get dialog <script> to be rendered.
         *
         * @since 4.10.0
         *
         * @param array   $args List of arguments for the dialog script. See \Tribe\Dialog\View->build_dialog().
         * @param boolean $echo Whether to echo the script or to return it (default: true).
         *
         * @return string|void The dialog <script> HTML or nothing if $echo is true.
         */
        public function get_dialog_script($args, $echo = true)
        {
        }
    }
}
namespace {
    interface Tribe__Documentation__Swagger__Builder_Interface
    {
        /**
         * Registers a documentation provider for a path.
         *
         * @param                                            $path
         * @param Tribe__REST__Endpoints__READ_Endpoint_Interface $endpoint
         */
        public function register_documentation_provider($path, \Tribe__Documentation__Swagger__Provider_Interface $endpoint);
        /**
         * @return Tribe__Documentation__Swagger__Provider_Interface[]
         */
        public function get_registered_documentation_providers();
        /**
         * Registers a documentation provider for a definition.
         *
         * @param                                                  string $type
         * @param Tribe__Documentation__Swagger__Provider_Interface       $provider
         */
        public function register_definition_provider($type, \Tribe__Documentation__Swagger__Provider_Interface $provider);
        /**
         * @return Tribe__Documentation__Swagger__Provider_Interface[]
         */
        public function get_registered_definition_providers();
    }
    interface Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation();
    }
    class Tribe__Documentation__Swagger__Cost_Details_Definition_Provider implements \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
    }
    class Tribe__Documentation__Swagger__Date_Details_Definition_Provider implements \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
    }
    class Tribe__Documentation__Swagger__Image_Definition_Provider implements \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
    }
    class Tribe__Documentation__Swagger__Image_Size_Definition_Provider implements \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
    }
    class Tribe__Documentation__Swagger__Term_Definition_Provider implements \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
    }
    /**
     * Class Tribe__Duplicate__Post
     *
     * Provides the functionality to find an existing post starting from the post data.
     *
     * @since 4.6
     */
    class Tribe__Duplicate__Post
    {
        const AND_OPERATOR = 'AND';
        const OR_OPERATOR = 'OR';
        /**
         * @var array The columns of the post table.
         */
        public static $post_table_columns = ['ID', 'post_author', 'post_date', 'post_date_gmt', 'post_content', 'post_title', 'post_excerpt', 'post_status', 'comment_status', 'ping_status', 'post_password', 'post_name', 'to_ping', 'pinged', 'post_modified', 'post_modified_gmt', 'post_content_filtered', 'post_parent', 'guid', 'menu_order', 'post_type', 'post_mime_type', 'comment_count'];
        /**
         * @var array The post fields that should be used to find a duplicate.
         */
        protected $post_fields = [];
        /**
         * @var array The custom fields that should be used to find a duplicate.
         */
        protected $custom_fields = [];
        /**
         * @var Tribe__Duplicate__Strategy_Factory
         */
        protected $factory;
        /**
         * @var string The SQL logic operator that should be used to join the WHERE queries frags.
         */
        protected $where_operator = self::AND_OPERATOR;
        /**
         * @var string The post type that should be used to find duplicates.
         */
        protected $post_type = 'post';
        /**
         * @var int The limit that should be applied to the number of JOIN in a single query.
         */
        protected $join_limit = 2;
        /**
         * Tribe__Duplicate__Post constructor.
         *
         * @param Tribe__Duplicate__Strategy_Factory|null $factory
         *
         * @since 4.6
         */
        public function __construct(\Tribe__Duplicate__Strategy_Factory $factory = \null)
        {
        }
        /**
         * Sets the post fields that should be used to find a duplicate in the database.
         *
         * Each entry should be in the [ <post field> => [ 'match' => <strategy> ]] format.
         * If not the strategy will be set to the default one.
         *
         * @param array $post_fields
         *
         * @since 4.6
         */
        public function use_post_fields(array $post_fields)
        {
        }
        /**
         * Converts an array of fields to the format required by the class.
         *
         * @param array $fields
         *
         * @return array
         *
         * @since 4.6
         */
        protected function cast_to_strategy(array $fields)
        {
        }
        /**
         * Finds a duplicate with the data provided.
         *
         * The more post and custom fields are used to find a match the less likely it is to find one and the more
         * likely it is for a duplicate to be a good match.
         *
         * @param array $postarr An array of post data, post fields and custom fields, that should be used to find the
         *                       duplicate.
         *
         * @return bool|int `false` if a duplicate was not found, the post ID of the duplicate if found.
         *
         * @since 4.6
         */
        public function find_for(array $postarr)
        {
        }
        /**
         * Finds all the duplicates with the data provided.
         *
         * The more post and custom fields are used to find a match the less likely it is to find one and the more
         * likely it is for a duplicate to be a good match.
         *
         * @param array $postarr An array of post data, post fields and custom fields, that should be used to find the
         *                       duplicate.
         *
         * @return bool|array `false` if a duplicate was not found, an array of the duplicate post IDs if any were found.
         *
         * @since 4.6
         */
        public function find_all_for(array $postarr)
        {
        }
        /**
         * Sets the custom fields that should be used to find a duplicate in the database.
         *
         * Each entry should be in the [ <custom field> => [ 'match' => <strategy> ]] format.
         * If not the strategy will be set to the default one.
         *
         * @param array $custom_fields
         *
         * @since 4.6
         */
        public function use_custom_fields(array $custom_fields)
        {
        }
        /**
         * Gets the SQL logic operator that will be used to join the WHERE queries frags.
         *
         * @return string
         *
         * @since 4.6
         */
        public function get_where_operator()
        {
        }
        /**
         * Sets the SQL logic operator that should be used to join the WHERE queries frags.
         *
         * @param string $where_operator
         *
         * @since 4.6
         */
        public function set_where_operator($where_operator)
        {
        }
        /**
         * Prepares the query that should be used to query for duplicates according
         * to the current post and custom fields.
         *
         * @param array $postarr
         *
         * @return bool|array An array of prepared queries or `false` on failure.
         *
         * @since 4.6
         */
        protected function prepare_queries(array $postarr)
        {
        }
        /**
         * Gets the post type that will be used to find duplicates.
         *
         * @return string
         *
         * @since 4.6
         */
        public function get_post_type()
        {
        }
        /**
         * Sets the post type that should be used to find duplicates.
         *
         * @param string $post_type
         *
         * @since 4.6
         */
        public function set_post_type($post_type)
        {
        }
        /**
         * Sets the limit that should be applied to the number of JOIN in a single query.
         *
         * Setting the limit to an empty value will remove the limit (very bad idea).
         *
         * @param int $join_limit
         *
         * @since 4.6
         */
        public function set_join_limit($join_limit)
        {
        }
        /**
         * Returns the limit that will be applied to the number of JOIN in a single query.
         *
         * @return int
         *
         * @since 4.6
         */
        public function get_join_limit()
        {
        }
    }
    /**
     * Class Tribe__Duplicate__Strategy__Base
     *
     * The common root for duplicate finding strategies.
     *
     * @since 4.6
     */
    abstract class Tribe__Duplicate__Strategy__Base
    {
        /**
         * Whether the key identifies a numerice post field or not.
         *
         * @param string $key
         *
         * @return bool
         *
         * @since 4.6
         */
        protected function is_a_numeric_post_field($key)
        {
        }
    }
    /**
     * Interface Tribe__Duplicate__Strategy__Interface
     *
     * The API implemented by each duplicate finding strategy.
     *
     * @since 4.6
     */
    interface Tribe__Duplicate__Strategy__Interface
    {
        /**
         * Returns a string suitable to be used as a WHERE clause in a SQL query.
         *
         * @param string $key
         * @param mixed  $value
         *
         * @return string
         */
        public function where($key, $value);
        /**
         * Returns a string suitable to be used as a WHERE clause in a SQL query for a custom field JOIN.
         *
         * @param string $key
         * @param mixed  $value
         * @param string $table_alias
         *
         * @return string
         */
        public function where_custom_field($key, $value, $table_alias);
    }
    /**
     * Class Tribe__Duplicate__Strategy__Like
     *
     * Models a loose similarity strategy, punctuation is removed from string and words can be in any order.
     *
     * @since 4.6
     */
    class Tribe__Duplicate__Strategy__Like extends \Tribe__Duplicate__Strategy__Base implements \Tribe__Duplicate__Strategy__Interface
    {
        /**
         * Returns a string suitable to be used as a WHERE clause in a SQL query.
         *
         * @param string $key
         * @param mixed  $value
         *
         * @return string
         *
         * @since 4.6
         */
        public function where($key, $value)
        {
        }
        /**
         * Removes anything that's not letters, numbers, hypens and underscores from the string and returns its frags.
         *
         * @param string $value
         *
         * @return array
         *
         * @since 4.6
         */
        protected function get_where_frags($value)
        {
        }
        /**
         * Returns a string suitable to be used as a WHERE clause in a SQL query for a custom field JOIN.
         *
         * @param string $key
         * @param mixed  $value
         * @param string $table_alias
         *
         * @return string
         *
         * @since 4.6
         */
        public function where_custom_field($key, $value, $table_alias)
        {
        }
    }
    /**
     * Class Tribe__Duplicate__Strategy__Same
     *
     * Models a close matching strategy; rougly a `==` equivalent.
     *
     * @since 4.6
     */
    class Tribe__Duplicate__Strategy__Same extends \Tribe__Duplicate__Strategy__Base implements \Tribe__Duplicate__Strategy__Interface
    {
        /**
         * Returns a string suitable to be used as a WHERE clause in a SQL query.
         *
         * @param string $key
         * @param mixed  $value
         *
         * @return string
         *
         * @since 4.6
         */
        public function where($key, $value)
        {
        }
        /**
         * Returns a string suitable to be used as a WHERE clause in a SQL query for a custom field JOIN.
         *
         * @param string $key
         * @param mixed  $value
         * @param string $table_alias
         *
         * @return string
         *
         * @since 4.6
         */
        public function where_custom_field($key, $value, $table_alias)
        {
        }
    }
    /**
     * Class Tribe__Duplicate__Strategy_Factory
     *
     * Provides built and ready to use strategies to find duplicates.
     *
     * @since 4.6
     */
    class Tribe__Duplicate__Strategy_Factory
    {
        protected $strategy_map = [];
        public function __construct()
        {
        }
        /**
         * Builds a strategy provided a strategy slug.
         *
         * @param string $strategy The slug for the strategy that should be built.
         *
         * @return Tribe__Duplicate__Strategy__Interface|bool A built strategy or `false` if the strategy could not be built.
         *
         * @since 4.6
         */
        public function make($strategy)
        {
        }
        /**
         * Gets the unfiltered slug to strategy class map used by the factory.
         *
         * @return array
         *
         * @since 4.6
         */
        public function get_strategy_map()
        {
        }
        /**
         * Sets the unfiltered slug to strategy class map used by the factory.
         *
         * @param array $strategy_map
         *
         * @since 4.6
         */
        public function set_strategy_map(array $strategy_map)
        {
        }
    }
    /**
     * Initialize Gutenberg editor blocks
     *
     * @since 4.8
     */
    class Tribe__Editor
    {
        /**
         * Key we store the toggle under in the tribe_events_calendar_options array.
         *
         * @since 4.14.13
         *
         * @var string
         */
        public static $blocks_editor_key = 'toggle_blocks_editor';
        /**
         * Meta key for flagging if a post is from Classic Editor
         *
         * @since 4.8
         *
         * @var string
         */
        public $key_flag_classic_editor = '_tribe_is_classic_editor';
        /**
         * Utility function to check if we should load the blocks or not.
         *
         * @since 4.8
         *
         * @return bool
         */
        public function should_load_blocks()
        {
        }
        /**
         * Utility function to check if blocks are enabled based on two assumptions
         *
         * a) Is gutenberg active?
         *     1) Via plugin or WP version
         * b) Is the blocks editor active?
         *      1) Based on the enqueue_block_assets action.
         *
         * @since 4.14.13
         *
         * @return bool
         */
        public function are_blocks_enabled()
        {
        }
        /**
         * Checks if we are on version 5.0-alpha or higher where we no longer have
         * Gutenberg Project, but the Blocks Editor
         *
         * @since 4.8
         *
         * @return boolean
         */
        public function is_wp_version()
        {
        }
        /**
         * Checks if we have Editor Block active.
         *
         * @since 4.8
         * @since 4.14.13 Switch to using the `enqueue_block_assets` check that the Classic Editor plugin uses
         *
         * @return boolean
         */
        public function is_blocks_editor_active()
        {
        }
        /**
         * Adds the required fields into the Post Type so that we can the Rest API to update it
         *
         * @since 4.8
         *
         * @param  array $args Arguments used to setup the Post Type
         *
         * @return array
         */
        public function add_rest_support($args = [])
        {
        }
        /**
         * Detect if the Classic Editor is force-activated via plugin or if it comes from a request.
         *
         * @since 4.8
         * @todo Deprecate before 6.0.
         *
         * @return bool
         */
        public function is_classic_editor()
        {
        }
        /* DEPRECATED FUNCTIONS */
        /**
         * Adds the required fields into the Events Post Type so that we can use Block Editor
         *
         * @since 4.8
         * @deprecated 4.14.13 This is not used anywhere.
         *
         * @param  array $args Arguments used to setup the Post Type
         *
         * @return array
         */
        public function add_support($args = [])
        {
        }
        /**
         * classic_editor_replace is function that is created by the plugin:
         * used in ECP recurrence and TEC Meta
         *
         * @see https://wordpress.org/plugins/classic-editor/
         *
         * prior 1.3 version the Classic Editor plugin was bundled inside of a unique function:
         * `classic_editor_replace` now all is bundled inside of a class `Classic_Editor`
         *
         * @since 4.8
         * @deprecated 4.14.13
         *
         * @return bool
         */
        public function is_classic_plugin_active()
        {
        }
        /**
         * Check if the setting `classic-editor-replace` is set to `replace` that option means to
         * replace the gutenberg editor with the Classic Editor.
         *
         * Prior to 1.3 on Classic Editor plugin the value to identify if is on classic the value
         * was `replace`, now the value is `classic`
         *
         * @since 4.8
         * @deprecated 4.14.13
         *
         * @return bool
         */
        public function is_classic_option_active()
        {
        }
        /**
         * Whether the TEC setting dictates Blocks or the Classic Editor.
         * used in ET, ET+ and TEC
         *
         * @since 4.12.0
         * @todo Deprecate before 6.0.
         *
         * @return bool True if using Blocks. False if using the Classic Editor.
         */
        public function is_events_using_blocks()
        {
        }
    }
    /**
     * Events Gutenberg Assets
     *
     * @since 4.8
     */
    class Tribe__Editor__Assets
    {
        /**
         *
         * @since 4.8
         *
         * @return void
         */
        public function hook()
        {
        }
        /**
         * Registers and Enqueues the assets
         *
         * @since 4.8
         *
         * @param string $key Which key we are checking against
         *
         * @return boolean
         */
        public function register()
        {
        }
        /**
         * Filter the dependencies for event blocks
         *
         * @since 4.14.2
         * @since 5.1.9 Added lodash to the dependencies.
         *
         * @param array|object|null $assets Array of asset objects, single asset object, or null.
         *
         * @return array An array of dependency slugs.
         */
        public function filter_event_blocks_editor_deps($asset)
        {
        }
    }
    interface Tribe__Editor__Blocks__Interface
    {
        /**
         * Which is the name/slug of this block
         *
         * @since 4.8
         *
         * @return string
         */
        public function slug();
        /**
         * Which is the name/slug of this block
         *
         * @since 4.8
         *
         * @return string
         */
        public function name();
        /**
         * What are the default attributes for this block
         *
         * @since 4.8
         *
         * @return array
         */
        public function default_attributes();
        /**
         * Since we are dealing with a Dynamic type of Block we need a PHP method to render it
         *
         * @since 4.8
         *
         * @param  array $attributes
         *
         * @return string
         */
        public function render($attributes = []);
        /**
         * Does the registration for PHP rendering for the Block, important due to been
         * an dynamic Block
         *
         * @since 4.8
         *
         * @return void
         */
        public function register();
        /**
         * Used to include any Assets for the Block we are registering
         *
         * @since 4.8
         *
         * @return void
         */
        public function assets();
        /**
         * Attach any specific hook to the current block.
         *
         * @since 4.8
         *
         * @return mixed
         */
        public function hook();
    }
    abstract class Tribe__Editor__Blocks__Abstract implements \Tribe__Editor__Blocks__Interface
    {
        /**
         * Namespace for Blocks from tribe
         *
         * @since 4.8
         *
         * @var string
         */
        protected $namespace = 'tribe';
        /**
         * Builds the name of the Block
         *
         * @since 4.8
         *
         * @return string
         */
        public function name()
        {
        }
        /**
         * Return the namespace to child or external sources
         *
         * @since 4.8
         *
         * @return string
         */
        public function get_namespace() : string
        {
        }
        /**
         * Return the block attributes
         *
         * @since 4.8
         *
         * @param  array $attributes
         *
         * @return array
         */
        public function attributes($params = [])
        {
        }
        /**
         * Return the block default attributes
         *
         * @since 4.8
         *
         * @param  array $attributes
         *
         * @return array
         */
        public function default_attributes()
        {
        }
        /**
         * Since we are dealing with a Dynamic type of Block we need a PHP method to render it
         *
         * @since 4.8
         *
         * @param  array $attributes
         *
         * @return string
         */
        public function render($attributes = [])
        {
        }
        /**
         * Sends a valid JSON response to the AJAX request for the block contents
         *
         * @since 4.8
         *
         * @return void
         */
        public function ajax()
        {
        }
        /**
         * Does the registration for PHP rendering for the Block,
         * important due to being a dynamic Block
         *
         * @since 4.8
         *
         * @return void
         */
        public function register()
        {
        }
        /**
         * Registering the block and loading the assets and hooks should be handled separately.
         *
         * @since 4.14.13
         */
        public function load()
        {
        }
        /**
         * Determine whether a post or content string has this block.
         *
         * This test optimizes for performance rather than strict accuracy, detecting
         * the pattern of a block but not validating its structure. For strict accuracy
         * you should use the block parser on post content.
         *
         * @since 4.8
         * @since 5.1.5 Added a has_block filter.
         *
         * @see gutenberg_parse_blocks()
         *
         * @param int|string|WP_Post|null $post Optional. Post content, post ID, or post object. Defaults to global $post.
         *
         * @return bool Whether the post has this block.
         */
        public function has_block($post = \null)
        {
        }
        /**
         * Fetches the name for the block we are working with and converts it to the
         * correct `wp_ajax_{$action}` string for us to Hook
         *
         * @since 4.8
         *
         * @return string
         */
        public function get_ajax_action()
        {
        }
        /**
         * Used to include any Assets for the Block we are registering
         *
         * @since 4.8
         *
         * @return void
         */
        public function assets()
        {
        }
        /**
         * Attach any particular hook for the specif block.
         *
         * @since 4.8
         */
        public function hook()
        {
        }
        /**
         * Returns the block data for the block editor.
         *
         * @since 4.12.0
         *
         * @return array<string,mixed> The block editor data.
         */
        public function block_data()
        {
        }
    }
}
namespace Tribe\Editor {
    /**
     * Editor Compatibility with other plugins and themes.
     *
     * @since 4.14.13
     */
    class Compatibility extends \TEC\Common\Contracts\Service_Provider
    {
        public function register()
        {
        }
    }
}
namespace Tribe\Editor\Compatibility {
    /**
     * Editor Compatibility with classic editor plugins.
     *
     * @since 4.14.13
     */
    class Classic_Editor
    {
        /**
         * "Classic Editor" flag for blocks/classic
         *
         * @since 4.14.13
         *
         * @var string
         */
        public static $classic_option_key = 'classic-editor-replace';
        /**
         * "Classic Editor" original param for blocks->classic.
         * Can be overridden by user choice.
         *
         * @since 4.14.13
         *
         * @var string
         */
        public static $classic_param = 'classic-editor';
        /**
         * "Classic Editor" term used for comparisons.
         *
         * @since 4.14.13
         *
         * @var string
         */
        public static $classic_term = 'classic';
        /**
         * "Blocks Editor" term used for comparisons.
         *
         * @since 4.14.13
         *
         * @var string
         */
        public static $block_term = 'block';
        /**
         * "Classic Editor" param for user override
         *
         * @since 4.14.13
         *
         * @var string
         */
        public static $classic_override = 'classic-editor__forget';
        /**
         * "User Choice" key for user override
         *
         * @since 4.14.13
         *
         * @var string
         */
        public static $user_choice_key = 'classic-editor-allow-users';
        /**
         * User meta "User Choice" key for user override
         *
         * @since 4.14.13
         *
         * @var string
         */
        public static $user_meta_choice_key = 'classic-editor-settings';
        /**
         * Post meta key used for CE "remembering" the last editor used.
         * The bane of my existence.
         *
         * @since 4.14.13
         *
         * @var string
         */
        public static $post_remember_meta_key = 'classic-editor-remember';
        /**
         * Stores the values used by the Classic Editor plugin to indicate we're using the classic editor.
         *
         * @since 4.14.13
         *
         * @var array<string>
         */
        public static $classic_values = ['replace', 'classic'];
        /**
         * Placeholders
         *
         * @since 4.14.13
         *
         * @var [type]
         */
        /**
         * Holds whether Classic Editor allows user choice of editors.
         *
         * @since 4.14.13
         *
         * @var null|boolean
         */
        public static $user_choice_allowed = null;
        /**
         * Holds the user's preferred editor - set in user profile.
         *
         * @since 4.14.13
         *
         * @var null|string
         */
        public static $user_profile_choice = null;
        /**
         * Holds the GET variable value for enabling the classic editor, if set.
         * (ie the default editor set)
         *
         * @since 4.14.13
         *
         * @var null|string
         */
        public static $classic_url_param = null;
        /**
         * Holds the GET variable value for overriding the classic editor, if set.
         * (ie default is classic, this will change it to blocks)
         *
         * @since 4.14.13
         *
         * @var null|string
         */
        public static $classic_url_override = null;
        /**
         * Registers the hooks and filters required based on if the Classic Editor plugin is active.
         *
         * @since 4.14.13
         */
        public function init()
        {
        }
        /**
         * Hooks for loading logic outside this class.
         *
         * @since 4.14.13
         */
        public function hooks()
        {
        }
        /**
         * Sets the placeholders for the URL params.
         *
         * @since 4.14.13
         */
        public function set_classic_url_params()
        {
        }
        /**
         * Gets the $classic_url_param placeholder if it's set.
         * Sets it then returns it if it's not yet set.
         *
         * @since 4.14.13
         *
         * @return boolean
         */
        public static function get_classic_param()
        {
        }
        /**
         * Gets the $classic_url_override placeholder if it's set.
         * Sets it then returns it if it's not yet set.
         *
         * @since 4.14.13
         *
         * @return boolean
         */
        public static function get_classic_override()
        {
        }
        /**
         * Filters tribe_editor_should_load_blocks based on internal logic.
         *
         * @since 4.14.13
         *
         * @param boolean $should_load_blocks Whether we should force blocks over classic.
         *
         * @return boolean Whether we should force blocks or classic.
         */
        public function filter_tribe_editor_should_load_blocks(bool $should_load_blocks)
        {
        }
        /**
         * classic_editor_replace is function that is created by the plugin:
         * used in ECP recurrence and TEC Meta
         *
         * @see https://wordpress.org/plugins/classic-editor/
         *
         * prior 1.3 version the Classic Editor plugin was bundle inside of a unique function:
         * `classic_editor_replace` now all is bundled inside of a class `Classic_Editor`
         *
         * @since 4.14.13
         *
         * @return bool
         */
        public static function is_classic_plugin_active()
        {
        }
        /**
         * Check if the setting `classic-editor-replace` is set to `replace` that option means to
         * replace the gutenberg editor with the Classic Editor.
         *
         * Prior to 1.3 on Classic Editor plugin the value to identify if is on classic the value
         * was `replace`, now the value is `classic`
         *
         * @since 4.8
         * @since 4.14.13 moved to separate class.
         *
         * @return bool
         */
        public static function is_classic_option_active()
        {
        }
        /**
         * Get and store wether user choice is allowed - lets us bypass some checks.
         *
         * @since 4.14.13
         *
         * @return boolean
         */
        public static function get_user_choice_allowed()
        {
        }
        /**
         * Get the and store user's editor of choice - set in the user profile.
         *
         * @since 4.14.13
         *
         * @return string
         */
        public static function user_profile_choice()
        {
        }
        /**
         * Get whether CE has "remembered" the last editor for a given post.
         * If so, this is what the default edit link will send us to.
         *
         * @since 4.14.13
         *
         * @return bool|string The string of the editor choice or false on fails.
         */
        public static function classic_editor_remembers($id = null)
        {
        }
    }
    /**
     * Editor Compatibility with Divi theme's builder option.
     *
     * @since 4.14.13
     */
    class Divi
    {
        /**
         * The key for the Divi classic editor.
         *
         * @since 4.14.13
         *
         * @var string
         */
        public static $classic_key = 'et_enable_classic_editor';
        /**
         * The value for enabling the Divi classic editor.
         *
         * @since 4.14.13
         *
         * @var string
         */
        public static $classic_on = 'on';
        /**
         * The value for disabling the Divi classic editor.
         *
         * @since 4.14.13
         *
         * @var string
         */
        public static $classic_off = 'off';
        /**
         * Registers the hooks and filters required based on if the Classic Editor plugin is active.
         *
         * @since 4.14.13
         */
        public function init()
        {
        }
        /**
         * Hooks for loading logic outside this class.
         *
         * @since 4.14.13
         */
        public function hooks()
        {
        }
        public static function is_divi_active()
        {
        }
        /**
         * Filters tribe_editor_should_load_blocks based on internal logic.
         *
         * @since 4.14.13
         *
         * @param boolean $should_load_blocks Whether we should force blocks over classic.
         *
         * @return boolean Whether we should force blocks or classic.
         */
        public function filter_tribe_editor_should_load_blocks($should_load_blocks)
        {
        }
    }
}
namespace {
    /**
     * Interface Tribe__Editor__Configuration_Interface
     *
     * @since 4.8
     */
    interface Tribe__Editor__Configuration_Interface
    {
        /**
         * Return an array to be localize
         *
         * @since 4.8
         *
         * @return array
         */
        public function localize();
    }
    /**
     * Class Tribe__Editor__Configuration
     *
     * setup the configuration variables used on the editor
     *
     * @since 4.8
     */
    class Tribe__Editor__Configuration implements \Tribe__Editor__Configuration_Interface
    {
        /**
         * Localize variables that are part of common
         *
         * @since 4.8
         *
         * @return array
         */
        public function localize()
        {
        }
        /**
         * Returns the site timezone as a string
         *
         * @since 4.8
         *
         * @return string
         */
        public function get_timezone_label()
        {
        }
        /**
         * Get Localization data for Date settings
         *
         * @since 4.8
         *
         * @return array
         */
        public function get_date_settings()
        {
        }
    }
    /**
     * Interface Tribe__Editor__Meta_Interface
     *
     * @since 4.8
     */
    interface Tribe__Editor__Meta_Interface
    {
        /**
         * @since 4.8
         *
         * @return mixed
         */
        public function register();
    }
    /**
     * Class Tribe__Editor__Meta
     *
     * @since 4.8
     */
    abstract class Tribe__Editor__Meta implements \Tribe__Editor__Meta_Interface
    {
        /**
         * Default definition for an attribute of type text
         *
         * @since 4.8
         *
         * @return array
         */
        protected function text()
        {
        }
        /**
         * Add arguments to escape a text area field
         *
         * @since 4.8
         *
         * @return array
         */
        protected function textarea()
        {
        }
        /**
         * Add arguments to escape a field of URL type
         *
         * @since 4.8
         *
         * @return array
         */
        protected function url()
        {
        }
        /**
         * Default definition for an attribute of type text
         *
         * @since 4.8
         *
         * @return array
         */
        protected function numeric()
        {
        }
        /***
         * Default definition for an attribute of type boolean
         *
         * @since 4.8
         *
         * @return array
         */
        protected function boolean()
        {
        }
        /**
         * Register a numeric type of array
         *
         * @since 4.8
         *
         * @return array
         */
        protected function numeric_array()
        {
        }
        /**
         * Register a text type of array
         *
         * @since 4.8
         *
         * @return array
         */
        protected function text_array()
        {
        }
        /**
         * Sanitize an array of text
         *
         * @since 4.8
         *
         * @param $value
         *
         * @return array
         */
        public function sanitize_text_array($value)
        {
        }
        /**
         * Checks and sanitize a given value to a numeric array or a numeric string
         *
         * @since 4.8
         *
         * @param  mixed $value Check agains this value
         *
         * @return array|bool|int
         */
        public function sanitize_numeric_array($value)
        {
        }
        /**
         * Make sure sanitization on boolean does not triggered warnings when multiple values are passed
         * to the function
         *
         * @since 4.8
         *
         * @param $value
         *
         * @return bool
         */
        public function sanitize_boolean($value)
        {
        }
        /**
         * Sanitize strings allowing the usage of white spaces before or after the separators, as
         * - sanitize_text_field removes any whitespace
         *
         * @since 4.8
         *
         * @param $value
         *
         * @return mixed
         */
        public function sanitize_separator($value)
        {
        }
        /**
         * Verify if the current user can edit or not this Post
         *
         * @since 4.8
         *
         * @param bool   $allowed Whether the user can add the post meta. Default false.
         * @param string $meta_key The meta key.
         * @param int    $post_id Post ID.
         * @param int    $user_id User ID.
         * @param string $cap Capability name.
         * @param array  $caps User capabilities.
         *
         * @return boolean
         */
        public function auth_callback($allowed, $meta_key, $post_id, $user_id, $cap, $caps)
        {
        }
    }
    class Tribe__Editor__Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 4.8
         *
         */
        public function register()
        {
        }
        /**
         * Any hooking any class needs happen here.
         *
         * In place of delegating the hooking responsibility to the single classes they are all hooked here.
         *
         * @since 4.8
         *
         */
        protected function hook()
        {
        }
        /**
         * Prevents us from using `init` to register our own blocks, allows us to move
         * it when the proper place shows up
         *
         * @since 4.8.2
         *
         * @return void
         */
        public function register_blocks()
        {
        }
        /**
         * Binds and sets up implementations at boot time.
         *
         * @since 4.8
         */
        public function boot()
        {
        }
    }
    /**
     * Events Gutenberg Utils
     *
     * @since 4.8
     */
    class Tribe__Editor__Utils
    {
        /**
         * Adds the required prefix of a tribe block with the wp: prefix as well and escaped.
         *
         * @since 4.8
         *
         * @param string $name
         *
         * @return string
         */
        public function to_tribe_block_name($name = '')
        {
        }
        /**
         * Remove all invalid characters in string that are used to set the name of a block
         *
         * @since 4.8
         *
         * @param string $name
         *
         * @return string
         */
        public function to_block_name($name = '')
        {
        }
        /**
         * Replaces the content of a post where a block is located, removes the space before and after on the same line where
         * the block is located, it replaces the content of the block with an empty string
         *
         * @since 4.8
         *
         * @param        $post_id
         * @param string $block_name
         * @param string $replacement
         *
         * @return bool
         */
        public function remove_block($post_id, $block_name = '', $replacement = '')
        {
        }
        /**
         * Function used to remove the inner blocks and the parent block as well inside of a post_content
         *
         * @since 4.8.2
         *
         * @param        $post_id
         * @param        $block_name The name of the block
         * @param string $replacement The string used to replace the value of the searched block
         *
         * @return bool
         */
        public function remove_inner_blocks($post_id, $block_name, $replacement = '')
        {
        }
        /**
         * Update the content of a post using a pattern to search a specifc string, with a custom
         * replacement
         *
         * @since 4.8.2
         *
         * @param        $post_id
         * @param        $pattern
         * @param string $replacement The string used to replace the value of the searched block
         *
         * @return bool
         */
        public function update_post_content($post_id, $pattern, $replacement = '')
        {
        }
        /**
         * Strip the dynamic blocks of the content
         *
         * @since 4.8.5
         *
         * @param string $content The event content
         *
         * @return string
         */
        public function strip_dynamic_blocks($content = '')
        {
        }
        /**
         * Return the content without the tribe blocks
         *
         * @since 4.8.5
         *
         * @param string $content The event content
         *
         * @return string
         */
        public function exclude_tribe_blocks($content = '')
        {
        }
    }
    class Tribe__Error
    {
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        /**
         * Make a quickly usable method to transform code/indexes to WP_Errors
         *
         * @see tribe_error()
         *
         * @param  string|array $indexes Which Error we are looking for
         * @param  array        $context Gives the Error context
         * @param  array        $sprintf Allows variables on the message
         *
         * @return WP_Error
         */
        public function send($indexes, $context = [], $sprintf = [])
        {
        }
        /**
         * Register a new error based on a Namespace
         *
         * @param  string|array  $indexes  A list of the namespaces and last item should be the error name
         * @param  string        $message  What is going to be the message associate with this indexes
         *
         * @return boolean
         */
        public function register($indexes, $message)
        {
        }
        /**
         * Removes an error from the items
         *
         * @param  string|array  $indexes  A list of the namespaces and last item should be the error name
         *
         * @return boolean
         */
        public function remove($indexes)
        {
        }
        /**
         * Fetches the error or namespace
         *
         * @param  string|array  $indexes (optional)  A list of the namespaces and last item should be the error name
         *
         * @return null|array|string
         */
        public function get($indexes = \null)
        {
        }
        /**
         * Checks if a given error or namespace exists
         *
         * @param  string|array  $indexes  A list of the namespaces and last item should be the error name
         *
         * @return boolean
         */
        public function exists($indexes)
        {
        }
    }
    /**
     * Class Tribe__Exception
     *
     * Handles exceptions to log when not in debug mode.
     */
    class Tribe__Exception extends \Exception
    {
        /**
         * Tribe__Exception constructor.
         *
         * @param Exception $original_exception
         */
        public function __construct(\Exception $original_exception)
        {
        }
        /**
         * Handles the exception throwing the original when debugging (`WP_DEBUG` defined and `true`)
         * or quietly logging when `WP_DEBUG` is `false` or not set.
         *
         * @return bool  `true` if the message was logged, `false` otherwise.
         *
         * @throws Exception
         */
        public function handle()
        {
        }
        /**
         * Throws the original exception.
         *
         * Provided as a manual override over the default `WP_DEBUG` dependent behaviour.
         *
         * @see Tribe__Exception::handle()
         *
         * @throws Exception
         */
        public function throw_original_exception()
        {
        }
    }
    // Do not load directly.
    /**
     * Base Extension class
     *
     * Avoid using static states within this class unless it's global for all extensions.
     * Some extension authors may lack a thorough understanding of OOP and inheritance.
     * This is built with such ones in mind.
     *
     * @package Tribe
     * @subpackage Extension
     * @since 4.3.1
     */
    abstract class Tribe__Extension
    {
        /**
         * Extension arguments
         *
         * @var array {
         *      Each argument for this extension instance
         *
         *      @type string $version Extension's semantic version number.
         *                            Can be manually set in child to boost performance.
         *
         *      @type string $url     Extension's tec.com page.
         *
         *      @type string $hook    Action/hook to fire init() on.
         *
         *      @type string $file    File path containing plugin header.
         *                            Can be manually set in child to boost performance.
         *
         *      @type string $class   Extension's main class name.
         *
         *      @type array  $requires {
         *          Each plugin this extension requires
         *
         *          @type string $main_class Minimum version number
         *      }
         *
         *      @type array $plugin_data If the plugin file header is parsed, the
         *                               resulting data is stored in this.
         * }
         */
        protected $args = [];
        /**
         * Get singleton instance of child class
         *
         * @param string $child_class (optional) Name of child class.
         * @param array $args         (optional) Any args that should be set on construct.
         *                            Only used the first time the extension is instantiated.
         *
         * @return object|null The extension's instance, or null if it can't be instantiated
         */
        public static function instance($child_class = \null, $args = \null)
        {
        }
        /**
         * Empty function typically overridden by child class
         */
        protected function construct()
        {
        }
        /**
         * This is where the magic begins
         *
         * Declare this inside the child and put any custom code inside of it.
         */
        public abstract function init();
        /**
         * Adds a Tribe Plugin to the list of plugins this extension depends upon.
         *
         * If this plugin is not present or does not exceed the specified version
         * init() will not run.
         *
         * @param string      $main_class      The Main class for this Tribe plugin.
         * @param string|null $minimum_version Minimum acceptable version of plugin.
         */
        protected final function add_required_plugin($main_class, $minimum_version = \null)
        {
        }
        /**
         * Set the extension's tec.com URL
         *
         * @param string $url URL to the extension's page.
         */
        protected final function set_url($url)
        {
        }
        /**
         * Set the extension's version number
         *
         * @param string $version Extensions semantic version number.
         */
        protected final function set_version($version)
        {
        }
        /**
         * Checks if the extension has permission to run, if so runs init() in child class
         */
        public final function register()
        {
        }
        /**
         * Gets the full path to the extension's plugin file
         *
         * Sets default if the arg is blank.
         *
         * @return string File path
         */
        public final function get_plugin_file()
        {
        }
        /**
         * Get the extension's version number
         *
         * @return string Semantic version number
         */
        public final function get_version()
        {
        }
        /**
         * Get the extension's plugin name
         *
         * @return string Plugin name
         */
        public final function get_name()
        {
        }
        /**
         * Get the extension's description
         *
         * @return string Plugin description
         */
        public final function get_description()
        {
        }
        /**
         * Gets the action/hook for the extensions' init().
         *
         * @return string Action/hook
         */
        public final function get_init_hook()
        {
        }
        /**
         * Gets the plugin data from the plugin file header
         *
         * This is somewhat resource intensive, so data is stored in $args
         * in case of subsequent calls.
         *
         * @see get_plugin_data() for WP Admin only function this is similar to.
         *
         * @return array Plugin data; keys match capitalized file header declarations.
         */
        public final function get_plugin_data()
        {
        }
        /**
         * Retrieves any args whose default value is stored in the plugin file header
         *
         * @param string $arg             The key for arg.
         * @param string $plugin_data_key The key for the arg in the file header.
         *
         * @return string|null String if set, otherwise null.
         */
        public final function get_arg_or_plugin_data($arg, $plugin_data_key)
        {
        }
        /**
         * Sets an arg, including one nested a few levels deep
         *
         * @param string|array $key    To set an arg nested multiple levels deep pass an array
         *                             specifying each key in order as a value.
         *                             Example: array( 'lvl1', 'lvl2', 'lvl3' );
         * @param mixed         $value The value.
         */
        protected final function set($key, $value)
        {
        }
        /**
         * Retrieves arg, including one nested a few levels deep
         *
         * @param string|array $key     To select an arg nested multiple levels deep pass an
         *                              array specifying each key in order as a value.
         *                              Example: array( 'lvl1', 'lvl2', 'lvl3' );
         * @param null         $default Value to return if nothing is set.
         *
         * @return mixed Returns the args value or the default if arg is not found.
         */
        public final function get($key, $default = \null)
        {
        }
        /**
         * Gets the name of the class the method is called in; typically will be a child class
         *
         * This uses some hackery if the server is on PHP 5.2, and it can fail in rare
         * circumstances causing a null value to be returned.
         *
         * @return string|null Class name
         */
        protected static final function get_called_class()
        {
        }
        /**
         * Echoes error message indicating user is on PHP 5.2 and debug_backtrace is disabled
         */
        public static final function notice_debug_backtrace()
        {
        }
        /**
         * Gets the error message about being explicitly disallowed.
         *
         * @since 4.12.2
         *
         * @return string Notice text.
         */
        public function notice_disallowed()
        {
        }
        /**
         * Prevent cloning the singleton with 'clone' operator
         *
         * @return void
         */
        public final function __clone()
        {
        }
        /**
         * Prevent unserializing the singleton instance
         *
         * @return void
         */
        public final function __wakeup()
        {
        }
    }
    // Do not load directly.
    /**
     * Class Tribe__Extension_Loader
     */
    class Tribe__Extension_Loader
    {
        /**
         * Returns the singleton instance of this class.
         *
         * @return Tribe__Extension_Loader instance.
         */
        public static function instance()
        {
        }
        /**
         * Gets tribe extension plugin foldername prefixes
         *
         * @return array Prefixes
         */
        public static function get_extension_file_prefixes()
        {
        }
        /**
         * Instantiates an extension based on info in its plugin file header.
         *
         * @param string $plugin_file Full path to extension's plugin file header.
         *
         * @return bool Indicates if extension was instantiated successfully.
         */
        public function instantiate_extension($plugin_file)
        {
        }
        /**
         * Retrieves plugin data from cache if it exists.
         *
         * @param string $plugin_path Path to plugin header file.
         *
         * @return array|null Plugin data or null.
         */
        public function get_cached_plugin_data($plugin_path)
        {
        }
        /**
         * Prevent cloning the singleton with 'clone' operator
         *
         * @return void
         */
        public function __clone()
        {
        }
        /**
         * Prevent unserializing the singleton instance
         *
         * @return void
         */
        public function __wakeup()
        {
        }
    }
    /**
     * Class Tribe__Feature_Detection
     *
     * @since 4.7.23
     */
    class Tribe__Feature_Detection
    {
        /**
         * The name of the transient storing the support check results.
         *
         * @var string
         */
        public static $transient = 'tribe_feature_detection';
        /**
         * A set of example byte sizes of result sets.
         *
         * @since 4.10.2
         *
         * @var array
         */
        public static $example_size = ['post_result' => 6000];
        /**
         * The name of the option that will be used to indicate a feature detection is running.
         *
         * @var string
         */
        protected $lock_option_name;
        /**
         * Checks whether async, AJAX-based, background processing is supported or not.
         *
         * To avoid making this costly check on each load the result of this check is cached
         * in the `tribe_feature_detection` transient, under the `supports_async_process` key.
         *
         * @since 4.7.23
         *
         * @param bool $force Whether to use the cache value, if available, or force the check
         *                    to be made again.
         *
         * @return bool Whether async, AJAX-based, background processing is supported or not.
         */
        public function supports_async_process($force = \false)
        {
        }
        /**
         * Sets the lock option to `1` to indicate a feature detection is running.
         *
         * @since 4.8.1
         */
        protected function lock()
        {
        }
        /**
         * Deletes the lock option to indicate the current feature detection process is done.
         *
         * @since 4.8.1
         */
        protected function unlock()
        {
        }
        /**
         * Checks whether a feature detection lock is currently in place or not.
         *
         * @since 4.8.1
         *
         * @return bool Whether a feature detection lock is currently in place or not.
         */
        protected function is_locked()
        {
        }
        /**
         * Returns the value of the `max_allowed_packet`  MYSQL variable, if set, or a default value.
         *
         * @since 4.10.2
         *
         * @return int The byte size of the `max_allowed_packet`  MYSQL variable.
         */
        public function get_mysql_max_packet_size()
        {
        }
        /**
         * Returns the suggested SQL LIMIT value, based on the `max_allowed_packet` size and example string length.
         *
         * This is useful to size "reasonable" LIMITs when dealing with either very long queries or potentially long
         * result sets.
         *
         * @since 4.10.2
         *
         * @param string $example_string The example string.
         *
         * @return int The suggested LIMIT value.
         */
        public function mysql_limit_for_string($example_string)
        {
        }
        /**
         * Returns the SQL LIMIT for a byte size, in relation to the `max_allowed_packet` value.
         *
         * @since 4.10.2
         *
         * @param int $byte_size The byte size to check.
         *
         * @return int The SQL LIMIT value.
         */
        public function mysql_limit_for_size($byte_size)
        {
        }
        /**
         * Provides the SQL LIMIT value, in relation to the `max_allowed_packet` value, for a pre-existing example.
         *
         * Defaults to the complete post result example string if the example is not found.
         *
         * @since 4.10.2
         *
         * @param string $example The name of the example to return. See the `Tribe__Feature_Detection::$example_sizes`
         *                        prop for the available examples. Defaults to the `post_result` one.
         *
         * @return int The SQL LIMIT value for the example.
         */
        public function mysql_limit_for_example($example)
        {
        }
    }
    /**
     * helper class that creates fields for use in Settings, MetaBoxes, Users, anywhere.
     * Instantiate it whenever you need a field
     *
     */
    class Tribe__Field
    {
        /**
         * the field's id
         * @var string
         */
        public $id;
        /**
         * the field's name (also known as it's label)
         * @var string
         */
        public $name;
        /**
         * the fieldset attributes
         * @var array
         */
        public $fieldset_attributes;
        /**
         * the field attributes
         * @var array
         */
        public $attributes;
        /**
         * the field's arguments
         * @var array
         */
        public $args;
        /**
         * field defaults (static)
         * @var array
         */
        public $defaults;
        /**
         * valid field types (static)
         * @var array
         */
        public $valid_field_types;
        /**
         * Settings array.
         *
         * @since 5.0.12
         *
         * @var array
         */
        public $settings;
        /**
         * @var string
         */
        public $type;
        /**
         * @var string
         */
        public $class;
        /**
         * @var string
         */
        public $label;
        /**
         * @var array
         */
        public $label_attributes;
        /**
         * @var string
         */
        public $error;
        /**
         * @var string
         */
        public $tooltip;
        /**
         * @var string
         */
        public $size;
        /**
         * @var string
         */
        public $html;
        /**
         * @var array
         */
        public $options;
        /**
         * @var string
         */
        public $value;
        /**
         * @var boolean
         */
        public $conditional;
        /**
         * @var string
         */
        public $placeholder;
        /**
         * @var closure
         */
        public $display_callback;
        /**
         * @var string
         */
        public $if_empty;
        /**
         * @var boolean
         */
        public $can_be_empty;
        /**
         * @var boolean
         */
        public $clear_after;
        /**
         * @var boolean
         */
        public $tooltip_first;
        /**
         * @var boolean
         */
        public $allow_clear;
        /**
         * Class constructor
         *
         * @param string     $id    the field id
         * @param array      $field the field settings
         * @param null|mixed $value the field's current value
         *
         * @return void
         */
        public function __construct($id, $field, $value = \null)
        {
        }
        /**
         * Determines how to handle this field's creation
         * either calls a callback function or runs this class' course of action
         * logs an error if it fails
         *
         * @return void
         */
        public function do_field()
        {
        }
        /**
         * returns the field's start
         *
         * @return string the field start
         */
        public function do_field_start()
        {
        }
        /**
         * returns the field's end
         *
         * @return string the field end
         */
        public function do_field_end()
        {
        }
        /**
         * returns the field's label
         *
         * @return string the field label
         */
        public function do_field_label()
        {
        }
        /**
         * returns the field's div start
         *
         * @return string the field div start
         */
        public function do_field_div_start()
        {
        }
        /**
         * returns the field's div end
         *
         * @return string the field div end
         */
        public function do_field_div_end()
        {
        }
        /**
         * returns the field's tooltip/description
         *
         * @return string the field tooltip
         */
        public function do_tool_tip()
        {
        }
        /**
         * returns the screen reader label
         *
         * @return string the screen reader label
         */
        public function do_screen_reader_label()
        {
        }
        /**
         * returns the field's value
         *
         * @return string the field value
         */
        public function do_field_value()
        {
        }
        /**
         * returns the field's name
         *
         * @param bool $multi
         *
         * @return string the field name
         */
        public function do_field_name($multi = \false)
        {
        }
        /**
         * returns the field's placeholder
         *
         * @return string the field value
         */
        public function do_field_placeholder()
        {
        }
        /**
         * Return a string of attributes for the field
         *
         * @return string
         **/
        public function do_field_attributes()
        {
        }
        /**
         * Return a string of attributes for the fieldset
         *
         * @return string
         **/
        public function do_fieldset_attributes()
        {
        }
        /**
         * generate a heading field
         *
         * @return string the field
         */
        public function heading()
        {
        }
        /**
         * generate an html field
         *
         * @return string the field
         */
        public function html()
        {
        }
        /**
         * generate a simple text field
         *
         * @return string the field
         */
        public function text()
        {
        }
        /**
         * generate a textarea field
         *
         * @return string the field
         */
        public function textarea()
        {
        }
        /**
         * generate a wp_editor field
         *
         * @return string the field
         */
        public function wysiwyg()
        {
        }
        /**
         * generate a radio button field
         *
         * @return string the field
         */
        public function radio()
        {
        }
        /**
         * generate a checkbox_list field
         *
         * @return string the field
         */
        public function checkbox_list()
        {
        }
        /**
         * generate a boolean checkbox field
         *
         * @return string the field
         */
        public function checkbox_bool()
        {
        }
        /**
         * generate a dropdown field
         *
         * @return string the field
         */
        public function dropdown()
        {
        }
        /**
         * generate a chosen dropdown field - the same as the
         * regular dropdown but wrapped so it can have the
         * right css class applied to it
         *
         * @deprecated
         *
         * @return string the field
         */
        public function dropdown_chosen()
        {
        }
        /**
         * generate a select2 dropdown field - the same as the
         * regular dropdown but wrapped so it can have the
         * right css class applied to it
         *
         * @deprecated
         *
         * @return string the field
         */
        public function dropdown_select2()
        {
        }
        /**
         * generate a license key field
         *
         * @return string the field
         */
        public function license_key()
        {
        }
        /**
         * Generate a color field.
         *
         * @since 5.0.0
         *
         * @return string The field.
         */
        public function color()
        {
        }
        /**
         * Generate an image field.
         *
         * @since 5.0.0
         *
         * @return string The field.
         */
        public function image()
        {
        }
        /**
         * Generate an image field that uses the attachment instead of URL.
         *
         * @since 5.1.15
         *
         * @return string The field.
         */
        public function image_id()
        {
        }
        /**
         * Generate a toggle switch.
         *
         * @since 5.0.12
         *
         * @return string the field
         */
        public function toggle()
        {
        }
        /* deprecated camelCase methods */
        public function doField()
        {
        }
        public function doFieldStart()
        {
        }
        public function doFieldEnd()
        {
        }
        public function doFieldLabel()
        {
        }
        public function doFieldDivStart()
        {
        }
        public function doFieldDivEnd()
        {
        }
        public function doToolTip()
        {
        }
        public function doFieldValue()
        {
        }
        public function doFieldName($multi = \false)
        {
        }
        public function doFieldAttributes()
        {
        }
        public function doScreenReaderLabel()
        {
        }
        /**
         * Generate a wrapped html field.
         *
         * This is useful to print some HTML that should be inline with the other fieldsets.
         *
         * @return string The field markup.
         */
        public function wrapped_html()
        {
        }
        /**
         * Concatenates an array of attributes to use in HTML tags.
         *
         * Example usage:
         *
         *      $attrs = [ 'class' => ['one', 'two'], 'style' => 'color:red;' ];
         *      printf ( '<p %s>%s</p>', tribe_concat_attributes( $attrs ), 'bar' );
         *
         *      // <p> class="one two" style="color:red;">bar</p>
         *
         * @param array $attributes An array of attributes in the format
         *                          [<attribute1> => <value>, <attribute2> => <value>]
         *                          where `value` can be a string or an array.
         *
         * @return string The concatenated attributes.
         */
        protected function concat_attributes(array $attributes = [])
        {
        }
        /**
         * Generate an email address field
         *
         * @since 4.7.4
         *
         * @return string The field
         */
        public function email()
        {
        }
        /**
         * Sanitizes a space-separated or array of classes.
         *
         * @since 4.7.7
         *
         * @param string|array $class A single class, a space-separated list of classes
         *                            or an array of classes.
         *
         * @return string A space-separated list of classes.
         */
        protected function sanitize_class_attribute($class)
        {
        }
    }
    /**
     * Class Tribe__Field_Conditional
     *
     * A work-around for PHP 5.2 lack of closure support to wrap
     *
     * Example usage: in the context of the definition of a list of fields to be fed to the Tribe__Settings class:
     *
     *      $fields = array(
     *          'foo' => array(
     *              'type' => 'checkbox_bool',
     *              // ...
     *          ),
     *          'bar' => array(
     *              'type' => 'text'
     *              'validate_if' => new Tribe__Field_Conditional( 'foo', 'tribe_is_truthy' )
     *              'conditional' => tribe_is_truthy( tribe_get_option( 'foo' ) ),
     *              // ...
     *          ),
     *      );
     *
     * The above will modify the validation logic to make it so that the field will not be validated if
     * the parent (`foo` in the example) is not "truthy".
     * If you need to hide/show the field conditionally use the `conditional` attribute of the field.
     *
     * @since 4.7.7
     */
    class Tribe__Field_Conditional
    {
        /**
         * @var string The slug of the field the condition
         */
        protected $depends_on;
        /**
         * @var bool
         */
        protected $condition;
        /**
         * Tribe__Field_Conditional constructor.
         *
         * @since 4.7.7
         *
         * @param      string    $depends_on_field The slug or identifier of the parent field.
         * @param mixed|callable $condition        Either a valid callable function or method or a
         *                                         value that will be used for a shallow comparison.
         */
        public function __construct($depends_on_field, $condition = \true)
        {
        }
        /**
         * @param       mixed $value  The value to check, typically the parent field value.
         * @param array       $fields An array of all the current fields; this will be passed to
         *                            the condition callback function for context if the condition
         *                            is a callable function or method.
         *
         * @return bool Whether the check was successful (the parent field does have the required
         *              value) or not.
         */
        public function check($value, array $fields)
        {
        }
        /**
         * Return the id/slug of the field this condition depends on.
         *
         * @since 4.7.7
         *
         * @return string
         */
        public function depends_on()
        {
        }
    }
    class Tribe__Image__Uploader
    {
        /**
         * @var bool|array
         */
        protected static $original_urls_cache = \false;
        /**
         * @var bool|array
         */
        protected static $attachment_guids_cache = \false;
        /**
         * @var string|int Either an absolute URL to an image file or a media attachment post ID.
         */
        protected $featured_image;
        /**
         * Tribe__Events__Importer__Featured_Image_Uploader constructor.
         *
         * @var string A single importing file row.
         */
        public function __construct($featured_image = \null)
        {
        }
        /**
         * Resets the static "cache" of the class.
         */
        public static function reset_cache()
        {
        }
        /**
         * Uploads a file and creates the media attachment or simply returns the attachment ID if existing.
         *
         * @return int|bool The attachment post ID if the uploading and attachment is successful or the ID refers to an
         *                  attachment;
         *                  `false` otherwise.
         */
        public function upload_and_get_attachment_id()
        {
        }
        /**
         * Retry to upload an image after it failed as was provided, try to decode the URL as in some cases the
         * original URL might be encoded HTML components such as: "&" and some CDNs does not handle well different URLs
         * as they were provided so we try to recreate the original URL where it might be required.
         *
         * @since 4.11.5
         *
         * @param int|bool $id The id of the attachment if was uploaded correctly, false otherwise.
         *
         * @return int The ID of the attachment after the upload retry.
         */
        protected function maybe_retry_upload($id)
        {
        }
        /**
         * @param string $file_url
         *
         * @return int
         */
        protected function upload_file($file_url)
        {
        }
        /**
         * WordPress requires to have an extension in all all files as uses `wp_check_filetype` which uses the extension
         * of the file to define if a file is valid or not, in this case the extension might not be present in some URLs of
         * attachments or media files, in those cases we try to guess the right extension using the mime of the file as
         * an alternative, if the $filename is a path we can verify the mime type using native WP functions.
         *
         * @since 4.11.5
         *
         * @param string $filename The name of the file or URL.
         *
         * @return string Returned a file name with an extension if is not already part of the file name.
         */
        protected function create_file_name($filename)
        {
        }
        protected function get_attachment_ID_from_url($featured_image)
        {
        }
        protected function maybe_init_attachment_guids_cache()
        {
        }
        protected function maybe_init_attachment_original_urls_cache()
        {
        }
        /**
         * Handles errors generated during the use of `file_get_contents` to
         * make them run-time exceptions.
         *
         * @since 4.7.22
         *
         * @param string $unused_error_code The error numeric code.
         * @param string $message           The error message.
         *
         * @throws RuntimeException To pass the error as an exception to
         *                          the handler.
         */
        public function handle_error($unused_error_code, $message)
        {
        }
    }
    /**
     * An Abstract class that will allow us to have a base to go for all
     * the other JSON-LD classes.
     *
     * Always extend this when doing a new JSON-LD object
     */
    abstract class Tribe__JSON_LD__Abstract
    {
        /**
         * Holder for the Already fetched Posts
         *
         * @var array
         */
        protected static $posts = [];
        /**
         * Holder for a post when it has multiple types
         *
         * @since 4.7.12
         *
         * @var array
         */
        protected static $types = [];
        /**
         * The class singleton constructor.
         *
         * @return Tribe__JSON_LD__Abstract
         */
        public static function instance($name = \null)
        {
        }
        /**
         * Which type of element this actually is
         *
         * @see https://developers.google.com/structured-data/rich-snippets/
         * @var string
         */
        public $type = 'Thing';
        /**
         * Compile the schema.org event data into an array
         *
         * @param mixed $post Either a post ID or a WP_post object.
         * @param array $args {
         *      Optional. An array of arguments to control the returned data.
         *
         *      @type string $context         The value of the `@context` tag, defaults to 'https://schema.org'
         * }
         *
         * @return array Either an array containing a post data or an empty array if the post data cannot
         *               be generated, the `$post` parameter is not a valid post ID or object or the data
         *               for the post has been fetched already.
         */
        public function get_data($post = \null, $args = [])
        {
        }
        /**
         * Filters the JSON LD object data.
         *
         * The expectation is that any sub-classes overriding the get_data() method will ensure they
         * call this method for consistency.
         *
         * @param string  $type
         * @param object  $data
         * @param array   $args
         * @param WP_Post $post
         *
         * @return mixed
         */
        protected function apply_object_data_filter($data, $args, $post)
        {
        }
        /**
         * puts together the actual html/json javascript block for output
         *
         * @return string
         */
        public function get_markup($post = \null, $args = [])
        {
        }
        public function markup($post = \null, $args = [])
        {
        }
        /**
         * Get a link to the post
         *
         * Children of this class are likely to override it with their
         * own functions that only work with their designated post type.
         *
         * @since 4.5.10
         *
         * @param  int|WP_Post  $post The Post Object or ID
         *
         * @return false|string Link to the post or false
         */
        protected function get_link($post)
        {
        }
        /**
         * Gets from the Posts index a specific post or fetch all of them
         *
         * @param  int|WP_Post  $post The Post Object or ID
         *
         * @return null|array|WP_Post         Returns an Indexed Array of Posts, a found Post or Null if not found
         */
        public function get($post = \null)
        {
        }
        /**
         * Checks if a Post has been registered to the JSON-LD index
         *
         * @param  int|WP_Post  $post The Post Object or ID
         *
         * @return bool
         */
        public function exists($post)
        {
        }
        /**
         * Register the new Post on the Index of created ones
         *
         * @param  int|WP_Post  $post The Post Object or ID
         *
         * @return WP_Post            The Post Object that was registered
         */
        public function register($post)
        {
        }
        /**
         * Public method to have access to the types
         *
         * @since 4.7.12
         *
         * @return array
         */
        public function get_types()
        {
        }
        /**
         * Register the current $type to prevent duplicates entries with different $types and IDs
         *
         * @since 4.7.12
         *
         * @param $post
         * @param $type
         *
         * @return mixed
         */
        public function set_type($post, $type)
        {
        }
        /**
         * Remove an Post from the Indexed list
         *
         * @param  int|WP_Post  $post The Post Object or ID
         *
         * @return bool
         */
        public function remove($post)
        {
        }
        /**
         * Return `true` if the $type has been already registered for the specified $id.
         *
         * @since 4.7.12
         *
         * @param $id
         * @param $type
         *
         * @return bool
         */
        public function type_exists($id, $type)
        {
        }
        /**
         * Empties the registered posts cache variable.
         *
         * Added for testing purposes.
         */
        public static function unregister_all()
        {
        }
        /**
         * Returns an array of the registered post IDs.
         *
         * @return array
         */
        public static function get_registered_post_ids()
        {
        }
    }
    /**
     * Class Locations
     *
     * Localized lists of locations, like countries and states.
     */
    class Tribe__Languages__Locations
    {
        /**
         * Returns an array of countries and their codes.
         *
         * Adds array to object cache to speed up subsequent retrievals.
         *
         * @since 4.13.0 add $escape param.
         *
         * @param bool $escape Weather to escape for translations or not.
         *
         * @return array {
         *      List of countries
         *
         *      @type string $country_code Country name.
         * }
         */
        public function get_countries($escape = \false)
        {
        }
        /**
         * Returns an array of countries and their codes.
         *
         * Adds array to object cache to speed up subsequent retrievals.
         *
         * @return array {
         *      List of countries
         *
         *      @type string $country_code Country name.
         * }
         */
        public function get_us_states()
        {
        }
        /**
         * Get a translated array of countries.
         *
         * @return array {
         *      List of countries
         *
         *      @type string $country_code Country name.
         * }
         */
        public function build_country_array()
        {
        }
        /**
         * Get a translated array of US States.
         *
         * @return array {
         *      List of States
         *
         *      @type string $state_abbreviation State.
         * }
         */
        public function build_us_states_array()
        {
        }
    }
    interface Tribe__Languages__Map_Interface
    {
        /**
         * Gets all the languages supported by this language map.
         *
         * @return array An associative array in the format
         *               [ <slug> => <name> ]
         *               e.g. [ 'pt-BR' => 'Portuguese (Brazil)' ]
         */
        public function get_supported_languages();
        /**
         * Checks whether a language code is supported by the language map or not.
         *
         * @param string $language_code
         *
         * @return bool Whether a language code is supported by the language map or not.
         */
        public function is_supported($language_code);
        /**
         * Converts a language code from the format used by WP to the one used by the language map.
         *
         * @param string $language_code A language code in the format used by WP; e.g. `en_US`.
         *
         * @return string|false The converted language code or `false` if the language code is not supported.
         */
        public function convert_language_code($language_code);
    }
    /**
     * Class Tribe__Languages__Recaptcha_Map
     *
     * Converts WordPress format language codes to language codes supported by Recaptcha.
     */
    class Tribe__Languages__Recaptcha_Map implements \Tribe__Languages__Map_Interface
    {
        /**
         * Gets all the languages supported by this language map.
         *
         * @return array An associative array in the format
         *               [ <slug> => <name> ]
         *               e.g. [ 'pt-BR' => 'Portuguese (Brazil)' ]
         */
        public function get_supported_languages()
        {
        }
        /**
         * Checks whether a language code is supported by the language map or not.
         *
         * @param string $language_code
         *
         * @return bool Whether a language code is supported by the language map or not.
         */
        public function is_supported($language_code)
        {
        }
        /**
         * Converts a language code from the format used by WP to the one used by the language map.
         *
         * @param string $language_code A language code in the format used by WP; e.g. `en_US`.
         *
         * @return string|false The converted language code or `false` if the language code is not supported.
         */
        public function convert_language_code($language_code)
        {
        }
    }
    /**
     * Provides access to and management of core logging facilities.
     */
    class Tribe__Log
    {
        const DISABLE = 'disable';
        const DEBUG = 'debug';
        const WARNING = 'warning';
        const ERROR = 'error';
        const CLEANUP = 'tribe_common_log_cleanup';
        const SUCCESS = 'success';
        const COLORIZE = 'colorize';
        /**
         * @var Tribe__Log__Admin
         */
        protected $admin;
        /**
         * @var Tribe__Log__Logger
         */
        protected $current_logger;
        /**
         * @var string
         */
        protected $current_level;
        /**
         * All logging levels in priority order. Each level is represented by
         * an array in the form [ code => description ].
         *
         * @var array
         */
        protected $levels = [];
        /**
         * Alternative representation of the $levels property allowing quick look
         * up of levels by priority.
         *
         * @var array
         */
        protected $prioritized_levels = [];
        /**
         * Instantiated loggers, stored for re-use.
         *
         * @var array
         */
        protected $loggers = [];
        public function __construct()
        {
        }
        /**
         * @return Tribe__Log__Admin
         */
        public function admin()
        {
        }
        /**
         * Facilitates daily cleanup and log rotation.
         */
        protected function log_cleanup()
        {
        }
        /**
         * Schedules a daily cleanup task if one is not already in place.
         */
        protected function register_cleanup_task()
        {
        }
        /**
         * Call the cleanup() method for each available logging engine.
         *
         * We don't just call it on the current engine since, if there was a recent change,
         * we'll generally still want the now unused engine's output to be cleaned up.
         */
        public function do_cleanup()
        {
        }
        /**
         * Logs a debug-level entry.
         *
         * @param string $entry
         * @param string $src
         */
        public function log_debug($entry, $src)
        {
        }
        /**
         * Logs a warning.
         *
         * @param string $entry
         * @param string $src
         */
        public function log_warning($entry, $src)
        {
        }
        /**
         * Logs an error.
         *
         * @param string $entry
         * @param string $src
         */
        public function log_error($entry, $src)
        {
        }
        /**
         * Logs a successful operation.
         *
         * @param string $entry
         * @param string $src
         */
        public function log_success($entry, $src)
        {
        }
        /**
         * Logs an entry colorizing it.
         *
         * This will only apply to WP-CLI based logging.
         *
         * @param string $entry
         * @param string $src
         */
        public function log_colorized($entry, $src)
        {
        }
        /**
         * Adds an entry to the log (if it is at the appropriate level, etc) and outputs information using WP-CLI if available.
         *
         * This is simply a shorthand for calling log() on the current logger.
         */
        public function log($entry, $type = self::DEBUG, $src = '')
        {
        }
        /**
         * Returns a list of available logging engines as an array where each
         * key is the classname and the value is the logger itself.
         *
         * @return array
         */
        public function get_logging_engines()
        {
        }
        /**
         * Returns the currently active logger.
         *
         * If no loggers are available, this will be the null logger which is a no-op
         * implementation (making it safe to call Tribe__Log__Logger methods on the
         * return value of this method at all times).
         *
         * @since 4.6.2 altered the return signature to only return instances of Tribe__Log__Logger
         *
         * @return Tribe__Log__Logger
         */
        public function get_current_logger()
        {
        }
        /**
         * Sets the current logging engine to the provided class (if it is a valid
         * and currently available logging class, else will set this to null - ie
         * no logging).
         *
         * @param string $engine
         *
         * @throws Exception if the specified logging engine is invalid
         */
        public function set_current_logger($engine)
        {
        }
        /**
         * Attempts to return the requested logging object or null if that
         * is not possible.
         *
         * @param $class_name
         *
         * @return Tribe__Log__Logger|null
         */
        public function get_engine($class_name)
        {
        }
        /**
         * Sets the current logging level to the provided level (if it is a valid
         * level, else will set the level to 'default').
         *
         * @param string $level
         */
        public function set_level($level)
        {
        }
        /**
         * Returns the current logging level as a string.
         *
         * @return string
         */
        public function get_level()
        {
        }
        /**
         * Returns a list of logging levels.
         *
         * The format is an array of arrays, each inner array being comprised of the
         * level code (index 0) and a human readable description (index 1).
         *
         * The ordering of the inner arrays is critical as it dictates what will be logged
         * when a given logging level is in effect. Example: if the current logging level
         * is "error" mode (only record error-level problems) then debug-level notices will
         * *not* be recorded and nor will warnings.
         *
         * On the other hand, if the current logging level is "debug" then debug level
         * notices *and* all higher levels (including warnings and errors) will be recorded.
         *
         * @return array
         */
        public function get_logging_levels()
        {
        }
        /**
         * Indicates if errors relating to the specified logging level should indeed
         * be logged.
         *
         * Examples if the current logging level is "warning" (log all warnings and errors):
         *
         *     * Returns true for "error"
         *     * Returns true for "warning"
         *     * Returns false for "debug"
         *
         * The above assumes we are using the default logging levels.
         *
         * @param string $level_code
         *
         * @return bool
         */
        protected function should_log($level_code)
        {
        }
        /**
         * Creates a second list of logging levels allowing easy lookup of
         * their relative priorities (ie, a means of quickly checking if
         * an "error" level entry should be recorded when we're in debug
         * mode).
         */
        protected function build_prioritized_levels()
        {
        }
    }
    /**
     * Specifies the minimal interface required of all logging implementations.
     */
    interface Tribe__Log__Logger
    {
        /**
         * Indicates if the logger will work in the current environment.
         *
         * @return bool
         */
        public function is_available();
        /**
         * Returns a 'human friendly' name for the logging implementation.
         *
         * @return string
         */
        public function get_name();
        /**
         * Responsible for commiting the entry to the log (but only if the debug level
         * is appropriate).
         *
         * @param string $entry
         * @param string $type
         * @param string $src
         */
        public function log($entry, $type = \Tribe__Log::DEBUG, $src = '');
        /**
         * Retrieve up to $limit most recent log entries in reverse chronological
         * order. If $limit is a negative or zero value, there is no limit.
         *
         * Implementation-specific arguments can optionally be provided as a second
         * parameter. This may include support for a 'log' param where an identifer
         * obtained via the list_availalbe_logs() method is passed in order to query
         * a specific archived log.
         *
         * @see Tribe__Log__Logger::list_available_logs()
         *
         * @param int   $limit
         * @param array $args
         *
         * @return array
         */
        public function retrieve($limit = 0, array $args = []);
        /**
         * Returns a list of currently accessible logs (current first, oldest last).
         *
         * This can be useful if, for instance, a particular logger organizes logging
         * by dates and keeps an archive of upto 1 week's worth of logs - in which case
         * the array might look like:
         *
         *     [ '2016-12-31',
         *       '2016-12-30',
         *       '2016-12-30',
         *       '2016-12-30',
         *       '2016-12-30', ... ]
         *
         * Note that a) the array may be empty and b) it won't necessarily contain
         * date strings, it could contain identifiers like 'current', 'prev', 'prev2'
         * or really anything the logging engine prefers.
         *
         * @return array
         */
        public function list_available_logs();
        /**
         * Switches to the specified log.
         *
         * If optional param $create is true the logger will try to create a new log
         * using the provided identifier if it doesn't already exist.
         *
         * @param mixed $log_identifier
         * @param bool $create
         *
         * @return bool
         */
        public function use_log($log_identifier, $create = \false);
        /**
         * Performs routine maintenance and cleanup work (such as log rotation)
         * whenever it is called.
         */
        public function cleanup();
    }
}
namespace Tribe\Log {
    /**
     * Class Action_Logger
     *
     * @since 4.9.16
     *
     * @package Tribe\Log
     */
    class Action_Logger implements \Tribe__Log__Logger
    {
        /**
         * {@inheritDoc}
         *
         * @since 4.9.16
         */
        public function is_available()
        {
        }
        /**
         * {@inheritDoc}
         *
         * @since 4.9.16
         */
        public function get_name()
        {
        }
        /**
         * {@inheritDoc}
         *
         * @since 4.9.16
         */
        public function log($entry, $type = \Tribe__Log::DEBUG, $src = '')
        {
        }
        /**
         * Translates the log types used by `Tribe__Log` to those used by Monolog.
         *
         * @since 4.9.16
         *
         * @param string $type The `Tribe__Log` log type.
         *
         * @return int The Monolog equivalent of the current level.
         */
        protected function translate_log_level($type)
        {
        }
        /**
         * {@inheritDoc}
         *
         * @since 4.9.16
         */
        public function retrieve($limit = 0, array $args = [])
        {
        }
        /**
         * {@inheritDoc}
         *
         * @since 4.9.16
         */
        public function list_available_logs()
        {
        }
        /**
         * Changes the Monolog logger channel to the specified one.
         *
         * @since 4.9.16
         *
         * @param string $log_identifier The channel to switch to.
         * @param bool   $create         Unused by this class.
         *
         * @return bool The exit status of the channel change.
         *
         * @uses \Tribe\Log\Monolog_Logger::set_channel().
         */
        public function use_log($log_identifier, $create = false)
        {
        }
        /**
         * {@inheritDoc}
         *
         * @since 4.9.16
         */
        public function cleanup()
        {
        }
    }
}
namespace {
    class Tribe__Log__Admin
    {
        public function __construct()
        {
        }
        /**
         * Returns the HTML comprising the event log section for use in the
         * Events > Settings > Help screen.
         *
         * @return string
         */
        public function display_log()
        {
        }
        /**
         * Listens for changes to the event log settings updating and returning
         * an appropriate response.
         */
        public function listen()
        {
        }
        /**
         * Sets the current logging level to the provided level (if it is a valid
         * level, else will set the level to 'default').
         *
         * @param string $level
         */
        protected function update_logging_level($level)
        {
        }
        /**
         * Sets the current logging engine to the provided class (if it is a valid
         * and currently available logging class, else will set this to null - ie
         * no logging).
         *
         * @param string $engine
         */
        protected function update_logging_engine($engine)
        {
        }
        /**
         * Register our script early.
         */
        public function register_script()
        {
        }
        /**
         * Checks wether the assets should be enqueued.
         *
         * @since 4.15.0
         *
         * @return boolean True if the assets should be enqueued.
         */
        public function should_enqueue_assets()
        {
        }
        /**
         * Returns a list of logs that are available for perusal.
         *
         * @return array
         */
        protected function get_available_logs()
        {
        }
        /**
         * Returns a list of logging engines that are available for use.
         *
         * @return array
         */
        protected function get_log_engines()
        {
        }
        /**
         * Returns all log entries for the current or specified log.
         *
         * @return array
         */
        public function get_log_entries($log = \null)
        {
        }
        /**
         * Returns an array of logging levels arranged as key:value pairs, with
         * each key being the level code and the value being the human-friendly
         * description.
         *
         * @return array
         */
        protected function get_logging_levels()
        {
        }
        /**
         * Provides a URL that can be used to download the current or specified
         * log.
         *
         * @param $log
         *
         * @return string
         */
        protected function get_log_url($log = \null)
        {
        }
        /**
         * Facilitate downloading of logs.
         */
        public function serve_log_downloads()
        {
        }
        /**
         * Returns a reference to the main log management object.
         *
         * @return Tribe__Log
         */
        protected function log_manager()
        {
        }
        /**
         * Returns the currently enabled logging object or null if it is not
         * available.
         *
         * @return Tribe__Log__Logger|null
         */
        protected function current_logger()
        {
        }
    }
}
namespace TEC\Common\Monolog\Formatter {
    /**
     * Interface for formatters
     *
     * @author Jordi Boggiano <j.boggiano@seld.be>
     */
    interface FormatterInterface
    {
        /**
         * Formats a log record.
         *
         * @param  array $record A record to format
         * @return mixed The formatted record
         */
        public function format(array $record);
        /**
         * Formats a set of log records.
         *
         * @param  array $records A set of records to format
         * @return mixed The formatted set of records
         */
        public function formatBatch(array $records);
    }
}
namespace Tribe\Log {
    class Canonical_Formatter implements \TEC\Common\Monolog\Formatter\FormatterInterface
    {
        /**
         * @since 4.12.13
         *
         * @var string Our standard format for the Monolog LineFormatter.
         */
        protected $standard_format = 'tribe.%channel%.%level_name%: %message%';
        /**
         * @since 4.12.13
         *
         * @var string Our standard format Monolog LineFormatter.
         */
        protected $standard_formatter;
        /**
         * @since 4.12.13
         *
         * @var string Our context-aware format for the Monolog LineFormatter.
         */
        protected $context_format = 'tribe-canonical-line channel=%channel% %message%';
        /**
         * @since 4.12.13
         *
         * @var string Our context-aware Monolog LineFormatter.
         */
        protected $context_formatter;
        /**
         * Formats a log record.
         *
         * @since 4.9.16
         *
         * @param array $record A record to format.
         *
         * @return mixed The formatted record.
         */
        public function format(array $record)
        {
        }
        /**
         * Gets a LineFormatter whose format is context aware.
         *
         * @since 4.12.13
         *
         * @return LineFormatter
         */
        public function get_context_formatter()
        {
        }
        /**
         * Gets a LineFormatter whose format is our standard logging format.
         *
         * @since 4.12.13
         *
         * @return LineFormatter
         */
        public function get_standard_formatter()
        {
        }
        /**
         * Formats a set of log records.
         *
         * This simply hands off the work of formatting Batches to the LineFormatter.
         *
         * @since 4.12.13
         *
         * @param  array $records A set of records to format
         * @return mixed The formatted set of records
         */
        public function formatBatch(array $records)
        {
        }
        /**
         * Formats the record to the canonical format.
         *
         * @since 4.9.16
         *
         * @param array $record The record to process.
         *
         * @return string The formatted message, as built from the record context and message, in the format `<key>=<value>`.
         */
        protected function format_record_message(array $record)
        {
        }
        /**
         * Escapes the double quotes in a string.
         *
         * @since 4.9.16
         *
         * @param string $string The string to escape the quotes in.
         *
         * @return string The string, with the quotes escaped.
         */
        protected function escape_quotes($string)
        {
        }
    }
}
namespace {
    /**
     * Simple file based logging implementation.
     *
     * By default, this logger uses the system temporary directory for logging
     * purposes and performs daily log rotation.
     */
    class Tribe__Log__File_Logger implements \Tribe__Log__Logger
    {
        protected $module_id = 'tribe_tmp_file_logger';
        protected $log_dir = '';
        protected $log_file = '';
        protected $context = 'a';
        protected $handle;
        public function __construct()
        {
        }
        public function __destruct()
        {
        }
        protected function set_log_dir()
        {
        }
        /**
         * Sets the path for the log file we're currently interested in using.
         *
         * @param string $date = null
         */
        protected function set_log_file($date = \null)
        {
        }
        /**
         * Used to switch between contexts for reading ('r') and writing
         * ('a' := append) modes.
         *
         * @see fopen() documentation
         *
         * @param string $context
         */
        protected function set_context($context)
        {
        }
        /**
         * Attempts to obtain a file handle for the current log file.
         */
        protected function obtain_handle()
        {
        }
        /**
         * Closes the current file handle, if one is open.
         */
        protected function close_handle()
        {
        }
        /**
         * Returns the log name to be used for reading/writing events for a specified date
         * (defaulting to today, if no date is specified).
         *
         * @param string $date = null
         *
         * @return string
         */
        protected function get_log_file_name($date = \null)
        {
        }
        protected function get_log_file_basename()
        {
        }
        /**
         * Returns a 'human friendly' name for the logging implementation.
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Indicates if the logger will work in the current environment.
         *
         * @return bool
         */
        public function is_available()
        {
        }
        /**
         * Responsible for commiting the entry to the log.
         *
         * @param string $entry
         * @param string $type
         * @param string $src
         */
        public function log($entry, $type = \Tribe__Log::DEBUG, $src = '')
        {
        }
        /**
         * Retrieve up to $limit most recent log entries in reverse chronological
         * order. If $limit is a negative or zero value, there is no limit.
         *
         * Supports passing a 'log' argument to recover
         *
         * @see Tribe__Log__Logger::list_available_logs()
         *
         * @param int   $limit
         * @param array $args
         *
         * @return array
         */
        public function retrieve($limit = 0, array $args = [])
        {
        }
        /**
         * Returns a list of currently accessible logs (current first, oldest last).
         * Each is refered to by date.
         *
         * Example:
         *
         *     [ '2016-12-31',
         *       '2016-12-30',
         *       '2016-12-30',
         *       '2016-12-30',
         *       '2016-12-30', ... ]
         *
         * @since 4.6.2 added extra safety checks before attempting to access log directory
         *
         * @return array
         */
        public function list_available_logs()
        {
        }
        /**
         * Switches to the specified log. The $log_identifier should take the
         * form of a "yyyy-mm-dd" format date string.
         *
         * If optional param $create is true then it will try to create a log
         * using the provided identifier. If the log does not exist, cannot be
         * created or an invalid identifier has been passed in then boolean false
         * will be returned, otherwise it will attempt to switch to the new log.
         *
         * @param mixed $log_identifier
         * @param bool $create
         *
         * @return bool
         */
        public function use_log($log_identifier, $create = \false)
        {
        }
        /**
         * Performs routine maintenance and cleanup work (such as log rotation)
         * whenever it is called.
         */
        public function cleanup()
        {
        }
    }
}
namespace TEC\Common\Psr\Log {
    /**
     * Describes a logger instance.
     *
     * The message MUST be a string or object implementing __toString().
     *
     * The message MAY contain placeholders in the form: {foo} where foo
     * will be replaced by the context data in key "foo".
     *
     * The context array can contain arbitrary data. The only assumption that
     * can be made by implementors is that if an Exception instance is given
     * to produce a stack trace, it MUST be in a key named "exception".
     *
     * See https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md
     * for the full interface specification.
     */
    interface LoggerInterface
    {
        /**
         * System is unusable.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function emergency($message, array $context = array());
        /**
         * Action must be taken immediately.
         *
         * Example: Entire website down, database unavailable, etc. This should
         * trigger the SMS alerts and wake you up.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function alert($message, array $context = array());
        /**
         * Critical conditions.
         *
         * Example: Application component unavailable, unexpected exception.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function critical($message, array $context = array());
        /**
         * Runtime errors that do not require immediate action but should typically
         * be logged and monitored.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function error($message, array $context = array());
        /**
         * Exceptional occurrences that are not errors.
         *
         * Example: Use of deprecated APIs, poor use of an API, undesirable things
         * that are not necessarily wrong.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function warning($message, array $context = array());
        /**
         * Normal but significant events.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function notice($message, array $context = array());
        /**
         * Interesting events.
         *
         * Example: User logs in, SQL logs.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function info($message, array $context = array());
        /**
         * Detailed debug information.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function debug($message, array $context = array());
        /**
         * Logs with an arbitrary level.
         *
         * @param mixed   $level
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         *
         * @throws \TEC\Common\Psr\Log\InvalidArgumentException
         */
        public function log($level, $message, array $context = array());
    }
}
namespace TEC\Common\Monolog {
    /**
     * Handler or Processor implementing this interface will be reset when Logger::reset() is called.
     *
     * Resetting ends a log cycle gets them back to their initial state.
     *
     * Resetting a Handler or a Processor means flushing/cleaning all buffers, resetting internal
     * state, and getting it back to a state in which it can receive log records again.
     *
     * This is useful in case you want to avoid logs leaking between two requests or jobs when you
     * have a long running process like a worker or an application server serving multiple requests
     * in one process.
     *
     * @author Grégoire Pineau <lyrixx@lyrixx.info>
     */
    interface ResettableInterface
    {
        public function reset();
    }
    /**
     * Monolog log channel
     *
     * It contains a stack of Handlers and a stack of Processors,
     * and uses them to store records that are added to it.
     *
     * @author Jordi Boggiano <j.boggiano@seld.be>
     */
    class Logger implements \TEC\Common\Psr\Log\LoggerInterface, \TEC\Common\Monolog\ResettableInterface
    {
        /**
         * Detailed debug information
         */
        const DEBUG = 100;
        /**
         * Interesting events
         *
         * Examples: User logs in, SQL logs.
         */
        const INFO = 200;
        /**
         * Uncommon events
         */
        const NOTICE = 250;
        /**
         * Exceptional occurrences that are not errors
         *
         * Examples: Use of deprecated APIs, poor use of an API,
         * undesirable things that are not necessarily wrong.
         */
        const WARNING = 300;
        /**
         * Runtime errors
         */
        const ERROR = 400;
        /**
         * Critical conditions
         *
         * Example: Application component unavailable, unexpected exception.
         */
        const CRITICAL = 500;
        /**
         * Action must be taken immediately
         *
         * Example: Entire website down, database unavailable, etc.
         * This should trigger the SMS alerts and wake you up.
         */
        const ALERT = 550;
        /**
         * Urgent alert.
         */
        const EMERGENCY = 600;
        /**
         * Monolog API version
         *
         * This is only bumped when API breaks are done and should
         * follow the major version of the library
         *
         * @var int
         */
        const API = 1;
        /**
         * Logging levels from syslog protocol defined in RFC 5424
         *
         * @var array $levels Logging levels
         */
        protected static $levels = array(self::DEBUG => 'DEBUG', self::INFO => 'INFO', self::NOTICE => 'NOTICE', self::WARNING => 'WARNING', self::ERROR => 'ERROR', self::CRITICAL => 'CRITICAL', self::ALERT => 'ALERT', self::EMERGENCY => 'EMERGENCY');
        /**
         * @var \DateTimeZone
         */
        protected static $timezone;
        /**
         * @var string
         */
        protected $name;
        /**
         * The handler stack
         *
         * @var HandlerInterface[]
         */
        protected $handlers;
        /**
         * Processors that will process all log records
         *
         * To process records of a single handler instead, add the processor on that specific handler
         *
         * @var callable[]
         */
        protected $processors;
        /**
         * @var bool
         */
        protected $microsecondTimestamps = true;
        /**
         * @var callable
         */
        protected $exceptionHandler;
        /**
         * @param string             $name       The logging channel
         * @param HandlerInterface[] $handlers   Optional stack of handlers, the first one in the array is called first, etc.
         * @param callable[]         $processors Optional array of processors
         */
        public function __construct($name, array $handlers = array(), array $processors = array())
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * Return a new cloned instance with the name changed
         *
         * @return static
         */
        public function withName($name)
        {
        }
        /**
         * Pushes a handler on to the stack.
         *
         * @param  HandlerInterface $handler
         * @return $this
         */
        public function pushHandler(\TEC\Common\Monolog\Handler\HandlerInterface $handler)
        {
        }
        /**
         * Pops a handler from the stack
         *
         * @return HandlerInterface
         */
        public function popHandler()
        {
        }
        /**
         * Set handlers, replacing all existing ones.
         *
         * If a map is passed, keys will be ignored.
         *
         * @param  HandlerInterface[] $handlers
         * @return $this
         */
        public function setHandlers(array $handlers)
        {
        }
        /**
         * @return HandlerInterface[]
         */
        public function getHandlers()
        {
        }
        /**
         * Adds a processor on to the stack.
         *
         * @param  callable $callback
         * @return $this
         */
        public function pushProcessor($callback)
        {
        }
        /**
         * Removes the processor on top of the stack and returns it.
         *
         * @return callable
         */
        public function popProcessor()
        {
        }
        /**
         * @return callable[]
         */
        public function getProcessors()
        {
        }
        /**
         * Control the use of microsecond resolution timestamps in the 'datetime'
         * member of new records.
         *
         * Generating microsecond resolution timestamps by calling
         * microtime(true), formatting the result via sprintf() and then parsing
         * the resulting string via \DateTime::createFromFormat() can incur
         * a measurable runtime overhead vs simple usage of DateTime to capture
         * a second resolution timestamp in systems which generate a large number
         * of log events.
         *
         * @param bool $micro True to use microtime() to create timestamps
         */
        public function useMicrosecondTimestamps($micro)
        {
        }
        /**
         * Adds a log record.
         *
         * @param  int     $level   The logging level
         * @param  string  $message The log message
         * @param  array   $context The log context
         * @return bool Whether the record has been processed
         */
        public function addRecord($level, $message, array $context = array())
        {
        }
        /**
         * Ends a log cycle and frees all resources used by handlers.
         *
         * Closing a Handler means flushing all buffers and freeing any open resources/handles.
         * Handlers that have been closed should be able to accept log records again and re-open
         * themselves on demand, but this may not always be possible depending on implementation.
         *
         * This is useful at the end of a request and will be called automatically on every handler
         * when they get destructed.
         */
        public function close()
        {
        }
        /**
         * Ends a log cycle and resets all handlers and processors to their initial state.
         *
         * Resetting a Handler or a Processor means flushing/cleaning all buffers, resetting internal
         * state, and getting it back to a state in which it can receive log records again.
         *
         * This is useful in case you want to avoid logs leaking between two requests or jobs when you
         * have a long running process like a worker or an application server serving multiple requests
         * in one process.
         */
        public function reset()
        {
        }
        /**
         * Adds a log record at the DEBUG level.
         *
         * @param  string $message The log message
         * @param  array  $context The log context
         * @return bool   Whether the record has been processed
         */
        public function addDebug($message, array $context = array())
        {
        }
        /**
         * Adds a log record at the INFO level.
         *
         * @param  string $message The log message
         * @param  array  $context The log context
         * @return bool   Whether the record has been processed
         */
        public function addInfo($message, array $context = array())
        {
        }
        /**
         * Adds a log record at the NOTICE level.
         *
         * @param  string $message The log message
         * @param  array  $context The log context
         * @return bool   Whether the record has been processed
         */
        public function addNotice($message, array $context = array())
        {
        }
        /**
         * Adds a log record at the WARNING level.
         *
         * @param  string $message The log message
         * @param  array  $context The log context
         * @return bool   Whether the record has been processed
         */
        public function addWarning($message, array $context = array())
        {
        }
        /**
         * Adds a log record at the ERROR level.
         *
         * @param  string $message The log message
         * @param  array  $context The log context
         * @return bool   Whether the record has been processed
         */
        public function addError($message, array $context = array())
        {
        }
        /**
         * Adds a log record at the CRITICAL level.
         *
         * @param  string $message The log message
         * @param  array  $context The log context
         * @return bool   Whether the record has been processed
         */
        public function addCritical($message, array $context = array())
        {
        }
        /**
         * Adds a log record at the ALERT level.
         *
         * @param  string $message The log message
         * @param  array  $context The log context
         * @return bool   Whether the record has been processed
         */
        public function addAlert($message, array $context = array())
        {
        }
        /**
         * Adds a log record at the EMERGENCY level.
         *
         * @param  string $message The log message
         * @param  array  $context The log context
         * @return bool   Whether the record has been processed
         */
        public function addEmergency($message, array $context = array())
        {
        }
        /**
         * Gets all supported logging levels.
         *
         * @return array Assoc array with human-readable level names => level codes.
         */
        public static function getLevels()
        {
        }
        /**
         * Gets the name of the logging level.
         *
         * @param  int    $level
         * @return string
         */
        public static function getLevelName($level)
        {
        }
        /**
         * Converts PSR-3 levels to Monolog ones if necessary
         *
         * @param string|int Level number (monolog) or name (PSR-3)
         * @return int
         */
        public static function toMonologLevel($level)
        {
        }
        /**
         * Checks whether the Logger has a handler that listens on the given level
         *
         * @param  int     $level
         * @return bool
         */
        public function isHandling($level)
        {
        }
        /**
         * Set a custom exception handler
         *
         * @param  callable $callback
         * @return $this
         */
        public function setExceptionHandler($callback)
        {
        }
        /**
         * @return callable
         */
        public function getExceptionHandler()
        {
        }
        /**
         * Delegates exception management to the custom exception handler,
         * or throws the exception if no custom handler is set.
         */
        protected function handleException(\Exception $e, array $record)
        {
        }
        /**
         * Adds a log record at an arbitrary level.
         *
         * This method allows for compatibility with common interfaces.
         *
         * @param  mixed   $level   The log level
         * @param  string $message The log message
         * @param  array  $context The log context
         * @return bool   Whether the record has been processed
         */
        public function log($level, $message, array $context = array())
        {
        }
        /**
         * Adds a log record at the DEBUG level.
         *
         * This method allows for compatibility with common interfaces.
         *
         * @param  string $message The log message
         * @param  array  $context The log context
         * @return bool   Whether the record has been processed
         */
        public function debug($message, array $context = array())
        {
        }
        /**
         * Adds a log record at the INFO level.
         *
         * This method allows for compatibility with common interfaces.
         *
         * @param  string $message The log message
         * @param  array  $context The log context
         * @return bool   Whether the record has been processed
         */
        public function info($message, array $context = array())
        {
        }
        /**
         * Adds a log record at the NOTICE level.
         *
         * This method allows for compatibility with common interfaces.
         *
         * @param  string $message The log message
         * @param  array  $context The log context
         * @return bool   Whether the record has been processed
         */
        public function notice($message, array $context = array())
        {
        }
        /**
         * Adds a log record at the WARNING level.
         *
         * This method allows for compatibility with common interfaces.
         *
         * @param  string $message The log message
         * @param  array  $context The log context
         * @return bool   Whether the record has been processed
         */
        public function warn($message, array $context = array())
        {
        }
        /**
         * Adds a log record at the WARNING level.
         *
         * This method allows for compatibility with common interfaces.
         *
         * @param  string $message The log message
         * @param  array  $context The log context
         * @return bool   Whether the record has been processed
         */
        public function warning($message, array $context = array())
        {
        }
        /**
         * Adds a log record at the ERROR level.
         *
         * This method allows for compatibility with common interfaces.
         *
         * @param  string $message The log message
         * @param  array  $context The log context
         * @return bool   Whether the record has been processed
         */
        public function err($message, array $context = array())
        {
        }
        /**
         * Adds a log record at the ERROR level.
         *
         * This method allows for compatibility with common interfaces.
         *
         * @param  string $message The log message
         * @param  array  $context The log context
         * @return bool   Whether the record has been processed
         */
        public function error($message, array $context = array())
        {
        }
        /**
         * Adds a log record at the CRITICAL level.
         *
         * This method allows for compatibility with common interfaces.
         *
         * @param  string $message The log message
         * @param  array  $context The log context
         * @return bool   Whether the record has been processed
         */
        public function crit($message, array $context = array())
        {
        }
        /**
         * Adds a log record at the CRITICAL level.
         *
         * This method allows for compatibility with common interfaces.
         *
         * @param  string $message The log message
         * @param  array  $context The log context
         * @return bool   Whether the record has been processed
         */
        public function critical($message, array $context = array())
        {
        }
        /**
         * Adds a log record at the ALERT level.
         *
         * This method allows for compatibility with common interfaces.
         *
         * @param  string $message The log message
         * @param  array  $context The log context
         * @return bool   Whether the record has been processed
         */
        public function alert($message, array $context = array())
        {
        }
        /**
         * Adds a log record at the EMERGENCY level.
         *
         * This method allows for compatibility with common interfaces.
         *
         * @param  string $message The log message
         * @param  array  $context The log context
         * @return bool   Whether the record has been processed
         */
        public function emerg($message, array $context = array())
        {
        }
        /**
         * Adds a log record at the EMERGENCY level.
         *
         * This method allows for compatibility with common interfaces.
         *
         * @param  string $message The log message
         * @param  array  $context The log context
         * @return bool   Whether the record has been processed
         */
        public function emergency($message, array $context = array())
        {
        }
        /**
         * Set the timezone to be used for the timestamp of log records.
         *
         * This is stored globally for all Logger instances
         *
         * @param \DateTimeZone $tz Timezone object
         */
        public static function setTimezone(\DateTimeZone $tz)
        {
        }
    }
}
namespace Tribe\Log {
    /**
     * Class Monolog_Logger
     *
     * @since 4.9.16
     *
     * @package Tribe\Log
     */
    class Monolog_Logger extends \TEC\Common\Monolog\Logger
    {
        /**
         * @since 4.9.16
         */
        const DEFAULT_CHANNEL = 'default';
        /**
         * Resets the global channel to the default one.
         *
         * @since 4.9.16
         *
         * @return bool Whether the channel reset
         */
        public function reset_global_channel()
        {
        }
        /**
         * Clones this logger and replaces it in the `tribe` container.
         *
         * @since 4.9.16
         *
         * @param string $channel The new logger name, also referred to as "channel" (hence the method name).
         *
         * @return bool Whether the channel change was successful or not.
         */
        public function set_global_channel($channel)
        {
        }
    }
}
namespace {
    /**
     * Class Null_Logger
     *
     * Logs nothing, reads nothing.
     */
    class Tribe__Log__Null_Logger implements \Tribe__Log__Logger
    {
        /**
         * Indicates if the logger will work in the current environment.
         *
         * @return bool
         */
        public function is_available()
        {
        }
        /**
         * Returns a 'human friendly' name for the logging implementation.
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Responsible for commiting the entry to the log (but only if the debug level
         * is appropriate).
         *
         * @param string $entry
         * @param string $type
         * @param string $src
         */
        public function log($entry, $type = \Tribe__Log::DEBUG, $src = '')
        {
        }
        /**
         * Retrieve up to $limit most recent log entries in reverse chronological
         * order. If $limit is a negative or zero value, there is no limit.
         *
         * Implementation-specific arguments can optionally be provided as a second
         * parameter. This may include support for a 'log' param where an identifer
         * obtained via the list_availalbe_logs() method is passed in order to query
         * a specific archived log.
         *
         * @see Tribe__Log__Logger::list_available_logs()
         *
         * @param int   $limit
         * @param array $args
         *
         * @return array
         */
        public function retrieve($limit = 0, array $args = [])
        {
        }
        /**
         * Returns a list of currently accessible logs (current first, oldest last).
         *
         * This can be useful if, for instance, a particular logger organizes logging
         * by dates and keeps an archive of upto 1 week's worth of logs - in which case
         * the array might look like:
         *
         *     [ '2016-12-31',
         *       '2016-12-30',
         *       '2016-12-30',
         *       '2016-12-30',
         *       '2016-12-30', ... ]
         *
         * Note that a) the array may be empty and b) it won't necessarily contain
         * date strings, it could contain identifiers like 'current', 'prev', 'prev2'
         * or really anything the logging engine prefers.
         *
         * @return array
         */
        public function list_available_logs()
        {
        }
        /**
         * Switches to the specified log.
         *
         * If optional param $create is true the logger will try to create a new log
         * using the provided identifier if it doesn't already exist.
         *
         * @param mixed $log_identifier
         * @param bool  $create
         *
         * @return bool
         */
        public function use_log($log_identifier, $create = \false)
        {
        }
        /**
         * Performs routine maintenance and cleanup work (such as log rotation)
         * whenever it is called.
         */
        public function cleanup()
        {
        }
    }
}
namespace Tribe\Log {
    class Service_Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 4.9.16
         */
        public function register()
        {
        }
        /**
         * Builds and returns the Monolog Logger instance that will listen to the `tribe_log` action.
         *
         * To avoid the over-head introduced by filtering the filters are applied here, only once, when the instance is
         * first built. Any later call will use the singleton instance stored in the container.
         *
         * @since 4.9.16
         *
         * @return Logger
         */
        public function build_logger()
        {
        }
        /**
         * Dispatch a message of a specific level.
         *
         * Available levels are: `debug`, `info`, `notice`, `warning`, `error`, `critical`, `alert`, `emergency`.
         *
         * @since 4.9.16
         *
         * @param string|int $level   Either the log level or the log pretty name, see long description.
         * @param string     $message The message to log.
         * @param array      $context An array of values to define the context.
         *
         * @see   \Monolog\Logger for the log level constants and names.
         */
        public function dispatch_log($level = 'debug', $message = '', array $context = [])
        {
        }
        /**
         * Makes the action-based logging engine available in the backend.
         *
         * @since 4.9.16
         *
         * @param array $logging_engines An array of available logging engines.
         *
         * @return array The updated array of logging engines.
         */
        public function add_logging_engine(array $logging_engines = [])
        {
        }
        /**
         * Enables logging in the service provider, if not already enabled.
         *
         * @since 4.12.15
         */
        public function enable()
        {
        }
        /**
         * Disables the logging functions.
         *
         * @since 4.12.15
         */
        public function disable()
        {
        }
    }
}
namespace {
    class Tribe__Main
    {
        const EVENTSERROROPT = '_tribe_events_errors';
        const OPTIONNAME = 'tribe_events_calendar_options';
        const OPTIONNAMENETWORK = 'tribe_events_calendar_network_options';
        const FEED_URL = 'https://theeventscalendar.com/feed/';
        const VERSION = '5.1.15.2';
        protected $plugin_context;
        protected $plugin_context_class;
        /**
         * Holds the path to the main file of the parent plugin.
         *
         * @since 5.1.0
         *
         * @var string
         */
        protected $parent_plugin_file = '';
        public static $tribe_url = 'http://tri.be/';
        public static $tec_url = 'https://theeventscalendar.com/';
        public $plugin_dir;
        public $plugin_path;
        public $plugin_url;
        public $parent_plugin_dir;
        /**
         * Static Singleton Holder
         * @var self
         */
        protected static $instance;
        /**
         * Get (and instantiate, if necessary) the instance of the class
         *
         * @param  mixed $context An instance of the Main class of the plugin that instantiated Common
         *
         * @return self
         */
        public static function instance($context = \null)
        {
        }
        /**
         * Constructor for Common Class
         *
         * We are using a `public` constructor here for backwards compatibility.
         *
         * The way our code used to work we would have `new Tribe__Main()` called directly
         * which causes fatals if you have an older version of Core/Tickets active along side a new one
         */
        public function __construct($context = \null)
        {
        }
        /**
         *
         */
        public function plugins_loaded()
        {
        }
        /**
         * Setup the autoloader for common files
         */
        protected function init_autoloading()
        {
        }
        public function tribe_common_app_store()
        {
        }
        /**
         * Gets the instantiated context of this class. I.e. the object that instantiated this one.
         */
        public function context()
        {
        }
        /**
         * Gets the class name of the instantiated plugin context of this class. I.e. the class name of the object that instantiated this one.
         */
        public function context_class()
        {
        }
        /**
         * Initializes all libraries used/required by our singletons.
         *
         * @since 4.14.18
         */
        public function init_early_libraries()
        {
        }
        /**
         * initializes all required libraries
         */
        public function init_libraries()
        {
        }
        /**
         * Registers resources that can/should be enqueued
         */
        public function load_assets()
        {
        }
        /**
         * Ensure that the customizer styles get the variables they need.
         *
         * @since 4.14.13
         */
        public function load_tec_variables()
        {
        }
        /**
         * Load Common's text domain, then fire the hook for other plugins to do the same.
         *
         * Make sure this fires on 'init', per WordPress best practices.
         *
         * @since 4.12.0
         *
         * @return bool
         */
        public function hook_load_text_domain()
        {
        }
        /**
         * Load All localization data create by `asset.data`
         *
         * @since  4.7
         *
         * @return void
         */
        public function load_localize_data()
        {
        }
        /**
         * Adds core hooks
         */
        public function add_hooks()
        {
        }
        /**
         * Adds `tribe-no-js` class to all pages when common is active.
         *
         * @since 4.3.4
         *
         * @param array|string $classes Previous classes on body.
         *
         * @return array       All classes that will be printed on `<body>`.
         */
        public function add_js_class($classes = [])
        {
        }
        /**
         * Removes `tribe-no-js` and replaces with `tribe-js` when the Javascript of the page is enabled.
         *
         * @since 4.3.4
         *
         * @return void  This method only prints HTML to the screen no return.
         */
        public function toggle_js_class()
        {
        }
        /**
         * Tells us if we're on an admin screen that needs the Common admin CSS.
         *
         * Currently this includes post type screens, the Plugins page, Settings pages
         * and tabs, Tribe App Shop page, and the Help screen.
         *
         * @since 4.5.7
         *
         * @return bool Whether we should load Common Admin CSS or not.
         */
        public function should_load_common_admin_css()
        {
        }
        /**
         * A Helper method to load text domain
         * First it tries to load the wp-content/languages translation then if falls to the try to load $dir language files.
         *
         * @since  4.0.1 Introduced.
         * @since  4.2   Included $domain and $dir params.
         *
         * @param string       $domain The text domain that will be loaded.
         * @param string|false $dir    What directory should be used to try to load if the default doesn't work.
         *
         * @return bool  If it was able to load the text domain.
         */
        public function load_text_domain($domain, $dir = \false)
        {
        }
        /**
         * Returns the post types registered by Tribe plugins.
         *
         * @since 4.0.1 Introduced the method.
         *
         * @return array Slugs for all Post Types registered.
         */
        public static function get_post_types()
        {
        }
        /**
         * Insert an array after a specified key within another array.
         *
         * @param $key
         * @param $source_array
         * @param $insert_array
         *
         * @return array
         */
        public static function array_insert_after_key($key, $source_array, $insert_array)
        {
        }
        /**
         * Insert an array immediately before a specified key within another array.
         *
         * @param $key
         * @param $source_array
         * @param $insert_array
         *
         * @return array
         */
        public static function array_insert_before_key($key, $source_array, $insert_array)
        {
        }
        /**
         * Get the Post ID from a passed integer, a passed WP_Post object, or the current post.
         *
         * Helper function for getting Post ID. Accepts `null` or a Post ID. If attempting
         * to detect $post object and it is not found, returns `false` to avoid a PHP Notice.
         *
         * @param  null|int|WP_Post  $candidate  Post ID or object, `null` to get the ID of the global post object.
         *
         * @return int|false The ID of the passed or global post, `false` if the passes object is not a post or the global
         *                   post is not set.
         */
        public static function post_id_helper($candidate = \null)
        {
        }
        /**
         * Adds a hook
         *
         */
        public function store_admin_notices($page)
        {
        }
        /**
         * Runs tribe_plugins_loaded action, should be hooked to the end of plugins_loaded
         */
        public function tribe_plugins_loaded()
        {
        }
        /**
         * Registers the slug bound to the implementations in the container.
         *
         * @since 4.4
         *
         * @return void Implementation of components loader doesn't return anything.
         */
        public function bind_implementations()
        {
        }
        /**
         * Create the Promoter connector singleton early to allow hook into the filters early.
         *
         * Add a filter to determine_current_user during the setup of common library.
         *
         * @since 4.9.20
         *
         * @return void  Internal method without any return.
         */
        public function promoter_connector()
        {
        }
        /**
         * Get the common library's parent plugin file path.
         *
         * @since 5.1.0
         *
         * @return string The path to the parent plugin file.
         */
        public function get_parent_plugin_file_path() : string
        {
        }
        /************************
         *                      *
         *  Deprecated Methods  *
         *                      *
         ************************/
        // @codingStandardsIgnoreStart
        /**
         * Helper function to indicate whether the current execution context is AJAX
         *
         * This method exists to allow us test code that behaves differently depending on the execution
         * context.
         *
         * @since 4.0
         *
         * @todo Add warning with '_deprecated_function'
         *
         * @param bool $doing_ajax An injectable status to override the `DOING_AJAX` check.
         *
         * @deprecated 4.7.12
         *
         * @return boolean
         */
        public function doing_ajax($doing_ajax = \null)
        {
        }
        /**
         * Manages PUE license key notifications.
         *
         * It's important for the sanity of our users that only one instance of this object
         * be created. However, multiple Tribe__Main objects can and will be instantiated, hence
         * why for the time being we need to make this field static.
         *
         * @see https://central.tri.be/issues/65755
         *
         * @deprecated 4.7.10
         *
         * @return Tribe__PUE__Notices
         */
        public function pue_notices()
        {
        }
        /**
         *
         * @deprecated 4.7.10
         *
         * @return Tribe__Log
         */
        public function log()
        {
        }
        // @codingStandardsIgnoreEnd
    }
    /**
     * Class Tribe__Meta__Chunker
     *
     * Chunks large meta to avoid killing the database in queries.
     *
     * Databases can have a `max_allowed_packet` value set as low as 1M; we often need to store large blobs of data way
     * over that and doing so would kill the database ("MySQL server has gone away"...); registering a meta to be chunked
     * if needed avoids that.
     *
     * Example usage:
     *
     *      $chunker = tribe( 'chunker' );
     *      $chunker->register_for_chunking( $post_id, 'my_meta_key' );
     *
     *      // ... some code later...
     *
     *      // data will be transparently chunked if needed...
     *      update_meta( $post_id, 'my_meta_key', $some_looooooooooong_string );
     *
     *      // ...and glued back together when reading
     *      get_post_meta( $post_id, 'my_meta_key', true );
     *
     * By default the Chunker supports the `post` post type only, filter the `tribe_meta_chunker_post_types` to add yours:
     *
     *      add_filter( 'tribe_meta_chunker_post_types`, 'my_chunkable_post_types' );
     *      function my_chunkable_post_types( $post_types ) {
     *          $post_types[] = 'book';
     *
     *          return $post_types;
     *      }
     *
     * or filter the `tribe_meta_chunker_post_types` filter.
     */
    class Tribe__Meta__Chunker
    {
        /**
         * @var string The key used to cache the class results in the WordPress object cache.
         */
        protected $cache_group = 'post_meta';
        /**
         * @var string
         */
        protected $chunked_keys_option_name = '_tribe_chunker_chunked_keys';
        /**
         * @var array The cache that will store chunks to avoid middleware operations from fetching the database.
         */
        protected $chunks_cache = \null;
        /**
         * @var array The cache that will store the IDs of the posts that have at least one meta key registered
         *            for chunking.
         */
        protected $post_ids_cache = \null;
        /**
         * @var string The separator that's used to mark the start of each chunk.
         */
        protected $chunk_separator = '{{{TCSEP}}}';
        /**
         * @var array The post types supported by the Chunker.
         */
        protected $post_types = [];
        /**
         * @var int The filter priority at which Chunker will operate on meta CRUD operations.
         */
        protected $filter_priority = -1;
        /**
         * @var string The meta key prefix applied ot any Chunker related post meta.
         */
        protected $meta_key_prefix = '_tribe_chunker_';
        /**
         * @var int The largest size allowed by the Chunker.
         */
        protected $max_chunk_size;
        /**
         * Hooks the chunker on metadata operations for each supported post types.
         *
         * When changing post types unhook and rehook it like:
         *
         *      $chunker = tribe( 'chunker' );
         *      $chunker->set_post_types( array_merge( $my_post_types, $chunker->get_post_types() );
         *      $chunker->unhook();
         *      $chunker->hook();
         */
        public function hook()
        {
        }
        /**
         * Primes the chunked cache.
         *
         * This will just fetch the keys for the supported post types, not the values.
         *
         * @param bool $force Whether the cache should be reprimed even if already primed.
         */
        public function prime_chunks_cache($force = \false)
        {
        }
        /**
         * Gets the key used to identify a post ID and meta key in the chunks cache.
         *
         * @param int    $post_id
         * @param string $meta_key
         * @return string
         */
        public function get_key($post_id, $meta_key)
        {
        }
        /**
         * Register a post ID and meta key to be chunked if needed.
         *
         * @param int    $post_id
         * @param string $meta_key
         *
         * @return bool `false` if the post type is not supported, `true` otherwise
         */
        public function register_chunking_for($post_id, $meta_key)
        {
        }
        /**
         * Whether a post type is supported or not.
         *
         * @param int $object_id
         *
         * @return bool
         */
        protected function is_supported_post_type($object_id)
        {
        }
        /**
         * Tags a post ID and meta key couple as "chunkable" if needed.
         *
         * @param $post_id
         * @param $meta_key
         */
        protected function tag_as_chunkable($post_id, $meta_key)
        {
        }
        /**
         * Returns the meta key used to indicate if a meta key for a post is marked as chunkable.
         *
         * @param string $meta_key
         *
         * @return string
         */
        public function get_chunkable_meta_key($meta_key)
        {
        }
        /**
         * Filters the add operations.
         *
         * Due to how the system works no more than one chunked entry can be stored.
         *
         * @param mixed  $check
         * @param int    $object_id
         * @param string $meta_key
         * @param string $meta_value
         *
         * @see add_metadata()
         *
         * @return bool
         */
        public function filter_add_metadata($check, $object_id, $meta_key, $meta_value)
        {
        }
        /**
         * Filters the updated operations.
         *
         * @param mixed  $check
         * @param int    $object_id
         * @param string $meta_key
         * @param string $meta_value
         *
         * @see update_metadata()
         *
         * @return bool
         */
        public function filter_update_metadata($check, $object_id, $meta_key, $meta_value)
        {
        }
        /**
         * Whether the chunker should operate on this post ID and meta key couple or not.
         *
         * @param int    $object_id
         * @param string $meta_key
         *
         * @return bool
         */
        protected function applies($object_id, $meta_key)
        {
        }
        /**
         * Whether the meta key is one used by the chunker to keep track of its operations or not.
         *
         * @param string $meta_key
         *
         * @return bool
         */
        protected function is_chunker_logic_meta_key($meta_key)
        {
        }
        /**
         * Whether a post ID and meta key couple is registered as chunkable or not.
         *
         * If no meta key is passed then the function will check if there is at least
         * one meta key registered for chunking for the specified post ID.
         *
         * @param int    $post_id
         * @param string $meta_key
         *
         * @return bool
         */
        public function is_chunkable($post_id, $meta_key = \null)
        {
        }
        /**
         * Deletes all the chunks for a post ID and meta key couple.
         *
         * @param int    $object_id
         * @param string $meta_key
         */
        protected function delete_chunks($object_id, $meta_key)
        {
        }
        /**
         * Returns the meta key used to indicate a chunk for a meta key.
         *
         * @param string $meta_key
         *
         * @return string
         */
        public function get_chunk_meta_key($meta_key)
        {
        }
        /**
         * Removes the checksum used to verify the integrity of the chunked values.
         *
         * @param int    $object_id
         * @param string $meta_key
         */
        protected function remove_checksum_for($object_id, $meta_key)
        {
        }
        /**
         * Returns the meta_key used to store the chunked meta checksum for a specified meta key.
         *
         * @param string $meta_key
         *
         * @return string
         */
        public function get_checksum_key($meta_key)
        {
        }
        /**
         * Whether a value should be chunked or not.
         *
         * @param int    $post_id
         * @param string $meta_key
         * @param mixed  $meta_value
         *
         * @return bool
         */
        public function should_be_chunked($post_id, $meta_key, $meta_value)
        {
        }
        /**
         * Returns the max chunk size in bytes.
         *
         * @return array|int|null|object
         */
        public function get_max_chunk_size()
        {
        }
        /**
         * Sets the max chunk size.
         *
         * @param int $max_chunk_size The max chunk size in bytes.
         */
        public function set_max_chunk_size($max_chunk_size)
        {
        }
        /**
         * Gets the size in bytes of something.
         *
         * @param mixed $data
         *
         * @return int
         */
        public function get_byte_size($data)
        {
        }
        /**
         * Prefixes each chunk with a sequence number.
         *
         * @param array $chunks
         *
         * @return array An array of chunks each prefixed with sequence number.
         */
        protected function prefix_chunks(array $chunks)
        {
        }
        /**
         * Chunks a string.
         *
         * The chunks are not prefixed!
         *
         * @param string $serialized
         * @param int    $chunk_size
         *
         * @return array An array of unprefixed chunks.
         */
        protected function chunk($serialized, $chunk_size)
        {
        }
        /**
         * Inserts the chunks for a post ID and meta key couple in the database.
         *
         * The chunks are read from the array cache.
         *
         * @param int    $object_id
         * @param string $meta_key
         */
        protected function insert_chunks($object_id, $meta_key)
        {
        }
        /**
         * Inserts a meta value in the database.
         *
         * Convenience method to avoid infinite loop in hooks.
         *
         * @param int    $object_id
         * @param string $meta_key
         * @param mixed  $meta_value
         */
        protected function insert_meta($object_id, $meta_key, $meta_value)
        {
        }
        /**
         * Glues the provided chunks.
         *
         * This method is sequence aware and should be used with what the `get_chunks_for` method returns.
         *
         * @param array $chunks
         *
         * @return string
         *
         * @see Tribe__Meta__Chunker::get_chunks_for()
         */
        public function glue_chunks(array $chunks)
        {
        }
        /**
         * Returns the chunks stored in the database for a post ID and meta key couple.
         *
         * The chunks are returned as they are with prefix.
         *
         * @param int    $object_id
         * @param string $meta_key
         *
         * @return array|mixed
         */
        public function get_chunks_for($object_id, $meta_key)
        {
        }
        /**
         * Resets a post ID and meta key couple cache.
         *
         * @param int    $object_id
         * @param string $meta_key
         */
        protected function cache_delete($object_id, $meta_key)
        {
        }
        /**
         * Filters the delete operations.
         *
         * @param mixed  $check
         * @param int    $object_id
         * @param string $meta_key
         *
         * @return bool
         *
         * @see delete_metadata()
         */
        public function filter_delete_metadata($check, $object_id, $meta_key)
        {
        }
        /**
         * Whether a post ID and meta key couple has chunked meta or not.
         *
         * @param int    $object_id
         * @param string $meta_key
         * @param bool   $check_db Do verify the chunking state on the database.
         *
         * @return mixed
         */
        public function is_chunked($object_id, $meta_key, $check_db = \false)
        {
        }
        /**
         * Returns the checksum for the stored meta key to spot meta value corruption malforming.
         *
         * @param int    $object_id
         * @param string $meta_key
         *
         * @return string
         */
        public function get_checksum_for($object_id, $meta_key)
        {
        }
        /**
         * Handles the object destruction cycle to leave no traces behind.
         */
        public function __destruct()
        {
        }
        /**
         * Unhooks the Chunker from the metadata operations.
         */
        public function unhook()
        {
        }
        /**
         * Filters the get operations.
         *
         * @param mixed  $check
         * @param int    $object_id
         * @param string $meta_key
         * @param bool   $single
         *
         * @return array|mixed
         *
         * @see get_metadata()
         */
        public function filter_get_metadata($check, $object_id, $meta_key, $single)
        {
        }
        /**
         * Returns all the meta for a post ID.
         *
         * The meta includes the chunked one but not the chunker logic meta keys.
         * The return format is the same used by the `get_post_meta( $post_id )` function.
         *
         * @param int $object_id
         *
         * @return array An array containing all meta including the chunked one.
         *
         * @see get_post_meta() with empty `$meta_key` argument.
         */
        public function get_all_meta_for($object_id)
        {
        }
        /**
         * Fetches all the meta for a post.
         *
         * @param int $object_id
         *
         * @return array|null|object
         */
        protected function get_all_meta($object_id)
        {
        }
        /**
         * Returns the post types supported by the chunker.
         *
         * @return array
         */
        public function get_post_types()
        {
        }
        /**
         * Sets the post types the Chunker should support.
         *
         * @param array $post_types
         */
        public function set_post_types(array $post_types = \null)
        {
        }
        /**
         * Returns the name of the option that stores the keys registered for chunking for each post.
         *
         * @return string
         */
        public function get_key_option_name()
        {
        }
        /**
         * Returns the cache group used by the meta chunker.
         *
         * @return string
         */
        public function get_cache_group()
        {
        }
        /**
         * Asserts that a meta key is not a chunk meta key.
         *
         * @param string $meta_key
         *
         * @return bool
         */
        protected function is_chunker_checksum_key($meta_key)
        {
        }
        /**
         * Removes the entries associated with a deleted post from the cache and the database option.
         *
         * @param int $post_id A post ID
         */
        public function remove_post_entry($post_id)
        {
        }
    }
}
namespace Tribe\Models\Post_Types {
    /**
     * Class Base
     *
     * @since   4.9.18
     *
     * @package Tribe\Models\Post_Types
     */
    abstract class Base
    {
        /**
         * The key used to store pre-serializes properties data in the cache.
         *
         * @since 5.0.3
         */
        public const PRE_SERIALIZED_PROPERTY = '_tec_pre_serialized';
        /**
         * The post object base for this post type instance.
         *
         * @since 4.9.18
         *
         * @var \WP_Post
         */
        protected $post;
        /**
         * Builds, and returns, a post type model from a given post.
         *
         * @since 4.9.18
         *
         * @param \WP_Post|int $post The post ID or post object.
         *
         * @return Base|Nothing Either the built Post Type model, or a Nothing model if the post does not exist.
         */
        public static function from_post($post)
        {
        }
        /**
         * Returns the slug that will be prefixed to the cache key for the model.
         *
         * @since 4.9.18
         *
         * @return string The slug that will be prefixed to the cache key for the model.
         */
        protected abstract function get_cache_slug();
        /**
         * Returns the cached model properties for the specified filter, if any.
         *
         * @since 4.9.18
         *
         * @param string $filter Type of filter to apply, used here as the stored post values might change.
         *
         * @return array|false An array of model properties, or `false` if not found.
         */
        protected function get_cached_properties($filter)
        {
        }
        /**
         * Builds and returns the properties for the model.
         *
         * In this method child classes should also implement any caching trigger mechanism, if any.
         *
         * @since 4.9.18
         *
         * @param string $filter The type of filter to build the properties for.
         *
         * @return array An array of built properties.
         */
        protected abstract function build_properties($filter);
        /**
         * Returns an array of the model properties.
         *
         * @since 4.9.18
         *
         * @param string $filter The type of filter to get the properties for.
         * @param bool $force Whether to force a rebuild of the properties or not.
         *
         * @return array The model properties. This value might be cached.
         */
        protected function get_properties($filter, bool $force = false)
        {
        }
        /**
         * Returns the WP_Post version of this model.
         *
         * @since 4.9.18
         * @since 5.0.3 Added the `$force` parameter.
         *
         * @param string $output The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to a WP_Post
         *                       object,an associative array, or a numeric array, respectively.
         * @param string $filter Type of filter to apply. Accepts 'raw', 'edit', 'db', or 'display' and other formats
         *                       supported by the specific type implementation.
         * @param bool   $force  Whether to force the post to be reloaded from the database or not.
         *
         * @return \WP_Post|array|null The post object version of this post type model or `null` if the post is not valid.
         */
        public function to_post($output = OBJECT, $filter = 'raw', bool $force = false)
        {
        }
        /**
         * Returns the closure that should be used to cache the post type model when, and if, caching it is required.
         *
         * @since 4.9.18
         *
         * @param string $filter The kind of filter applied to the model.
         * @return callable The closure, or callable, that should be used to cache this model when, and if, required.
         */
        protected function get_caching_callback($filter)
        {
        }
        /**
         * Further scalarizes the properties of the post type model.
         *
         * Extending classes should implement this method to handle
         * specific scalarization of the model properties.
         *
         * @since 5.0.3
         *
         * @param array<string,mixed> $properties A key-value map of the
         *                                        properties of the post type model.
         *
         * @return array<string,mixed> The scalarized properties key-value map.
         */
        protected function scalar_serialize_properties(array $properties) : array
        {
        }
        /**
         * Further un-scalarizes the properties of the post type model.
         *
         * Extending classes should implement this method to handle
         * specific un-scalarization of the model properties.
         *
         * @since 5.0.3
         *
         * @param array<string,mixed> $properties A key-value map of the
         *                                        properties of the post type model.
         *
         * @return array<string,mixed> The un-scalarized properties key-value map.
         */
        protected function scalar_unserialize_properties(array $properties) : array
        {
        }
        /**
         * Returns the callback function that should be used to cache the model using object caching.
         *
         * If any real caching is in place , then define a function to cache this event when, and if, one of the
         * lazy properties is loaded.
         * Cache by post ID and filter.
         * Cache could be pre-fetched: in that case only built-in PHP classes will be supported: for this reason
         * object properties will be "scalarized".
         *
         * @since 5.0.3
         *
         * @param string $cache_slug The cache slug of the post type model.
         * @param string $filter     The filter to cache the model for.
         *
         * @return \Closure The callback function that should be used to cache the model using object caching.
         */
        protected function get_object_cache_callback(string $filter) : \Closure
        {
        }
        /**
         * Returns the cache key to be used to cache the model properties.
         *
         * @since 5.0.3
         *
         * @param string $filter The filter to cache the model for.
         *
         * @return string The cache key to be used to cache the model properties.
         */
        public function get_properties_cache_key(string $filter) : string
        {
        }
        /**
         * Commits the model properties to cache immediately.
         *
         * @since 5.0.3
         *
         * @param string $filter The filter to cache the model properties for.
         *
         * @return void The model properties are cached immediately.
         */
        public function commit_to_cache(string $filter = 'raw') : void
        {
        }
    }
    /**
     * Class Nothing
     *
     * @since   4.9.18
     *
     * @package Tribe\Models\Post_Types
     */
    class Nothing extends \Tribe\Models\Post_Types\Base
    {
        /**
         * {@inheritDoc}
         */
        protected function get_cache_slug()
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function build_properties($filter)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function to_post($output = OBJECT, $filter = 'raw', bool $force = false)
        {
        }
    }
}
namespace {
    class Tribe__Notices
    {
        /**
         * Notices to be displayed in the admin
         * @var array
         */
        protected $notices = [];
        /**
         * Define an admin notice
         *
         * @param string $key
         * @param string $notice
         *
         * @return bool
         */
        public static function set_notice($key, $notice)
        {
        }
        /**
         * Check to see if an admin notice exists
         *
         * @param string $key
         *
         * @return bool
         */
        public static function is_notice($key)
        {
        }
        /**
         * Remove an admin notice
         *
         * @param string $key
         *
         * @return bool
         */
        public static function remove_notice($key)
        {
        }
        /**
         * Get the admin notices
         *
         * @return array
         */
        public static function get()
        {
        }
        /**
         * Static Singleton Factory Method
         *
         * @return Tribe__Notices
         */
        public static function instance()
        {
        }
    }
}
namespace Tribe\Onboarding {
    /**
     * Class Hints Abstract.
     *
     * @since 4.14.9
     */
    abstract class Hints_Abstract
    {
        /**
         * The hints ID.
         *
         * @since 4.14.9
         *
         * @var string
         */
        public $hints_id;
        /**
         * Times to display the hints.
         *
         * @since 4.14.9
         *
         * @var int
         */
        public $times_to_display;
        /**
         * Return if it's on page where it should be displayed.
         *
         * @since 4.14.9
         *
         * @return bool True if it is on page.
         */
        public function is_on_page()
        {
        }
        /**
         * Should the hints display.
         *
         * @since 4.14.9
         *
         * @return boolean True if it should display.
         */
        public function should_display()
        {
        }
        /**
         * Return the hints data.
         *
         * @since 4.14.9
         *
         * @return array The hints.
         */
        abstract function hints();
        /**
         * Return the CSS classes.
         *
         * @since 4.14.9
         *
         * @return array The CSS classes.
         */
        public function css_classes()
        {
        }
        /**
         * The hints data, publicly accessible.
         *
         * @since 4.14.9.
         *
         * @param array $data An array with the hints data.
         * @return array
         */
        public function hints_data(array $data = [])
        {
        }
    }
    /**
     * Class
     *
     * @since 4.14.9
     */
    class Main
    {
        /**
         * Get the tour steps.
         *
         * @since 4.14.9
         *
         * @return array $steps The tour data.
         */
        protected function tour_data()
        {
        }
        /**
         * Get the hints.
         *
         * @since 4.14.9
         *
         * @return array $steps The hints data.
         */
        protected function hints_data()
        {
        }
        /**
         * Localize tour data.
         *
         * @since 4.14.9
         *
         * @param string $hook The current admin page.
         */
        public function localize_tour($hook)
        {
        }
        /**
         * Localize hints data.
         *
         * @since 4.14.9
         *
         * @param string $hook The current admin page.
         */
        public function localize_hints($hook)
        {
        }
        /**
         * Get the views for an onboarding element.
         *
         * @since 4.14.9
         *
         * @param string $id The onboarding ID (tour or hint).
         *
         * @return mixed The views for the given ID.
         */
        public function get_views($id = '')
        {
        }
        /**
         * Increment views for an onboarding element.
         *
         * @since 4.14.9
         *
         * @param string $id The onboarding ID (tour or hint).
         * @return int The views count for the particular `$id`.
         */
        public function increment_views($id)
        {
        }
        /**
         * Get the list of tours available for handling.
         *
         * @since  4.14.9
         *
         * @return array An associative array of shortcodes in the shape `[ <slug> => <class> ]`
         */
        public function get_registered_tours()
        {
        }
        /**
         * Get the list of hints available for handling.
         *
         * @since  4.14.9
         *
         * @return array An associative array of hints in the shape `[ <id> => <class> ]`
         */
        public function get_registered_hints()
        {
        }
    }
    /**
     * Class Tour Abstract.
     *
     * @since 4.14.9
     */
    abstract class Tour_Abstract
    {
        /**
         * The tour ID.
         *
         * @since 4.14.9
         *
         * @var string
         */
        public $tour_id;
        /**
         * Times to display the tour.
         *
         * @since 4.14.9
         *
         * @var int
         */
        public $times_to_display;
        /**
         * Return if it's on page where it should be displayed.
         *
         * @since 4.14.9
         *
         * @return bool True if it is on page.
         */
        public function is_on_page()
        {
        }
        /**
         * Should the tour display.
         *
         * @since 4.14.9
         *
         * @return boolean True if it should display.
         */
        public function should_display()
        {
        }
        /**
         * Return the tour steps.
         *
         * @since 4.14.9
         *
         * @return array The tour steps.
         */
        abstract function steps();
        /**
         * Return the CSS classes.
         *
         * @since 4.14.9
         *
         * @return array The CSS classes.
         */
        public function css_classes()
        {
        }
        /**
         * The tour data, publicly accessible.
         *
         * @since 4.14.9.
         *
         * @param array $data An array with the tour data.
         * @return array
         */
        public function tour_data(array $data = [])
        {
        }
    }
}
namespace {
    /**
     * A custom plugin update checker.
     *
     * @since  1.7
     */
    class Tribe__PUE__Checker
    {
        /**
         * The plugin slug (without the .php extension)
         *
         * @var string
         */
        protected $plugin_slug;
        /**
         * How often to check for updates (in hours).
         *
         * @var int
         */
        public $check_period = 12;
        /**
         * Where to store the update info.
         *
         * @var string
         */
        public $pue_option_name = '';
        /**
         * Where to store the temporary status info.
         *
         * @todo remove transient in a major feature release where we release all plugins.
         *
         * @since 4.14.14
         *
         * @var string
         */
        public $pue_key_status_transient_name;
        /**
         * Where to store the temporary status info.
         *
         * @since 4.14.9
         *
         * @var string
         */
        public $pue_key_status_option_name;
        /**
         * used to hold the install_key if set (included here for addons that will extend PUE to use install key checks)
         *
         * @var bool
         */
        public $install_key = \false;
        /**
         * For setting the dismiss upgrade option (per plugin).
         *
         * @var
         */
        public $dismiss_upgrade;
        /**
         * We'll customize this later so each plugin can have it's own install key!
         *
         * @var string
         */
        public $pue_install_key;
        /**
         * Storing any `json_error` data that get's returned so we can display an admin notice.
         * For backwards compatibility this will be kept in the code for 2 versions
         *
         * @var array|null
         *
         * @deprecated
         * @todo  remove on 4.5
         */
        public $json_error;
        /**
         * Storing any `plugin_info` data that get's returned so we can display an admin notice.
         *
         * @var Tribe__PUE__Plugin_Info|array|null
         */
        public $plugin_info;
        /**
         * Storing the `plugin_notice` message.
         *
         * @var string
         */
        public $plugin_notice;
        /**
         * Class constructor.
         *
         * @param string $pue_update_url Deprecated. The URL of the plugin's metadata file.
         * @param string $slug           The plugin's 'slug'.
         * @param array  $options {
         *        Contains any options that need to be set in the class initialization for construct.
         *
         *        @type integer $check_period     How often to check for updates (in hours). Defaults to checking every
         *                                        12 hours. Set to 0 to disable automatic update checks.
         *        @type string  $pue_option_name  Where to store book-keeping info about update checks. Defaults to
         *                                        'external_updates-$slug'.
         *        @type string  $apikey           Used to authorize download updates from developer server
         *        @type string  $context          Defaults to 'component' which is expected for plugins (or themes).
         *                                        If set to 'service' it will not hook into WP update checks.
         *        @type string  $plugin_name      The plugin name, defaults to the name in the plugin file itself.
         * }
         * @param string $plugin_file    fully qualified path to the main plugin file.
         */
        public function __construct($pue_update_url, $slug = '', $options = [], $plugin_file = '')
        {
        }
        /**
         * Gets whether the license key is valid or not.
         *
         * @since 4.14.9
         */
        public function is_key_valid()
        {
        }
        /**
         * Gets whether or not the PUE key validation check is expired.
         *
         * @since 4.14.9
         */
        public function is_key_validation_expired()
        {
        }
        /**
         * Set the PUE key status property names.
         *
         * @since 4.14.9
         */
        public function set_key_status_name()
        {
        }
        /**
         * Creates a hash for the transient name that holds the current key status.
         *
         * @todo remove transient in a major feature release where we release all plugins.
         *
         * @since 4.14.14
         */
        public function set_key_status_transient_name()
        {
        }
        /**
         * Sets the key status based on the key validation check results.
         *
         * @since 4.14.9
         *
         * @param int $valid 0 for invalid, 1 or 2 for valid.
         */
        public function set_key_status($valid)
        {
        }
        /**
         * Sets the key status transient based on the key validation check results.
         *
         * @since 4.14.9
         *
         * @param int $valid 0 for invalid, 1 or 2 for valid.
         */
        public function set_key_status_transient($valid)
        {
        }
        /**
         * Install the hooks required to run periodic update checks and inject update info
         * into WP data structures.
         * Also other hooks related to the automatic updates (such as checking agains API and what not (@from Darren)
         */
        public function hooks()
        {
        }
        /********************** Getter / Setter Functions **********************/
        /**
         * Get the slug
         *
         * @return string
         */
        public function get_slug()
        {
        }
        /**
         * Get the PUE update API endpoint url
         *
         * @return string
         */
        public function get_pue_update_url()
        {
        }
        /**
         * Get the plugin file path
         *
         * @return string
         */
        public function get_plugin_file()
        {
        }
        /**
         * Get the plugin name
         *
         * @return string
         */
        public function get_plugin_name()
        {
        }
        /**
         * Get the download_query args
         *
         * @return array
         */
        public function get_download_query()
        {
        }
        /**
         * Get the validate_query args
         *
         * @return array
         */
        public function get_validate_query()
        {
        }
        /**
         * Get current domain
         *
         * @return string
         */
        public function get_domain()
        {
        }
        /********************** General Functions **********************/
        /**
         * Compile  a list of addons
         *
         * @param array $addons list of addons
         *
         * @return array list of addons
         */
        public function build_addon_list($addons = [])
        {
        }
        /**
         * Inserts license key fields on license key page
         *
         * @param array $fields List of fields
         *
         * @return array Modified list of fields.
         */
        public function do_license_key_fields($fields)
        {
        }
        /**
         * Inserts the javascript that makes the ajax checking
         * work on the license key page
         *
         */
        public function do_license_key_javascript()
        {
        }
        /**
         * Filter the success message on license key page
         *
         * @param string $message
         * @param string $tab
         *
         * @return string
         */
        public function do_license_key_success_message($message, $tab)
        {
        }
        /**
         * Build stats for endpoints
         *
         * @return array
         */
        public function build_stats()
        {
        }
        /**
         * Build full stats for endpoints
         *
         * @param array $stats Initial stats
         *
         * @return array
         */
        public function build_full_stats($stats)
        {
        }
        /**
         * Build and get the stats
         *
         * @return array
         */
        public function get_stats()
        {
        }
        /**
         * Get current license key, optionally of a specific type.
         *
         * @param string $type        The type of key to get (any, network, local, default)
         * @param string $return_type The type of data to return (key, origin)
         *
         * @return string
         */
        public function get_key($type = 'any', $return_type = 'key')
        {
        }
        /**
         * Update license key for specific type of license.
         *
         * @param string $license_key The new license key value
         * @param string $type        The type of key to update (network or local)
         */
        public function update_key($license_key, $type = 'local')
        {
        }
        /**
         * Checks for the license key status with MT servers.
         *
         * @param string $key
         * @param bool   $network Whether the key to check for is a network one or not.
         *
         * @return array An associative array containing the license status response.
         */
        public function validate_key($key, $network = \false)
        {
        }
        public function get_license_expired_message()
        {
        }
        /**
         * Echo JSON results for key validation
         */
        public function ajax_validate_key()
        {
        }
        /**
         * Whether the plugin is network activated and licensed or not.
         *
         * @return bool
         */
        public function is_network_licensed()
        {
        }
        /**
         * Returns tet name of the option that stores the license key.
         *
         * @return string
         */
        public function get_license_option_key()
        {
        }
        /**
         * Displays a PUE message on the page if it is relevant
         *
         * @param string $page
         */
        public function maybe_display_json_error_on_plugins_page($page)
        {
        }
        public function add_notice_to_plugin_notices($notices)
        {
        }
        /**
         * Returns plugin/license key data based on the provided query arguments.
         *
         * Calling this method will also take care of setting up admin notices for any
         * keys that are invalid or have expired, etc.
         *
         * @see Tribe__PUE__Checker::request_info()
         *
         * @param $query_args
         *
         * @return Tribe__PUE__Plugin_Info|null
         */
        public function license_key_status($query_args)
        {
        }
        /**
         * Sets up and manages those license key notifications which don't depend on communicating with a remote
         * PUE server, etc.
         */
        public function general_notifications()
        {
        }
        /**
         * Retrieve plugin info from the configured API endpoint.
         *
         * In general, this method should not be called directly and it is preferable to call
         * the license_key_status() method instead. That method returns the same result, but
         * also analyses each response to set up appropriate license key notifications in the
         * admin environment.
         *
         * @uses wp_remote_get()
         * @see Tribe__PUE__Checker::license_key_status()
         *
         * @param array $query_args Additional query arguments to append to the request. Optional.
         *
         * @return Tribe__PUE__Plugin_Info|string|null $plugin_info
         */
        public function request_info($query_args = [])
        {
        }
        /**
         * Returns the domain contained in the network's siteurl option (not the full URL).
         *
         * @return string
         */
        public function get_network_domain()
        {
        }
        /**
         * Retrieve the latest update (if any) from the configured API endpoint.
         *
         * @uses Tribe__PUE__Checker::request_info()
         *
         * @return Tribe__PUE__Utility An instance of Tribe__PUE__Utility, or NULL when no updates are available.
         */
        public function request_update()
        {
        }
        /**
         * Display a changelog when the api key is missing.
         */
        public function display_changelog()
        {
        }
        /**
         * Get the currently installed version of the plugin.
         *
         * @return string Version number.
         */
        public function get_installed_version()
        {
        }
        /**
         * Get plugin update state
         *
         * @param boolean $force_recheck
         *
         * @return object
         */
        public function get_state($force_recheck = \false)
        {
        }
        /**
         * Update plugin update state
         *
         * @param object $value
         */
        public function update_state($value)
        {
        }
        /**
         * Check for plugin updates.
         *
         * The results are stored in the DB option specified in $pue_option_name.
         *
         * @param array   $updates
         * @param boolean $force_recheck
         *
         * @return array
         */
        public function check_for_updates($updates = [], $force_recheck = \false)
        {
        }
        /**
         * Clears out the site external site option and re-checks the license key
         *
         * @param string $value
         * @param string $field_id
         * @param object $validated_field
         *
         * @return string
         */
        public function check_for_api_key_error($value, $field_id, $validated_field)
        {
        }
        /**
         * Intercept plugins_api() calls that request information about our plugin and
         * use the configured API endpoint to satisfy them.
         *
         * @see plugins_api()
         *
         * @param mixed        $result
         * @param string       $action
         * @param array|object $args
         *
         * @return mixed
         */
        public function inject_info($result, $action = \null, $args = \null)
        {
        }
        /**
         * Register a callback for filtering query arguments.
         *
         * The callback function should take one argument - an associative array of query arguments.
         * It should return a modified array of query arguments.
         *
         * @uses add_filter() This method is a convenience wrapper for add_filter().
         *
         * @param callback $callback
         *
         */
        public function add_query_arg_filter($callback)
        {
        }
        /**
         * Register a callback for filtering arguments passed to wp_remote_get().
         *
         * The callback function should take one argument - an associative array of arguments -
         * and return a modified array or arguments. See the WP documentation on wp_remote_get()
         * for details on what arguments are available and how they work.
         *
         * @uses add_filter() This method is a convenience wrapper for add_filter().
         *
         * @param callback $callback
         *
         */
        public function add_http_request_arg_filter($callback)
        {
        }
        /**
         * Register a callback for filtering the plugin info retrieved from the external API.
         *
         * The callback function should take two arguments. If the plugin info was retrieved
         * successfully, the first argument passed will be an instance of Tribe__PUE__Plugin_Info. Otherwise,
         * it will be NULL. The second argument will be the corresponding return value of
         * wp_remote_get (see WP docs for details).
         *
         * The callback function should return a new or modified instance of Tribe__PUE__Plugin_Info or NULL.
         *
         * @uses add_filter() This method is a convenience wrapper for add_filter().
         *
         * @param callback $callback
         *
         */
        public function add_result_filter($callback)
        {
        }
        /**
         * Insert an array after a specified key within another array.
         *
         * @param $key
         * @param $source_array
         * @param $insert_array
         *
         * @return array
         *
         */
        public static function array_insert_after_key($key, $source_array, $insert_array)
        {
        }
        /**
         * Add this plugin key to the list of keys
         *
         * @param array $keys
         *
         * @return array $keys
         *
         */
        public function return_install_key($keys = [])
        {
        }
        /**
         * Prevent the default inline update-available messages from appearing, as we
         * have implemented our own.
         *
         * @see resources/js/pue-notices.js
         */
        public function remove_default_inline_update_msg()
        {
        }
        /**
         * Returns the domain of the single site installation
         *
         * Will try to read it from the $_SERVER['SERVER_NAME'] variable
         * and fall back on the one contained in the siteurl option.
         *
         * @return string
         */
        protected function get_site_domain()
        {
        }
        /**
         * Check whether the current plugin is active for the network or not.
         *
         * @return boolean Whether the plugin is network activated
         */
        protected function is_plugin_active_for_network()
        {
        }
        /**
         * Returns the localized string for a plugin or component license state.
         *
         * @return string The localized state string.
         */
        protected function get_network_license_state_string()
        {
        }
        /**
         * Whether the user should be shown the fully editable subsite license field or not.
         *
         * This check will happen in the context of the plugin administration area; checks on the user
         * capability to edit the plugin settings have been made before.
         *
         * @return bool
         */
        public function should_show_subsite_editable_license()
        {
        }
        /**
         * Whether the user should be shown the override control to override the network license key or not.
         *
         * This check will happen in the context of the plugin administration area; checks on the user
         * capability to edit the plugin settings have been made before.
         *
         * @return bool
         */
        public function should_show_overrideable_license()
        {
        }
        /**
         * Whether the user should be shown the fully editable network license field or not.
         *
         * This check will happen in the context of the network plugin administration area; checks on the user
         * capability to edit the network plugin settings have been made before.
         *
         * @return bool
         */
        public function should_show_network_editable_license()
        {
        }
        /**
         * Determines if the value on the DB is the correct format.
         *
         * @since 4.15.0
         *
         * @return bool
         */
        public function is_valid_key_format()
        {
        }
    }
    /**
     * Facilitates storage and display of license key warning notices.
     *
     * @internal
     */
    class Tribe__PUE__Notices
    {
        const INVALID_KEY = 'invalid_key';
        const UPGRADE_KEY = 'upgrade_key';
        const EXPIRED_KEY = 'expired_key';
        const STORE_KEY = 'tribe_pue_key_notices';
        protected $registered = [];
        protected $saved_notices = [];
        protected $notices = [];
        protected $plugin_names = ['pue_install_key_event_tickets_plus' => 'Event Tickets Plus', 'pue_install_key_events_community' => 'The Events Calendar: Community Events', 'pue_install_key_events_community_tickets' => 'The Events Calendar: Community Events Tickets', 'pue_install_key_image_widget_plus' => 'Image Widget Plus', 'pue_install_key_tribe_eventbrite' => 'The Events Calendar: Eventbrite Tickets', 'pue_install_key_tribe_filterbar' => 'The Events Calendar: Filter Bar', 'pue_install_key_event_aggregator' => 'Event Aggregator', 'pue_install_key_events_calendar_pro' => 'The Events Calendar PRO'];
        /**
         * Sets up license key related admin notices.
         */
        public function __construct()
        {
        }
        /**
         * Registers a plugin name that should be used in license key notifications.
         *
         * If, on a given request, the name is not registered then the plugin name will not
         * feature in any notifications. The benefit is that if a plugin is suddenly removed,
         * it's name can be automatically dropped from any pre-registered persistent
         * notifications.
         *
         * @param string $plugin_name
         */
        public function register_name($plugin_name)
        {
        }
        /**
         * Restores plugins added on previous requests to the relevant notification
         * groups.
         */
        protected function populate()
        {
        }
        /**
         * Saves any license key notices already added.
         */
        public function save_notices()
        {
        }
        /**
         * Undismisses license key notifications where appropriate.
         *
         * The idea is that if an invalid key is detected for one or more plugins, we show a notification
         * until a user dismisses it. That user will not then see the notification again unless or until
         * an additional plugin name is added to the invalid key list.
         *
         * Example:
         *
         *     - Notification listing "Eventbrite" and "Pro" keys as invalid shows
         *     - User X dismisses the notification
         *     - The "Pro" license is fixed/corrected - notification remains in a "dismissed" status for User X
         *     - "Filter Bar" is added to the list of invalid keys
         *     - The invalid key notification is undismissed, to make all users (including User X) aware of
         *       the problem re Filter Bar
         */
        public function maybe_undismiss_notices()
        {
        }
        /**
         * Used to include a plugin in a notification.
         *
         * For example, this could be used to add "My Plugin" to the expired license key
         * notification by passing Tribe__PUE__Notices::EXPIRED_KEY as the second param.
         *
         * Plugins can only be added to one notification group at a time, so if a plugin
         * was already added to the MISSING_KEY group and is subsequently added to the
         * INVALID_KEY group, the previous entry (under MISSING_KEY) will be cleared.
         *
         * @param string $notice_type
         * @param string $plugin_name
         */
        public function add_notice($notice_type, $plugin_name)
        {
        }
        /**
         * Returns whether or not a given plugin name has a specific notice
         *
         * @param string $plugin_name
         * @param string|null $notice_type
         *
         * @return boolean
         */
        public function has_notice($plugin_name, $notice_type = \null)
        {
        }
        /**
         * Removes any notifications for the specified plugin.
         *
         * Useful when a valid license key is detected for a plugin, where previously
         * it might have been included under a warning notification.
         *
         * If the optional second param is set to true then this change will not
         * immediately be committed to storage (useful if we know this will happen in
         * any case later on in the same request).
         *
         * @param string $plugin_name
         * @param bool $defer_saving_change = false
         */
        public function clear_notices($plugin_name, $defer_saving_change = \false)
        {
        }
        /**
         * Tests to see if there are any extant notifications and renders them if so.
         *
         * This must run prior to Tribe__Admin__Notices::hook() (which currently runs during
         * "current_screen" priority 20).
         */
        public function setup_notices()
        {
        }
        /**
         * Select all products with empty license keys
         * and format their names
         *
         * This information will be used to remove products
         * with no license keys from $this->notices['invalid_key']
         *
         * @since 4.8
         *
         * @return array
         */
        public function select_empty_keys()
        {
        }
        /**
         * Generate a notice listing any plugins for which license keys have been entered but
         * are invalid (in the sense of not matching PUE server records or having been revoked
         * rather than having expired which is handled separately).
         *
         * In the context of the plugin admin screen, will not render if the key-has-expired
         * notice is also scheduled to display.
         */
        public function render_invalid_key()
        {
        }
        /**
         * Generate a notice listing any plugins for which license keys have expired.
         *
         * This notice should only appear at the top of the plugin admin screen and "trumps"
         * the missing/invalid key notice on that screen only.
         */
        public function render_expired_key()
        {
        }
        /**
         * Generate a notice listing any plugins which have valid license keys, but those keys
         * have met or exceeded the permitted number of installations they can be applied to.
         */
        public function render_upgrade_key()
        {
        }
        /**
         * Renders the notice itself (the provided HTML will be wrapped in a suitable container div).
         *
         * @param string $slug
         * @param string $inner_html
         */
        protected function render_notice($slug, $inner_html)
        {
        }
        /**
         * @return string
         */
        protected function find_your_key_text()
        {
        }
        /**
         * Transforms a list of plugins into human readable string.
         *
         * Examples of output:
         *
         *     # One name
         *     "Ticket Pro"
         *
         *     # Two names
         *     "Ticket Pro and Calendar Legend"
         *
         *     # Three names
         *     "Ticket Pro, Calendar Legend and Date Stars"
         *
         *
         * @since  4.9.12
         *
         * @param  array|string  $plugins  Array of plugin classes.
         *
         * @return string|false
         */
        public function get_formatted_plugin_names_from_classes($plugins)
        {
        }
        /**
         * Transforms the array referenced by group into a human readable,
         * comma delimited list.
         *
         * Examples of output:
         *
         *     # One name
         *     "Ticket Pro"
         *
         *     # Two names
         *     "Ticket Pro and Calendar Legend"
         *
         *     # Three names
         *     "Ticket Pro, Calendar Legend and Date Stars"
         *
         *     # Fallback
         *     "Unknown Plugin(s)"
         *
         * @param  string  $group
         *
         * @return string
         */
        protected function get_formatted_plugin_names($group)
        {
        }
    }
    /**
     * Class Tribe__PUE__Package_Handler
     *
     * Middleman for plugin updates.
     */
    class Tribe__PUE__Package_Handler
    {
        /**
         * @var static
         */
        protected static $instance;
        /**
         * @var WP_Upgrader
         */
        protected $upgrader;
        /**
         * Tribe__PUE__Package_Handler constructor.
         *
         * @param WP_Filesystem_Base|null $wp_filesystem
         */
        public function __construct(\WP_Filesystem_Base $wp_filesystem = \null)
        {
        }
        /**
         * @return Tribe__PUE__Package_Handler
         */
        public static function instance()
        {
        }
        /**
         * Filters the package download step to store the downloaded file with a shorter file name.
         *
         * @param bool        $reply    Whether to bail without returning the package.
         *                              Default false.
         * @param string      $package  The package file name or URL.
         * @param WP_Upgrader $upgrader The WP_Upgrader instance.
         */
        public function filter_upgrader_pre_download($reply, $package, \WP_Upgrader $upgrader)
        {
        }
        /**
         * Whether the current package is an MT plugin package or not.
         *
         * @param string $package The package file name or URL.
         *
         * @return bool
         */
        protected function is_mt_package($package)
        {
        }
        /**
         * A mimic of the `WP_Upgrader::download_package` method that adds a step to store the temp file with a shorter
         * file name.
         *
         * @see WP_Upgrader::download_package()
         *
         * @param string $package The URI of the package. If this is the full path to an
         *                        existing local file, it will be returned untouched.
         *
         * @return string|WP_Error The full path to the downloaded package file, or a WP_Error object.
         */
        protected function download($package)
        {
        }
        /**
         * Returns the absolute path to a shorter filename version of the original download temp file.
         *
         * The path will point to the same temp dir (WP handled) but shortening the filename to a
         * 6 chars hash to cope with OSes limiting the max number of chars in a file path.
         * The original filename would be a sanitized version of the URL including query args.
         *
         * @param string $download_file The absolute path to the original download file.
         *
         * @return string The absolute path to a shorter name version of the downloaded file.
         */
        protected function get_short_filename($download_file)
        {
        }
    }
    /**
     * A container class for holding and transforming various plugin metadata.
     * @version 1.7
     * @access public
     */
    class Tribe__PUE__Plugin_Info
    {
        // Most fields map directly to the contents of the plugin's info.json file.
        public $name;
        public $plugin;
        public $slug;
        public $version;
        public $homepage;
        public $sections;
        public $download_url;
        public $home_url;
        public $origin_url;
        public $zip_url;
        public $icon_svg_url;
        public $file_prefix;
        public $author;
        public $author_homepage;
        public $requires;
        public $tested;
        public $upgrade_notice;
        public $rating;
        public $num_ratings;
        public $downloaded;
        public $release_date;
        public $last_updated;
        public $expiration;
        public $daily_limit;
        public $custom_update;
        public $api_expired;
        public $api_invalid;
        public $api_upgrade;
        public $api_message;
        public $api_inline_invalid_message;
        public $api_invalid_message;
        public $license_error;
        public $new_install_key;
        public $replacement_key;
        public $id = 0;
        // The native WP.org API returns numeric plugin IDs, but they're not used for anything.
        /**
         * Create a new instance of Tribe__PUE__Plugin_Info from JSON-encoded plugin info
         * returned by an external update API.
         *
         * @param string $json Valid JSON string representing plugin info.
         *
         *@return Tribe__PUE__Plugin_Info New instance of Tribe__PUE__Plugin_Info, or NULL on error.
         */
        public static function from_json($json)
        {
        }
        /**
         * Transform plugin info into the format used by the native WordPress.org API
         *
         * @return object
         */
        public function to_wp_format()
        {
        }
    }
}
namespace Tribe\PUE {
    /**
     * Class Update_Prevention engine for a plugin with invalid/empty keys with
     * unmet dependencies on Core or Event Tickets.
     *
     * @package Tribe\PUE;
     */
    class Update_Prevention
    {
        /**
         * Fetches the dependencies based on a regular expression search of the Plugin_Register.php
         * file that we use to prevent problems with mismatched version on our plugins.
         *
         * @since  4.9.12
         *
         * @param  string $content Contents of the file in question.
         *
         * @return array  Named array with [ class_name => version ] or empty if it didn't find it.
         */
        public function get_dependencies($content)
        {
        }
        /**
         * Checks for the list of constants associate with plugin to make sure we are dealing
         * with a plugin owned by The Events Calendar.
         *
         * @since  4.9.12
         *
         * @param  string $plugin Plugin file partial path, folder and main php file.
         *
         * @return bool
         */
        public function is_tribe_plugin($plugin)
        {
        }
        /**
         * Filters the source file location for the upgrade package for the PUE Update_Prevention engine.
         *
         * @since  4.9.12
         *
         * @param string      $source        File source location.
         * @param string      $remote_source Remote file source location.
         * @param WP_Upgrader $upgrader      WP_Upgrader instance.
         * @param array       $extra         Extra arguments passed to hooked filters.
         */
        public function filter_upgrader_source_selection($source, $remote_source, $upgrader, $extras)
        {
        }
    }
}
namespace {
    /**
     * A simple container class for holding information about an available update.
     *
     * @version 1.7
     * @access  public
     */
    class Tribe__PUE__Utility
    {
        public $id = 0;
        public $plugin;
        public $slug;
        public $version;
        public $homepage;
        public $download_url;
        public $sections = [];
        public $upgrade_notice;
        public $custom_update;
        public $license_error;
        public $auth_url;
        /**
         * Create a new instance of Tribe__PUE__Utility from its JSON-encoded representation.
         *
         * @param string $json
         *
         * @return Tribe__PUE__Utility
         */
        public static function from_json($json)
        {
        }
        /**
         * Create a new instance of Tribe__PUE__Utility based on an instance of Tribe__PUE__Plugin_Info.
         * Basically, this just copies a subset of fields from one object to another.
         *
         * @param Tribe__PUE__Plugin_Info $info
         *
         * @return Tribe__PUE__Utility
         */
        public static function from_plugin_info($info)
        {
        }
        /**
         * Transform the update into the format used by WordPress native plugin API.
         *
         * @return object
         */
        public function to_wp_format()
        {
        }
    }
    // Do not load directly.
    /**
     * Filters meta links in the WP Admin > Plugins list
     */
    class Tribe__Plugin_Meta_Links
    {
        /**
         * Returns the singleton instance of this class.
         *
         * @return Tribe__Plugin_Meta_Links instance.
         */
        public static function instance()
        {
        }
        /**
         * Adds an <a> link to the meta list
         *
         * @param string $plugin     Path to plugin file.
         * @param string $text       Inner text for HTML element.
         * @param string $href       URL for the link.
         * @param array  $attributes Key => value attributes for element.
         */
        public function add_link($plugin, $title, $href, $attributes = [])
        {
        }
        /**
         * Adds or removes the specified HTML link
         *
         * @param string $plugin Path to plugin file.
         * @param string $html   Full HTML for this link.
         * @param bool   $remove Whether to add this HTML/link or match and remove it.
         */
        public function set($plugin, $html, $remove = \false)
        {
        }
        /**
         * Filters meta links on the plugins list page
         *
         * @param array  $links    The current plugin's links.
         * @param string $basename The plugin currently being filtered.
         *
         * @return array Filtered action links array.
         */
        public function filter_meta_links($links, $basename)
        {
        }
        /**
         * Prevent cloning the singleton with 'clone' operator
         *
         * @return void
         */
        public final function __clone()
        {
        }
        /**
         * Prevent unserializing the singleton instance
         *
         * @return void
         */
        public final function __wakeup()
        {
        }
    }
    /**
     * A list of Tribe's major plugins. Useful when encouraging users to download one of these.
     */
    class Tribe__Plugins
    {
        /**
         * Searches the plugin list for key/value pair and return the full details for that plugin
         *
         * @param string $search_key The array key this value will appear in
         * @param string $search_val The value itself
         *
         * @return array|null
         */
        public function get_plugin_by_key($search_key, $search_val)
        {
        }
        /**
         * Retrieves plugins details by plugin name
         *
         * @param string $name Common name for the plugin, not necessarily the lengthy name in the WP Admin Plugins list
         *
         * @return array|null
         */
        public function get_plugin_by_name($name)
        {
        }
        /**
         * Retrieves plugins details by class name
         *
         * @param string $main_class Main/base class for this plugin
         *
         * @return array|null
         */
        public function get_plugin_by_class($main_class)
        {
        }
        /**
         * Retrieves the entire list
         *
         * @return array
         */
        public function get_list()
        {
        }
        /**
         * Checks if given plugin is active. Usually a The Events Calendar plugin.
         *
         * @param string $plugin_name The name of the plugin. Each plugin defines their name upon hooking on the filter.
         *
         * @since 4.12.1
         *
         * @return bool True if plugin is active. False if plugin is not active.
         */
        public static function is_active($plugin_name)
        {
        }
        /**
         * Retrieves a list of active plugins.
         *
         * @since 5.1.3
         *
         * @return array List of active plugins.
         */
        public function get_active_plugins()
        {
        }
    }
    class Tribe__Plugins_API
    {
        /**
         * Static Singleton Factory Method
         *
         * @since 4.5.3
         *
         * @return Tribe__Plugins_API
         */
        public static function instance()
        {
        }
        /**
         * Get product info
         *
         * @since 4.5.3
         *
         * @return array
         */
        public function get_products()
        {
        }
    }
    /**
     * Used for maintaining post-level histories/audit trails.
     *
     * @internal
     * @since 4.3
     */
    class Tribe__Post_History
    {
        /**
         * Used to identify history/audit trail post meta records.
         */
        const HISTORY_KEY = '_tribe_post_history';
        /**
         * The post this history object is concerned with.
         *
         * @var int
         */
        protected $post_id;
        /**
         * Returns a Tribe__Post_History object for the specified post.
         *
         * @param int $post_id
         *
         * @return Tribe__Post_History
         */
        public static function load($post_id)
        {
        }
        /**
         * Returns a Tribe__Post_History object for the specified post.
         *
         * @param int $post_id
         *
         * @return Tribe__Post_History
         */
        public function __construct($post_id)
        {
        }
        /**
         * Records a new history entry for the current post.
         *
         * @param string $message
         * @param array $data
         */
        public function add_entry($message, array $data = [])
        {
        }
        /**
         * Indicates if any history exists for the current post.
         *
         * @return bool
         */
        public function has_entries()
        {
        }
        /**
         * Returns all historical records for the current post as an array
         * of objects, each object taking the form:
         *
         * {
         *     "datetime": "yyyy-mm-dd hh:ii:ss",
         *     "message":  "...",
         *     "data":     []
         * }
         *
         * @return array
         */
        public function get_entries()
        {
        }
        /**
         * Deletes all entries for the current post that match the provided datetime
         * string and (optionally) also match the provided checksum.
         *
         * Returns the total number of deleted entries, which may be zero if none were matched;
         * can also be more than one if multiple entries were logged at the same time and no
         * checksum is provided.
         *
         * @param string $datetime
         * @param string $checksum optional value to more precisely specify the entry to be deleted
         *
         * @return int
         */
        public function delete_entry($datetime, $checksum = \null)
        {
        }
    }
    /**
     * A Class to handle Transients for posts, useful for caching complex structures
     * It uses the same logic as WordPress Transient, but instead of options it will
     * use the Post Meta as the table
     *
     * @since   4.1
     */
    class Tribe__Post_Transient
    {
        /**
         * Get (and instantiate, if necessary) the instance of the class
         *
         * @since  4.1
         * @static
         * @return self
         *
         */
        public static function instance()
        {
        }
        /**
         * Fetches the Transient Data
         *
         * @since  4.1
         *
         * @param int    $post_id   The Post ID, can also be a WP_Post
         * @param string $transient Post Meta to Fetch
         *
         * @return mixed            Value stored on the Post Transient.
         */
        public function get($post_id, $transient)
        {
        }
        /**
         * Delete a post meta transient.
         *
         * @since  4.1
         *
         * @param int    $post_id   The Post ID, can also be a WP_Post.
         * @param string $transient Post Meta to Delete.
         * @param string $value     Only delete if the value Matches.
         *
         * @return boolean          If we were able to delete the transient.
         */
        public function delete($post_id, $transient, $value = \null)
        {
        }
        /**
         * Sets a new value for the Transient.
         *
         * @since  4.1
         *
         * @param int    $post_id    The Post ID, can also be a WP_Post.
         * @param string $transient  Post Meta to set.
         * @param string $value      Only delete if the value Matches.
         * @param int    $expiration How long this transient will be valid, in seconds.
         *
         * @return int|false         Meta ID on success, false on failure.
         */
        public function set($post_id, $transient, $value, $expiration = 0)
        {
        }
    }
    /**
     * Class Tribe__Process__Handler
     *
     * The base class for all The Events Calendar async process handlers.
     *
     * @since 4.7.12
     * @since 4.9.5 Removed dependency on `WP_Async_Request` class.
     *
     * @see   Tribe__Service_Providers__Processes for more insight about this class utility.
     */
    abstract class Tribe__Process__Handler
    {
        /**
         * The default handler action name.
         *
         * @var string
         */
        protected $action = 'async_request';
        /**
         * The handler identifier.
         *
         * @var string
         */
        protected $identifier;
        /**
         * An array of data for the process.
         *
         * @var array
         */
        protected $data = [];
        /**
         * This handler cron identifier.
         *
         * @var string
         */
        protected $healthcheck_cron_hook_id;
        /**
         * @var string The common identified prefix to all our async process handlers.
         */
        protected $prefix = 'tribe_process';
        /**
         * An instance of the object abstracting the feature detection functionality.
         *
         * @var Tribe__Feature_Detection
         */
        protected $feature_detection;
        /**
         * An array of query arguments that should be used in place of the default ones.
         * Extending classes can override/set this to replace the default entirely.
         *
         * @var array
         */
        protected $query_args;
        /**
         * The absolute URL that should be used to POST requests.
         * Extending classes can override/set this to replace the default entirely.
         *
         * @var string
         */
        protected $query_url;
        /**
         * An array of arguments that should be used as body of the POST request.
         * Extending classes can override/set this to replace the default entirely.
         *
         * @var array
         */
        protected $post_args;
        /**
         * Tribe__Process__Handler constructor.
         *
         * @since 4.7.12
         */
        public function __construct()
        {
        }
        /**
         * Returns the async process action name.
         *
         * Extending classes must override this method to return their unique action slug.
         *
         * @since 4.7.12
         *
         * @return string
         *
         * @throws RuntimeException If the extending class does not override this method.
         */
        public static function action()
        {
        }
        /**
         * Handles the process request if valid and if authorized.
         *
         * @since 4.7.23
         * @since 4.9.5 Pulled the `maybe_handle` implementation of the `WP_Async_Request` class.
         *
         * @param array|null $data_source A source of data if not provided in the request; used for
         *                                cron-based fallback.
         */
        public function maybe_handle($data_source = \null)
        {
        }
        /**
         * Overrides the base `dispatch` method to allow for constants and/or environment vars to run
         * async requests in sync mode.
         *
         * @since 4.7.12
         * @since 4.9.5 Pulled `dispatch` method logic from the `WP_Async_Request` class.
         *
         * @return mixed
         */
        public function dispatch()
        {
        }
        /**
         * Handles the process immediately, not in an async manner.
         *
         * @since 4.7.12
         *
         * @param array|null $data_source If not provided the method will read the handler data from the
         *                                request array.
         *
         * @return mixed|null The result of the synchronous handling.
         */
        public abstract function sync_handle(array $data_source = \null);
        /**
         * Returns an array of arguments that will be used to send the POST request.
         *
         * @since 4.9.5 Pulled from the `WP_Async_Request` class.
         *
         * @return array An array of arguments for the POST request.
         */
        protected function get_query_args()
        {
        }
        /**
         * Returns the URL that wil be used to post the request.
         *
         * @since 4.9.5 Pulled from the `WP_Async_Request` class.
         *
         * @return string The URL that will be used to POST the dispatch request; defaults
         *                to the `admin-ajax.php` one.
         */
        protected function get_query_url()
        {
        }
        /**
         * Returns the arguments that will be used to send the POST request.
         *
         * @since 4.9.5 Pulled from the `WP_Async_Request` class.
         *
         * @return array An array of arguments that will be used to send the POST request.
         */
        protected function get_post_args()
        {
        }
        /**
         * Returns this handler cron hook identifier.
         *
         * The handler cron hook identifier is the one that the handler
         * will use to schedule a single cron event when the `dispatch`
         * method is called and the environment does not support async
         * processing.
         *
         * @since 4.7.23
         *
         * @return string The complete cron hook name (identifier) for
         *                this handler.
         */
        public function get_healthcheck_cron_hook_id()
        {
        }
        /**
         * Sets the that will be used during the request.
         *
         * @since 4.9.5 Pulled from the `WP_Async_Request` class.
         *
         * @param array $data Data.
         *
         * @return $this This handler instance.
         */
        public function data($data)
        {
        }
        /**
         * Handles the request and performs an action.
         *
         * @since 4.9.5 Pulled from the `WP_Async_Request` class.
         *
         * @param array|null $data_source A source of data if not provided in the request; used for
         *                                cron-based fallback.
         *
         * @return null|array Depending on the context of the call, cron or async, either the result
         *                    of the handling (cron) or nothing (async).
         */
        protected abstract function handle(array $data_source = \null);
    }
    /**
     * Class Tribe__Process__Post_Thumbnail_Setter
     *
     * Handles upload and setting of a post thumbnail in an async process.
     * Example usage:
     *
     *      $post_thumbnail_setter = new Tribe__Process__Post_Thumbnail_Setter();
     *      $post_thumbnail_setter->set_post_id( $post_id );
     *      $post_thumbnail_setter->set_post_thumbnail( 'http://foo.com/random-image.jpg' );
     *      $post_thumbnail_setter->dispatch();
     *
     * @since 4.7.12
     */
    class Tribe__Process__Post_Thumbnail_Setter extends \Tribe__Process__Handler
    {
        /**
         * @var int The ID of the post the post thumbnail should be assigned to.
         */
        protected $post_id;
        /**
         * @var int|string Either the ID of an attachment that should be set as the post thumbnail
         *                 or the full URL, or file path, to it.
         */
        protected $post_thumbnail;
        /**
         * {@inheritdoc}
         */
        public static function action()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function dispatch()
        {
        }
        /**
         * Sets the ID of the post the post thumbnail (aka "featured image") should be attached
         * and set for.
         *
         * @since 4.7.12
         *
         * @param int $post_id The target post ID.
         */
        public function set_post_id($post_id)
        {
        }
        /**
         * Sets the post thumbnail ID or source the process should set.
         *
         * @since 4.7.12
         *
         * @param int|string $post_thumbnail Either an attachment ID or the full URL, or path, to
         *                                   the post thumbnail image.
         */
        public function set_post_thumbnail($post_thumbnail)
        {
        }
        /**
         * Handles the post thumbnail setting async process.
         *
         * The post thumbnail will be uploaded, if not uploaded already, using the `tribe_upload_image` function.
         * This method is an alias of the publicly accessible `sync_handle` one.
         *
         * @since 4.7.12
         *
         * @param array|null $data_source An optional source of data.
         *
         * @see   Tribe__Process__Post_Thumbnail_Setter::sync_handle()
         *
         * @see   tribe_upload_image()
         */
        protected function handle(array $data_source = \null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function sync_handle(array $data_source = \null)
        {
        }
    }
    /**
     * Class Tribe__Process__Queue
     *
     * @since 4.7.12
     * @since 4.9.5 Removed dependency on `WP_Background_Process` class.
     *
     * The base class to process queues asynchronously.
     */
    abstract class Tribe__Process__Queue extends \Tribe__Process__Handler
    {
        /**
         * A constant to allow some "sugar" while using the processing system.
         * Returning `false` to indicate the successful processing of an item might
         * not be intuitive.
         */
        const ITEM_DONE = \false;
        /**
         * The default action name.
         *
         * @var string
         */
        protected $action = 'background_process';
        /**
         * Start time of current process.
         *
         * @var int
         */
        protected $start_time = 0;
        /**
         * The process Cron_hook_identifier.
         *
         * @var mixed
         */
        protected $healthcheck_cron_hook_id;
        /**
         * The process cron interval identifier.
         *
         * @var mixed
         */
        protected $healthcheck_cron_interval_id;
        /**
         * @var string The common identified prefix to all our async process handlers.
         */
        protected $prefix = 'tribe_queue';
        /**
         * @var string The base that should be used to build the queue id.
         */
        protected $id_base;
        /**
         * @var string The queue unique identifier
         */
        protected $id;
        /**
         * @var int How many items this instance processed.
         */
        protected $done = 0;
        /**
         * @var int
         */
        protected $original_batch_count = 0;
        /**
         * @var int The maximum size of a fragment in bytes.
         */
        protected $max_frag_size;
        /**
         * @var bool Whether the current handling is sync or not.
         */
        protected $doing_sync = \false;
        /**
         * @var bool Whether the queue `save` method was already called or not.
         */
        protected $did_save = \false;
        /**
         * @var string The batch key used by the queue.
         */
        protected $batch_key;
        /**
         * An instance of the feature detection abstraction object.
         *
         * @var Tribe__Feature_Detection
         */
        protected $feature_detection;
        /**
         * The default lock time for a queued process.
         *
         * @var int
         */
        protected $queue_lock_time = 60;
        /**
         * The amount, in seconds, to check on the queue health.
         *
         * @var int
         */
        protected $healthcheck_cron_interval = 5;
        /**
         * Tribe__Process__Queue constructor.
         *
         * @since 4.7.12
         * @since 4.9.5 Pulled method code from the `WP_Background_Process` class.
         */
        public function __construct()
        {
        }
        /**
         * Stops a queue that might be running.
         *
         * The queue process results are not rolled back (e.g. 200 posts to create, stopped
         * after 50, those 50 posts will persist).
         *
         * @since 4.7.12
         *
         * @param string $queue_id The unique identifier of the queue that should be stopped.
         *
         * @see   Tribe__Process__Queue::save() to get the queue unique id.
         *
         * @return bool Whether the queue was correctly stopped, and its information
         *              deleted, or not.
         */
        public static function stop_queue($queue_id)
        {
        }
        /**
         * Whether a queue process is stuck or not.
         *
         * A queue process that has not been doing anything for an amount
         * of time is considered "stuck".
         *
         * @since 4.7.18
         *
         * @param string $queue_id The queue process unique identifier.
         *
         * @return bool
         */
        public static function is_stuck($queue_id)
        {
        }
        /**
         * Returns a queue status and information.
         *
         * @since 4.7.12
         *
         * @param string $queue_id
         *
         * @return Tribe__Data An object containing information about the queue.
         *
         * @see   Tribe__Process__Queue::save() to get the queue unique id.
         */
        public static function get_status_of($queue_id)
        {
        }
        /**
         * Deletes all queues for a specific action.
         *
         * @since 4.7.19
         *
         * @param string $action The action (prefix) of the queues to delete.
         *
         * @return int The number of delete queues.
         */
        public static function delete_all_queues($action)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function delete($key)
        {
        }
        /**
         * Deletes a queue batch(es) and meta information.
         *
         * @since 4.7.18
         *
         * @param string $key
         */
        public static function delete_queue($key)
        {
        }
        /**
         * Upates the queue and meta data for the process.
         *
         * @since 4.7.12
         * @since 4.9.5 Pulled method from the `WP_Background_Process` class.
         *
         * @param string $key The key of the data to save.
         * @param array  $data The data to save.
         *
         * @return $this This process instance.
         */
        public function update($key, $data)
        {
        }
        /**
         * Returns the name of the transient that will store the queue meta information
         * for the specific key.
         *
         * @since 4.7.12
         *
         * @param string $key
         *
         * @return string
         */
        public function get_meta_key($key)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function save()
        {
        }
        /**
         * Generates the unique key for the queue optionally using the client provided
         * id.
         *
         * @since 4.7.12
         *
         * @param int $length The lengthy of the key to generate, longer keys will
         *                    add more entropy; default to 64.
         *
         * @return string The generated batch key.
         */
        protected function generate_key($length = 64)
        {
        }
        /**
         * Saves the queue data to the database taking max_packet_size into account.
         *
         * In some instances the serialized size of the data might be bigger than the
         * database `max_packet_size`; trying to write all the data in one query would
         * make the db "go away...".
         * Here we try to read the database `max_packet_size` setting and use that information
         * to avoid overloading the query.
         *
         * @param       string $key
         * @param array $data
         *
         * @return int The number of fragments the data was split and stored into.
         */
        protected function save_split_data($key, array $data)
        {
        }
        /**
         * Returns the max frag size in bytes.
         *
         * The bottleneck here is the database `max_packet_size` so we try to read
         * it from the database.
         *
         * @return int The max size, in bytes, of a data fragment.
         */
        protected function get_max_frag_size()
        {
        }
        /**
         * Sets the maximum size, in bytes, of the queue fragments.
         *
         * This will prevent the class from trying to read the value from the database.
         *
         * @since 4.7.12
         *
         * @param int $max_frag_size
         */
        public function set_max_frag_size($max_frag_size)
        {
        }
        /**
         * Returns the queue unique identifier.
         *
         * Mind that an id will only be available after saving a queue.
         *
         * @since 4.7.12
         *
         * @return string
         * @throws RuntimeException if trying to get the queue id before saving it.
         */
        public function get_id()
        {
        }
        /**
         * Sets the queue unique id.
         *
         * When using this method the client code takes charge of the queue id uniqueness;
         * the class will not check it.
         *
         * @since 4.7.12
         *
         * @param string $queue_id
         *
         * @throws RuntimeException If trying to set the queue id after saving it.
         */
        public function set_id($queue_id)
        {
        }
        /**
         * Overrides the base `dispatch` method to allow for constants and/or environment vars to run
         * async requests in sync mode.
         *
         * @since 4.7.12
         * @since 4.9.5 Pulled method code from the `WP_Background_Process` class.
         *
         * @return mixed
         */
        public function dispatch()
        {
        }
        /**
         * Handles the process immediately, not in an async manner.
         *
         * @since 4.7.12
         *
         * @return array An array containing the result of each item handling.
         */
        public function sync_process()
        {
        }
        /**
         * Returns the name of the option used by the queue to store its batch(es).
         *
         * Mind that this value will be set only when first saving the queue and it will not be set
         * in following queue processing.
         *
         * @since 4.7.12
         *
         * @param int $n The number of a specific batch option name to get; defaults to `0` to get the
         *               option name of the first one.
         *
         * @return string
         *
         * @throws RuntimeException If trying to get the value before saving the queue or during following
         *                          processing.
         */
        public function get_batch_key($n = 0)
        {
        }
        /**
         * Returns the queue action identifier.
         *
         * @since 4.9.5 Pulled from the `WP_Background_Process` class.
         *
         * @return string The queue action identifier.
         */
        public function get_identifier()
        {
        }
        /**
         * Returns a batch of items to process from the queue.
         *
         * @since 4.7.12
         * @since 4.9.5 Pulled method code from the `WP_Background_Process` class.
         *
         * @return stdClass The first batch of items from the queue.
         */
        protected function get_batch()
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function get_post_args()
        {
        }
        /**
         * Maybe handle the process request in async or sync mode depending on the
         * supported mode.
         *
         * @param array|null $data_source An optional data source.
         *
         * @since 4.9.5
         */
        public function maybe_handle($data_source = \null)
        {
        }
        /**
         * Push an item to the process queue.
         *
         * @since 4.9.5 Pulled from the `WP_Background_Process` class.
         *
         * @param mixed $data An item to process.
         *
         * @return $this This process instance.
         */
        public function push_to_queue($data)
        {
        }
        /**
         * Maybe handle this process request in async mode.
         *
         * @since 4.9.5
         */
        protected function maybe_handle_async()
        {
        }
        /**
         * Handle the process request in sync mode.
         *
         * @since 4.9.5
         */
        protected function maybe_handle_sync()
        {
        }
        /**
         * Checks whether the queue is empty or not.
         *
         * @since 4.9.5 Pulled from the `WP_Background_Process` class.
         *
         * @return bool Whether the queue is empty or not.
         */
        protected function is_queue_empty()
        {
        }
        /**
         * Checks whether the process is currently running or not.
         *
         * @since 4.9.5 Pulled from the `WP_Background_Process` class.
         */
        protected function is_process_running()
        {
        }
        /**
         * Locks the process so that other instances cannot spawn and run.
         *
         * Lock the process so that multiple instances can't run simultaneously.
         * Override if applicable, but the duration should be greater than that
         * defined in the `time_exceeded()` method.
         *
         * @since 4.9.5 Pulled from the `WP_Background_Process` class.
         */
        protected function lock_process()
        {
        }
        /**
         * Releases the process lock so that other instances can spawn and run.
         *
         * @since 4.9.5 Pulled from the `WP_Background_Process` class.
         *
         * @return $this This process instance.
         */
        protected function unlock_process()
        {
        }
        /**
         * Handles the process request.
         *
         * Pass each queue item to the task handler, while remaining
         * within server memory and time limit constraints.
         *
         * @since 4.9.5 Pulled from the `WP_Background_Process` class.
         *
         * @param array|null $data_source Unused and kept for compatibility with parent; the queue
         *                                data is stored and read from the database.
         */
        protected function handle(array $data_source = \null)
        {
        }
        /**
         * Checks whether the memory limit was exceeded.
         *
         * Ensures the batch process never exceeds 90%
         * of the maximum WordPress memory.
         *
         * @since 4.9.5 Pulled from the `WP_Background_Process` class.
         *
         * @return bool
         */
        protected function memory_exceeded()
        {
        }
        /**
         * Returns the memory limit for this process.
         *
         * @since 4.9.5 Pulled from the `WP_Background_Process` class.
         *
         * @return int The memory limit in bytes.
         */
        protected function get_memory_limit()
        {
        }
        /**
         * Checks whether the execution time was exceeded or not.
         *
         * Ensures the batch never exceeds a sensible time limit.
         * A timeout limit of 30s is common on shared hosting.
         *
         * @since 4.9.5 Pulled from the `WP_Background_Process` class.
         *
         * @return bool Whether the execution time was exceeded or not.
         */
        protected function time_exceeded()
        {
        }
        /**
         * Completes the processing, cleaning up after it.
         *
         * Override if applicable, but ensure that the below actions are
         * performed, or, call parent::complete().
         *
         * @since 4.9.5 Pulled from the `WP_Background_Process` class.
         */
        protected function complete()
        {
        }
        /**
         * Schedules a cron-based health-check to restart the queue if stuck.
         *
         * Filters the `cron_schedules` filter to add a check every 5 minutes.
         *
         * @since 4.9.5 Pulled from the `WP_Background_Process` class.
         *
         * @param mixed $schedules The cron schedules to check.
         *
         * @return mixed The updated cron schedules.
         */
        public function schedule_cron_healthcheck($schedules)
        {
        }
        /**
         * Handles the cron health-check.
         *
         * Restart the background process if not already running
         * and data exists in the queue.
         *
         * @since 4.9.5 Pulled from the `WP_Background_Process` class.
         */
        public function handle_cron_healthcheck()
        {
        }
        /**
         * Schedules the cron health-check event.
         *
         * @since 4.9.5 Pulled from the `WP_Background_Process` class.
         */
        protected function schedule_event()
        {
        }
        /**
         * Clears the scheduled health-check cron event.
         *
         * @since 4.9.5 Pulled from the `WP_Background_Process` class.
         */
        protected function clear_scheduled_event()
        {
        }
        /**
         * Cancels the current process.
         *
         * Stops processing queue items and clean up.
         *
         * @since 4.9.5 Pulled from the `WP_Background_Process` class.
         */
        public function cancel_process()
        {
        }
        /**
         * Executes the process task on a single item.
         *
         * Override this method to perform any actions required on each
         * queue item. Return the modified item for further processing
         * in the next pass through. Or, return false to remove the
         * item from the queue.
         *
         * @since 4.9.5 Pulled from the `WP_Background_Process` class.
         *
         * @param mixed $item Queue item to iterate over.
         *
         * @return mixed
         */
        protected abstract function task($item);
        /**
         * Concrete implementation of the base handler method.
         *
         * Just a proxy to the `sync_process` method.
         *
         * @since 4.9.5
         *
         * @param array|null $data_source If not provided the method will read the handler data from the
         *                                request array.
         *
         * @return array|mixed|null The synchronous process result.
         */
        public function sync_handle(array $data_source = \null)
        {
        }
    }
    /**
     * An async process implementation meant to test if the environment is compatible with it.
     *
     * @since 4.7.23
     */
    class Tribe__Process__Tester extends \Tribe__Process__Handler
    {
        /**
         * The name of the transient this class will set in its async task.
         *
         * @var
         */
        const TRANSIENT_NAME = 'tribe_supports_async_process';
        /**
         * Handles the process immediately, not in an async manner.
         *
         * @since 4.7.12
         *
         * @param array|null $data_source If not provided the method will read the handler data from the
         *                                request array.
         *
         * @return mixed
         */
        public function sync_handle(array $data_source = \null)
        {
        }
        /**
         * Call the dispatch method, in its vanilla form, as the base class would.
         *
         * Since the purpose of this class is to test for async process support
         * we do not want any option or env var to make this work in any other
         * way but the async one.
         *
         * @since 4.7.23
         *
         * @return mixed
         */
        public function dispatch()
        {
        }
        /**
         * An override of the method implemented by the base Tribe Handler
         * class to make sure the processing is done in async mode.
         *
         * This is the same code as the base WP_Background_Process class.
         *
         * @since 4.7.23
         *
         * @param null|array $data_source An optional data source.
         */
        public function maybe_handle($data_source = \null)
        {
        }
        /**
         * The task this class will perform is just setting a transient.
         *
         * The transient existence will be used as a canary to detect if
         * background processing is supported.
         *
         * @since 4.7.23
         *
         * @param array|null $data_source Unused.
         */
        protected function handle(array $data_source = \null)
        {
        }
        /**
         * Returns this handler action identifier.
         *
         * @since 4.7.23
         *
         * @return string This handler action identifier.
         */
        public static function action()
        {
        }
    }
    /**
     * Models a promise to do something in asynchronous mode.
     *
     * Example usage:
     *
     *      $promise = new Promise( 'wp_insert_post', $a_lot_of_posts_to_insert );
     *      $promise->save()->dispatch();
     *      $promise_id = $promise->get_id();
     *
     * The promise is really a background process in disguise and will work, for all
     * intents and purposes, like one.
     *
     * @since 4.9.5
     */
    class Tribe__Promise extends \Tribe__Process__Queue
    {
        /**
         * The action that will be done when the promise is done.
         *
         * @var string
         */
        protected $resolved;
        /**
         * An array of arguments that will be used to call a callback on completion.
         *
         * @var array
         */
        protected $resolved_args;
        /**
         * The action that will be done when the promise fails due to an error.
         *
         * @var string
         */
        protected $rejected;
        /**
         * An array of arguments that will be used to call a callback on failure.
         *
         * @var array
         */
        protected $rejected_args;
        /**
         * Whether this promise did resolve correctly or not.
         *
         * @var bool
         */
        protected $resolved_correctly = \true;
        /**
         * Tribe__Promise constructor.
         *
         * @param string|array|Tribe__Utils__Callback $callback   The callback that should run to perform the promise task.
         * @param   array                             $items      The items to process, each item will be passed as first
         *                                                        argument to the callback at run-time.
         * @param array                               $extra_args An array of extra arguments that will be passed to the
         *                                                        callback function.
         */
        public function __construct($callback = \null, array $items = \null, array $extra_args = [])
        {
        }
        /**
         * {@inheritdoc}
         */
        public static function action()
        {
        }
        /**
         * Sets a callback, and optional arguments, that will be called when the promise
         * is resolved.
         *
         * The callback and arguments must be serializable and make sense in the context of,
         * potentially, a different call from the one where this method is called.
         *
         * @since 4.9.5
         *
         * @param callable|Tribe__Utils__Callback $resolved            The callback to call on success.
         * @param callable|Tribe__Utils__Callback $rejected            The callback to call on failure.
         * @param array                           $resolved_args       The arguments that will be passed to the resolved
         *                                                             callback.
         * @param array                           $rejected_args       The arguments that will be passed to the rejected
         *                                                             callback.
         *
         * @return Tribe__Promise This promise.
         *
         * @throws LogicException If this method is called after saving the promise.
         */
        public function then($resolved, $rejected = \null, array $resolved_args = \null, array $rejected_args = \null)
        {
        }
        /**
         * Overrides the  base method to save before dispatching.
         *
         * @since 4.9.5
         *
         * @return mixed The dispatch return value.
         */
        public function dispatch()
        {
        }
        /**
         * A custom error handler to log any error tha might happen while invoking a promise
         * callback.
         *
         * @since 4.9.5
         *
         * @param int    $code          The error code.
         * @param string $error_message The error message.
         *
         * @see   set_error_handler()
         */
        public function error_handler($code, $error_message)
        {
        }
        /**
         * Performs the task associated with the promise.
         *
         * The promise is really just a flexible background process that
         *
         * @since 4.9.5
         *
         * @param array                           $item      The promise payload, keys:
         *                                                   {
         * @param callable|Tribe__Utils__Callback $callback  The callback this promise will
         *                                                   call to perform the task.
         * @param array                           $args      An array of arguments that will be passed to the callback.
         * @param callable|Tribe__Utils__Callback $then      The callback this promise will
         *                                                   call when complete.
         * @param array                           $then_args An array of arguments that will be passed to the then callback.
         *                                                   }
         *
         *
         * @return bool `true` if the task needs to run again, `false` if the task is complete.
         */
        protected function task($item)
        {
        }
        /**
         * Overrides the base method to allow building promises on empty objects
         * without actually writing to the database.
         *
         * A fake queue id is set for compatibility reasons.
         *
         * @since 4.9.5
         *
         * @return Tribe__Process__Queue This object.
         */
        public function save()
        {
        }
        /**
         * Invokes a callback function with optional arguments.
         *
         * If the callback invocation results in an exception or error  then the callback will return `true`
         * and log.
         *
         * @since 4.9.5
         *
         * @param            callable|Tribe__Utils__Callback $callback      The callback to call.
         * @param array|null                                 $callback_args An optional array of arguments to call the
         *                                                                  callback with.
         *
         * @return mixed The callback invocation return value.
         */
        protected function do_callback($callback, array $callback_args = \null)
        {
        }
        /**
         * Unpacks a callback returning a callable array for callbacks wrapped using the
         * Tribe__Utils__Callback class.
         *
         * @since 4.9.5
         *
         * @param string|array|Tribe__Utils__Callback $callback The callback to unpack.
         *
         * @return array|string A callable array of string.
         */
        protected function unpack_callback($callback)
        {
        }
        /**
         * Overrides the base method to call the success callback on completion.
         *
         * @since 4.9.5
         */
        protected function complete()
        {
        }
        /**
         * An alias of the dispatch method to stick with the expected naming
         * standard.
         *
         * @since 4.9.5
         *
         * @return mixed The dispatch operation return value.
         */
        public function resolve()
        {
        }
    }
    /**
     * Custom class for authenticating with the Promoter Connector.
     *
     * @since 4.9
     */
    class Tribe__Promoter__Auth
    {
        /**
         * Tribe__Promoter__Auth constructor.
         *
         * @since 4.9
         *
         * @param Tribe__Promoter__Connector $connector Connector object.
         * @return void
         */
        public function __construct(\Tribe__Promoter__Connector $connector)
        {
        }
        /**
         * Register the promoter auth key as part of the settings in order to make it available into the REST API.
         *
         * @since 4.12.6
         *
         * @return void
         */
        public function register_setting()
        {
        }
        /**
         * Add an update the KEY used for promoter during the connection.
         *
         * @since 4.9.12
         *
         * @param $secret_key
         *
         * @return string
         */
        public function filter_promoter_secret_key($secret_key)
        {
        }
        /**
         * Authorize the request with the Promoter Connector.
         *
         * @since 4.9
         *
         * @return bool Whether the request was authorized successfully.
         */
        public function authorize_with_connector()
        {
        }
        /**
         * Grab the WP constant and store it as the auth key, if none exists or is it empty
         * it creates a dynamic one.
         *
         * @since 4.9.12
         *
         * @since 4.9
         *
         * @return string The secret key.
         */
        public function generate_secret_key()
        {
        }
    }
    /**
     * Custom class for communicating with the Promoter Auth Connector the class is created
     * early in the process and many functions that come from utils are not available during the
     * execution of the methods from this class
     *
     * @since 4.9
     */
    class Tribe__Promoter__Connector
    {
        /**
         * Whether the user request is currently authorized by Promoter.
         *
         * @since 4.9.4
         *
         * @var bool
         */
        public $authorized = \false;
        /**
         * Get the base URL for interacting with the connector.
         *
         * @return string Base URL for interacting with the connector.
         *
         * @since 4.9
         */
        public function base_url()
        {
        }
        /**
         * Authorize Promoter to communicate with this site.
         *
         * @param string $user_id      Promoter user ID.
         * @param string $secret_key   Promoter secret key.
         * @param string $promoter_key Promoter key (not license related).
         * @param string $license_key  Promoter license key.
         *
         * @return bool Whether connector was authorized.
         *
         * @since 4.9
         */
        public function authorize_with_connector($user_id, $secret_key, $promoter_key, $license_key)
        {
        }
        /**
         * Authenticate the current request user with the Auth Connector
         *
         * @param string $user_id User ID.
         *
         * @return bool|string User ID or if promoter is authorized then it return true like a valid user.
         *
         * @since 4.9
         */
        public function authenticate_user_with_connector($user_id)
        {
        }
        /**
         * Get the token either from a request or a header
         *
         * @since 4.9.20
         *
         * @return mixed
         */
        protected function get_token()
        {
        }
        /**
         * Get the token from a Request variable if present, otherwise fallback to `null`
         *
         * @since 4.9.20
         *
         * @return mixed
         */
        protected function get_token_from_request()
        {
        }
        /**
         * Get the token directly from a Bearer Authentication Header, for hosts that
         * does not support large Query strings
         *
         * @since 4.9.20
         *
         * @return mixed
         */
        protected function get_token_from_headers()
        {
        }
        /**
         * Notify the Promoter app of changes within this system.
         *
         * @param int $post_id Post ID.
         *
         * @since 4.9
         */
        public function notify_promoter_of_changes($post_id)
        {
        }
        /**
         * Get the value for the option `tribe_promoter_auth_key`
         *
         * @since 4.9.12
         *
         * @return mixed
         */
        public function get_secret_key()
        {
        }
        /**
         * Make the call to the remote endpoint.
         *
         * @since 4.9
         *
         * @param array  $args Data to send.
         *
         * @param string $url  URL to send data to.
         *
         * @return string|false The response body or false if not successful.
         *
         */
        public function make_call($url, $args)
        {
        }
        /**
         * Check whether the user request is currently authorized by Promoter.
         *
         * @since 4.9.4
         *
         * @return bool Whether the user request is currently authorized by Promoter.
         */
        public function is_user_authorized()
        {
        }
    }
    /**
     * Class Tribe__Promoter__PUE
     *
     * @since 4.9
     */
    class Tribe__Promoter__PUE
    {
        /**
         * Setup the PUE Checker.
         *
         * @since 4.9
         */
        public function load()
        {
        }
        /**
         * Get whether service has a license and if the license is activated on network.
         *
         * @return array|false License information or false if not set.
         *
         * @since 4.9
         */
        public function get_license_info()
        {
        }
        /**
         * Check whether service has a license key set or not.
         *
         * @return bool Whether service has a license key set.
         *
         * @since 4.9
         */
        public function has_license_key()
        {
        }
        /**
         * Check whether service has a valid license key or not.
         *
         * @return bool Whether service has a valid license key.
         *
         * @since 4.9
         */
        public function has_valid_license()
        {
        }
    }
    /**
     * Class Tribe__Promoter__View
     */
    class Tribe__Promoter__View extends \Tribe__Template
    {
        /**
         * Tribe__Promoter__View constructor.
         *
         * @since 4.9
         */
        public function __construct()
        {
        }
        /**
         * Add the rewrite rules and tags.
         *
         * @since 4.9
         */
        public function add_rewrites()
        {
        }
        /**
         * Get the redirect URL for finishing onboarding
         *
         * @since 4.9.6
         *
         * @return string Redirect URL for completing onboarding.
         */
        public function authorized_redirect_url()
        {
        }
        /**
         * Display the auth check page when the correct permalink is loaded.
         *
         * @since 4.9
         */
        public function display_auth_check_view()
        {
        }
    }
    interface Tribe__REST__Endpoints__CREATE_Endpoint_Interface
    {
        /**
         * Handles POST requests on the endpoint.
         *
         * @param WP_REST_Request $request
         * @param bool            $return_id Whether the created post ID should be returned or the full response object.
         *
         * @return WP_Error|WP_REST_Response|int An array containing the data on success or a WP_Error instance on failure.
         */
        public function create(\WP_REST_Request $request, $return_id = \false);
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         */
        public function CREATE_args();
        /**
         * Whether the current user can create content of the specified type or not.
         *
         * @return bool Whether the current user can post or not.
         */
        public function can_create();
    }
    interface Tribe__REST__Endpoints__DELETE_Endpoint_Interface
    {
        /**
         * Handles DELETE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the trashed post on
         *                                   success or a WP_Error instance on failure.
         */
        public function delete(\WP_REST_Request $request);
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         */
        public function DELETE_args();
        /**
         * Whether the current user can delete content of this type or not.
         *
         * @return bool Whether the current user can delete or not.
         */
        public function can_delete();
    }
    interface Tribe__REST__Endpoints__READ_Endpoint_Interface
    {
        /**
         * Handles GET requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data on success or a WP_Error instance on failure.
         */
        public function get(\WP_REST_Request $request);
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         */
        public function READ_args();
    }
    interface Tribe__REST__Endpoints__UPDATE_Endpoint_Interface
    {
        /**
         * Handles UPDATE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the updated post on
         *                                   success or a WP_Error instance on failure.
         */
        public function update(\WP_REST_Request $request);
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         */
        public function EDIT_args();
        /**
         * Whether the current user can update content of this type or not.
         *
         * @return bool Whether the current user can update or not.
         */
        public function can_edit();
    }
    /**
     * Class Tribe__REST__Exceptions__Exception
     */
    class Tribe__REST__Exceptions__Exception extends \Exception
    {
        /**
         * @var int
         */
        protected $status;
        public function __construct($message, $code, $status)
        {
        }
        /**
         * Return the error status.
         * @return int
         */
        public function getStatus()
        {
        }
    }
    abstract class Tribe__REST__Headers__Base_Header
    {
        /**
         * @var Tribe__REST__Headers__Base_Interface
         */
        protected $base;
        /**
         * Tribe__REST__Headers__Base_Header constructor.
         *
         * @param Tribe__REST__Headers__Base_Interface $base
         */
        public function __construct(\Tribe__REST__Headers__Base_Interface $base)
        {
        }
    }
    /**
     * Interface Tribe__REST__Headers__Base_Interface
     *
     * Provides basic information for the
     */
    interface Tribe__REST__Headers__Base_Interface
    {
        /**
         * Returns the header that the REST API will print on the page head to report
         * its version.
         *
         * @return string
         */
        public function get_api_version_header();
        /**
         * Returns the header the REST API will print on the page head to report its root
         * url.
         *
         * @return string
         */
        public function get_api_root_header();
        /**
         * Returns the `name` of the meta tag that will be printed on the page to indicate
         * the REST API version.
         *
         * @return string
         */
        public function get_api_version_meta_name();
        /**
         * Returns the REST API URL.
         *
         * @return string
         */
        public function get_rest_url();
        /**
         * Returns the header the REST API will print on the page head to report its origin
         * url. Normaly the home_url()
         *
         * @return string
         */
        public function get_api_origin_header();
    }
    /**
     * Class Tribe__REST__Headers__Headers_Interface
     *
     * Handles headers and header equivalent to be printed/sent in responses.
     */
    interface Tribe__REST__Headers__Headers_Interface
    {
        /**
         * Prints the REST API related meta on the site.
         */
        public function add_header();
        /**
         * Sends the REST API related headers.
         */
        public function send_header();
    }
    class Tribe__REST__Headers__Disabled extends \Tribe__REST__Headers__Base_Header implements \Tribe__REST__Headers__Headers_Interface
    {
        /**
         * Prints TEC REST API related meta on the site.
         */
        public function add_header()
        {
        }
        /**
         * Sends TEC REST API related headers.
         */
        public function send_header()
        {
        }
    }
    class Tribe__REST__Headers__Supported extends \Tribe__REST__Headers__Base_Header implements \Tribe__REST__Headers__Headers_Interface
    {
        /**
         * @var Tribe__Events__Main
         */
        protected $main;
        public function __construct(\Tribe__REST__Headers__Base_Interface $base, \Tribe__REST__Main $main)
        {
        }
        /**
         * Prints TEC REST API related meta on the site.
         */
        public function add_header()
        {
        }
        /**
         * Sends TEC REST API related headers.
         */
        public function send_header()
        {
        }
    }
    class Tribe__REST__Headers__Unsupported extends \Tribe__REST__Headers__Base_Header implements \Tribe__REST__Headers__Headers_Interface
    {
        /**
         * @var Tribe__REST__Main
         */
        protected $main;
        /**
         * Tribe__REST__Headers__Unsupported constructor.
         *
         * @param Tribe__REST__Headers__Base_Interface $base
         * @param Tribe__REST__Main                    $main
         */
        public function __construct(\Tribe__REST__Headers__Base_Interface $base, \Tribe__REST__Main $main)
        {
        }
        /**
         * Prints TEC REST API related meta on the site.
         */
        public function add_header()
        {
        }
        /**
         * Sends TEC REST API related headers.
         */
        public function send_header()
        {
        }
    }
    /**
     * Class Tribe__REST__Main
     *
     * The main entry point for a The Events Calendar REST API implementation.
     *
     * This class should not contain business logic and merely set up and start the REST API support.
     */
    abstract class Tribe__REST__Main
    {
        /**
         * The Events Calendar REST APIs URL namespace.
         *
         * @var string
         */
        protected $namespace = 'tribe';
        /**
         * Returns the namespace of The Events Calendar REST APIs.
         *
         * @return string
         */
        public function get_namespace()
        {
        }
        /**
         * Returns the REST API URL prefix.
         *
         * @return string The REST API URL prefix.
         */
        public function get_url_prefix()
        {
        }
        /**
         * Retrieves the URL to a TEC REST endpoint on a site.
         *
         * Note: The returned URL is NOT escaped.
         *
         * @global WP_Rewrite $wp_rewrite
         *
         * @param string      $path    Optional. TEC REST route. Default '/'.
         * @param string      $scheme  Optional. Sanitization scheme. Default 'rest'.
         * @param int         $blog_id Optional. Blog ID. Default of null returns URL for current blog.
         *
         * @return string Full URL to the endpoint.
         */
        public function get_url($path = '/', $scheme = 'rest', $blog_id = \null)
        {
        }
        /**
         * Whether built-in WP REST API functions and functionalities should/can be used or not.
         *
         * @return bool
         */
        protected function use_builtin()
        {
        }
        /**
         * Returns the REST API URL prefix that will be appended to the namespace.
         *
         * The prefix should be in the `/some/path` format.
         *
         * @return string
         */
        protected abstract function url_prefix();
        /**
         * Returns the string indicating the REST API version.
         *
         * @return string
         */
        public abstract function get_version();
        /**
         * Returns the URL where the API users will find the API documentation.
         *
         * @return string
         */
        public abstract function get_reference_url();
    }
    interface Tribe__REST__Messages_Interface
    {
        /**
         * Returns the localized message associated with the slug.
         *
         * @param string $message_slug
         *
         * @return string
         */
        public function get_message($message_slug);
        /**
         * Returns the associative array of all the messages handled by the class.
         *
         * @return array An associative array in the `[ <slug> => <localized message> ]` format.
         */
        public function get_messages();
        /**
         * Prefixes a message slug with a common root.
         *
         * @param string $message_slug
         *
         * @return string The prefixed message slug.
         */
        public function prefix_message_slug($message_slug);
    }
    class Tribe__REST__Post_Repository
    {
        /**
         * Returns the data representing an image object.
         *
         * @since 4.7.19
         *
         * @param int $image_id
         *
         * @return array|false An array of image information or `false` on failure.
         */
        protected function get_image_data($image_id)
        {
        }
        /**
         * @param string $date A date string in a format `strtotime` can parse.
         *
         * @return array An array of date details for the end date; each entry will be
         *               empty if the date is empty.
         */
        protected function get_date_details($date)
        {
        }
        /**
         * Returns a localized and formatted list of cost values in ASC order.
         *
         * @since 4.7.19
         *
         * @param array $cost_couples An array of cost couples in the [ <pretty name> => <number value> ] format.
         *
         * @return array
         */
        protected function format_and_sort_cost_couples(array $cost_couples = [])
        {
        }
    }
    interface Tribe__REST__Post_Repository_Interface
    {
        /**
         * Retrieves an array representation of the post.
         *
         * @param int $id The post ID.
         *
         * @return array An array representation of the post.
         */
        public function get_data($id);
    }
    class Tribe__REST__System
    {
        /**
         * Whether the WP installation supports WP REST API or not.
         *
         * @return bool
         */
        public function supports_wp_rest_api()
        {
        }
        /**
         * Determines if we are coming from a REST API request.
         *
         * @since 5.0.0
         *
         * @return bool
         */
        public static function is_rest_api()
        {
        }
    }
    /**
     * Interface Tribe__Repository__Setter_Interface
     *
     * @since 4.8.2
     */
    interface Tribe__Repository__Setter_Interface
    {
        /**
         * Sets a key on the posts to update using a value or a callback.
         *
         * The callback method will be passed the post ID, the `$key` and
         * the Update repository instance.
         * The update will check, in order, if the key is a post table field,
         * a taxonomy and will, finally, set on a custom field.
         * Updates to the same key will not stack.
         *
         * @since 4.7.19
         *
         * @since 4.7.19
         *
         * @param string         $key
         * @param mixed|callable $value
         *
         * @return Tribe__Repository__Update_Interface
         * @throws Tribe__Repository__Usage_Error If $key is not a string
         */
        public function set($key, $value);
        /**
         * Sets updates in bulk using a map.
         *
         * Updates to the same key will not stack.
         *
         * @since 4.7.19
         *
         * @param array $update_map A map relating update keys to values.
         *
         * @return Tribe__Repository__Update_Interface
         * @throws Tribe__Repository__Usage_Error If not all keys are strings.
         *
         * @see   the `set` method
         */
        public function set_args(array $update_map);
    }
}
namespace Tribe\Repository {
    /**
     * Class Core_Read_Interface
     *
     * @since   4.10.2
     *
     * @package Tribe\Repository
     */
    interface Core_Read_Interface
    {
        /**
         * Batch filter application method.
         *
         * This is the same as calling `by` multiple times with different arguments.
         *
         * @since 4.7.19
         *
         * @param array $args An associative array of arguments to filter
         *                    the posts by in the shape [ <key>, <value> ]. * * @return Tribe__Repository__Read_Interface
         */
        public function by_args(array $args);
        /**
         * Applies a filter to the query.
         *
         * While the signature only shows 2 arguments additional arguments will be passed
         * to the schema filters.
         *
         * @since 4.7.19
         *
         * @param string $key
         * @param mixed  $value
         * @param mixed  ...$args Additional, optional, call arguments that will be passed to
         *                        the schema.
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function by($key, $value = null);
        /**
         * Just an alias of the `by` method to allow for easier reading.
         *
         * @since 4.7.19
         *
         * @param string $key
         * @param mixed  $value
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function where($key, $value = null);
        /**
         * Sets the page of posts to fetch.
         *
         * Mind that this implementation does not support a `by( 'page', 2 )`
         * filter to force more readable code.
         *
         * @since 4.7.19
         *
         * @param int $page
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function page($page);
        /**
         * Sets the number of posts to retrieve per page.
         *
         * Mind that this implementation does not support a `by( 'per_page', 5 )`
         * filter to force more readable code; by default posts per page is set to
         * the pagination defaults for the post type.
         *
         * @param int $per_page
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function per_page($per_page);
        /**
         * Returns the number of posts found matching the query.
         *
         * Mind that this value ignores the offset returning the
         * number of results if limits where not applied.
         *
         * @since 4.7.19
         *
         * @return int
         */
        public function found();
        /**
         * Returns all posts matching the query.
         *
         * Mind that "all" means "all the posts matching all the filters" so pagination applies.
         *
         * @return array
         */
        public function all();
        /**
         * Sets the offset on the query.
         *
         * Mind that this implementation does not support a `by( 'offset', 2 )`
         * filter to force more readable code.
         *
         * @since 4.7.19
         *
         * @param int  $offset
         * @param bool $increment Whether to increment the offset by the value
         *                        or replace it.
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function offset($offset, $increment = false);
        /**
         * Sets the order on the query.
         *
         * Mind that this implementation does not support a `by( 'order', 2 )`
         * filter to force more readable code.
         *
         * @since 4.7.19
         *
         * @param string $order
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function order($order = 'ASC');
        /**
         * Sets the order criteria results should be fetched by.
         *
         * Mind that this implementation does not support a `by( 'order_by', 'title' )`
         * filter to force more readable code.
         *
         * @since 4.7.19
         *
         * @param string|array<string,string> $order_by The post field, custom field or alias key to order posts by.
         * @param string                      $order    The order direction; optional; shortcut for the `order` method; defaults
         *                                              to `DESC`.
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function order_by($order_by, $order = 'DESC');
        /**
         * Sets the fields that should be returned by the query.
         *
         * Mind that this implementation does not support a `by( 'fields', 'ids' )`
         * filter to force more readable code.
         *
         * @since 4.7.19
         *
         * @param string $fields
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function fields($fields);
        /**
         * Sugar method to set the `post__in` argument.
         *
         * Successive calls will stack, not replace each one.
         *
         * @since 4.7.19
         *
         * @param array|int $post_ids
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function in($post_ids);
        /**
         * Sugar method to set the `post__not_in` argument.
         *
         * Successive calls will stack, not replace each one.
         *
         * @since 4.7.19
         *
         * @param array|int $post_ids
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function not_in($post_ids);
        /**
         * Sugar method to set the `post_parent__in` argument.
         *
         * Successive calls will stack, not replace each one.
         *
         * @since 4.7.19
         *
         * @param array|int $post_id
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function parent($post_id);
        /**
         * Sugar method to set the `post_parent__in` argument.
         *
         * Successive calls will stack, not replace each one.
         *
         * @since 4.7.19
         *
         * @param array $post_ids
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function parent_in($post_ids);
        /**
         * Sugar method to set the `post_parent__not_in` argument.
         *
         * Successive calls will stack, not replace each one.
         *
         * @since 4.7.19
         *
         * @param array $post_ids
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function parent_not_in($post_ids);
        /**
         * Sugar method to set the `s` argument.
         *
         * Successive calls will replace the search string.
         * This is the default WordPress search, to search by title,
         * content or excerpt only use the `title`, `content`, `excerpt` filters.
         *
         * @param $search
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function search($search);
        /**
         * Returns the number of posts found matching the query in the current page.
         *
         * While the `found` method will return the number of posts found
         * across all pages this method will only return the number of
         * posts found in the current page.
         * Differently from the `found` method this method will apply the
         * offset if set.
         *
         * @since 4.7.19
         *
         * @return int
         */
        public function count();
        /**
         * Returns the first post of the page matching the current query.
         *
         * If, by default or because set with the `per_page` method, all
         * posts matching the query should be returned then this will be
         * the first post of all those matching the query.
         *
         * @since 4.7.19
         *
         * @return WP_Post|mixed|null
         *
         * @see   Tribe__Repository__Read_Interface::per_page()
         */
        public function first();
        /**
         * Returns the last post of the page matching the current query.
         *
         * If, by default or because set with the `per_page` method, all
         * posts matching the query should be returned then this will be
         * the last post of all those matching the query.
         *
         * @since 4.7.19
         *
         * @return WP_Post|mixed|null
         *
         * @see   Tribe__Repository__Read_Interface::per_page()
         */
        public function last();
        /**
         * Returns the nth post (1-based) of the page matching the current query.
         *
         * Being 1-based the second post can be fetched using `nth( 2 )`.
         * If, by default or because set with the `per_page` method, all
         * posts matching the query should be returned then this will be
         * the nth post of all those matching the query.
         *
         * @since 4.7.19
         *
         * @param int $n
         *
         * @return WP_Post|mixed|null
         *
         * @see   Tribe__Repository__Read_Interface::per_page()
         */
        public function nth($n);
        /**
         * Returns the first n posts of the page matching the current query.
         *
         * If, by default or because set with the `per_page` method, all
         * posts matching the query should be returned then this method will
         * return the first n posts of all those matching the query.
         *
         * @since 4.7.19
         *
         * @return array An array of posts matching the query.
         *
         * @see   Tribe__Repository__Read_Interface::per_page()
         */
        public function take($n);
        /**
         * Plucks a field from all results and returns it.
         *
         * This method will implicitly build and use a `WP_List_Util` instance on the return
         * value of a call to the `all` method.
         *
         * @since 4.9.5
         *
         * @param string $field The field to pluck from each result.
         *
         * @return array An array of the plucked results.
         *
         * @see   \wp_list_pluck()
         */
        public function pluck($field);
        /**
         * Filters the results according to the specified criteria.
         *
         * This method will implicitly build and use a `WP_List_Util` instance on the return
         * value of a call to the `all` method.
         *
         * @since 4.9.5
         *
         * @param array  $args     Optional. An array of key => value arguments to match
         *                         against each object. Default empty array.
         * @param string $operator Optional. The logical operation to perform. 'AND' means
         *                         all elements from the array must match. 'OR' means only
         *                         one element needs to match. 'NOT' means no elements may
         *                         match. Default 'AND'.
         *
         * @return array An array of the filtered results.
         *
         * @see   \wp_list_filter()
         */
        public function filter($args = [], $operator = 'AND');
        /**
         * Sorts the results according to the specified criteria.
         *
         * This method will implicitly build and use a `WP_List_Util` instance on the return
         * value of a call to the `all` method.
         *
         * @since 4.9.5
         *
         * @param string|array $orderby       Optional. Either the field name to order by or an array
         *                                    of multiple orderby fields as $orderby => $order.
         * @param string       $order         Optional. Either 'ASC' or 'DESC'. Only used if $orderby
         *                                    is a string.
         * @param bool         $preserve_keys Optional. Whether to preserve keys. Default false.
         *
         * @return array An array of the sorted results.
         *
         * @see   \wp_list_sort()
         */
        public function sort($orderby = [], $order = 'ASC', $preserve_keys = false);
        /**
         * Builds a collection on the result of the `all()` method call.
         *
         * @since 4.9.5
         *
         * @return \Tribe__Utils__Post_Collection
         */
        public function collect();
        /**
         * Gets the ids of the posts matching the query.
         *
         * @return array An array containing the post IDs to update.
         */
        public function get_ids();
    }
}
namespace {
    /**
     * Interface Tribe__Repository__Read_Interface
     *
     *
     * @since 4.7.19
     */
    interface Tribe__Repository__Read_Interface extends \Tribe__Repository__Setter_Interface, \Tribe\Repository\Core_Read_Interface
    {
        /**
         * Sets the permission that should be used to get the posts.
         *
         * Mind that this implementation does not support a `by( 'perm', 'editable' )`
         * filter to force more readable code.
         *
         * @param string $permission One of the two `self::PERMISSION` constants.
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function permission($permission);
        /**
         * Fetches a single instance of the post type handled by the repository by
         * the primary key.
         *
         * By default the primary key is the post ID.
         *
         * @param mixed $primary_key
         *
         * @return WP_Post|null|mixed
         */
        public function by_primary_key($primary_key);
        /**
         * Returns the Read repository built WP_Query object.
         *
         * @since 4.7.19
         *
         * @return WP_Query
         */
        public function get_query();
        /**
         * Whether the current READ query will apply a specific `by` (or `where`)
         * filter or not.
         *
         * @since 4.7.19
         *
         * @param string $key
         * @param null $value If provided an ulterior check will be made to see if
         *                    the value of the filter that is being applied matches
         *                    the specified one (w/ loose comparison).
         *
         * @return bool Whether the current query setup has the specified filter applied
         *              or not.
         */
        public function has_filter($key, $value = \null);
        /**
         * What filter the current READ query is currently applying in a specific `by` (or `where`).
         *
         * @since 4.9.5
         *
         * @return string|null The current filter being applied.
         */
        public function get_current_filter();
        /**
         * Deletes a set of events fetched by using filters.
         *
         * @since 4.9.5
         *
         *
         * @param bool $return_promise Whether to return the promise or just the deleted post IDs
         *                             if the deletion happens in a background process; defaults
         *                             to `false`.
         *
         * @return int[]|Tribe__Promise An array of deleted post IDs, or that will be deleted in asynchronous
         *                              mode or a promise object if `$return_promise` is set to `true`. The
         *                              promise object will immediately execute its resolved or rejected callback
         *                              if in synchronous mode.
         */
        public function delete($return_promise = \false);
        /**
         * Executes the delete operation in asynchronous mode.
         *
         * This method will override any filtering that might deactivate or disable asynchronous
         * deletion processes. The recommended way to delete events is by using the `delete` method
         * and letting the filtering conditions take over.
         *
         * @since 4.9.5
         *
         * @param array $to_delete      The post IDs to delete.
         * @param bool  $return_promise Whether to return the `Tribe__Promise` object created to
         *                              handle the background deletion or not.
         *
         * @return array|Tribe__Promise The promise object created to handle the background deletion
         *                              or the array of post IDs that will be, eventually, deleted.
         */
        public function async_delete(array $to_delete, $return_promise = \true);
        /**
         * Executes the update operation in asynchronous mode.
         *
         * This method will override any filtering that might deactivate or disable asynchronous
         * update processes. The recommended way to update events is by using the `update` method
         * and letting the filtering conditions take over.
         *
         * @since 4.9.5
         *
         * @param array $to_update      The post IDs to update.
         * @param bool  $return_promise Whether to return the `Tribe__Promise` object created to
         *                              handle the background update or not.
         *
         * @return array|Tribe__Promise The promise object created to handle the background update
         *                              or the array of post IDs that will be, eventually, updated.
         */
        public function async_update(array $to_update, $return_promise = \true);
        /**
         * Sets the display context the read posts will be shown into.
         *
         * The display context identifies the format that the post will
         * be in: e.g. in a month view or week view for events.
         * Extending classes can support more display contexts.
         *
         * @since 4.9.5
         *
         * @param string $context A display context supported by the repository; defaults to `default`.
         *
         * @return Tribe__Repository__Read_Interface For chaining purposes.
         */
        public function set_display_context($context = 'default');
        /**
         * Sets the render context the posts will be shown into.
         *
         * The render context indicates where the event’s display
         * context will be output. Default specifies that it is a
         * standard loop context. Widget indicates that it will be
         * rendered within a widget and so on.
         * Extending classes can support more render contexts.
         *
         * @since 4.9.5
         *
         * @param string $context A display context supported by the repository; defaults to `default`.
         *
         * @return Tribe__Repository__Read_Interface For chaining purposes.
         */
        public function set_render_context($context = 'default');
        /**
         * A utility method to build and return a WP_Query object for the specified
         * posts.
         *
         * This method will be used mainly to hydrate and return query objects with cached
         * results in context where the expected return type is a `Wp_Query` object.
         * The advantage over doing `$repository->where( 'post__in' , $ids )->get_query()` is
         * to avoid all the overhead of a query that, probably did run already.
         *
         * @since 4.9.5
         *
         * @param array $posts An array of post objects or post IDs the query should return as if fetched.
         *
         * @return WP_Query A query object ready to return, and operate, on the posts.
         */
        public function get_query_for_posts(array $posts);
    }
    /**
     * Interface Tribe__Repository__Update_Interface
     *
     * @since 4.7.19
     */
    interface Tribe__Repository__Update_Interface extends \Tribe__Repository__Setter_Interface
    {
        /**
         * Commits the updates to the selected post IDs to the database.
         *
         * @since 4.7.19
         *
         * @param bool $return_promise Whether to return a promise object or just the ids
         *                             of the updated posts; if `true` then a promise will
         *                             be returned whether the update is happening in background
         *                             or not.
         *
         * @return array|Tribe__Promise A list of the post IDs that have been (synchronous) or will
         *                              be (asynchronous) updated if `$return_promise` is set to `false`;
         *                              the Promise object if `$return_promise` is set to `true`.
         */
        public function save($return_promise = \false);
        /**
         * Adds an alias for an update/save field.
         *
         * @since 4.9.5
         *
         * @param string $alias The alias to add.
         * @param string $field_name The field name this alias should resolve to, this
         *                           can be posts table field, a taxonomy name or a custom
         *                           field.
         */
        public function add_update_field_alias($alias, $field_name);
        /**
         * Returns the update fields aliases for the repository.
         *
         * @since 4.9.5
         *
         * @return array This repository update fields aliases map.
         */
        public function get_update_fields_aliases();
        /**
         * Replaces the update fields aliases for this repository.
         *
         * @since 4.9.5
         *
         * @param array $update_fields_aliases The new update fields aliases
         *                                     map for this repository.
         */
        public function set_update_fields_aliases(array $update_fields_aliases);
        /**
         * Filters the post array before updates.
         *
         * Extending classes that need to perform some logic checks during updates
         * should extend this method.
         *
         * @since 4.9.5
         *
         * @param array    $postarr The post array that will be sent to the update callback.
         * @param int|null $post_id The ID  of the post that will be updated.
         *
         * @return array|false The filtered post array or `false` to indicate the
         *                     update should not happen.
         */
        public function filter_postarr_for_update(array $postarr, $post_id);
        /**
         * Creates a post of the type managed by the repository with the fields
         * provided using the `set` or `set_args` methods.
         *
         * @since 4.9.5
         *
         * @return WP_Post|false The created post object or `false` if the creation
         *                       fails for logic or runtime issues.
         */
        public function create();
        /**
         * Builds the post array that should be used to update or create a post of
         * the type managed by the repository.
         *
         * @since 4.9.5
         *
         * @param int|null $id The post ID that's being updated or `null` to get the
         *                     post array for a new post.
         *
         * @return array The post array ready to be passed to the `wp_update_post` or
         *               `wp_insert_post` functions.
         *
         * @throws Tribe__Repository__Usage_Error If running an update and trying to update
         *                                        a blocked field.
         */
        public function build_postarr($id = \null);
        /**
         * Filters the post array before creation.
         *
         * Extending classes that need to perform some logic checks during creations
         * should extend this method.
         *
         * @since 4.9.5
         *
         * @param array $postarr The post array that will be sent to the creation callback.
         *
         * @return array|false The filtered post array or false to indicate creation should not
         *                     proceed.
         */
        public function filter_postarr_for_create(array $postarr);
        /**
         * Sets the create args the repository will use to create posts.
         *
         * @since 4.9.5
         *
         * @param array $create_args The create args the repository will use to create posts.
         */
        public function set_create_args(array $create_args);
        /**
         * Returns the create args the repository will use to create posts.
         *
         * @since 4.9.5
         *
         * @return array The create args the repository will use to create posts.
         */
        public function get_create_args();
    }
    /**
     * Interface Tribe__Repository__Interface
     *
     * @since 4.7.19
     *
     */
    interface Tribe__Repository__Interface extends \Tribe__Repository__Read_Interface, \Tribe__Repository__Update_Interface
    {
        const PERMISSION_EDITABLE = 'editable';
        const PERMISSION_READABLE = 'readable';
        /**
         * Returns the current default query arguments of the repository.
         *
         * @since 4.7.19
         *
         * @return array
         */
        public function get_default_args();
        /**
         * Sets the default arguments of the repository.
         *
         * @since 4.7.19
         *
         * @param array $default_args
         *
         * @return mixed
         */
        public function set_default_args(array $default_args);
        /**
         * Sets the dynamic part of the filter tag that will be used to filter
         * the query arguments and object.
         *
         * @param string $filter_name
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function filter_name($filter_name);
        /**
         * Returns the repository filter name.
         *
         * @since 4.9.5
         *
         * @return string
         */
        public function get_filter_name();
        /**
         * Sets the formatter in charge of formatting items to the correct format.
         *
         * @since 4.7.19
         *
         * @param Tribe__Repository__Formatter_Interface $formatter
         */
        public function set_formatter(\Tribe__Repository__Formatter_Interface $formatter);
        /**
         * Build, without initializing it, the query.
         *
         * @since 4.7.19
         *
         * @param bool $use_query_builder Whether to use the query builder, if set, or not.
         *
         * @return WP_Query
         */
        public function build_query($use_query_builder = \true);
        /**
         * Adds a custom JOIN clause to the query.
         *
         * @since 4.7.19
         *
         * @param string $join
         */
        public function join_clause($join);
        /**
         * Adds a custom WHERE clause to the query.
         *
         * @since 4.7.19
         *
         * @param string $where
         */
        public function where_clause($where);
        /**
         * Sets the object in charge of building and returning the query.
         *
         * @since 4.7.19
         *
         * @param mixed $query_builder
         *
         * @return mixed
         */
        public function set_query_builder($query_builder);
        /**
         * Builds a fenced group of WHERE clauses that will be used with OR logic.
         *
         * Mind that this is a lower level implementation of WHERE logic that requires
         * each callback method to add, at least, one WHERE clause using the repository
         * own `where_clause` method.
         *
         * @param array $callbacks       One or more WHERE callbacks that will be called
         *                                this repository. The callbacks have the shape
         *                                [ <method>, <...args>]
         *
         * @return $this
         * @throws Tribe__Repository__Usage_Error If one of the callback methods does
         *                                        not add any WHERE clause.
         *
         * @see Tribe__Repository::where_clause()
         * @see Tribe__Repository__Query_Filters::where()
         */
        public function where_or($callbacks);
        /**
         * Filters the query to return posts that have got a number or posts
         * related to them by meta at least equal to a value.
         *
         * @since 4.7.19
         *
         * @param string|array $by_meta_keys One or more `meta_keys` relating
         *                                   another post TO this post type.
         * @param int          $min          The minimum number of posts of another type that should
         *                                   be related to the queries post type(s).
         * @param string|array $keys         One or more meta_keys to check on the post type in relation
         *                                   with the query post type(s); if the `$values` parameter is
         *                                   not provided then this will trigger an EXISTS check.
         * @param string|array $values       One or more value the meta_key specified with `$keys` should
         *                                   match.
         *
         * @return $this
         */
        public function by_related_to_min($by_meta_keys, $min, $keys = \null, $values = \null);
        /**
         * Filters the query to return posts that have got a number or posts
         * related to them by meta at most equal to a value.
         *
         * @since 4.7.19
         *
         * @param string|array $by_meta_keys One or more `meta_keys` relating
         *                                   another post TO this post type.
         *                                   be related to the queries post type(s).
         * @param int          $max          The maximum number of posts of another type that should
         *                                   be related to the queries post type(s).
         * @param string|array $keys         One or more meta_keys to check on the post type in relation
         *                                   with the query post type(s); if the `$values` parameter is
         *                                   not provided then this will trigger an EXISTS check.
         * @param string|array $values       One or more value the meta_key specified with `$keys` should
         *                                   match.
         *
         * @return $this
         */
        public function by_related_to_max($by_meta_keys, $max, $keys = \null, $values = \null);
        /**
         * Filters the query to return posts that have got a number or posts
         * related to them by meta between two values.
         *
         * @since 4.7.19
         *
         * @param string|array $by_meta_keys One or more `meta_keys` relating
         *                                   another post TO this post type.
         * @param int          $min          The minimum number of posts of another type that should
         *                                   be related to the queries post type(s).
         * @param int          $max          The maximum number of posts of another type that should
         *                                   be related to the queries post type(s).
         *
         * @param string|array $keys         One or more meta_keys to check on the post type in relation
         *                                   with the query post type(s); if the `$values` parameter is
         *                                   not provided then this will trigger an EXISTS check.
         * @param string|array $values       One or more value the meta_key specified with `$keys` should
         *                                   match.
         *
         * @return $this
         */
        public function by_related_to_between($by_meta_keys, $min, $max, $keys = \null, $values = \null);
        /**
         * Filters the query to return posts that are not related to posts that have a specific meta value.
         *
         * @since 5.0.2.1
         *
         * @param string|array $by_meta_keys One or more `meta_keys` relating
         *                                   another post TO this post type.
         *
         * @param string|array $keys         One or more meta_keys to check on the post type in relation
         *                                   with the query post type(s); if the `$values` parameter is
         *                                   not provided then this will trigger an EXISTS check.
         * @param string|array $values       One or more value the meta_key specified with `$keys` should
         *                                   match.
         *
         * @return $this
         */
        public function by_not_related_to($by_meta_keys, $keys = \null, $values = \null);
        /**
         * Adds an entry to the repository filter schema.
         *
         * @since 4.9.5
         *
         * @param string   $key      The filter key, the one that will be used in `by` and `where`
         *                           calls.
         * @param callable $callback The function that should be called to apply this filter.
         */
        public function add_schema_entry($key, $callback);
        /**
         * Returns an hash string for this repository instance filters and, optionally, a generated query.
         *
         * By default all applied filters, and query vars, will be included but specific filters can
         * be excluded, or included, from the hash generation.
         * The possibility to include the query in the hash generation is required as the query vars could
         * be further modified after the repository filters are applied and the query is built.
         *
         * @since 4.9.5
         *
         * @param array          $settings An array of settings to define how the hash should be produced in the shape
         *                                 `[ 'exclude' => [ 'ex_1', ... ], 'include' => [ 'inc_1', ... ] ]`. This array
         *                                 will apply both to the Repository filters and the query vars.
         * @param WP_Query|null $query An optional query object to include in the hashing.
         *
         * @return string The generated hash string.
         *
         */
        public function hash(array $settings = [], \WP_Query $query = \null);
        /**
         * Returns the data the repository would use to build the hash.
         *
         * @since 4.9.5
         *
         * @param array          $settings An array of settings to define how the hash should be produced in the shape
         *                                 `[ 'exclude' => [ 'ex_1', ... ], 'include' => [ 'inc_1', ... ] ]`. This array
         *                                 will apply both to the Repository filters and the query vars.
         * @param WP_Query|null $query An optional query object to include in the hashing.
         *
         * @return array An array of hash data components.
         */
        public function get_hash_data(array $settings, \WP_Query $query = \null);
        /**
         * Returns the last built query from the repository instance.
         *
         * @since 4.9.6
         *
         * @return WP_Query|null The last built query instance if any.
         */
        public function get_last_built_query();
        /**
         * Builds, and adds to the query, a WHERE clause to the query on multiple fields.
         *
         * @since 4.9.6
         *
         * @param array  $fields         The fields to add WHERE clauses for. The fields can be post fields, custom fields or
         *                               taxonomy terms.
         * @param string $compare        The comparison operator to use, e.g. 'LIKE' or '>'.
         * @param mixed  $value          The value, or values, to compare with; the format will be set depending on the type of
         *                               each value.
         * @param string $where_relation The relation to join the WHERE clauses with, either 'OR' or 'AND'; default to 'OR'.
         * @param string $value_relation The relation to join the value clauses in case the value is an array, either 'OR'
         *                               or 'AND'; defaults to 'OR'.
         *
         * @return $this This repository instance to allow chain calls.
         *
         * @throws \Tribe__Repository__Usage_Error If the comparison operator or the relation are not valid.
         */
        public function where_multi(array $fields, $compare, $value, $where_relation = 'OR', $value_relation = 'OR');
        /**
         * Sets the query instance the repository will use.
         *
         * Setting a query explicitly
         *
         * @since 4.9.9
         *
         * @param  \WP_Query  $query An query instance.
         *
         * @return \Tribe__Repository__Interface The repository instance, for chaining.
         * @throws \Tribe__Repository__Usage_Error If trying to set the query after a fetching operation is done.
         */
        public function set_query(\WP_Query $query);
        /**
         * Returns a cloned instance of the repository that will yield the next page results.
         *
         * Mind that this method will always return a Repository instance, no matter if a next page exists or not.
         * If a next page does not exist then the instance returned by this method will yield no posts and a count of `0`.
         *
         * @since 4.9.11
         *
         * @return \Tribe__Repository__Interface The repository instance that will yield the next page results.
         */
        public function next();
        /**
         * Returns a cloned instance of the repository that will yield the previous page results.
         *
         * Mind that this method will always return a Repository instance, no matter if a previous page exists or not.
         * If a previous page does not exist then the instance returned by this method will yield no posts and a count
         * of `0`.
         *
         * @since 4.9.11
         *
         * @return \Tribe__Repository__Interface The repository instance that will yield the previous page results.
         */
        public function prev();
        /**
         * Sets the found rows calculation to be enabled for queries.
         *
         * @since 4.9.10
         *
         * @param bool $found_rows Whether found rows calculation should be enabled.
         *
         * @return \Tribe__Repository__Interface The repository instance, for chaining.
         */
        public function set_found_rows($found_rows);
        /**
         * Voids the repositories queries preventing the repository from running any query.
         *
         * @since 4.9.14
         *
         * @param bool $void Whether to void the repository queries or not.
         *
         * @return Tribe__Repository__Interface $this The repository instance.
         */
        public function void_query($void_query = \true);
        /**
         * Returns the SQL code for the last query built and ran by the repository, if any.
         *
         * @since 5.0.1
         *
         * @return string|null The SQL code for the last query built and ran by the repository, if any.
         */
        public function get_last_sql() : ?string;
    }
}
namespace Tribe\Traits {
    /**
     * Trait With_Meta_Updates_Handling
     *
     * @since   4.12.6
     *
     * @package Tribe\Traits
     */
    trait With_Meta_Updates_Handling
    {
        /**
         * Returns a closure that should be hooked to the `udapte_post_metadata` filter to "unpack" arrays of meta
         * for a specific key.
         *
         * Providing an array of values in the context of `meta_input` will store them as a single array of values, not
         * as multiple values. This closure will unpack the meta on update to have multiple values in place of one.
         * This is the case, as an example, with Event Organizers, where we want a meta entry for each Organizer, not an
         * array of Organizer IDs in a single meta.
         *
         * @since 4.12.6
         *
         * @param string   $target_meta_key The meta key that should be "unpacked" for updates.
         * @param int|null $target_post_id  The specific post ID to target, or null to target the next update.
         *
         * @return \Closure The closure that will deal with the unpacked meta update.
         */
        protected function unpack_meta_on_update($target_meta_key, $target_post_id = null)
        {
        }
    }
    /**
     * Trait With_Post_Attribute_Detection
     *
     * @since   4.12.6
     *
     * @package Tribe\Traits
     */
    trait With_Post_Attribute_Detection
    {
        /**
         * Whether the key is a field of the posts table or not.
         *
         * @since 4.7.19 Created in the `Tribe__Repository` class.
         * @since 4.12.6 Refactored out of the `Tribe__Repository` class into this trait.
         *
         * @param string $key The field to check.
         *
         * @return bool Whether the key indicates a post field, a column in the `posts` table, or not.
         */
        protected function is_a_post_field($key)
        {
        }
        /**
         * Whether the current key identifies one of the supported taxonomies or not.
         *
         * @since 4.7.19 Created in the `Tribe__Repository` class.
         * @since 4.12.6 Refactored out of the `Tribe__Repository` class into this trait.
         *
         * @param string $key The field to check.
         *
         * @return bool Whether the key indicates a taxonomy of the post type or not.
         */
        protected function is_a_taxonomy($key)
        {
        }
    }
}
namespace {
    abstract class Tribe__Repository implements \Tribe__Repository__Interface
    {
        use \Tribe\Traits\With_Meta_Updates_Handling;
        use \Tribe\Traits\With_Post_Attribute_Detection;
        const MAX_NUMBER_OF_POSTS_PER_PAGE = 99999999999;
        /**
         * @var  array An array of keys that cannot be updated on this repository.
         */
        protected static $blocked_keys = ['ID', 'post_type', 'post_modified', 'post_modified_gmt', 'guid', 'comment_count'];
        /**
         * @var array A list of the default filters supported and implemented by the repository.
         */
        protected static $default_modifiers = ['p', 'author', 'author_name', 'author__in', 'author__not_in', 'has_password', 'post_password', 'cat', 'category__and', 'category__in', 'category__not_in', 'category_name', 'comment_count', 'comment_status', 'title', 'title_like', 'name', 'post_name__in', 'ping_status', 'post__in', 'post__not_in', 'post_parent', 'post_parent__in', 'post_parent__not_in', 'post_mime_type', 's', 'search', 'tag', 'tag__and', 'tag__in', 'tag__not_in', 'tag_id', 'tag_slug__and', 'tag_slug__in', 'ID', 'id', 'date', 'after_date', 'before_date', 'date_gmt', 'after_date_gmt', 'before_date_gmt', 'post_title', 'post_content', 'post_excerpt', 'post_status', 'to_ping', 'post_modified', 'post_modified_gmt', 'post_content_filtered', 'guid', 'perm', 'menu_order', 'meta', 'meta_equals', 'meta_not_equals', 'meta_gt', 'meta_greater_than', 'meta_gte', 'meta_greater_than_or_equal', 'meta_like', 'meta_not_like', 'meta_lt', 'meta_less_than', 'meta_lte', 'meta_less_than_or_equal', 'meta_in', 'meta_not_in', 'meta_between', 'meta_not_between', 'meta_exists', 'meta_not_exists', 'meta_regexp', 'meta_equals_regexp', 'meta_not_regexp', 'meta_not_equals_regexp', 'meta_regexp_or_like', 'meta_equals_regexp_or_like', 'meta_not_regexp_or_like', 'meta_not_equals_regexp_or_like', 'taxonomy_exists', 'taxonomy_not_exists', 'term_id_in', 'term_id_not_in', 'term_id_and', 'term_name_in', 'term_name_not_in', 'term_name_and', 'term_slug_in', 'term_slug_not_in', 'term_slug_and', 'term_in', 'term_not_in', 'term_and'];
        /**
         * @var array An array of default arguments that will be applied to all queries.
         */
        protected static $common_args = ['post_type' => 'post', 'suppress_filters' => \false, 'posts_per_page' => -1];
        /**
         * @var array A list of query modifiers that will trigger a overriding merge, thus
         *            replacing previous values, when set multiple times.
         */
        protected static $replacing_modifiers = ['p', 'author', 'author_name', 'author__in', 'author__not_in', 'has_password', 'post_password', 'cat', 'category__and', 'category__in', 'category__not_in', 'category_name', 'comment_count', 'comment_status', 'menu_order', 'title', 'title_like', 'name', 'post_name__in', 'ping_status', 'post__in', 'post__not_in', 'post_parent', 'post_parent__in', 'post_parent__not_in', 'post_mime_type', 's', 'search', 'tag', 'tag__and', 'tag__in', 'tag__not_in', 'tag_id', 'tag_slug__and', 'tag_slug__in', 'ID', 'id', 'date', 'after_date', 'before_date', 'date_gmt', 'after_date_gmt', 'before_date_gmt', 'post_title', 'post_content', 'post_excerpt', 'post_status', 'to_ping', 'post_modified', 'post_modified_gmt', 'post_content_filtered', 'guid', 'perm', 'order'];
        /**
         * @var int
         */
        protected static $meta_alias = 0;
        /**
         * @var array A list of keys that denote the value to check should be cast to array.
         */
        protected static $multi_value_keys = ['IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN'];
        /**
         * @var array A map of SQL comparison operators to their human-readable counterpart.
         */
        protected static $comparison_operators = ['=' => 'equals', '!=' => 'not-equals', '>' => 'gt', '>=' => 'gte', '<' => 'lt', '<=' => 'lte', 'LIKE' => 'like', 'NOT LIKE' => 'not-like', 'IN' => 'in', 'NOT IN' => 'not-in', 'BETWEEN' => 'between', 'NOT BETWEEN' => 'not-between', 'EXISTS' => 'exists', 'NOT EXISTS' => 'not-exists', 'REGEXP' => 'regexp', 'NOT REGEXP' => 'not-regexp'];
        /**
         * A counter to keep track, on the class level, of the aliases generated for the terms table
         * while building multi queries.
         *
         * @var int
         */
        protected static $alias_counter = 1;
        /**
         * @var string
         */
        protected $filter_name = 'default';
        /**
         * @var array The post IDs that will be updated.
         */
        protected $ids = [];
        /**
         * @var bool Whether the post IDs to update have already been fetched or not.
         */
        protected $has_ids = \false;
        /**
         * @var array The updates that will be saved to the database.
         */
        protected $updates = [];
        /**
         * @var array A list of taxonomies this repository will recognize.
         */
        protected $taxonomies = [];
        /**
         * @var array A map detailing which fields should be converted from a
         *            GMT time and date to a local one.
         */
        protected $to_local_time_map = ['post_date_gmt' => 'post_date'];
        /**
         * @var array A map detailing which fields should be converted from a
         *            localized time and date to a GMT one.
         */
        protected $to_gmt_map = ['post_date' => 'post_date_gmt'];
        /**
         * @var array
         */
        protected $default_args = ['post_type' => 'post'];
        /**
         * @var array An array of query modifying callbacks populated while applying
         *            the filters.
         */
        protected $query_modifiers = [];
        /**
         * @var bool Whether the current query is void or not.
         */
        protected $void_query = \false;
        /**
         * @var array An array of query arguments that will be populated while applying
         *            filters.
         */
        protected $query_args = ['meta_query' => ['relation' => 'AND'], 'tax_query' => ['relation' => 'AND'], 'date_query' => ['relation' => 'AND']];
        /**
         * @var array An array of query arguments that support 'relation'.
         */
        protected $relation_query_args = ['meta_query', 'tax_query', 'date_query'];
        /**
         * @var WP_Query The current query object built and modified by the instance.
         */
        protected $current_query;
        /**
         * @var array An associative array of the filters that will be applied and the used values.
         */
        protected $current_filters = [];
        /**
         * @var string|null The current filter being applied.
         */
        protected $current_filter;
        /**
         * @var Tribe__Repository__Query_Filters
         */
        public $filter_query;
        /**
         * @var string The filter that should be used to get a post by its primary key.
         */
        protected $primary_key = 'p';
        /**
         * @var array A map of callbacks in the shape [ <slug> => <callback|primitive> ]
         */
        protected $schema = [];
        /**
         * @var array A map of schema slugs and their meta keys to be queried.
         */
        protected $simple_meta_schema = [];
        /**
         * @var array A map of schema slugs and their taxonomies to be queried.
         */
        protected $simple_tax_schema = [];
        /**
         * @var Tribe__Repository__Interface
         */
        protected $main_repository;
        /**
         * @var Tribe__Repository__Formatter_Interface
         */
        protected $formatter;
        /**
         * @var bool
         */
        protected $skip_found_rows = \true;
        /**
         * @var Tribe__Repository__Interface
         */
        protected $query_builder;
        /**
         * A map relating aliases to their real update field name.
         *
         * E.g. the `title` alias might be an alias of `post_title` in update/save operations.
         * This is done to allow using set-like methods with human-readable names.
         * Extending classes should pre-fill this with default aliases.
         *
         * @var array
         */
        protected $update_fields_aliases = ['title' => 'post_title', 'content' => 'post_content', 'description' => 'post_content', 'slug' => 'post_name', 'excerpt' => 'post_excerpt', 'status' => 'post_status', 'parent' => 'post_parent', 'author' => 'post_author', 'date' => 'post_date', 'date_gmt' => 'post_date_gmt', 'date_utc' => 'post_date_gmt', 'tag' => 'post_tag', 'image' => '_thumbnail_id'];
        /**
         * The default create args that will be used by the repository
         * to create posts of the managed type.
         *
         * @var
         */
        protected $create_args;
        /**
         * Indicates the current display context if any.
         * Extending classes can support and use this property to know the
         * display context.
         *
         * @var string
         */
        protected $display_context = 'default';
        /**
         * Indicates the current render context if any.
         * Extending classes can support and use this property to know the
         * render context.
         *
         * @var string
         */
        protected $render_context = 'default';
        /**
         * The query last built from the repository instance.
         *
         * @var WP_Query|null
         */
        protected $last_built_query;
        /**
         * The hash of the last built query.
         *
         * @var string
         */
        protected $last_built_hash = '';
        /**
         * Tribe__Repository constructor.
         *
         * @since 4.7.19
         */
        public function __construct()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function get_default_args()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function set_default_args(array $default_args)
        {
        }
        /**
         * Returns the value of a protected property.
         *
         * @since 4.7.19
         *
         * @param string $name
         *
         * @return mixed|null
         * @throws Tribe__Repository__Usage_Error If trying to access a non defined property.
         */
        public function __get($name)
        {
        }
        /**
         * Magic method to set protected properties.
         *
         * @since 4.7.19
         *
         * @param string $name
         * @param mixed  $value
         *
         * @throws Tribe__Repository__Usage_Error As properties have to be set extending
         * the class, using setter methods or via constructor injection
         */
        public function __set($name, $value)
        {
        }
        /**
         * Whether the class has a property with the specific name or not.
         *
         * @since 4.7.19
         *
         * @param string $name
         *
         * @return bool
         */
        public function __isset($name)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function where($key, $value = \null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function page($page)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function per_page($per_page)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function count()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function build_query($use_query_builder = \true)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function found()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function all()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function offset($offset, $increment = \false)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function order($order = 'ASC')
        {
        }
        /**
         * {@inheritdoc}
         */
        public function order_by($order_by, $order = 'DESC')
        {
        }
        /**
         * {@inheritdoc}
         */
        public function fields($fields)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function permission($permission)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function in($post_ids)
        {
        }
        /**
         * Merges arguments into a query arg.
         *
         * @since 4.7.19
         *
         * @param string    $key
         * @param array|int $value
         */
        protected function add_args($key, $value)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function not_in($post_ids)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function parent($post_id)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function parent_in($post_ids)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function parent_not_in($post_ids)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function search($search)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function first()
        {
        }
        /**
         * Formats a post handled by the repository to the expected
         * format.
         *
         * Extending classes should use this method to format return values to the expected format.
         *
         * @since 4.7.19
         *
         * @param int|WP_Post $id
         *
         * @return WP_Post
         */
        protected function format_item($id)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function last()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function nth($n)
        {
        }
        /**
         * Applies and returns a schema entry.
         *
         * @since 4.7.19
         *
         * @param string $key
         * @param mixed  $value
         * @param mixed  ...$args Additional arguments for the application.
         *
         * @return mixed A scalar value or a callable.
         */
        public function apply_modifier($key, $value = \null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function take($n)
        {
        }
        /**
         * Fetches a single instance of the post type handled by the repository.
         *
         * Similarly to the `get_post` function permissions are not taken into account when returning
         * an instance by its primary key; extending classes can refine this behaviour to suit.
         *
         * @param mixed $primary_key
         *
         * @return WP_Post|null|mixed
         */
        public function by_primary_key($primary_key)
        {
        }
        /**
         * Filters posts by simple meta schema value.
         *
         * @since 4.9.5
         *
         * @param mixed $value Meta value.
         */
        public function filter_by_simple_meta_schema($value)
        {
        }
        /**
         * Filters posts by simple tax schema value.
         *
         * @since 4.9.5
         *
         * @param int|string|array $value Term value(s).
         */
        public function filter_by_simple_tax_schema($value)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function by($key, $value = \null)
        {
        }
        /**
         * Returns the query modifier for a key.
         *
         * @since 4.7.19
         *
         * @param string $key
         * @param array  $call_args
         *
         * @return mixed
         *
         * @throws Tribe__Repository__Usage_Error If the required filter is not defined by the class.
         * @throws Tribe__Repository__Void_Query_Exception To signal the query would yield no results.
         */
        protected function modify_query($key, $call_args)
        {
        }
        /**
         * Whether the current schema defines an application for the key or not.
         *
         * @since 4.7.19
         *
         * @param $key
         *
         * @return bool
         */
        protected function schema_has_modifier_for($key)
        {
        }
        /**
         * Whether a filter defined and handled by the repository exists or not.
         *
         * @since 4.7.19
         *
         * @param string $key
         *
         * @return bool
         */
        protected function has_default_modifier($key)
        {
        }
        /**
         * Normalizes the filter key to allow broad matching of the `by` filters.
         *
         * @since 4.7.19
         *
         * E.g. `by( 'id', 23 )` is the same as `by( 'ID', 23 ).
         * E.g. `by( 'parent', 23 )` is the same as `by( `post_parent`, 23 )`
         *
         * @param string $key
         *
         * @return string The normalized filter key
         */
        protected function normalize_key($key)
        {
        }
        /**
         * Returns a list of modifiers that, when applied multiple times,
         * will replace the previous value.
         *
         * This behaviour is in opposition to "stackable" modifiers that will,
         * instead, be composed and stacked.
         *
         * @since 4.7.19
         *
         * @return array
         */
        protected function replacing_modifiers()
        {
        }
        /**
         * Batch filter application method.
         *
         * This is the same as calling `where` multiple times with different arguments.
         *
         * @since 4.7.19
         *
         * @param array $args An associative array of arguments to filter
         *                    the posts by in the shape [ <key>, <value> ].
         *
         * @return Tribe__Repository__Read_Interface|Tribe__Repository__Update_Interface
         */
        public function where_args(array $args)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function by_args(array $args)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function save($return_promise = \false)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function get_ids()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function get_query()
        {
        }
        /**
         * Whether the current key can be updated by this repository or not.
         *
         * @since 4.7.19
         *
         * @param string $key
         *
         * @return bool
         */
        protected function can_be_updated($key)
        {
        }
        /**
         * Whether the current key is a date one requiring a converted key pair too or not.
         *
         * @param string $key
         *
         * @return bool
         */
        protected function requires_converted_date($key)
        {
        }
        /**
         * Updates the update post payload to add dates that should be provided in GMT
         * and localized version.
         *
         * @since 4.7.19
         *
         * @param       string     $key
         * @param       string|int $value
         * @param array            $postarr
         */
        protected function update_postarr_dates($key, $value, array &$postarr)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function set_args(array $update_map)
        {
        }
        /**
         * Sets the args to be updated during save process.
         *
         * @param string $key   Argument key.
         * @param mixed  $value Argument value.
         *
         * @throws Tribe__Repository__Usage_Error
         *
         * @return $this
         */
        public function set($key, $value)
        {
        }
        /**
         * Sets the create args the repository will use to create posts.
         *
         * @since 4.9.5
         *
         * @param string|int $image The path to an image file, an image URL, or an attachment post ID.
         *
         * @return $this
         */
        public function set_featured_image($image)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function filter_name($filter_name)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function set_formatter(\Tribe__Repository__Formatter_Interface $formatter)
        {
        }
        /**
         * Filters the query to only return posts that are related, via a meta key, to posts
         * that satisfy a condition.
         *
         * @param string|array $meta_keys One or more `meta_keys` relating the queried post type(s)
         *                                to another post type.
         * @param string       $compare   The SQL comparison operator.
         * @param string       $field     One (a column in the `posts` table) that should match
         *                                the comparison criteria; required if the comparison operator is not `EXISTS` or
         *                                `NOT EXISTS`.
         * @param string|array $values    One or more values the post field(s) should be compared to;
         *                                required if the comparison operator is not `EXISTS` or `NOT EXISTS`.
         *
         * @return $this
         * @throws Tribe__Repository__Usage_Error If the comparison operator requires
         */
        public function where_meta_related_by($meta_keys, $compare, $field = \null, $values = \null)
        {
        }
        /**
         * Filters the query to only return posts that are related, via a meta key, to posts
         * that satisfy a condition.
         *
         * @since 4.10.3
         *
         * @throws Tribe__Repository__Usage_Error If the comparison operator requires and no value provided.
         *
         * @param string|array $meta_keys     One or more `meta_keys` relating the queried post type(s)
         *                                    to another post type.
         * @param string       $compare       The SQL comparison operator.
         * @param string       $meta_field    One (a column in the `postmeta` table) that should match
         *                                    the comparison criteria; required if the comparison operator is not `EXISTS` or
         *                                    `NOT EXISTS`.
         * @param string|array $meta_values   One or more values the post field(s) should be compared to;
         *                                    required if the comparison operator is not `EXISTS` or `NOT EXISTS`.
         * @param boolean      $or_not_exists Whether or not to also include a clause to check if value IS NULL.
         *                                    Example with this as true: `value = X OR value IS NULL`.
         *
         * @return $this
         */
        public function where_meta_related_by_meta($meta_keys, $compare, $meta_field = \null, $meta_values = \null, $or_not_exists = \false)
        {
        }
        /**
         * Builds a fenced group of WHERE clauses that will be used with OR logic.
         *
         * Mind that this is a lower level implementation of WHERE logic that requires
         * each callback method to add, at least, one WHERE clause using the repository
         * own `where_clause` method.
         *
         * @param array $callbacks       One or more WHERE callbacks that will be called
         *                                this repository. The callbacks have the shape
         *                                [ <method>, <...args>]
         *
         * @return $this
         * @throws Tribe__Repository__Usage_Error If one of the callback methods does
         *                                        not add any WHERE clause.
         *
         * @see Tribe__Repository::where_clause()
         * @see Tribe__Repository__Query_Filters::where()
         */
        public function where_or($callbacks)
        {
        }
        /**
         * Adds an entry to the repository filter schema.
         *
         * @since 4.9.5
         *
         * @param string   $key      The filter key, the one that will be used in `by` and `where`
         *                           calls.
         * @param callable $callback The function that should be called to apply this filter.
         */
        public function add_schema_entry($key, $callback)
        {
        }
        /**
         * Adds a simple meta entry to the repository filter schema.
         *
         * @since 4.9.5
         *
         * @param string       $key      The filter key, the one that will be used in `by` and `where` calls.
         * @param string|array $meta_key The meta key(s) to use for the meta lookup.
         * @param string|null  $by       The ->by() lookup to use (defaults to meta_regexp_or_like).
         */
        public function add_simple_meta_schema_entry($key, $meta_key, $by = \null)
        {
        }
        /**
         * Adds a simple taxonomy entry to the repository filter schema.
         *
         * @since 4.9.5
         *
         * @param string       $key      The filter key, the one that will be used in `by` and `where` calls.
         * @param string|array $taxonomy The taxonomy/taxonomies to use for the tax lookup.
         * @param string|null  $by       The ->by() lookup to use (defaults to term_in).
         */
        public function add_simple_tax_schema_entry($key, $taxonomy, $by = \null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function add_update_field_alias($alias, $field_name)
        {
        }
        /**
         * Returns modified query arguments after applying a default filter.
         *
         * @since 4.7.19
         *
         * @param      string $key
         * @param      mixed  $value
         *
         * @return array
         * @throws Tribe__Repository__Usage_Error If a filter is called with wrong arguments.
         */
        protected function apply_default_modifier($key, $value)
        {
        }
        /**
         * Builds a date query entry to get posts after a date.
         *
         * @since 4.7.19
         *
         * @param string $value
         * @param string $column
         *
         * @return array
         */
        protected function get_posts_after($value, $column = 'post_date')
        {
        }
        /**
         * Builds a date query entry to get posts before a date.
         *
         * @since 4.7.19
         *
         * @param string $value
         * @param string $column
         *
         * @return array
         */
        protected function get_posts_before($value, $column = 'post_date')
        {
        }
        /**
         * Builds a meta query entry.
         *
         * @since 4.7.19
         *
         * @param string       $meta_key
         * @param string|array $meta_value
         * @param string       $compare
         * @param string       $type_or_format The type of value to compare
         *
         * @return array|null
         * @throws Tribe__Repository__Usage_Error If trying to compare multiple values with a single
         *                                        comparison operator.
         */
        protected function build_meta_query($meta_key, $meta_value = 'value', $compare = '=', $type_or_format = \null)
        {
        }
        /**
         * Generates a SQL friendly slug from the provided, variadic, fragments.
         *
         * @since 4.7.19
         *
         * @param ...string $frag
         *
         * @return string
         */
        protected function sql_slug($frag)
        {
        }
        /**
         * Builds a taxonomy query entry.
         *
         * @since 4.7.19
         *
         * @param string           $taxonomy
         * @param int|string|array $terms
         * @param string           $field
         * @param string           $operator
         *
         * @return array
         */
        protected function build_tax_query($taxonomy, $terms, $field, $operator)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function join_clause($join)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function where_clause($where)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function set_query_builder($query_builder)
        {
        }
        /**
         * Builds and escapes an interval of strings.
         *
         * The return string includes opening and closing braces.
         *
         * @since 4.7.19
         *
         * @param string|array $values One or more values to use to build
         *                             the interval
         *                             .
         * @param string       $format The format that should be used to escape
         *                             the values; default to '%s'.
         * @param string       $operator The operator the interval is being prepared for;
         *                               defaults to `IN`.
         *
         * @return string
         */
        public function prepare_interval($values, $format = '%s', $operator = 'IN')
        {
        }
        /**
         * Prepares a single value to be used in a SQL query.
         *
         * @since 4.7.19
         *
         * @param mixed  $value
         * @param string $format
         *
         * @return string
         */
        public function prepare_value($value, $format = '%s')
        {
        }
        /**
         * Validates that a comparison operator is used with the correct type of values.
         *
         * This is just a wrap to signal this kind of code error not in bad SQL error but
         * with a visible exception.
         *
         * @since 4.7.19
         *
         * @param string       $compare A SQL comparison operator
         * @param string|array $meta_key
         * @param mixed        $meta_value
         *
         * @throws Tribe__Repository__Usage_Error
         */
        protected function validate_operator_and_values($compare, $meta_key, $meta_value)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function by_related_to_min($by_meta_keys, $min, $keys = \null, $values = \null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function by_related_to_max($by_meta_keys, $max, $keys = \null, $values = \null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function by_related_to_between($by_meta_keys, $min, $max, $keys = \null, $values = \null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function by_not_related_to($by_meta_keys, $keys = \null, $values = \null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function has_filter($key, $value = \null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function get_current_filter()
        {
        }
        /**
         * Returns a map relating comparison operators to their "pretty" name.
         *
         * @since 4.9.5
         *
         * @return array
         */
        public static function get_comparison_operators()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function delete($return_promise = \false)
        {
        }
        /**
         * Whether background delete is activated for the repository or not.
         *
         * @since 4.9.5
         *
         * @param array $to_delete An array of post IDs to delete.
         *
         * @return bool Whether background delete is activated for the repository or not.
         */
        protected function is_background_delete_active($to_delete)
        {
        }
        /**
         * Returns the threshold above which posts will be deleted in background.
         *
         * @since 4.9.5
         *
         * @param array $to_delete An array of post IDs to delete.
         *
         * @return int The threshold above which posts will be deleted in background.
         */
        protected function get_background_delete_threshold($to_delete)
        {
        }
        /**
         * Whether background update is activated for the repository or not.
         *
         * @since 4.9.5
         *
         * @param array $to_update An array of post IDs to update.
         *
         * @return bool Whether background update is activated for the repository or not.
         */
        protected function is_background_update_active($to_update)
        {
        }
        /**
         * Returns the threshold above which posts will be updated in background.
         *
         * @since 4.9.5
         *
         * @param array $to_update An array of post IDs to update.
         *
         * @return int The threshold above which posts will be updated in background.
         */
        protected function get_background_update_threshold($to_update)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function async_delete(array $to_delete, $return_promise = \true)
        {
        }
        /**
         * Returns the delete callback function or method to use to delete posts.
         *
         * @since 4.9.5
         *
         * @param      int|array $to_delete  The post ID to delete or an array of post IDs to delete.
         * @param bool           $background Whether the callback will be used in background delete operations or not.
         *
         * @return callable The callback to use.
         */
        protected function get_delete_callback($to_delete, $background = \false)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function get_filter_name()
        {
        }
        /**
         * Returns the update callback function or method to use to update posts.
         *
         * @since 4.9.5
         *
         * @param      int|array $to_update  The post ID to update or an array of post IDs to update.
         * @param bool           $background Whether the callback will be used in background update operations or not.
         *
         * @return callable The callback to use.
         */
        protected function get_update_callback($to_update, $background = \false)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function async_update(array $to_update, $return_promise = \true)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function get_update_fields_aliases()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function set_update_fields_aliases(array $update_fields_aliases)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function filter_postarr_for_update(array $postarr, $post_id)
        {
        }
        /**
         * A utility method to cast any PHP error into an exception proper.
         *
         * Usage: `set_error_handler( array( $repository, 'cast_error_to_exception' ) );
         *
         * @since 4.9.5
         *
         * @param int $code The error code.
         * @param string $message The error message.
         */
        public function cast_error_to_exception($code, $message)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function create()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function filter_postarr_for_create(array $postarr)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function build_postarr($id = \null)
        {
        }
        /**
         * Returns the create callback function or method to use to create posts.
         *
         * @since 4.9.5
         *
         * @param array    $postarr     The post array that will be used for the creation.
         *
         * @return callable The callback to use.
         */
        protected function get_create_callback(array $postarr)
        {
        }
        /**
         * Returns the create args the repository will use to create posts.
         *
         * @since 4.9.5
         *
         * @return array The create args the repository will use to create posts.
         */
        public function get_create_args()
        {
        }
        /**
         * Sets the create args the repository will use to create posts.
         *
         * @since 4.9.5
         *
         * @param array $create_args The create args the repository will use to create posts.
         */
        public function set_create_args(array $create_args)
        {
        }
        /**
         * Returns a value trying to fetch it from an array first and then
         * reading it from the meta.
         *
         * @since 4.9.5
         *
         * @param array    $postarr The array to look into.
         * @param string   $key     The key to retrieve.
         * @param int|null $post_id The post ID to fetch the value for.
         * @param mixed $default The default value to return if nothing was found.
         *
         * @return mixed The found value if any.
         */
        protected function get_from_postarr_or_meta(array $postarr, $key, $post_id = \null, $default = \null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function set_display_context($context = 'default')
        {
        }
        /**
         * {@inheritdoc}
         */
        public function set_render_context($context = 'default')
        {
        }
        /**
         * {@inheritdoc}
         */
        public function get_query_for_posts(array $posts)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function pluck($field)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function filter($args = [], $operator = 'AND')
        {
        }
        /**
         * {@inheritdoc}
         */
        public function sort($orderby = [], $order = 'ASC', $preserve_keys = \false)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function collect()
        {
        }
        /**
         * Builds the ORM query with the query builder.
         *
         * Allow classes extending or decorating the repository to act before
         * the query is built or replace its building completely.
         *
         * @since 4.9.5
         *
         * @return WP_Query|null A built query object or `null` if the builder failed or bailed.
         */
        protected function build_query_with_builder()
        {
        }
        /**
         * Builds the ORM query internally, without a query builder.
         *
         * @since 4.9.5
         *
         * @return WP_Query The built query object.
         */
        protected function build_query_internally()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function hash(array $settings = [], \WP_Query $query = \null)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_hash_data(array $settings, \WP_Query $query = \null)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_last_built_query()
        {
        }
        /**
         * Checks a SQL relation is valid.
         *
         * Allowed values are 'OR' and 'AND'.
         *
         * @since 4.9.6
         *
         * @param string $relation The relation to check.
         *
         * @throws \Tribe__Repository__Usage_Error If the relation is not a valid one.
         */
        protected function validate_relation($relation)
        {
        }
        /**
         * Sanitizes and prepares string to be used in a LIKE comparison.
         *
         * If no leading and trailing `%` was found it will be added at the start and end of the string.
         *
         * @since 4.9.6
         *
         * @param string|array $value The string to prepare or an array of strings to prepare.
         *
         * @return string|array The sanitized string, or strings.
         */
        protected function prepare_like_string($value)
        {
        }
        /**
         * Builds the WHERE clause for a set of fields.
         *
         * This method is table-agnostic. While flexible it will also require some care to be used.
         *
         * @since 4.9.6
         *
         * @param string|array $fields  One or more fields to build the clause for.
         * @param string       $compare The comparison operator to use to build the
         * @param string|array $values One or more values to build the WHERE clause for.
         * @param string       $value_format The format, a `$wpdb::prepare()` compatible one, to use to format the values.
         * @param string       $where_relation The relation to apply between each WHERE fragment.
         * @param string       $value_relation The relation to apply between each value fragment.
         *
         * @return string The built WHERE clause.
         *
         * @throws \Tribe__Repository__Usage_Error If the relations are not valid or another WHERE building issue happens.
         */
        protected function build_fields_where_clause($fields, $compare, $values, $value_format = '%s', $where_relation = 'OR', $value_relation = 'OR')
        {
        }
        /**
         * Returns the term IDs of terms matching a criteria, the match is made on the terms slug and name.
         *
         * This should be used to break-down a query and fetch term IDs, to then use in a "lighter" join, later.
         *
         * @since 4.9.6
         *
         * @param string|array $taxonomy The taxonomy, or taxonomies, to fetch the terms for.
         * @param string $compare The comparison operator to use, e.g. 'LIKE' or '=>'.
         * @param string|array $value An array of values to compare the terms slug or names with.
         * @param string $relation The relation, either 'OR' or 'AND', to apply to the matching.
         * @param string $format The format, a `$wpdb::prepare()` supported one, to use to format the values for the query.
         *
         * @return array An array of term IDs matching the query, if any.
         */
        protected function fetch_taxonomy_terms_matches($taxonomy, $compare, $value, $relation = 'OR', $format = '%s')
        {
        }
        /**
         * {@inheritDoc}
         */
        public function where_multi(array $fields, $compare, $value, $where_relation = 'OR', $value_relation = 'OR')
        {
        }
        /**
         * {@inheritDoc}
         */
        public function set_query(\WP_Query $query)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function set_found_rows($found_rows)
        {
        }
        /**
         * Flush current filters and query information.
         *
         * @since 4.9.10
         *
         * @return self
         */
        public function flush()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function next()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function prev()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function void_query($void_query = \true)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_last_sql() : ?string
        {
        }
    }
    /**
     * Class Tribe__Repository__Decorator
     *
     * This is the base repository decorator class to ease the decoration
     * of repositories.
     *
     * @since 4.7.19
     */
    abstract class Tribe__Repository__Decorator implements \Tribe__Repository__Interface
    {
        /**
         * @var Tribe__Repository__Interface|Tribe__Repository__Read_Interface|Tribe__Repository__Update_Interface
         */
        protected $decorated;
        /**
         * {@inheritdoc}
         */
        public function get_default_args()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function set_default_args(array $default_args)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function filter_name($filter_name)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function by_args(array $args)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function by($key, $value = \null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function where($key, $value = \null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function page($page)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function per_page($per_page)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function found()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function all()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function offset($offset, $increment = \false)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function order($order = 'ASC')
        {
        }
        /**
         * {@inheritdoc}
         */
        public function order_by($order_by, $order = 'DESC')
        {
        }
        /**
         * {@inheritdoc}
         */
        public function fields($fields)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function permission($permission)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function in($post_ids)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function not_in($post_ids)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function parent($post_id)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function parent_in($post_ids)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function parent_not_in($post_ids)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function search($search)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function count()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function first()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function last()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function nth($n)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function take($n)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function by_primary_key($primary_key)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function set($key, $value)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function get_query()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function set_args(array $update_map)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function save($return_promise = \true)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function set_formatter(\Tribe__Repository__Formatter_Interface $formatter)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function join_clause($join)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function where_clause($where)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function set_query_builder($query_builder)
        {
        }
        /**
         * Sets the repository to be decorated.
         *
         * @since 4.7.19
         *
         * @param Tribe__Repository__Interface $decorated
         */
        protected function set_decorated_repository(\Tribe__Repository__Interface $decorated)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function build_query($use_query_builder = \true)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function where_or($callbacks)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function by_related_to_min($by_meta_keys, $min, $keys = \null, $values = \null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function by_related_to_max($by_meta_keys, $max, $keys = \null, $values = \null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function by_related_to_between($by_meta_keys, $min, $max, $keys = \null, $values = \null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function by_not_related_to($by_meta_keys, $keys = \null, $values = \null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function has_filter($key, $value = \null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function get_current_filter()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function get_ids()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function add_schema_entry($key, $callback)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function prepare_interval($values, $format = '%s')
        {
        }
        /**
         * {@inheritdoc}
         */
        public function delete($return_promise = \false)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function async_delete(array $to_delete, $return_promise = \true)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function add_update_field_alias($alias, $field_name)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function async_update(array $to_update, $return_promise = \true)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function get_update_fields_aliases()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function set_update_fields_aliases(array $update_fields_aliases)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function get_filter_name()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function filter_postarr_for_update(array $postarr, $post_id)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function build_postarr($id = \null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function create()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function filter_postarr_for_create(array $postarr)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function set_create_args(array $create_args)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function get_create_args()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function set_display_context($context = 'default')
        {
        }
        /**
         * {@inheritdoc}
         */
        public function set_render_context($context = 'default')
        {
        }
        /**
         * {@inheritdoc}
         */
        public function get_query_for_posts(array $posts)
        {
        }
        /**
         * Whether the decorator is decorating an instance of a specific repository class or not.
         *
         * The check is made recursively for decorators to get to the first repository implementation.
         *
         * @since 4.9.5
         *
         * @param string $class The class to check for.
         *
         * @return bool Whether the decorator is decorating an instance of a specific repository class or not.
         */
        public function decorates_an_instance_of($class)
        {
        }
        /**
         * Returns the concrete repository implementation that's "hidden" under the decorator(s).
         *
         * @since 4.9.5
         *
         * @return \Tribe__Repository__Interface The concrete repository instance.
         */
        public function get_decorated_repository()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function pluck($field)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function filter($orderby = [], $order = 'ASC', $preserve_keys = \false)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function sort($orderby = [], $order = 'ASC', $preserve_keys = \false)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function collect()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function hash(array $settings = [], \WP_Query $query = \null)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_hash_data(array $settings, \WP_Query $query = \null)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_last_built_query()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function where_multi(array $fields, $compare, $value, $where_relation = 'OR', $value_relation = 'OR')
        {
        }
        /**
         * Handle getting additional property from decorated object.
         *
         * @since 4.9.6.1
         *
         * @param string $name Property name.
         *
         * @return mixed
         */
        public function __get($name)
        {
        }
        /**
         * Handle setting additional property on decorated object.
         *
         * @since 4.9.6.1
         *
         * @param string $name  Property name.
         * @param mixed  $value Property value.
         */
        public function __set($name, $value)
        {
        }
        /**
         * Check if additional property on decorated object exists.
         *
         * @since 4.9.6.1
         *
         * @param string $name Property name.
         *
         * @return bool
         */
        public function __isset($name)
        {
        }
        /**
         * Call methods on decorated object.
         *
         * @since 4.9.6.1
         *
         * @param string $name      Method name.
         * @param array  $arguments Method arguments.
         *
         * @return mixed
         */
        public function __call($name, $arguments)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function set_query(\WP_Query $query)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function next()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function prev()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function set_found_rows($found_rows)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function void_query($void_query = \true)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_last_sql() : ?string
        {
        }
    }
}
namespace Tribe\Repository {
    trait Filter_Validation
    {
        /**
         * Checks the passed arguments to make sure they are the correct number and nature.
         *
         * This method requires the class using it to define a `static::$filter_args_map` property in the shape:
         * ```
         *  [
         *      <filter> => [ <arg_name> => <arg_validation_callback> ]
         *  ]
         * ```
         *
         * @since 4.10.2
         *
         * @param       string $filter The name of the filter currently validating.
         * @param array        $call_args The current filter call args, usually `func_get_args()`.
         *
         * @throws Usage_Error If there is a definition for the filter and the argument count or nature is not correct.
         */
        protected function ensure_args_for_filter($filter, array $call_args)
        {
        }
    }
}
namespace {
    /**
     * Interface Tribe__Repository__Formatter_Interface
     *
     * This interface is usually implemented by repository decorators that
     * need not only to modify the filtering criteria but the return format
     * of the items as well.
     *
     * @since 4.7.19
     */
    interface Tribe__Repository__Formatter_Interface
    {
        /**
         * Formats an item handled by a repository to the expected
         * format.
         *
         * @since 4.7.19
         *
         * @param int|WP_Post $id
         *
         * @return mixed
         */
        public function format_item($id);
    }
    /**
     * Class Tribe__Repository__Implementation_Error
     *
     * @since 4.7.19
     *
     * Thrown to indicate an error in the repository extension by a developer; this
     * is meant to be used to help developers to extend the repository.
     */
    class Tribe__Repository__Implementation_Error extends \Exception
    {
    }
    /**
     * Class Tribe__Repository__Query_Filters
     *
     * @since 4.7.19
     */
    class Tribe__Repository__Query_Filters
    {
        /**
         * Indicates something has to happen "after" something else. The specific meaning is contextual.
         *
         * @since 4.9.21
         */
        const AFTER = 'after:';
        /**
         * @var array
         */
        protected static $initial_query_vars = ['like' => ['post_title' => [], 'post_content' => [], 'post_excerpt' => []], 'status' => [], 'join' => [], 'where' => []];
        /**
         * An array of the filters that can be set and unset by id.
         *
         * @since 4.9.14
         *
         * @var array
         */
        protected static $identifiable_filters = ['fields', 'join', 'where', 'orderby'];
        /**
         * @var array
         */
        protected $query_vars;
        /**
         * @var WP_Query
         */
        protected $current_query;
        /**
         * @var int A reasonably large number for the LIMIT clause.
         */
        protected $really_large_number = 99999999;
        /**
         * @var array A list of the filters this class has added.
         */
        protected $active_filters = [];
        /**
         * @var bool
         */
        protected $buffer_where_clauses = \false;
        /**
         * @var array
         */
        protected $buffered_where_clauses = [];
        /**
         * Stores the last request run by the current query.
         *
         * @var string
         */
        protected $last_request;
        /**
         * Tribe__Repository__Query_Filters constructor.
         *
         * @since 4.7.19
         */
        public function __construct()
        {
        }
        /**
         * Builds an "not exists or is not in" media query.
         *
         * @since 4.7.19
         *
         * @param array|string     $meta_keys On what meta_keys the check should be made.
         * @param int|string|array $values    A single value, an array of values or a CSV list of values.
         * @param string           $query_slug
         *
         * @return array
         */
        public static function meta_not_in($meta_keys, $values, $query_slug)
        {
        }
        /**
         * Builds an "exists and is in" media query.
         *
         * @since 4.7.19
         *
         * @param array|string     $meta_keys On what meta_keys the check should be made.
         * @param int|string|array $values    A single value, an array of values or a CSV list of values.
         * @param string           $query_slug
         *
         * @return array
         */
        public static function meta_in($meta_keys, $values, $query_slug)
        {
        }
        /**
         * Builds a meta query to check that at least of the meta key exists.
         *
         * @since 4.7.19
         *
         * @param array|string $meta_keys
         * @param string       $query_slug
         *
         * @return array
         */
        public static function meta_exists($meta_keys, $query_slug)
        {
        }
        /**
         * Builds a meta query to check that a meta is either equal to a value or
         * not exists.
         *
         * @since 4.7.19
         *
         * @param array|string $meta_keys
         * @param array|string $values
         * @param string       $query_slug
         *
         * @return array
         */
        public static function meta_in_or_not_exists($meta_keys, $values, $query_slug)
        {
        }
        /**
         * Builds a meta query to check that a meta is either not equal to a value or
         * not exists.
         *
         * @since 4.7.19
         *
         * @param array|string $meta_keys
         * @param array|string $values
         * @param string       $query_slug
         *
         * @return array
         */
        public static function meta_not_in_or_not_exists($meta_keys, $values, $query_slug)
        {
        }
        /**
         * Filters the WHERE clause of the query to match posts with a field like.
         *
         * @since 4.7.19
         *
         * @param string   $where
         * @param WP_Query $query
         *
         * @return string
         */
        public function filter_by_like($where, \WP_Query $query)
        {
        }
        /**
         * Builds the escaped WHERE entry to match a field like the entry.
         *
         * @since 4.7.19
         *
         * @param string $field
         * @param string $entry
         *
         * @return string
         */
        protected function and_field_like($field, $entry)
        {
        }
        /**
         * Filters the found posts value to apply filtering and selections on the PHP
         * side of things.
         *
         * Here we perform, after the query did run, further filtering operations that would
         * result in more JOIN and/or sub-SELECT clauses being added to the query.
         *
         * @since 4.7.19
         *
         * @param int      $found_posts The number of found posts.
         * @param WP_Query $query       The current query object.
         *
         * @return string
         */
        public function filter_found_posts($found_posts, \WP_Query $query)
        {
        }
        /**
         * Sets the current query object.
         *
         * @since 4.7.19
         *
         * @param WP_Query $query
         */
        public function set_query(\WP_Query $query)
        {
        }
        /**
         * Sets up `posts_where` filtering to get posts with a title like the value.
         *
         * @since 4.7.19
         *
         * @param string $value
         */
        public function to_get_posts_with_title_like($value)
        {
        }
        /**
         * Proxy method to add a  filter calling the WordPress `add_filter` function
         * and keep track of it.
         *
         * @since 4.7.19
         *
         * @param string   $tag
         * @param callable $function_to_add
         * @param int      $priority
         * @param int      $accepted_args
         */
        protected function add_filter($tag, $function_to_add, $priority = 10, $accepted_args = 1)
        {
        }
        /**
         * Sets up `posts_where` filtering to get posts with a content like the value.
         *
         * @since 4.7.19
         *
         * @param string $value
         */
        public function to_get_posts_with_content_like($value)
        {
        }
        /**
         * Sets up `posts_where` filtering to get posts with an excerpt like the value.
         *
         * @since 4.7.19
         *
         * @param string $value
         */
        public function to_get_posts_with_excerpt_like($value)
        {
        }
        /**
         * Sets up `posts_where` filtering to get posts with a filtered content like the value.
         *
         * @since 4.7.19
         *
         * @param string $value
         */
        public function to_get_posts_with_filtered_content_like($value)
        {
        }
        /**
         * Sets up `posts_where` filtering to get posts with a guid that equals the value.
         *
         * @since 4.7.19
         *
         * @param string $value
         */
        public function to_get_posts_with_guid_like($value)
        {
        }
        /**
         * Sets up `posts_where` filtering to get posts with a `to_ping` field equal to the value.
         *
         * @since 4.7.19
         *
         * @param string $value
         */
        public function to_get_posts_to_ping($value)
        {
        }
        /**
         * Filters the WHERE clause of the query to match posts with a specific `to_ping`
         * entry.
         *
         * @since 4.7.19
         *
         * @param string   $where
         * @param WP_Query $query
         *
         * @return string
         */
        public function filter_by_to_ping($where, \WP_Query $query)
        {
        }
        /**
         * Builds the escaped WHERE entry to match a field that equals the entry.
         *
         * @since 4.7.19
         *
         * @param string   $where
         * @param WP_Query $query
         * @param string   $field
         * @param string   $prepare
         *
         * @return string
         */
        protected function where_field_is($where, \WP_Query $query, $field, $prepare = '%s')
        {
        }
        /**
         * Removes all the filters this class applied.
         *
         * @since 4.7.19
         */
        public function remove_filters()
        {
        }
        /**
         * Add a custom WHERE clause to the query.
         *
         * @since 4.7.19
         * @since 4.9.14 Added the `$id` and `$override` parameters.
         *
         * @param string      $where_clause
         * @param null|string $id       Optional WHERE ID to prevent duplicating clauses.
         * @param boolean     $override Whether to override the clause if a WHERE by the same ID exists or not.
         */
        public function where($where_clause, $id = \null, $override = \false)
        {
        }
        /**
         * Add a custom JOIN clause to the query.
         *
         * @since 4.7.19
         *
         * @param string      $join_clause JOIN clause.
         * @param null|string $id          Optional JOIN ID to prevent duplicating joins.
         * @param boolean     $override    Whether to override the clause if a JOIN by the same ID exists.
         */
        public function join($join_clause, $id = \null, $override = \false)
        {
        }
        /**
         * Add a custom ORDER BY to the query.
         *
         * @since 4.9.5
         * @since 4.9.14 Added the `$id` and `$override` parameters.
         * @since 4.9.21 Added the `$order` and `$after` parameters.
         *
         * @param string|array $orderby       The order by criteria; this argument can be specified in array form to specify
         *                                    multiple order by clauses and orders associated to each,
         *                                    e.g. `[ '_meta_1' => 'ASC', '_meta_2' => 'DESC' ]`. If a simple array is
         *                                    passed, then the order will be set to the default one for each entry.
         *                                    This arguments supports the same formats of the `WP_Query` `orderby` argument.
         * @param null|string  $id            Optional ORDER ID to prevent duplicating order-by clauses.
         * @param boolean      $override      Whether to override the clause if another by the same ID exists.
         * @param bool         $after         Whether to append the order by clause to the ones managed by WordPress or not.
         *                                    Defaults to `false`,to prepend them to the ones managed by WordPress.
         */
        public function orderby($orderby, $id = \null, $override = \false, $after = \false)
        {
        }
        /**
         * Add custom select fields to the query.
         *
         * @since 4.9.5
         * @since 4.9.14 Added the `$id` and `$override` parameters.
         *
         * @param string      $field    The field to add to the result.
         * @param null|string $id       Optional ORDER ID to prevent duplicating order-by clauses..
         * @param boolean     $override Whether to override the clause if another by the same ID exists.
         */
        public function fields($field, $id = \null, $override = \false)
        {
        }
        /**
         * Whether WHERE clauses should be buffered or not.
         *
         * @since 4.7.19
         *
         * @param bool $buffer_clauses
         */
        public function buffer_where_clauses($buffer_clauses)
        {
        }
        /**
         * Returns the buffered WHERE clause and, optionally, cleans
         * and deactivates buffering.
         *
         * @since 4.7.19
         *
         * @param bool $get_clean Whether  to clean the buffered WHERE
         *                        clauses and deactivate buffering before
         *                        returning them or not.
         *
         * @return array
         */
        public function get_buffered_where_clauses($get_clean = \false)
        {
        }
        /**
         * Builds the escaped WHERE entry to match a field not in the entry.
         *
         * @since 4.7.19
         *
         * @param string   $where
         * @param WP_Query $query
         * @param string   $field
         *
         * @return string
         */
        protected function where_field_not_in($where, \WP_Query $query, $field)
        {
        }
        /**
         * Creates a SQL interval of strings.
         *
         * @since 4.7.19
         *
         * @param string|array $input
         *
         * @return string
         */
        public function create_interval_of_strings($input)
        {
        }
        /**
         * Builds a WHERE clause where field is not in interval.
         *
         * @since 4.7.19
         *
         * @param string $field
         * @param string $interval
         *
         * @return string
         */
        protected function and_field_not_in_interval($field, $interval)
        {
        }
        /**
         * Builds the escaped WHERE entry to match a field in the entry.
         *
         * @since 4.7.19
         *
         * @param string   $where
         * @param WP_Query $query
         * @param string   $field
         *
         * @return string
         */
        protected function where_field_in($where, \WP_Query $query, $field)
        {
        }
        /**
         * Builds a AND WHERE clause.
         *
         * @since 4.7.19
         *
         * @param string $field
         * @param string $interval
         *
         * @return string
         */
        protected function and_field_in_interval($field, $interval)
        {
        }
        /**
         * Filter the `posts_where` filter to add custom WHERE clauses.
         *
         * @since 4.7.19
         *
         * @param string   $where
         * @param WP_Query $query
         *
         * @return string
         */
        public function filter_posts_where($where, \WP_Query $query)
        {
        }
        /**
         * Filter the `posts_join` filter to add custom JOIN clauses.
         *
         * @since 4.7.19
         *
         * @param string   $join
         * @param WP_Query $query
         *
         * @return string
         */
        public function filter_posts_join($join, \WP_Query $query)
        {
        }
        /**
         * Filter the `posts_orderby` filter to add custom JOIN clauses.
         *
         * @since 4.9.5
         *
         * @param string   $orderby The `ORDER BY` clause of the query being filtered.
         * @param WP_Query $query   The query object currently being filtered.
         *
         * @return string The filtered `ORDER BY` clause.
         */
        public function filter_posts_orderby($orderby, \WP_Query $query)
        {
        }
        /**
         * Filter the `posts_fields` filter to amend fields to be selected.
         *
         * @since 4.9.5
         *
         * @param array    $fields
         * @param WP_Query $query
         *
         * @return string
         */
        public function filter_posts_fields($fields, \WP_Query $query)
        {
        }
        /**
         * Captures the request SQL as built from the query class.
         *
         * This happens on the `posts_pre_query` filter and
         *
         * @since 4.9.5
         *
         * @param null|array $posts A pre-filled array of post results.
         * @param \WP_Query  $query The current query object; this is used by the
         *                          method to intercept only the request generated by
         *                          its attached query.
         *
         * @return array|null An empty array to short-circuit the `get_posts` request; the input
         *                    value, if the query is not the one attached to this filter or the method
         *                    is called not in the context of the `posts_pre_query` filter;
         */
        public function capture_request($posts = \null, \WP_Query $query = \null)
        {
        }
        /**
         * Returns the controlled query request SQL.
         *
         * It's not possible to build the SQL for a query outside of a request to `get_posts`
         * so what this class does is fire such a request intercepting it before it actually
         * runs and returning an empty post array.
         * To really run the query it's sufficien to run `get_posts` again on it.
         *
         * @since 4.9.5
         *
         * @return string The request SQL, as built from the `WP_Query` class including all the
         *                possible filtering applied by this class and other classes.
         */
        public function get_request()
        {
        }
        /**
         * Returns the fields, join, where and orderby clauses for an id.
         *
         * @since 4.9.14
         *
         * @param string $id The identifier of the group to remove.
         *
         * @return array An associative array of identifiable filters and their values, if any.
         *
         * @see   Tribe__Repository__Query_Filters::$identifiable_filters
         */
        public function get_filters_by_id($id)
        {
        }
        /**
         * Removes fields, join, where and orderby clauses for an id.
         *
         * @since 4.9.14
         *
         * @param string $id The identifier of the group to remove.
         */
        public function remove_filters_by_id($id)
        {
        }
        /**
         * Filters the query JOIN and WHERE clauses to filter out posts that either do not have a meta key
         * or whose meta value is not in the provided list.
         *
         * This method is an alternative approach to the static `meta_not_in_or_not_exists` method that avoids
         * the excessive use of JOINs the use of `meta_query` implies.
         *
         * @since 5.1.5
         *
         * @param string|array<string>    $meta_keys  The meta keys to filter by.
         * @param mixed|array<mixed>|null $values     The values to filter by or `null` to filter by existence only.
         * @param string|null             $query_slug The prefix that will be used to distinguish the query from other
         *                                            queries.
         *
         * @return void The method will filter the query JOIN and WHERE clauses.
         */
        public function meta_not($meta_keys, $values = \null, string $query_slug = \null) : void
        {
        }
    }
    /**
     * Class Tribe__Repository__Usage_Error
     *
     * @since 4.7.19
     *
     * Thrown to indicate an error in the repository usage by a developer; this
     * is meant to be used to help developers to use the repository.
     */
    class Tribe__Repository__Usage_Error extends \Exception
    {
        /**
         * Do not ally dynamic set of properties on the repository; protected
         * properties are read-only.
         *
         * @since 4.7.19
         *
         * @param string                       $name   The name of the property the client code is trying to set.
         * @param Tribe__Repository__Interface $object The instance of the repository.
         *
         * @return Tribe__Repository__Usage_Error A ready to throw instance of the class.
         */
        public static function because_properties_should_be_set_correctly($name, $object)
        {
        }
        /**
         * Clearly indicate that a filter is not defined on the repository in use.
         *
         * This is to allow for more clear comprehension of errors related to
         * missing filters.
         *
         * @since 4.7.19
         *
         * @param string                       $key    The filter the client code is trying to use.
         * @param Tribe__Repository__Interface $object The instance of the repository.
         *
         * @return Tribe__Repository__Usage_Error A ready to throw instance of the class.
         */
        public static function because_the_read_filter_is_not_defined($key, $object)
        {
        }
        /**
         * Indicates that a property is not defined on the repository.
         *
         * @since 4.7.19
         *
         * @param string                       $name The name of the property the client code is trying to read.
         * @param Tribe__Repository__Interface $object
         *
         * @return Tribe__Repository__Usage_Error A ready to throw instance of the class.
         */
        public static function because_property_is_not_defined($name, $object)
        {
        }
        /**
         * Indicates that a field cannot be updated by the repository class.
         *
         * @since 4.7.19
         *
         * @param string                              $key
         * @param Tribe__Repository__Update_Interface $object
         *
         * @return Tribe__Repository__Usage_Error A ready to throw instance of the class.
         */
        public static function because_this_field_cannot_be_updated($key, $object)
        {
        }
        /**
         * "Sugar" method to correct a typo in a public method name.
         * Indicates that the `set` method of the Update repository is being used incorrectly.
         *
         * @since 4.12.6
         *
         * @TODO: perhaps we should deprecate this at some point?
         *
         * @param Tribe__Repository__Update_Interface $object
         *
         * @return Tribe__Repository__Usage_Error A ready to throw instance of the class.
         */
        public static function because_udpate_key_should_be_a_string($object)
        {
        }
        /**
         * Indicates that the `set` method of the Update repository is being used incorrectly.
         *
         * @since 4.7.19
         *
         * @param Tribe__Repository__Update_Interface $object
         *
         * @return Tribe__Repository__Usage_Error A ready to throw instance of the class.
         */
        public static function because_update_key_should_be_a_string($object)
        {
        }
        /**
         * Indicates that the client code is trying to use a single comparison operator with multiple values.
         *
         * @since 4.7.19
         *
         * @param string|array $key
         * @param array  $value
         * @param string $compare
         * @param mixed  $object
         *
         * @return Tribe__Repository__Usage_Error A ready to throw instance of the class.
         */
        public static function because_single_value_comparisons_should_be_used_with_one_value($key, array $value, $compare, $object)
        {
        }
        /**
         * Indicates that the client code is calling the query building method without
         * providing all the arguments the comparison operator requires.
         *
         * @since 4.7.19
         *
         * @param string|array $key
         * @param string       $compare
         * @param mixed        $object
         *
         * @return Tribe__Repository__Usage_Error A ready to throw instance of the class.
         */
        public static function because_this_comparison_operator_requires_fields_and_values($key, $compare, $object)
        {
        }
        /**
         * Indicates that the client code is using an high-level filtering method while
         * trying to build a WHERE OR clause.
         *
         * @param array array $method
         * @param mixed $object
         *
         * @return Tribe__Repository__Usage_Error A ready to throw instance of the class.
         */
        public static function because_where_or_should_only_be_used_with_methods_that_add_where_clauses(array $method, $object)
        {
        }
        /**
         * Indicates that the client code is trying to use a wpdb::prepare format with
         * a regular `meta_query`.
         *
         * @param string|array $key
         * @param string       $type_or_format
         *
         * @return Tribe__Repository__Usage_Error A ready to throw instance of the class.
         */
        public static function because_the_type_is_a_wpdb_prepare_format($key, $type_or_format)
        {
        }
        /**
         * Indicates that the client code is trying to use a wpdb::prepare format with
         * a regular `meta_query`.
         *
         * @param string|array $key
         * @param string       $type_or_format
         *
         * @return Tribe__Repository__Usage_Error A ready to throw instance of the class.
         */
        public static function because_the_format_is_not_a_wpdb_prepare_one($key, $type_or_format)
        {
        }
        /**
         * Indicates that the client code is trying to use a comparison operator not supported by a specific filter.
         *
         * @since 4.9.5
         *
         * @param string $operator The not supported comparison operator.
         * @param string $filter   The filter in which the client code is trying to use the current operator.
         *
         * @return Tribe__Repository__Usage_Error A ready to throw instance of the class.
         */
        public static function because_this_comparison_operator_is_not_supported($operator, $filter)
        {
        }
        /**
         * Indicates that the client code is trying to use a comparison operator that requires a value of a specific type
         * wrong.
         *
         * @since 4.9.5
         *
         * @param string $operator The operator the client code is using.
         * @param string $filter   The filter the client code is using.
         * @param string $type     The required value type for this operator and this filter.
         *
         * @return Tribe__Repository__Usage_Error A ready to throw instance of the class.
         */
        public static function because_this_comparison_operator_requires_an_value_of_type($operator, $filter, $type)
        {
        }
        /**
         * Indicates that the client code is trying to use a comparison operator that is not valid..
         *
         * @since 4.9.6
         *
         * @param string $operator The not supported comparison operator.
         *
         * @return Tribe__Repository__Usage_Error A ready to throw instance of the class.
         */
        public static function because_this_comparison_operator_is_not_valid($operator)
        {
        }
        /**
         * Indicates that the client code is trying to use a relation that is not valid..
         *
         * @since 4.9.6
         *
         * @param string $relation The not supported relation.
         *
         * @return Tribe__Repository__Usage_Error A ready to throw instance of the class.
         */
        public static function because_this_relation_is_not_valid($relation)
        {
        }
        /**
         * Indicates that the client code is trying to set a query on the repository after the query ran.
         *
         * @since 4.9.9
         *
         * @return Tribe__Repository__Usage_Error A ready to throw instance of the class.
         */
        public static function because_query_cannot_be_set_after_it_ran()
        {
        }
        /**
         * Indicates the client code is trying to call a filter without the correct number of req. parameters.
         *
         * @since 4.10.2
         *
         * @param string $filter        The called filter.
         * @param array  $required_args The human-readable name of the required arguments.
         *
         * @return static A ready to throw instance of the class.
         */
        public static function because_filter_requires_args($filter, array $required_args)
        {
        }
        /**
         * Indicates the client code is trying to call a filter with an invalid parameter.
         *
         * @since 4.10.2
         *
         * @param string $filter   The called filter.
         * @param string $arg_name The human-readable name of the parameter.
         *
         * @return static A ready to throw instance of the class.
         */
        public static function because_filter_arg_is_not_valid($filter, $arg_name)
        {
        }
    }
    /**
     * Class Tribe__Repository__Void_Query_Exception
     *
     * Thrown to indicate that a query would yield no results in read, write, delete or update operations.
     *
     * Repository implementations should handle this exception gracefully as
     * a signal, not an error.
     *
     * @since 4.7.19
     */
    class Tribe__Repository__Void_Query_Exception extends \Exception
    {
        /**
         * Indicates that query would yield no results.
         *
         * @since 4.7.19
         *
         * @param string $reason
         *
         * @return Tribe__Repository__Void_Query_Exception
         */
        public static function because_the_query_would_yield_no_results($reason)
        {
        }
    }
}
namespace Tribe\Traits {
    /**
     * Class Cache_User
     *
     * @since   4.9.11
     *
     * @package Tribe
     */
    trait Cache_User
    {
        /**
         * An array of caches and data for each key.
         *
         * @var array
         */
        protected $caches = [];
        /**
         * Dumps the temporary cache to the persistent one.
         */
        public function dump_cache()
        {
        }
        /**
         * Warms up one of the caches used by the class, if not warmed up already.
         *
         * @since 4.9.11
         *
         * @param string $key                The key of the cache to warm up.
         * @param int    $expiration         The expiration, in seconds, to set on the cache.
         * @param string $expiration_trigger The expiration trigger to set on the cache; this should be one of those
         *                                   supported by the `Tribe__Cache_Listener` class.
         *
         * @see \Tribe__Cache_Listener::add_hooks()
         */
        protected function warmup_cache($key, $expiration = 0, $expiration_trigger = '')
        {
        }
        /**
         * Resets the instance caches for the this instance.
         *
         * @since 4.11.0
         *
         * @return string[] A list of the emptied cache properties.
         */
        public function reset_caches()
        {
        }
    }
}
namespace {
    /**
     * Class Tribe__Rewrite
     *
     * Utilities to generate and manipulate rewrite rules.
     *
     * @since 4.3
     */
    class Tribe__Rewrite
    {
        use \Tribe\Traits\Cache_User;
        /**
         * If we wish to setup a rewrite rule that uses percent symbols, we'll need
         * to make use of this placeholder.
         */
        const PERCENT_PLACEHOLDER = '~~TRIBE~PC~~';
        /**
         * Static singleton variable.
         *
         * @var static
         */
        public static $instance;
        /**
         * A delimiter used to separate  a localized matcher from its base in the format `<loc_matcher><delim><base>`.
         *
         * @since 4.11.5
         *
         * @var string
         */
        public static $localized_matcher_delimiter = '~';
        /**
         * WP_Rewrite Instance
         *
         * @var WP_Rewrite
         */
        public $rewrite;
        /**
         * Rewrite rules Holder
         *
         * @var array
         */
        public $rules = [];
        /**
         * Base slugs for rewrite urls
         *
         * @var array
         */
        public $bases = [];
        /**
         * After creating the Hooks on WordPress we lock the usage of the function.
         *
         * @var boolean
         */
        protected $hook_lock = \false;
        /**
         * An array cache of resolved canonical URLs in the shape `[ <url> => <canonical_url> ]`.
         *
         * @since 4.9.11
         *
         * @var array
         */
        protected $canonical_url_cache = \null;
        /**
         * An array cache of parsed URLs in the shape `[ <url> => <parsed_vars> ]`.
         *
         * @since 4.9.11
         *
         * @var array
         */
        protected $parse_request_cache = \null;
        /**
         * And array cache of cleaned URLs.
         *
         * @since 4.9.11
         *
         * @var array
         */
        protected $clean_url_cache = \null;
        /**
         * A reference to the Locale Switcher instance.
         *
         * @since 5.0.8
         *
         * @var Translations_Loader
         */
        protected $translations_loader;
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        /**
         * Tribe__Rewrite constructor.
         *
         * @since 5.1.7 Removed type hinting. This causes issues with Dependency Injection passing empty objects.
         *
         * @param WP_Rewrite|null          $wp_rewrite          An instance of the `WP_Rewrite` class.
         * @param Translations_Loader|null $translations_loader An instance of the translations loader.
         */
        public function __construct($wp_rewrite = \null, \TEC\Common\Translations_Loader $translations_loader = \null)
        {
        }
        /**
         * When you are going to use any of the functions to create new rewrite rules you need to setup first
         *
         * @param WP_Rewrite|null $wp_rewrite Pass the WP_Rewrite if you have it
         *
         * @return Tribe__Rewrite       The modified version of the class with the required variables in place
         */
        public function setup($wp_rewrite = \null)
        {
        }
        /**
         * Generate the Rewrite Rules
         *
         * @param WP_Rewrite $wp_rewrite WordPress Rewrite that will be modified, pass it by reference (&$wp_rewrite)
         */
        public function filter_generate(\WP_Rewrite $wp_rewrite)
        {
        }
        /**
         * Do not allow people to Hook methods twice by mistake
         */
        public function hooks($remove = \false)
        {
        }
        /**
         * Converts any percentage placeholders in the array keys back to % symbols.
         *
         * @param array $rules
         *
         * @return array
         */
        public function remove_percent_placeholders(array $rules)
        {
        }
        /**
         * Filter for the `rewrite_rules_array` hook.
         *
         * @since 5.0.10
         *
         * @param array|mixed $rules The rules to be filtered.
         *
         * @return array|mixed Rules after filtering.
         */
        public function filter_rewrite_rules_array($rules)
        {
        }
        protected function add_hooks()
        {
        }
        protected function remove_hooks()
        {
        }
        /**
         * Determines if we have plain permalink.
         *
         * @since 4.11.2
         *
         * @return bool If we use plain permalink or not.
         */
        public static function is_plain_permalink()
        {
        }
        /**
         * Get the base slugs for the rewrite rules.
         *
         * WARNING: Don't mess with the filters below if you don't know what you are doing
         *
         * @param string $method Use "regex" to return a Regular Expression with the possible Base Slugs using l10n
         *
         * @return object         Return Base Slugs with l10n variations
         */
        public function get_bases($method = 'regex')
        {
        }
        /**
         * The base method for creating a new Rewrite rule
         *
         * @param array|string $regex The regular expression to catch the URL
         * @param array        $args  The arguments in which the regular expression "alias" to
         *
         * @return Tribe__Events__Rewrite
         */
        public function add($regex, $args = [])
        {
        }
        /**
         * Returns a sanitized version of $slug that can be used in rewrite rules.
         *
         * This is ideal for those times where we wish to support internationalized
         * URLs (ie, where "venue" in "venue/some-slug" may be rendered in non-ascii
         * characters).
         *
         * In the case of registering new post types, $permastruct_name should
         * generally match the CPT name itself.
         *
         * @param string $slug
         * @param string $permastruct_name
         * @param string $is_regular_exp
         *
         * @return string
         */
        public function prepare_slug($slug, $permastruct_name, $is_regular_exp = \true)
        {
        }
        /**
         * A way to replace an Array key without destroying the array ordering
         *
         * @since  4.0.6
         *
         * @param array  &$array   The Rules Array should be used here
         * @param string  $search  Search for this Key
         * @param string  $replace Replace with this key]
         *
         * @return bool            Did we replace anything?
         */
        protected function replace_array_key(&$array, $search, $replace)
        {
        }
        /**
         * Returns the canonical URLs associated with a ugly link.
         *
         * This method will handle "our" URLs to go from their ugly form, filled with query vars, to the "pretty" one, if
         * possible.
         *
         * @since 4.9.11
         *
         * @param string $url   The URL to try and translate into its canonical form.
         * @param bool   $force Whether to try and use the cache or force a new canonical URL conversion.
         *
         * @return string The canonical URL, or the input URL if it could not be resolved to a canonical one.
         */
        public function get_canonical_url($url, $force = \false)
        {
        }
        /**
         * Returns an array of rewrite rules handled by the implementation.
         *
         * @since 4.9.11
         *
         * @return array An array of rewrite rules handled by the implementation in the shape `[ <regex> => <path> ]`.
         */
        protected function get_handled_rewrite_rules()
        {
        }
        /**
         * Returns a map relating localized regex matchers to query vars.
         *
         * @since 4.9.11
         *
         * @return array A map of localized regex matchers in the shape `[ <localized_regex> => <query_var> ]`.
         */
        protected function get_localized_matchers()
        {
        }
        /**
         * Returns a map relating localized matcher slugs to the corresponding query var.
         *
         * @since 4.9.11
         *
         * @return array A map relating localized matcher slugs to the corresponding query var.
         */
        protected function get_matcher_to_query_var_map()
        {
        }
        /**
         * Return a list of the query vars handled in the input rewrite rules.
         *
         * @since 4.9.11
         *
         * @param array $rules A set of rewrite rules in the shape `[ <regex> => <path> ]`.
         *
         * @return array A list of all the query vars handled in the rules.
         */
        protected function get_rules_query_vars(array $rules)
        {
        }
        /**
         * Sets up the dynamic matchers based on the link query vars.
         *
         * @since 4.9.11
         *
         * @param array $query_vars An map of query vars and their values.
         *
         * @return array A map of dynamic matchers in the shape `[ <regex> => <value> ]`.
         */
        protected function get_dynamic_matchers(array $query_vars)
        {
        }
        /**
         * Returns a list of post types supported by the implementation.
         *
         * @since 4.9.11
         *
         * @return array<string> An array of post types supported and handled by the rewrite implementation.
         */
        protected function get_post_types()
        {
        }
        /**
         * Parses a URL to produce an array of query variables.
         *
         * Most of this functionality was copied from `WP::parse_request()` method
         * with some changes to avoid conflicts and removing non-required behaviors.
         *
         * @since  4.9.11
         *
         * @param string $url              The URLto parse.
         * @param array  $extra_query_vars An associative array of extra query vars to use for the parsing. These vars will
         *                                 be read before the WordPress defined ones overriding them.
         * @param bool   $force            Whether to try and use the cache or force a new canonical URL conversion.
         *
         * @return array An array of query vars, as parsed from the input URL.
         */
        public function parse_request($url, array $extra_query_vars = [], $force = \false)
        {
        }
        /**
         * Returns the "clean" version of a URL.
         *
         * The URL is first parsed then resolved to a canonical URL.
         * As an example the URL `/events/list/?post_type=tribe_events` is "dirty" in that the `post_type` query variable
         * is redundant. The clean version of the URL is `/events/list/`, where the query variable is removed.
         *
         * @since 4.9.11
         *
         * @param string $url   The URL to clean.
         * @param bool   $force Whether to try and use the cache or force a new URL cleaning run.
         *
         * @return string The cleaned URL, or the input URL if it could not be resolved to a clean one.
         */
        public function get_clean_url($url, $force = \false)
        {
        }
        /**
         * Filters the localized matcher to allow integrations to provider contextual translations of the matcher.
         *
         * @since 5.0.17
         *
         * @param string|null $localized_matcher The localized matcher.
         * @param string      $base              The base the localized matcher is for.
         *
         * @return string The localized matcher.
         */
        protected function filter_matcher(?string $localized_matcher, string $base) : string
        {
        }
    }
}
namespace Tribe\Service_Providers {
    /**
     * Class Body_Classes
     *
     * @since 4.12.6
     *
     * Handles the registration and creation of our async process handlers.
     */
    class Body_Classes extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 4.12.6
         */
        public function register()
        {
        }
        /**
         * Hook in and add FE body classes.
         *
         * @since 4.12.6
         *
         * @param array $classes An array of body class names.
         * @return array The modified array of body class names.
         */
        public function add_body_classes($classes = [])
        {
        }
        /**
         * Hook in and add admin body classes.
         *
         * @since 4.12.6
         *
         * @param array $classes An array of body class names.
         * @return array The modified array of body class names.
         */
        public function add_admin_body_classes($classes = [])
        {
        }
    }
    /**
     * Class Crons
     *
     * @since   4.12.6
     *
     * @package Tribe\Service_Providers
     */
    class Crons extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Registers the filters required by the provider to manage cron processes.
         *
         * @since 4.12.6
         */
        public function register()
        {
        }
    }
}
namespace {
    class Tribe__Service_Providers__Debug_Bar extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         */
        public function register()
        {
        }
        /**
         * Adds The Events Calendar panels to the Debug Bar panels.
         *
         * @since 4.9.5
         *
         * @param Debug_Bar_Panel[] $panels The current list of Debug Bar panels.
         *
         * @return array A modified list of Debug Bar panels.
         */
        public function add_panels(array $panels)
        {
        }
    }
}
namespace Tribe\Service_Providers {
    /**
     * Class Dialog
     *
     * @since 4.10.0
     *
     * Handles the registration and creation of our async process handlers.
     */
    class Dialog extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 4.10.0
         */
        public function register()
        {
        }
        /**
         * {@inheritdoc}
         *
         * @since  4.10.0
         */
        public function template_public_namespace($namespace, $obj)
        {
        }
        /**
         * Register assets associated with dialog
         *
         * @since 4.10.0
         */
        public function register_dialog_assets()
        {
        }
    }
    /**
     * Class Onboarding
     *
     * @since 4.14.9
     *
     * Handles the registration and creation of our async process handlers.
     */
    class Onboarding extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * The Onboarding assets group identifier.
         *
         * @var string
         */
        public static $group_key = 'tribe-onboarding';
        /**
         * Binds and sets up implementations.
         *
         * @since 4.14.9
         */
        public function register()
        {
        }
        /**
         * Set up hooks for classes.
         *
         * @since 4.14.9
         */
        protected function hooks()
        {
        }
        /**
         * Register assets associated with onboarding.
         *
         * @since 4.14.9
         */
        public function register_assets()
        {
        }
        /**
         * Define if the assets for `Onboarding` should be enqueued or not.
         *
         * @since 4.14.9
         *
         * @return bool If the Onboarding assets should be enqueued or not.
         */
        public function should_enqueue_assets()
        {
        }
        /**
         * Check if the onboarding is enabled or not.
         *
         * @since 4.14.9
         *
         * @return bool
         */
        public function is_enabled()
        {
        }
    }
    /**
     * Hooks and manages the implementation and loading of PUE.
     *
     * We are still moving pieces into this Service Provider, so look around
     * the `src/Tribe/PUE/` folder for other items that are not managed here
     * just yet.
     *
     * @since 4.9.12
     */
    class PUE extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since  4.9.12
         */
        public function register()
        {
        }
        /**
         * Registers the provider handling all the 1st level filters and actions for PUE.
         *
         * @since 4.9.2
         */
        protected function register_hooks()
        {
        }
        /**
         * Filters the source file location for the upgrade package for the PUE Update_Prevention engine.
         *
         * @since  4.9.12
         *
         * @param string      $source        File source location.
         * @param string      $remote_source Remote file source location.
         * @param WP_Upgrader $upgrader      WP_Upgrader instance.
         * @param array       $extra         Extra arguments passed to hooked filters.
         */
        public function filter_upgrader_source_selection($source, $remote_source, $upgrader, $extras)
        {
        }
    }
}
namespace {
    /**
     * Class Tribe__Service_Providers__Processes
     *
     * @since 4.7.12
     *
     * Handles the registration and creation of our async process handlers.
     */
    class Tribe__Service_Providers__Processes extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * An array of all handler actions registered in this HTTP request.
         *
         * This is an array cache with a request lifetime by design.
         *
         * @var array
         */
        protected $handler_actions;
        /**
         * An array of all queue actions registered in this HTTP request.
         *
         * This is an array cache with a request lifetime by design.
         *
         * @var array
         */
        protected $queue_actions;
        /**
         * An instance of the context abstraction layer.
         *
         * @var Tribe__Context
         */
        protected $context;
        /**
         * Hooks the filters and binds the implementations needed to handle processes.
         */
        public function register()
        {
        }
        /**
         * Hooks the correct handler for the action.
         *
         * @since 4.7.12
         *
         * @param string $action
         */
        protected function hook_handler_for($action)
        {
        }
        /**
         * Hooks the correct queue for the action.
         *
         * @since 4.7.12
         *
         * @param string $action
         */
        protected function hook_queue_for($action)
        {
        }
        /**
         * Returns the action for the handler.
         *
         * @since 4.7.12
         *
         * @param string $handler_class
         *
         * @return string
         */
        protected function get_handler_action($handler_class)
        {
        }
        /**
         * Returns the action for the queue.
         *
         * @since 4.7.12
         *
         * @param string $queue_class
         *
         * @return string
         */
        protected function get_queue_action($queue_class)
        {
        }
        /**
         * Dispatches the request, if in AJAX context of a valid queue processing request,
         *  to the correct handler.
         *
         * @since 4.7.23
         */
        protected function dispatch_async()
        {
        }
        /**
         * Start the process handlers if in the context of a cron process and
         * if any is registered.
         *
         * @since 4.7.23
         */
        protected function dispatch_cron()
        {
        }
        /**
         * Hooks the correct queue or process handler for an action if any.
         *
         * @since 4.7.23
         *
         * @param string $action The action to hook the handler, or queue, for.
         */
        protected function hook_handler_for_action($action)
        {
        }
        /**
         * Parses the `cron` array to return the hook names starting with a pattern.
         *
         * @since 4.7.23
         *
         * @param string|array $needles A pattern to look for or an array of patterns; if
         *                              this is an array then a match will be an hook that
         *                              matches at least one pattern.
         *
         * @return array An array of hook names matching the pattern.
         */
        protected function get_scheduled_like($needles)
        {
        }
    }
    /**
     * Class Tribe__Service_Providers__Promoter_Connector
     *
     * @since 4.9
     *
     * Handles the registration and creation of our async process handlers.
     */
    class Tribe__Service_Providers__Promoter extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         */
        public function register()
        {
        }
        /**
         * Add Admin Bar link to the promoter website
         *
         * @since 4.9.2
         * @param $wp_admin_bar
         */
        public function add_promoter_logo_on_admin_bar($wp_admin_bar)
        {
        }
        /**
         * Register assets associated with promoter
         *
         * @since 4.9.2
         */
        public function add_promoter_assets()
        {
        }
        /**
         * Only load the styles related to promoter if user is logged in and there's a valid license
         * for promoter
         *
         * @since 4.9.2
         *
         * @return bool
         */
        public function should_load_promoter_styles()
        {
        }
    }
}
namespace Tribe\Service_Providers {
    /**
     * Class Shortcode
     *
     * @since   4.12.0
     *
     * @package Tribe\Service_Providers
     */
    class Shortcodes extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 4.12.0
         */
        public function register()
        {
        }
        /**
         * Static method wrapper around a filter to allow full deactivation of this provider
         *
         * @since 4.12.0
         *
         * @return boolean If this service provider is active.
         */
        public static function is_active()
        {
        }
        /**
         * Register all the assets associated with this service provider.
         *
         * @since 4.12.0
         */
        protected function register_assets()
        {
        }
        /**
         * Registers the provider handling all the 1st level filters and actions for this service provider.
         *
         * @since 4.12.0
         */
        protected function register_hooks()
        {
        }
        /**
         * Adds the new shortcodes, this normally will trigger on `init@P20` due to how we the
         * v1 is added on `init@P10` and we remove them on `init@P15`.
         *
         * It's important to leave gaps on priority for better injection.
         *
         * @since 4.12.0
         */
        public function action_add_shortcodes()
        {
        }
        /**
         * Filters `pre_do_shortcode_tag` to mark that a tribe shortcode is currently being done.
         *
         * @since 4.12.9
         *
         * @param bool|string $return      Short-circuit return value. Either false or the value to replace the shortcode with.
         * @param string      $tag         Shortcode name.
         * @param array       $attr        Shortcode attributes array,
         * @param array       $m           Regular expression match array.
         *
         * @return bool|string Short-circuit return value.
         */
        public function filter_pre_do_shortcode_tag($false, $tag, $attr, $m)
        {
        }
        /**
         * * Filters `do_shortcode_tag` to mark that a tribe shortcode is complete, and remove it from the current list.
         *
         * @since 4.12.9
         *
         * @param string       $output Shortcode output.
         * @param string       $tag    Shortcode name.
         * @param array|string $attr   Shortcode attributes array or empty string.
         * @param array        $m      Regular expression match array.
         *
         * @return string Shortcode output.
         */
        public function filter_do_shortcode_tag($output, $tag, $attr, $m)
        {
        }
    }
    /**
     * Class Tribe__Service_Providers__Tooltip
     *
     * @since 4.9.8
     *
     * Handles the registration and creation of our async process handlers.
     */
    class Tooltip extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 4.9.8
         */
        public function register()
        {
        }
        /**
         * Register assets associated with tooltip
         *
         * @since 4.9.8
         */
        public function add_tooltip_assets()
        {
        }
    }
    /**
     * Class Widget
     *
     * @since   4.12.12
     *
     * @package Tribe\Service_Providers
     */
    class Widgets extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 4.12.12
         */
        public function register()
        {
        }
        /**
         * Static method wrapper around a filter to allow full deactivation of this provider.
         *
         * @since 4.12.12
         *
         * @return boolean If this service provider is active.
         */
        public static function is_active()
        {
        }
        /**
         * Registers the provider handling all the 1st level filters and actions for this service provider.
         *
         * @since 4.12.12
         */
        protected function register_hooks()
        {
        }
        /**
         * Adds the new widgets.
         *
         * This triggers on `init@P20` due to how v1 is added on `init@P10` and removed on `init@P15`,
         * as it's important to leave gaps on priority for future flexibility.
         *
         * @since 4.12.12
         */
        public function register_widgets_with_wp()
        {
        }
    }
}
namespace {
    /**
     * helper class that allows registration of settings
     * this is a static class & uses the singleton design method
     * instantiation takes place in Tribe__Main
     *
     */
    class Tribe__Settings
    {
        /**
         * Slug of the parent menu slug.
         *
         * @var string
         */
        public static $parent_slug = 'tribe-common';
        /**
         * Page of the parent menu.
         *
         * @var string
         */
        public static $parent_page = 'edit.php';
        /**
         * @var Tribe__Admin__Live_Date_Preview
         */
        public $live_date_preview;
        /**
         * The tabs that will appear in the settings page
         * filtered on class construct.
         *
         * @var array
         */
        public $tabs;
        /**
         * All the tabs registered, not just the ones that will appear.
         *
         * @var array
         */
        public $allTabs;
        /**
         * Multidimensional array of the fields that will be generated
         * for the entire settings panel, tabs are represented in the array keys.
         *
         * @var array
         */
        public $fields;
        /**
         * The default tab for the settings panel
         * this should be a tab ID.
         *
         * @var string
         */
        public $defaultTab;
        /**
         * The current tab being displayed.
         *
         * @var string
         */
        public $currentTab;
        /**
         * Tabs that shouldn't show the save button.
         *
         * @var array
         */
        public $noSaveTabs;
        /**
         * The slug used in the admin to generate the settings page.
         *
         * @var string
         */
        public $adminSlug;
        /**
         * The slug used in the admin to generate the help page.
         *
         * @var string
         */
        protected $help_slug;
        /**
         * The menu name used for the settings page.
         *
         * @var string
         */
        public $menuName;
        /**
         * The required capability for the settings page.
         *
         * @var string
         */
        public $requiredCap;
        /**
         * Errors that occur after a save operation.
         *
         * @var mixed
         */
        public $errors;
        /**
         * POST data before/after save.
         *
         * @var mixed
         */
        public $sent_data;
        /**
         * The $current_screen name corresponding to the admin page.
         *
         * @var string
         */
        public $admin_page;
        /**
         * True if a major error that prevents saving occurred.
         *
         * @var bool
         */
        public $major_error;
        /**
         * Holds validated fields.
         *
         * @var array
         */
        public $validated;
        /**
         * The settings page URL.
         *
         * @var string
         */
        protected $url;
        /**
         * An array defining the suite root plugins.
         *
         * @var array
         */
        protected $root_plugins = ['the-events-calendar/the-events-calendar.php', 'event-tickets/event-tickets.php'];
        /**
         * An associative array in the form [ <tab-slug> => array(...<fields>) ]
         *
         * @var array
         */
        protected $fields_for_save = [];
        /**
         * An array that contains the fields that are currently being validated.
         *
         * @var array
         */
        protected $current_fields = [];
        /**
         * Static Singleton Factory Method.
         *
         * @return Tribe__Settings
         */
        public static function instance()
        {
        }
        /**
         * Class constructor.
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Hooks the actions and filters required for the class to work.
         */
        public function hook()
        {
        }
        /**
         * Determines whether or not the full admin pages should be initialized.
         *
         * @return boolean
         */
        public function should_setup_pages()
        {
        }
        /**
         * create the main option page
         *
         * @return void
         */
        public function addPage()
        {
        }
        /**
         * create the network options page
         *
         * @return void
         */
        public function addNetworkPage()
        {
        }
        /**
         * Init all the tabs.
         *
         * @return void
         */
        public function initTabs()
        {
        }
        /**
         * Get the current settings page URL
         *
         * @since 4.15.0
         *
         * @return string The current settings page URL.
         */
        public function get_settings_page_url(array $args = [])
        {
        }
        /**
         * Get the settings page title.
         *
         * @since 4.15.0
         *
         * @param string $admin_page The admin page ID.
         * @return string The settings page title.
         */
        public function get_page_title($admin_page)
        {
        }
        /**
         * Generate the main option page.
         * includes the view file.
         *
         * @since 4.15.0 Add the current page as parameter for the actions.
         *
         * @return void
         */
        public function generatePage()
        {
        }
        /**
         * Generate the tabs in the settings screen.
         *
         * @return void
         */
        public function generateTabs()
        {
        }
        /**
         * Generate the URL for a tab.
         *
         * @since 4.15.0
         *
         * @param string $tab The tab slug.
         *
         * @return string $url The URL.
         */
        public function get_tab_url($tab)
        {
        }
        /**
         * validate the settings
         *
         * @return void
         */
        public function validate()
        {
        }
        /**
         * Save the settings.
         *
         * @since 4.15.0 Add the current page as parameter for the actions.
         *
         * @return void
         */
        public function save()
        {
        }
        /**
         * Display errors, if any, after saving.
         *
         * @return void
         */
        public function displayErrors()
        {
        }
        /**
         * Display success message after saving.
         *
         * @return void
         */
        public function displaySuccess()
        {
        }
        /**
         * Delete temporary options.
         *
         * @return void
         */
        public function deleteOptions()
        {
        }
        /**
         * Returns the main admin settings URL.
         *
         * @return string
         */
        public function get_url(array $args = [])
        {
        }
        /**
         * The "slug" used for adding submenu pages
         *
         * @return string
         */
        public function get_parent_slug()
        {
        }
        /**
         * @return string
         */
        public function get_help_slug()
        {
        }
        /**
         * Determines whether or not the network admin pages should be initialized.
         *
         * When running in parallel with TEC 3.12.4, TEC should be relied on to handle the admin screens
         * that version of TEC (and lower) is tribe-common ignorant. Therefore, tribe-common has to be
         * the smarter, more lenient codebase.
         * Beyond this at least one of the two "root" plugins (The Events Calendar and Event Tickets)
         * should be network activated to add the page.
         *
         * @return boolean
         */
        public function should_setup_network_pages()
        {
        }
        /**
         * Sets what `common` should consider root plugins.
         *
         * @param array $root_plugins An array of plugins in the `<folder>/<file.php>` format.
         */
        public function set_root_plugins(array $root_plugins)
        {
        }
        /**
         * Whether the specified field dependency condition is valid or not depending on
         * its parent field value.
         *
         * @since 4.7.7
         *
         * @param string $field_id The id of the field that might be removed.
         *
         * @return bool `true` if the field dependency condition is valid, `false` if the field
         *              dependency condition is not valid.
         */
        protected function dependency_checks($field_id)
        {
        }
    }
    class Tribe__Settings_Manager
    {
        const OPTION_CACHE_VAR_NAME = 'Tribe__Settings_Manager:option_cache';
        protected static $network_options;
        public static $tribe_events_mu_defaults;
        /**
         * constructor
         */
        public function __construct()
        {
        }
        public function add_hooks()
        {
        }
        /**
         * For performance reasons our options are saved in memory, but we need to make sure we update it when WordPress
         * updates the variable directly.
         *
         * @since 4.11.0
         *
         * @param string $option    Name of the updated option.
         * @param mixed  $old_value The old option value.
         * @param mixed  $value     The new option value.
         *
         * @return void
         */
        public function update_options_cache($option, $old_value, $value)
        {
        }
        /**
         * Init the settings API and add a hook to add your own setting tabs
         *
         * @return void
         */
        public function init_options()
        {
        }
        /**
         * Create setting tabs
         *
         * @return void
         */
        public function do_setting_tabs()
        {
        }
        /**
         * Get all options for the Events Calendar
         *
         * @return array of options
         */
        public static function get_options()
        {
        }
        /**
         * Get value for a specific option
         *
         * @param string $option_name name of option
         * @param string $default     default value
         *
         * @return mixed results of option query
         */
        public static function get_option($option_name, $default = '')
        {
        }
        /**
         * Saves the options for the plugin
         *
         * @param array $options formatted the same as from get_options()
         * @param bool  $apply_filters
         *
         * @return bool
         */
        public static function set_options($options, $apply_filters = \true)
        {
        }
        /**
         * Set an option
         *
         * @param string $name The option key or 'name'.
         * @param mixed  $value The value we want to set.
         *
         * @return bool
         */
        public static function set_option($name, $value)
        {
        }
        /**
         * Remove an option. Actually remove (unset), as opposed to setting to null/empty string/etc.
         *
         * @since 4.14.13
         *
         * @param string $name The option key or 'name'.
         *
         * @return bool
         */
        public static function remove_option($name)
        {
        }
        /**
         * Get all network options for the Events Calendar
         *
         * @return array of options
         * @TODO add force option, implement in setNetworkOptions
         */
        public static function get_network_options()
        {
        }
        /**
         * Get value for a specific network option
         *
         * @param string $option_name name of option
         * @param string $default    default value
         *
         * @return mixed results of option query
         */
        public static function get_network_option($option_name, $default = '')
        {
        }
        /**
         * Saves the network options for the plugin
         *
         * @param array $options formatted the same as from get_options()
         * @param bool  $apply_filters
         *
         * @return void
         */
        public static function set_network_options($options, $apply_filters = \true)
        {
        }
        /**
         * Add the network admin options page
         *
         * @return void
         */
        public static function add_network_options_page()
        {
        }
        /**
         * Render network admin options view
         *
         * @return void
         */
        public static function do_network_settings_tab()
        {
        }
        /**
         * Registers the license key management tab in the Events > Settings screen,
         * only if premium addons are detected.
         */
        protected function do_licenses_tab()
        {
        }
        /**
         * Create the help tab
         */
        public function do_help_tab()
        {
        }
        /**
         * Add help menu item to the admin (unless blocked via network admin settings).
         *
         * @deprecated 5.0.2
         */
        public function add_help_admin_menu_item()
        {
        }
        /**
         * Tries to discover if licensable addons are activated on the same site.
         *
         * @return bool
         */
        protected function have_addons()
        {
        }
        /**
         * Save hidden tabs
         *
         * @return void
         */
        public function save_all_tabs_hidden()
        {
        }
        /**
         * Static Singleton Factory Method
         *
         * @return Tribe__Settings_Manager
         */
        public static function instance()
        {
        }
    }
    /**
     * helper class that creates a settings tab
     * this is a public API, use it to create tabs
     * simply by instantiating this class
     *
     */
    class Tribe__Settings_Tab
    {
        /**
         * Tab ID, used in query string and elsewhere
         * @var string
         */
        public $id;
        /**
         * Tab's name
         * @var string
         */
        public $name;
        /**
         * Tab's arguments
         * @var array
         */
        public $args;
        /**
         * Defaults for tabs
         * @var array
         */
        public $defaults;
        /**
         * @var array
         */
        public $fields;
        /**
         * @var boolean
         */
        public $show_save;
        /**
         * @var closure
         */
        public $display_callback;
        /**
         * @var boolean
         */
        public $network_admin;
        /**
         * @var int
         */
        public $priority;
        /**
         * class constructor
         *
         * @param string $id   the tab's id (no spaces or special characters)
         * @param string $name the tab's visible name
         * @param array  $args additional arguments for the tab
         */
        public function __construct($id, $name, $args = [])
        {
        }
        /**
         * filters the tabs array from Tribe__Settings
         * and adds the current tab to it
         * does not add a tab if it's empty
         *
         * @param array $tabs the $tabs from Tribe__Settings
         *
         * @return array $tabs the filtered tabs
         */
        public function addTab($tabs)
        {
        }
        /**
         * Adds this tab to the list of total tabs, even if it is not displayed.
         *
         * @param array $allTabs All the tabs from Tribe__Settings.
         *
         * @return array $allTabs All the tabs.
         */
        public function addAllTabs($allTabs)
        {
        }
        /**
         * filters the fields array from Tribe__Settings
         * and adds the current tab's fields to it
         *
         * @param array $field the $fields from Tribe__Settings
         *
         * @return array $fields the filtered fields
         */
        public function addFields($fields)
        {
        }
        /**
         * sets whether the current tab should show the save
         * button or not
         *
         * @param array $noSaveTabs the $noSaveTabs from Tribe__Settings
         *
         * @return array $noSaveTabs the filtered non saving tabs
         */
        public function showSaveTab($noSaveTabs)
        {
        }
        /**
         * Displays the content for the tab.
         *
         * @return void
         */
        public function doContent()
        {
        }
    }
}
namespace Tribe\Shortcode {
    /**
     * Class Shortcode Manager.
     *
     * @since  4.12.0
     *
     * @package Tribe\Shortcode
     */
    class Manager
    {
        /**
         * Current shortcodes.
         *
         * @since 4.12.9
         *
         * @var array $current_shortcode An array containing the current shortcodes being executed.
         */
        public $current_shortcode = [];
        /**
         * Get the list of shortcodes available for handling.
         *
         * @since  4.12.0
         *
         * @return array An associative array of shortcodes in the shape `[ <slug> => <class> ]`
         */
        public function get_registered_shortcodes()
        {
        }
        /**
         * Verifies if a given shortcode slug is registered for handling.
         *
         * @since  4.12.0
         *
         * @param  string $slug Which slug we are checking if is registered.
         *
         * @return bool Whether a shortcode is registered or not.
         */
        public function is_shortcode_registered($slug)
        {
        }
        /**
         * Verifies if a given shortcode class name is registered for handling.
         *
         * @since  4.12.0
         *
         * @param  string $class_name Which class name we are checking if is registered.
         *
         * @return bool Whether a shortcode is registered, by class.
         */
        public function is_shortcode_registered_by_class($class_name)
        {
        }
        /**
         * Add new shortcodes handler to catch the correct strings.
         *
         * @since  4.12.0
         */
        public function add_shortcodes()
        {
        }
        /**
         * Makes sure we are correctly handling the Shortcodes we manage.
         *
         * @since  4.12.0
         *
         * @param array  $arguments Set of arguments passed to the Shortcode at hand.
         * @param string $content   Contents passed to the shortcode, inside of the open and close brackets.
         * @param string $shortcode Which shortcode tag are we handling here.
         *
         * @return string The rendered shortcode HTML.
         */
        public function render_shortcode($arguments, $content, $shortcode)
        {
        }
        /**
         * Filter `pre_do_shortcode_tag` to add the current shortcode.
         *
         * @since 4.12.9
         *
         * @param bool|string $return      Short-circuit return value. Either false or the value to replace the shortcode with.
         * @param string      $tag         Shortcode name.
         * @param array       $attr        Shortcode attributes array,
         * @param array       $m           Regular expression match array.
         *
         * @return bool|string Short-circuit return value.
         */
        public function filter_pre_do_shortcode_tag($return, $tag, $attr, $m)
        {
        }
        /**
         * Filter `do_shortcode_tag` to remove the shortcode from the `$tribe_current_shortcode` list.
         *
         * @since 4.12.9
         *
         * @param string       $output Shortcode output.
         * @param string       $tag    Shortcode name.
         * @param array|string $attr   Shortcode attributes array or empty string.
         * @param array        $m      Regular expression match array.
         *
         * @return string Shortcode output.
         */
        public function filter_do_shortcode_tag($output, $tag, $attr, $m)
        {
        }
        /**
         * Check if a shortcode is being done.
         *
         * @since 4.12.9
         *
         * @param null|string $tag The shortcode tag name, or null to check if doing any shortcode.
         *
         * @return bool If the shortcode is being done or not.
         */
        public function is_doing_shortcode($tag = null)
        {
        }
    }
    /**
     * Interface Shortcode_Interface
     *
     * @package Tribe\Shortcode
     *
     * @since   4.12.0
     */
    interface Shortcode_Interface
    {
        /**
         * Returns the shortcode slug that allows the shortcode to be built via the shortcode class by slug.
         *
         * @since 4.12.0
         *
         * @return string The shortcode slug.
         */
        public function get_registration_slug();
        /**
         * Configures the base variables for an instance of shortcode.
         *
         * @since 4.12.0
         *
         * @param array|string  $arguments Set of arguments passed to the Shortcode at hand. Empty string if no args.
         * @param string $content   Contents passed to the shortcode, inside of the open and close brackets.
         */
        public function setup($arguments, $content);
        /**
         * Sets the aliased arguments array.
         *
         * @see Tribe__Utils__Array::parse_associative_array_alias() The expected format.
         *
         * @since 4.12.2
         *
         * @param array $alias_map An associative array of aliases: key as alias, value as mapped canonical.
         *                         Example: [ 'alias' => 'canonical', 'from' => 'to', 'that' => 'becomes_this' ]
         */
        public function set_aliased_arguments(array $alias_map);
        /**
         * Gets the aliased arguments array.
         *
         * @since 4.12.2
         *
         * @return array<string,string> The associative array map of aliases and their canonical arguments.
         */
        public function get_aliased_arguments();
        /**
         * Returns the arguments for the shortcode parsed correctly with defaults applied.
         *
         * @since 4.12.0
         *
         * @param array $arguments Set of arguments passed to the Shortcode at hand.
         *
         * @return array<string,mixed> The parsed shortcode arguments map.
         */
        public function parse_arguments(array $arguments);
        /**
         * Returns the array of arguments for this shortcode after applying the validation callbacks.
         *
         * @since 4.12.0
         *
         * @param array $arguments Set of arguments passed to the Shortcode at hand.
         *
         * @return array<string,mixed> The validated shortcode arguments map.
         */
        public function validate_arguments(array $arguments);
        /**
         * Returns the array of callbacks for this shortcode's arguments.
         *
         * @since 4.12.0
         *
         * @return array<string,mixed> A map of the shortcode arguments that have survived validation.
         */
        public function get_validated_arguments_map();
        /**
         * Returns a shortcode default arguments.
         *
         * @since 4.12.0
         *
         * @return array<string,mixed> The shortcode default arguments map.
         */
        public function get_default_arguments();
        /**
         * Returns a shortcode arguments after been parsed.
         *
         * @since 4.12.0
         *
         * @return array<string,mixed> The shortcode arguments, as set by the user in the shortcode string.
         */
        public function get_arguments();
        /**
         * Returns a shortcode argument after it has been parsed.
         *
         * @since 4.12.0
         *
         * @param array|string $index   Which index we indent to fetch from the arguments.
         * @param array        $default Default value if it doesn't exist.
         *
         * @uses  Tribe__Utils__Array::get For index fetching and Default.
         *
         * @return mixed Value for the Index passed as the first argument.
         */
        public function get_argument($index, $default = null);
        /**
         * Returns a shortcode's HTML.
         *
         * @since 4.12.0
         *
         * @return string The shortcode rendered HTML code.
         */
        public function get_html();
    }
    /**
     * The abstract all shortcodes should implement.
     *
     * @package Tribe\Shortcode
     *
     * @since   4.12.0
     */
    abstract class Shortcode_Abstract implements \Tribe\Shortcode\Shortcode_Interface
    {
        /**
         * Slug of the current shortcode.
         *
         * @since 4.12.0
         *
         * @var string
         */
        protected $slug;
        /**
         * Default arguments to be merged into final arguments of the shortcode.
         *
         * @since 4.12.0
         *
         * @var array
         */
        protected $default_arguments = [];
        /**
         * Array map allowing aliased shortcode arguments.
         *
         * The array keys are aliases of the array values (i.e. the "real" shortcode attributes to parse).
         * Example array: [ 'alias' => 'canonical', 'from' => 'to', 'that' => 'becomes_this' ]
         * Example shortcode usage: [some_tag alias=17 to='Fred'] will be parsed as [some_tag canonical=17 to='Fred']
         *
         * @since 4.12.2
         *
         * @var array<string,string>
         */
        protected $aliased_arguments = [];
        /**
         * Array of callbacks for arguments validation.
         *
         * @since 4.12.0
         *
         * @var array
         */
        protected $validate_arguments_map = [];
        /**
         * Arguments of the current shortcode.
         *
         * @since 4.12.0
         *
         * @var array
         */
        protected $arguments;
        /**
         * Content of the current shortcode.
         *
         * @since 4.12.0
         *
         * @var string
         */
        protected $content;
        /**
         * {@inheritDoc}
         */
        public function setup($arguments, $content)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function set_aliased_arguments(array $alias_map)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_aliased_arguments()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function parse_arguments(array $arguments)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function validate_arguments(array $arguments)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_registration_slug()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_validated_arguments_map()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function filter_validated_arguments_map($validate_arguments_map)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_arguments()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_argument($index, $default = null)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_default_arguments()
        {
        }
    }
    /**
     * Class Utils.
     *
     * @since   4.13.0
     *
     * @package Tribe\Shortcode
     */
    class Utils
    {
        /**
         * Convert settings to a set of shortcode attributes.
         *
         * @since 4.13.0
         *
         * @param array<string,mixed> $settings Widget settings.
         * @param array<string>       $allowed  Allowed settings for shortcode.
         *
         * @return string Shortcode attributes string.
         */
        public static function get_attributes_string($settings, $allowed = [])
        {
        }
    }
}
namespace {
    /**
     * A class for outputting a multidimensional array as a straightforward HTML table
     *
     * @todo Remove this in version 5 if it does not see much usage
     */
    class Tribe__Simple_Table
    {
        public $thead;
        public $tbody;
        /*
         * Arrays containing HTML attributes for the table elements
         *
         * Example: $table_attributes = array( 'class' => 'tribe_table', 'border' => '0' );
         */
        public $table_attributes;
        public $tr_attributes;
        public $th_attributes;
        public $td_attributes;
        /**
         * Will HTML escape all table cells
         *
         * @var bool
         */
        public $html_escape_td_values = \true;
        /**
         * Tribe__Simple_Table constructor.
         *
         * @param array $tbody Multidimension array containing table rows/columns
         * @param array $thead Single dimension array containing table headings
         */
        public function __construct($tbody, $thead = [])
        {
        }
        /**
         * @param bool $vertical Whether heading appears vertically (above) data or horizontally (to the side)
         *
         * @return string HTML table
         */
        public function output_table($vertical = \true)
        {
        }
    }
    class Tribe__Support
    {
        public static $support;
        public $rewrite_rules_purged = \false;
        /**
         * The wp_options key used to store the optin_key
         *
         * @since 4.14.5
         *
         * @var string
         */
        public static $option_key = 'tribe_systeminfo_optin';
        /**
         * @var Tribe__Support__Obfuscator
         */
        protected $obfuscator;
        /**
         * Fields listed here contain HTML and should be escaped before being
         * printed.
         *
         * @var array
         */
        protected $must_escape = ['tribeEventsAfterHTML', 'tribeEventsBeforeHTML', 'dateWithYearFormat', 'dateWithoutYearFormat', 'monthAndYearFormat'];
        /**
         * Field prefixes here should be partially obfuscated before being printed.
         *
         * @var array
         */
        protected $must_obfuscate_prefixes = ['pue_install_key_', 'google_maps_js_api_key'];
        /**
         * Display help tab info in events settings
         *
         * @param Tribe__Admin__Help_Page $help The Help Page Instance
         */
        public function append_system_info(\Tribe__Admin__Help_Page $help)
        {
        }
        /**
         * Collect system information for support
         *
         * @return array of system data for support
         */
        public function getSupportStats()
        {
        }
        /**
         * Render system information into a pretty output
         *
         * @return string pretty HTML
         */
        public function formattedSupportStats()
        {
        }
        /**
         * Logs the occurrence of rewrite rule purging
         */
        public function log_rewrite_rule_purge()
        {
        }
        //end log_rewrite_rule_purge
        /**
         * Sets the obfuscator to be used.
         *
         * @param Tribe__Support__Obfuscator $obfuscator
         */
        public function set_obfuscator(\Tribe__Support__Obfuscator $obfuscator)
        {
        }
        /**
         * Creates Fields in Help Tab to Opt In to System Info
         *
         * @return string
         */
        public static function opt_in()
        {
        }
        /**
         * Method to send back sysinfo
         *
         * @param $query
         *
         * @return string|void
         *
         */
        public static function sysinfo_query($query)
        {
        }
        /*
         * Create Unique Endpoint Per Site
         */
        public static function create_sysinfo_endpoint()
        {
        }
        /**
         * Ajax Method to Create Unique Key and send to tec.com
         */
        public static function ajax_sysinfo_optin()
        {
        }
        /**
         * Contact Tribe Website to Add SysInfo Key
         *
         * @param null $optin_key provide key for system info
         * @param null $url domain of current site
         * @param null $remove string used if removing $optin_key from tec.com
         * @param null $pueadd boolean to disable messaging when coming from pue script
         */
        public static function send_sysinfo_key($optin_key = \null, $url = \null, $remove = \null, $pueadd = \false)
        {
        }
        public static function getInstance()
        {
        }
    }
    class Tribe__Support__Obfuscator
    {
        /**
         * @var array
         */
        protected $prefixes = [];
        /**
         * Tribe__Support__Obfuscator constructor.
         *
         * @param array $prefixes
         */
        public function __construct(array $prefixes = [])
        {
        }
        /**
         * Whether a value should be obfuscated or not.
         *
         * @param string $key
         *
         * @return bool
         */
        public function should_obfuscate($key)
        {
        }
        /**
         * Conditionally obfuscates a string value.
         *
         * @param string $key
         * @param mixed $string_value
         *
         * @return mixed Either the obfuscated string or the original value if not a string.
         */
        public function obfuscate($key, $string_value)
        {
        }
    }
    /**
     * Examines a plugin's views directory and builds a list of view filenames
     * and their respective version numbers.
     */
    class Tribe__Support__Template_Checker
    {
        protected $plugin_name = '';
        protected $plugin_version = '';
        protected $plugin_views_dir = '';
        protected $theme_views_dir = '';
        protected $originals = [];
        protected $overrides = [];
        /**
         * Examine the plugin views (and optionally any theme overrides) and analyse
         * the version numbers where possible.
         *
         * @param string $plugin_version
         * @param string $plugin_views_dir
         * @param string $theme_views_dir
         */
        public function __construct($plugin_version, $plugin_views_dir, $theme_views_dir = '')
        {
        }
        /**
         * Given a version number with an alpha/beta type suffix, strips that suffix and
         * returns the "base" version number.
         *
         * For example, given "9.8.2beta1" this method will return "9.8.2".
         *
         * The utility of this is that if the author of a template change sets the
         * version tag in the template header to 9.8.2 (to continue the same example) we
         * don't need to worry about updating that for each alpha, beta or RC we put out.
         *
         * @param string $version_number
         *
         * @return string
         */
        protected function base_version_number($version_number)
        {
        }
        /**
         * Recursively scans the plugin's view directory and examines the template headers
         * of each file it finds within.
         */
        protected function scan_view_directory()
        {
        }
        /**
         * Scans an individual view file, adding it's version number (if found) to the
         * $this->views array.
         *
         * @param SplFileInfo $file
         */
        protected function scan_view(\SplFileInfo $file)
        {
        }
        protected function scan_for_overrides()
        {
        }
        /**
         * Tests to ensure the provided view directory path is invalid or unreadable.
         *
         * @param  string $directory
         * @return bool
         */
        protected function bad_directory($directory)
        {
        }
        /**
         * Inspects the template header block within the specified file and extracts the
         * version number, if one can be found.
         *
         * @param  string $template_filepath
         * @return string
         */
        protected function get_template_version($template_filepath)
        {
        }
        /**
         * Given a full filepath (ie, to a view file), chops off the base path found
         * in $this->plugin_views_dir.
         *
         * For example, given:
         *
         *     $this->plugin_views_dir = '/srv/project/wp-content/plugins/my-plugin/views'
         *     $full_filepath          = '/srv/project/wp-content/plugins/my-plugin/views/modules/icon.php'
         *
         * Returns:
         *
         *     'modules/icon.php'
         *
         * @param  string $full_filepath
         * @return string
         */
        protected function short_name($full_filepath)
        {
        }
        /**
         * Returns an array of the plugin's shipped view files, where each key is the
         * view filename and the value is the version it was last updated.
         *
         * @return array
         */
        public function get_views()
        {
        }
        /**
         * Returns an array of any or all of the plugin's shipped view files that contain
         * a version field in their header blocks.
         *
         * @see $this->get_views() for format of returned array
         *
         * @return array
         */
        public function get_versioned_views()
        {
        }
        /**
         * Returns an array of any shipped plugin views that were updated or introduced
         * with the current release (as specified by $this->plugin_version).
         *
         * @see $this->get_views() for format of returned array
         *
         * @return array
         */
        public function get_views_tagged_this_release()
        {
        }
        /**
         * Returns an array of theme overrides, where each key is the view filename and the
         * value is the version it was last updated (may be empty).
         *
         * @return array
         */
        public function get_overrides()
        {
        }
        /**
         * Returns an array of any or all theme overrides that contain a version field in their
         * header blocks.
         *
         * @see $this->get_overrides() for format of returned array
         *
         * @return array
         */
        public function get_versioned_overrides()
        {
        }
        /**
         * Returns an array of any or all theme overrides that seem to be based on an earlier
         * version than that which currently ships with the plugin.
         *
         * If optional param $include_unknown is set to true, the list will include theme
         * overrides where the version could not be determined (for instance, this might result
         * in theme overrides where the template header - or version tag - was removed being
         * included).
         *
         * @see $this->get_overrides() for format of returned array
         *
         * @param bool $include_unknown = false
         * @return array
         */
        public function get_outdated_overrides($include_unknown = \false)
        {
        }
    }
    /**
     * Assembles a report of recently updated plugin views and template overrides in
     * possible revision, for each plugin that registers itself and its template
     * filepaths.
     */
    class Tribe__Support__Template_Checker_Report
    {
        const VERSION_INDEX = 0;
        const INCLUDED_VIEWS_INDEX = 1;
        const THEME_OVERRIDES_INDEX = 2;
        /**
         * Contains the individual view/template reports for each registered plugin.
         *
         * @var array
         */
        protected static $plugin_reports = [];
        /**
         * Container for finished report.
         *
         * @var string
         */
        protected static $complete_report = '';
        /**
         * Provides an up-to-date report concerning template changes.
         *
         * @return string
         */
        public static function generate()
        {
        }
        protected static function registered_plugins()
        {
        }
        /**
         * Creates a report for the specified plugin.
         *
         * @param string $plugin_name
         * @param array  $template_system
         */
        protected static function generate_for($plugin_name, array $template_system)
        {
        }
        /**
         * Wraps the individual plugin template reports ready for display.
         */
        protected static function wrap_report()
        {
        }
    }
    /**
     * Class Tribe__Tabbed_View
     *
     * Models a tabbed view containing tabs.
     */
    class Tribe__Tabbed_View
    {
        /**
         * A list of all the tabs registered for the tabbed view.
         *
         * @var array An associative array in the [<slug> => <instance>] format.
         */
        protected $items = [];
        /**
         * The slug of the default tab
         *
         * @var string
         */
        protected $default_tab;
        /**
         * @var string The absolute path to this tabbed view template file.
         */
        protected $template;
        /**
         * An array or value object of data that should be used to render the tabbed view.
         *
         * @var array|object
         */
        protected $data = [];
        /**
         * @var string
         */
        protected $label;
        /**
         * @var string
         */
        protected $url;
        /**
         * @var string
         */
        protected $active;
        /**
         * Returns the tabbed view URL.
         *
         * @param array|string $args     Query String or Array with the arguments
         * @param boolean      $relative Return a relative URL or absolute
         *
         * @return string
         */
        public function get_url($args, $relative)
        {
        }
        /**
         * The currently set template for this tabbed view.
         *
         * @return string
         */
        public function get_template()
        {
        }
        /**
         * @param string $template
         */
        public function set_template($template)
        {
        }
        /**
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * @param string $label
         */
        public function set_label($label)
        {
        }
        /**
         * Returns only the visible tabs for this tabbed view.
         *
         * @return Tribe__Tabbed_View__Tab[] An array of all the active and visible tabs.
         */
        public function get_visibles()
        {
        }
        /**
         * @param string $url
         */
        public function set_url($url)
        {
        }
        /**
         * Sets the slug of the currently active tab.
         *
         * This value, if the tab exists, will override the value specified in the GET request.
         *
         * @param string $active
         */
        public function set_active($active)
        {
        }
        /**
         * A method to sort tabs by priority in ascending order.
         *
         * @param  object $a First tab to compare
         * @param  object $b Second tab to compare
         *
         * @return int
         */
        protected function sort_by_priority($a, $b)
        {
        }
        /**
         * Removes a tab from the tabbed view items.
         *
         * @param  string $slug The slug of the tab to remove
         *
         * @return boolean `true` if the slug was registered and removed, `false` otherwise
         */
        public function remove($slug)
        {
        }
        /**
         * Checks if a given tab exist
         *
         * @param  string $slug The slug of the tab
         *
         * @return boolean
         */
        public function exists($slug)
        {
        }
        /**
         * Fetches the Instance of the Tab or all the tabs
         *
         * @param  string $slug (optional) The Slug of the Tab
         *
         * @return null|array|object        If we couldn't find the tab it will be null, if the slug is null will return all tabs
         */
        public function get($slug = \null)
        {
        }
        /**
         * Checks if a given Tab (slug) is active
         *
         * @param  string $slug The Slug of the Tab
         *
         * @return boolean       Is this tab active?
         */
        public function is_active($slug = \null)
        {
        }
        /**
         * Returns the slug of tab requested in the `_GET` array or the default one.
         *
         * @param string|null $slug
         * @param mixed       $default A default value to return if the tab was not requested.
         *
         * @return string|bool Either the slug of the requested tab or `false` if no slug was requested
         *                     and no default tab is set.
         */
        protected function get_requested_slug($slug = \null, $default = \null)
        {
        }
        /**
         * Fetches the current active tab instance.
         *
         * @return Tribe__Tabbed_View__Tab|bool The active tab, the default tab if no tab is active,
         *                                      `false` if no tabs are registered in the Tabbed View.
         */
        public function get_active()
        {
        }
        /**
         * Returns the slug of the default tab for this tabbed view.
         *
         * @return string The slug of the default tab, the slug of the first tab if
         *                a default tab is not set, `false` otherwise.
         */
        public function get_default_tab()
        {
        }
        /**
         * @param Tribe__Tabbed_View__Tab|string $tab
         *
         * @return Tribe__Tabbed_View__Tab
         */
        public function register($tab)
        {
        }
        /**
         * Returns all the registered tabs.
         *
         * @return Tribe__Tabbed_View__Tab[]
         */
        public function get_tabs()
        {
        }
        /**
         * Builds an instance of the specified tab class.
         *
         * @param string $tab_class
         *
         * @return Tribe__Tabbed_View__Tab
         */
        protected function get_new_tab_instance($tab_class)
        {
        }
        /**
         * Renders the tabbed view and returns the resulting HTML.
         *
         * @return string
         */
        public function render()
        {
        }
        /**
         * Sets the default tab for the tabbed view.
         *
         * Please note that no check is made on the tabbed view items to ensure the value
         * corresponds to a registered tab.
         *
         * @param string $default_tab The slug of the default tab.
         */
        public function set_default_tab($default_tab)
        {
        }
        /**
         * @param Tribe__Tabbed_View__Tab $tab
         *
         * @return bool
         */
        protected function is_tab_visible(\Tribe__Tabbed_View__Tab $tab)
        {
        }
        /**
         * Returns the absolute path to the default template for the tabbed view.
         *
         * @return string
         */
        public function get_default_template_path()
        {
        }
    }
    /**
     * Class Tribe__Tabbed_View__Tab
     *
     * Models a tab part of a tabbed view.
     */
    class Tribe__Tabbed_View__Tab
    {
        /**
         * To Order the Tabs on the UI you need to change the priority
         *
         * @var integer
         */
        public $priority = 50;
        /**
         * An array or value object of data that should be used to render the tabbed view.
         *
         * @var array|object
         */
        protected $data = [];
        /**
         * The template file that should be used to render the tab.
         *
         * @var string
         */
        protected $template;
        /**
         * The tabbed view instance containing this tab.
         *
         * @var Tribe__Tabbed_View
         */
        protected $tabbed_view;
        /**
         * @var string
         */
        protected $slug;
        /**
         * @var bool
         */
        protected $visible = \true;
        /**
         * @var string
         */
        protected $label = '';
        /**
         * @var string
         */
        protected $url = '';
        /**
         * Tribe__Tabbed_View__Tab constructor.
         *
         * @param Tribe__Tabbed_View $tabbed_view
         * @param string             $slug
         */
        public function __construct(\Tribe__Tabbed_View $tabbed_view, $slug = \null)
        {
        }
        /**
         * @return int
         */
        public function get_priority()
        {
        }
        /**
         * @param $priority
         */
        public function set_priority($priority)
        {
        }
        /**
         * @return array|object
         */
        public function get_data()
        {
        }
        /**
         * @param array $data
         */
        public function set_data($data)
        {
        }
        /**
         * @return string
         */
        public function get_template()
        {
        }
        /**
         * @param string $template
         */
        public function set_template($template)
        {
        }
        /**
         * Returns the absolute path to the default template for the tab.
         *
         * @return string
         */
        public function get_default_template_path()
        {
        }
        /**
         * Whether the tab should display or not.
         *
         * @return boolean
         */
        public function is_visible()
        {
        }
        /**
         * @param boolean $visible
         */
        public function set_visible($visible)
        {
        }
        /**
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * @param string $label
         */
        public function set_label($label)
        {
        }
        /**
         * Creates a way to include the this tab HTML easily
         *
         * @return string HTML content of the tab
         */
        public function render()
        {
        }
        /**
         * Returns the link to this tab
         *
         * @param array|string $args     Query String or Array with the arguments
         * @param boolean      $relative Return a relative URL or absolute
         *
         * @return string
         */
        public function get_url($args = [], $relative = \false)
        {
        }
        /**
         * Sets this tab URL.
         *
         * This URL will override the tab natural URL.
         *
         * @param string $url
         */
        public function set_url($url)
        {
        }
        /**
         * Returns the tab slug
         *
         * @return string
         */
        public function get_slug()
        {
        }
        /**
         * Determines if this Tab is currently displayed
         *
         * @return boolean
         */
        public function is_active()
        {
        }
    }
    /**
     * Class Tribe__Template_Part_Cache
     *
     * @uses TribeEventsCache
     */
    class Tribe__Template_Part_Cache
    {
        /**
         ** Short description
         *
         * @param $template           - which template in the views directory is being cached (relative path).
         * @param $id                 - a unique identifier for this fragment.
         * @param $expiration         - expiration time for the cached fragment.
         * @param $expiration_trigger - wordpress hook to expire on.
         */
        public function __construct($template, $id, $expiration, $expiration_trigger)
        {
        }
        /**
         * Hook in to show cached content and bypass queries where needed
         */
        public function add_hooks()
        {
        }
        /**
         * Checks if there is a cached html fragment in the transients, if it's there,
         * don't include the requested file path. If not, just return the file path like normal
         *
         * @param $path file path to the month view template part
         *
         * @return bool
         * @uses tribe_get_template_part_path_[template] hook
         */
        public function display($path)
        {
        }
        /**
         * Set cached html in transients
         *
         * @param $html
         * @param $template
         *
         * @return string
         * @uses tribe_get_template_part_content hook
         */
        public function set($html, $template)
        {
        }
        /**
         * Retrieve the cached html from transients, set class property
         *
         * @uses tribe_events_before_view hook
         */
        public function get()
        {
        }
    }
    /**
     * Handle views and template files.
     */
    class Tribe__Templates
    {
        /**
         * Check to see if this is operating in the main loop
         *
         * @param WP_Query $query
         *
         * @return bool
         */
        protected static function is_main_loop($query)
        {
        }
        /**
         * Look for the stylesheets. Fall back to $fallback path if the stylesheets can't be located or the array is empty.
         *
         * @param array|string $stylesheets Path to the stylesheet
         * @param bool|string  $fallback    Path to fallback stylesheet
         *
         * @return bool|string Path to stylesheet
         */
        public static function locate_stylesheet($stylesheets, $fallback = \false)
        {
        }
        /**
         * Add our own method is_embed to check by WordPress Version and function is_embed
         * to prevent fatal errors in WordPress 4.3 and earlier
         *
         * @version 4.2.1
         */
        public static function is_embed()
        {
        }
    }
    class Tribe__Terms
    {
        /**
         * Translates an array or list of `term_id`s or `slug`s to an array of `term_id`s; if a term is missing and specified by `slug` it
         * will be created.
         *
         * @param      array|string $terms An array or comma separated list of term `term_id` or `slug` or a single `term_id` or `slug`.
         * @param      string $taxonomy
         * @param bool $create_missing Whether terms that could not be found by `term_id` or `slug` should be creater or not.
         *
         * @return array An array containing the `term_id`s of the created terms.
         */
        public static function translate_terms_to_ids($terms, $taxonomy, $create_missing = \true)
        {
        }
    }
    /**
     * Helpers for handling timezone based event datetimes.
     *
     * In our timezone logic, the term "local" refers to the locality of an event
     * rather than the local WordPress timezone.
     */
    class Tribe__Timezones
    {
        const SITE_TIMEZONE = 'site';
        const EVENT_TIMEZONE = 'event';
        /**
         * Container for reusable DateTimeZone objects.
         *
         * @var array
         */
        protected static $timezones = [];
        public static function init()
        {
        }
        /**
         * Clear any cached timezone-related values when appropriate.
         *
         * Currently we are concerned only with the site timezone abbreviation.
         */
        protected static function invalidate_caches()
        {
        }
        /**
         * Wipe the cached site timezone abbreviation, if set.
         *
         * @param mixed $option_val (passed through without modification)
         *
         * @return mixed
         */
        public static function clear_site_timezone_abbr($option_val)
        {
        }
        /**
         * Returns the current site-wide timezone string abbreviation, if it can be
         * determined or falls back on the full timezone string/offset text.
         *
         * @param string $date
         *
         * @return string
         */
        public static function wp_timezone_abbr($date)
        {
        }
        /**
         * Returns the current site-wide timezone string.
         *
         * Based on the core WP code found in wp-admin/options-general.php.
         *
         * @return string
         */
        public static function wp_timezone_string()
        {
        }
        /**
         * Attempts to provide the correct timezone abbreviation for the provided timezone string
         * on the date given (and so should account for daylight saving time, etc).
         *
         * @param string|DateTime|DateTimeImmutable $date The date string representation or object.
         * @param string|DateTimeZone $timezone_string The timezone string or object.
         *
         * @return string
         */
        public static function abbr($date, $timezone_string)
        {
        }
        /**
         * Helper function to retrieve the timezone string for a given UTC offset
         *
         * This is a close copy of WooCommerce's wc_timezone_string() method
         *
         * @param string $offset UTC offset
         *
         * @return string
         */
        public static function generate_timezone_string_from_utc_offset($offset)
        {
        }
        /**
         * Tests to see if the timezone string is a UTC offset, ie "UTC+2".
         *
         * @param string $timezone
         *
         * @return bool
         */
        public static function is_utc_offset($timezone)
        {
        }
        /**
         * Returns a DateTimeZone object matching the representation in $tzstring where
         * possible, or else representing UTC (or, in the worst case, false).
         *
         * If optional parameter $with_fallback is true, which is the default, then in
         * the event it cannot find/create the desired timezone it will try to return the
         * UTC DateTimeZone before bailing.
         *
         * @param  string $tzstring
         * @param  bool   $with_fallback = true
         *
         * @return DateTimeZone|false
         */
        public static function get_timezone($tzstring, $with_fallback = \true)
        {
        }
        /**
         * Confirms if the current timezone mode matches the $possible_mode.
         *
         * @param string $possible_mode
         *
         * @return bool
         */
        public static function is_mode($possible_mode)
        {
        }
        /**
         * Returns a string representing the timezone/offset currently desired for
         * the display of dates and times.
         *
         * @return string
         */
        public static function mode()
        {
        }
        /**
         * Tries to convert the provided $datetime to UTC from the timezone represented by $tzstring.
         *
         * Though the usual range of formats are allowed, $datetime ordinarily ought to be something
         * like the "Y-m-d H:i:s" format (ie, no timezone information). If it itself contains timezone
         * data, the results may be unexpected.
         *
         * In those cases where the conversion fails to take place, the $datetime string will be
         * returned untouched.
         *
         * @param string $datetime
         * @param string $tzstring
         * @param string $format The optional format of the resulting date, defaults to
         *                      `Tribe__Date_Utils::DBDATETIMEFORMAT`.
         *
         * @return string
         */
        public static function to_utc($datetime, $tzstring, $format = \null)
        {
        }
        /**
         * Tries to convert the provided $datetime to the timezone represented by $tzstring.
         *
         * This is the sister function of self::to_utc() - please review the docs for that method
         * for more information.
         *
         * @param string $datetime
         * @param string $tzstring
         *
         * @return string
         */
        public static function to_tz($datetime, $tzstring)
        {
        }
        /**
         * Localizes a date or timestamp using WordPress timezone and returns it in the specified format.
         *
         * @param string     $format   The format the date shouuld be formatted to.
         * @param string|int $date     The date UNIX timestamp or `strtotime` parseable string.
         * @param string     $timezone An optional timezone string identifying the timezone the date shoudl be localized
         *                             to; defaults to the WordPress installation timezone (if available) or to the system
         *                             timezone.
         *
         * @return string|bool The parsed date in the specified format and localized to the system or specified
         *                     timezone, or `false` if the specified date is not a valid date string or timestamp
         *                     or the specified timezone is not a valid timezone string.
         */
        public static function localize_date($format = \null, $date = \null, $timezone = \null)
        {
        }
        /**
         * Converts a date string or timestamp to a destination timezone.
         *
         * @param string|int $date          Either a string parseable by the `strtotime` function or a UNIX timestamp.
         * @param string     $from_timezone The timezone of the source date.
         * @param string     $to_timezone   The timezone the destination date should use.
         * @param string     $format        The format that should be used for the destination date.
         *
         * @return string The formatted and converted date.
         */
        public static function convert_date_from_timezone($date, $from_timezone, $to_timezone, $format)
        {
        }
        /**
         * Whether the candidate timezone is a valid PHP timezone or a supported UTC offset.
         *
         * @param string $candidate
         *
         * @return bool
         */
        public static function is_valid_timezone($candidate)
        {
        }
        /**
         * Given a string in the form "UTC+2.5" returns the corresponding DateTimeZone object.
         *
         * If this is not possible or if $utc_offset_string does not match the expected pattern,
         * boolean false is returned.
         *
         * @todo revise to eliminate all of these: maybe_get_tz_name, apply_offset, timezone_from_utc_offset, and adjust_timestamp
         *
         * @since 4.6.3
         *
         * @param string $utc_offset_string
         *
         * @return DateTimeZone | bool
         */
        public static function timezone_from_utc_offset($utc_offset_string)
        {
        }
        /**
         * Applies an time offset to the specified date time.
         *
         * @todo revise to eliminate all of these: maybe_get_tz_name, apply_offset, timezone_from_utc_offset, and adjust_timestamp
         *
         * @param string $datetime The date and time string in a valid date format.
         * @param int|string  $offset (string or numeric offset)
         * @param bool   $invert = false Whether the offset should be added (`true`) or
         *                       subtracted (`false`); signum operations carry over so
         *                       `-(-23) = +23`.
         *
         * @return string
         */
        public static function apply_offset($datetime, $offset, $invert = \false)
        {
        }
        /**
         * Try to figure out the Timezone name base on offset
         *
         * @since  4.0.7
         *
         * @todo revise to eliminate all of these: maybe_get_tz_name, apply_offset, timezone_from_utc_offset, and adjust_timestamp
         *
         * @param  string|int|float $timezone The timezone
         *
         * @return string           The Guessed Timezone String
         */
        public static function maybe_get_tz_name($timezone)
        {
        }
        /**
         * Accepts a unix timestamp and adjusts it so that when it is used to constitute
         * a new datetime string, that string reflects the designated timezone.
         *
         * @todo revise to eliminate all of these: maybe_get_tz_name, apply_offset, timezone_from_utc_offset, and adjust_timestamp
         *
         * @deprecated 4.7.12
         *
         * @param string $unix_timestamp
         * @param string $tzstring
         *
         * @return string
         */
        public static function adjust_timestamp($unix_timestamp, $tzstring)
        {
        }
        /**
         * Returns a valid timezone object built from the passed timezone or from the
         * site one if a timezone in not passed.
         *
         * @since 4.9.5
         *
         * @param string|null|DateTimeZone $timezone A DateTimeZone object, a timezone string
         *                                           or `null` to build an object using the site one.
         *
         * @return DateTimeZone The built DateTimeZone object.
         */
        public static function build_timezone_object($timezone = \null)
        {
        }
        /**
         * Parses the timezone string to validate or convert it into a valid one.
         *
         * @since 4.9.5
         *
         * @param string|\DateTimeZone $timezone_candidate The timezone string candidate.
         *
         * @return string The validated timezone string or a valid timezone string alternative.
         */
        public static function get_valid_timezone($timezone_candidate)
        {
        }
    }
}
namespace Tribe\Tooltip {
    /**
     * Class View
     *
     * @since 4.9.8
     */
    class View extends \Tribe__Template
    {
        /**
         * Where in the themes we will look for templates
         *
         * @since 4.10.2
         *
         * @var string
         */
        public $template_namespace = 'tooltips';
        /**
         * View constructor.
         *
         * @since 4.9.8
         */
        public function __construct()
        {
        }
        /**
         * Public wrapper for build method
         *
         * @since 4.9.8
         *
         * @param array|string $message Array of messages or single message as string.
         * @param array $args {
         *     List of arguments to override tooltip template.
         *
         *     @var array  $context      Any additional context data you need to expose to this file (optional).
         *     @var string $classes      Additional classes for the icon span (optional).
         *     @var string $direction    Direction the tooltip should be from the trigger (down).
         *     @var string $icon         dashicon classname to use, without the `dashicon-` (info).
         *     @var string $wrap_classes Classes for the tooltip wrapper (optional).
         * }
         * @return string A string of html for the tooltip.
         */
        public function render_tooltip($message, $args = [])
        {
        }
    }
}
namespace {
    /**
     * Class Tribe__Tracker
     *
     * Tracks changes of post attributes.
     */
    class Tribe__Tracker
    {
        /**
         * @var string The meta field used to track changes.
         */
        public static $field_key = '_tribe_modified_fields';
        /**
         * @var bool Whether the class is tracking terms or not.
         */
        protected $track_terms = \true;
        /**
         * @var array An array of the tracked post types.
         */
        protected $tracked_post_types = [];
        /**
         * @var array An array of the tracked taxonomies.
         */
        protected $tracked_taxonomies = [];
        /**
         * Hooks up the methods that will actually track the fields we are looking for.
         */
        public function hook()
        {
        }
        /**
         * Determines if a post value has been changed
         *
         * @param string $field Field to compare against
         * @param array $new New data
         * @param array $old WP_Post pre-update
         *
         * @return boolean
         */
        public function has_field_changed($field, $new, $old)
        {
        }
        /**
         * Get the date(timestamp) of last modification for a tracked field.
         *
         * @since 4.12.3
         *
         * @param string $meta_key The key for the meta field we're interested in.
         * @param int $post_id The ID of the post to check.
         *
         * @return boolean|string The change timestamp or false if the field is not found/empty.
         */
        public function get_modified_date($meta_key, $post_id)
        {
        }
        /**
         * Easy way to see currently which post types are being tracked by our code.
         *
         * @return array
         */
        public function get_post_types()
        {
        }
        /**
         * Easy way to see currenlty which meta values are been tracked by our code
         *
         * @return array
         */
        public function get_excluded_meta_keys()
        {
        }
        /**
         * Make sure we are tracking all meta fields related on the correct Post Types
         *
         * @since 4.5
         *
         * @param int       $meta_id    Meta ID
         * @param int       $post_id    Post ID.
         * @param string    $meta_key   Meta key.
         */
        public function register_added_deleted_meta($meta_id, $post_id, $meta_key)
        {
        }
        /**
         * Make sure we are tracking all meta fields related to the correct Post Types
         *
         * @since 4.5
         *
         * @param null|bool $check      Whether to allow updating metadata for the given type.
         * @param int       $post_id    Post ID.
         * @param string    $meta_key   Meta key.
         * @param mixed     $meta_value Meta value. Must be serializable if non-scalar.
         * @param mixed     $prev_value Previous Value of the Meta, allowing to check the data
         *
         * @return null|bool            This should be ignored, only used to not break the WordPress filters
         */
        public function filter_watch_updated_meta($check, $post_id, $meta_key, $meta_value, $prev_value = \null)
        {
        }
        /**
         * Tracks fields that are changed when an event is updated
         *
         * @param int $post_id Post ID
         * @param WP_Post $post_after New post object
         * @param WP_Post $post_before Old post object
         */
        public function filter_watch_post_fields($post_id, $post_after, $post_before)
        {
        }
        /**
         * Track term changes for the tracked post types and  terms.
         *
         * Meant to run on the `set_object_terms` action.
         *
         * @see wp_set_object_terms()
         *
         * @param $object_id
         * @param $terms
         * @param $tt_ids
         * @param $taxonomy
         * @param $append
         * @param $old_tt_ids
         *
         * @return bool `true` if the post type and taxonomy are tracked, `false` otherwise.
         */
        public function track_taxonomy_term_changes($object_id, $terms, $tt_ids, $taxonomy, $append, $old_tt_ids)
        {
        }
        /**
         * Easy way to see currently which taxonomies are been tracked by our code.
         *
         * @return array
         */
        public function get_taxonomies()
        {
        }
        /**
         * Whether taxonomy term changes should be tracked or not by the class.
         *
         * @param bool $track_terms
         */
        public function should_track_terms($track_terms)
        {
        }
        /**
         * Sets the taxonomies the tracker should track.
         *
         * @param array $tracked_taxonomies
         */
        public function set_tracked_taxonomies(array $tracked_taxonomies)
        {
        }
        /**
         * Sets the post types the tracker should track.
         *
         * @param array $tracked_post_types
         */
        public function set_tracked_post_types(array $tracked_post_types)
        {
        }
        /**
         * Make sure to remove the changed field if the event is deleted to ensure there are no left meta fields when
         * the event is deleted.
         *
         * @since 4.7.6
         *
         * @param int  Post ID
         * @return bool
         */
        public function cleanup_meta_fields($post_id)
        {
        }
    }
}
namespace Tribe\Traits {
    /**
     * Trait With_Db_Lock
     *
     * @since   4.12.6
     *
     * @package Tribe\Traits
     */
    trait With_DB_Lock
    {
        /**
         * Acquires a db lock.
         *
         * To ensure back-compatibility with MySQL 5.6, the lock will hash the lock key using SHA1.
         *
         * @since 4.12.6
         *
         * @param string $lock_key The name of the db lock key to acquire.
         *
         * @return bool Whether the lock acquisition was successful or not.
         */
        private function acquire_db_lock($lock_key)
        {
        }
        /**
         * Releases the database lock of the record.
         *
         * Release a not held db lock will return `null`, not `false`.
         *
         * @since 4.12.6
         *
         * @param string $lock_key The name of the lock to release.
         *
         * @return bool Whether the lock was correctly released or not.
         */
        private function release_db_lock($lock_key)
        {
        }
    }
}
namespace {
    /**
     * Run schema updates on plugin activation or updates
     *
     * @since 4.9.4
     *
     */
    class Tribe__Updater
    {
        protected $version_option = 'schema-version';
        protected $reset_version = '3.9';
        // when a reset() is called, go to this version
        protected $current_version = 0;
        public $capabilities;
        /**
         * Tribe__Updater constructor.
         *
         * @since 4.9.4
         *
         * @param int $current_version the current version number of a plugin
         */
        public function __construct($current_version)
        {
        }
        /**
         * We've had problems with the notoptions and
         * alloptions caches getting out of sync with the DB,
         * forcing an eternal update cycle
         *
         * @since 4.9.4
         *
         */
        protected function clear_option_caches()
        {
        }
        /**
         * Run Updates for a Plugin
         *
         * @since 4.9.4
         *
         */
        public function do_updates()
        {
        }
        /**
         * Update Version Number for a Plugin
         *
         * @since 4.9.4
         *
         * @param int $new_version the current version number of a plugin
         */
        public function update_version_option($new_version)
        {
        }
        /**
         * Returns an array of callbacks with version strings as keys.
         * Any key higher than the version recorded in the DB
         * and lower than $this->current_version will have its
         * callback called.
         *
         * @since 4.9.4
         *
         * @return array
         */
        public function get_update_callbacks()
        {
        }
        /**
         * Returns an array of callbacks that should be called
         * every time the version is updated
         *
         * @since 4.9.4
         *
         * @return array
         */
        public function get_constant_update_callbacks()
        {
        }
        /**
         * Get version from Tribe Settings for the Plugin
         *
         * @since 4.9.4
         *
         * @return mixed the version number of the plugin saved in the options
         */
        public function get_version_from_db()
        {
        }
        /**
         * Returns true if the version in the DB is less than the provided version
         *
         * @since 4.9.4
         *
         * @return boolean
         */
        public function is_version_in_db_less_than($version)
        {
        }
        /**
         * Returns true if this is a new install
         *
         * @since 4.9.4
         *
         * @return boolean
         */
        public function is_new_install()
        {
        }
        /**
         * Returns true if an update is required
         *
         * @since 4.9.4
         *
         * @return boolean
         */
        public function update_required()
        {
        }
        /**
         * Flush Rewrite rules
         *
         * @since 4.9.4
         *
         */
        public function flush_rewrites()
        {
        }
        /**
         * Reset update flags. All updates past $this->reset_version will
         * run again on the next page load
         *
         * @since 4.9.4
         *
         */
        public function reset()
        {
        }
    }
    /**
     * Array utilities
     */
    class Tribe__Utils__Array
    {
        /**
         * Set key/value within an array, can set a key nested inside of a multidimensional array.
         *
         * Example: set( $a, [ 0, 1, 2 ], 'hi' ) sets $a[0][1][2] = 'hi' and returns $a.
         *
         * @param mixed        $array The array containing the key this sets.
         * @param string|array $key To set a key nested multiple levels deep pass an array
         *                             specifying each key in order as a value.
         *                             Example: array( 'lvl1', 'lvl2', 'lvl3' );
         * @param mixed        $value The value.
         *
         * @return array Full array with the key set to the specified value.
         */
        public static function set(array $array, $key, $value)
        {
        }
        /**
         * Find a value inside of an array or object, including one nested a few levels deep.
         *
         * Example: get( $a, [ 0, 1, 2 ] ) returns the value of $a[0][1][2] or the default.
         *
         * @param array        $variable Array or object to search within.
         * @param array|string $indexes Specify each nested index in order.
         *                                Example: array( 'lvl1', 'lvl2' );
         * @param mixed        $default Default value if the search finds nothing.
         *
         * @return mixed The value of the specified index or the default if not found.
         */
        public static function get($variable, $indexes, $default = \null)
        {
        }
        /**
         * Find a value inside a list of array or objects, including one nested a few levels deep.
         *
         * @since 4.7.7
         *
         * Example: get( [$a, $b, $c], [ 0, 1, 2 ] ) returns the value of $a[0][1][2] found in $a, $b or $c
         * or the default.
         *
         * @param array        $variables Array of arrays or objects to search within.
         * @param array|string $indexes Specify each nested index in order.
         *                                 Example: array( 'lvl1', 'lvl2' );
         * @param mixed        $default Default value if the search finds nothing.
         *
         * @return mixed The value of the specified index or the default if not found.
         */
        public static function get_in_any(array $variables, $indexes, $default = \null)
        {
        }
        /**
         * Behaves exactly like the native strpos(), but accepts an array of needles.
         *
         * @param string       $haystack String to search in.
         * @param array|string $needles Strings to search for.
         * @param int          $offset Starting position of search.
         *
         * @return false|int Integer position of first needle occurrence.
         * @see strpos()
         *
         */
        public static function strpos($haystack, $needles, $offset = 0)
        {
        }
        /**
         * Converts a list to an array filtering out empty string elements.
         *
         * @param mixed  $value A string representing a list of values separated by the specified separator
         *                           or an array. If the list is a string (e.g. a CSV list) then it will urldecoded
         *                           before processing.
         * @param string $sep The char(s) separating the list elements; will be ignored if the list is an array.
         *
         * @return array An array of list elements.
         */
        public static function list_to_array($value, $sep = ',')
        {
        }
        /**
         * Returns a list separated by the specified separator.
         *
         * @since 4.6
         *
         * @param mixed  $list
         * @param string $sep
         *
         * @return string The list separated by the specified separator or the original list if the list is empty.
         */
        public static function to_list($list, $sep = ',')
        {
        }
        /**
         * Sanitize a multidimensional array.
         *
         * @since   4.7.18
         *
         * @param array $data The array to sanitize.
         *
         * @return array The sanitized array
         *
         * @link https://gist.github.com/esthezia/5804445
         */
        public static function escape_multidimensional_array($data = [])
        {
        }
        /**
         * Returns an array of values obtained by using the keys on the map; keys
         * that do not have a match in map are discarded.
         *
         * To discriminate from not found results and legitimately `false`
         * values from the map the `$found` parameter will be set by reference.
         *
         * @since 4.7.19
         *
         * @param string|array $keys One or more keys that should be used to get
         *                                 the new values
         * @param array        $map An associative array relating the keys to the new
         *                                 values.
         * @param bool         $found When using a single key this argument will be
         *                                 set to indicate whether the mapping was successful
         *                                 or not.
         *
         * @return array|mixed|false An array of mapped values, a single mapped value when passing
         *                           one key only or `false` if one key was passed but the key could
         *                           not be mapped.
         */
        public static function map_or_discard($keys, array $map, &$found = \true)
        {
        }
        /**
         * Duplicates any key prefixed with '_' creating an un-prefixed duplicate one.
         *
         * The un-prefixing and duplication is recursive.
         *
         * @since 4.9.5
         *
         * @param mixed $array The array whose keys should be duplicated.
         * @param bool  $recursive Whether the un-prefixing and duplication should be
         *                         recursive or shallow.
         *
         * @return array The array with the duplicate, unprefixed, keys or the
         *               original input if not an array.
         */
        public static function add_unprefixed_keys_to($array, $recursive = \false)
        {
        }
        /**
         * Filters an associative array non-recursively, keeping only the values attached
         * to keys starting with the specified prefix.
         *
         * @since 4.9.5
         *
         * @param array  $array The array to filter.
         * @param string $prefix The prefix, or prefixes, of the keys to keep.
         *
         * @return array The filtered array.
         */
        public static function filter_prefixed(array $array, $prefix)
        {
        }
        /**
         * Flattens an array transforming each value that is an array and only contains one
         * element into that one element.
         *
         * Typical use case is to flatten arrays like those returned by `get_post_meta( $id )`.
         * Empty arrays are replaced with an empty string.
         *
         * @since 4.9.5
         *
         * @param array $array The array to flatten.
         *
         * @return array The flattened array.
         */
        public static function flatten(array $array)
        {
        }
        /**
         * Duplicates any key not prefixed with '_' creating a prefixed duplicate one.
         *
         * The prefixing and duplication is recursive.
         *
         * @since 4.9.5
         *
         * @param mixed $array The array whose keys should be duplicated.
         * @param bool  $recursive Whether the prefixing and duplication should be
         *                         recursive or shallow.
         *
         * @return array The array with the duplicate, prefixed, keys or the
         *               original input if not an array.
         */
        public static function add_prefixed_keys_to($array, $recursive = \false)
        {
        }
        /**
         * Recursively key-sort an array.
         *
         * @since 4.9.5
         *
         * @param array $array The array to sort, modified by reference.
         *
         * @return bool The sorting result.
         */
        public static function recursive_ksort(array &$array)
        {
        }
        /**
         * Returns the value associated with the first index, among the indexes, that is set in the array..
         *
         * @since 4.9.11
         *
         * @param array $array The array to search.
         * @param array $indexes The indexes to search; in order the function will look from the first to the last.
         * @param null  $default The value that will be returned if the array does not have any of the indexes set.
         *
         * @return mixed|null The set value or the default value.
         */
        public static function get_first_set(array $array, array $indexes, $default = \null)
        {
        }
        /**
         * Discards everything other than array values having string keys and scalar values, ensuring a
         * one-dimensional, associative array result.
         *
         * @link  https://www.php.net/manual/language.types.array.php Keys cast to non-strings will be discarded.
         *
         * @since 4.12.2
         *
         * @param array $array
         *
         * @return array Associative or empty array.
         */
        public static function filter_to_flat_scalar_associative_array(array $array)
        {
        }
        /**
         * Build an array from migrating aliased key values to their canonical key values, removing all alias keys.
         *
         * If the original array has values for both the alias and its canonical, keep the canonical's value and
         * discard the alias' value.
         *
         * @since 4.12.2
         *
         * @param array $original  An associative array of values, such as passed shortcode arguments.
         * @param array $alias_map An associative array of aliases: key as alias, value as mapped canonical.
         *                         Example: [ 'alias' => 'canonical', 'from' => 'to', 'that' => 'becomes_this' ]
         *
         * @return array
         */
        public static function parse_associative_array_alias(array $original, array $alias_map)
        {
        }
        /**
         * Stringifies the numeric keys of an array.
         *
         * @since 4.12.14
         *
         * @param array<int|string,mixed> $input  The input array whose keys should be stringified.
         * @param string|null             $prefix The prefix that should be use to stringify the keys, if not provided
         *                                        then it will be generated.
         *
         * @return array<string,mixed> The input array with each numeric key stringified.
         */
        public static function stringify_keys(array $input, $prefix = \null)
        {
        }
        /**
         * The inverse of the `stringify_keys` method, it will restore numeric keys for previously
         * stringified keys.
         *
         * @since 4.12.14
         *
         * @param array<int|string,mixed> $input  The input array whose stringified keys should be
         *                                        destringified.
         * @param string                  $prefix The prefix that should be used to target only specific string keys.
         *
         * @return array<int|string,mixed> The input array, its stringified keys destringified.
         */
        public static function destringify_keys(array $input, $prefix = 'sk_')
        {
        }
        /**
         * Recursively visits all elements of an array applying the specified callback to each element
         * key and value.
         *
         * @since 4.12.14
         *
         * @param         array $input The input array whose nodes should be visited.
         * @param callable $visitor A callback function that will be called on each array item; the callback will
         *                          receive the item key and value as input and should return an array that contains
         *                          the update key and value in the shape `[ <key>, <value> ]`. Returning a `null`
         *                          key will cause the element to be removed from the array.
         */
        public static function array_visit_recursive($input, callable $visitor)
        {
        }
        /**
         * Recursively remove associative, non numeric, keys from an array.
         *
         * @since 4.12.14
         *
         * @param array<string|int,mixed> $input The input array.
         *
         * @return array<int|mixed> An array that only contains integer keys at any of its levels.
         */
        public static function remove_numeric_keys_recursive(array $input)
        {
        }
        /**
         * Recursively remove numeric keys from an array.
         *
         * @since 4.12.14
         *
         * @param array<string|int,mixed> $input The input array.
         *
         * @return array<string,mixed> An array that only contains non numeric keys at any of its levels.
         */
        public static function remove_string_keys_recursive(array $input)
        {
        }
        /**
         * Merges two or more arrays in the nested format used by WP_Query arguments preserving and merging them correctly.
         *
         * The method will recursively replace named keys and merge numeric keys. The method takes its name from its intended
         * primary use, but it's not limited to query arguments only.
         *
         * @since 4.12.14
         *
         * @param array<string|int,mixed> ...$arrays A set of arrays to merge.
         *
         * @return array<string|int,mixed> The recursively merged array.
         */
        public static function merge_recursive_query_vars(array ...$arrays)
        {
        }
        /**
         * Shapes, filtering it, an array to the specified expected set of required keys.
         *
         * @since 5.0.0
         *
         * @param array $array The input array to shape.
         * @param array $shape The shape to update the array with. It should only define keys
         *                     or arrays of keys. Keys that have no values will be set to `null`.
         *                     To add the key only if set, prefix the key with `?`, e.g. `?foo`.
         *
         * @return array The input array shaped and ordered per the shape.
         */
        public static function shape_filter(array $array, array $shape) : array
        {
        }
        /**
         * Searches an array using a callback and returns the index of the first match.
         *
         * This method fills the gap left by the non-existence of an `array_usearch` function.
         *
         * @since 5.0.0
         *
         * @param mixed    $needle   The element to search in the array.
         * @param array    $haystack The array to search.
         * @param callable $callback A callback function with signature `fn($needle, $value, $key) :bool`
         *                           that will be used to find the first match of needle in haystack.
         *
         * @return string|int|false Either the index of the first match or `false` if no match was found.
         */
        public static function usearch($needle, array $haystack, callable $callback)
        {
        }
    }
}
namespace Tribe\Utils {
    /**
     * Body_Classes class
     *
     * @since 4.12.6
     */
    class Body_Classes
    {
        /**
         * Stores all the classes.
         * In the format: ['class' => true, 'class => false ]
         *
         * @var array<string,bool>
         */
        protected $classes = [];
        /**
         * Stores all the admin classes.
         * In the format: ['class' => true, 'class => false ]
         *
         * @var array<string,bool>
         */
        protected $admin_classes = [];
        /**
         * Queue-aware method to get the classes array.
         * Returns the array of classes to add.
         *
         * @since 4.12.6
         *
         * @param string $queue The queue we want to get 'admin', 'display', 'all'.
         * @return array<string,bool> A map of the classes for the queue.
         */
        public function get_classes($queue = 'display')
        {
        }
        /**
         * Returns the array of classnames to add
         *
         * @since 4.12.6
         *
         * @param string $queue The queue we want to get 'admin', 'display', 'all'.
         * @return array<string> The list of class names.
         */
        public function get_class_names($queue = 'display')
        {
        }
        /**
         * Checks if a class is in the queue,
         * wether it's going to be added or not.
         *
         * @since 4.12.6
         *
         * @param string $class The class we are checking for.
         * @param string $queue The queue we want to check 'admin', 'display', 'all'
         * @return boolean Whether a class exists or not in the queue.
         */
        public function class_exists($class, $queue = 'display')
        {
        }
        /**
         * Checks if a class is in the queue and going to be added.
         *
         * @since 4.12.6
         *
         * @param string $class The class we are checking for.
         * @param string $queue The queue we want to check 'admin', 'display', 'all'
         * @return boolean Whether a class is currently queued or not.
         */
        public function class_is_enqueued($class, $queue = 'display')
        {
        }
        /**
         * Dequeues a class.
         *
         * @since 4.12.6
         *
         * @param string $class
         * @param string $queue The queue we want to alter 'admin', 'display', 'all'
         * @return boolean
         */
        public function dequeue_class($class, $queue = 'display')
        {
        }
        /**
         * Enqueues a class.
         *
         * @since 4.12.6
         *
         * @param string $class
         * @param string $queue The queue we want to alter 'admin', 'display', 'all'
         * @return false
         */
        public function enqueue_class($class, $queue = 'display')
        {
        }
        /**
         * Add a single class to the queue.
         *
         * @since 4.12.6
         *
         * @param string $class The class to add.
         * @param string $queue The queue we want to alter 'admin', 'display', 'all'
         * @return void
         */
        public function add_class($class, $queue = 'display')
        {
        }
        /**
         * Add an array of classes to the queue.
         *
         * @since 4.12.6
         *
         * @param array<string> $class The classes to add.
         * @return void
         */
        public function add_classes(array $classes, $queue = 'display')
        {
        }
        /**
         * Remove a single class from the queue.
         *
         * @since 4.12.6
         *
         * @param string $class The class to remove.
         * @return void
         */
        public function remove_class($class, $queue = 'display')
        {
        }
        /**
         * Remove an array of classes from the queue.
         *
         * @since 4.12.6
         *
         * @param array<string> $classes The classes to remove.
         * @return void
         */
        public function remove_classes(array $classes, $queue = 'display')
        {
        }
        /**
         * Adds the enqueued classes to the body class array.
         *
         * @since 4.12.6
         *
         * @param array<string> $classes An array of body class names.
         * @return array Array of body classes.
         */
        public function add_body_classes($classes = [])
        {
        }
        /**
         * Adds the enqueued classes to the body class array.
         *
         * @since 4.12.6
         *
         * @param string $classes The existing body class names.
         *
         * @return string String of admin body classes.
         */
        public function add_admin_body_classes($classes)
        {
        }
    }
}
namespace {
    class Tribe__Utils__Callback
    {
        /**
         * Where we store all the Callbacks to allow removing of hooks
         *
         * @since  4.6.2
         *
         * @var array
         */
        public $items = [];
        /**
         * The Prefix we use for the Overloading replacement
         *
         * @since  4.6.2
         *
         * @var string
         */
        protected $prefix = 'callback_';
        /**
         * When used to wrap a Tribe callback this will be the slug or class to build.
         *
         * @var string
         */
        protected $slug;
        /**
         * When used to wrap a Tribe callback this will be the method to call.
         *
         * @var string
         */
        protected $method;
        /**
         * Returns a callable for on this class that doesn't exist, but passes in the Key for Di52 Slug and it's method
         * and arguments. It will relayed via overloading __call() on this same class.
         *
         * The lambda function suitable to use as a callback; when called the function will build the implementation
         * bound to `$classOrInterface` and return the value of a call to `$method` method with the call arguments.
         *
         * @since  4.6.2
         *
         * @param string $slug                   A class or interface fully qualified name or a string slug.
         * @param string $method                 The method that should be called on the resolved implementation with the
         *                                       specified array arguments.
         *
         * @return array The callable
         */
        public function get($slug, $method)
        {
        }
        /**
         * Returns the Value passed as a simple Routing method for tribe_callback_return
         *
         * @since  4.6.2
         *
         * @param  mixed  $value  Value to be Routed
         *
         * @return mixed
         */
        public function return_value($value)
        {
        }
        /**
         * Calls the Lambda function provided by Di52 to allow passing of Params without having to create more
         * methods into classes for simple callbacks that will only have a pre-determined value.
         *
         * @since  4.6.2
         *
         * @param string $slug                   A class or interface fully qualified name or a string slug.
         * @param string $method                 The method that should be called on the resolved implementation with the
         *                                       specified array arguments.
         *
         * @return mixed  The Return value used
         */
        public function __call($method, $args)
        {
        }
        /**
         * Tribe__Utils__Callback constructor.
         *
         * This is used to wrap a Tribe callable couple, a bound slug and method, to be used as a serializable callback.
         *
         * @since 4.9.5
         *
         * @param string $slug   The slug or class to call.
         * @param string $method The method to call on the slug or class.
         */
        public function __construct($slug = \null, $method = \null)
        {
        }
        /**
         * Returns the list of properties that should be serialized for the object.
         *
         * @since 4.9.5
         *
         * @return array An array of properties that should be serialized.
         */
        public function __sleep()
        {
        }
        /**
         * Returns this callback slug or class.
         *
         * This only makes sense if this class is being used to wrap a Tribe callback couple (slug and method).
         *
         * @since 4.9.5
         *
         * @return string|null This Tribe callback wrapper slug or class.
         */
        public function get_slug()
        {
        }
        /**
         * Returns this callback method.
         *
         * This only makes sense if this class is being used to wrap a Tribe callback couple (slug and method).
         *
         * @since 4.9.5
         *
         * @return string|null This Tribe callback method.
         */
        public function get_method()
        {
        }
    }
    /**
     * Models a generic collection of elements as a linked list.
     *
     * @since 4.9.5
     */
    /**
     * Class Tribe__Utils__Collection
     *
     * @since 4.9.5
     */
    class Tribe__Utils__Collection extends \SplDoublyLinkedList
    {
        /**
         * The list of items the collection was initialized with.
         *
         * @var array
         */
        protected $items = [];
        /**
         * The doubly-linked list that will hold the items handled by the collection.
         *
         * @var \SplDoublyLinkedList
         */
        protected $list;
        /**
         * Tribe__Utils__Collection constructor.
         *
         * @param array $items The array of items to initialize the linked list with.
         */
        public function __construct(array $items)
        {
        }
        /**
         * Runs a callback function on all the collection items and returns the results.
         *
         * This is just a wrapper around the `array_map` method.
         *
         * @since 4.9.5
         *
         * @param callable $callback The callback to run on each collection item.
         *
         * @return array An array of results returned by running the callback on all
         *               collection items.
         */
        public function map($callback)
        {
        }
    }
}
namespace Tribe\Utils {
    /**
     * Interface Collection_Interface
     * @since   4.9.14
     * @package Tribe\Utils
     */
    interface Collection_Interface extends \ArrayAccess, \SeekableIterator, \Countable, \Serializable, \JsonSerializable
    {
        /**
         * Returns all the items in the collection.
         *
         * @since 4.9.14
         *
         * @return array All the items in the collection.
         */
        public function all();
        /**
         * Returns the first item in the collection.
         *
         * @since 4.9.14
         *
         * @return mixed The first item in the collection.
         */
        public function first();
        /**
         * Returns the last item in the collection.
         *
         * @since 4.9.14
         *
         * @return mixed The last item in the collection.
         */
        public function last();
        /**
         * Returns the nth item in the collection.
         *
         * @since 4.9.14
         *
         * @param int $n The 1-based index of the item to return. It's not 0-based, `1` will return the first item.
         *
         * @return mixed|null The nth item in the collection or `null` if not set.
         */
        public function nth($n);
    }
    /**
     * Trait Collection_Trait
     * @since   4.9.14
     * @package Tribe\Utils
     */
    trait Collection_Trait
    {
        /**
         * The current items index.
         *
         * @var int
         */
        protected $items_index = 0;
        /**
         * Returns the first item in the collection.
         *
         * @since 4.9.14
         *
         * @return mixed The first item in the collection.
         */
        public function first()
        {
        }
        /**
         * Returns the last item in the collection.
         *
         * @since 4.9.14
         *
         * @return mixed The last item in the collection.
         */
        public function last()
        {
        }
        /**
         * Returns the nth item in the collection.
         *
         * @since 4.9.14
         *
         * @param int $n The 1-based index of the item to return. It's not 0-based, `1` will return the first item.
         *
         * @return mixed|null The nth item in the collection or `null` if not set.
         */
        public function nth($n)
        {
        }
        /**
         * {@inheritDoc}
         */
        #[\ReturnTypeWillChange]
        public function offsetExists($offset) : bool
        {
        }
        /**
         * {@inheritDoc}
         */
        #[\ReturnTypeWillChange]
        public function offsetGet($offset)
        {
        }
        /**
         * {@inheritDoc}
         */
        #[\ReturnTypeWillChange]
        public function offsetSet($offset, $value)
        {
        }
        /**
         * {@inheritDoc}
         */
        #[\ReturnTypeWillChange]
        public function offsetUnset($offset)
        {
        }
        /**
         * {@inheritDoc}
         */
        #[\ReturnTypeWillChange]
        public function next()
        {
        }
        /**
         * {@inheritDoc}
         */
        #[\ReturnTypeWillChange]
        public function valid()
        {
        }
        /**
         * {@inheritDoc}
         */
        #[\ReturnTypeWillChange]
        public function key()
        {
        }
        /**
         * {@inheritDoc}
         */
        #[\ReturnTypeWillChange]
        public function current()
        {
        }
        /**
         * {@inheritDoc}
         */
        #[\ReturnTypeWillChange]
        public function rewind()
        {
        }
        /**
         * {@inheritDoc}
         */
        #[\ReturnTypeWillChange]
        public function count()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function serialize()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function unserialize($serialized)
        {
        }
        /**
         * {@inheritDoc}
         */
        #[\ReturnTypeWillChange]
        public function seek($position)
        {
        }
        /**
         * Applies a filter callback to each element of this collection changing the collection elements to only those
         * passing the filter.
         *
         * @since 4.10.2
         *
         * @param callable $filter_callback The filter callback that will be applied to each element of the collection; the
         *                                  callback will receive the element as parameter.
         *
         * @return Collection_Trait A new collection instance, that contains only the elements that passed the filter.
         */
        public function filter($filter_callback)
        {
        }
        /**
         * PHP 8.0+ compatible implementation of the serialization logic.
         *
         * @since 5.0.6
         *
         * @return array The data to serialize.
         */
        public function __serialize() : array
        {
        }
        /**
         * PHP 8.0+ compatible implementation of the unserialization logic.
         *
         * @since 5.0.6
         *
         * @param array $data The data to unserialize.
         */
        public function __unserialize(array $data) : void
        {
        }
    }
}
namespace {
    /**
     * A color utility that helps manipulate HEX colors
     *
     * @package Common
     * @since 4.3
     *
     * @since 4.14.2 Added get_hex_with_hash function.
     */
    /**
     * Author: Arlo Carreon <http://arlocarreon.com>
     * Info: http://mexitek.github.io/phpColors/
     */
    /**
     * PHP 5.2 Compatibility
     * Author: Gustavo Bordoni <http://twitter.com/webord>
     */
    class Tribe__Utils__Color
    {
        /**
         * Auto darkens/lightens by 10% for sexily-subtle gradients.
         * Set this to FALSE to adjust automatic shade to be between given color
         * and black (for darken) or white (for lighten)
         */
        const DEFAULT_ADJUST = 10;
        /**
         * Instantiates the class with a HEX value
         * @param string $hex
         * @throws Exception "Bad color format"
         */
        public function __construct($hex)
        {
        }
        // ====================
        // = Public Interface =
        // ====================
        /**
         * Given a HEX string returns a HSL array equivalent.
         * @param string $color
         * @return array HSL associative array
         */
        public static function hexToHsl($color)
        {
        }
        /**
         *  Given a HSL associative array returns the equivalent HEX string
         * @param array $hsl
         * @return string HEX string
         * @throws Exception "Bad HSL Array"
         */
        public static function hslToHex($hsl = [])
        {
        }
        /**
         * Given a HEX string returns a RGB array equivalent.
         * @param string $color
         * @return array RGB associative array
         */
        public static function hexToRgb($color)
        {
        }
        /**
         *  Given an RGB associative array returns the equivalent HEX string
         * @param array $rgb
         * @return string RGB string
         * @throws Exception "Bad RGB Array"
         */
        public static function rgbToHex($rgb = [])
        {
        }
        /**
         * Given a HEX value, returns a darker color. If no desired amount provided, then the color halfway between
         * given HEX and black will be returned.
         * @param int $amount
         * @return string Darker HEX value
         */
        public function darken($amount = self::DEFAULT_ADJUST)
        {
        }
        /**
         * Given a HEX value, returns a lighter color. If no desired amount provided, then the color halfway between
         * given HEX and white will be returned.
         * @param int $amount
         * @return string Lighter HEX value
         */
        public function lighten($amount = self::DEFAULT_ADJUST)
        {
        }
        /**
         * Given a HEX value, returns a mixed color. If no desired amount provided, then the color mixed by this ratio
         * @param string $hex2 Secondary HEX value to mix with
         * @param int $amount = -100..0..+100
         * @return string mixed HEX value
         */
        public function mix($hex2, $amount = 0)
        {
        }
        /**
         * Creates an array with two shades that can be used to make a gradient
         * @param int $amount Optional percentage amount you want your contrast color
         * @return array An array with a 'light' and 'dark' index
         */
        public function makeGradient($amount = self::DEFAULT_ADJUST)
        {
        }
        /**
         * Returns whether or not given color is considered "light"
         * @param string|Boolean $color
         * @return boolean
         */
        public function isLight($color = \false)
        {
        }
        /**
         * Returns whether or not a given color is considered "dark"
         * @param string|Boolean $color
         * @return boolean
         */
        public function isDark($color = \false)
        {
        }
        /**
         * Returns the complimentary color
         * @return string Complementary hex color
         *
         */
        public function complementary()
        {
        }
        /**
         * Returns your color's HSL array
         */
        public function getHsl()
        {
        }
        /**
         * Returns your original color minus any hash mark.
         */
        public function getHex()
        {
        }
        /**
         * Returns your original color with the hash mark.
         *
         * @since 4.14.2
         *
         * @return string Hex color code with hash prefix.
         */
        public function get_hex_with_hash()
        {
        }
        /**
         * Returns your color's RGB array
         */
        public function getRgb()
        {
        }
        /**
         * Returns the cross browser CSS3 gradient
         * @param int $amount Optional: percentage amount to light/darken the gradient
         * @param boolean $vintageBrowsers Optional: include vendor prefixes for browsers that almost died out already
         * @param string $prefix Optional: prefix for every lines
         * @param string $suffix Optional: suffix for every lines
         * @link  http://caniuse.com/css-gradients Resource for the browser support
         * @return string CSS3 gradient for chrome, safari, firefox, opera and IE10
         */
        public function getCssGradient($amount = self::DEFAULT_ADJUST, $vintageBrowsers = \false, $suffix = '', $prefix = '')
        {
        }
        /**
         * Get color that contrasts the most.
         *
         * @since 5.0.10
         *
         * @param string $hex_color   Hex value of color to compare.
         * @param string $light_color Hex value of light contrast color.
         * @param string $dark_color  Hex value of dark contrast color.
         *
         * @return string
         */
        public static function get_contrast_color($hex_color, $light_color = '#ffffff', $dark_color = '#000000')
        {
        }
        /**
         * Get contrast ratio of two colors.
         *
         * @since 5.0.10
         *
         * @param string $hex_color     Hex value of color.
         * @param string $compare_color Hax value of comparing color.
         *
         * @return int
         */
        public static function get_contrast_ratio($hex_color, $compare_color)
        {
        }
    }
}
namespace Tribe\Utils {
    /**
     * Compatibility_Classes class
     *
     * @since 4.14.0
     */
    class Compatibility_Classes
    {
        /**
         * Stores all the classes.
         * In the format: ['class' => true, 'class => false ]
         *
         * @var array<string,bool>
         */
        protected $classes = [];
        /**
         * Stores all the admin classes.
         * In the format: ['class' => true, 'class => false ]
         *
         * @var array<string,bool>
         */
        protected $admin_classes = [];
        /**
         * Queue-aware method to get the classes array.
         * Returns the array of classes to add.
         *
         * @since 4.14.0
         *
         * @param string $queue The queue we want to get 'admin', 'display', 'all'.
         * @return array<string,bool> A map of the classes for the queue.
         */
        public function get_classes($queue = 'display')
        {
        }
        /**
         * Returns the array of classnames to add
         *
         * @since 4.14.0
         *
         * @param string $queue The queue we want to get 'admin', 'display', 'all'.
         * @return array<string> The list of class names.
         */
        public function get_class_names($queue = 'display')
        {
        }
        /**
         * Checks if a class is in the queue,
         * wether it's going to be added or not.
         *
         * @since 4.14.0
         *
         * @param string $class The class we are checking for.
         * @param string $queue The queue we want to check 'admin', 'display', 'all'
         * @return boolean Whether a class exists or not in the queue.
         */
        public function class_in_queue($class, $queue = 'display')
        {
        }
        /**
         * Checks if a class is in the queue and going to be added.
         *
         * @since 4.14.0
         *
         * @param string $class The class we are checking for.
         * @param string $queue The queue we want to check 'admin', 'display', 'all'
         * @return boolean Whether a class is currently queued or not.
         */
        public function class_is_enqueued($class, $queue = 'display')
        {
        }
        /**
         * Dequeues a class.
         *
         * @since 4.14.0
         *
         * @param string $class
         * @param string $queue The queue we want to alter 'admin', 'display', 'all'
         * @return boolean
         */
        public function dequeue_class($class, $queue = 'display')
        {
        }
        /**
         * Enqueues a class.
         *
         * @since 4.14.0
         *
         * @param string $class
         * @param string $queue The queue we want to alter 'admin', 'display', 'all'
         * @return false
         */
        public function enqueue_class($class, $queue = 'display')
        {
        }
        /**
         * Add a single class to the queue.
         *
         * @since 4.14.0
         *
         * @param string $class The class to add.
         * @param string $queue The queue we want to alter 'admin', 'display', 'all'
         * @return void
         */
        public function add_class($class, $queue = 'display')
        {
        }
        /**
         * Add an array of classes to the queue.
         *
         * @since 4.14.0
         *
         * @param array<string,boolean> $class The classes to add.
         * @return void
         */
        public function add_classes(array $classes, $queue = 'display')
        {
        }
        /**
         * Remove a single class from the queue.
         *
         * @since 4.14.0
         *
         * @param string $class The class to remove.
         * @return void
         */
        public function remove_class($class, $queue = 'display')
        {
        }
        /**
         * Remove an array of classes from the queue.
         *
         * @since 4.14.0
         *
         * @param array<string> $classes The classes to remove.
         * @return void
         */
        public function remove_classes(array $classes, $queue = 'display')
        {
        }
        /**
         * Adds the enqueued classes to the compatibility class array.
         *
         * @since 4.14.0
         *
         * @param array<string> $classes An array of compatibility class names.
         * @return array Array of compatibility classes.
         */
        public function add_compatibility_classes($classes = [])
        {
        }
        /**
         * Adds the enqueued classes to the compatibility class array.
         *
         * @since 4.14.0
         *
         * @param string $classes The existing compatibility class names.
         *
         * @return string String of admin compatibility classes.
         */
        public function add_admin_compatibility_classes($classes)
        {
        }
    }
}
namespace {
    /**
     * Class Tribe__Utils__Coordinates_Provider
     *
     * Provided latitude and longitude coordinates for a location.
     */
    class Tribe__Utils__Coordinates_Provider
    {
        /**
         * @var string
         */
        public static $google_api_base = 'https://maps.googleapis.com/maps/api/geocode/';
        /**
         * @var string
         */
        public static $google_api_json_format = 'json';
        /**
         * @var string
         */
        public static $transient_name = 'tribe_resolved_address_coordinates';
        /**
         * @var bool
         */
        protected $transient = \false;
        /**
         * @var Tribe__Utils__Coordinates_Provider
         */
        protected static $instance;
        /**
         * The class singleton constructor.
         *
         * @return Tribe__Utils__Coordinates_Provider
         */
        public static function instance()
        {
        }
        /**
         * Tribe__Utils__Coordinates_Provider constructor.
         *
         * @param WP_Http|null $https
         */
        public function __construct(\WP_Http $https = \null)
        {
        }
        /**
         * @param string|array $address
         */
        public function provide_coordinates_for_address($address)
        {
        }
        /**
         * @return null|WP_Http
         */
        public function get_http()
        {
        }
        protected function get_google_api_base()
        {
        }
        protected function get_google_api_json_format()
        {
        }
        protected function get_transient()
        {
        }
        protected function get_resolved($address)
        {
        }
    }
}
namespace Tribe\Utils {
    /**
     * Class Date i18n
     *
     * @package Tribe\Utils
     * @since   4.11.0
     */
    class Date_I18n extends \DateTime
    {
        /**
         * {@inheritDoc}
         *
         * @return Date_I18n Localizable variation of DateTime.
         */
        #[\ReturnTypeWillChange]
        public static function createFromImmutable($datetime)
        {
        }
        /**
         * Returns a translated string using the params from this DateTime instance.
         *
         * @since  4.11.0
         *
         * @param  string $date_format Format to be used in the translation.
         *
         * @return string         Translated date.
         */
        public function format_i18n($date_format)
        {
        }
    }
    /**
     * Class Date i18n Immutable
     *
     * @since   4.11.0
     * @package Tribe\Utils
     */
    class Date_I18n_Immutable extends \DateTimeImmutable
    {
        /**
         * {@inheritDoc}
         *
         * @return Date_I18n_Immutable Localizable variation of DateTimeImmutable.
         */
        #[\ReturnTypeWillChange]
        public static function createFromMutable($datetime)
        {
        }
        /**
         * Returns a translated string using the params from this Immutable DateTime instance.
         *
         * @since  4.11.0
         *
         * @param string $date_format Format to be used in the translation.
         *
         * @return string         Translated date.
         */
        public function format_i18n($date_format)
        {
        }
    }
    /**
     * Class Element_Attributes to handle HTML attributes for elements.
     *
     * @since  4.12.3
     *
     * @package Tribe\Utils
     */
    class Element_Attributes
    {
        /**
         * Store the results of parsing the attributes.
         *
         * @since  4.12.3
         *
         * @var array<string,string>
         */
        protected $results = [];
        /**
         * Stores the arguments passed.
         *
         * @since  4.12.3
         *
         * @var array
         */
        protected $arguments = [];
        /**
         * Setups an instance of Element Attributes.
         *
         * @since  4.12.3
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * When invoked this class will return the full HTML attributes.
         *
         * @since  4.12.3
         *
         * @return string In the format ` attribute1="value1" attribute2="value2" `
         */
        public function __invoke()
        {
        }
        /**
         * When cast to string an instance will return the full HTML attributes.
         *
         * @since  4.12.3
         *
         * @return string In the format ` attribute1="value1" attribute2="value2" `
         */
        public function __toString()
        {
        }
        /**
         * Gets the full HTML attributes for this instance of Element Attributes.
         * It will contain a space on each end of the attribute.
         *
         * @since  4.12.3
         *
         * @return string In the format ` attribute1="value1" attribute2="value2" `
         */
        public function get_attributes()
        {
        }
        /**
         * Gets a space separated string of all attributes to be printed.
         *
         * @since  4.12.3
         *
         * @return string
         */
        public function get_attributes_as_string()
        {
        }
        /**
         * Get the array of attributes to be printed.
         *
         * @since  4.12.3
         *
         * @return array
         */
        public function get_attributes_array()
        {
        }
        /**
         * Parse arguments or argument for this instance, and store values on results.
         *
         * @since  4.12.3
         *
         * @param  mixed  $arguments  Any possible set of arguments that this class supports.
         *
         * @return void
         */
        protected function parse($arguments)
        {
        }
        /**
         * Parse an array into an array of acceptable values for the instance.
         *
         * @since  4.12.3
         *
         * @param  array  $values  Array of values to be parsed.
         *
         * @return void
         */
        protected function parse_array(array $values)
        {
        }
        /**
         * Parse a string into an array of acceptable values for the instance.
         *
         * @since  4.12.3
         *
         * @param  string  $arguments  Space separated string of attributes to be parsed.
         *
         * @return void
         */
        protected function parse_string($arguments)
        {
        }
        /**
         * Parses an object into the array of considered attributes.
         *
         * @since  4.12.3
         *
         * @param  mixed  $object  Object to be converted into array and parsed.
         *
         * @return void
         */
        protected function parse_object($object)
        {
        }
        /**
         * Parses a callable method or function into the array of considered attributes.
         *
         * The result of the callable will REPLACE the current attributes, callables will work like filters.
         *
         * @since  4.12.3
         *
         * @param  callable  $method_or_function  Method or Function to be called.
         *
         * @return void
         */
        protected function parse_callable(callable $method_or_function)
        {
        }
    }
    /**
     * Class Element_Classes to handle HTML class attribute for elements.
     *
     * @since  4.9.13
     *
     * @package Tribe\Utils
     */
    class Element_Classes
    {
        /**
         * Store the results of parsing the classes.
         *
         * @since  4.9.13
         *
         * @var array
         */
        protected $results = [];
        /**
         * Stores the arguments passed.
         *
         * @since  4.9.13
         *
         * @var array
         */
        protected $arguments = [];
        /**
         * Setups an instance of Element Classes.
         *
         * @since  4.9.13
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * When invoked this class will return the full HTML class attribute.
         *
         * @since  4.9.13
         *
         * @return string In the format ` class="class1 class2" `
         */
        public function __invoke()
        {
        }
        /**
         * When cast to string an instance will return the full HTML class attribute.
         *
         * @since  4.9.13
         *
         * @return string In the format ` class="class1 class2" `
         */
        public function __toString()
        {
        }
        /**
         * Gets the full HTML class attribute for this instance of Element Classes.
         * It will contain a space on each end of the attribute.
         *
         * @since  4.9.13
         *
         * @return string In the format ` class="class1 class2" `
         */
        public function get_attribute()
        {
        }
        /**
         * Gets a space separated string of all classes to be printed.
         *
         * @since  4.9.13
         *
         * @return string
         */
        public function get_classes_as_string()
        {
        }
        /**
         * Get the array of classes to be printed.
         *
         * @since  4.9.13
         *
         * @return array
         */
        public function get_classes()
        {
        }
        /**
         * Get the array of the classes, using [ class_name => bool ] as the format.
         *
         * @since  4.9.13
         *
         * @return array [ class_name => bool ]
         */
        public function get_conditions()
        {
        }
        /**
         * Parse arguments or argument for this instance, and store values on results.
         *
         * @since  4.9.13
         *
         * @param  mixed  $arguments      Any possible set of arguments that this class supports.
         * @param  boolean $default_value What is the default value for a given class.
         *
         * @return void
         */
        protected function parse($arguments, $default_value = true)
        {
        }
        /**
         * Parse a string into an array of acceptable values for the instance.
         *
         * @since  4.9.13
         *
         * @param  string  $arguments     Space separated string of classes to be parsed.
         * @param  boolean $default_value What is the default value for a given class.
         *
         * @return void
         */
        protected function parse_string($arguments, $default_value = true)
        {
        }
        /**
         * Parse an array into an array of acceptable values for the instance.
         *
         * @since  4.9.13
         *
         * @param  array  $values  Array of values to be parsed.
         *
         * @return void
         */
        protected function parse_array(array $values)
        {
        }
        /**
         * Parses an object, only if it contains __toString it will be considered.
         *
         * @since  4.9.13
         *
         * @param  mixed  $object  Object to be checked for the __toString method
         *
         * @return void
         */
        protected function parse_object($object)
        {
        }
        /**
         * Parses a callable method or function into the array of considered classes.s
         *
         * @since  4.9.13
         *
         * @param  callable  $method_or_function  Method or Function to be called.
         *
         * @return void
         */
        protected function parse_callable(callable $method_or_function)
        {
        }
    }
}
namespace {
    class Tribe__Utils__Global_ID
    {
        /**
         * Type of the ID
         * @var string|bool
         */
        protected $type = \false;
        /**
         * Origin of this Instance of ID
         * @var string|bool
         */
        protected $origin = \false;
        /**
         * Don't allow creation of Global IDs for other types of source
         * @var array
         */
        protected $valid_types = ['url', 'meetup', 'facebook', 'eventbrite'];
        /**
         * For some types of ID we have a predefined Origin
         * @var array
         */
        protected $type_origins = ['meetup' => 'meetup.com', 'facebook' => 'facebook.com', 'eventbrite' => 'eventbrite.com'];
        /**
         * Tribe__Utils__Global_ID constructor.
         */
        public function __construct()
        {
        }
        /**
         * A setter and getter for the Type of ID
         *
         * @param  string|null  $name  When null is passed it will return the current Type
         * @return mixed               Will return False on invalid type or the Type in String
         */
        public function type($name = \null)
        {
        }
        /**
         * A setter and getter for the origin on this ID
         *
         * @param  string|null  $name  When null is passed it will return the current Origin
         * @return mixed               Will return False on invalid origin or the Origin in String
         */
        public function origin($url = \null)
        {
        }
        /**
         * A very simple Generation of IDs
         *
         * @param  array  $args Which query arguments will be added to the Origin
         *
         * @return string
         */
        public function generate(array $args = [])
        {
        }
        /**
         * Parse the Global ID string.
         *
         * @param string $global_id The previously generated global ID string.
         *
         * @return array The parsed $args information built by self::generate()
         *
         * @since 4.7.15
         */
        public function parse($global_id)
        {
        }
    }
    /**
     * Class Tribe__Utils__JSON
     *
     * Provides JSON related utility functions.
     */
    class Tribe__Utils__JSON
    {
        /**
         * Recursively escapes quotes and JSON relevant chars in a string to avoid json operation errors.
         *
         * The method will recursively escape any string found.
         *
         * @param array|string $value Either a string to escape or an array of strings to escape.
         *
         * @return array|string Either an array of escaped strings or the escaped string.
         */
        public static function escape_string($value)
        {
        }
    }
}
namespace Tribe\Utils {
    /**
     * Trait Lazy_Events
     *
     * @since   4.9.16
     *
     * @package Tribe\Utils
     *
     * @property string $lazy_resolve_action The action to which the trait will hook to run the callback if the object
     *                                       resolved. Using classes should define the property if the default `shutdown`
     *                                       one is not correct.
     * @property int $lazy_resolve_priority The priority at which the resolution callback will be hooked on the
     *                                      `$lazy_resolve_action`; defaults to `10`.
     */
    trait Lazy_Events
    {
        /**
         * The callback that will be called when, and if, the lazy object resolved at least once.
         *
         * @since 4.9.16
         *
         * @var
         */
        protected $lazy_resolve_callback;
        /**
         * Sets the callback that will be hooked to the resolve action when, and if, the `resolved` method is called.
         *
         * @since 4.9.16
         *
         * @param callable $callback The callback that will be hooked on the `$lazy_resolve_action` (defaults to `shutdown`)
         *                           if the `resolved` method is called.
         *
         * @return static The object instance.
         *
         * @see Lazy_Events::resolved()
         */
        public function on_resolve(callable $callback = null)
        {
        }
        /**
         * Hooks the `$lazy_resolve_callback` to the `$lazy_resolve_action` with the `$lazy_resolve_priority` if set.
         *
         * @since 4.9.16
         */
        protected function resolved()
        {
        }
    }
    /**
     * Class Lazy_Collection
     *
     * @since   4.9.14
     * @package Tribe\Utils
     */
    class Lazy_Collection implements \Tribe\Utils\Collection_Interface
    {
        use \Tribe\Utils\Collection_Trait;
        use \Tribe\Utils\Lazy_Events;
        /**
         * The callback in charge of providing the elements.
         *
         * @var callable
         */
        protected $callback;
        /**
         * The elements of the array.
         *
         * @var array
         */
        protected $items;
        /**
         * Array_Promise constructor.
         *
         * @since 4.9.14
         *
         * @param callable $callback The callback that will be used to populate the elements.
         */
        public function __construct(callable $callback)
        {
        }
        /**
         * Fetches the array items and returns them.
         *
         * @since 4.9.14
         *
         * @return array The array items.
         */
        public function all()
        {
        }
        /**
         * Fills the array elements from the callback if required.
         *
         * @since 4.9.14
         */
        protected function resolve()
        {
        }
        /**
         * Allows accessing the collection methods using properties.
         *
         * E.g. `$collection->first` is equivalent to `$collection->first()`.
         *
         * @since 4.9.14
         *
         * @param string $property The name of the property to access.
         *
         * @return mixed|null The return value of the collection corresponding method or `null` if the collection does not
         *                    have that method.
         */
        public function __get($property)
        {
        }
        /**
         * {@inheritDoc}
         */
        #[\ReturnTypeWillChange]
        public function jsonSerialize()
        {
        }
    }
    class Lazy_String implements \Serializable, \JsonSerializable
    {
        use \Tribe\Utils\Lazy_Events;
        /**
         * The string value produced by the callback, cached.
         *
         * @since 4.9.16
         *
         * @var string
         */
        protected $string;
        /**
         * The callback that will be used to set the string value when called the first time.
         *
         * @since 4.9.16
         *
         * @var callable
         */
        protected $value_callback;
        /**
         * The callback that will be used to escape the string in the `escaped()` method..
         *
         * @since 4.9.16
         *
         * @var callable
         */
        protected $escape_callback;
        /**
         * The escaped string value.
         *
         * @since 4.9.16
         *
         * @var string
         */
        protected $escaped;
        /**
         * Lazy_String constructor.
         *
         * @param callable     $callback        The callback that will be used to populate the string on the first fetch.
         * @param string|false $escape_callback The callback that will be used to escape the string in the `escaped`
         *                                      method.
         */
        public function __construct(callable $callback, $escape_callback = 'esc_html')
        {
        }
        /**
         * Inits, and returns, the string value of the string.
         *
         * @since 4.9.16
         *
         * @return string The unescaped string value.
         */
        public function __toString()
        {
        }
        /**
         * Returns the HTML ready, escaped version of the string.
         *
         * @since 4.9.16
         *
         * @return string The escaped version of the string.
         */
        public function escaped()
        {
        }
        /**
         * Returns the string value, just a proxy of the `__toString` method.
         *
         * @since 4.9.16
         *
         * @return string The string value.
         */
        public function value()
        {
        }
        /**
         * {@inheritDoc}
         *
         * @since 4.9.16
         */
        public function serialize()
        {
        }
        /**
         * {@inheritDoc}
         *
         * @since 4.9.16
         */
        public function unserialize($serialized)
        {
        }
        /**
         * {@inheritDoc}
         */
        #[\ReturnTypeWillChange]
        public function jsonSerialize()
        {
        }
        /**
         * PHP 8.0+ compatible implementation of the serialization logic.
         *
         * @since 5.0.6
         *
         * @return array The data to serialize.
         */
        public function __serialize() : array
        {
        }
        /**
         * PHP 8.0+ compatible implementation of the unserialization logic.
         *
         * @since 5.0.6
         *
         * @param array $data The data to unserialize.
         */
        public function __unserialize(array $data) : void
        {
        }
    }
    /**
     * Class Paths
     *
     * @since   4.12.14
     *
     * @package Tribe\Utils
     */
    class Paths
    {
        /**
         * Merge a set of paths into a single path.
         *
         * The function will take care of merging the paths intersecting their common fragments.
         * E.g. `foo/bar/baz` and `bar/baz/test.php` will be merged int `foo/bar/baz/test.php`.
         *
         * @since 4.12.14
         *
         * @param string|array<string<array<string>> ...$paths A set of paths to merge, each one either a string or an array
         *                                                     of path fragments.
         *
         * @return string The merged path, the path intersecting fragments removed.
         */
        public static function merge(...$paths)
        {
        }
    }
}
namespace {
    // Do not load directly.
    /**
     * Plugin utilities
     */
    class Tribe__Utils__Plugins
    {
        /**
         * Gets plugin data from the plugin file header
         *
         * @see get_plugin_data() for WP Admin only function this is similar to.
         *
         * @param string $plugin_file Absolute path to plugin file containing header.
         *
         * @return array Plugin data; keys match capitalized file header declarations.
         */
        public static function get_plugin_data($plugin_file)
        {
        }
        /**
         * Get list of active plugins with a given prefix in the plugin folder path.
         *
         * @param string|array $prefix Prefixes you want to retrieve.
         *
         * @return array List of plugins with prefix in path.
         */
        public static function get_plugins_with_prefix($prefix)
        {
        }
    }
    /**
     * Class Tribe__Utils__Post_Collection
     *
     * @since 4.9.5
     */
    class Tribe__Utils__Post_Collection extends \Tribe__Utils__Collection
    {
        use \Tribe\Traits\With_Post_Attribute_Detection;
        /**
         * A list of the taxonomies supported by the post types in the collection.
         *
         * @since 4.12.6
         *
         * @var array<string>
         */
        protected $taxonomies;
        /**
         * Tribe__Utils__Post_Collection constructor.
         *
         * Overrides the base constructor to ensure all elements in the collection are, in fact, posts.
         * Elements that do not resolve to a post are discarded.
         *
         * @param array $items
         */
        public function __construct(array $items)
        {
        }
        /**
         * Plucks fields from the posts in the collection creating a map using a field value as key and one
         * or more fields as values.
         *
         * Note: the method does not make any check on the uniqueness of the fields used as keys, e.g. this will
         * probably not return what intended: `$collection->pluck_combine( 'post_status', 'post_title' );`.
         * If there's a chance of the key fields not being unique, then use `#` as key field to simply return an
         * array of plucked values.
         *
         * @since 4.12.6
         *
         * @param string                            $key_field    The field to key the return map by, or `#` to use
         *                                                        progressive integers to key the return value. Use fields
         *                                                        as keys only when their uniqueness is sure.
         * @param string|array<string>|array<array> $value_fields Either a single field name to populate the values with;
         *                                                        a list of fields, each plucked with default settings;
         *                                                        a map of fields to fetch, each defining a `single` and
         *                                                        `args` key to define the pluck `$single` and `$args`
         *                                                        parameters where applicable.
         *                                                        Additionally an `as` parameter can be specified to alias
         *                                                        the field in the results.
         *                                                        If the only requirement is to alias fields, just use a
         *                                                        flat map like `[ <orig_key_1> => <alias_1>, ... ]`.
         *
         * @return array<int|string,string|array> A list of plucked fields or a map of plucked fields keyed by the
         *                                        specified field.
         */
        public function pluck_combine($key_field = '#', $value_fields = 'post_title')
        {
        }
        /**
         * Parses a single field request to extract the `$single` and `$args` parameters from it.
         *
         * @since 4.12.6
         *
         * @param string|array<string,string|array> $field The field name or the field arguments map.
         *
         * @return array<string,string,array> The `$as`, `$single` and `$args` parameters extracted from the field.
         */
        protected function parse_field_args($field)
        {
        }
        /**
         * Plucks a post field, a taxonomy or a custom field from the collection.
         *
         * @since 4.12.6
         *
         * @param string $key      The name of the field to pluck; the method will try to detect the type of field
         *                         from its name. If any issues might arise due to fields of different types with the
         *                         same name, then use the `pluck_<type>` methods directly.
         * @param bool   $single   Whether to pluck a single taxonomy term or custom fields or an array of all the taxonomy
         *                         terms or custom fields for each post.
         * @param array  $args     A list of n optional arguments that will be passed down to the `pluck_<type>` methods.
         *                         Currently only the the `pluck_taxonomy` will support one more argument to define the
         *                         query arguments for the term query.
         *
         * @return array<string>|array<array> Either an array of plucked fields when plucking post fields or single
         *                                    custom fields or taxonomy terms, or an array of arrays, each one a list
         *                                    of all the taxonomy terms or custom fields entries for each post.
         */
        public function pluck($key, $single = \true, array $args = \null)
        {
        }
        /**
         * Detects the type of a post field from its name.
         *
         * @since 4.12.6
         *
         * @param string $key The name of the field to check.
         *
         * @return string The type of field detected for the key, either `post_field`, `taxonomy` or `custom_field`.
         */
        protected function detect_field_type($key)
        {
        }
        /**
         * Initialize the post collection taxonomies by filling up the `$taxonomies` property.
         *
         * Note the collection will use the first post in the collection to fill the taxonomies array,
         * this assumes the collection is homogeneous in its post types.
         *
         * @since 4.12.6
         */
        protected function init_taxonomies()
        {
        }
        /**
         * Plucks a post field from all posts in the collection.
         *
         * Note: there is no check on the name of the plucked post field: if a non-existing post field is requested, then
         * the method will return an empty array.
         *
         * @since 4.12.6
         *
         * @param string $field The name of the post field to pluck.
         *
         * @return array<string> A list of the plucked post fields from each item in the collection.
         */
        public function pluck_field($field)
        {
        }
        /**
         * Plucks taxonomy terms assigned to the posts in the collection.
         *
         * Note: there is no check on the taxonomy being an existing one or not; that responsibility
         * is on the user code.
         *
         * @since 4.12.6
         *
         * @param string                     $taxonomy The name of the post taxonomy to pluck terms for.
         * @param bool                       $single   Whether to return only the first results or all of them.
         * @param array<string,string|array> $args     A set of arguments as supported by the `WP_Term_Query::__construct`
         *                                             method.
         *
         * @return array<mixed>|array<array> Either an array of the requested results if `$single` is `true`
         *                                   or an array of arrays if `$single` is `false`.
         */
        public function pluck_taxonomy($taxonomy, $single = \true, array $args = \null)
        {
        }
        /**
         * Plucks a meta key for all elements in the collection.
         *
         * Elements that are not posts or do not have the meta set will have an
         * empty string value.
         *
         * @since 4.9.5
         *
         * @param string $meta_key The meta key to pluck.
         * @param bool   $single   Whether to fetch the meta key as single or not.
         *
         * @return array An array of meta values for each item in the collection; items that
         *               do not have the meta set or that are not posts, will have an empty
         *               string value.
         */
        public function pluck_meta($meta_key, $single = \true)
        {
        }
    }
    class Tribe__Utils__Post_Root_Pool
    {
        /**
         * @var string
         */
        protected $pool_transient_name = 'tribe_ticket_prefix_pool';
        /**
         * @var array|bool
         */
        protected static $prefix_pool = \false;
        /**
         * @var string
         */
        protected $root_separator = '-';
        /**
         * @var array
         */
        protected $postfix = 1;
        /**
         * @var WP_Post
         */
        protected $current_post = \null;
        /**
         * Generates a unique root for a post using its post_name.
         *
         * @param WP_Post $post
         *
         * @return string
         */
        public function generate_unique_root(\WP_Post $post)
        {
        }
        /**
         * @param string $post_name
         *
         * @param string $postfix
         *
         * @return string
         */
        protected function build_root_from($post_name, $postfix = '')
        {
        }
        /**
         * @return string
         */
        public function get_pool_transient_name()
        {
        }
        /**
         * @param $string
         *
         * @return string
         * @deprecated 4.7.18
         */
        protected function uc_first_letter($string)
        {
        }
        /**
         * @param $string
         *
         * @return string
         * @deprecated 4.7.18
         */
        protected function safe_strtoupper($string)
        {
        }
        /**
         * @param string $candidate
         */
        protected function is_in_pool($candidate)
        {
        }
        /**
         * @return array
         */
        protected function fetch_pool()
        {
        }
        protected function maybe_init_pool()
        {
        }
        /**
         * @param string $unique_root
         */
        protected function insert_root_in_pool($unique_root)
        {
        }
        public static function reset_pool()
        {
        }
        /**
         * @param $post_name
         * @param $postfix
         *
         * @return string
         */
        protected function build_root_candidate($post_name, $postfix)
        {
        }
        /**
         * Primes the post pool.
         *
         * @param array $pool
         * @param bool  $override_transient If `true` the transient too will be overwritten.
         */
        public function set_pool(array $pool, $override_transient = \false)
        {
        }
        /**
         * Whether the pool transient has been primed or not.
         *
         * @return bool
         */
        public function is_primed()
        {
        }
        /**
         * @return array
         */
        public function get_pool()
        {
        }
    }
}
namespace Tribe\Utils {
    /**
     * Class Post_Thumbnail
     *
     * @since   4.9.14
     * @package Tribe\Utils
     */
    class Post_Thumbnail implements \ArrayAccess, \Serializable
    {
        use \Tribe\Utils\Lazy_Events;
        /**
         * An array of the site image sizes, including the `full` one.
         *
         * @since 4.9.14
         *
         * @var array
         */
        protected $image_sizes;
        /**
         * The post ID this images collection is for.
         *
         * @since 4.9.14
         *
         * @var int
         */
        protected $post_id;
        /**
         * The post thumbnail data.
         *
         * @since 4.9.14
         *
         * @var array
         */
        protected $data;
        /**
         * A flag property indicating whether the post thumbnail for the post exists or not.
         *
         * @since 4.9.16
         *
         * @var bool
         */
        protected $exists;
        /**
         * The post ID, if any, of the post thumbnail.
         *
         * @since 4.9.16
         *
         * @var int
         */
        protected $thumbnail_id;
        /**
         * Post_Images constructor.
         *
         * @param int $post_id The post ID.
         */
        public function __construct($post_id)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function __get($property)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function __set($property, $value)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function __isset($property)
        {
        }
        /**
         * Fetches and returns the image sizes registered on the site, if any.
         *
         * @since 4.9.14
         *
         * @return array An array of the registered image sizes.
         */
        public function get_image_sizes()
        {
        }
        /**
         * Returns the data about the post thumbnail, if any.
         *
         * @since 4.9.14
         *
         * @return array An array of objects containing the post thumbnail data.
         */
        public function fetch_data()
        {
        }
        /**
         * {@inheritDoc}
         */
        #[\ReturnTypeWillChange]
        public function offsetExists($offset) : bool
        {
        }
        /**
         * {@inheritDoc}
         */
        #[\ReturnTypeWillChange]
        public function offsetGet($offset)
        {
        }
        /**
         * {@inheritDoc}
         */
        #[\ReturnTypeWillChange]
        public function offsetSet($offset, $value)
        {
        }
        /**
         * {@inheritDoc}
         */
        #[\ReturnTypeWillChange]
        public function offsetUnset($offset)
        {
        }
        /**
         * Returns an array representation of the post thumbnail data.
         *
         * @since 4.9.14
         *
         *
         * @return array An array representation of the post thumbnail data.
         */
        public function to_array()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function serialize()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function unserialize($serialized)
        {
        }
        /**
         * Returns whether a post thumbnail is set for the post or not.
         *
         * @since 4.9.16
         *
         * @return bool Whether a post thumbnail is set for the post or not.
         */
        public function exists()
        {
        }
        /**
         * PHP 8.0+ compatible implementation of the serialization logic.
         *
         * @since 5.0.6
         *
         * @return array The data to serialize.
         */
        public function __serialize() : array
        {
        }
        /**
         * PHP 8.0+ compatible implementation of the unserialization logic.
         *
         * @since 5.0.6
         *
         * @param array $data The data to unserialize.
         */
        public function __unserialize(array $data) : void
        {
        }
    }
    /**
     * Class Query
     *
     * @since   4.9.21
     *
     * @package Tribe\Utils
     */
    class Query
    {
        /**
         * Builds a new `WP_Query` object and sets the post, and accessory flags, on it.
         *
         * The query is built to yield to run a query that will yield no result and to have a `request` property that
         * will never yield results; calls on the `WP_Query::get_posts` method are filtered to always return the post set.
         * Queries built by this function can be spotted by looking for the `tribe_mock_query` property.
         *
         * @since 4.9.21
         *
         * @param array $posts The array of posts that should be used to build the query.
         *
         * @return \WP_Query The new WP_Query object, built to reflect the posts passed to it.
         */
        public static function for_posts(array $posts = [])
        {
        }
    }
    /**
     * Class Strings
     *
     * @since 4.12.1
     *
     * @package Tribe\Utils
     */
    class Strings
    {
        /**
         * Replace the first occurrence of a given value in the string.
         *
         * @since 4.12.1
         *
         * @param string $search  The string to search for and replace.
         * @param string $replace The replacement string.
         * @param string $subject The string to do the search and replace from.
         *
         * @return string The string with the first occurrence of a given value replaced.
         */
        public static function replace_first($search, $replace, $subject)
        {
        }
        /**
         * Replace the last occurrence of a given value in the string.
         *
         * @since 4.12.1
         *
         * @param string $search  The string to search for and replace.
         * @param string $replace The replacement string.
         * @param string $subject The string to do the search and replace from.
         *
         * @return string The string with the last occurrence of a given value replaced.
         */
        public static function replace_last($search, $replace, $subject)
        {
        }
    }
    /**
     * Class Taxonomy.
     *
     * @since   4.13.0
     *
     * @package Tribe\Utils
     */
    class Taxonomy
    {
        /**
         * Match any operand.
         *
         * @since 4.13.0
         * @since 4.13.0
         *
         * @var string
         */
        const OPERAND_OR = 'OR';
        /**
         * Match all operand.
         *
         * @since 4.13.0
         *
         * @var string
         */
        const OPERAND_AND = 'AND';
        /**
         * Default operand for taxonomy filters.
         *
         * @since 4.13.0
         *
         * @var string
         */
        const DEFAULT_OPERAND = self::OPERAND_OR;
        /**
         * Translates a given argument to repository arguments.
         *
         * @since 4.13.0
         *
         * @param string       $taxonomy Which taxonomy we are using to setup.
         * @param string|array $terms    Which terms we are going to use here.
         * @param string       $operand  Which is the operand we should use.
         *
         * @return array A fully qualified `tax_query` array, merge using `array_merge_recursively`.
         */
        public static function translate_to_repository_args($taxonomy, $terms, $operand = self::OPERAND_OR)
        {
        }
        /**
         * Transform all Term IDs and Slugs into IDs of existing terms in a given taxonomy.
         *
         * @since 4.13.0
         *
         * @param string|int|array $terms    Terms to be cleaned up.
         * @param string           $taxonomy Which taxonomy we are querying for.
         *
         * @return array List of IDs of terms.
         */
        public static function normalize_to_term_ids($terms, $taxonomy)
        {
        }
        /**
         * When dealing with templates that make use of `get_post_class` the taxonomy + terms queries are very inefficient
         * so this method primes the caching by doing a single query that will build the cache for all Posts involved on
         * the template we are about to render, reducing about 2 queries for each Post that we prime the cache for.
         *
         * Important to note that
         *
         * @since 5.0.0
         *
         * @param array $posts
         * @param array $taxonomies
         * @param bool  $prime_term_meta
         *
         * @return array<int, array>
         */
        public static function prime_term_cache(array $posts = [], array $taxonomies = ['post_tag', \Tribe__Events__Main::TAXONOMY], bool $prime_term_meta = false) : array
        {
        }
    }
    class Theme_Compatibility
    {
        /**
         * List of themes which have compatibility requirements.
         *
         * @since 4.14.0
         *
         * @var   array
         */
        protected static $themes = ['avada', 'divi', 'enfold', 'genesis', 'twentyseventeen', 'twentynineteen', 'twentytwenty', 'twentytwentyone'];
        /**
         * Checks if the current theme needs a compatibility fix.
         *
         * @since  4.14.0
         *
         * @param null|string $theme Optionally, pass a specific theme name in to see if compatibility
         *                      is required for that theme.
         *
         * @return boolean
         */
        public static function is_compatibility_required($theme = null)
        {
        }
        /**
         * Contains the logic for if this object's classes should be added to the queue.
         *
         * @since 4.14.0
         *
         * @param boolean $add   Whether to add the class to the queue or not.
         * @param array   $class The array of compatibility class names to add.
         * @param string  $queue The queue we want to get 'admin', 'display', 'all'.
         *
         * @return boolean Whether compatibility classes should be added or not.
         */
        public static function should_add_compatibility_class_to_queue($add, $class, $queue)
        {
        }
        /**
         * Add compatibility classes.
         *
         * @since 4.14.0
         *
         * @return void
         */
        public static function add_compatibility_classes()
        {
        }
        /**
         * Fetches the correct class strings for theme and child theme if available + the container class.
         *
         * @since 4.14.0
         *
         * @return array $classes
         */
        public static function get_container_classes()
        {
        }
        /**
         * Fetches the correct class strings for theme and child theme if available.
         *
         * @since 4.14.0
         *
         * @return array $classes
         */
        public static function get_compatibility_classes()
        {
        }
        /**
         * Returns a list of themes registered for compatibility with our Views.
         *
         * @since  4.14.0
         *
         * @return array An array of the themes registered.
         */
        public static function get_registered_themes()
        {
        }
        /**
         * Returns an array of active themes (parent and child).
         *
         * @since 4.14.0
         *
         * @return array $themes An array in the format [ 'parent' => 'theme name', 'child' => 'theme name' ].
         *                       Empty array if none found.
         */
        public static function get_active_themes()
        {
        }
        /**
         * Get the current theme.
         *
         * @since 4.14.0
         *
         * @param boolean $object Pass true if you want the theme object returned instead of the name.
         *
         * @return string|object|boolean Will return the theme name by default.
         *                               Will return the theme object if passed boolean true as the parameter.
         *                               Will return boolean false if the theme is not found.
         */
        public static function get_current_theme($object = false)
        {
        }
        /**
         * Checks if the provided theme is active.
         *
         * @since 4.14.0
         *
         * @param string $theme The theme name like 'avada' or 'twentytwenty',
         *
         * @return boolean True if the requested theme is active,
         *                 false if the current theme could not be found or is not the requested theme.
         */
        public static function is_active_theme($check)
        {
        }
    }
}
namespace {
    /**
     * helper class that validates fields for use in Settings, MetaBoxes, Users, anywhere.
     * Instantiate whenever you want to validate a field
     *
     */
    class Tribe__Validate
    {
        /**
         * the field object to validate
         * @var array
         */
        public $field;
        /**
         * the field's value
         * @var mixed
         */
        public $value;
        /**
         * additional arguments for validation
         * used by some methods only
         * @var array
         */
        public $additional_args;
        /**
         * the field's label, used in error messages
         * @var string
         */
        public $label;
        /**
         * the type of validation to perform
         * @var string
         */
        public $type;
        /**
         * the result object of the validation
         * @var stdClass
         */
        public $result;
        /**
         * Class constructor
         *
         * @param string $field_id The field ID to validate
         * @param array  $field    The field object to validate
         * @param mixed  $value    The value to validate
         */
        public function __construct($field_id, $field, $value, $additional_args = [])
        {
        }
        /**
         * validates a field as a string containing only letters and numbers
         */
        public function alpha_numeric()
        {
        }
        /**
         * validates a field as a string containing only letters,
         * numbers and carriage returns
         */
        public function alpha_numeric_multi_line()
        {
        }
        /**
         * Validates a field as a string containing only letters,
         * numbers, dots and carriage returns
         */
        public function alpha_numeric_multi_line_with_dots_and_dashes()
        {
        }
        /**
         * Validates a field as a string containing only letters,
         * numbers, dashes and underscores
         */
        public function alpha_numeric_with_dashes_and_underscores()
        {
        }
        /**
         * Validates a field as just "not empty".
         *
         * @since 4.7.6
         */
        public function not_empty()
        {
        }
        /**
         * validates a field as being positive decimal
         */
        public function positive_decimal()
        {
        }
        /**
         * validates a field as being positive decimal or percent
         */
        public function positive_decimal_or_percent()
        {
        }
        /**
         * validates a field as being positive integers
         */
        public function positive_int()
        {
        }
        /**
         * validates a field as being an integer
         *
         * The expected value is a whole number (positive or negative). This method is named "int" to
         * match the mathematical definition of the word AND to closely match the pre-exiting method
         * with a similar name: positive_int(). This method WILL validate whole numbers that go beyond
         * values that PHP's int type supports, however, if someone enters something like that, that's
         * on them. Smart people do smart things.
         */
        public function int()
        {
        }
        /**
         * validates & sanitizes fields as URL slugs
         */
        public function slug()
        {
        }
        /**
         * validates & sanitizes fields as URLs
         */
        public function url()
        {
        }
        /**
         * validates fields that have options (radios, dropdowns, etc.)
         * by making sure the value is part of the options array
         */
        public function options()
        {
        }
        /**
         * Validates fields that have multiple options (checkbox list, etc.)
         * by making sure the value is part of the options array.
         */
        public function options_multi()
        {
        }
        /**
         * validates fields that have options (radios, dropdowns, etc.)
         * by making sure the value is part of the options array
         * then combines the value into an array containing the value
         * and name from the option
         */
        public function options_with_label()
        {
        }
        /**
         * validates a field as not being able to be the same
         * as the specified value as specified in
         * $this->additional_args['compare_name']
         */
        public function cannot_be_the_same_as()
        {
        }
        /**
         * validates a field as being a number or a percentage
         */
        public function number_or_percent()
        {
        }
        /**
         * sanitizes an html field
         */
        public function html()
        {
        }
        /**
         * sanitizes a license key
         */
        public function license_key()
        {
        }
        /**
         * sanitizes a textarea field
         */
        public function textarea()
        {
        }
        /**
         * sanitizes a field as being a boolean
         */
        public function boolean()
        {
        }
        /**
         * validates a Google Maps Zoom field
         */
        public function google_maps_zoom()
        {
        }
        /**
         * validates a field as being part of an address
         * allows for letters, numbers, dashes and spaces only
         */
        public function address()
        {
        }
        /**
         * validates a field as being a city or province
         * allows for letters, dashes and spaces only
         */
        public function city_or_province()
        {
        }
        /**
         * validates a field as being a zip code
         */
        public function zip()
        {
        }
        /**
         * validates a field as being a phone number
         */
        public function phone()
        {
        }
        /**
         * validates & sanitizes a field as being a country list
         */
        public function country_list()
        {
        }
        /**
         * automatically validate a field regardless of the value
         * Don't use this unless you know what you are doing
         */
        public function none()
        {
        }
        /**
         * Validates and sanitizes an email address.
         *
         * @since 4.7.4
         */
        public function email()
        {
        }
        /**
         * Validates and sanitizes a list of email addresses.
         *
         * @since 5.0.14
         */
        public function email_list()
        {
        }
        /**
         * Validates and sanitizes a HTML color codes, including hex, rgb, rgba, hsl and hsla.
         *
         * @since 5.0.0
         */
        public function color()
        {
        }
    }
    /**
     * Interface Tribe__Validator__Interface
     *
     * Models any class that provides methods to validate values.
     */
    interface Tribe__Validator__Interface
    {
        /**
         * @param mixed $value
         *
         * @return bool
         */
        public function is_numeric($value);
        /**
         * @param mixed $value
         *
         * @return bool
         */
        public function is_string($value);
        /**
         * Whether the value is a timestamp or a string parseable by the strtotime function or not.
         *
         * @param mixed $value
         *
         * @return bool
         */
        public function is_time($value);
        /**
         * Whether the value corresponds to an existing user ID or not.
         *
         * @param mixed $value
         *
         * @return bool
         */
        public function is_user_id($value);
        /**
         * Whether the value is a positive integer or not.
         *
         * @param mixed $value
         *
         * @return bool
         */
        public function is_positive_int($value);
        /**
         * Trims a string.
         *
         * Differently from the trim method it will not use the second argument.
         *
         * @param string $value
         *
         * @return string
         */
        public function trim($value);
        /**
         * Whether the value(s) all map to existing post tags.
         *
         * @param mixed $tag
         *
         * @return bool
         */
        public function is_post_tag($tag);
        /**
         * Whether the term exists and is a term of the specified taxonomy.
         *
         * @param mixed  $term Either a single term `term_id` or `slug` or an array of
         *                     `term_id`s and `slug`s
         * @param string $taxonomy
         *
         * @return bool
         */
        public function is_term_of_taxonomy($term, $taxonomy);
        /**
         * Whether the provided value points to an existing attachment ID or an existing image URL.
         *
         * @param int|string $image
         *
         * @return mixed
         */
        public function is_image($image);
        /**
         * Whether a list or array of only contains positive integers or not.
         *
         * @since 4.7.19
         *
         * @param  string|array $list
         * @param string $sep The separator used in the list to separate the elements; ignored if
         *                                  the input value is an array.
         *
         * @return bool
         */
        public function is_positive_int_list($list, $sep = ',');
    }
    /**
     * Class Tribe__Validator__Base
     *
     * Provides methods to validate values.
     */
    class Tribe__Validator__Base implements \Tribe__Validator__Interface
    {
        /**
         * @param mixed $value
         *
         * @return bool
         */
        public function is_not_null($value)
        {
        }
        /**
         * @param mixed $value
         *
         * @return bool
         */
        public function is_null($value)
        {
        }
        /**
         * @param mixed $value
         *
         * @return bool
         */
        public function is_string($value)
        {
        }
        /**
         * @param mixed $value
         *
         * @return bool
         */
        public function is_string_or_empty($value)
        {
        }
        /**
         * Whether the value is a timestamp or a string parseable by the strtotime function or not.
         *
         * @param mixed $value
         *
         * @return bool
         */
        public function is_time($value)
        {
        }
        /**
         * Whether the value corresponds to an existing user ID or not.
         *
         * @param mixed $value
         *
         * @return bool
         */
        public function is_user_id($value)
        {
        }
        /**
         * Whether the value is a positive integer or not.
         *
         * @param mixed $value
         *
         * @return bool
         */
        public function is_positive_int($value)
        {
        }
        /**
         * Whether the value is a list of positive integers only or not.
         *
         * @since 4.7.19
         *
         * @param     array|string|int $list
         * @param string               $sep
         *
         * @return bool
         */
        public function is_positive_int_list($list, $sep = ',')
        {
        }
        /**
         * Trims a string.
         *
         * Differently from the trim method it will not use the second argument.
         *
         * @param string $value
         *
         * @return string
         */
        public function trim($value)
        {
        }
        /**
         * Whether the value(s) all map to existing post tags.
         *
         * @param mixed $tag
         *
         * @return bool
         */
        public function is_post_tag($tag)
        {
        }
        /**
         * Whether the term exists and is a term of the specified taxonomy.
         *
         * @param mixed  $term Either a single term `term_id` or `slug` or an array of
         *                     `term_id`s and `slug`s
         * @param string $taxonomy
         *
         * @return bool
         */
        public function is_term_of_taxonomy($term, $taxonomy)
        {
        }
        /**
         * Whether the provided value points to an existing attachment ID or an existing image URL.
         *
         * @param int|string $image
         *
         * @return mixed
         */
        public function is_image($image)
        {
        }
        /**
         * Whether the provided value points to an existing attachment ID, an existing image URL, or is empty.
         *
         * @param int|string $image
         *
         * @return mixed
         */
        public function is_image_or_empty($image)
        {
        }
        /**
         * @param mixed $value
         *
         * @return bool
         */
        public function is_numeric($value)
        {
        }
        /**
         * Whether a string represents a valid array or not.
         *
         * Valid means that the string looks like a URL, not that the URL is online and reachable.
         *
         * @param string $input
         *
         * @return bool
         */
        public function is_url($input)
        {
        }
        /**
         * Whether a string represents a valid array or not.
         *
         * Valid means that the string looks like a URL, not that the URL is online and reachable.
         *
         * @param string $input
         *
         * @return bool
         */
        public function is_url_or_empty($input)
        {
        }
        /**
         * Whether a string represents a valid and registered post status or not.
         *
         * @param string $post_status
         *
         * @return bool
         */
        public function is_post_status($post_status)
        {
        }
        /**
         * Converts a string, a CSV list to an array.
         *
         * @since 4.7.19
         *
         * @param string|array $list
         *
         * @return array
         */
        public function list_to_array($list)
        {
        }
    }
}
namespace Tribe\Values {
    interface Currency_Interface
    {
        /**
         * Get the string representation of the Value object amount, with the currency symbol.
         *
         * @since 4.14.9
         *
         * @return string
         */
        public function get_currency();
        /**
         * Get the decimal representation of the Value object amount. Decimal is the float value, rounded to the precision.
         *
         * @since 4.14.9
         *
         * @return float
         */
        public function get_decimal();
        /**
         * Get the string representation of the Value object amount. String is formatted according to the Value configs.
         *
         * @since 4.14.9
         *
         * @return string
         */
        public function get_string();
        /**
         * Get the 3-character currency code to use.
         *
         * @since 4.14.9
         *
         * @return string
         */
        public function get_currency_code();
        /**
         * Get the character to be used as currency symbol.
         *
         * @since 4.14.9
         *
         * @return string
         */
        public function get_currency_symbol();
        /**
         * Get the position to use when setting the currency symbol. Positions can be prefix or postfix (suffix).
         *
         * @since 4.14.9
         *
         * @return string
         */
        public function get_currency_symbol_position();
        /**
         * Get the character to be used as decimal separator.
         *
         * @since 4.14.9
         *
         * @return string
         */
        public function get_currency_separator_decimal();
        /**
         * Get the character to be used as thousands separator.
         *
         * @since 4.14.9
         *
         * @return string
         */
        public function get_currency_separator_thousands();
        /**
         * Set up currency details for the currency implementation. This method must be implemented in the leaf class, the
         * actual value class to be used in code.
         *
         * @since 4.14.9
         */
        public function set_up_currency_details();
    }
    interface Value_Interface
    {
        /**
         * Creates a new instance of the class this method is called from.
         *
         * @since 4.14.9
         *
         * @return Abstract_Value
         */
        public static function create();
        /**
         * Returns the object type, to use in filters
         *
         * @since 4.14.9
         *
         * @return string
         */
        public function get_value_type();
        /**
         * Get the value initially passed when the object was instantiated
         *
         * @since 4.14.9
         *
         * @return mixed
         */
        public function get_initial_representation();
        /**
         * Get the current integer representation of the object value
         *
         * @since 4.14.9
         *
         * @return int
         */
        public function get_integer();
        /**
         * Get the current float representation of the object value
         *
         * @since 4.14.9
         *
         * @return float
         */
        public function get_float();
        /**
         * Get the current normalized value for the object
         *
         * @since 4.14.9
         *
         * @return float
         */
        public function get_normalized_value();
        /**
         * Get the current decimal precision set for the object
         *
         * @since 4.14.9
         *
         * @return int
         */
        public function get_precision();
        /**
         * Multiplies the value of the current object by the quantity supplied and return the result.
         *
         * @since 4.14.9
         *
         * @param int|float $multiplier the amount to multiply the object value by.
         *
         * @return float;
         */
        public function multiply($multiplier);
        /**
         * Transforms any formatted numeric string into a numeric value
         *
         * @since 4.14.9
         *
         * @param int|float|string $value the formatted string.
         *
         * @return float
         */
        public function normalize($amount);
        /**
         * Public setter to use for any object.
         *
         * Any time the value in a child class needs to be updated, use this method to do it, as it will update
         * all properties of the object state.
         *
         * @since 4.14.9
         *
         * @param mixed $amount the value to set
         */
        public function set_value($amount);
        /**
         * Public setter to use for any object.
         *
         * @since 4.14.14
         *
         * @param int $amount the precision value to set
         */
        public function set_precision($amount);
        /**
         * Get all valid setters registered to this object instance, up the inheritance chain.
         *
         * Implemented in Tribe\Values\Value_Update.php
         *
         * @since 4.14.9
         *
         * @return string[]
         */
        public function get_setters();
        /**
         * Value loader. This method calls all registered setter methods in the
         * inheritance chain every time the object is updated, so the values in each of the formats are always kept up to
         * date.
         *
         * Implemented in Tribe\Values\Value_Update.php
         *
         * @since 4.14.9
         */
        public function update();
        /**
         * Adds the value of the current object to the sum of the values received and return the result.
         *
         * @since 4.14.9
         *
         * @param array $values an array of float and/or integer values to add.
         *
         * @return int|float
         */
        public function sum($values);
    }
    trait Value_Calculation
    {
        /**
         * Sets the current object with its value multiplied by $multiplier.
         *
         * @since 4.14.9
         *
         * @param int|float $multiplier the value to multiply by
         *
         * @return $this
         */
        public function sub_total($multiplier)
        {
        }
        /**
         * Sets the current object value to be the sum of its current value plus the values of all objects received in
         * $values.
         *
         * @since 4.14.9
         *
         * @param Abstract_Value[] $values a list of Value objects
         *
         * @return $this
         */
        public function total($values)
        {
        }
        /**
         * @inheritDoc
         */
        public function sum($values)
        {
        }
        /**
         * @inheritDoc
         */
        public function multiply($multiplier)
        {
        }
        /**
         * Rounds the current value to its precision and multiplies it by 10^precision to get an integer representation
         * including decimals.
         *
         * @since 4.14.9
         *
         * @param int|float $value the value to transform
         *
         * @return int
         */
        public function to_integer($value)
        {
        }
    }
    trait Value_Update
    {
        /**
         * @inheritDoc
         */
        public function get_setters()
        {
        }
        /**
         * @inheritDoc
         */
        public function update()
        {
        }
    }
    abstract class Abstract_Value implements \Tribe\Values\Value_Interface
    {
        use \Tribe\Values\Value_Calculation;
        use \Tribe\Values\Value_Update;
        /**
         * The class type representation to use when firing scoped filters
         *
         * @since 4.14.9
         *
         * @var string
         */
        public $value_type;
        /**
         * Initialize object
         *
         * @since 4.14.9
         *
         * @param mixed $amount the value to set initially
         */
        public function __construct($amount = 0)
        {
        }
        /**
         * @inheritDoc
         */
        public static function create($value = 0)
        {
        }
        /**
         * @inheritDoc
         */
        public function set_value($amount)
        {
        }
        /**
         * @inheritDoc
         */
        public function set_precision($amount)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_integer()
        {
        }
        /**
         * @inheritDoc
         */
        public function get_float()
        {
        }
        /**
         * @inheritDoc
         */
        public function get_precision()
        {
        }
        /**
         * @inheritDoc
         */
        public function get_normalized_value()
        {
        }
        /**
         * @inheritDoc
         */
        public function get_initial_representation()
        {
        }
        /**
         * @inheritDoc
         */
        public function get_value_type()
        {
        }
        /**
         * @inheritDoc
         */
        public function normalize($value)
        {
        }
        /**
         * Private setter for the integer representation of the object amount.
         *
         * @since 4.14.9
         *
         * To set a new value use the public setter `$obj->set_value( $amount )`
         */
        protected function set_integer_value()
        {
        }
        /**
         * Private setter for the floating point representation of the object amount.
         *
         * @since 4.14.9
         *
         * To set a new value use the public setter `$obj->set_value( $amount )`
         */
        protected function set_float_value()
        {
        }
    }
    trait Value_Formatting
    {
        /**
         * Transforms a normalized value into a string with the decimal representation with significant digits rounded to
         * the precision, and with the proper separators.
         *
         * @since 4.14.9
         *
         * @param float $value the normalized value to transform
         *
         * @param string|\WP_Error the value rounded to the specified precision and formatted with proper separators.
         */
        private function to_string($value)
        {
        }
        /**
         * Transforms a normalized value into a decimal representation by rounding the significant digits to the precision.
         *
         * @since 4.14.9
         *
         * @param float $value the normalized value to transform
         *
         * @param float|\WP_Error the value rounded to the specified precision
         */
        private function to_decimal($value)
        {
        }
        /**
         * Transforms a normalized value into a currency representation using the defined currency symbol, position,
         * separators and precision.
         *
         * @since 4.14.9
         *
         * @param float $value the normalized value to transform
         *
         * @return string|\WP_Error the currency-formatted string
         */
        private function to_currency($value)
        {
        }
    }
    abstract class Abstract_Currency extends \Tribe\Values\Abstract_Value implements \Tribe\Values\Currency_Interface
    {
        use \Tribe\Values\Value_Formatting;
        use \Tribe\Values\Value_Update;
        /**
         * The currency formatter representation, including the currency symbol.
         *
         * @since 4.14.9
         *
         * @var string
         */
        protected $currency;
        /**
         * The currency decimal representation, rounded to the precision.
         *
         * @since 4.14.9
         *
         * @var float
         */
        protected $decimal;
        /**
         * The currency formatted string representation, without the currency symbol.
         *
         * @since 4.14.9
         *
         * @var string
         */
        protected $string;
        /**
         * The default currency code
         *
         * @since 4.14.9
         *
         * @var string
         */
        protected $currency_code = 'USD';
        /**
         * The default currency decimal separator
         *
         * @since 4.14.9
         *
         * @var string
         */
        protected $currency_separator_decimal = '.';
        /**
         * The default currency thousands separator
         *
         * @since 4.14.9
         *
         * @var string
         */
        protected $currency_separator_thousands = ',';
        /**
         * The default complete currency symbol, such as $, € or R$
         *
         * @since 4.14.9
         *
         * @var string
         */
        protected $currency_symbol = '$';
        /**
         * The default currency symbol position: prefix if $1 or postfix for 1$
         *
         * @since 4.14.9
         *
         * @var string
         */
        protected $currency_symbol_position = 'prefix';
        /**
         * Initialize object
         *
         * @since 4.14.9
         *
         * @param mixed $amount the value to set initially
         */
        public function __construct($amount = 0)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_currency()
        {
        }
        /**
         * @inheritDoc
         */
        public function get_decimal()
        {
        }
        /**
         * @inheritDoc
         */
        public function get_string()
        {
        }
        /**
         * @inheritDoc
         */
        public function get_currency_code()
        {
        }
        /**
         * @inheritDoc
         */
        public function get_currency_symbol()
        {
        }
        /**
         * @inheritDoc
         */
        public function get_currency_symbol_position()
        {
        }
        /**
         * @inheritDoc
         */
        public function get_currency_separator_decimal()
        {
        }
        /**
         * @inheritDoc
         */
        public function get_currency_separator_thousands()
        {
        }
        /**
         * Protected setter for the string representation of the object amount. This is a formatted string, including the
         * currency symbol.
         *
         * @since 4.14.9
         *
         * To set a new value use the public setter `$obj->set_value( $amount )`
         */
        protected function set_currency_value()
        {
        }
        /**
         * Protected setter for the decimal representation of the object amount. This is a float, rounded to the precision.
         *
         * @since 4.14.9
         *
         * To set a new value use the public setter `$obj->set_value( $amount )`
         */
        protected function set_decimal_value()
        {
        }
        /**
         * Protected setter for the string representation of the object amount. This is a formatted string, without the
         * currency symbol.
         *
         * @since 4.14.9
         *
         * To set a new value use the public setter `$obj->set_value( $amount )`
         */
        protected function set_string_value()
        {
        }
    }
}
namespace {
    class Tribe__View_Helpers
    {
        /**
         * Get the countries being used and available for the plugin.
         *
         * @param string $postId     The post ID.
         * @param bool   $useDefault Should we use the defaults?
         *
         * @return array The countries array.
         */
        public static function constructCountries($postId = '', $useDefault = \true)
        {
        }
        /**
         * Get the i18ned states available to the plugin.
         *
         * @return array The states array.
         */
        public static function loadStates()
        {
        }
        /**
         * Builds a set of options for displaying an hour chooser
         *
         * @param string $date the current date (optional)
         * @param bool   $isStart
         *
         * @return string a set of HTML options with hours (current hour selected)
         */
        public static function getHourOptions($date = '', $isStart = \false)
        {
        }
        /**
         * Builds a set of options for displaying a minute chooser
         *
         * @param string $date the current date (optional)
         * @param bool   $isStart
         *
         * @return string a set of HTML options with minutes (current minute selected)
         */
        public static function getMinuteOptions($date = '', $isStart = \false)
        {
        }
        /**
         * Determines if the provided date/time format (or else the default WordPress time_format)
         * is 24hr or not.
         *
         * In inconclusive cases, such as if there are now hour-format characters, 12hr format is
         * assumed.
         *
         * @param null $format
         * @return bool
         */
        public static function is_24hr_format($format = \null)
        {
        }
        /**
         * Builds a set of options for diplaying a meridian chooser
         *
         * @param string $date YYYY-MM-DD HH:MM:SS to select (optional)
         * @param bool   $isStart
         *
         * @return string a set of HTML options with all meridians
         */
        public static function getMeridianOptions($date = '', $isStart = \false)
        {
        }
        /**
         * Helper method to return an array of 1-31 for days
         *
         * @return array The days array.
         */
        public static function days($totalDays)
        {
        }
    }
}
namespace Tribe\Widget {
    /**
     * Class Widget Manager.
     *
     * @since  4.12.12
     *
     * @package Tribe\Widget
     */
    class Manager
    {
        /**
         * Get the list of widgets available for handling.
         *
         * @since  4.12.12
         *
         * @return array An associative array of widgets in the shape `[ <slug> => <class> ]`.
         */
        public function get_registered_widgets()
        {
        }
        /**
         * Verifies if a given widget slug is registered for handling.
         *
         * @since  4.12.12
         *
         * @param  string $slug The widget slug we are checking for registration.
         *
         * @return bool Whether the widget is registered or not.
         */
        public function is_widget_registered($slug)
        {
        }
        /**
         * Verifies if a given widget class name is registered for handling.
         *
         * @since  4.12.12
         *
         * @param  string $class_name The widget class name we are checking for registration.
         *
         * @return bool Whether the widget is registered, by class.
         */
        public function is_widget_registered_by_class($class_name)
        {
        }
        /**
         * Add new widgets handler to ensure our list of widget slugs is registered by class name.
         *
         * @since  4.12.12
         */
        public function register_widgets_with_wp()
        {
        }
        /**
         * Remove Widget from WordPress widget register by class name.
         *
         * @since  4.12.12
         *
         * @param string $class_name The class name of the widget to unregister.
         */
        public function unregister_widget_from_wp($class_name)
        {
        }
    }
    /**
     * Interface Widget_Interface
     *
     * @since   4.12.12
     *
     * @package Tribe\Widget
     *
     */
    interface Widget_Interface
    {
        /**
         * Constructor for V2 Widgets.
         *
         * @since 4.12.12
         *
         * @param string              $id_base         Optional. Base ID for the widget, lowercase. If left empty,
         *                                             a portion of the widget's class name will be used. Has to be unique.
         * @param string              $name            Name for the widget displayed on the configuration page.
         * @param array<string,mixed> $widget_options  Optional. Widget options. See wp_register_sidebar_widget() for
         *                                             information on accepted arguments. Default empty array.
         * @param array<string,mixed> $control_options Optional. Widget control options. See wp_register_widget_control() for
         *                                             information on accepted arguments. Default empty array.
         */
        public function __construct($id_base = '', $name = '', $widget_options = [], $control_options = []);
        /**
         * Returns the widget slug that allows the widget to be built via the widget class using that slug.
         *
         * @since 4.13.0
         *
         * @return string The widget slug.
         */
        public static function get_widget_slug();
        /**
         * Returns if the widget is in use on this current page.
         *
         * @since 4.13.0
         *
         * @return bool If this widget is in use.
         */
        public static function is_widget_in_use();
        /**
         * Sets if this widget is in use on the current page.
         *
         * @since 4.13.0
         *
         * @see tribe_is_truthy()
         *
         * @param bool $toggle Toggle true or false if a widget is in use.
         */
        public static function widget_in_use($toggle = true);
        /**
         * Echoes the widget content.
         *
         * @since 4.12.12
         *
         * @param array<string,mixed> $args     Display arguments including 'before_title', 'after_title',
         *                                      'before_widget', and 'after_widget'.
         * @param array<string,mixed> $instance The settings for the particular instance of the widget.
         */
        public function widget($args, $instance);
        /**
         * Updates a particular instance of a widget.
         *
         * This function should check that `$new_instance` is set correctly. The newly-calculated
         * value of `$instance` should be returned. If false is returned, the instance won't be
         * saved/updated.
         *
         * @since 4.12.12
         *
         * @param array<string,mixed> $new_instance New settings for this instance as input by the user via
         *                                          WP_Widget::form().
         * @param array<string,mixed> $old_instance Old settings for this instance.
         *
         * @return array<string,mixed> Settings to save or bool false to cancel saving.
         */
        public function update($new_instance, $old_instance);
        /**
         * Outputs the settings update form.
         *
         * @since 4.12.12
         *
         * @param array<string,mixed> $instance Current settings.
         *
         * @return string Default return is 'noform'.
         */
        public function form($instance);
        /**
         * Sets the aliased arguments array.
         *
         * @see Tribe__Utils__Array::parse_associative_array_alias() The expected format.
         *
         * @since 4.12.12
         *
         * @param array<string,mixed> $alias_map An associative array of aliases: key as alias, value as mapped canonical.
         *                         Example: [ 'alias' => 'canonical', 'from' => 'to', 'that' => 'becomes_this' ]
         */
        public function set_aliased_arguments(array $alias_map);
        /**
         * Gets the aliased arguments array.
         *
         * @since 4.12.12
         *
         * @return array<string,string> The associative array map of aliases and their canonical arguments.
         */
        public function get_aliased_arguments();
        /**
         * Returns the arguments for the widget parsed correctly with defaults applied.
         *
         * @since 4.12.12
         *
         * @param array $arguments Set of arguments passed to the widget at hand.
         *
         * @return array<string,mixed> The parsed widget arguments map.
         */
        public function parse_arguments(array $arguments);
        /**
         * Returns the array of arguments for this widget after applying the validation callbacks.
         *
         * @since 4.12.12
         *
         * @param array $arguments Set of arguments passed to the widget at hand.
         *
         * @return array<string,mixed> The validated widget arguments map.
         */
        public function validate_arguments(array $arguments);
        /**
         * Returns the array of callbacks for this widget's arguments.
         *
         * @since 4.12.12
         *
         * @return array<string,callable> A map of the widget arguments that have survived validation.
         */
        public function get_validated_arguments_map();
        /**
         * Returns the array of callbacks for this widget's arguments.
         *
         * @since 4.12.12
         *
         * @param array<string,callable> $validate_arguments_map Array of callbacks for this widget's arguments.
         *
         * @return array<string,callable> A map of the widget arguments that have survived validation.
         */
        public function filter_validated_arguments_map($validate_arguments_map = []);
        /**
         * Returns an array of admin fields for the widget.
         *
         * @since 4.12.14
         *
         * @return array<string,mixed> The array of widget admin fields.
         */
        public function get_admin_fields();
        /**
         * Filter a widget's admin fields.
         *
         * @since 4.12.14
         *
         * @param array<string,mixed> $admin_fields The array of widget admin fields.
         *
         * @return array<string,mixed> The array of widget admin fields.
         */
        public function filter_admin_fields($admin_fields);
        /**
         * Filters a widget's updated instance.
         *
         * @since 4.12.14
         *
         * @param array<string,mixed> $updated_instance The updated instance of the widget.
         * @param array<string,mixed> $new_instance The new values for the widget instance.
         *
         * @return array<string,mixed> The updated instance to be saved for the widget.
         */
        public function filter_updated_instance($updated_instance, $new_instance);
        /**
         * Returns a widget arguments after been parsed.
         *
         * @since 4.12.12
         * @since 4.13.0 Deprecated the instance method as that is passed only to setup_arguments method.
         *
         * @param array<string,mixed> $_deprecated Saved values for the widget instance.
         *
         * @return array<string,mixed> The widget arguments, as set by the user in the widget string.
         */
        public function get_arguments(array $_deprecated = []);
        /**
         * Filter a widget's arguments after they have been been parsed.
         *
         * @since 4.12.12
         *
         * @param array<string,mixed> $arguments Current set of arguments.
         *
         * @return array<string,mixed> The widget arguments, as set by the user in the widget string.
         */
        public function filter_arguments($arguments);
        /**
         * Get a single widget argument after it has been parsed and filtered.
         *
         * @since 4.12.12
         *
         * @param string|int   $index   Which index we intend to fetch from the arguments.
         * @param array|mixed  $default Default value if it doesn't exist.
         *
         * @uses  Tribe__Utils__Array::get For index fetching and Default.
         *
         * @return mixed Value for the Index passed as the first argument.
         */
        public function get_argument($index, $default = null);
        /**
         * Filter a widget argument.
         *
         * @since 4.12.12
         *
         * @param mixed       $argument The argument value.
         * @param string|int  $index    Which index we intend to fetch from the arguments.
         * @param array|mixed $default  Default value if it doesn't exist.
         *
         * @uses  Tribe__Utils__Array::get For index fetching and Default.
         *
         * @return mixed Value for the Index passed as the first argument.
         */
        public function filter_argument($argument, $index, $default = null);
        /**
         * Get default arguments for a widget.
         *
         * @since 4.12.12
         *
         * @return array<string,mixed> The map of widget default arguments.
         */
        public function get_default_arguments();
        /**
         * Filter a widget's default arguments.
         *
         * @since 4.12.12
         *
         * @param array<string,mixed> $default_arguments Current set of default arguments.
         *
         * @return array<string,mixed> The map of widget default arguments.
         */
        public function filter_default_arguments(array $default_arguments = []);
        /**
         * Filter a widget's arguments before they are passed to the context.
         *
         * @since 4.13.0
         *
         * @param array<string,mixed>  $alterations Current set of alterations for the context.
         * @param array<string,mixed>  $arguments   Current set of arguments in the widget.
         *
         * @return array<string,mixed> The map of arguments after filtering.
         */
        public function filter_args_to_context(array $alterations = [], array $arguments = []);
        /**
         * Returns a widget's HTML.
         *
         * @since 4.12.12
         *
         * @return string The rendered widget's HTML code.
         */
        public function get_html();
        /**
         * Sets the sidebar arguments sent by the theme.
         *
         * @since 4.13.0
         *
         * @param array<string,mixed> $arguments Arguments passed by the theme.
         */
        public function setup_sidebar_arguments($arguments);
        /**
         * Sets the sidebar arguments sent by the theme.
         *
         * @since 4.13.0
         *
         * @return array<string, mixed> Arguments sent by the theme and stored in this class.
         */
        public function get_sidebar_arguments();
        /**
         * Sets the sidebar arguments sent by the theme.
         *
         * @since 4.13.0
         *
         * @param array<string,mixed> $arguments Arguments passed by the theme.
         *
         * @return array<string, mixed> Arguments sent by the theme and stored in this class.
         */
        public function filter_sidebar_arguments($arguments);
        /**********************
         * Deprecated Methods *
         **********************/
        /**
         * Returns the widget slug that allows the widget to be built via the widget class using that slug.
         *
         * @since 4.12.12
         *
         * @deprecated 4.13.0 In favor of static::get_widget_slug()
         * @todo remove after 2021-08-01
         *
         * @return string The widget slug.
         */
        public function get_registration_slug();
    }
    /**
     * The abstract base without Views that all widgets should implement.
     *
     * @since   4.12.12
     *
     * @package Tribe\Widget
     */
    abstract class Widget_Abstract extends \WP_Widget implements \Tribe\Widget\Widget_Interface
    {
        /**
         * Prefix for WordPress registration of the widget.
         *
         * @since 4.13.0
         *
         * @var string
         */
        const PREFIX = 'tribe-widget-';
        /**
         * Slug of the current widget.
         *
         * @since 4.13.0
         *
         * @var string
         */
        protected static $widget_slug;
        /**
         * If this Widget was rendered on the screen, often useful for Assets.
         *
         * Every widget needs this to be defined internally otherwise it wont work.
         *
         * @since 4.13.0
         *
         * @var boolean
         */
        protected static $widget_in_use;
        /**
         * An instance of template.
         *
         * @since 4.12.14
         *
         * @var Tribe__Template
         */
        protected $admin_template;
        /**
         * Default arguments to be merged into final arguments of the widget.
         *
         * @since 4.12.12
         *
         * @var array<string,mixed>
         */
        protected $default_arguments = [];
        /**
         * Sidebar arguments passed to the widget.
         *
         * @since 4.13.0
         *
         * @var array<string,mixed>
         */
        protected $sidebar_arguments = [];
        /**
         * Array map allowing aliased widget arguments.
         *
         * The array keys are aliases of the array values (i.e. the "real" widget attributes to parse).
         * Example array: [ 'alias' => 'canonical', 'from' => 'to', 'that' => 'becomes_this' ]
         * Example widget usage: [some_tag alias=17 to='Fred'] will be parsed as [some_tag canonical=17 to='Fred']
         *
         * @since 4.12.12
         *
         * @var array<string,string>
         */
        protected $aliased_arguments = [];
        /**
         * Array of callbacks for validation of arguments.
         *
         * @since 4.12.12
         *
         * @var array<string,callable>
         */
        protected $validate_arguments_map = [];
        /**
         * Arguments of the current widget.
         *
         * @since 4.12.12
         *
         * @var array<string,mixed>
         */
        protected $arguments = [];
        /**
         * Current set of Admin Fields used on the admin form.
         *
         * @since 4.13.0
         *
         * @var array<string,mixed>
         */
        protected $admin_fields = [];
        /**
         * HTML content of the current widget.
         *
         * @since 4.12.12
         *
         * @var string
         */
        protected $content;
        /**
         * {@inheritDoc}
         */
        public function __construct($id_base = '', $name = '', $widget_options = [], $control_options = [])
        {
        }
        /**
         * Parse the ID base sent to the __construct method.
         *
         * @since 4.13.0
         *
         * @param string $id_base The ID base that we will use for this Widget instance.
         *
         * @return string|null    Parsed value given by the __construct.
         */
        protected function parse_id_base($id_base = null)
        {
        }
        /**
         * Parse the ID base sent to the __construct method.
         *
         * @since 4.13.0
         *
         * @param string $name The ID base that we will use for this Widget instance.
         *
         * @return string      Parsed value given by the __construct.
         */
        protected function parse_name($name = null)
        {
        }
        /**
         * Sets up the Widget name,
         *
         * @since 4.13.0
         *
         * @return string Returns the default widget name.
         */
        public static function get_default_widget_name()
        {
        }
        /**
         * Parse the widget options base sent to the __construct method.
         *
         * @since 4.13.0
         *
         * @param array $widget_options The widget options base that we will use for this Widget instance.
         *
         * @return array                Widget options that will be passed to the __construct.
         */
        protected function parse_widget_options($widget_options = [])
        {
        }
        /**
         * Gets the default widget options.
         *
         * @since 4.13.0
         *
         * @return array Default widget options.
         */
        public static function get_default_widget_options()
        {
        }
        /**
         * Parse the control options base sent to the __construct method.
         *
         * @since 4.13.0
         *
         * @param array $control_options The base control options passed to the construct method.
         *
         * @return array Parsed value given by the __construct.
         */
        protected function parse_control_options($control_options = [])
        {
        }
        /**
         * Gets the default control options.
         *
         * @since 4.13.0
         *
         * @return array Default control options.
         */
        public static function get_default_control_options()
        {
        }
        /**
         * {@inheritDoc}
         */
        public static function get_widget_slug()
        {
        }
        /**
         * {@inheritDoc}
         */
        public static function is_widget_in_use()
        {
        }
        /**
         * {@inheritDoc}
         */
        public static function widget_in_use($toggle = true)
        {
        }
        /**
         * Setup the widget.
         *
         * @since  5.2.1
         * @since 4.13.0 include $args and $instance params.
         *
         * @param array $args     Display arguments including 'before_title', 'after_title',
         *                        'before_widget', and 'after_widget'.
         * @param array $instance The settings for the particular instance of the widget.
         *
         * @return mixed
         */
        public abstract function setup($args = [], $instance = []);
        /**
         * {@inheritDoc}
         */
        public function form($instance)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function widget($args, $instance)
        {
        }
        /**
         * Returns the rendered View HTML code.
         *
         * @since 4.12.12
         *
         * @return string
         */
        public abstract function get_html();
        /**
         * {@inheritDoc}
         */
        public function set_aliased_arguments(array $alias_map)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_aliased_arguments()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function parse_arguments(array $arguments)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function validate_arguments(array $arguments)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_validated_arguments_map()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function filter_validated_arguments_map($validate_arguments_map = [])
        {
        }
        /**
         * Sets up the widgets default admin fields.
         *
         * @since 4.12.14
         *
         * @return array<string,mixed> The array of widget admin fields.
         */
        protected abstract function setup_admin_fields();
        /**
         * {@inheritDoc}
         */
        public function get_admin_fields()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function filter_admin_fields($admin_fields)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function filter_updated_instance($updated_instance, $new_instance)
        {
        }
        /**
         * Sets up the widgets arguments, using saved values.
         *
         * @since 4.12.14
         *
         * @param array<string,mixed> $instance Saved values for the widget instance.
         *
         * @return array<string,mixed> The widget arguments, as set by the user in the widget string.
         */
        protected function setup_arguments(array $instance = [])
        {
        }
        /**
         * Handles gathering the data for admin fields.
         *
         * @since 5.3.0
         * @since 4.13.0 Move into common from Events Abstract
         *
         * @param array<string,mixed> $arguments   Current set of arguments.
         * @param int                 $field_name  The ID of the field.
         * @param array<string,mixed> $field       The field info.
         *
         * @return array<string,mixed> $data The assembled field data.
         */
        public function get_admin_data($arguments, $field_name, $field)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_arguments(array $_deprecated = [])
        {
        }
        /**
         * {@inheritDoc}
         */
        public function filter_arguments($arguments)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_argument($index, $default = null)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function filter_argument($argument, $index, $default = null)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function setup_sidebar_arguments($arguments)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_sidebar_arguments()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function filter_sidebar_arguments($arguments)
        {
        }
        /**
         * Sets up the widgets default arguments.
         *
         * @since 4.12.14
         *
         * @return array<string,mixed> The default widget arguments.
         */
        protected function setup_default_arguments()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_default_arguments()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function filter_default_arguments(array $default_arguments = [])
        {
        }
        /**
         * {@inheritDoc}
         */
        public function filter_args_to_context(array $alterations = [], array $arguments = [])
        {
        }
        /**
         * Sets the admin template.
         *
         * @since 4.12.14
         *
         * @param \Tribe__Template $template The admin template to use.
         */
        public function set_admin_template(\Tribe__Template $template)
        {
        }
        /**
         * Returns the current admin template.
         *
         * @since 4.12.14
         *
         * @return \Tribe__Template The current admin template.
         */
        public function get_admin_template()
        {
        }
        /**
         * Get the admin html for the widget form.
         *
         * @since 4.12.14
         *
         * @param array<string,mixed> $arguments Current set of arguments.
         *
         * @return string  HTML for the admin fields.
         */
        public function get_admin_html($arguments)
        {
        }
        /**
         * Toggles hooks for the widget, will be deactivated after the rendering has happened.
         *
         * @since 4.13.0
         *
         * @param bool   $toggle Whether to turn the hooks on or off.
         * @param string $location If we are doing the form (admin) or the display (front end)
         *
         * @return void
         */
        public function toggle_hooks($toggle, $location = 'display')
        {
        }
        /**
         * Toggles off portions of the template based on widget params.
         * This runs on the `tribe_shortcode_toggle_hooks` hook when the toggle is true.
         *
         * @since 4.13.0
         */
        protected function add_hooks()
        {
        }
        /**
         * Toggles on portions of the template that were modified in `add_template_mods()` above.
         * This runs on the `tribe_shortcode_toggle_hooks` hook when the toggle is false.
         * Thus encapsulating our control of these shared pieces to only when the widget is rendering.
         *
         * @since 4.13.0
         */
        protected function remove_hooks()
        {
        }
        /**********************
         * Deprecated Methods *
         **********************/
        /**
         * Slug of the current widget.
         *
         * @since 4.12.12
         *
         * @deprecated 4.13.0 Moved into using static::$widget_slug
         * @todo remove after 2021-08-01
         *
         * @var string
         */
        protected $slug;
        /**
         * The slug of the admin widget view.
         *
         * @since 4.12.14
         *
         * @deprecated 4.13.0 Moved into using static::$widget_slug
         * @todo remove after 2021-08-01
         *
         * @var string
         */
        protected $view_admin_slug;
        /**
         * {@inheritDoc}
         * @deprecated 4.13.0 Moved into using static::get_widget_slug
         */
        public function get_registration_slug()
        {
        }
    }
}
namespace {
    class Tribe__Admin__Notice__Archive_Slug_Conflict
    {
        protected static $instance;
        public static function instance()
        {
        }
        public function maybe_add_admin_notice()
        {
        }
        public function maybe_dismiss()
        {
        }
        public function notice()
        {
        }
    }
    abstract class Tribe__Events__Abstract_Deactivation extends \Tribe__Abstract_Deactivation
    {
    }
    class Tribe__Events__Admin__Helpers extends \Tribe__Admin__Helpers
    {
    }
    class Tribe__Events__App_Shop extends \Tribe__App_Shop
    {
    }
    class Tribe__Events__Autoloader extends \Tribe__Autoloader
    {
    }
    class Tribe__Events__Cache extends \Tribe__Cache
    {
    }
    class Tribe__Events__Cache_Listener extends \Tribe__Cache_Listener
    {
    }
    class Tribe__Events__Changelog_Reader extends \Tribe__Changelog_Reader
    {
    }
    class Tribe__Events__Credits extends \Tribe__Credits
    {
    }
    class Tribe__Events__Date_Utils extends \Tribe__Date_Utils
    {
    }
    class Tribe__Events__Field extends \Tribe__Field
    {
    }
    class Tribe__Events__Settings extends \Tribe__Settings
    {
    }
    class Tribe__Events__Settings_Tab extends \Tribe__Settings_Tab
    {
    }
    class Tribe__Events__Support extends \Tribe__Support
    {
    }
    class Tribe__Events__Template_Part_Cache extends \Tribe__Template_Part_Cache
    {
    }
    class Tribe__Events__Validate extends \Tribe__Validate
    {
    }
    class Tribe__Events__View_Helpers extends \Tribe__View_Helpers
    {
    }
    /**
     * Class Tribe__Freemius
     *
     * @since     4.9.5
     * @depecated 5.1.0
     */
    class Tribe__Freemius
    {
        /**
         * Load the vendor files for Freemius vendor.
         *
         * Freemius class should only be loaded once since it will be registered as a Singleton.
         *
         * @since     4.9.5
         * @depecated 5.1.0
         */
        public function __construct()
        {
        }
        /**
         * Initialize the Fremius instance using their methods
         *
         * @since     4.9.5
         * @depecated 5.1.0
         *
         * @param string $slug Slug of the plugin
         * @param string $id   ID in Freemius
         * @param string $key  Your public key in freemius
         * @param array  $args Array of extra arguments to register on Freemius
         *
         * @return Freemius
         */
        public function initialize($slug, $id, $key, array $args = [])
        {
        }
    }
    class Tribe__Plugin_Download_Notice extends \Tribe__Admin__Notice__Plugin_Download
    {
    }
    class Tribe__Template_Factory
    {
        /**
         * @deprecated 6.0.0
         * @return string[] An array of registered vendor script handles.
         */
        public static function get_vendor_scripts()
        {
        }
        /**
         * @deprecated 6.0.0
         * @return string
         */
        public static function getMinFile($file, $_deprecated)
        {
        }
    }
    // autoload_real.php @generated by Composer
    class ComposerAutoloaderInit43ec74747c68c7396bedc0a710526d75
    {
        public static function loadClassLoader($class)
        {
        }
        /**
         * @return \Composer\Autoload\ClassLoader
         */
        public static function getLoader()
        {
        }
    }
}
namespace Composer\Autoload {
    class ComposerStaticInit43ec74747c68c7396bedc0a710526d75
    {
        public static $prefixLengthsPsr4 = array('l' => array('lucatume\\DI52\\' => 14), 'T' => array('Tribe\\' => 6, 'TEC\\Common\\' => 11), 'S' => array('StellarWP\\Telemetry\\Views_Dir\\' => 30, 'StellarWP\\Telemetry\\Assets_Dir\\' => 31, 'StellarWP\\Telemetry\\' => 20, 'StellarWP\\Installer\\Assets_JS\\' => 30, 'StellarWP\\Installer\\Admin_Views\\' => 32, 'StellarWP\\Installer\\' => 20, 'StellarWP\\DB\\' => 13, 'StellarWP\\ContainerContract\\' => 28), 'P' => array('Psr\\Log\\' => 8, 'Psr\\Container\\' => 14), 'M' => array('Monolog\\' => 8), 'F' => array('Firebase\\JWT\\' => 13));
        public static $prefixDirsPsr4 = array('lucatume\\DI52\\' => array(0 => __DIR__ . '/..' . '/lucatume/di52/src'), 'Tribe\\' => array(0 => __DIR__ . '/../..' . '/src/Tribe'), 'TEC\\Common\\' => array(0 => __DIR__ . '/../..' . '/src/Common'), 'StellarWP\\Telemetry\\Views_Dir\\' => array(0 => __DIR__ . '/..' . '/stellarwp/telemetry/src/views'), 'StellarWP\\Telemetry\\Assets_Dir\\' => array(0 => __DIR__ . '/..' . '/stellarwp/telemetry/src/resources'), 'StellarWP\\Telemetry\\' => array(0 => __DIR__ . '/..' . '/stellarwp/telemetry/src/Telemetry'), 'StellarWP\\Installer\\Assets_JS\\' => array(0 => __DIR__ . '/..' . '/stellarwp/installer/src/assets/js'), 'StellarWP\\Installer\\Admin_Views\\' => array(0 => __DIR__ . '/..' . '/stellarwp/installer/src/admin-views'), 'StellarWP\\Installer\\' => array(0 => __DIR__ . '/..' . '/stellarwp/installer/src/Installer'), 'StellarWP\\DB\\' => array(0 => __DIR__ . '/..' . '/stellarwp/db/src/DB'), 'StellarWP\\ContainerContract\\' => array(0 => __DIR__ . '/..' . '/stellarwp/container-contract/src'), 'Psr\\Log\\' => array(0 => __DIR__ . '/..' . '/psr/log/Psr/Log'), 'Psr\\Container\\' => array(0 => __DIR__ . '/..' . '/psr/container/src'), 'Monolog\\' => array(0 => __DIR__ . '/..' . '/monolog/monolog/src/Monolog'), 'Firebase\\JWT\\' => array(0 => __DIR__ . '/..' . '/firebase/php-jwt/src'));
        public static $classMap = array('Composer\\InstalledVersions' => __DIR__ . '/..' . '/composer/InstalledVersions.php', 'TEC\\Common\\Configuration\\Configuration' => __DIR__ . '/../..' . '/src/Common/Configuration/Configuration.php', 'TEC\\Common\\Configuration\\Configuration_Loader' => __DIR__ . '/../..' . '/src/Common/Configuration/Configuration_Loader.php', 'TEC\\Common\\Configuration\\Configuration_Provider_Interface' => __DIR__ . '/../..' . '/src/Common/Configuration/Configuration_Provider_Interface.php', 'TEC\\Common\\Configuration\\Constants_Provider' => __DIR__ . '/../..' . '/src/Common/Configuration/Constants_Provider.php', 'TEC\\Common\\Context\\Post_Request_Type' => __DIR__ . '/../..' . '/src/Common/Context/Post_Request_Type.php', 'TEC\\Common\\Contracts\\Container' => __DIR__ . '/../..' . '/src/Common/Contracts/Container.php', 'TEC\\Common\\Contracts\\Provider\\Controller' => __DIR__ . '/../..' . '/src/Common/Contracts/Provider/Controller.php', 'TEC\\Common\\Contracts\\Service_Provider' => __DIR__ . '/../..' . '/src/Common/Contracts/Service_Provider.php', 'TEC\\Common\\Editor\\Full_Site\\Template_Utils' => __DIR__ . '/../..' . '/src/Common/Editor/Full_Site/Template_Utils.php', 'TEC\\Common\\Exceptions\\Container_Exception' => __DIR__ . '/../..' . '/src/Common/Exceptions/Container_Exception.php', 'TEC\\Common\\Exceptions\\Not_Bound_Exception' => __DIR__ . '/../..' . '/src/Common/Exceptions/Not_Bound_Exception.php', 'TEC\\Common\\Integrations\\Integration_Abstract' => __DIR__ . '/../..' . '/src/Common/Integrations/Integration_Abstract.php', 'TEC\\Common\\Integrations\\Provider' => __DIR__ . '/../..' . '/src/Common/Integrations/Provider.php', 'TEC\\Common\\Integrations\\Traits\\Module_Integration' => __DIR__ . '/../..' . '/src/Common/Integrations/Traits/Module_Integration.php', 'TEC\\Common\\Integrations\\Traits\\Plugin_Integration' => __DIR__ . '/../..' . '/src/Common/Integrations/Traits/Plugin_Integration.php', 'TEC\\Common\\Integrations\\Traits\\Server_Integration' => __DIR__ . '/../..' . '/src/Common/Integrations/Traits/Server_Integration.php', 'TEC\\Common\\Integrations\\Traits\\Theme_Integration' => __DIR__ . '/../..' . '/src/Common/Integrations/Traits/Theme_Integration.php', 'TEC\\Common\\Libraries\\Installer\\Provider' => __DIR__ . '/../..' . '/src/Common/Libraries/Installer/Provider.php', 'TEC\\Common\\Libraries\\Provider' => __DIR__ . '/../..' . '/src/Common/Libraries/Provider.php', 'TEC\\Common\\Site_Health\\Factory' => __DIR__ . '/../..' . '/src/Common/Site_Health/Factory.php', 'TEC\\Common\\Site_Health\\Fields\\Generic_Info_Field' => __DIR__ . '/../..' . '/src/Common/Site_Health/Fields/Generic_Info_Field.php', 'TEC\\Common\\Site_Health\\Fields\\Post_Status_Count_Field' => __DIR__ . '/../..' . '/src/Common/Site_Health/Fields/Post_Status_Count_Field.php', 'TEC\\Common\\Site_Health\\Info_Field_Abstract' => __DIR__ . '/../..' . '/src/Common/Site_Health/Info_Field_Abstract.php', 'TEC\\Common\\Site_Health\\Info_Field_Interface' => __DIR__ . '/../..' . '/src/Common/Site_Health/Info_Field_Interface.php', 'TEC\\Common\\Site_Health\\Info_Section_Abstract' => __DIR__ . '/../..' . '/src/Common/Site_Health/Info_Section_Abstract.php', 'TEC\\Common\\Site_Health\\Info_Section_Interface' => __DIR__ . '/../..' . '/src/Common/Site_Health/Info_Section_Interface.php', 'TEC\\Common\\Site_Health\\Provider' => __DIR__ . '/../..' . '/src/Common/Site_Health/Provider.php', 'TEC\\Common\\Storage\\Timed_Option' => __DIR__ . '/../..' . '/src/Common/Storage/Timed_Option.php', 'TEC\\Common\\Telemetry\\Migration' => __DIR__ . '/../..' . '/src/Common/Telemetry/Migration.php', 'TEC\\Common\\Telemetry\\Opt_In' => __DIR__ . '/../..' . '/src/Common/Telemetry/Opt_In.php', 'TEC\\Common\\Telemetry\\Provider' => __DIR__ . '/../..' . '/src/Common/Telemetry/Provider.php', 'TEC\\Common\\Telemetry\\Telemetry' => __DIR__ . '/../..' . '/src/Common/Telemetry/Telemetry.php', 'TEC\\Common\\Translations_Loader' => __DIR__ . '/../..' . '/src/Common/Translations_Loader.php', 'Tribe\\Admin\\Conditional_Content\\Black_Friday' => __DIR__ . '/../..' . '/src/Tribe/Admin/Conditional_Content/Black_Friday.php', 'Tribe\\Admin\\Conditional_Content\\Datetime_Conditional_Abstract' => __DIR__ . '/../..' . '/src/Tribe/Admin/Conditional_Content/Datetime_Conditional_Abstract.php', 'Tribe\\Admin\\Conditional_Content\\End_Of_Year_Sale' => __DIR__ . '/../..' . '/src/Tribe/Admin/Conditional_Content/End_Of_Year_Sale.php', 'Tribe\\Admin\\Conditional_Content\\Service_Provider' => __DIR__ . '/../..' . '/src/Tribe/Admin/Conditional_Content/Service_Provider.php', 'Tribe\\Admin\\Notice\\Date_Based' => __DIR__ . '/../..' . '/src/Tribe/Admin/Notice/Date_Based.php', 'Tribe\\Admin\\Notice\\Marketing\\Black_Friday' => __DIR__ . '/../..' . '/src/Tribe/Admin/Notice/Marketing/Black_Friday.php', 'Tribe\\Admin\\Notice\\Marketing\\End_Of_Year_Sale' => __DIR__ . '/../..' . '/src/Tribe/Admin/Notice/Marketing/End_Of_Year_Sale.php', 'Tribe\\Admin\\Notice\\Marketing\\Stellar_Sale' => __DIR__ . '/../..' . '/src/Tribe/Admin/Notice/Marketing/Stellar_Sale.php', 'Tribe\\Admin\\Notice\\Service_Provider' => __DIR__ . '/../..' . '/src/Tribe/Admin/Notice/Service_Provider.php', 'Tribe\\Admin\\Notice\\WP_Version' => __DIR__ . '/../..' . '/src/Tribe/Admin/Notice/WP_Version.php', 'Tribe\\Admin\\Pages' => __DIR__ . '/../..' . '/src/Tribe/Admin/Pages.php', 'Tribe\\Admin\\Settings' => __DIR__ . '/../..' . '/src/Tribe/Admin/Settings.php', 'Tribe\\Admin\\Troubleshooting' => __DIR__ . '/../..' . '/src/Tribe/Admin/Troubleshooting.php', 'Tribe\\Admin\\Upsell_Notice\\Main' => __DIR__ . '/../..' . '/src/Tribe/Admin/Upsell_Notice/Main.php', 'Tribe\\Admin\\Wysiwyg' => __DIR__ . '/../..' . '/src/Tribe/Admin/Wysiwyg.php', 'Tribe\\Customizer\\Control' => __DIR__ . '/../..' . '/src/Tribe/Customizer/Control.php', 'Tribe\\Customizer\\Controls\\Heading' => __DIR__ . '/../..' . '/src/Tribe/Customizer/Controls/Heading.php', 'Tribe\\Customizer\\Controls\\Number' => __DIR__ . '/../..' . '/src/Tribe/Customizer/Controls/Number.php', 'Tribe\\Customizer\\Controls\\Radio' => __DIR__ . '/../..' . '/src/Tribe/Customizer/Controls/Radio.php', 'Tribe\\Customizer\\Controls\\Range_Slider' => __DIR__ . '/../..' . '/src/Tribe/Customizer/Controls/Range_Slider.php', 'Tribe\\Customizer\\Controls\\Separator' => __DIR__ . '/../..' . '/src/Tribe/Customizer/Controls/Separator.php', 'Tribe\\Customizer\\Controls\\Toggle' => __DIR__ . '/../..' . '/src/Tribe/Customizer/Controls/Toggle.php', 'Tribe\\DB_Lock' => __DIR__ . '/../..' . '/src/Tribe/DB_Lock.php', 'Tribe\\Dialog\\View' => __DIR__ . '/../..' . '/src/Tribe/Dialog/View.php', 'Tribe\\Editor\\Compatibility' => __DIR__ . '/../..' . '/src/Tribe/Editor/Compatibility.php', 'Tribe\\Editor\\Compatibility\\Classic_Editor' => __DIR__ . '/../..' . '/src/Tribe/Editor/Compatibility/Classic_Editor.php', 'Tribe\\Editor\\Compatibility\\Divi' => __DIR__ . '/../..' . '/src/Tribe/Editor/Compatibility/Divi.php', 'Tribe\\Log\\Action_Logger' => __DIR__ . '/../..' . '/src/Tribe/Log/Action_Logger.php', 'Tribe\\Log\\Canonical_Formatter' => __DIR__ . '/../..' . '/src/Tribe/Log/Canonical_Formatter.php', 'Tribe\\Log\\Monolog_Logger' => __DIR__ . '/../..' . '/src/Tribe/Log/Monolog_Logger.php', 'Tribe\\Log\\Service_Provider' => __DIR__ . '/../..' . '/src/Tribe/Log/Service_Provider.php', 'Tribe\\Models\\Post_Types\\Base' => __DIR__ . '/../..' . '/src/Tribe/Models/Post_Types/Base.php', 'Tribe\\Models\\Post_Types\\Nothing' => __DIR__ . '/../..' . '/src/Tribe/Models/Post_Types/Nothing.php', 'Tribe\\Onboarding\\Hints_Abstract' => __DIR__ . '/../..' . '/src/Tribe/Onboarding/Hints_Abstract.php', 'Tribe\\Onboarding\\Main' => __DIR__ . '/../..' . '/src/Tribe/Onboarding/Main.php', 'Tribe\\Onboarding\\Tour_Abstract' => __DIR__ . '/../..' . '/src/Tribe/Onboarding/Tour_Abstract.php', 'Tribe\\PUE\\Update_Prevention' => __DIR__ . '/../..' . '/src/Tribe/PUE/Update_Prevention.php', 'Tribe\\Repository\\Core_Read_Interface' => __DIR__ . '/../..' . '/src/Tribe/Repository/Core_Read_Interface.php', 'Tribe\\Repository\\Filter_Validation' => __DIR__ . '/../..' . '/src/Tribe/Repository/Filter_Validation.php', 'Tribe\\Service_Providers\\Body_Classes' => __DIR__ . '/../..' . '/src/Tribe/Service_Providers/Body_Classes.php', 'Tribe\\Service_Providers\\Crons' => __DIR__ . '/../..' . '/src/Tribe/Service_Providers/Crons.php', 'Tribe\\Service_Providers\\Dialog' => __DIR__ . '/../..' . '/src/Tribe/Service_Providers/Dialog.php', 'Tribe\\Service_Providers\\Onboarding' => __DIR__ . '/../..' . '/src/Tribe/Service_Providers/Onboarding.php', 'Tribe\\Service_Providers\\PUE' => __DIR__ . '/../..' . '/src/Tribe/Service_Providers/PUE.php', 'Tribe\\Service_Providers\\Shortcodes' => __DIR__ . '/../..' . '/src/Tribe/Service_Providers/Shortcodes.php', 'Tribe\\Service_Providers\\Tooltip' => __DIR__ . '/../..' . '/src/Tribe/Service_Providers/Tooltip.php', 'Tribe\\Service_Providers\\Widgets' => __DIR__ . '/../..' . '/src/Tribe/Service_Providers/Widgets.php', 'Tribe\\Shortcode\\Manager' => __DIR__ . '/../..' . '/src/Tribe/Shortcode/Manager.php', 'Tribe\\Shortcode\\Shortcode_Abstract' => __DIR__ . '/../..' . '/src/Tribe/Shortcode/Shortcode_Abstract.php', 'Tribe\\Shortcode\\Shortcode_Interface' => __DIR__ . '/../..' . '/src/Tribe/Shortcode/Shortcode_Interface.php', 'Tribe\\Shortcode\\Utils' => __DIR__ . '/../..' . '/src/Tribe/Shortcode/Utils.php', 'Tribe\\Tooltip\\View' => __DIR__ . '/../..' . '/src/Tribe/Tooltip/View.php', 'Tribe\\Traits\\Cache_User' => __DIR__ . '/../..' . '/src/Tribe/Traits/Cache_User.php', 'Tribe\\Traits\\With_DB_Lock' => __DIR__ . '/../..' . '/src/Tribe/Traits/With_DB_Lock.php', 'Tribe\\Traits\\With_Meta_Updates_Handling' => __DIR__ . '/../..' . '/src/Tribe/Traits/With_Meta_Updates_Handling.php', 'Tribe\\Traits\\With_Post_Attribute_Detection' => __DIR__ . '/../..' . '/src/Tribe/Traits/With_Post_Attribute_Detection.php', 'Tribe\\Utils\\Body_Classes' => __DIR__ . '/../..' . '/src/Tribe/Utils/Body_Classes.php', 'Tribe\\Utils\\Collection_Interface' => __DIR__ . '/../..' . '/src/Tribe/Utils/Collection_Interface.php', 'Tribe\\Utils\\Collection_Trait' => __DIR__ . '/../..' . '/src/Tribe/Utils/Collection_Trait.php', 'Tribe\\Utils\\Compatibility_Classes' => __DIR__ . '/../..' . '/src/Tribe/Utils/Compatibility_Classes.php', 'Tribe\\Utils\\Date_I18n' => __DIR__ . '/../..' . '/src/Tribe/Utils/Date_I18n.php', 'Tribe\\Utils\\Date_I18n_Immutable' => __DIR__ . '/../..' . '/src/Tribe/Utils/Date_I18n_Immutable.php', 'Tribe\\Utils\\Element_Attributes' => __DIR__ . '/../..' . '/src/Tribe/Utils/Element_Attributes.php', 'Tribe\\Utils\\Element_Classes' => __DIR__ . '/../..' . '/src/Tribe/Utils/Element_Classes.php', 'Tribe\\Utils\\Lazy_Collection' => __DIR__ . '/../..' . '/src/Tribe/Utils/Lazy_Collection.php', 'Tribe\\Utils\\Lazy_Events' => __DIR__ . '/../..' . '/src/Tribe/Utils/Lazy_Events.php', 'Tribe\\Utils\\Lazy_String' => __DIR__ . '/../..' . '/src/Tribe/Utils/Lazy_String.php', 'Tribe\\Utils\\Paths' => __DIR__ . '/../..' . '/src/Tribe/Utils/Paths.php', 'Tribe\\Utils\\Post_Thumbnail' => __DIR__ . '/../..' . '/src/Tribe/Utils/Post_Thumbnail.php', 'Tribe\\Utils\\Query' => __DIR__ . '/../..' . '/src/Tribe/Utils/Query.php', 'Tribe\\Utils\\Strings' => __DIR__ . '/../..' . '/src/Tribe/Utils/Strings.php', 'Tribe\\Utils\\Taxonomy' => __DIR__ . '/../..' . '/src/Tribe/Utils/Taxonomy.php', 'Tribe\\Utils\\Theme_Compatibility' => __DIR__ . '/../..' . '/src/Tribe/Utils/Theme_Compatibility.php', 'Tribe\\Values\\Abstract_Currency' => __DIR__ . '/../..' . '/src/Tribe/Values/Abstract_Currency.php', 'Tribe\\Values\\Abstract_Value' => __DIR__ . '/../..' . '/src/Tribe/Values/Abstract_Value.php', 'Tribe\\Values\\Currency_Interface' => __DIR__ . '/../..' . '/src/Tribe/Values/Currency_Interface.php', 'Tribe\\Values\\Value_Calculation' => __DIR__ . '/../..' . '/src/Tribe/Values/Value_Calculation.php', 'Tribe\\Values\\Value_Formatting' => __DIR__ . '/../..' . '/src/Tribe/Values/Value_Formatting.php', 'Tribe\\Values\\Value_Interface' => __DIR__ . '/../..' . '/src/Tribe/Values/Value_Interface.php', 'Tribe\\Values\\Value_Update' => __DIR__ . '/../..' . '/src/Tribe/Values/Value_Update.php', 'Tribe\\Widget\\Manager' => __DIR__ . '/../..' . '/src/Tribe/Widget/Manager.php', 'Tribe\\Widget\\Widget_Abstract' => __DIR__ . '/../..' . '/src/Tribe/Widget/Widget_Abstract.php', 'Tribe\\Widget\\Widget_Interface' => __DIR__ . '/../..' . '/src/Tribe/Widget/Widget_Interface.php');
        public static function getInitializer(\Composer\Autoload\ClassLoader $loader)
        {
        }
    }
}
namespace TEC\Common\Firebase\JWT {
    class BeforeValidException extends \UnexpectedValueException
    {
    }
    /**
     * @implements ArrayAccess<string, Key>
     */
    class CachedKeySet implements \ArrayAccess
    {
        public function __construct(string $jwksUri, \Psr\Http\Client\ClientInterface $httpClient, \Psr\Http\Message\RequestFactoryInterface $httpFactory, \Psr\Cache\CacheItemPoolInterface $cache, int $expiresAfter = null, bool $rateLimit = false, string $defaultAlg = null)
        {
        }
        /**
         * @param string $keyId
         * @return Key
         */
        public function offsetGet($keyId) : \TEC\Common\Firebase\JWT\Key
        {
        }
        /**
         * @param string $keyId
         * @return bool
         */
        public function offsetExists($keyId) : bool
        {
        }
        /**
         * @param string $offset
         * @param Key $value
         */
        public function offsetSet($offset, $value) : void
        {
        }
        /**
         * @param string $offset
         */
        public function offsetUnset($offset) : void
        {
        }
    }
    class ExpiredException extends \UnexpectedValueException
    {
    }
    /**
     * JSON Web Key implementation, based on this spec:
     * https://tools.ietf.org/html/draft-ietf-jose-json-web-key-41
     *
     * PHP version 5
     *
     * @category Authentication
     * @package  Authentication_JWT
     * @author   Bui Sy Nguyen <nguyenbs@gmail.com>
     * @license  http://opensource.org/licenses/BSD-3-Clause 3-clause BSD
     * @link     https://github.com/firebase/php-jwt
     */
    class JWK
    {
        /**
         * Parse a set of JWK keys
         *
         * @param array<mixed> $jwks The JSON Web Key Set as an associative array
         * @param string       $defaultAlg The algorithm for the Key object if "alg" is not set in the
         *                                 JSON Web Key Set
         *
         * @return array<string, Key> An associative array of key IDs (kid) to Key objects
         *
         * @throws InvalidArgumentException     Provided JWK Set is empty
         * @throws UnexpectedValueException     Provided JWK Set was invalid
         * @throws DomainException              OpenSSL failure
         *
         * @uses parseKey
         */
        public static function parseKeySet(array $jwks, string $defaultAlg = null) : array
        {
        }
        /**
         * Parse a JWK key
         *
         * @param array<mixed> $jwk An individual JWK
         * @param string       $defaultAlg The algorithm for the Key object if "alg" is not set in the
         *                                 JSON Web Key Set
         *
         * @return Key The key object for the JWK
         *
         * @throws InvalidArgumentException     Provided JWK is empty
         * @throws UnexpectedValueException     Provided JWK was invalid
         * @throws DomainException              OpenSSL failure
         *
         * @uses createPemFromModulusAndExponent
         */
        public static function parseKey(array $jwk, string $defaultAlg = null) : ?\TEC\Common\Firebase\JWT\Key
        {
        }
    }
    /**
     * JSON Web Token implementation, based on this spec:
     * https://tools.ietf.org/html/rfc7519
     *
     * PHP version 5
     *
     * @category Authentication
     * @package  Authentication_JWT
     * @author   Neuman Vong <neuman@twilio.com>
     * @author   Anant Narayanan <anant@php.net>
     * @license  http://opensource.org/licenses/BSD-3-Clause 3-clause BSD
     * @link     https://github.com/firebase/php-jwt
     */
    class JWT
    {
        /**
         * When checking nbf, iat or expiration times,
         * we want to provide some extra leeway time to
         * account for clock skew.
         *
         * @var int
         */
        public static $leeway = 0;
        /**
         * Allow the current timestamp to be specified.
         * Useful for fixing a value within unit testing.
         * Will default to PHP time() value if null.
         *
         * @var ?int
         */
        public static $timestamp = null;
        /**
         * @var array<string, string[]>
         */
        public static $supported_algs = ['ES384' => ['openssl', 'SHA384'], 'ES256' => ['openssl', 'SHA256'], 'HS256' => ['hash_hmac', 'SHA256'], 'HS384' => ['hash_hmac', 'SHA384'], 'HS512' => ['hash_hmac', 'SHA512'], 'RS256' => ['openssl', 'SHA256'], 'RS384' => ['openssl', 'SHA384'], 'RS512' => ['openssl', 'SHA512'], 'EdDSA' => ['sodium_crypto', 'EdDSA']];
        /**
         * Decodes a JWT string into a PHP object.
         *
         * @param string                 $jwt            The JWT
         * @param Key|array<string,Key> $keyOrKeyArray  The Key or associative array of key IDs (kid) to Key objects.
         *                                               If the algorithm used is asymmetric, this is the public key
         *                                               Each Key object contains an algorithm and matching key.
         *                                               Supported algorithms are 'ES384','ES256', 'HS256', 'HS384',
         *                                               'HS512', 'RS256', 'RS384', and 'RS512'
         *
         * @return stdClass The JWT's payload as a PHP object
         *
         * @throws InvalidArgumentException     Provided key/key-array was empty or malformed
         * @throws DomainException              Provided JWT is malformed
         * @throws UnexpectedValueException     Provided JWT was invalid
         * @throws SignatureInvalidException    Provided JWT was invalid because the signature verification failed
         * @throws BeforeValidException         Provided JWT is trying to be used before it's eligible as defined by 'nbf'
         * @throws BeforeValidException         Provided JWT is trying to be used before it's been created as defined by 'iat'
         * @throws ExpiredException             Provided JWT has since expired, as defined by the 'exp' claim
         *
         * @uses jsonDecode
         * @uses urlsafeB64Decode
         */
        public static function decode(string $jwt, $keyOrKeyArray) : \stdClass
        {
        }
        /**
         * Converts and signs a PHP array into a JWT string.
         *
         * @param array<mixed>          $payload PHP array
         * @param string|resource|OpenSSLAsymmetricKey|OpenSSLCertificate $key The secret key.
         * @param string                $alg     Supported algorithms are 'ES384','ES256', 'HS256', 'HS384',
         *                                       'HS512', 'RS256', 'RS384', and 'RS512'
         * @param string                $keyId
         * @param array<string, string> $head    An array with header elements to attach
         *
         * @return string A signed JWT
         *
         * @uses jsonEncode
         * @uses urlsafeB64Encode
         */
        public static function encode(array $payload, $key, string $alg, string $keyId = null, array $head = null) : string
        {
        }
        /**
         * Sign a string with a given key and algorithm.
         *
         * @param string $msg  The message to sign
         * @param string|resource|OpenSSLAsymmetricKey|OpenSSLCertificate  $key  The secret key.
         * @param string $alg  Supported algorithms are 'ES384','ES256', 'HS256', 'HS384',
         *                    'HS512', 'RS256', 'RS384', and 'RS512'
         *
         * @return string An encrypted message
         *
         * @throws DomainException Unsupported algorithm or bad key was specified
         */
        public static function sign(string $msg, $key, string $alg) : string
        {
        }
        /**
         * Decode a JSON string into a PHP object.
         *
         * @param string $input JSON string
         *
         * @return mixed The decoded JSON string
         *
         * @throws DomainException Provided string was invalid JSON
         */
        public static function jsonDecode(string $input)
        {
        }
        /**
         * Encode a PHP array into a JSON string.
         *
         * @param array<mixed> $input A PHP array
         *
         * @return string JSON representation of the PHP array
         *
         * @throws DomainException Provided object could not be encoded to valid JSON
         */
        public static function jsonEncode(array $input) : string
        {
        }
        /**
         * Decode a string with URL-safe Base64.
         *
         * @param string $input A Base64 encoded string
         *
         * @return string A decoded string
         *
         * @throws InvalidArgumentException invalid base64 characters
         */
        public static function urlsafeB64Decode(string $input) : string
        {
        }
        /**
         * Encode a string with URL-safe Base64.
         *
         * @param string $input The string you want encoded
         *
         * @return string The base64 encode of what you passed in
         */
        public static function urlsafeB64Encode(string $input) : string
        {
        }
        /**
         * @param string $left  The string of known length to compare against
         * @param string $right The user-supplied string
         * @return bool
         */
        public static function constantTimeEquals(string $left, string $right) : bool
        {
        }
    }
    class Key
    {
        /**
         * @param string|resource|OpenSSLAsymmetricKey|OpenSSLCertificate $keyMaterial
         * @param string $algorithm
         */
        public function __construct($keyMaterial, string $algorithm)
        {
        }
        /**
         * Return the algorithm valid for this key
         *
         * @return string
         */
        public function getAlgorithm() : string
        {
        }
        /**
         * @return string|resource|OpenSSLAsymmetricKey|OpenSSLCertificate
         */
        public function getKeyMaterial()
        {
        }
    }
    class SignatureInvalidException extends \UnexpectedValueException
    {
    }
}
namespace TEC\Common\lucatume\DI52 {
    /**
     * Class App
     *
     * @package lucatume\DI52
     */
    class App
    {
        /** A reference to the singleton instance of the DI container
         * the application uses as Service Locator.
         *
         * @var Container|null
         */
        protected static $container;
        /**
         * Returns the singleton instance of the DI container the application
         * will use as Service Locator.
         *
         * @return Container The singleton instance of the Container used as Service Locator
         *                   by the application.
         */
        public static function container()
        {
        }
        /**
         * Sets the container instance the Application should use as a Service Locator.
         *
         * If the Application already stores a reference to a Container instance, then
         * this will be replaced by the new one.
         *
         * @param Container $container A reference to the Container instance the Application
         *                             should use as a Service Locator.
         *
         * @return void The method does not return any value.
         */
        public static function setContainer(\TEC\Common\lucatume\DI52\Container $container)
        {
        }
        /**
         * Sets a variable on the container.
         *
         * @param string $key   The alias the container will use to reference the variable.
         * @param mixed  $value The variable value.
         *
         * @return void The method does not return any value.
         */
        public static function setVar($key, $value)
        {
        }
        /**
         * Sets a variable on the container using the ArrayAccess API.
         *
         * When using the container as an array bindings will be bound as singletons.
         * These are equivalent: `$container->singleton('foo','ClassOne');`, `$container['foo'] = 'ClassOne';`.
         *
         * @param string $offset The alias the container will use to reference the variable.
         * @param mixed  $value  The variable value.
         *
         * @return void This method does not return any value.
         *
         * @throws ContainerException If the closure building fails.
         */
        public static function offsetSet($offset, $value)
        {
        }
        /**
         * Binds an interface a class or a string slug to an implementation and will always return the same instance.
         *
         * @param  string|class-string  $id                 A class or interface fully qualified name or a string slug.
         * @param  mixed                $implementation     The implementation that should be bound to the alias(es); can
         *                                                  be a class name, an object or a closure.
         * @param  string[]|null        $afterBuildMethods  An array of methods that should be called on the built
         *                                                  implementation after resolving it.
         *
         * @return void This method does not return any value.
         *
         * @throws ContainerException If there's any issue reflecting on the class, interface or the implementation.
         */
        public static function singleton($id, $implementation = null, array $afterBuildMethods = null)
        {
        }
        /**
         * Returns a variable stored in the container.
         *
         * If the variable is a binding then the binding will be resolved before returning it.
         *
         * @param string     $key     The alias of the variable or binding to fetch.
         * @param mixed|null $default A default value to return if the variable is not set in the container.
         *
         * @return mixed The variable value or the resolved binding.
         * @throws ContainerException If there's an issue resolving the variable.
         *
         * @see Container::get()
         */
        public static function getVar($key, $default = null)
        {
        }
        /**
         * Finds an entry of the container by its identifier and returns it.
         *
         * @template T
         *
         * @param  string|class-string<T>  $offset  Identifier of the entry to look for.
         *
         * @return T|mixed The value for the offset.
         * @phpstan-return ($offset is class-string ? T : mixed)
         *
         * @throws ContainerException Error while retrieving the entry.
         * @throws NotFoundException  No entry was found for **this** identifier.
         */
        public static function offsetGet($offset)
        {
        }
        /**
         * Finds an entry of the container by its identifier and returns it.
         *
         * @template T
         *
         * @param string|class-string<T> $id A fully qualified class or interface name or an already built object.
         *
         * @return T|mixed The entry for an id.
         * @phpstan-return ($id is class-string ? T : mixed)
         *
         * @throws ContainerException Error while retrieving the entry.
         */
        public static function get($id)
        {
        }
        /**
         * Returns an instance of the class or object bound to an interface, class  or string slug if any, else it will try
         * to automagically resolve the object to a usable instance.
         *
         * If the implementation has been bound as singleton using the `singleton` method
         * or the ArrayAccess API then the implementation will be resolved just on the first request.
         *
         * @template T
         *
         * @param string|class-string<T> $id A fully qualified class or interface name or an already built object.
         *
         * @return T|mixed
         * @phpstan-return ($id is class-string ? T : mixed)
         *
         * @throws ContainerException If the target of the make is not bound and is not a valid,
         *                                              concrete, class name or there's any issue making the target.
         */
        public static function make($id)
        {
        }
        /**
         * Returns true if the container can return an entry for the given identifier.
         * Returns false otherwise.
         *
         * `$container[$id]` returning true does not mean that `$container[$id]` will not throw an exception.
         * It does however mean that `$container[$id]` will not throw a `NotFoundExceptionInterface`.
         *
         * @param string|class-string $offset An offset to check for.
         *
         * @return boolean true on success or false on failure.
         */
        public static function offsetExists($offset)
        {
        }
        /**
         * Returns true if the container can return an entry for the given identifier.
         * Returns false otherwise.
         *
         * `has($id)` returning true does not mean that `get($id)` will not throw an exception.
         * It does however mean that `get($id)` will not throw a `NotFoundExceptionInterface`.
         *
         * @param string|class-string $id Identifier of the entry to look for.
         *
         * @return bool Whether the container contains a binding for an id or not.
         */
        public static function has($id)
        {
        }
        /**
         * Tags an array of implementations bindings for later retrieval.
         *
         * The implementations can also reference interfaces, classes or string slugs.
         * Example:
         *
         *        $container->tag(['Posts', 'Users', 'Comments'], 'endpoints');
         *
         * @param array<string|callable|object> $implementationsArray The ids, class names or objects to apply the tag to.
         * @param string                        $tag                  The tag to apply.
         *
         * @return void This method does not return any value.
         * @see Container::tagged()
         *
         */
        public static function tag(array $implementationsArray, $tag)
        {
        }
        /**
         * Retrieves an array of bound implementations resolving them.
         *
         * The array of implementations should be bound using the `tag` method:
         *
         *        $container->tag(['Posts', 'Users', 'Comments'], 'endpoints');
         *        foreach($container->tagged('endpoints') as $endpoint){
         *            $endpoint->register();
         *        }
         *
         * @param string $tag The tag to return the tagged values for.
         *
         * @return array<mixed> An array of resolved bound implementations.
         * @throws NotFoundException If nothing is tagged with the tag.
         * @throws ContainerException If one of the bindings is not of the correct type.
         * @see Container::tag()
         */
        public static function tagged($tag)
        {
        }
        /**
         * Checks whether a tag group exists in the container.
         *
         * @param string $tag
         *
         * @return bool
         * @see Container::tag()
         *
         */
        public static function hasTag($tag)
        {
        }
        /**
         * Registers a service provider implementation.
         *
         * The `register` method will be called immediately on the service provider.
         *
         * If the provider overloads the  `isDeferred` method returning a truthy value then the `register` method will be
         * called only if one of the implementations provided by the provider is requested. The container defines which
         * implementations is offering overloading the `provides` method; the method should return an array of provided
         * implementations.
         *
         * If a provider overloads the `boot` method that method will be called when the `boot` method is called on the
         * container itself.
         *
         * @param class-string $serviceProviderClass The fully-qualified Service Provider class name.
         * @param string ...$alias             A list of aliases the provider should be registered with.
         * @return void This method does not return any value.
         * @throws ContainerException If the Service Provider is not correctly configured or there's an issue
         *                                     reflecting on it.
         * @see ServiceProvider::register()
         * @see ServiceProvider::isDeferred()
         * @see ServiceProvider::provides()
         * @see Container::getProvider()
         * @see ServiceProvider::boot()
         */
        public static function register($serviceProviderClass, ...$alias)
        {
        }
        /**
         * Binds an interface, a class or a string slug to an implementation.
         *
         * Existing implementations are replaced.
         *
         * @param  string|class-string  $id                 A class or interface fully qualified name or a string slug.
         * @param  mixed                $implementation     The implementation that should be bound to the alias(es); can
         *                                                  be a class name, an object or a closure.
         * @param  string[]|null        $afterBuildMethods  An array of methods that should be called on the built
         *                                                  implementation after resolving it.
         *
         * @return void The method does not return any value.
         *
         * @throws ContainerException      If there's an issue while trying to bind the implementation.
         */
        public static function bind($id, $implementation = null, array $afterBuildMethods = null)
        {
        }
        /**
         * Boots up the application calling the `boot` method of each registered service provider.
         *
         * If there are bootable providers (providers overloading the `boot` method) then the `boot` method will be
         * called on each bootable provider.
         *
         * @return void This method does not return any value.
         *
         * @see ServiceProvider::boot()
         */
        public static function boot()
        {
        }
        /**
         * Binds a class, interface or string slug to a chain of implementations decorating a base
         * object; the chain will be lazily resolved only on the first call.
         * The base decorated object must be the last element of the array.
         *
         * @param  string|class-string            $id                 The class, interface or slug the decorator chain
         *                                                            should be bound to.
         * @param  array<string|object|callable>  $decorators         An array of implementations that decorate an object.
         * @param  string[]|null                  $afterBuildMethods  An array of methods that should be called on the
         *                                                            instance after it has been built; the methods should
         *                                                            not require any argument.
         *
         * @return void This method does not return any value.
         * @throws ContainerException
         */
        public static function singletonDecorators($id, $decorators, array $afterBuildMethods = null)
        {
        }
        /**
         * Binds a class, interface or string slug to a chain of implementations decorating a
         * base object.
         *
         * The base decorated object must be the last element of the array.
         *
         * @param  string|class-string            $id                 The class, interface or slug the decorator chain
         *                                                            should be bound to.
         * @param  array<string|object|callable>  $decorators         An array of implementations that decorate an object.
         * @param  string[]|null                  $afterBuildMethods  An array of methods that should be called on the
         *                                                            instance after it has been built; the methods should
         *                                                            not require any argument.
         *
         * @return void This method does not return any value.
         * @throws ContainerException If there's any issue binding the decorators.
         */
        public static function bindDecorators($id, array $decorators, array $afterBuildMethods = null)
        {
        }
        /**
         * Unsets a binding or tag in the container.
         *
         * @param mixed $offset The offset to unset.
         *
         * @return void The method does not return any value.
         */
        public static function offsetUnset($offset)
        {
        }
        /**
         * Starts the `when->needs->give` chain for a contextual binding.
         *
         * @param string|class-string $class The fully qualified name of the requesting class.
         *
         * Example:
         *
         *      // Any class requesting an implementation of `LoggerInterface` will receive this implementation ...
         *      $container->singleton('LoggerInterface', 'FilesystemLogger');
         *      // But if the requesting class is `Worker` return another implementation
         *      $container->when('Worker')
         *          ->needs('LoggerInterface')
         *          ->give('RemoteLogger');
         *
         * @return Container The container instance, to continue the when/needs/give chain.
         */
        public static function when($class)
        {
        }
        /**
         * Second step of the `when->needs->give` chain for a contextual binding.
         *
         * Example:
         *
         *      // Any class requesting an implementation of `LoggerInterface` will receive this implementation ...
         *      $container->singleton('LoggerInterface', 'FilesystemLogger');
         *      // But if the requesting class is `Worker` return another implementation.
         *      $container->when('Worker')
         *          ->needs('LoggerInterface')
         *          ->give('RemoteLogger');
         *
         * @param string|class-string $id The class or interface needed by the class.
         *
         * @return Container The container instance, to continue the when/needs/give chain.
         */
        public static function needs($id)
        {
        }
        /**
         * Third step of the `when->needs->give` chain for a contextual binding.
         *
         * Example:
         *
         *      // any class requesting an implementation of `LoggerInterface` will receive this implementation...
         *      $container->singleton('LoggerInterface', 'FilesystemLogger');
         *      // but if the requesting class is `Worker` return another implementation
         *      $container->when('Worker')
         *          ->needs('LoggerInterface')
         *          ->give('RemoteLogger');
         *
         * @param mixed $implementation The implementation specified
         *
         * @return void This method does not return any value.
         * @throws NotFoundException
         */
        public static function give($implementation)
        {
        }
        /**
         * Returns a lambda function suitable to use as a callback; when called the function will build the implementation
         * bound to `$id` and return the value of a call to `$method` method with the call arguments.
         *
         * @param  string|class-string|object  $id      A fully-qualified class name, a bound slug or an object o call the
         *                                              callback on.
         * @param  string                      $method  The method that should be called on the resolved implementation
         *                                              with the specified array arguments.
         *
         * @return callable The callback function.
         * @throws ContainerException If the id is not a bound implementation or valid class name.
         */
        public static function callback($id, $method)
        {
        }
        /**
         * Returns a callable object that will build an instance of the specified class using the
         * specified arguments when called.
         * The callable will be a closure on PHP 5.3+ or a lambda function on PHP 5.2.
         *
         * @param  string|class-string|mixed  $id                 The fully qualified name of a class or an interface.
         * @param  array<mixed>               $buildArgs          An array of arguments that should be used to build the
         *                                                        instance; note that any argument will be resolved using
         *                                                        the container itself and bindings will apply.
         * @param  string[]|null              $afterBuildMethods  An array of methods that should be called on the built
         *                                                        implementation after resolving it.
         *
         * @return callable  A callable function that will return an instance of the specified class when
         *                   called.
         */
        public static function instance($id, array $buildArgs = [], array $afterBuildMethods = null)
        {
        }
        /**
         * Protects a value to make sure it will not be resolved, if callable or if the name of an existing class.
         *
         * @param mixed $value The value to protect.
         *
         * @return ValueBuilder A protected value instance, its value set to the provided value.
         */
        public static function protect($value)
        {
        }
        /**
         * Returns the Service Provider instance registered.
         *
         * @param string|class-string $providerId The Service Provider class to return the instance for.
         *
         * @return ServiceProvider The service provider instance.
         *
         * @throws NotFoundException|ContainerException If the Service Provider class was never registered in the container
         *                                              or there's an issue retrieving it.
         */
        public static function getProvider($providerId)
        {
        }
        /**
         * Returns whether a binding exists in the container or not.
         *
         * `isBound($id)` returning `true` means the call to `bind($id, $implementaion)` or `singleton($id,
         * $implementation)` (or equivalent ArrayAccess methods) was explicitly made.
         *
         * @param string|class-string $id The id to check for bindings in the container.
         *
         * @return bool Whether an explicit binding for the id exists in the container or not.
         */
        public static function isBound($id)
        {
        }
        /**
         * Sets the mask for the throwables that should be caught and re-thrown as container exceptions.
         *
         * @param int $maskThrowables The mask for the throwables that should be caught and re-thrown as container
         *
         * @return void
         */
        public static function setExceptionMask($maskThrowables)
        {
        }
    }
}
namespace TEC\Common\lucatume\DI52\Builders {
    /**
     * Interface BuilderInterface
     *
     * @package TEC\Common\lucatume\DI52\Builders
     */
    interface BuilderInterface
    {
        /**
         * Builds and returns the implementation handled by the builder.
         *
         * @return mixed The implementation provided by the builder.
         */
        public function build();
    }
    /**
     * Interface ReinitializableBuilderInterface
     *
     * @package TEC\Common\lucatume\DI52\Builders
     */
    interface ReinitializableBuilderInterface
    {
        /**
         * Reinitialize the builder setting the after build methods and build args.
         *
         * @param array<string>|null $afterBuildMethods A set of methods to call on the object after it's built.
         * @param mixed              ...$buildArgs      A set of build arguments that will be passed to the constructor.
         *
         * @return void This method does not return any value.
         */
        public function reinit(array $afterBuildMethods = null, ...$buildArgs);
    }
    /**
     * Class CallableBuilder
     *
     * @package TEC\Common\lucatume\DI52\Builders
     */
    class CallableBuilder implements \TEC\Common\lucatume\DI52\Builders\BuilderInterface, \TEC\Common\lucatume\DI52\Builders\ReinitializableBuilderInterface
    {
        /**
         * An instance of the DI Container.
         *
         * @var Container The
         */
        protected $container;
        /**
         * The callable this builder will use.
         *
         * @var callable
         */
        protected $callable;
        /**
         * An array of method that will be called on the built object.
         *
         * @var array<string>|null
         */
        protected $afterBuildMethods;
        /**
         * An array of arguments that will be passed as input to the callable method.
         *
         * @var array<mixed>
         */
        protected $buildArgs;
        /**
         * CallableBuilder constructor.
         *
         * @param Container          $container         An instance of the DI Container.
         * @param callable           $callable          The builder callable.
         * @param array<string>|null $afterBuildMethods A set of methods to call on the built instance.
         * @param mixed              ...$buildArgs      A set of optional arguments for the callable method.
         */
        public function __construct(\TEC\Common\lucatume\DI52\Container $container, callable $callable, array $afterBuildMethods = null, ...$buildArgs)
        {
        }
        /**
         * Calls the callable for the builder and returns its value.
         *
         * @return mixed The built implementation.
         */
        public function build()
        {
        }
        /**
         * Reinitialize the builder setting the after build methods and build args.
         *
         * @param array<string>|null $afterBuildMethods A set of methods to call on the object after it's built.
         * @param mixed              ...$buildArgs      A set of build arguments that will be passed to the constructor.
         *
         * @return void This method does not return any value.
         */
        public function reinit(array $afterBuildMethods = null, ...$buildArgs)
        {
        }
    }
    /**
     * Class ClassBuilder
     *
     * @package TEC\Common\lucatume\DI52\Builders
     */
    class ClassBuilder implements \TEC\Common\lucatume\DI52\Builders\BuilderInterface, \TEC\Common\lucatume\DI52\Builders\ReinitializableBuilderInterface
    {
        /**
         * An array cache of resolved constructor parameters, shared across all instances of the builder.
         * @var array<string,array<Parameter>>
         */
        protected static $constructorParametersCache = [];
        /**
         * A set of arguments that will be passed to the class constructor.
         *
         * @var array<mixed>
         */
        protected $buildArgs;
        /**
         * The id associated with the builder by the resolver.
         * @var string
         */
        protected $id;
        /**
         * The fully-qualified class name the builder should build instances of.
         *
         * @var class-string
         */
        protected $className;
        /**
         * A set of methods to call on the built object.
         *
         * @var array<string>|null
         */
        protected $afterBuildMethods;
        /**
         * A reference to the resolver currently using the builder.
         *
         * @var Resolver
         */
        protected $resolver;
        /**
         * Whether the $className is an implementation of $id
         * and $id is an interface.
         *
         * @var bool
         */
        protected $isInterface = false;
        /**
         * ClassBuilder constructor.
         *
         * @param string|class-string $id                   The identifier associated with this builder.
         * @param Resolver            $resolver             A reference to the resolver currently using the builder.
         * @param string              $className            The fully-qualified class name to build instances for.
         * @param array<string>|null  $afterBuildMethods    An optional set of methods to call on the built object.
         * @param mixed               ...$buildArgs         An optional set of build arguments that should be provided to
         *                                                  the class constructor method.
         *
         * @throws NotFoundException If the class does not exist.
         */
        public function __construct($id, \TEC\Common\lucatume\DI52\Builders\Resolver $resolver, $className, array $afterBuildMethods = null, ...$buildArgs)
        {
        }
        /**
         * Builds and returns an instance of the class.
         *
         * @return object An instance of the class.
         *
         * @throws ContainerException
         */
        public function build()
        {
        }
        /**
         * Resolves the constructor arguments to concrete implementations or values.
         *
         * @return array<mixed> A set of resolved constructor arguments.
         *
         * @throws ContainerException If a constructor argument resolution raises issues.
         */
        protected function resolveConstructorParameters()
        {
        }
        /**
         * Returns a set of resolved constructor parameters.
         *
         * @param  class-string  $className  The fully-qualified class name to get the resolved constructor parameters yet.
         *
         * @return array<Parameter> A set of resolved constructor parameters.
         *
         * @throws ContainerException If the resolution of any constructor parameters is problematic.
         */
        protected function getResolvedConstructorParameters($className)
        {
        }
        /**
         * Resolves a build argument to a concrete implementation.
         *
         * @param mixed $arg The argument id or value to resolve.
         *
         * @return mixed The resolved build argument.
         *
         * @throws NotFoundException
         */
        protected function resolveBuildArg($arg)
        {
        }
        /**
         * Resolves a parameter to a concrete implementation or value.
         *
         * @param Parameter $parameter The parameter to resolve.
         *
         * @return mixed The resolved parameter.
         *
         * @throws ContainerException If the parameter resolution fails.
         */
        protected function resolveParameter(\TEC\Common\lucatume\DI52\Builders\Parameter $parameter)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function reinit(array $afterBuildMethods = null, ...$buildArgs)
        {
        }
    }
    /**
     * Class ClosureBuilder
     *
     * @package TEC\Common\lucatume\DI52\Builders
     */
    class ClosureBuilder implements \TEC\Common\lucatume\DI52\Builders\BuilderInterface
    {
        /**
         * A reference to the resolver currently using the builder.
         *
         * @var Container
         */
        protected $container;
        /**
         * A reference to the closure the builder should run to build.
         *
         * @var Closure
         */
        protected $closure;
        /**
         * ClosureBuilder constructor.
         *
         * @param Container $container A reference to the current DI container instance.
         * @param Closure   $closure   A reference to the closure that should be used to build the implementation.
         */
        public function __construct(\TEC\Common\lucatume\DI52\Container $container, \Closure $closure)
        {
        }
        /**
         * Calls the Closure handled by the builder to return the built implementation.
         *
         * @return mixed The built implementation.
         */
        public function build()
        {
        }
    }
    /**
     * Class Factory
     *
     * @package TEC\Common\lucatume\DI52\Builders
     */
    class Factory
    {
        /**
         * A reference to the resolver that should be used to resolve the implementations.
         *
         * @var Resolver
         */
        protected $resolver;
        /**
         * A reference to the DI container builder will be built for.
         *
         * @var Container
         */
        protected $container;
        /**
         * BuilderFactory constructor.
         * @param Container $container A reference to the DI container the builder is working for.
         * @param Resolver  $resolver A reference to the resolver builders will use to resolve to implementations.
         */
        public function __construct(\TEC\Common\lucatume\DI52\Container $container, \TEC\Common\lucatume\DI52\Builders\Resolver $resolver)
        {
        }
        /**
         * Returns the correct builder for a value.
         *
         * @param  string|class-string|mixed  $id                 The string id to provide a builder for, or a value.
         * @param  mixed                      $implementation     The implementation to build the builder for.
         * @param  string[]|null              $afterBuildMethods  A list of methods that should be called on the built
         *                                                        instance after it's been built.
         * @param  mixed                      ...$buildArgs       A set of arguments to pass that should be used to build
         *                                                        the instance, if any.
         *
         * @return BuilderInterface A builder instance.
         *
         * @throws NotFoundException If a builder cannot find its implementation target.
         */
        public function getBuilder($id, $implementation = null, array $afterBuildMethods = null, ...$buildArgs)
        {
        }
    }
    /**
     * Class Parameter
     *
     * @package TEC\Common\lucatume\DI52\Builders
     */
    class Parameter
    {
        /**
         * The parameter type or `null` if the type cannot be parsed.
         *
         * @var string|null
         */
        protected $type;
        /**
         * Whether the parameter is an optional one or not.
         *
         * @var bool
         */
        protected $isOptional;
        /**
         * The parameter default value, or `null` if not available.
         *
         * @var mixed|null
         */
        protected $defaultValue;
        /**
         * Whether the parameter is a class or not.
         *
         * @var bool
         */
        protected $isClass;
        /**
         * A list of the types that are NOT classes.
         *
         * @var array<string>
         */
        protected static $nonClassTypes = ['string', 'int', 'bool', 'float', 'double', 'array', 'resource', 'callable', 'iterable', 'union'];
        /**
         * A map relating the string output type to the internal, type-hintable, type.
         *
         * @var array<string>
         */
        protected static $conversionMap = ['integer' => 'int', 'boolean' => 'bool', 'double' => 'float'];
        /**
         * The parameter name.
         *
         * @var string
         */
        protected $name;
        /**
         * Parameter constructor.
         *
         * @param int $index The parameter position in the list of parameters.
         * @param ReflectionParameter $reflectionParameter The parameter reflection to extract the information from.
         *
         * @throws ReflectionException
         */
        public function __construct($index, \ReflectionParameter $reflectionParameter)
        {
        }
        /**
         * Returns the parameter extracted data.
         *
         * @return array<string,string|bool|mixed> A map of the parameter data.
         */
        public function getData()
        {
        }
        /**
         * Returns the parameter default value, if any.
         *
         * @return mixed|null The parameter default value, if any.
         */
        public function getDefaultValue()
        {
        }
        /**
         * Returns the parameter class name, if any.
         *
         * @return string|null The parameter class name, if any.
         */
        public function getClass()
        {
        }
        /**
         * Returns the parameter name.
         *
         * @return string
         */
        public function getName()
        {
        }
        /**
         * Returns the parameter type, if any.
         *
         * @return string|null The parameter type, if any.
         */
        public function getType()
        {
        }
        /**
         * Either return the parameter default value, or die trying.
         *
         * @return mixed|null The parameter default value.
         * @throws ContainerException If the parameter does not have a default value.
         */
        public function getDefaultValueOrFail()
        {
        }
    }
    /**
     * Class Resolver
     *
     * @package TEC\Common\lucatume\DI52\Builders
     */
    class Resolver
    {
        /**
         * A map from ids bound in the container to their builder or resolved value.
         *
         * @var array<string,BuilderInterface|mixed>
         */
        protected $bindings = [];
        /**
         * A flag property to indicate whether implicit bindings, those discovered during auto-wiring resolution, should
         * be bound as prototype or singleton bindings.
         *
         * @var bool
         */
        protected $resolveUnboundAsSingletons = false;
        /**
         * A map from ids bound in the container to their singleton nature.
         *
         * @var array<string,bool>
         */
        protected $singletons = [];
        /**
         * A map of when-needs-give specifications.
         * @var array<string,array<string,BuilderInterface>>
         */
        protected $whenNeedsGive = [];
        /**
         * The current build line, a list from the trunk to the leaf of the current resolution.
         *
         * @var array<string>
         */
        protected $buildLine = [];
        /**
         * Resolver constructor.
         *
         * @param false $resolveUnboundAsSingletons Whether implicit bindings, those discovered during auto-wiring
         *                                          resolution, should be bound as prototype or singleton bindings.
         */
        public function __construct($resolveUnboundAsSingletons = false)
        {
        }
        /**
         * Binds an implementation for an id, or class name, as prototype (build new each time).
         *
         * @param  string|class-string  $id              The id to register the implementation for.
         * @param  BuilderInterface     $implementation  The builder that will provide the implementation for the id.
         *
         * @return void This method does not return any value.
         */
        public function bind($id, \TEC\Common\lucatume\DI52\Builders\BuilderInterface $implementation)
        {
        }
        /**
         * Registers an implementation for an id, or class name, as singleton (build at most once).
         *
         * @param  string|class-string  $id              The id to register the implementation for.
         * @param  BuilderInterface     $implementation  The builder that will provide the implementation for
         *                                               the id.
         *
         * @return void This method does not return any value.
         */
        public function singleton($id, \TEC\Common\lucatume\DI52\Builders\BuilderInterface $implementation)
        {
        }
        /**
         * Returns whether an implementation was registered for the id in the resolver or not.
         *
         * @param string $id The id to check the implementation for.
         *
         * @return bool Whether an implementation was registered for the id in the resolver or not.
         */
        public function isBound($id)
        {
        }
        /**
         * Removes the relation between an id and a bound implementation from the resolver.
         *
         * @param string|class-string $id The id to unregister the implementation for.
         *
         * @return void This method does not return any value.
         */
        public function unbind($id)
        {
        }
        /**
         * Returns whether a specific id is bound as singleton (build at most once), or not.
         *
         * @param string|class-string $id The id to check.
         *
         * @return bool Whether a specific id is bound as singleton (build at most once), or not.
         */
        public function isSingleton($id)
        {
        }
        /**
         * Transform the canonical class to the class part of a when-needs-give specification, if required.
         *
         * @param  string|class-string  $id          The ID to resolve the when-needs-give case for.
         * @param  string               $paramClass  The class of the parameter to solve the when-needs-give case for.
         *
         * @return BuilderInterface|string Either the builder for the when-needs-give replacement, or the input parameter
         *                                 class if not found.
         */
        public function whenNeedsGive($id, $paramClass)
        {
        }
        /**
         * Sets an entry in the when->needs->give chain.
         *
         * @param  string|class-string  $whenClass   The "when" part of the chain, a class name or id.
         * @param  string|class-string  $needsClass  The "needs" part of the chain, a class name or id.
         * @param  BuilderInterface     $builder     The Builder instance that should be returned when a class needs the
         *                                           specified id.
         *
         * @return void This method does not return any value.
         */
        public function setWhenNeedsGive($whenClass, $needsClass, \TEC\Common\lucatume\DI52\Builders\BuilderInterface $builder)
        {
        }
        /**
         * Resolves an ide to an implementation with the input arguments.
         *
         * @param  string|class-string|mixed  $id                         The id, class name or built value to resolve.
         * @param  string[]|null              $afterBuildMethods          A list of methods that should run on the built
         *                                                                instance.
         * @param  mixed                      ...$buildArgs               A set of build arguments that will be passed to
         *                                                                the implementation constructor.
         *
         * @return BuilderInterface|ReinitializableBuilderInterface|mixed The builder, set up to use the specified set of
         *                                                                build arguments.
         * @throws NotFoundException If the id is a string that does not resolve to an existing, concrete, class.
         */
        public function resolveWithArgs($id, array $afterBuildMethods = null, ...$buildArgs)
        {
        }
        /**
         * Resolves an id or input value to a value or object instance.
         *
         * @template T
         *
         * @param  string|class-string<T>|mixed  $id         Either the id of a bound implementation, a class name or an
         *                                                   object to resolve.
         * @param  string[]|null                 $buildLine  The build line to append the resolution leafs to, or `null` to
         *                                                   use the current one.
         *
         * @return T|mixed The resolved value or instance.
         * @phpstan-return ($id is class-string ? T : mixed)
         *
         * @throws NotFoundException If the id is a string that is not bound and is not an existing, concrete, class.
         */
        public function resolve($id, array $buildLine = null)
        {
        }
        /**
         * Adds an entry to the build line.
         *
         * @param string $type          The type of parameter the Resolver is currently attempting to resolve.
         * @param string $parameterName The name of the parameter in the method signature, if any.
         *
         * @return void This method does not return any value.
         */
        public function addToBuildLine($type, $parameterName)
        {
        }
        /**
         * Returns the current build line.
         *
         * The build line will return a straight path from the current resolution root to the leaf
         * currently being resolved. Used for error logging and formatting.
         *
         * @return string[] A set of consecutive items the resolver is currently trying to build.
         */
        public function getBuildLine()
        {
        }
        /**
         * Removes the last element from the build line, if any.
         *
         * @return void The method does not return any value.
         */
        public function buildLinePop()
        {
        }
    }
    /**
     * Class ValueBuilder
     *
     * @package TEC\Common\lucatume\DI52\Builders
     */
    class ValueBuilder implements \TEC\Common\lucatume\DI52\Builders\BuilderInterface
    {
        /**
         * ValueBuilder constructor.
         *
         * @param mixed $value The value to build the instance of the builder for.
         */
        public function __construct($value)
        {
        }
        /**
         * Builds and returns an instance of the builder built on the specified value.
         *
         * @param mixed $value The value the instance of the builder should be built for.
         *
         * @return ValueBuilder An instance of the builder built on the specified value.
         */
        public static function of($value)
        {
        }
        /**
         * Returns the value wrapped by the builder.
         *
         * @return mixed The value wrapped by the builder.
         */
        public function build()
        {
        }
    }
}
namespace TEC\Common\Psr\Container {
    /**
     * Base interface representing a generic exception in a container.
     */
    interface ContainerExceptionInterface
    {
    }
}
namespace TEC\Common\lucatume\DI52 {
    /**
     * Class ContainerException
     *
     * @package lucatume\DI52
     */
    class ContainerException extends \Exception implements \TEC\Common\Psr\Container\ContainerExceptionInterface
    {
        /**
         * Builds a container exception from a throwable.
         *
         * @param string|object $id The id of what is actually being built or the object that is being built.
         * @param Exception|Throwable $thrown The throwable to build the exception from.
         * @param int $maskThrowables The bitmask of throwable properties to mask.
         * @param array<string> $buildLine A set of consecutive items the resolver is currently trying to build.
         *
         * @return ContainerException The built Container exception.
         */
        public static function fromThrowable($id, $thrown, $maskThrowables, array $buildLine)
        {
        }
    }
    /**
     * Class NestedParseError.
     *
     * @package TEC\Common\lucatume\DI52;
     */
    class NestedParseError extends \Exception
    {
        /**
         * NestedParseError constructor.
         *
         * @param string $message The Exception message to throw.
         * @param int $code The Exception code.
         * @param Throwable|null $previous The previous exception used for the exception chaining.
         * @param string $type The type of the entity being loaded.
         * @param string $name The name of the entity being loaded.
         */
        public function __construct($message = "", $code = 0, \Throwable $previous = null, $type = '', $name = '')
        {
        }
        /**
         * Returns the type of the entity being loaded.
         *
         * @return string
         */
        public function getType()
        {
        }
        /**
         * Returns the name of the entity being loaded.
         *
         * @return string
         */
        public function getName()
        {
        }
    }
}
namespace TEC\Common\Psr\Container {
    /**
     * No entry was found in the container.
     */
    interface NotFoundExceptionInterface extends \TEC\Common\Psr\Container\ContainerExceptionInterface
    {
    }
}
namespace TEC\Common\lucatume\DI52 {
    /**
     * Class NotFoundException
     *
     * @package lucatume\DI52
     */
    class NotFoundException extends \TEC\Common\lucatume\DI52\ContainerException implements \TEC\Common\Psr\Container\NotFoundExceptionInterface
    {
    }
}
namespace TEC\Common\Monolog {
    /**
     * Monolog error handler
     *
     * A facility to enable logging of runtime errors, exceptions and fatal errors.
     *
     * Quick setup: <code>ErrorHandler::register($logger);</code>
     *
     * @author Jordi Boggiano <j.boggiano@seld.be>
     */
    class ErrorHandler
    {
        public function __construct(\TEC\Common\Psr\Log\LoggerInterface $logger)
        {
        }
        /**
         * Registers a new ErrorHandler for a given Logger
         *
         * By default it will handle errors, exceptions and fatal errors
         *
         * @param  LoggerInterface $logger
         * @param  array|false     $errorLevelMap  an array of E_* constant to LogLevel::* constant mapping, or false to disable error handling
         * @param  int|false       $exceptionLevel a LogLevel::* constant, or false to disable exception handling
         * @param  int|false       $fatalLevel     a LogLevel::* constant, or false to disable fatal error handling
         * @return ErrorHandler
         */
        public static function register(\TEC\Common\Psr\Log\LoggerInterface $logger, $errorLevelMap = array(), $exceptionLevel = null, $fatalLevel = null)
        {
        }
        public function registerExceptionHandler($level = null, $callPrevious = true)
        {
        }
        public function registerErrorHandler(array $levelMap = array(), $callPrevious = true, $errorTypes = -1, $handleOnlyReportedErrors = true)
        {
        }
        public function registerFatalHandler($level = null, $reservedMemorySize = 20)
        {
        }
        protected function defaultErrorLevelMap()
        {
        }
        /**
         * @private
         */
        public function handleException($e)
        {
        }
        /**
         * @private
         */
        public function handleError($code, $message, $file = '', $line = 0, $context = array())
        {
        }
        /**
         * @private
         */
        public function handleFatalError()
        {
        }
    }
}
namespace TEC\Common\Monolog\Formatter {
    /**
     * Formats a log message according to the ChromePHP array format
     *
     * @author Christophe Coevoet <stof@notk.org>
     */
    class ChromePHPFormatter implements \TEC\Common\Monolog\Formatter\FormatterInterface
    {
        /**
         * {@inheritdoc}
         */
        public function format(array $record)
        {
        }
        public function formatBatch(array $records)
        {
        }
    }
    /**
     * Normalizes incoming records to remove objects/resources so it's easier to dump to various targets
     *
     * @author Jordi Boggiano <j.boggiano@seld.be>
     */
    class NormalizerFormatter implements \TEC\Common\Monolog\Formatter\FormatterInterface
    {
        const SIMPLE_DATE = "Y-m-d H:i:s";
        protected $dateFormat;
        /**
         * @param string $dateFormat The format of the timestamp: one supported by DateTime::format
         */
        public function __construct($dateFormat = null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function format(array $record)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function formatBatch(array $records)
        {
        }
        protected function normalize($data, $depth = 0)
        {
        }
        protected function normalizeException($e)
        {
        }
        /**
         * Return the JSON representation of a value
         *
         * @param  mixed             $data
         * @param  bool              $ignoreErrors
         * @throws \RuntimeException if encoding fails and errors are not ignored
         * @return string
         */
        protected function toJson($data, $ignoreErrors = false)
        {
        }
        /**
         * Detect invalid UTF-8 string characters and convert to valid UTF-8.
         *
         * Valid UTF-8 input will be left unmodified, but strings containing
         * invalid UTF-8 codepoints will be reencoded as UTF-8 with an assumed
         * original encoding of ISO-8859-15. This conversion may result in
         * incorrect output if the actual encoding was not ISO-8859-15, but it
         * will be clean UTF-8 output and will not rely on expensive and fragile
         * detection algorithms.
         *
         * Function converts the input in place in the passed variable so that it
         * can be used as a callback for array_walk_recursive.
         *
         * @param mixed &$data Input to check and convert if needed
         * @private
         */
        public function detectAndCleanUtf8(&$data)
        {
        }
    }
    /**
     * Format a log message into an Elastica Document
     *
     * @author Jelle Vink <jelle.vink@gmail.com>
     */
    class ElasticaFormatter extends \TEC\Common\Monolog\Formatter\NormalizerFormatter
    {
        /**
         * @var string Elastic search index name
         */
        protected $index;
        /**
         * @var string Elastic search document type
         */
        protected $type;
        /**
         * @param string $index Elastic Search index name
         * @param string $type  Elastic Search document type
         */
        public function __construct($index, $type)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function format(array $record)
        {
        }
        /**
         * Getter index
         * @return string
         */
        public function getIndex()
        {
        }
        /**
         * Getter type
         * @return string
         */
        public function getType()
        {
        }
        /**
         * Convert a log message into an Elastica Document
         *
         * @param  array    $record Log message
         * @return Document
         */
        protected function getDocument($record)
        {
        }
    }
    /**
     * formats the record to be used in the FlowdockHandler
     *
     * @author Dominik Liebler <liebler.dominik@gmail.com>
     */
    class FlowdockFormatter implements \TEC\Common\Monolog\Formatter\FormatterInterface
    {
        /**
         * @param string $source
         * @param string $sourceEmail
         */
        public function __construct($source, $sourceEmail)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function format(array $record)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function formatBatch(array $records)
        {
        }
        /**
         * @param string $message
         *
         * @return string
         */
        public function getShortMessage($message)
        {
        }
    }
    /**
     * Class FluentdFormatter
     *
     * Serializes a log message to Fluentd unix socket protocol
     *
     * Fluentd config:
     *
     * <source>
     *  type unix
     *  path /var/run/td-agent/td-agent.sock
     * </source>
     *
     * Monolog setup:
     *
     * $logger = new TEC\Common\Monolog\Logger('fluent.tag');
     * $fluentHandler = new TEC\Common\Monolog\Handler\SocketHandler('unix:///var/run/td-agent/td-agent.sock');
     * $fluentHandler->setFormatter(new TEC\Common\Monolog\Formatter\FluentdFormatter());
     * $logger->pushHandler($fluentHandler);
     *
     * @author Andrius Putna <fordnox@gmail.com>
     */
    class FluentdFormatter implements \TEC\Common\Monolog\Formatter\FormatterInterface
    {
        /**
         * @var bool $levelTag should message level be a part of the fluentd tag
         */
        protected $levelTag = false;
        public function __construct($levelTag = false)
        {
        }
        public function isUsingLevelsInTag()
        {
        }
        public function format(array $record)
        {
        }
        public function formatBatch(array $records)
        {
        }
    }
    /**
     * Serializes a log message to GELF
     * @see http://www.graylog2.org/about/gelf
     *
     * @author Matt Lehner <mlehner@gmail.com>
     */
    class GelfMessageFormatter extends \TEC\Common\Monolog\Formatter\NormalizerFormatter
    {
        const DEFAULT_MAX_LENGTH = 32766;
        /**
         * @var string the name of the system for the Gelf log message
         */
        protected $systemName;
        /**
         * @var string a prefix for 'extra' fields from the Monolog record (optional)
         */
        protected $extraPrefix;
        /**
         * @var string a prefix for 'context' fields from the Monolog record (optional)
         */
        protected $contextPrefix;
        /**
         * @var int max length per field
         */
        protected $maxLength;
        public function __construct($systemName = null, $extraPrefix = null, $contextPrefix = 'ctxt_', $maxLength = null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function format(array $record)
        {
        }
    }
    /**
     * Formats incoming records into an HTML table
     *
     * This is especially useful for html email logging
     *
     * @author Tiago Brito <tlfbrito@gmail.com>
     */
    class HtmlFormatter extends \TEC\Common\Monolog\Formatter\NormalizerFormatter
    {
        /**
         * Translates Monolog log levels to html color priorities.
         */
        protected $logLevels = array(\TEC\Common\Monolog\Logger::DEBUG => '#cccccc', \TEC\Common\Monolog\Logger::INFO => '#468847', \TEC\Common\Monolog\Logger::NOTICE => '#3a87ad', \TEC\Common\Monolog\Logger::WARNING => '#c09853', \TEC\Common\Monolog\Logger::ERROR => '#f0ad4e', \TEC\Common\Monolog\Logger::CRITICAL => '#FF7708', \TEC\Common\Monolog\Logger::ALERT => '#C12A19', \TEC\Common\Monolog\Logger::EMERGENCY => '#000000');
        /**
         * @param string $dateFormat The format of the timestamp: one supported by DateTime::format
         */
        public function __construct($dateFormat = null)
        {
        }
        /**
         * Creates an HTML table row
         *
         * @param  string $th       Row header content
         * @param  string $td       Row standard cell content
         * @param  bool   $escapeTd false if td content must not be html escaped
         * @return string
         */
        protected function addRow($th, $td = ' ', $escapeTd = true)
        {
        }
        /**
         * Create a HTML h1 tag
         *
         * @param  string $title Text to be in the h1
         * @param  int    $level Error level
         * @return string
         */
        protected function addTitle($title, $level)
        {
        }
        /**
         * Formats a log record.
         *
         * @param  array $record A record to format
         * @return mixed The formatted record
         */
        public function format(array $record)
        {
        }
        /**
         * Formats a set of log records.
         *
         * @param  array $records A set of records to format
         * @return mixed The formatted set of records
         */
        public function formatBatch(array $records)
        {
        }
        protected function convertToString($data)
        {
        }
    }
    /**
     * Encodes whatever record data is passed to it as json
     *
     * This can be useful to log to databases or remote APIs
     *
     * @author Jordi Boggiano <j.boggiano@seld.be>
     */
    class JsonFormatter extends \TEC\Common\Monolog\Formatter\NormalizerFormatter
    {
        const BATCH_MODE_JSON = 1;
        const BATCH_MODE_NEWLINES = 2;
        protected $batchMode;
        protected $appendNewline;
        /**
         * @var bool
         */
        protected $includeStacktraces = false;
        /**
         * @param int $batchMode
         * @param bool $appendNewline
         */
        public function __construct($batchMode = self::BATCH_MODE_JSON, $appendNewline = true)
        {
        }
        /**
         * The batch mode option configures the formatting style for
         * multiple records. By default, multiple records will be
         * formatted as a JSON-encoded array. However, for
         * compatibility with some API endpoints, alternative styles
         * are available.
         *
         * @return int
         */
        public function getBatchMode()
        {
        }
        /**
         * True if newlines are appended to every formatted record
         *
         * @return bool
         */
        public function isAppendingNewlines()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function format(array $record)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function formatBatch(array $records)
        {
        }
        /**
         * @param bool $include
         */
        public function includeStacktraces($include = true)
        {
        }
        /**
         * Return a JSON-encoded array of records.
         *
         * @param  array  $records
         * @return string
         */
        protected function formatBatchJson(array $records)
        {
        }
        /**
         * Use new lines to separate records instead of a
         * JSON-encoded array.
         *
         * @param  array  $records
         * @return string
         */
        protected function formatBatchNewlines(array $records)
        {
        }
        /**
         * Normalizes given $data.
         *
         * @param mixed $data
         *
         * @return mixed
         */
        protected function normalize($data, $depth = 0)
        {
        }
        /**
         * Normalizes given exception with or without its own stack trace based on
         * `includeStacktraces` property.
         *
         * @param Exception|Throwable $e
         *
         * @return array
         */
        protected function normalizeException($e)
        {
        }
    }
    /**
     * Formats incoming records into a one-line string
     *
     * This is especially useful for logging to files
     *
     * @author Jordi Boggiano <j.boggiano@seld.be>
     * @author Christophe Coevoet <stof@notk.org>
     */
    class LineFormatter extends \TEC\Common\Monolog\Formatter\NormalizerFormatter
    {
        const SIMPLE_FORMAT = "[%datetime%] %channel%.%level_name%: %message% %context% %extra%\n";
        protected $format;
        protected $allowInlineLineBreaks;
        protected $ignoreEmptyContextAndExtra;
        protected $includeStacktraces;
        /**
         * @param string $format                     The format of the message
         * @param string $dateFormat                 The format of the timestamp: one supported by DateTime::format
         * @param bool   $allowInlineLineBreaks      Whether to allow inline line breaks in log entries
         * @param bool   $ignoreEmptyContextAndExtra
         */
        public function __construct($format = null, $dateFormat = null, $allowInlineLineBreaks = false, $ignoreEmptyContextAndExtra = false)
        {
        }
        public function includeStacktraces($include = true)
        {
        }
        public function allowInlineLineBreaks($allow = true)
        {
        }
        public function ignoreEmptyContextAndExtra($ignore = true)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function format(array $record)
        {
        }
        public function formatBatch(array $records)
        {
        }
        public function stringify($value)
        {
        }
        protected function normalizeException($e)
        {
        }
        protected function convertToString($data)
        {
        }
        protected function replaceNewlines($str)
        {
        }
    }
    /**
     * Encodes message information into JSON in a format compatible with Loggly.
     *
     * @author Adam Pancutt <adam@pancutt.com>
     */
    class LogglyFormatter extends \TEC\Common\Monolog\Formatter\JsonFormatter
    {
        /**
         * Overrides the default batch mode to new lines for compatibility with the
         * Loggly bulk API.
         *
         * @param int $batchMode
         */
        public function __construct($batchMode = self::BATCH_MODE_NEWLINES, $appendNewline = false)
        {
        }
        /**
         * Appends the 'timestamp' parameter for indexing by Loggly.
         *
         * @see https://www.loggly.com/docs/automated-parsing/#json
         * @see \TEC\Common\Monolog\Formatter\JsonFormatter::format()
         */
        public function format(array $record)
        {
        }
    }
    /**
     * Serializes a log message to Logstash Event Format
     *
     * @see http://logstash.net/
     * @see https://github.com/logstash/logstash/blob/master/lib/logstash/event.rb
     *
     * @author Tim Mower <timothy.mower@gmail.com>
     */
    class LogstashFormatter extends \TEC\Common\Monolog\Formatter\NormalizerFormatter
    {
        const V0 = 0;
        const V1 = 1;
        /**
         * @var string the name of the system for the Logstash log message, used to fill the @source field
         */
        protected $systemName;
        /**
         * @var string an application name for the Logstash log message, used to fill the @type field
         */
        protected $applicationName;
        /**
         * @var string a prefix for 'extra' fields from the Monolog record (optional)
         */
        protected $extraPrefix;
        /**
         * @var string a prefix for 'context' fields from the Monolog record (optional)
         */
        protected $contextPrefix;
        /**
         * @var int logstash format version to use
         */
        protected $version;
        /**
         * @param string $applicationName the application that sends the data, used as the "type" field of logstash
         * @param string $systemName      the system/machine name, used as the "source" field of logstash, defaults to the hostname of the machine
         * @param string $extraPrefix     prefix for extra keys inside logstash "fields"
         * @param string $contextPrefix   prefix for context keys inside logstash "fields", defaults to ctxt_
         * @param int    $version         the logstash format version to use, defaults to 0
         */
        public function __construct($applicationName, $systemName = null, $extraPrefix = null, $contextPrefix = 'ctxt_', $version = self::V0)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function format(array $record)
        {
        }
        protected function formatV0(array $record)
        {
        }
        protected function formatV1(array $record)
        {
        }
    }
    /**
     * Formats a record for use with the MongoDBHandler.
     *
     * @author Florian Plattner <me@florianplattner.de>
     */
    class MongoDBFormatter implements \TEC\Common\Monolog\Formatter\FormatterInterface
    {
        /**
         * @param int  $maxNestingLevel        0 means infinite nesting, the $record itself is level 1, $record['context'] is 2
         * @param bool $exceptionTraceAsString set to false to log exception traces as a sub documents instead of strings
         */
        public function __construct($maxNestingLevel = 3, $exceptionTraceAsString = true)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function format(array $record)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function formatBatch(array $records)
        {
        }
        protected function formatArray(array $record, $nestingLevel = 0)
        {
        }
        protected function formatObject($value, $nestingLevel)
        {
        }
        protected function formatException(\Exception $exception, $nestingLevel)
        {
        }
        protected function formatDate(\DateTime $value, $nestingLevel)
        {
        }
    }
    /**
     * Formats data into an associative array of scalar values.
     * Objects and arrays will be JSON encoded.
     *
     * @author Andrew Lawson <adlawson@gmail.com>
     */
    class ScalarFormatter extends \TEC\Common\Monolog\Formatter\NormalizerFormatter
    {
        /**
         * {@inheritdoc}
         */
        public function format(array $record)
        {
        }
        /**
         * @param  mixed $value
         * @return mixed
         */
        protected function normalizeValue($value)
        {
        }
    }
    /**
     * Serializes a log message according to Wildfire's header requirements
     *
     * @author Eric Clemmons (@ericclemmons) <eric@uxdriven.com>
     * @author Christophe Coevoet <stof@notk.org>
     * @author Kirill chEbba Chebunin <iam@chebba.org>
     */
    class WildfireFormatter extends \TEC\Common\Monolog\Formatter\NormalizerFormatter
    {
        const TABLE = 'table';
        /**
         * {@inheritdoc}
         */
        public function format(array $record)
        {
        }
        public function formatBatch(array $records)
        {
        }
        protected function normalize($data, $depth = 0)
        {
        }
    }
}
namespace TEC\Common\Monolog\Handler {
    /**
     * Interface that all Monolog Handlers must implement
     *
     * @author Jordi Boggiano <j.boggiano@seld.be>
     */
    interface HandlerInterface
    {
        /**
         * Checks whether the given record will be handled by this handler.
         *
         * This is mostly done for performance reasons, to avoid calling processors for nothing.
         *
         * Handlers should still check the record levels within handle(), returning false in isHandling()
         * is no guarantee that handle() will not be called, and isHandling() might not be called
         * for a given record.
         *
         * @param array $record Partial log record containing only a level key
         *
         * @return bool
         */
        public function isHandling(array $record);
        /**
         * Handles a record.
         *
         * All records may be passed to this method, and the handler should discard
         * those that it does not want to handle.
         *
         * The return value of this function controls the bubbling process of the handler stack.
         * Unless the bubbling is interrupted (by returning true), the Logger class will keep on
         * calling further handlers in the stack with a given log record.
         *
         * @param  array   $record The record to handle
         * @return bool true means that this handler handled the record, and that bubbling is not permitted.
         *                        false means the record was either not processed or that this handler allows bubbling.
         */
        public function handle(array $record);
        /**
         * Handles a set of records at once.
         *
         * @param array $records The records to handle (an array of record arrays)
         */
        public function handleBatch(array $records);
        /**
         * Adds a processor in the stack.
         *
         * @param  callable $callback
         * @return self
         */
        public function pushProcessor($callback);
        /**
         * Removes the processor on top of the stack and returns it.
         *
         * @return callable
         */
        public function popProcessor();
        /**
         * Sets the formatter.
         *
         * @param  FormatterInterface $formatter
         * @return self
         */
        public function setFormatter(\TEC\Common\Monolog\Formatter\FormatterInterface $formatter);
        /**
         * Gets the formatter.
         *
         * @return FormatterInterface
         */
        public function getFormatter();
    }
    /**
     * Base Handler class providing the Handler structure
     *
     * @author Jordi Boggiano <j.boggiano@seld.be>
     */
    abstract class AbstractHandler implements \TEC\Common\Monolog\Handler\HandlerInterface, \TEC\Common\Monolog\ResettableInterface
    {
        protected $level = \TEC\Common\Monolog\Logger::DEBUG;
        protected $bubble = true;
        /**
         * @var FormatterInterface
         */
        protected $formatter;
        protected $processors = array();
        /**
         * @param int  $level  The minimum logging level at which this handler will be triggered
         * @param bool $bubble Whether the messages that are handled can bubble up the stack or not
         */
        public function __construct($level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function isHandling(array $record)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function handleBatch(array $records)
        {
        }
        /**
         * Closes the handler.
         *
         * This will be called automatically when the object is destroyed
         */
        public function close()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function pushProcessor($callback)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function popProcessor()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setFormatter(\TEC\Common\Monolog\Formatter\FormatterInterface $formatter)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getFormatter()
        {
        }
        /**
         * Sets minimum logging level at which this handler will be triggered.
         *
         * @param  int|string $level Level or level name
         * @return self
         */
        public function setLevel($level)
        {
        }
        /**
         * Gets minimum logging level at which this handler will be triggered.
         *
         * @return int
         */
        public function getLevel()
        {
        }
        /**
         * Sets the bubbling behavior.
         *
         * @param  bool $bubble true means that this handler allows bubbling.
         *                      false means that bubbling is not permitted.
         * @return self
         */
        public function setBubble($bubble)
        {
        }
        /**
         * Gets the bubbling behavior.
         *
         * @return bool true means that this handler allows bubbling.
         *              false means that bubbling is not permitted.
         */
        public function getBubble()
        {
        }
        public function __destruct()
        {
        }
        public function reset()
        {
        }
        /**
         * Gets the default formatter.
         *
         * @return FormatterInterface
         */
        protected function getDefaultFormatter()
        {
        }
    }
    /**
     * Base Handler class providing the Handler structure
     *
     * Classes extending it should (in most cases) only implement write($record)
     *
     * @author Jordi Boggiano <j.boggiano@seld.be>
     * @author Christophe Coevoet <stof@notk.org>
     */
    abstract class AbstractProcessingHandler extends \TEC\Common\Monolog\Handler\AbstractHandler
    {
        /**
         * {@inheritdoc}
         */
        public function handle(array $record)
        {
        }
        /**
         * Writes the record down to the log of the implementing handler
         *
         * @param  array $record
         * @return void
         */
        protected abstract function write(array $record);
        /**
         * Processes a record.
         *
         * @param  array $record
         * @return array
         */
        protected function processRecord(array $record)
        {
        }
    }
    /**
     * Common syslog functionality
     */
    abstract class AbstractSyslogHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        protected $facility;
        /**
         * Translates Monolog log levels to syslog log priorities.
         */
        protected $logLevels = array(\TEC\Common\Monolog\Logger::DEBUG => LOG_DEBUG, \TEC\Common\Monolog\Logger::INFO => LOG_INFO, \TEC\Common\Monolog\Logger::NOTICE => LOG_NOTICE, \TEC\Common\Monolog\Logger::WARNING => LOG_WARNING, \TEC\Common\Monolog\Logger::ERROR => LOG_ERR, \TEC\Common\Monolog\Logger::CRITICAL => LOG_CRIT, \TEC\Common\Monolog\Logger::ALERT => LOG_ALERT, \TEC\Common\Monolog\Logger::EMERGENCY => LOG_EMERG);
        /**
         * List of valid log facility names.
         */
        protected $facilities = array('auth' => LOG_AUTH, 'authpriv' => LOG_AUTHPRIV, 'cron' => LOG_CRON, 'daemon' => LOG_DAEMON, 'kern' => LOG_KERN, 'lpr' => LOG_LPR, 'mail' => LOG_MAIL, 'news' => LOG_NEWS, 'syslog' => LOG_SYSLOG, 'user' => LOG_USER, 'uucp' => LOG_UUCP);
        /**
         * @param mixed $facility
         * @param int   $level The minimum logging level at which this handler will be triggered
         * @param bool  $bubble Whether the messages that are handled can bubble up the stack or not
         */
        public function __construct($facility = LOG_USER, $level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true)
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function getDefaultFormatter()
        {
        }
    }
    class AmqpHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        /**
         * @var AMQPExchange|AMQPChannel $exchange
         */
        protected $exchange;
        /**
         * @var string
         */
        protected $exchangeName;
        /**
         * @param AMQPExchange|AMQPChannel $exchange     AMQPExchange (php AMQP ext) or PHP AMQP lib channel, ready for use
         * @param string                   $exchangeName
         * @param int                      $level
         * @param bool                     $bubble       Whether the messages that are handled can bubble up the stack or not
         */
        public function __construct($exchange, $exchangeName = 'log', $level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function write(array $record)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function handleBatch(array $records)
        {
        }
        /**
         * Gets the routing key for the AMQP exchange
         *
         * @param  array  $record
         * @return string
         */
        protected function getRoutingKey(array $record)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function getDefaultFormatter()
        {
        }
    }
    /**
     * Handler sending logs to browser's javascript console with no browser extension required
     *
     * @author Olivier Poitrey <rs@dailymotion.com>
     */
    class BrowserConsoleHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        protected static $initialized = false;
        protected static $records = array();
        /**
         * {@inheritDoc}
         *
         * Formatted output may contain some formatting markers to be transferred to `console.log` using the %c format.
         *
         * Example of formatted string:
         *
         *     You can do [[blue text]]{color: blue} or [[green background]]{background-color: green; color: white}
         */
        protected function getDefaultFormatter()
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function write(array $record)
        {
        }
        /**
         * Convert records to javascript console commands and send it to the browser.
         * This method is automatically called on PHP shutdown if output is HTML or Javascript.
         */
        public static function send()
        {
        }
        public function close()
        {
        }
        public function reset()
        {
        }
        /**
         * Forget all logged records
         */
        public static function resetStatic()
        {
        }
        /**
         * Wrapper for register_shutdown_function to allow overriding
         */
        protected function registerShutdownFunction()
        {
        }
        /**
         * Wrapper for echo to allow overriding
         *
         * @param string $str
         */
        protected static function writeOutput($str)
        {
        }
        /**
         * Checks the format of the response
         *
         * If Content-Type is set to application/javascript or text/javascript -> js
         * If Content-Type is set to text/html, or is unset -> html
         * If Content-Type is anything else -> unknown
         *
         * @return string One of 'js', 'html' or 'unknown'
         */
        protected static function getResponseFormat()
        {
        }
    }
    /**
     * Buffers all records until closing the handler and then pass them as batch.
     *
     * This is useful for a MailHandler to send only one mail per request instead of
     * sending one per log message.
     *
     * @author Christophe Coevoet <stof@notk.org>
     */
    class BufferHandler extends \TEC\Common\Monolog\Handler\AbstractHandler
    {
        protected $handler;
        protected $bufferSize = 0;
        protected $bufferLimit;
        protected $flushOnOverflow;
        protected $buffer = array();
        protected $initialized = false;
        /**
         * @param HandlerInterface $handler         Handler.
         * @param int              $bufferLimit     How many entries should be buffered at most, beyond that the oldest items are removed from the buffer.
         * @param int              $level           The minimum logging level at which this handler will be triggered
         * @param bool             $bubble          Whether the messages that are handled can bubble up the stack or not
         * @param bool             $flushOnOverflow If true, the buffer is flushed when the max size has been reached, by default oldest entries are discarded
         */
        public function __construct(\TEC\Common\Monolog\Handler\HandlerInterface $handler, $bufferLimit = 0, $level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true, $flushOnOverflow = false)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function handle(array $record)
        {
        }
        public function flush()
        {
        }
        public function __destruct()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function close()
        {
        }
        /**
         * Clears the buffer without flushing any messages down to the wrapped handler.
         */
        public function clear()
        {
        }
        public function reset()
        {
        }
    }
    /**
     * Handler sending logs to the ChromePHP extension (http://www.chromephp.com/)
     *
     * This also works out of the box with Firefox 43+
     *
     * @author Christophe Coevoet <stof@notk.org>
     */
    class ChromePHPHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        /**
         * Version of the extension
         */
        const VERSION = '4.0';
        /**
         * Header name
         */
        const HEADER_NAME = 'X-ChromeLogger-Data';
        /**
         * Regular expression to detect supported browsers (matches any Chrome, or Firefox 43+)
         */
        const USER_AGENT_REGEX = '{\\b(?:Chrome/\\d+(?:\\.\\d+)*|HeadlessChrome|Firefox/(?:4[3-9]|[5-9]\\d|\\d{3,})(?:\\.\\d)*)\\b}';
        protected static $initialized = false;
        /**
         * Tracks whether we sent too much data
         *
         * Chrome limits the headers to 256KB, so when we sent 240KB we stop sending
         *
         * @var bool
         */
        protected static $overflowed = false;
        protected static $json = array('version' => self::VERSION, 'columns' => array('label', 'log', 'backtrace', 'type'), 'rows' => array());
        protected static $sendHeaders = true;
        /**
         * @param int  $level  The minimum logging level at which this handler will be triggered
         * @param bool $bubble Whether the messages that are handled can bubble up the stack or not
         */
        public function __construct($level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function handleBatch(array $records)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function getDefaultFormatter()
        {
        }
        /**
         * Creates & sends header for a record
         *
         * @see sendHeader()
         * @see send()
         * @param array $record
         */
        protected function write(array $record)
        {
        }
        /**
         * Sends the log header
         *
         * @see sendHeader()
         */
        protected function send()
        {
        }
        /**
         * Send header string to the client
         *
         * @param string $header
         * @param string $content
         */
        protected function sendHeader($header, $content)
        {
        }
        /**
         * Verifies if the headers are accepted by the current user agent
         *
         * @return bool
         */
        protected function headersAccepted()
        {
        }
        /**
         * BC getter for the sendHeaders property that has been made static
         */
        public function __get($property)
        {
        }
        /**
         * BC setter for the sendHeaders property that has been made static
         */
        public function __set($property, $value)
        {
        }
    }
    /**
     * CouchDB handler
     *
     * @author Markus Bachmann <markus.bachmann@bachi.biz>
     */
    class CouchDBHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        public function __construct(array $options = array(), $level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function write(array $record)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function getDefaultFormatter()
        {
        }
    }
    /**
     * Logs to Cube.
     *
     * @link http://square.github.com/cube/
     * @author Wan Chen <kami@kamisama.me>
     */
    class CubeHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        /**
         * Create a Cube handler
         *
         * @throws \UnexpectedValueException when given url is not a valid url.
         *                                   A valid url must consist of three parts : protocol://host:port
         *                                   Only valid protocols used by Cube are http and udp
         */
        public function __construct($url, $level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true)
        {
        }
        /**
         * Establish a connection to an UDP socket
         *
         * @throws \LogicException           when unable to connect to the socket
         * @throws MissingExtensionException when there is no socket extension
         */
        protected function connectUdp()
        {
        }
        /**
         * Establish a connection to a http server
         * @throws \LogicException when no curl extension
         */
        protected function connectHttp()
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function write(array $record)
        {
        }
    }
}
namespace TEC\Common\Monolog\Handler\Curl {
    class Util
    {
        /**
         * Executes a CURL request with optional retries and exception on failure
         *
         * @param  resource          $ch curl handler
         * @throws \RuntimeException
         */
        public static function execute($ch, $retries = 5, $closeAfterDone = true)
        {
        }
    }
}
namespace TEC\Common\Monolog\Handler {
    /**
     * Simple handler wrapper that deduplicates log records across multiple requests
     *
     * It also includes the BufferHandler functionality and will buffer
     * all messages until the end of the request or flush() is called.
     *
     * This works by storing all log records' messages above $deduplicationLevel
     * to the file specified by $deduplicationStore. When further logs come in at the end of the
     * request (or when flush() is called), all those above $deduplicationLevel are checked
     * against the existing stored logs. If they match and the timestamps in the stored log is
     * not older than $time seconds, the new log record is discarded. If no log record is new, the
     * whole data set is discarded.
     *
     * This is mainly useful in combination with Mail handlers or things like Slack or HipChat handlers
     * that send messages to people, to avoid spamming with the same message over and over in case of
     * a major component failure like a database server being down which makes all requests fail in the
     * same way.
     *
     * @author Jordi Boggiano <j.boggiano@seld.be>
     */
    class DeduplicationHandler extends \TEC\Common\Monolog\Handler\BufferHandler
    {
        /**
         * @var string
         */
        protected $deduplicationStore;
        /**
         * @var int
         */
        protected $deduplicationLevel;
        /**
         * @var int
         */
        protected $time;
        /**
         * @param HandlerInterface $handler            Handler.
         * @param string           $deduplicationStore The file/path where the deduplication log should be kept
         * @param int              $deduplicationLevel The minimum logging level for log records to be looked at for deduplication purposes
         * @param int              $time               The period (in seconds) during which duplicate entries should be suppressed after a given log is sent through
         * @param bool             $bubble             Whether the messages that are handled can bubble up the stack or not
         */
        public function __construct(\TEC\Common\Monolog\Handler\HandlerInterface $handler, $deduplicationStore = null, $deduplicationLevel = \TEC\Common\Monolog\Logger::ERROR, $time = 60, $bubble = true)
        {
        }
        public function flush()
        {
        }
    }
    /**
     * CouchDB handler for Doctrine CouchDB ODM
     *
     * @author Markus Bachmann <markus.bachmann@bachi.biz>
     */
    class DoctrineCouchDBHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        public function __construct(\Doctrine\CouchDB\CouchDBClient $client, $level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function write(array $record)
        {
        }
        protected function getDefaultFormatter()
        {
        }
    }
    /**
     * Amazon DynamoDB handler (http://aws.amazon.com/dynamodb/)
     *
     * @link https://github.com/aws/aws-sdk-php/
     * @author Andrew Lawson <adlawson@gmail.com>
     */
    class DynamoDbHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        const DATE_FORMAT = 'Y-m-d\\TH:i:s.uO';
        /**
         * @var DynamoDbClient
         */
        protected $client;
        /**
         * @var string
         */
        protected $table;
        /**
         * @var int
         */
        protected $version;
        /**
         * @var Marshaler
         */
        protected $marshaler;
        /**
         * @param DynamoDbClient $client
         * @param string         $table
         * @param int            $level
         * @param bool           $bubble
         */
        public function __construct(\Aws\DynamoDb\DynamoDbClient $client, $table, $level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true)
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function write(array $record)
        {
        }
        /**
         * @param  array $record
         * @return array
         */
        protected function filterEmptyFields(array $record)
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function getDefaultFormatter()
        {
        }
    }
    /**
     * Elastic Search handler
     *
     * Usage example:
     *
     *    $client = new \Elastica\Client();
     *    $options = array(
     *        'index' => 'elastic_index_name',
     *        'type' => 'elastic_doc_type',
     *    );
     *    $handler = new ElasticSearchHandler($client, $options);
     *    $log = new Logger('application');
     *    $log->pushHandler($handler);
     *
     * @author Jelle Vink <jelle.vink@gmail.com>
     */
    class ElasticSearchHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        /**
         * @var Client
         */
        protected $client;
        /**
         * @var array Handler config options
         */
        protected $options = array();
        /**
         * @param Client $client  Elastica Client object
         * @param array  $options Handler configuration
         * @param int    $level   The minimum logging level at which this handler will be triggered
         * @param bool   $bubble  Whether the messages that are handled can bubble up the stack or not
         */
        public function __construct(\Elastica\Client $client, array $options = array(), $level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function write(array $record)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setFormatter(\TEC\Common\Monolog\Formatter\FormatterInterface $formatter)
        {
        }
        /**
         * Getter options
         * @return array
         */
        public function getOptions()
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function getDefaultFormatter()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function handleBatch(array $records)
        {
        }
        /**
         * Use Elasticsearch bulk API to send list of documents
         * @param  array             $documents
         * @throws \RuntimeException
         */
        protected function bulkSend(array $documents)
        {
        }
    }
    /**
     * Stores to PHP error_log() handler.
     *
     * @author Elan Ruusamäe <glen@delfi.ee>
     */
    class ErrorLogHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        const OPERATING_SYSTEM = 0;
        const SAPI = 4;
        protected $messageType;
        protected $expandNewlines;
        /**
         * @param int  $messageType    Says where the error should go.
         * @param int  $level          The minimum logging level at which this handler will be triggered
         * @param bool $bubble         Whether the messages that are handled can bubble up the stack or not
         * @param bool $expandNewlines If set to true, newlines in the message will be expanded to be take multiple log entries
         */
        public function __construct($messageType = self::OPERATING_SYSTEM, $level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true, $expandNewlines = false)
        {
        }
        /**
         * @return array With all available types
         */
        public static function getAvailableTypes()
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function getDefaultFormatter()
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function write(array $record)
        {
        }
    }
    /**
     * Simple handler wrapper that filters records based on a list of levels
     *
     * It can be configured with an exact list of levels to allow, or a min/max level.
     *
     * @author Hennadiy Verkh
     * @author Jordi Boggiano <j.boggiano@seld.be>
     */
    class FilterHandler extends \TEC\Common\Monolog\Handler\AbstractHandler
    {
        /**
         * Handler or factory callable($record, $this)
         *
         * @var callable|\TEC\Common\Monolog\Handler\HandlerInterface
         */
        protected $handler;
        /**
         * Minimum level for logs that are passed to handler
         *
         * @var int[]
         */
        protected $acceptedLevels;
        /**
         * Whether the messages that are handled can bubble up the stack or not
         *
         * @var bool
         */
        protected $bubble;
        /**
         * @param callable|HandlerInterface $handler        Handler or factory callable($record, $this).
         * @param int|array                 $minLevelOrList A list of levels to accept or a minimum level if maxLevel is provided
         * @param int                       $maxLevel       Maximum level to accept, only used if $minLevelOrList is not an array
         * @param bool                      $bubble         Whether the messages that are handled can bubble up the stack or not
         */
        public function __construct($handler, $minLevelOrList = \TEC\Common\Monolog\Logger::DEBUG, $maxLevel = \TEC\Common\Monolog\Logger::EMERGENCY, $bubble = true)
        {
        }
        /**
         * @return array
         */
        public function getAcceptedLevels()
        {
        }
        /**
         * @param int|string|array $minLevelOrList A list of levels to accept or a minimum level or level name if maxLevel is provided
         * @param int|string       $maxLevel       Maximum level or level name to accept, only used if $minLevelOrList is not an array
         */
        public function setAcceptedLevels($minLevelOrList = \TEC\Common\Monolog\Logger::DEBUG, $maxLevel = \TEC\Common\Monolog\Logger::EMERGENCY)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function isHandling(array $record)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function handle(array $record)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function handleBatch(array $records)
        {
        }
    }
}
namespace TEC\Common\Monolog\Handler\FingersCrossed {
    /**
     * Interface for activation strategies for the FingersCrossedHandler.
     *
     * @author Johannes M. Schmitt <schmittjoh@gmail.com>
     */
    interface ActivationStrategyInterface
    {
        /**
         * Returns whether the given record activates the handler.
         *
         * @param  array   $record
         * @return bool
         */
        public function isHandlerActivated(array $record);
    }
    /**
     * Channel and Error level based monolog activation strategy. Allows to trigger activation
     * based on level per channel. e.g. trigger activation on level 'ERROR' by default, except
     * for records of the 'sql' channel; those should trigger activation on level 'WARN'.
     *
     * Example:
     *
     * <code>
     *   $activationStrategy = new ChannelLevelActivationStrategy(
     *       Logger::CRITICAL,
     *       array(
     *           'request' => Logger::ALERT,
     *           'sensitive' => Logger::ERROR,
     *       )
     *   );
     *   $handler = new FingersCrossedHandler(new StreamHandler('php://stderr'), $activationStrategy);
     * </code>
     *
     * @author Mike Meessen <netmikey@gmail.com>
     */
    class ChannelLevelActivationStrategy implements \TEC\Common\Monolog\Handler\FingersCrossed\ActivationStrategyInterface
    {
        /**
         * @param int   $defaultActionLevel   The default action level to be used if the record's category doesn't match any
         * @param array $channelToActionLevel An array that maps channel names to action levels.
         */
        public function __construct($defaultActionLevel, $channelToActionLevel = array())
        {
        }
        public function isHandlerActivated(array $record)
        {
        }
    }
    /**
     * Error level based activation strategy.
     *
     * @author Johannes M. Schmitt <schmittjoh@gmail.com>
     */
    class ErrorLevelActivationStrategy implements \TEC\Common\Monolog\Handler\FingersCrossed\ActivationStrategyInterface
    {
        public function __construct($actionLevel)
        {
        }
        public function isHandlerActivated(array $record)
        {
        }
    }
}
namespace TEC\Common\Monolog\Handler {
    /**
     * Buffers all records until a certain level is reached
     *
     * The advantage of this approach is that you don't get any clutter in your log files.
     * Only requests which actually trigger an error (or whatever your actionLevel is) will be
     * in the logs, but they will contain all records, not only those above the level threshold.
     *
     * You can find the various activation strategies in the
     * Monolog\Handler\FingersCrossed\ namespace.
     *
     * @author Jordi Boggiano <j.boggiano@seld.be>
     */
    class FingersCrossedHandler extends \TEC\Common\Monolog\Handler\AbstractHandler
    {
        protected $handler;
        protected $activationStrategy;
        protected $buffering = true;
        protected $bufferSize;
        protected $buffer = array();
        protected $stopBuffering;
        protected $passthruLevel;
        /**
         * @param callable|HandlerInterface       $handler            Handler or factory callable($record, $fingersCrossedHandler).
         * @param int|ActivationStrategyInterface $activationStrategy Strategy which determines when this handler takes action
         * @param int                             $bufferSize         How many entries should be buffered at most, beyond that the oldest items are removed from the buffer.
         * @param bool                            $bubble             Whether the messages that are handled can bubble up the stack or not
         * @param bool                            $stopBuffering      Whether the handler should stop buffering after being triggered (default true)
         * @param int                             $passthruLevel      Minimum level to always flush to handler on close, even if strategy not triggered
         */
        public function __construct($handler, $activationStrategy = null, $bufferSize = 0, $bubble = true, $stopBuffering = true, $passthruLevel = null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function isHandling(array $record)
        {
        }
        /**
         * Manually activate this logger regardless of the activation strategy
         */
        public function activate()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function handle(array $record)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function close()
        {
        }
        public function reset()
        {
        }
        /**
         * Clears the buffer without flushing any messages down to the wrapped handler.
         *
         * It also resets the handler to its initial buffering state.
         */
        public function clear()
        {
        }
    }
    /**
     * Simple FirePHP Handler (http://www.firephp.org/), which uses the Wildfire protocol.
     *
     * @author Eric Clemmons (@ericclemmons) <eric@uxdriven.com>
     */
    class FirePHPHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        /**
         * WildFire JSON header message format
         */
        const PROTOCOL_URI = 'http://meta.wildfirehq.org/Protocol/JsonStream/0.2';
        /**
         * FirePHP structure for parsing messages & their presentation
         */
        const STRUCTURE_URI = 'http://meta.firephp.org/Wildfire/Structure/FirePHP/FirebugConsole/0.1';
        /**
         * Must reference a "known" plugin, otherwise headers won't display in FirePHP
         */
        const PLUGIN_URI = 'http://meta.firephp.org/Wildfire/Plugin/FirePHP/Library-FirePHPCore/0.3';
        /**
         * Header prefix for Wildfire to recognize & parse headers
         */
        const HEADER_PREFIX = 'X-Wf';
        /**
         * Whether or not Wildfire vendor-specific headers have been generated & sent yet
         */
        protected static $initialized = false;
        /**
         * Shared static message index between potentially multiple handlers
         * @var int
         */
        protected static $messageIndex = 1;
        protected static $sendHeaders = true;
        /**
         * Base header creation function used by init headers & record headers
         *
         * @param  array  $meta    Wildfire Plugin, Protocol & Structure Indexes
         * @param  string $message Log message
         * @return array  Complete header string ready for the client as key and message as value
         */
        protected function createHeader(array $meta, $message)
        {
        }
        /**
         * Creates message header from record
         *
         * @see createHeader()
         * @param  array  $record
         * @return string
         */
        protected function createRecordHeader(array $record)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function getDefaultFormatter()
        {
        }
        /**
         * Wildfire initialization headers to enable message parsing
         *
         * @see createHeader()
         * @see sendHeader()
         * @return array
         */
        protected function getInitHeaders()
        {
        }
        /**
         * Send header string to the client
         *
         * @param string $header
         * @param string $content
         */
        protected function sendHeader($header, $content)
        {
        }
        /**
         * Creates & sends header for a record, ensuring init headers have been sent prior
         *
         * @see sendHeader()
         * @see sendInitHeaders()
         * @param array $record
         */
        protected function write(array $record)
        {
        }
        /**
         * Verifies if the headers are accepted by the current user agent
         *
         * @return bool
         */
        protected function headersAccepted()
        {
        }
        /**
         * BC getter for the sendHeaders property that has been made static
         */
        public function __get($property)
        {
        }
        /**
         * BC setter for the sendHeaders property that has been made static
         */
        public function __set($property, $value)
        {
        }
    }
    /**
     * Stores to any socket - uses fsockopen() or pfsockopen().
     *
     * @author Pablo de Leon Belloc <pablolb@gmail.com>
     * @see    http://php.net/manual/en/function.fsockopen.php
     */
    class SocketHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        /**
         * @param string $connectionString Socket connection string
         * @param int    $level            The minimum logging level at which this handler will be triggered
         * @param bool   $bubble           Whether the messages that are handled can bubble up the stack or not
         */
        public function __construct($connectionString, $level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true)
        {
        }
        /**
         * Connect (if necessary) and write to the socket
         *
         * @param array $record
         *
         * @throws \UnexpectedValueException
         * @throws \RuntimeException
         */
        protected function write(array $record)
        {
        }
        /**
         * We will not close a PersistentSocket instance so it can be reused in other requests.
         */
        public function close()
        {
        }
        /**
         * Close socket, if open
         */
        public function closeSocket()
        {
        }
        /**
         * Set socket connection to nbe persistent. It only has effect before the connection is initiated.
         *
         * @param bool $persistent
         */
        public function setPersistent($persistent)
        {
        }
        /**
         * Set connection timeout.  Only has effect before we connect.
         *
         * @param float $seconds
         *
         * @see http://php.net/manual/en/function.fsockopen.php
         */
        public function setConnectionTimeout($seconds)
        {
        }
        /**
         * Set write timeout. Only has effect before we connect.
         *
         * @param float $seconds
         *
         * @see http://php.net/manual/en/function.stream-set-timeout.php
         */
        public function setTimeout($seconds)
        {
        }
        /**
         * Set writing timeout. Only has effect during connection in the writing cycle.
         *
         * @param float $seconds 0 for no timeout
         */
        public function setWritingTimeout($seconds)
        {
        }
        /**
         * Set chunk size. Only has effect during connection in the writing cycle.
         *
         * @param float $bytes
         */
        public function setChunkSize($bytes)
        {
        }
        /**
         * Get current connection string
         *
         * @return string
         */
        public function getConnectionString()
        {
        }
        /**
         * Get persistent setting
         *
         * @return bool
         */
        public function isPersistent()
        {
        }
        /**
         * Get current connection timeout setting
         *
         * @return float
         */
        public function getConnectionTimeout()
        {
        }
        /**
         * Get current in-transfer timeout
         *
         * @return float
         */
        public function getTimeout()
        {
        }
        /**
         * Get current local writing timeout
         *
         * @return float
         */
        public function getWritingTimeout()
        {
        }
        /**
         * Get current chunk size
         *
         * @return float
         */
        public function getChunkSize()
        {
        }
        /**
         * Check to see if the socket is currently available.
         *
         * UDP might appear to be connected but might fail when writing.  See http://php.net/fsockopen for details.
         *
         * @return bool
         */
        public function isConnected()
        {
        }
        /**
         * Wrapper to allow mocking
         */
        protected function pfsockopen()
        {
        }
        /**
         * Wrapper to allow mocking
         */
        protected function fsockopen()
        {
        }
        /**
         * Wrapper to allow mocking
         *
         * @see http://php.net/manual/en/function.stream-set-timeout.php
         */
        protected function streamSetTimeout()
        {
        }
        /**
         * Wrapper to allow mocking
         *
         * @see http://php.net/manual/en/function.stream-set-chunk-size.php
         */
        protected function streamSetChunkSize()
        {
        }
        /**
         * Wrapper to allow mocking
         */
        protected function fwrite($data)
        {
        }
        /**
         * Wrapper to allow mocking
         */
        protected function streamGetMetadata()
        {
        }
        protected function generateDataStream($record)
        {
        }
        /**
         * @return resource|null
         */
        protected function getResource()
        {
        }
    }
    /**
     * Sends logs to Fleep.io using Webhook integrations
     *
     * You'll need a Fleep.io account to use this handler.
     *
     * @see https://fleep.io/integrations/webhooks/ Fleep Webhooks Documentation
     * @author Ando Roots <ando@sqroot.eu>
     */
    class FleepHookHandler extends \TEC\Common\Monolog\Handler\SocketHandler
    {
        const FLEEP_HOST = 'fleep.io';
        const FLEEP_HOOK_URI = '/hook/';
        /**
         * @var string Webhook token (specifies the conversation where logs are sent)
         */
        protected $token;
        /**
         * Construct a new Fleep.io Handler.
         *
         * For instructions on how to create a new web hook in your conversations
         * see https://fleep.io/integrations/webhooks/
         *
         * @param  string                    $token  Webhook token
         * @param  bool|int                  $level  The minimum logging level at which this handler will be triggered
         * @param  bool                      $bubble Whether the messages that are handled can bubble up the stack or not
         * @throws MissingExtensionException
         */
        public function __construct($token, $level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true)
        {
        }
        /**
         * Returns the default formatter to use with this handler
         *
         * Overloaded to remove empty context and extra arrays from the end of the log message.
         *
         * @return LineFormatter
         */
        protected function getDefaultFormatter()
        {
        }
        /**
         * Handles a log record
         *
         * @param array $record
         */
        public function write(array $record)
        {
        }
        /**
         * {@inheritdoc}
         *
         * @param  array  $record
         * @return string
         */
        protected function generateDataStream($record)
        {
        }
    }
    /**
     * Sends notifications through the Flowdock push API
     *
     * This must be configured with a FlowdockFormatter instance via setFormatter()
     *
     * Notes:
     * API token - Flowdock API token
     *
     * @author Dominik Liebler <liebler.dominik@gmail.com>
     * @see https://www.flowdock.com/api/push
     */
    class FlowdockHandler extends \TEC\Common\Monolog\Handler\SocketHandler
    {
        /**
         * @var string
         */
        protected $apiToken;
        /**
         * @param string   $apiToken
         * @param bool|int $level    The minimum logging level at which this handler will be triggered
         * @param bool     $bubble   Whether the messages that are handled can bubble up the stack or not
         *
         * @throws MissingExtensionException if OpenSSL is missing
         */
        public function __construct($apiToken, $level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setFormatter(\TEC\Common\Monolog\Formatter\FormatterInterface $formatter)
        {
        }
        /**
         * Gets the default formatter.
         *
         * @return FormatterInterface
         */
        protected function getDefaultFormatter()
        {
        }
        /**
         * {@inheritdoc}
         *
         * @param array $record
         */
        protected function write(array $record)
        {
        }
        /**
         * {@inheritdoc}
         *
         * @param  array  $record
         * @return string
         */
        protected function generateDataStream($record)
        {
        }
    }
    /**
     * Handler to send messages to a Graylog2 (http://www.graylog2.org) server
     *
     * @author Matt Lehner <mlehner@gmail.com>
     * @author Benjamin Zikarsky <benjamin@zikarsky.de>
     */
    class GelfHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        /**
         * @var Publisher the publisher object that sends the message to the server
         */
        protected $publisher;
        /**
         * @param PublisherInterface|IMessagePublisher|Publisher $publisher a publisher object
         * @param int                                            $level     The minimum logging level at which this handler will be triggered
         * @param bool                                           $bubble    Whether the messages that are handled can bubble up the stack or not
         */
        public function __construct($publisher, $level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true)
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function write(array $record)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function getDefaultFormatter()
        {
        }
    }
    /**
     * Forwards records to multiple handlers
     *
     * @author Lenar Lõhmus <lenar@city.ee>
     */
    class GroupHandler extends \TEC\Common\Monolog\Handler\AbstractHandler
    {
        protected $handlers;
        /**
         * @param array $handlers Array of Handlers.
         * @param bool  $bubble   Whether the messages that are handled can bubble up the stack or not
         */
        public function __construct(array $handlers, $bubble = true)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function isHandling(array $record)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function handle(array $record)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function handleBatch(array $records)
        {
        }
        public function reset()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setFormatter(\TEC\Common\Monolog\Formatter\FormatterInterface $formatter)
        {
        }
    }
    /**
     * This simple wrapper class can be used to extend handlers functionality.
     *
     * Example: A custom filtering that can be applied to any handler.
     *
     * Inherit from this class and override handle() like this:
     *
     *   public function handle(array $record)
     *   {
     *        if ($record meets certain conditions) {
     *            return false;
     *        }
     *        return $this->handler->handle($record);
     *   }
     *
     * @author Alexey Karapetov <alexey@karapetov.com>
     */
    class HandlerWrapper implements \TEC\Common\Monolog\Handler\HandlerInterface, \TEC\Common\Monolog\ResettableInterface
    {
        /**
         * @var HandlerInterface
         */
        protected $handler;
        /**
         * HandlerWrapper constructor.
         * @param HandlerInterface $handler
         */
        public function __construct(\TEC\Common\Monolog\Handler\HandlerInterface $handler)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function isHandling(array $record)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function handle(array $record)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function handleBatch(array $records)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function pushProcessor($callback)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function popProcessor()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setFormatter(\TEC\Common\Monolog\Formatter\FormatterInterface $formatter)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getFormatter()
        {
        }
        public function reset()
        {
        }
    }
    /**
     * Sends notifications through the hipchat api to a hipchat room
     *
     * Notes:
     * API token - HipChat API token
     * Room      - HipChat Room Id or name, where messages are sent
     * Name      - Name used to send the message (from)
     * notify    - Should the message trigger a notification in the clients
     * version   - The API version to use (HipChatHandler::API_V1 | HipChatHandler::API_V2)
     *
     * @author Rafael Dohms <rafael@doh.ms>
     * @see    https://www.hipchat.com/docs/api
     */
    class HipChatHandler extends \TEC\Common\Monolog\Handler\SocketHandler
    {
        /**
         * Use API version 1
         */
        const API_V1 = 'v1';
        /**
         * Use API version v2
         */
        const API_V2 = 'v2';
        /**
         * The maximum allowed length for the name used in the "from" field.
         */
        const MAXIMUM_NAME_LENGTH = 15;
        /**
         * The maximum allowed length for the message.
         */
        const MAXIMUM_MESSAGE_LENGTH = 9500;
        /**
         * @param string $token   HipChat API Token
         * @param string $room    The room that should be alerted of the message (Id or Name)
         * @param string $name    Name used in the "from" field.
         * @param bool   $notify  Trigger a notification in clients or not
         * @param int    $level   The minimum logging level at which this handler will be triggered
         * @param bool   $bubble  Whether the messages that are handled can bubble up the stack or not
         * @param bool   $useSSL  Whether to connect via SSL.
         * @param string $format  The format of the messages (default to text, can be set to html if you have html in the messages)
         * @param string $host    The HipChat server hostname.
         * @param string $version The HipChat API version (default HipChatHandler::API_V1)
         */
        public function __construct($token, $room, $name = 'TEC\\Common\\Monolog', $notify = false, $level = \TEC\Common\Monolog\Logger::CRITICAL, $bubble = true, $useSSL = true, $format = 'text', $host = 'api.hipchat.com', $version = self::API_V1)
        {
        }
        /**
         * {@inheritdoc}
         *
         * @param  array  $record
         * @return string
         */
        protected function generateDataStream($record)
        {
        }
        /**
         * Assigns a color to each level of log records.
         *
         * @param  int    $level
         * @return string
         */
        protected function getAlertColor($level)
        {
        }
        /**
         * {@inheritdoc}
         *
         * @param array $record
         */
        protected function write(array $record)
        {
        }
        /**
         * Finalizes the request by reading some bytes and then closing the socket
         *
         * If we do not read some but close the socket too early, hipchat sometimes
         * drops the request entirely.
         */
        protected function finalizeWrite()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function handleBatch(array $records)
        {
        }
    }
    /**
     * IFTTTHandler uses cURL to trigger IFTTT Maker actions
     *
     * Register a secret key and trigger/event name at https://ifttt.com/maker
     *
     * value1 will be the channel from monolog's Logger constructor,
     * value2 will be the level name (ERROR, WARNING, ..)
     * value3 will be the log record's message
     *
     * @author Nehal Patel <nehal@nehalpatel.me>
     */
    class IFTTTHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        /**
         * @param string $eventName The name of the IFTTT Maker event that should be triggered
         * @param string $secretKey A valid IFTTT secret key
         * @param int    $level     The minimum logging level at which this handler will be triggered
         * @param bool   $bubble    Whether the messages that are handled can bubble up the stack or not
         */
        public function __construct($eventName, $secretKey, $level = \TEC\Common\Monolog\Logger::ERROR, $bubble = true)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function write(array $record)
        {
        }
    }
    /**
     * Inspired on LogEntriesHandler.
     *
     * @author Robert Kaufmann III <rok3@rok3.me>
     * @author Gabriel Machado <gabriel.ms1@hotmail.com>
     */
    class InsightOpsHandler extends \TEC\Common\Monolog\Handler\SocketHandler
    {
        /**
         * @var string
         */
        protected $logToken;
        /**
         * @param string $token  Log token supplied by InsightOps
         * @param string $region Region where InsightOps account is hosted. Could be 'us' or 'eu'.
         * @param bool   $useSSL Whether or not SSL encryption should be used
         * @param int    $level  The minimum logging level to trigger this handler
         * @param bool   $bubble Whether or not messages that are handled should bubble up the stack.
         *
         * @throws MissingExtensionException If SSL encryption is set to true and OpenSSL is missing
         */
        public function __construct($token, $region = 'us', $useSSL = true, $level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true)
        {
        }
        /**
         * {@inheritdoc}
         *
         * @param  array  $record
         * @return string
         */
        protected function generateDataStream($record)
        {
        }
    }
    /**
     * @author Robert Kaufmann III <rok3@rok3.me>
     */
    class LogEntriesHandler extends \TEC\Common\Monolog\Handler\SocketHandler
    {
        /**
         * @var string
         */
        protected $logToken;
        /**
         * @param string $token  Log token supplied by LogEntries
         * @param bool   $useSSL Whether or not SSL encryption should be used.
         * @param int    $level  The minimum logging level to trigger this handler
         * @param bool   $bubble Whether or not messages that are handled should bubble up the stack.
         *
         * @throws MissingExtensionException If SSL encryption is set to true and OpenSSL is missing
         */
        public function __construct($token, $useSSL = true, $level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true, $host = 'data.logentries.com')
        {
        }
        /**
         * {@inheritdoc}
         *
         * @param  array  $record
         * @return string
         */
        protected function generateDataStream($record)
        {
        }
    }
    /**
     * Sends errors to Loggly.
     *
     * @author Przemek Sobstel <przemek@sobstel.org>
     * @author Adam Pancutt <adam@pancutt.com>
     * @author Gregory Barchard <gregory@barchard.net>
     */
    class LogglyHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        const HOST = 'logs-01.loggly.com';
        const ENDPOINT_SINGLE = 'inputs';
        const ENDPOINT_BATCH = 'bulk';
        protected $token;
        protected $tag = array();
        public function __construct($token, $level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true)
        {
        }
        public function setTag($tag)
        {
        }
        public function addTag($tag)
        {
        }
        protected function write(array $record)
        {
        }
        public function handleBatch(array $records)
        {
        }
        protected function send($data, $endpoint)
        {
        }
        protected function getDefaultFormatter()
        {
        }
    }
    /**
     * Base class for all mail handlers
     *
     * @author Gyula Sallai
     */
    abstract class MailHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        /**
         * {@inheritdoc}
         */
        public function handleBatch(array $records)
        {
        }
        /**
         * Send a mail with the given content
         *
         * @param string $content formatted email body to be sent
         * @param array  $records the array of log records that formed this content
         */
        protected abstract function send($content, array $records);
        /**
         * {@inheritdoc}
         */
        protected function write(array $record)
        {
        }
        protected function getHighestRecord(array $records)
        {
        }
    }
    /**
     * MandrillHandler uses cURL to send the emails to the Mandrill API
     *
     * @author Adam Nicholson <adamnicholson10@gmail.com>
     */
    class MandrillHandler extends \TEC\Common\Monolog\Handler\MailHandler
    {
        protected $message;
        protected $apiKey;
        /**
         * @param string                  $apiKey  A valid Mandrill API key
         * @param callable|\Swift_Message $message An example message for real messages, only the body will be replaced
         * @param int                     $level   The minimum logging level at which this handler will be triggered
         * @param bool                    $bubble  Whether the messages that are handled can bubble up the stack or not
         */
        public function __construct($apiKey, $message, $level = \TEC\Common\Monolog\Logger::ERROR, $bubble = true)
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function send($content, array $records)
        {
        }
    }
    /**
     * Exception can be thrown if an extension for an handler is missing
     *
     * @author  Christian Bergau <cbergau86@gmail.com>
     */
    class MissingExtensionException extends \Exception
    {
    }
    /**
     * Logs to a MongoDB database.
     *
     * usage example:
     *
     *   $log = new Logger('application');
     *   $mongodb = new MongoDBHandler(new \Mongo("mongodb://localhost:27017"), "logs", "prod");
     *   $log->pushHandler($mongodb);
     *
     * @author Thomas Tourlourat <thomas@tourlourat.com>
     */
    class MongoDBHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        protected $mongoCollection;
        public function __construct($mongo, $database, $collection, $level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true)
        {
        }
        protected function write(array $record)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function getDefaultFormatter()
        {
        }
    }
    /**
     * NativeMailerHandler uses the mail() function to send the emails
     *
     * @author Christophe Coevoet <stof@notk.org>
     * @author Mark Garrett <mark@moderndeveloperllc.com>
     */
    class NativeMailerHandler extends \TEC\Common\Monolog\Handler\MailHandler
    {
        /**
         * The email addresses to which the message will be sent
         * @var array
         */
        protected $to;
        /**
         * The subject of the email
         * @var string
         */
        protected $subject;
        /**
         * Optional headers for the message
         * @var array
         */
        protected $headers = array();
        /**
         * Optional parameters for the message
         * @var array
         */
        protected $parameters = array();
        /**
         * The wordwrap length for the message
         * @var int
         */
        protected $maxColumnWidth;
        /**
         * The Content-type for the message
         * @var string
         */
        protected $contentType = 'text/plain';
        /**
         * The encoding for the message
         * @var string
         */
        protected $encoding = 'utf-8';
        /**
         * @param string|array $to             The receiver of the mail
         * @param string       $subject        The subject of the mail
         * @param string       $from           The sender of the mail
         * @param int          $level          The minimum logging level at which this handler will be triggered
         * @param bool         $bubble         Whether the messages that are handled can bubble up the stack or not
         * @param int          $maxColumnWidth The maximum column width that the message lines will have
         */
        public function __construct($to, $subject, $from, $level = \TEC\Common\Monolog\Logger::ERROR, $bubble = true, $maxColumnWidth = 70)
        {
        }
        /**
         * Add headers to the message
         *
         * @param  string|array $headers Custom added headers
         * @return self
         */
        public function addHeader($headers)
        {
        }
        /**
         * Add parameters to the message
         *
         * @param  string|array $parameters Custom added parameters
         * @return self
         */
        public function addParameter($parameters)
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function send($content, array $records)
        {
        }
        /**
         * @return string $contentType
         */
        public function getContentType()
        {
        }
        /**
         * @return string $encoding
         */
        public function getEncoding()
        {
        }
        /**
         * @param  string $contentType The content type of the email - Defaults to text/plain. Use text/html for HTML
         *                             messages.
         * @return self
         */
        public function setContentType($contentType)
        {
        }
        /**
         * @param  string $encoding
         * @return self
         */
        public function setEncoding($encoding)
        {
        }
    }
    /**
     * Class to record a log on a NewRelic application.
     * Enabling New Relic High Security mode may prevent capture of useful information.
     *
     * This handler requires a NormalizerFormatter to function and expects an array in $record['formatted']
     *
     * @see https://docs.newrelic.com/docs/agents/php-agent
     * @see https://docs.newrelic.com/docs/accounts-partnerships/accounts/security/high-security
     */
    class NewRelicHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        /**
         * Name of the New Relic application that will receive logs from this handler.
         *
         * @var string
         */
        protected $appName;
        /**
         * Name of the current transaction
         *
         * @var string
         */
        protected $transactionName;
        /**
         * Some context and extra data is passed into the handler as arrays of values. Do we send them as is
         * (useful if we are using the API), or explode them for display on the NewRelic RPM website?
         *
         * @var bool
         */
        protected $explodeArrays;
        /**
         * {@inheritDoc}
         *
         * @param string $appName
         * @param bool   $explodeArrays
         * @param string $transactionName
         */
        public function __construct($level = \TEC\Common\Monolog\Logger::ERROR, $bubble = true, $appName = null, $explodeArrays = false, $transactionName = null)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function write(array $record)
        {
        }
        /**
         * Checks whether the NewRelic extension is enabled in the system.
         *
         * @return bool
         */
        protected function isNewRelicEnabled()
        {
        }
        /**
         * Returns the appname where this log should be sent. Each log can override the default appname, set in this
         * handler's constructor, by providing the appname in it's context.
         *
         * @param  array       $context
         * @return null|string
         */
        protected function getAppName(array $context)
        {
        }
        /**
         * Returns the name of the current transaction. Each log can override the default transaction name, set in this
         * handler's constructor, by providing the transaction_name in it's context
         *
         * @param array $context
         *
         * @return null|string
         */
        protected function getTransactionName(array $context)
        {
        }
        /**
         * Sets the NewRelic application that should receive this log.
         *
         * @param string $appName
         */
        protected function setNewRelicAppName($appName)
        {
        }
        /**
         * Overwrites the name of the current transaction
         *
         * @param string $transactionName
         */
        protected function setNewRelicTransactionName($transactionName)
        {
        }
        /**
         * @param string $key
         * @param mixed  $value
         */
        protected function setNewRelicParameter($key, $value)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function getDefaultFormatter()
        {
        }
    }
    /**
     * Blackhole
     *
     * Any record it can handle will be thrown away. This can be used
     * to put on top of an existing stack to override it temporarily.
     *
     * @author Jordi Boggiano <j.boggiano@seld.be>
     */
    class NullHandler extends \TEC\Common\Monolog\Handler\AbstractHandler
    {
        /**
         * @param int $level The minimum logging level at which this handler will be triggered
         */
        public function __construct($level = \TEC\Common\Monolog\Logger::DEBUG)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function handle(array $record)
        {
        }
    }
    /**
     * Monolog handler for Google Chrome extension "PHP Console"
     *
     * Display PHP error/debug log messages in Google Chrome console and notification popups, executes PHP code remotely
     *
     * Usage:
     * 1. Install Google Chrome extension https://chrome.google.com/webstore/detail/php-console/nfhmhhlpfleoednkpnnnkolmclajemef
     * 2. See overview https://github.com/barbushin/php-console#overview
     * 3. Install PHP Console library https://github.com/barbushin/php-console#installation
     * 4. Example (result will looks like http://i.hizliresim.com/vg3Pz4.png)
     *
     *      $logger = new \TEC\Common\Monolog\Logger('all', array(new \TEC\Common\Monolog\Handler\PHPConsoleHandler()));
     *      \Monolog\ErrorHandler::register($logger);
     *      echo $undefinedVar;
     *      $logger->addDebug('SELECT * FROM users', array('db', 'time' => 0.012));
     *      PC::debug($_SERVER); // PHP Console debugger for any type of vars
     *
     * @author Sergey Barbushin https://www.linkedin.com/in/barbushin
     */
    class PHPConsoleHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        /**
         * @param  array          $options   See \Monolog\Handler\PHPConsoleHandler::$options for more details
         * @param  Connector|null $connector Instance of \PhpConsole\Connector class (optional)
         * @param  int            $level
         * @param  bool           $bubble
         * @throws Exception
         */
        public function __construct(array $options = array(), \PhpConsole\Connector $connector = null, $level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true)
        {
        }
        public function getConnector()
        {
        }
        public function getOptions()
        {
        }
        public function handle(array $record)
        {
        }
        /**
         * Writes the record down to the log of the implementing handler
         *
         * @param  array $record
         * @return void
         */
        protected function write(array $record)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function getDefaultFormatter()
        {
        }
    }
    /**
     * Proxies log messages to an existing PSR-3 compliant logger.
     *
     * @author Michael Moussa <michael.moussa@gmail.com>
     */
    class PsrHandler extends \TEC\Common\Monolog\Handler\AbstractHandler
    {
        /**
         * PSR-3 compliant logger
         *
         * @var LoggerInterface
         */
        protected $logger;
        /**
         * @param LoggerInterface $logger The underlying PSR-3 compliant logger to which messages will be proxied
         * @param int             $level  The minimum logging level at which this handler will be triggered
         * @param bool            $bubble Whether the messages that are handled can bubble up the stack or not
         */
        public function __construct(\TEC\Common\Psr\Log\LoggerInterface $logger, $level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function handle(array $record)
        {
        }
    }
    /**
     * Sends notifications through the pushover api to mobile phones
     *
     * @author Sebastian Göttschkes <sebastian.goettschkes@googlemail.com>
     * @see    https://www.pushover.net/api
     */
    class PushoverHandler extends \TEC\Common\Monolog\Handler\SocketHandler
    {
        /**
         * @param string       $token             Pushover api token
         * @param string|array $users             Pushover user id or array of ids the message will be sent to
         * @param string       $title             Title sent to the Pushover API
         * @param int          $level             The minimum logging level at which this handler will be triggered
         * @param bool         $bubble            Whether the messages that are handled can bubble up the stack or not
         * @param bool         $useSSL            Whether to connect via SSL. Required when pushing messages to users that are not
         *                                        the pushover.net app owner. OpenSSL is required for this option.
         * @param int          $highPriorityLevel The minimum logging level at which this handler will start
         *                                        sending "high priority" requests to the Pushover API
         * @param int          $emergencyLevel    The minimum logging level at which this handler will start
         *                                        sending "emergency" requests to the Pushover API
         * @param int          $retry             The retry parameter specifies how often (in seconds) the Pushover servers will send the same notification to the user.
         * @param int          $expire            The expire parameter specifies how many seconds your notification will continue to be retried for (every retry seconds).
         */
        public function __construct($token, $users, $title = null, $level = \TEC\Common\Monolog\Logger::CRITICAL, $bubble = true, $useSSL = true, $highPriorityLevel = \TEC\Common\Monolog\Logger::CRITICAL, $emergencyLevel = \TEC\Common\Monolog\Logger::EMERGENCY, $retry = 30, $expire = 25200)
        {
        }
        protected function generateDataStream($record)
        {
        }
        protected function write(array $record)
        {
        }
        public function setHighPriorityLevel($value)
        {
        }
        public function setEmergencyLevel($value)
        {
        }
        /**
         * Use the formatted message?
         * @param bool $value
         */
        public function useFormattedMessage($value)
        {
        }
    }
    /**
     * Handler to send messages to a Sentry (https://github.com/getsentry/sentry) server
     * using sentry-php (https://github.com/getsentry/sentry-php)
     *
     * @author Marc Abramowitz <marc@marc-abramowitz.com>
     */
    class RavenHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        /**
         * Translates Monolog log levels to Raven log levels.
         */
        protected $logLevels = array(\TEC\Common\Monolog\Logger::DEBUG => \Raven_Client::DEBUG, \TEC\Common\Monolog\Logger::INFO => \Raven_Client::INFO, \TEC\Common\Monolog\Logger::NOTICE => \Raven_Client::INFO, \TEC\Common\Monolog\Logger::WARNING => \Raven_Client::WARNING, \TEC\Common\Monolog\Logger::ERROR => \Raven_Client::ERROR, \TEC\Common\Monolog\Logger::CRITICAL => \Raven_Client::FATAL, \TEC\Common\Monolog\Logger::ALERT => \Raven_Client::FATAL, \TEC\Common\Monolog\Logger::EMERGENCY => \Raven_Client::FATAL);
        /**
         * @var string should represent the current version of the calling
         *             software. Can be any string (git commit, version number)
         */
        protected $release;
        /**
         * @var Raven_Client the client object that sends the message to the server
         */
        protected $ravenClient;
        /**
         * @var LineFormatter The formatter to use for the logs generated via handleBatch()
         */
        protected $batchFormatter;
        /**
         * @param Raven_Client $ravenClient
         * @param int          $level       The minimum logging level at which this handler will be triggered
         * @param bool         $bubble      Whether the messages that are handled can bubble up the stack or not
         */
        public function __construct(\Raven_Client $ravenClient, $level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function handleBatch(array $records)
        {
        }
        /**
         * Sets the formatter for the logs generated by handleBatch().
         *
         * @param FormatterInterface $formatter
         */
        public function setBatchFormatter(\TEC\Common\Monolog\Formatter\FormatterInterface $formatter)
        {
        }
        /**
         * Gets the formatter for the logs generated by handleBatch().
         *
         * @return FormatterInterface
         */
        public function getBatchFormatter()
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function write(array $record)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function getDefaultFormatter()
        {
        }
        /**
         * Gets the default formatter for the logs generated by handleBatch().
         *
         * @return FormatterInterface
         */
        protected function getDefaultBatchFormatter()
        {
        }
        /**
         * Gets extra parameters supported by Raven that can be found in "extra" and "context"
         *
         * @return array
         */
        protected function getExtraParameters()
        {
        }
        /**
         * @param string $value
         * @return self
         */
        public function setRelease($value)
        {
        }
    }
    /**
     * Logs to a Redis key using rpush
     *
     * usage example:
     *
     *   $log = new Logger('application');
     *   $redis = new RedisHandler(new Predis\Client("tcp://localhost:6379"), "logs", "prod");
     *   $log->pushHandler($redis);
     *
     * @author Thomas Tourlourat <thomas@tourlourat.com>
     */
    class RedisHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        protected $capSize;
        /**
         * @param \Predis\Client|\Redis $redis   The redis instance
         * @param string                $key     The key name to push records to
         * @param int                   $level   The minimum logging level at which this handler will be triggered
         * @param bool                  $bubble  Whether the messages that are handled can bubble up the stack or not
         * @param int                   $capSize Number of entries to limit list size to
         */
        public function __construct($redis, $key, $level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true, $capSize = false)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function write(array $record)
        {
        }
        /**
         * Write and cap the collection
         * Writes the record to the redis list and caps its
         *
         * @param  array $record associative record array
         * @return void
         */
        protected function writeCapped(array $record)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function getDefaultFormatter()
        {
        }
    }
    /**
     * Sends errors to Rollbar
     *
     * If the context data contains a `payload` key, that is used as an array
     * of payload options to RollbarNotifier's report_message/report_exception methods.
     *
     * Rollbar's context info will contain the context + extra keys from the log record
     * merged, and then on top of that a few keys:
     *
     *  - level (rollbar level name)
     *  - monolog_level (monolog level name, raw level, as rollbar only has 5 but monolog 8)
     *  - channel
     *  - datetime (unix timestamp)
     *
     * @author Paul Statezny <paulstatezny@gmail.com>
     */
    class RollbarHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        /**
         * Rollbar notifier
         *
         * @var RollbarNotifier
         */
        protected $rollbarNotifier;
        protected $levelMap = array(\TEC\Common\Monolog\Logger::DEBUG => 'debug', \TEC\Common\Monolog\Logger::INFO => 'info', \TEC\Common\Monolog\Logger::NOTICE => 'info', \TEC\Common\Monolog\Logger::WARNING => 'warning', \TEC\Common\Monolog\Logger::ERROR => 'error', \TEC\Common\Monolog\Logger::CRITICAL => 'critical', \TEC\Common\Monolog\Logger::ALERT => 'critical', \TEC\Common\Monolog\Logger::EMERGENCY => 'critical');
        protected $initialized = false;
        /**
         * @param RollbarNotifier $rollbarNotifier RollbarNotifier object constructed with valid token
         * @param int             $level           The minimum logging level at which this handler will be triggered
         * @param bool            $bubble          Whether the messages that are handled can bubble up the stack or not
         */
        public function __construct(\RollbarNotifier $rollbarNotifier, $level = \TEC\Common\Monolog\Logger::ERROR, $bubble = true)
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function write(array $record)
        {
        }
        public function flush()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function close()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function reset()
        {
        }
    }
    /**
     * Stores to any stream resource
     *
     * Can be used to store into php://stderr, remote and local files, etc.
     *
     * @author Jordi Boggiano <j.boggiano@seld.be>
     */
    class StreamHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        protected $stream;
        protected $url;
        protected $filePermission;
        protected $useLocking;
        /**
         * @param resource|string $stream
         * @param int             $level          The minimum logging level at which this handler will be triggered
         * @param bool            $bubble         Whether the messages that are handled can bubble up the stack or not
         * @param int|null        $filePermission Optional file permissions (default (0644) are only for owner read/write)
         * @param bool            $useLocking     Try to lock log file before doing any writes
         *
         * @throws \Exception                If a missing directory is not buildable
         * @throws \InvalidArgumentException If stream is not a resource or string
         */
        public function __construct($stream, $level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true, $filePermission = null, $useLocking = false)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function close()
        {
        }
        /**
         * Return the currently active stream if it is open
         *
         * @return resource|null
         */
        public function getStream()
        {
        }
        /**
         * Return the stream URL if it was configured with a URL and not an active resource
         *
         * @return string|null
         */
        public function getUrl()
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function write(array $record)
        {
        }
        /**
         * Write to stream
         * @param resource $stream
         * @param array $record
         */
        protected function streamWrite($stream, array $record)
        {
        }
    }
    /**
     * Stores logs to files that are rotated every day and a limited number of files are kept.
     *
     * This rotation is only intended to be used as a workaround. Using logrotate to
     * handle the rotation is strongly encouraged when you can use it.
     *
     * @author Christophe Coevoet <stof@notk.org>
     * @author Jordi Boggiano <j.boggiano@seld.be>
     */
    class RotatingFileHandler extends \TEC\Common\Monolog\Handler\StreamHandler
    {
        const FILE_PER_DAY = 'Y-m-d';
        const FILE_PER_MONTH = 'Y-m';
        const FILE_PER_YEAR = 'Y';
        protected $filename;
        protected $maxFiles;
        protected $mustRotate;
        protected $nextRotation;
        protected $filenameFormat;
        protected $dateFormat;
        /**
         * @param string   $filename
         * @param int      $maxFiles       The maximal amount of files to keep (0 means unlimited)
         * @param int      $level          The minimum logging level at which this handler will be triggered
         * @param bool     $bubble         Whether the messages that are handled can bubble up the stack or not
         * @param int|null $filePermission Optional file permissions (default (0644) are only for owner read/write)
         * @param bool     $useLocking     Try to lock log file before doing any writes
         */
        public function __construct($filename, $maxFiles = 0, $level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true, $filePermission = null, $useLocking = false)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function close()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function reset()
        {
        }
        public function setFilenameFormat($filenameFormat, $dateFormat)
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function write(array $record)
        {
        }
        /**
         * Rotates the files.
         */
        protected function rotate()
        {
        }
        protected function getTimedFilename()
        {
        }
        protected function getGlobPattern()
        {
        }
    }
    /**
     * Sampling handler
     *
     * A sampled event stream can be useful for logging high frequency events in
     * a production environment where you only need an idea of what is happening
     * and are not concerned with capturing every occurrence. Since the decision to
     * handle or not handle a particular event is determined randomly, the
     * resulting sampled log is not guaranteed to contain 1/N of the events that
     * occurred in the application, but based on the Law of large numbers, it will
     * tend to be close to this ratio with a large number of attempts.
     *
     * @author Bryan Davis <bd808@wikimedia.org>
     * @author Kunal Mehta <legoktm@gmail.com>
     */
    class SamplingHandler extends \TEC\Common\Monolog\Handler\AbstractHandler
    {
        /**
         * @var callable|HandlerInterface $handler
         */
        protected $handler;
        /**
         * @var int $factor
         */
        protected $factor;
        /**
         * @param callable|HandlerInterface $handler Handler or factory callable($record, $fingersCrossedHandler).
         * @param int                       $factor  Sample factor
         */
        public function __construct($handler, $factor)
        {
        }
        public function isHandling(array $record)
        {
        }
        public function handle(array $record)
        {
        }
    }
}
namespace TEC\Common\Monolog\Handler\Slack {
    /**
     * Slack record utility helping to log to Slack webhooks or API.
     *
     * @author Greg Kedzierski <greg@gregkedzierski.com>
     * @author Haralan Dobrev <hkdobrev@gmail.com>
     * @see    https://api.slack.com/incoming-webhooks
     * @see    https://api.slack.com/docs/message-attachments
     */
    class SlackRecord
    {
        const COLOR_DANGER = 'danger';
        const COLOR_WARNING = 'warning';
        const COLOR_GOOD = 'good';
        const COLOR_DEFAULT = '#e3e4e6';
        public function __construct($channel = null, $username = null, $useAttachment = true, $userIcon = null, $useShortAttachment = false, $includeContextAndExtra = false, array $excludeFields = array(), \TEC\Common\Monolog\Formatter\FormatterInterface $formatter = null)
        {
        }
        public function getSlackData(array $record)
        {
        }
        /**
         * Returned a Slack message attachment color associated with
         * provided level.
         *
         * @param  int    $level
         * @return string
         */
        public function getAttachmentColor($level)
        {
        }
        /**
         * Stringifies an array of key/value pairs to be used in attachment fields
         *
         * @param array $fields
         *
         * @return string
         */
        public function stringify($fields)
        {
        }
        /**
         * Sets the formatter
         *
         * @param FormatterInterface $formatter
         */
        public function setFormatter(\TEC\Common\Monolog\Formatter\FormatterInterface $formatter)
        {
        }
    }
}
namespace TEC\Common\Monolog\Handler {
    /**
     * Sends notifications through Slack API
     *
     * @author Greg Kedzierski <greg@gregkedzierski.com>
     * @see    https://api.slack.com/
     */
    class SlackHandler extends \TEC\Common\Monolog\Handler\SocketHandler
    {
        /**
         * @param  string                    $token                  Slack API token
         * @param  string                    $channel                Slack channel (encoded ID or name)
         * @param  string|null               $username               Name of a bot
         * @param  bool                      $useAttachment          Whether the message should be added to Slack as attachment (plain text otherwise)
         * @param  string|null               $iconEmoji              The emoji name to use (or null)
         * @param  int                       $level                  The minimum logging level at which this handler will be triggered
         * @param  bool                      $bubble                 Whether the messages that are handled can bubble up the stack or not
         * @param  bool                      $useShortAttachment     Whether the the context/extra messages added to Slack as attachments are in a short style
         * @param  bool                      $includeContextAndExtra Whether the attachment should include context and extra data
         * @param  array                     $excludeFields          Dot separated list of fields to exclude from slack message. E.g. ['context.field1', 'extra.field2']
         * @throws MissingExtensionException If no OpenSSL PHP extension configured
         */
        public function __construct($token, $channel, $username = null, $useAttachment = true, $iconEmoji = null, $level = \TEC\Common\Monolog\Logger::CRITICAL, $bubble = true, $useShortAttachment = false, $includeContextAndExtra = false, array $excludeFields = array())
        {
        }
        public function getSlackRecord()
        {
        }
        public function getToken()
        {
        }
        /**
         * {@inheritdoc}
         *
         * @param  array  $record
         * @return string
         */
        protected function generateDataStream($record)
        {
        }
        /**
         * Prepares content data
         *
         * @param  array $record
         * @return array
         */
        protected function prepareContentData($record)
        {
        }
        /**
         * {@inheritdoc}
         *
         * @param array $record
         */
        protected function write(array $record)
        {
        }
        /**
         * Finalizes the request by reading some bytes and then closing the socket
         *
         * If we do not read some but close the socket too early, slack sometimes
         * drops the request entirely.
         */
        protected function finalizeWrite()
        {
        }
        /**
         * Returned a Slack message attachment color associated with
         * provided level.
         *
         * @param  int    $level
         * @return string
         * @deprecated Use underlying SlackRecord instead
         */
        protected function getAttachmentColor($level)
        {
        }
        /**
         * Stringifies an array of key/value pairs to be used in attachment fields
         *
         * @param  array  $fields
         * @return string
         * @deprecated Use underlying SlackRecord instead
         */
        protected function stringify($fields)
        {
        }
        public function setFormatter(\TEC\Common\Monolog\Formatter\FormatterInterface $formatter)
        {
        }
        public function getFormatter()
        {
        }
    }
    /**
     * Sends notifications through Slack Webhooks
     *
     * @author Haralan Dobrev <hkdobrev@gmail.com>
     * @see    https://api.slack.com/incoming-webhooks
     */
    class SlackWebhookHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        /**
         * @param  string      $webhookUrl             Slack Webhook URL
         * @param  string|null $channel                Slack channel (encoded ID or name)
         * @param  string|null $username               Name of a bot
         * @param  bool        $useAttachment          Whether the message should be added to Slack as attachment (plain text otherwise)
         * @param  string|null $iconEmoji              The emoji name to use (or null)
         * @param  bool        $useShortAttachment     Whether the the context/extra messages added to Slack as attachments are in a short style
         * @param  bool        $includeContextAndExtra Whether the attachment should include context and extra data
         * @param  int         $level                  The minimum logging level at which this handler will be triggered
         * @param  bool        $bubble                 Whether the messages that are handled can bubble up the stack or not
         * @param  array       $excludeFields          Dot separated list of fields to exclude from slack message. E.g. ['context.field1', 'extra.field2']
         */
        public function __construct($webhookUrl, $channel = null, $username = null, $useAttachment = true, $iconEmoji = null, $useShortAttachment = false, $includeContextAndExtra = false, $level = \TEC\Common\Monolog\Logger::CRITICAL, $bubble = true, array $excludeFields = array())
        {
        }
        public function getSlackRecord()
        {
        }
        public function getWebhookUrl()
        {
        }
        /**
         * {@inheritdoc}
         *
         * @param array $record
         */
        protected function write(array $record)
        {
        }
        public function setFormatter(\TEC\Common\Monolog\Formatter\FormatterInterface $formatter)
        {
        }
        public function getFormatter()
        {
        }
    }
    /**
     * Sends notifications through Slack's Slackbot
     *
     * @author Haralan Dobrev <hkdobrev@gmail.com>
     * @see    https://slack.com/apps/A0F81R8ET-slackbot
     */
    class SlackbotHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        /**
         * @param  string $slackTeam Slack team slug
         * @param  string $token     Slackbot token
         * @param  string $channel   Slack channel (encoded ID or name)
         * @param  int    $level     The minimum logging level at which this handler will be triggered
         * @param  bool   $bubble    Whether the messages that are handled can bubble up the stack or not
         */
        public function __construct($slackTeam, $token, $channel, $level = \TEC\Common\Monolog\Logger::CRITICAL, $bubble = true)
        {
        }
        /**
         * {@inheritdoc}
         *
         * @param array $record
         */
        protected function write(array $record)
        {
        }
    }
    /**
     * SwiftMailerHandler uses Swift_Mailer to send the emails
     *
     * @author Gyula Sallai
     */
    class SwiftMailerHandler extends \TEC\Common\Monolog\Handler\MailHandler
    {
        protected $mailer;
        /**
         * @param \Swift_Mailer           $mailer  The mailer to use
         * @param callable|\Swift_Message $message An example message for real messages, only the body will be replaced
         * @param int                     $level   The minimum logging level at which this handler will be triggered
         * @param bool                    $bubble  Whether the messages that are handled can bubble up the stack or not
         */
        public function __construct(\Swift_Mailer $mailer, $message, $level = \TEC\Common\Monolog\Logger::ERROR, $bubble = true)
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function send($content, array $records)
        {
        }
        /**
         * Gets the formatter for the Swift_Message subject.
         *
         * @param  string             $format The format of the subject
         * @return FormatterInterface
         */
        protected function getSubjectFormatter($format)
        {
        }
        /**
         * Creates instance of Swift_Message to be sent
         *
         * @param  string         $content formatted email body to be sent
         * @param  array          $records Log records that formed the content
         * @return \Swift_Message
         */
        protected function buildMessage($content, array $records)
        {
        }
        /**
         * BC getter, to be removed in 2.0
         */
        public function __get($name)
        {
        }
    }
    /**
     * Logs to syslog service.
     *
     * usage example:
     *
     *   $log = new Logger('application');
     *   $syslog = new SyslogHandler('myfacility', 'local6');
     *   $formatter = new LineFormatter("%channel%.%level_name%: %message% %extra%");
     *   $syslog->setFormatter($formatter);
     *   $log->pushHandler($syslog);
     *
     * @author Sven Paulus <sven@karlsruhe.org>
     */
    class SyslogHandler extends \TEC\Common\Monolog\Handler\AbstractSyslogHandler
    {
        protected $ident;
        protected $logopts;
        /**
         * @param string $ident
         * @param mixed  $facility
         * @param int    $level    The minimum logging level at which this handler will be triggered
         * @param bool   $bubble   Whether the messages that are handled can bubble up the stack or not
         * @param int    $logopts  Option flags for the openlog() call, defaults to LOG_PID
         */
        public function __construct($ident, $facility = LOG_USER, $level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true, $logopts = LOG_PID)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function close()
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function write(array $record)
        {
        }
    }
}
namespace TEC\Common\Monolog\Handler\SyslogUdp {
    class UdpSocket
    {
        const DATAGRAM_MAX_LENGTH = 65023;
        protected $ip;
        protected $port;
        protected $socket;
        public function __construct($ip, $port = 514)
        {
        }
        public function write($line, $header = "")
        {
        }
        public function close()
        {
        }
        protected function send($chunk)
        {
        }
        protected function assembleMessage($line, $header)
        {
        }
    }
}
namespace TEC\Common\Monolog\Handler {
    /**
     * A Handler for logging to a remote syslogd server.
     *
     * @author Jesper Skovgaard Nielsen <nulpunkt@gmail.com>
     */
    class SyslogUdpHandler extends \TEC\Common\Monolog\Handler\AbstractSyslogHandler
    {
        protected $socket;
        protected $ident;
        /**
         * @param string $host
         * @param int    $port
         * @param mixed  $facility
         * @param int    $level    The minimum logging level at which this handler will be triggered
         * @param bool   $bubble   Whether the messages that are handled can bubble up the stack or not
         * @param string $ident    Program name or tag for each log message.
         */
        public function __construct($host, $port = 514, $facility = LOG_USER, $level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true, $ident = 'php')
        {
        }
        protected function write(array $record)
        {
        }
        public function close()
        {
        }
        /**
         * Make common syslog header (see rfc5424)
         */
        protected function makeCommonSyslogHeader($severity)
        {
        }
        protected function getDateTime()
        {
        }
        /**
         * Inject your own socket, mainly used for testing
         */
        public function setSocket($socket)
        {
        }
    }
    /**
     * Used for testing purposes.
     *
     * It records all records and gives you access to them for verification.
     *
     * @author Jordi Boggiano <j.boggiano@seld.be>
     *
     * @method bool hasEmergency($record)
     * @method bool hasAlert($record)
     * @method bool hasCritical($record)
     * @method bool hasError($record)
     * @method bool hasWarning($record)
     * @method bool hasNotice($record)
     * @method bool hasInfo($record)
     * @method bool hasDebug($record)
     *
     * @method bool hasEmergencyRecords()
     * @method bool hasAlertRecords()
     * @method bool hasCriticalRecords()
     * @method bool hasErrorRecords()
     * @method bool hasWarningRecords()
     * @method bool hasNoticeRecords()
     * @method bool hasInfoRecords()
     * @method bool hasDebugRecords()
     *
     * @method bool hasEmergencyThatContains($message)
     * @method bool hasAlertThatContains($message)
     * @method bool hasCriticalThatContains($message)
     * @method bool hasErrorThatContains($message)
     * @method bool hasWarningThatContains($message)
     * @method bool hasNoticeThatContains($message)
     * @method bool hasInfoThatContains($message)
     * @method bool hasDebugThatContains($message)
     *
     * @method bool hasEmergencyThatMatches($message)
     * @method bool hasAlertThatMatches($message)
     * @method bool hasCriticalThatMatches($message)
     * @method bool hasErrorThatMatches($message)
     * @method bool hasWarningThatMatches($message)
     * @method bool hasNoticeThatMatches($message)
     * @method bool hasInfoThatMatches($message)
     * @method bool hasDebugThatMatches($message)
     *
     * @method bool hasEmergencyThatPasses($message)
     * @method bool hasAlertThatPasses($message)
     * @method bool hasCriticalThatPasses($message)
     * @method bool hasErrorThatPasses($message)
     * @method bool hasWarningThatPasses($message)
     * @method bool hasNoticeThatPasses($message)
     * @method bool hasInfoThatPasses($message)
     * @method bool hasDebugThatPasses($message)
     */
    class TestHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        protected $records = array();
        protected $recordsByLevel = array();
        public function getRecords()
        {
        }
        public function clear()
        {
        }
        public function hasRecords($level)
        {
        }
        /**
         * @param string|array $record Either a message string or an array containing message and optionally context keys that will be checked against all records
         * @param int          $level  Logger::LEVEL constant value
         */
        public function hasRecord($record, $level)
        {
        }
        public function hasRecordThatContains($message, $level)
        {
        }
        public function hasRecordThatMatches($regex, $level)
        {
        }
        public function hasRecordThatPasses($predicate, $level)
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function write(array $record)
        {
        }
        public function __call($method, $args)
        {
        }
    }
    /**
     * Forwards records to multiple handlers suppressing failures of each handler
     * and continuing through to give every handler a chance to succeed.
     *
     * @author Craig D'Amelio <craig@damelio.ca>
     */
    class WhatFailureGroupHandler extends \TEC\Common\Monolog\Handler\GroupHandler
    {
        /**
         * {@inheritdoc}
         */
        public function handle(array $record)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function handleBatch(array $records)
        {
        }
    }
    /**
     * Handler sending logs to Zend Monitor
     *
     * @author  Christian Bergau <cbergau86@gmail.com>
     */
    class ZendMonitorHandler extends \TEC\Common\Monolog\Handler\AbstractProcessingHandler
    {
        /**
         * Monolog level / ZendMonitor Custom Event priority map
         *
         * @var array
         */
        protected $levelMap = array(\TEC\Common\Monolog\Logger::DEBUG => 1, \TEC\Common\Monolog\Logger::INFO => 2, \TEC\Common\Monolog\Logger::NOTICE => 3, \TEC\Common\Monolog\Logger::WARNING => 4, \TEC\Common\Monolog\Logger::ERROR => 5, \TEC\Common\Monolog\Logger::CRITICAL => 6, \TEC\Common\Monolog\Logger::ALERT => 7, \TEC\Common\Monolog\Logger::EMERGENCY => 0);
        /**
         * Construct
         *
         * @param  int                       $level
         * @param  bool                      $bubble
         * @throws MissingExtensionException
         */
        public function __construct($level = \TEC\Common\Monolog\Logger::DEBUG, $bubble = true)
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function write(array $record)
        {
        }
        /**
         * Write a record to Zend Monitor
         *
         * @param int    $level
         * @param string $message
         * @param array  $formatted
         */
        protected function writeZendMonitorCustomEvent($level, $message, $formatted)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getDefaultFormatter()
        {
        }
        /**
         * Get the level map
         *
         * @return array
         */
        public function getLevelMap()
        {
        }
    }
}
namespace TEC\Common\Monolog\Processor {
    /**
     * An optional interface to allow labelling Monolog processors.
     *
     * @author Nicolas Grekas <p@tchwork.com>
     */
    interface ProcessorInterface
    {
        /**
         * @return array The processed records
         */
        public function __invoke(array $records);
    }
    /**
     * Injects Git branch and Git commit SHA in all records
     *
     * @author Nick Otter
     * @author Jordi Boggiano <j.boggiano@seld.be>
     */
    class GitProcessor implements \TEC\Common\Monolog\Processor\ProcessorInterface
    {
        public function __construct($level = \TEC\Common\Monolog\Logger::DEBUG)
        {
        }
        /**
         * @param  array $record
         * @return array
         */
        public function __invoke(array $record)
        {
        }
    }
    /**
     * Injects line/file:class/function where the log message came from
     *
     * Warning: This only works if the handler processes the logs directly.
     * If you put the processor on a handler that is behind a FingersCrossedHandler
     * for example, the processor will only be called once the trigger level is reached,
     * and all the log records will have the same file/line/.. data from the call that
     * triggered the FingersCrossedHandler.
     *
     * @author Jordi Boggiano <j.boggiano@seld.be>
     */
    class IntrospectionProcessor implements \TEC\Common\Monolog\Processor\ProcessorInterface
    {
        public function __construct($level = \TEC\Common\Monolog\Logger::DEBUG, array $skipClassesPartials = array(), $skipStackFramesCount = 0)
        {
        }
        /**
         * @param  array $record
         * @return array
         */
        public function __invoke(array $record)
        {
        }
    }
    /**
     * Some methods that are common for all memory processors
     *
     * @author Rob Jensen
     */
    abstract class MemoryProcessor implements \TEC\Common\Monolog\Processor\ProcessorInterface
    {
        /**
         * @var bool If true, get the real size of memory allocated from system. Else, only the memory used by emalloc() is reported.
         */
        protected $realUsage;
        /**
         * @var bool If true, then format memory size to human readable string (MB, KB, B depending on size)
         */
        protected $useFormatting;
        /**
         * @param bool $realUsage     Set this to true to get the real size of memory allocated from system.
         * @param bool $useFormatting If true, then format memory size to human readable string (MB, KB, B depending on size)
         */
        public function __construct($realUsage = true, $useFormatting = true)
        {
        }
        /**
         * Formats bytes into a human readable string if $this->useFormatting is true, otherwise return $bytes as is
         *
         * @param  int        $bytes
         * @return string|int Formatted string if $this->useFormatting is true, otherwise return $bytes as is
         */
        protected function formatBytes($bytes)
        {
        }
    }
    /**
     * Injects memory_get_peak_usage in all records
     *
     * @see TEC\Common\Monolog\Processor\MemoryProcessor::__construct() for options
     * @author Rob Jensen
     */
    class MemoryPeakUsageProcessor extends \TEC\Common\Monolog\Processor\MemoryProcessor
    {
        /**
         * @param  array $record
         * @return array
         */
        public function __invoke(array $record)
        {
        }
    }
    /**
     * Injects memory_get_usage in all records
     *
     * @see TEC\Common\Monolog\Processor\MemoryProcessor::__construct() for options
     * @author Rob Jensen
     */
    class MemoryUsageProcessor extends \TEC\Common\Monolog\Processor\MemoryProcessor
    {
        /**
         * @param  array $record
         * @return array
         */
        public function __invoke(array $record)
        {
        }
    }
    /**
     * Injects Hg branch and Hg revision number in all records
     *
     * @author Jonathan A. Schweder <jonathanschweder@gmail.com>
     */
    class MercurialProcessor implements \TEC\Common\Monolog\Processor\ProcessorInterface
    {
        public function __construct($level = \TEC\Common\Monolog\Logger::DEBUG)
        {
        }
        /**
         * @param  array $record
         * @return array
         */
        public function __invoke(array $record)
        {
        }
    }
    /**
     * Adds value of getmypid into records
     *
     * @author Andreas Hörnicke
     */
    class ProcessIdProcessor implements \TEC\Common\Monolog\Processor\ProcessorInterface
    {
        /**
         * @param  array $record
         * @return array
         */
        public function __invoke(array $record)
        {
        }
    }
    /**
     * Processes a record's message according to PSR-3 rules
     *
     * It replaces {foo} with the value from $context['foo']
     *
     * @author Jordi Boggiano <j.boggiano@seld.be>
     */
    class PsrLogMessageProcessor implements \TEC\Common\Monolog\Processor\ProcessorInterface
    {
        /**
         * @param  array $record
         * @return array
         */
        public function __invoke(array $record)
        {
        }
    }
    /**
     * Adds a tags array into record
     *
     * @author Martijn Riemers
     */
    class TagProcessor implements \TEC\Common\Monolog\Processor\ProcessorInterface
    {
        public function __construct(array $tags = array())
        {
        }
        public function addTags(array $tags = array())
        {
        }
        public function setTags(array $tags = array())
        {
        }
        public function __invoke(array $record)
        {
        }
    }
    /**
     * Adds a unique identifier into records
     *
     * @author Simon Mönch <sm@webfactory.de>
     */
    class UidProcessor implements \TEC\Common\Monolog\Processor\ProcessorInterface, \TEC\Common\Monolog\ResettableInterface
    {
        public function __construct($length = 7)
        {
        }
        public function __invoke(array $record)
        {
        }
        /**
         * @return string
         */
        public function getUid()
        {
        }
        public function reset()
        {
        }
    }
    /**
     * Injects url/method and remote IP of the current web request in all records
     *
     * @author Jordi Boggiano <j.boggiano@seld.be>
     */
    class WebProcessor implements \TEC\Common\Monolog\Processor\ProcessorInterface
    {
        /**
         * @var array|\ArrayAccess
         */
        protected $serverData;
        /**
         * Default fields
         *
         * Array is structured as [key in record.extra => key in $serverData]
         *
         * @var array
         */
        protected $extraFields = array('url' => 'REQUEST_URI', 'ip' => 'REMOTE_ADDR', 'http_method' => 'REQUEST_METHOD', 'server' => 'SERVER_NAME', 'referrer' => 'HTTP_REFERER');
        /**
         * @param array|\ArrayAccess $serverData  Array or object w/ ArrayAccess that provides access to the $_SERVER data
         * @param array|null         $extraFields Field names and the related key inside $serverData to be added. If not provided it defaults to: url, ip, http_method, server, referrer
         */
        public function __construct($serverData = null, array $extraFields = null)
        {
        }
        /**
         * @param  array $record
         * @return array
         */
        public function __invoke(array $record)
        {
        }
        /**
         * @param  string $extraName
         * @param  string $serverName
         * @return $this
         */
        public function addExtraField($extraName, $serverName)
        {
        }
    }
}
namespace TEC\Common\Monolog {
    /**
     * Monolog log registry
     *
     * Allows to get `Logger` instances in the global scope
     * via static method calls on this class.
     *
     * <code>
     * $application = new TEC\Common\Monolog\Logger('application');
     * $api = new TEC\Common\Monolog\Logger('api');
     *
     * Monolog\Registry::addLogger($application);
     * Monolog\Registry::addLogger($api);
     *
     * function testLogger()
     * {
     *     Monolog\Registry::api()->addError('Sent to $api Logger instance');
     *     Monolog\Registry::application()->addError('Sent to $application Logger instance');
     * }
     * </code>
     *
     * @author Tomas Tatarko <tomas@tatarko.sk>
     */
    class Registry
    {
        /**
         * Adds new logging channel to the registry
         *
         * @param  Logger                    $logger    Instance of the logging channel
         * @param  string|null               $name      Name of the logging channel ($logger->getName() by default)
         * @param  bool                      $overwrite Overwrite instance in the registry if the given name already exists?
         * @throws \InvalidArgumentException If $overwrite set to false and named Logger instance already exists
         */
        public static function addLogger(\TEC\Common\Monolog\Logger $logger, $name = null, $overwrite = false)
        {
        }
        /**
         * Checks if such logging channel exists by name or instance
         *
         * @param string|Logger $logger Name or logger instance
         */
        public static function hasLogger($logger)
        {
        }
        /**
         * Removes instance from registry by name or instance
         *
         * @param string|Logger $logger Name or logger instance
         */
        public static function removeLogger($logger)
        {
        }
        /**
         * Clears the registry
         */
        public static function clear()
        {
        }
        /**
         * Gets Logger instance from the registry
         *
         * @param  string                    $name Name of the requested Logger instance
         * @throws \InvalidArgumentException If named Logger instance is not in the registry
         * @return Logger                    Requested instance of Logger
         */
        public static function getInstance($name)
        {
        }
        /**
         * Gets Logger instance from the registry via static method call
         *
         * @param  string                    $name      Name of the requested Logger instance
         * @param  array                     $arguments Arguments passed to static method call
         * @throws \InvalidArgumentException If named Logger instance is not in the registry
         * @return Logger                    Requested instance of Logger
         */
        public static function __callStatic($name, $arguments)
        {
        }
    }
    /**
     * Monolog POSIX signal handler
     *
     * @author Robert Gust-Bardon <robert@gust-bardon.org>
     */
    class SignalHandler
    {
        public function __construct(\TEC\Common\Psr\Log\LoggerInterface $logger)
        {
        }
        public function registerSignalHandler($signo, $level = \TEC\Common\Psr\Log\LogLevel::CRITICAL, $callPrevious = true, $restartSyscalls = true, $async = true)
        {
        }
        public function handleSignal($signo, array $siginfo = null)
        {
        }
    }
    class Utils
    {
        /**
         * @internal
         */
        public static function getClass($object)
        {
        }
    }
}
namespace TEC\Common\Psr\Log {
    /**
     * This is a simple Logger implementation that other Loggers can inherit from.
     *
     * It simply delegates all log-level-specific methods to the `log` method to
     * reduce boilerplate code that a simple Logger that does the same thing with
     * messages regardless of the error level has to implement.
     */
    abstract class AbstractLogger implements \TEC\Common\Psr\Log\LoggerInterface
    {
        /**
         * System is unusable.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function emergency($message, array $context = array())
        {
        }
        /**
         * Action must be taken immediately.
         *
         * Example: Entire website down, database unavailable, etc. This should
         * trigger the SMS alerts and wake you up.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function alert($message, array $context = array())
        {
        }
        /**
         * Critical conditions.
         *
         * Example: Application component unavailable, unexpected exception.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function critical($message, array $context = array())
        {
        }
        /**
         * Runtime errors that do not require immediate action but should typically
         * be logged and monitored.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function error($message, array $context = array())
        {
        }
        /**
         * Exceptional occurrences that are not errors.
         *
         * Example: Use of deprecated APIs, poor use of an API, undesirable things
         * that are not necessarily wrong.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function warning($message, array $context = array())
        {
        }
        /**
         * Normal but significant events.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function notice($message, array $context = array())
        {
        }
        /**
         * Interesting events.
         *
         * Example: User logs in, SQL logs.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function info($message, array $context = array())
        {
        }
        /**
         * Detailed debug information.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function debug($message, array $context = array())
        {
        }
    }
    class InvalidArgumentException extends \InvalidArgumentException
    {
    }
    /**
     * Describes log levels.
     */
    class LogLevel
    {
        const EMERGENCY = 'emergency';
        const ALERT = 'alert';
        const CRITICAL = 'critical';
        const ERROR = 'error';
        const WARNING = 'warning';
        const NOTICE = 'notice';
        const INFO = 'info';
        const DEBUG = 'debug';
    }
    /**
     * Describes a logger-aware instance.
     */
    interface LoggerAwareInterface
    {
        /**
         * Sets a logger instance on the object.
         *
         * @param LoggerInterface $logger
         *
         * @return void
         */
        public function setLogger(\TEC\Common\Psr\Log\LoggerInterface $logger);
    }
    /**
     * Basic Implementation of LoggerAwareInterface.
     */
    trait LoggerAwareTrait
    {
        /**
         * The logger instance.
         *
         * @var LoggerInterface|null
         */
        protected $logger;
        /**
         * Sets a logger.
         *
         * @param LoggerInterface $logger
         */
        public function setLogger(\TEC\Common\Psr\Log\LoggerInterface $logger)
        {
        }
    }
    /**
     * This is a simple Logger trait that classes unable to extend AbstractLogger
     * (because they extend another class, etc) can include.
     *
     * It simply delegates all log-level-specific methods to the `log` method to
     * reduce boilerplate code that a simple Logger that does the same thing with
     * messages regardless of the error level has to implement.
     */
    trait LoggerTrait
    {
        /**
         * System is unusable.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function emergency($message, array $context = array())
        {
        }
        /**
         * Action must be taken immediately.
         *
         * Example: Entire website down, database unavailable, etc. This should
         * trigger the SMS alerts and wake you up.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function alert($message, array $context = array())
        {
        }
        /**
         * Critical conditions.
         *
         * Example: Application component unavailable, unexpected exception.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function critical($message, array $context = array())
        {
        }
        /**
         * Runtime errors that do not require immediate action but should typically
         * be logged and monitored.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function error($message, array $context = array())
        {
        }
        /**
         * Exceptional occurrences that are not errors.
         *
         * Example: Use of deprecated APIs, poor use of an API, undesirable things
         * that are not necessarily wrong.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function warning($message, array $context = array())
        {
        }
        /**
         * Normal but significant events.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function notice($message, array $context = array())
        {
        }
        /**
         * Interesting events.
         *
         * Example: User logs in, SQL logs.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function info($message, array $context = array())
        {
        }
        /**
         * Detailed debug information.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function debug($message, array $context = array())
        {
        }
        /**
         * Logs with an arbitrary level.
         *
         * @param mixed  $level
         * @param string $message
         * @param array  $context
         *
         * @return void
         *
         * @throws \TEC\Common\Psr\Log\InvalidArgumentException
         */
        public abstract function log($level, $message, array $context = array());
    }
    /**
     * This Logger can be used to avoid conditional log calls.
     *
     * Logging should always be optional, and if no logger is provided to your
     * library creating a NullLogger instance to have something to throw logs at
     * is a good way to avoid littering your code with `if ($this->logger) { }`
     * blocks.
     */
    class NullLogger extends \TEC\Common\Psr\Log\AbstractLogger
    {
        /**
         * Logs with an arbitrary level.
         *
         * @param mixed  $level
         * @param string $message
         * @param array  $context
         *
         * @return void
         *
         * @throws \TEC\Common\Psr\Log\InvalidArgumentException
         */
        public function log($level, $message, array $context = array())
        {
        }
    }
}
namespace TEC\Common\Psr\Log\Test {
    /**
     * This class is internal and does not follow the BC promise.
     *
     * Do NOT use this class in any way.
     *
     * @internal
     */
    class DummyTest
    {
        public function __toString()
        {
        }
    }
    /**
     * Provides a base test class for ensuring compliance with the LoggerInterface.
     *
     * Implementors can extend the class and implement abstract methods to run this
     * as part of their test suite.
     */
    abstract class LoggerInterfaceTest extends \PHPUnit\Framework\TestCase
    {
        /**
         * @return LoggerInterface
         */
        public abstract function getLogger();
        /**
         * This must return the log messages in order.
         *
         * The simple formatting of the messages is: "<LOG LEVEL> <MESSAGE>".
         *
         * Example ->error('Foo') would yield "error Foo".
         *
         * @return string[]
         */
        public abstract function getLogs();
        public function testImplements()
        {
        }
        /**
         * @dataProvider provideLevelsAndMessages
         */
        public function testLogsAtAllLevels($level, $message)
        {
        }
        public function provideLevelsAndMessages()
        {
        }
        /**
         * @expectedException \TEC\Common\Psr\Log\InvalidArgumentException
         */
        public function testThrowsOnInvalidLevel()
        {
        }
        public function testContextReplacement()
        {
        }
        public function testObjectCastToString()
        {
        }
        public function testContextCanContainAnything()
        {
        }
        public function testContextExceptionKeyCanBeExceptionOrOtherValues()
        {
        }
    }
    /**
     * Used for testing purposes.
     *
     * It records all records and gives you access to them for verification.
     *
     * @method bool hasEmergency($record)
     * @method bool hasAlert($record)
     * @method bool hasCritical($record)
     * @method bool hasError($record)
     * @method bool hasWarning($record)
     * @method bool hasNotice($record)
     * @method bool hasInfo($record)
     * @method bool hasDebug($record)
     *
     * @method bool hasEmergencyRecords()
     * @method bool hasAlertRecords()
     * @method bool hasCriticalRecords()
     * @method bool hasErrorRecords()
     * @method bool hasWarningRecords()
     * @method bool hasNoticeRecords()
     * @method bool hasInfoRecords()
     * @method bool hasDebugRecords()
     *
     * @method bool hasEmergencyThatContains($message)
     * @method bool hasAlertThatContains($message)
     * @method bool hasCriticalThatContains($message)
     * @method bool hasErrorThatContains($message)
     * @method bool hasWarningThatContains($message)
     * @method bool hasNoticeThatContains($message)
     * @method bool hasInfoThatContains($message)
     * @method bool hasDebugThatContains($message)
     *
     * @method bool hasEmergencyThatMatches($message)
     * @method bool hasAlertThatMatches($message)
     * @method bool hasCriticalThatMatches($message)
     * @method bool hasErrorThatMatches($message)
     * @method bool hasWarningThatMatches($message)
     * @method bool hasNoticeThatMatches($message)
     * @method bool hasInfoThatMatches($message)
     * @method bool hasDebugThatMatches($message)
     *
     * @method bool hasEmergencyThatPasses($message)
     * @method bool hasAlertThatPasses($message)
     * @method bool hasCriticalThatPasses($message)
     * @method bool hasErrorThatPasses($message)
     * @method bool hasWarningThatPasses($message)
     * @method bool hasNoticeThatPasses($message)
     * @method bool hasInfoThatPasses($message)
     * @method bool hasDebugThatPasses($message)
     */
    class TestLogger extends \TEC\Common\Psr\Log\AbstractLogger
    {
        /**
         * @var array
         */
        public $records = [];
        public $recordsByLevel = [];
        /**
         * @inheritdoc
         */
        public function log($level, $message, array $context = [])
        {
        }
        public function hasRecords($level)
        {
        }
        public function hasRecord($record, $level)
        {
        }
        public function hasRecordThatContains($message, $level)
        {
        }
        public function hasRecordThatMatches($regex, $level)
        {
        }
        public function hasRecordThatPasses(callable $predicate, $level)
        {
        }
        public function __call($method, $args)
        {
        }
        public function reset()
        {
        }
    }
}
namespace TEC\Common\StellarWP\DB {
    class Config
    {
        /**
         * @var string
         */
        protected static $databaseQueryException = \TEC\Common\StellarWP\DB\Database\Exceptions\DatabaseQueryException::class;
        /**
         * @var string
         */
        protected static $hookPrefix = '';
        /**
         * Gets the DatabaseQueryException class.
         *
         * @return string
         */
        public static function getDatabaseQueryException() : string
        {
        }
        /**
         * Gets the hook prefix.
         *
         * @return string
         */
        public static function getHookPrefix() : string
        {
        }
        /**
         * Resets this class back to the defaults.
         */
        public static function reset()
        {
        }
        /**
         * Sets the DatabaseQueryException class.
         *
         * @param string $class Class name of the DatabaseQueryException to use.
         *
         * @return void
         */
        public static function setDatabaseQueryException(string $class)
        {
        }
        /**
         * Sets the hook prefix.
         *
         * @param string $prefix The prefix to add to hooks.
         *
         * @return void
         */
        public static function setHookPrefix(string $prefix)
        {
        }
    }
    /**
     * Class DB
     *
     * A static decorator for the $wpdb class and decorator function which does SQL error checking when performing queries.
     * If a SQL error occurs a DatabaseQueryException is thrown.
     *
     * @method static int|bool query(string $query)
     * @method static int|false insert(string $table, array $data, array|string|null $format = null)
     * @method static int|false delete(string $table, array $where, array|string|null $where_format = null)
     * @method static int|false update(string $table, array $data, array $where, array|string|null $format = null, array|string|null $where_format = null)
     * @method static int|false replace(string $table, array $data, array|string|null $format = null)
     * @method static null|string get_var(string|null $query = null, int $x = 0, int $y = 0)
     * @method static array|object|null|void get_row(string|null $query = null, string $output = OBJECT, int $y = 0)
     * @method static array get_col(string|null $query = null, int $x = 0)
     * @method static array|object|null get_results(string|null $query = null, string $output = OBJECT)
     * @method static string get_charset_collate()
     * @method static string esc_like(string $text)
     * @method static string remove_placeholder_escape(string $text)
     * @method static Config config()
     */
    class DB
    {
        /**
         * Initializes the service provider.
         *
         * @since 1.0.0
         */
        public static function init() : void
        {
        }
        /**
         * Runs the dbDelta function and returns a WP_Error with any errors that occurred during the process
         *
         * @see dbDelta() for parameter and return details
         *
         * @since 1.0.0
         *
         * @param $delta
         *
         * @return array
         * @throws DatabaseQueryException
         */
        public static function delta($delta)
        {
        }
        /**
         * A convenience method for the $wpdb->prepare method
         *
         * @see WPDB::prepare() for usage details
         *
         * @since 1.0.0
         *
         * @param string $query
         * @param mixed ...$args
         *
         * @return false|mixed
         */
        public static function prepare($query, ...$args)
        {
        }
        /**
         * Magic method which calls the static method on the $wpdb while performing error checking
         *
         * @since 1.0.0 add givewp_db_pre_query action
         * @since 1.0.0
         *
         * @param $name
         * @param $arguments
         *
         * @return mixed
         * @throws DatabaseQueryException
         */
        public static function __callStatic($name, $arguments)
        {
        }
        /**
         * Get last insert ID
         *
         * @since 1.0.0
         * @return int
         */
        public static function last_insert_id()
        {
        }
        /**
         * Prefix given table name with $wpdb->prefix
         *
         * @param string $tableName
         *
         * @return string
         */
        public static function prefix($tableName)
        {
        }
        /**
         * Create QueryBuilder instance
         *
         * @param string|RawSQL $table
         * @param string|null  $alias
         *
         * @return QueryBuilder
         */
        public static function table($table, $alias = '')
        {
        }
        /**
         * Runs a transaction. If the callable works then the transaction is committed. If the callable throws an exception
         * then the transaction is rolled back.
         *
         * @since 1.0.0
         *
         * @param callable $callback
         *
         * @return void
         * @throws Exception
         */
        public static function transaction(callable $callback)
        {
        }
        /**
         * Manually starts a transaction
         *
         * @since 1.0.0
         *
         * @return void
         */
        public static function beginTransaction()
        {
        }
        /**
         * Manually rolls back a transaction
         *
         * @since 1.0.0
         *
         * @return void
         */
        public static function rollback()
        {
        }
        /**
         * Manually commits a transaction
         *
         * @since 1.0.0
         *
         * @return void
         */
        public static function commit()
        {
        }
        /**
         * Used as a flag to tell QueryBuilder not to process the provided SQL
         * If $args are provided, we will assume that dev wants to use DB::prepare method with raw SQL
         *
         * @param string $sql
         * @param array ...$args
         *
         * @return RawSQL
         */
        public static function raw($sql, ...$args)
        {
        }
    }
}
namespace TEC\Common\StellarWP\DB\Database\Actions {
    class EnableBigSqlSelects
    {
        /**
         * @since 1.0.0
         *
         * Enables mysql big selects for the session using a session system variable.
         *
         * This is necessary for hosts that have an arbitrary MAX_JOIN_SIZE limit, which prevents more complex queries from
         * running properly. Setting SQL_BIG_SELECTS ignores this limit. This is also done by WooCommerce, supporting the
         * idea that this is a viable option. There also doesn't seem to be a way for hosts to prevent this.
         *
         * @see https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_sql_big_selects
         * @see https://dev.mysql.com/doc/refman/5.7/en/system-variable-privileges.html
         *
         */
        public function set_var()
        {
        }
    }
}
namespace TEC\Common\StellarWP\DB\Database\Exceptions {
    /**
     * Class DatabaseQueryException
     *
     * An exception for when errors occurred within the database while performing a query, which stores the SQL errors the
     * database returned
     *
     * @since 1.0.0
     */
    class DatabaseQueryException extends \Exception
    {
        /**
         * @since 1.0.0
         *
         * @param array<string, string[]> $queryErrors
         */
        public function __construct(string $query, array $queryErrors, string $message = 'Database Query', $code = 0, \Throwable $previous = null)
        {
        }
        /**
         * Returns the query errors
         *
         * @since 1.0.0
         *
         * @return array<string, string[]>
         */
        public function getQueryErrors() : array
        {
        }
        public function getQuery() : string
        {
        }
    }
}
namespace TEC\Common\StellarWP\DB\Database {
    class Provider
    {
        /**
         * @var Actions\EnableBigSqlSelects
         */
        public $action_enable_big_sql_selects;
        /**
         * Binds and sets up implementations.
         *
         * @since 1.0.0
         */
        public function register()
        {
        }
        /**
         * Fires the EnableBigSqlSelects action.
         */
        public function enable_big_sql_selects()
        {
        }
    }
}
namespace TEC\Common\StellarWP\DB\QueryBuilder\Clauses {
    /**
     * @since 1.0.0
     */
    class From
    {
        /**
         * @var string|RawSQL
         */
        public $table;
        /**
         * @var string
         */
        public $alias;
        /**
         * @param  string|RawSQL  $table
         * @param  string|null  $alias
         */
        public function __construct($table, $alias = '')
        {
        }
    }
    /**
     * @since 1.0.0
     */
    class Having
    {
        /**
         * @var string
         */
        public $column;
        /**
         * @var string
         */
        public $comparisonOperator;
        /**
         * @var string|int
         */
        public $value;
        /**
         * @var string
         */
        public $logicalOperator;
        /**
         * @var string|null
         */
        public $mathFunction;
        /**
         * @param  string  $column
         * @param  string  $comparisonOperator
         * @param  string|int  $value
         * @param  string|null  $logicalOperator
         * @param  string  $mathFunction
         */
        public function __construct($column, $comparisonOperator, $value, $logicalOperator, $mathFunction = null)
        {
        }
    }
    /**
     * @since 1.0.0
     */
    class Join
    {
        /**
         * @var string
         */
        public $table;
        /**
         * @var string
         */
        public $joinType;
        /**
         * @var string|null
         */
        public $alias;
        /**
         * @param  string  $table
         * @param  string  $joinType  \StellarWP\DB\QueryBuilder\Types\JoinType
         * @param  string|null  $alias
         */
        public function __construct($joinType, $table, $alias = '')
        {
        }
    }
    /**
     * @since 1.0.0
     */
    class JoinCondition
    {
        /**
         * @var string
         */
        public $logicalOperator;
        /**
         * @var string
         */
        public $column1;
        /**
         * @var mixed
         */
        public $column2;
        /**
         * @var bool
         */
        public $quote;
        /**
         * @param  string  $logicalOperator
         * @param  string  $column1
         * @param  string  $column2
         * @param  bool  $quote
         */
        public function __construct($logicalOperator, $column1, $column2, $quote = false)
        {
        }
    }
    /**
     * @since 1.0.0
     */
    class MetaTable
    {
        /**
         * @var string
         */
        public $tableName;
        /**
         * @var string
         */
        public $keyColumnName;
        /**
         * @var string
         */
        public $valueColumnName;
        /**
         * @param  string  $table
         * @param  string  $metaKeyColumnName
         * @param  string  $metaValueColumnName
         */
        public function __construct($table, $metaKeyColumnName, $metaValueColumnName)
        {
        }
    }
    /**
     * @since 1.0.0
     */
    class OrderBy
    {
        /**
         * @var string
         */
        public $column;
        /**
         * @var string
         */
        public $direction;
        /**
         * @param $column
         * @param $direction
         */
        public function __construct($column, $direction)
        {
        }
    }
    /**
     * @since 1.0.0
     */
    class RawSQL
    {
        /**
         * @var string
         */
        public $sql;
        /**
         * @param  string  $sql
         * @param  array<int,mixed>|string|null  $args
         */
        public function __construct($sql, $args = null)
        {
        }
    }
    /**
     * @since 1.0.0
     */
    class Select
    {
        /**
         * @var string
         */
        public $column;
        /**
         * @var string
         */
        public $alias;
        /**
         * @param  string  $column
         * @param  string|null  $alias
         */
        public function __construct($column, $alias = '')
        {
        }
    }
    /**
     * @since 1.0.0
     */
    class Union
    {
        /**
         * @var QueryBuilder
         */
        public $builder;
        /**
         * @var bool
         */
        public $all = false;
        /**
         * @param  QueryBuilder  $builder
         * @param  bool  $all
         */
        public function __construct($builder, $all = false)
        {
        }
    }
    /**
     * @since 1.0.0
     */
    class Where
    {
        /**
         * @var string
         */
        public $column;
        /**
         * @var mixed
         */
        public $value;
        /**
         * @var string
         */
        public $comparisonOperator;
        /**
         * @var string
         */
        public $logicalOperator;
        /**
         * @var string|null
         */
        public $type;
        /**
         * @param  string  $column
         * @param  string  $value
         * @param  string  $comparisonOperator
         * @param  string|null  $logicalOperator
         */
        public function __construct($column, $value, $comparisonOperator, $logicalOperator)
        {
        }
    }
}
namespace TEC\Common\StellarWP\DB\QueryBuilder\Concerns {
    /**
     * @since 1.0.0
     */
    trait Aggregate
    {
        /**
         * Returns the number of rows returned by a query
         *
         * @since 1.0.0
         * @param  null|string  $column
         *
         * @return int
         */
        public function count($column = null)
        {
        }
        /**
         * Returns the total sum in a set of values
         *
         * @since 1.0.0
         * @param  string  $column
         *
         * @return int|float
         */
        public function sum($column)
        {
        }
        /**
         * Get the average value in a set of values
         *
         * @since 1.0.0
         * @param  string  $column
         *
         * @return int|float
         */
        public function avg($column)
        {
        }
        /**
         * Returns the minimum value in a set of values
         *
         * @since 1.0.0
         * @param  string  $column
         *
         * @return int|float
         */
        public function min($column)
        {
        }
        /**
         * Returns the maximum value in a set of values
         *
         * @since 1.0.0
         * @param  string  $column
         *
         * @return int|float
         */
        public function max($column)
        {
        }
    }
    /**
     * @since 1.0.0
     */
    trait CRUD
    {
        /**
         * @see https://developer.wordpress.org/reference/classes/wpdb/insert/
         *
         * @since 1.0.0
         *
         * @param  array|string  $format
         *
         * @param  array  $data
         * @return false|int
         *
         */
        public function insert($data, $format = null)
        {
        }
        /**
         * @see https://developer.wordpress.org/reference/classes/wpdb/update/
         *
         * @since 1.0.0
         *
         * @param  array  $data
         * @param  array|string|null  $format
         *
         * @return false|int
         *
         */
        public function update($data, $format = null)
        {
        }
        /**
         * @since 1.0.0
         *
         * @return false|int
         *
         * @see https://developer.wordpress.org/reference/classes/wpdb/delete/
         */
        public function delete()
        {
        }
        /**
         * Get results
         *
         * @since 1.0.0
         *
         * @param  string $output ARRAY_A|ARRAY_N|OBJECT|OBJECT_K
         *
         * @return array|object|null
         */
        public function getAll($output = OBJECT)
        {
        }
        /**
         * Get row
         *
         * @since 1.0.0
         *
         * @param  string $output ARRAY_A|ARRAY_N|OBJECT|OBJECT_K
         *
         * @return array|object|null
         */
        public function get($output = OBJECT)
        {
        }
        /**
         * @since 1.0.0
         *
         * @return string
         */
        private function getTable()
        {
        }
        /**
         * @since 1.0.0
         *
         * @return array[]
         */
        private function getWhere()
        {
        }
    }
    /**
     * @since 1.0.0
     */
    trait FromClause
    {
        /**
         * @var From[]
         */
        protected $froms = [];
        /**
         * @param  string|RawSQL  $table
         * @param  string|null  $alias
         *
         * @return $this
         */
        public function from($table, $alias = '')
        {
        }
        /**
         * @return array|string[]
         */
        protected function getFromSQL()
        {
        }
    }
    /**
     * @since 1.0.0
     */
    trait GroupByStatement
    {
        /**
         * @var array
         */
        protected $groupByColumns = [];
        /**
         * @return $this
         */
        public function groupBy($tableColumn)
        {
        }
        protected function getGroupBySQL()
        {
        }
    }
    /**
     * @since 1.0.0
     */
    trait HavingClause
    {
        /**
         * @var Having[]|RawSQL[]
         */
        protected $havings = [];
        /**
         * @var bool
         */
        private $includeHavingKeyword = true;
        /**
         * @param  string  $column
         * @param  string  $comparisonOperator
         * @param  string  $value
         * @param  null|string  $mathFunction  \StellarWP\DB\QueryBuilder\Types\Math
         *
         * @return $this
         *
         */
        public function having($column, $comparisonOperator, $value, $mathFunction = null)
        {
        }
        /**
         * @param  string  $column
         * @param  string  $comparisonOperator
         * @param  string  $value
         * @param  null|string  $mathFunction  \StellarWP\DB\QueryBuilder\Types\Math
         *
         * @return $this
         */
        public function orHaving($column, $comparisonOperator, $value, $mathFunction = null)
        {
        }
        /**
         * @param  string  $column
         * @param  string  $comparisonOperator
         * @param  string|int  $value
         *
         * @return $this
         */
        public function havingCount($column, $comparisonOperator, $value)
        {
        }
        /**
         * @param  string  $column
         * @param  string  $comparisonOperator
         * @param  string|int  $value
         *
         * @return $this
         */
        public function orHavingCount($column, $comparisonOperator, $value)
        {
        }
        /**
         * @param  string  $column
         * @param  string  $comparisonOperator
         * @param  string|int  $value
         *
         * @return $this
         */
        public function havingMin($column, $comparisonOperator, $value)
        {
        }
        /**
         * @param  string  $column
         * @param  string  $comparisonOperator
         * @param  string|int  $value
         *
         * @return $this
         */
        public function orHavingMin($column, $comparisonOperator, $value)
        {
        }
        /**
         * @param  string  $column
         * @param  string  $comparisonOperator
         * @param  string|int  $value
         *
         * @return $this
         */
        public function havingMax($column, $comparisonOperator, $value)
        {
        }
        /**
         * @param  string  $column
         * @param  string  $comparisonOperator
         * @param  string|int  $value
         *
         * @return $this
         */
        public function orHavingMax($column, $comparisonOperator, $value)
        {
        }
        /**
         * @param  string  $column
         * @param  string  $comparisonOperator
         * @param  string|int  $value
         *
         * @return $this
         */
        public function havingAvg($column, $comparisonOperator, $value)
        {
        }
        /**
         * @param  string  $column
         * @param  string  $comparisonOperator
         * @param  string|int  $value
         *
         * @return $this
         */
        public function orHavingAvg($column, $comparisonOperator, $value)
        {
        }
        /**
         * @param  string  $column
         * @param  string  $comparisonOperator
         * @param  string|int  $value
         *
         * @return $this
         */
        public function havingSum($column, $comparisonOperator, $value)
        {
        }
        /**
         * @param  string  $column
         * @param  string  $comparisonOperator
         * @param  string|int  $value
         *
         * @return $this
         */
        public function orHavingSum($column, $comparisonOperator, $value)
        {
        }
        /**
         * Add raw SQL HAVING clause
         *
         * @param  string  $sql
         * @param ...$args
         *
         * @return $this
         */
        public function havingRaw($sql, ...$args)
        {
        }
        /**
         * @return string[]
         */
        protected function getHavingSQL()
        {
        }
        /**
         * @param  Having  $having
         *
         * @return string
         */
        private function buildHavingSQL(\TEC\Common\StellarWP\DB\QueryBuilder\Clauses\Having $having)
        {
        }
    }
    /**
     * @since 1.0.0
     */
    trait JoinClause
    {
        /**
         * @var Closure[]|RawSQL[]
         */
        protected $joins = [];
        /**
         * Method used to build advanced JOIN queries, Check README.md for more info.
         * If you need to perform only simple JOINs with only one JOIN condition, then you don't need this method.
         *
         * @param  Closure  $callback  The closure will receive a StellarWP\DB\QueryBuilder\JoinQueryBuilder instance
         *
         * @return static
         */
        public function join($callback)
        {
        }
        /**
         * @param  string|RawSQL  $table
         * @param  string  $column1
         * @param  string  $column2
         * @param  string|null  $alias
         *
         * @return static
         */
        public function leftJoin($table, $column1, $column2, $alias = '')
        {
        }
        /**
         * @param  string|RawSQL  $table
         * @param  string  $column1
         * @param  string  $column2
         * @param  string|null  $alias
         *
         * @return static
         */
        public function innerJoin($table, $column1, $column2, $alias = '')
        {
        }
        /**
         * @param  string|RawSQL  $table
         * @param  string  $column1
         * @param  string  $column2
         * @param  string|null  $alias
         *
         * @return static
         */
        public function rightJoin($table, $column1, $column2, $alias = '')
        {
        }
        /**
         * Add raw SQL JOIN clause
         *
         * @param  string  $sql
         * @param ...$args
         *
         * @return static
         */
        public function joinRaw($sql, ...$args)
        {
        }
        /**
         * @return string[]
         */
        protected function getJoinSQL()
        {
        }
    }
    /**
     * @since 1.0.0
     */
    trait LimitStatement
    {
        /**
         * @var int
         */
        protected $limit;
        /**
         * @param  int  $limit
         *
         * @return $this
         */
        public function limit($limit)
        {
        }
        protected function getLimitSQL()
        {
        }
    }
    /**
     * @since 1.0.0
     */
    trait MetaQuery
    {
        /**
         * @var MetaTable[]
         */
        private $metaTablesConfigs = [];
        /**
         * @var string
         */
        private $defaultMetaKeyColumn = 'meta_key';
        /**
         * @var string
         */
        private $defaultMetaValueColumn = 'meta_value';
        /**
         * @param string|RawSQL $table
         * @param string $metaKeyColumn
         * @param string $metaValueColumn
         *
         * @return $this
         */
        public function configureMetaTable($table, $metaKeyColumn, $metaValueColumn)
        {
        }
        /**
         * @param string|RawSQL $table
         *
         * @return MetaTable
         */
        protected function getMetaTable($table)
        {
        }
        /**
         * Select meta columns
         *
         * @since 1.0.0 optimize group concat functionality
         * @since 1.0.0 add group concat functionality
         * @since 1.0.0
         *
         * @param  string|RawSQL  $table
         * @param  string  $foreignKey
         * @param  string  $primaryKey
         * @param  array|string  $columns
         *
         * @return $this
         */
        public function attachMeta($table, $foreignKey, $primaryKey, ...$columns)
        {
        }
    }
    /**
     * @since 1.0.0
     */
    trait OffsetStatement
    {
        /**
         * @var int
         */
        protected $offset;
        /**
         * @param  int  $offset
         *
         * @return $this
         */
        public function offset($offset)
        {
        }
        protected function getOffsetSQL()
        {
        }
    }
    /**
     * @since 1.0.0
     */
    trait OrderByStatement
    {
        /**
         * @var OrderBy[]
         */
        protected $orderBys = [];
        /**
         * @param  string  $column
         * @param  string  $direction  ASC|DESC
         *
         * @return $this
         */
        public function orderBy($column, $direction = 'ASC')
        {
        }
        /**
         * @return array|string[]
         */
        protected function getOrderBySQL()
        {
        }
    }
    /**
     * @since 1.0.0
     */
    trait SelectStatement
    {
        /**
         * @var Select[]|RawSQL[]
         */
        protected $selects = [];
        /**
         * @var bool
         */
        protected $distinct = false;
        /**
         * @var bool
         */
        private $includeSelectKeyword = true;
        /**
         * @param  array|string  $columns
         *
         * @return $this
         */
        public function select(...$columns)
        {
        }
        /**
         * Add raw SQL SELECT statement
         *
         * @param  string  $sql
         * @param ...$args
         */
        public function selectRaw($sql, ...$args)
        {
        }
        /**
         * Select distinct
         *
         * @return $this
         */
        public function distinct()
        {
        }
        /**
         * @return string[]
         */
        protected function getSelectSQL()
        {
        }
    }
    /**
     * @since 1.0.0
     */
    trait TablePrefix
    {
        /**
         * @param  string|RawSQL  $table
         *
         * @return string
         */
        public static function prefixTable($table)
        {
        }
    }
    /**
     * @since 1.0.0
     */
    trait UnionOperator
    {
        /**
         * @var array
         */
        protected $unions = [];
        /**
         * @param  QueryBuilder  $union
         *
         * @return $this
         */
        public function union(...$union)
        {
        }
        /**
         * @param  QueryBuilder  $union
         *
         * @return $this
         */
        public function unionAll(...$union)
        {
        }
        /**
         * @return array|string[]
         */
        protected function getUnionSQL()
        {
        }
    }
    /**
     * @since 1.0.0
     */
    trait WhereClause
    {
        /**
         * @var Where[]|RawSQL[]|string[]
         */
        protected $wheres = [];
        /**
         * @var bool
         */
        private $includeWhereKeyword = true;
        /**
         * @param  string|Closure|null  $column  The Closure will receive a StellarWP\DB\QueryBuilder\WhereQueryBuilder instance
         * @param  string|Closure|array|null  $value  The Closure will receive a StellarWP\DB\QueryBuilder\QueryBuilder instance
         * @param  string  $comparisonOperator
         * @param  string  $logicalOperator
         *
         * @return $this
         */
        private function setWhere($column, $value, $comparisonOperator, $logicalOperator)
        {
        }
        /**
         * @param  string|Closure|null  $column  The closure will receive a StellarWP\DB\QueryBuilder\WhereQueryBuilder instance
         * @param  string|Closure|array|null  $value  The closure will receive a StellarWP\DB\QueryBuilder\QueryBuilder instance
         * @param  string  $comparisonOperator
         *
         * @return $this
         */
        public function where($column, $value = null, $comparisonOperator = '=')
        {
        }
        /**
         * @param  string|Closure  $column
         * @param  string|Closure|array|null  $value
         * @param  string  $comparisonOperator
         *
         * @return $this
         */
        public function orWhere($column, $value = null, $comparisonOperator = '=')
        {
        }
        /**
         * @param  string  $column
         * @param  array|Closure  $value
         *
         * @return $this
         */
        public function whereIn($column, $value)
        {
        }
        /**
         * @param  string  $column
         * @param  array|Closure  $value
         *
         * @return $this
         */
        public function orWhereIn($column, $value)
        {
        }
        /**
         * @param  string  $column
         * @param  array|Closure  $value
         *
         * @return $this
         */
        public function whereNotIn($column, $value)
        {
        }
        /**
         * @param  string  $column
         * @param  array|Closure  $value
         *
         * @return $this
         */
        public function orWhereNotIn($column, $value)
        {
        }
        /**
         * @param  string  $column
         * @param  string|int  $min
         * @param  string|int  $max
         *
         * @return $this
         */
        public function whereBetween($column, $min, $max)
        {
        }
        /**
         * @param  string  $column
         * @param  string|int  $min
         * @param  string|int  $max
         *
         * @return $this
         */
        public function whereNotBetween($column, $min, $max)
        {
        }
        /**
         * @param  string  $column
         * @param  string|int  $min
         * @param  string|int  $max
         *
         * @return $this
         */
        public function orWhereBetween($column, $min, $max)
        {
        }
        /**
         * @param  string  $column
         * @param  string|int  $min
         * @param  string|int  $max
         *
         * @return $this
         */
        public function orWhereNotBetween($column, $min, $max)
        {
        }
        /**
         * @param  string  $column
         * @param  string  $value
         *
         * @return $this
         */
        public function whereLike($column, $value)
        {
        }
        /**
         * @param  string  $column
         * @param  string  $value
         *
         * @return $this
         */
        public function whereNotLike($column, $value)
        {
        }
        /**
         * @param  string  $column
         * @param  string  $value
         *
         * @return $this
         */
        public function orWhereLike($column, $value)
        {
        }
        /**
         * @param  string  $column
         * @param  string  $value
         *
         * @return $this
         */
        public function orWhereNotLike($column, $value)
        {
        }
        /**
         * @param  string  $column
         *
         * @return $this
         */
        public function whereIsNull($column)
        {
        }
        /**
         * @param  string  $column
         *
         * @return $this
         */
        public function orWhereIsNull($column)
        {
        }
        /**
         * @param  string  $column
         *
         * @return $this
         */
        public function whereIsNotNull($column)
        {
        }
        /**
         * @param  string  $column
         *
         * @return $this
         */
        public function orWhereIsNotNull($column)
        {
        }
        /**
         * @param  Closure  $callback  The closure will receive a StellarWP\DB\QueryBuilder\QueryBuilder instance
         *
         * @return $this
         */
        public function whereExists($callback)
        {
        }
        /**
         * @param  Closure  $callback  The closure will receive a StellarWP\DB\QueryBuilder\QueryBuilder instance
         *
         * @return $this
         */
        public function whereNotExists($callback)
        {
        }
        /**
         * Add raw SQL WHERE clause
         *
         * @param $sql
         * @param ...$args
         *
         * @return $this
         */
        public function whereRaw($sql, ...$args)
        {
        }
        /**
         * @return string[]
         */
        protected function getWhereSQL()
        {
        }
        /**
         * @param  Where  $where
         *
         * @return string
         */
        private function buildWhereSQL(\TEC\Common\StellarWP\DB\QueryBuilder\Clauses\Where $where)
        {
        }
    }
}
namespace TEC\Common\StellarWP\DB\QueryBuilder {
    /**
     * @since 1.0.0
     */
    class JoinQueryBuilder
    {
        /**
         * @param  string|RawSQL  $table
         * @param  string|null  $alias
         *
         * @return $this
         */
        public function leftJoin($table, $alias = '')
        {
        }
        /**
         * @param  string|RawSQL  $table
         * @param  string|null  $alias
         *
         * @return $this
         */
        public function rightJoin($table, $alias = '')
        {
        }
        /**
         * @param  string|RawSQL  $table
         * @param  string|null  $alias
         *
         * @return $this
         */
        public function innerJoin($table, $alias = '')
        {
        }
        /**
         * @param  string  $column1
         * @param  string  $column2
         * @param  bool  $quote
         *
         * @return $this
         */
        public function on($column1, $column2, $quote = false)
        {
        }
        /**
         * @param  string  $column1
         * @param  string  $column2
         * @param  bool  $quote
         *
         * @return $this
         */
        public function andOn($column1, $column2, $quote = null)
        {
        }
        /**
         * @param  string  $column1
         * @param  string  $column2
         * @param  bool  $quote
         *
         * @return $this
         */
        public function orOn($column1, $column2, $quote = null)
        {
        }
        /**
         * Add raw SQL JOIN clause
         *
         * @param string  $sql
         * @param array<int,mixed> ...$args
         */
        public function joinRaw($sql, ...$args)
        {
        }
        /**
         * @return Join[]|JoinCondition[]|RawSQL[]
         */
        public function getDefinedJoins()
        {
        }
    }
    /**
     * @since 1.0.0
     */
    class QueryBuilder
    {
        use \TEC\Common\StellarWP\DB\QueryBuilder\Concerns\Aggregate;
        use \TEC\Common\StellarWP\DB\QueryBuilder\Concerns\CRUD;
        use \TEC\Common\StellarWP\DB\QueryBuilder\Concerns\FromClause;
        use \TEC\Common\StellarWP\DB\QueryBuilder\Concerns\GroupByStatement;
        use \TEC\Common\StellarWP\DB\QueryBuilder\Concerns\HavingClause;
        use \TEC\Common\StellarWP\DB\QueryBuilder\Concerns\JoinClause;
        use \TEC\Common\StellarWP\DB\QueryBuilder\Concerns\LimitStatement;
        use \TEC\Common\StellarWP\DB\QueryBuilder\Concerns\MetaQuery;
        use \TEC\Common\StellarWP\DB\QueryBuilder\Concerns\OffsetStatement;
        use \TEC\Common\StellarWP\DB\QueryBuilder\Concerns\OrderByStatement;
        use \TEC\Common\StellarWP\DB\QueryBuilder\Concerns\SelectStatement;
        use \TEC\Common\StellarWP\DB\QueryBuilder\Concerns\TablePrefix;
        use \TEC\Common\StellarWP\DB\QueryBuilder\Concerns\UnionOperator;
        use \TEC\Common\StellarWP\DB\QueryBuilder\Concerns\WhereClause;
        /**
         * @return string
         */
        public function getSQL()
        {
        }
    }
}
namespace TEC\Common\StellarWP\DB\QueryBuilder\Types {
    /**
     * @since 1.0.0
     */
    abstract class Type
    {
        /**
         * Get Defined Types
         *
         * @return array
         */
        public static function getTypes()
        {
        }
    }
    /**
     * @since 1.0.0
     */
    class JoinType extends \TEC\Common\StellarWP\DB\QueryBuilder\Types\Type
    {
        const INNER = 'INNER';
        const LEFT = 'LEFT';
        const RIGHT = 'RIGHT';
    }
    /**
     * @since 1.0.0
     */
    class Math extends \TEC\Common\StellarWP\DB\QueryBuilder\Types\Type
    {
        const SUM = 'SUM';
        const MIN = 'MIN';
        const MAX = 'MAX';
        const COUNT = 'COUNT';
        const AVG = 'AVG';
    }
    /**
     * @since 1.0.0
     */
    class Operator extends \TEC\Common\StellarWP\DB\QueryBuilder\Types\Type
    {
        // _AND and _OR constants are prefixed with underscore to be compatible with PHP 5.6
        const _AND = 'AND';
        const _OR = 'OR';
        const ON = 'ON';
        const BETWEEN = 'BETWEEN';
        const NOTBETWEEN = 'NOT BETWEEN';
        const EXISTS = 'EXISTS';
        const NOTEXISTS = 'NOT EXISTS';
        const IN = 'IN';
        const NOTIN = 'NOT IN';
        const LIKE = 'LIKE';
        const NOTLIKE = 'NOT LIKE';
        const NOT = 'NOT';
        const ISNULL = 'IS NULL';
        const NOTNULL = 'IS NOT NULL';
    }
}
namespace TEC\Common\StellarWP\DB\QueryBuilder {
    /**
     * @since 1.0.0
     */
    class WhereQueryBuilder
    {
        use \TEC\Common\StellarWP\DB\QueryBuilder\Concerns\WhereClause;
        /**
         * @return string[]
         */
        public function getSQL()
        {
        }
    }
}
namespace TEC\Common\StellarWP\Installer {
    class Assets
    {
        /**
         * Has the installer script been enqueued?
         *
         * @since 1.0.0
         *
         * @var bool
         */
        protected $has_enqueued = false;
        /**
         * Get the URL for the JS.
         *
         * @since 1.1.0
         *
         * @param string $file The file to get the URL for.
         *
         * @return string
         */
        public function get_url(string $file) : string
        {
        }
        /**
         * Enqueues a script.
         *
         * @since 1.1.0
         *
         * @param string $handle The script handle.
         * @param array  $data   The data to pass to the script.
         *
         * @return void
         */
        public function enqueue_script(string $handle, array $data = []) : void
        {
        }
        /**
         * Enqueues the installer script.
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function enqueue_scripts() : void
        {
        }
        public function get_script_handle(string $slug) : string
        {
        }
        /**
         * Has the installer script been enqueued?
         *
         * @since 1.0.0
         *
         * @return bool
         */
        public function has_enqueued() : bool
        {
        }
        /**
         * Register the JS.
         *
         * @since 1.1.0
         *
         * @param string           $handle    Name of the script. Should be unique.
         * @param string|false     $src       Full URL of the script, or path of the script relative to the WordPress root directory.
         *                                    If source is set to false, script is an alias of other scripts it depends on.
         * @param string[]         $deps      Optional. An array of registered script handles this script depends on. Default empty array.
         * @param bool             $in_footer Optional. Whether to enqueue the script before `</body>` instead of in the `<head>`.
         *                                    Default 'false'.
         *
         * @return bool Whether the script has been registered. True on success, false on failure.
         */
        public function register_script($handle, $src, $deps, $in_footer) : bool
        {
        }
    }
    class Button
    {
        /**
         * Handler.
         *
         * @var Handler
         */
        protected $handler;
        /**
         * Selector.
         *
         * @var string
         */
        protected $selector;
        /**
         * Selector prefix.
         *
         * @var string
         */
        protected $selector_prefix;
        /**
         * Constructor.
         *
         * @since 1.0.0
         */
        public function __construct(\TEC\Common\StellarWP\Installer\Contracts\Handler $handler)
        {
        }
        /**
         * Gets the activated label.
         *
         * @return mixed|null
         */
        protected function get_activated_label()
        {
        }
        /**
         * Gets the activating label.
         *
         * @return mixed|null
         */
        protected function get_activating_label()
        {
        }
        protected function get_classes()
        {
        }
        /**
         * Gets the button id.
         *
         * @return mixed|null
         */
        protected function get_id()
        {
        }
        /**
         * Gets the installed label.
         *
         * @return mixed|null
         */
        protected function get_installed_label()
        {
        }
        /**
         * Gets the installing label.
         *
         * @return mixed|null
         */
        protected function get_installing_label()
        {
        }
        /**
         * Gets the selector.
         *
         * @since 1.0.0
         *
         * @return string
         */
        public function get_selector() : string
        {
        }
        /**
         * Renders an install/activate button.
         *
         * @param string      $request_action The action to perform.
         * @param string|null $button_label   The button label.
         * @param string|null $redirect_url   The redirect URL.
         *
         * @return void
         */
        public function render(string $request_action, string $button_label = null, string $redirect_url = null) : void
        {
        }
    }
    class Config
    {
        /**
         * @var ?string
         */
        protected static $hook_prefix;
        /**
         * Gets the hook prefix.
         *
         * @return string
         */
        public static function get_hook_prefix() : string
        {
        }
        /**
         * Resets the class back to default.
         *
         * @return void
         */
        public static function reset() : void
        {
        }
        /**
         * Sets the hook prefix.
         *
         * @param string $hook_prefix
         *
         * @return void
         */
        public static function set_hook_prefix(string $hook_prefix) : void
        {
        }
    }
}
namespace TEC\Common\StellarWP\Installer\Contracts {
    interface Handler
    {
        /**
         * Activates the resource.
         *
         * @since 1.0.0
         */
        public function activate();
        /**
         * Clears the local properties that cache install and activation states.
         *
         * @since 1.0.0
         */
        public function clear_install_and_activation_cache($plugin);
        /**
         * Gets the js action of the resource.
         *
         * @since 1.0.0
         *
         * @return string
         */
        public function get_js_action() : string;
        /**
         * Gets the name of the resource.
         *
         * @since 1.0.0
         *
         * @return string
         */
        public function get_name() : string;
        /**
         * Gets the slug of the resource.
         *
         * @since 1.0.0
         *
         * @return string
         */
        public function get_slug() : string;
        /**
         * Handles the request.
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function handle_request();
        /**
         * Installs the resource.
         *
         * @since 1.0.0
         */
        public function install();
        /**
         * Checks if the resource is active.
         *
         * @since 1.0.0
         *
         * @return boolean True if active.
         */
        public function is_active() : bool;
        /**
         * Checks if the resource is installed.
         *
         * @since 1.0.0
         *
         * @return boolean True if installed.
         */
        public function is_installed() : bool;
    }
}
namespace TEC\Common\StellarWP\Installer\Handler {
    class Plugin implements \TEC\Common\StellarWP\Installer\Contracts\Handler
    {
        /**
         * Resource basename.
         *
         * @since 1.0.0
         *
         * @var string
         */
        protected $basename;
        /**
         * Button.
         *
         * @since 1.0.0
         *
         * @var Button|null
         */
        protected $button;
        /**
         * Action indicating that a resource has been activated.
         *
         * @since 1.0.0
         *
         * @var string|null
         */
        protected $did_action;
        /**
         * Download URL.
         *
         * @since 1.0.0
         *
         * @var string|null
         */
        protected $download_url;
        /**
         * Whether the resource is activated.
         *
         * @var bool|null
         */
        protected $is_active = null;
        /**
         * Whether the resource is installed.
         *
         * @var bool|null
         */
        protected $is_installed = null;
        /**
         * The JS action to be used in the button.
         *
         * @since 1.0.0
         *
         * @var string
         */
        protected $js_action;
        /**
         * Resource name.
         *
         * @since 1.0.0
         *
         * @var string
         */
        protected $name;
        /**
         * @inheritDoc
         */
        public $permission = 'install_plugins';
        /**
         * Resource slug.
         *
         * @since 1.0.0
         *
         * @var string
         */
        protected $slug;
        /**
         * Type of resource.
         *
         * @var string|null
         */
        public $type = 'plugin';
        /**
         * WordPress.org data.
         *
         * @since 1.0.0
         *
         * @var stdClass|WP_Error|null
         */
        protected $wordpress_org_data;
        /**
         * Constructor.
         *
         * @since 1.0.0
         */
        public function __construct(string $name, string $slug, ?string $download_url = null, ?string $did_action = null, ?string $js_action = null)
        {
        }
        /**
         * @inheritDoc
         */
        public function activate() : bool
        {
        }
        /**
         * @inheritDoc
         */
        public function clear_install_and_activation_cache($plugin)
        {
        }
        /**
         * Gets a plugin's basename.
         *
         * @return string|null
         */
        public function get_basename() : ?string
        {
        }
        /**
         * Gets the resource's button.
         *
         * @since 1.0.0
         *
         * @return Button
         */
        public function get_button() : \TEC\Common\StellarWP\Installer\Button
        {
        }
        /**
         * Gets the download_url.
         *
         * @since 1.0.0
         *
         * @return string|null
         */
        protected function get_download_url() : ?string
        {
        }
        /**
         * @inheritDoc
         */
        public function get_error_message() : ?string
        {
        }
        /**
         * @inheritDoc
         */
        public function get_js_action() : string
        {
        }
        /**
         * @inheritDoc
         */
        public function get_name() : string
        {
        }
        /**
         * Gets the resource permission.
         *
         * @since 1.0.0
         *
         * @return string
         */
        protected function get_permission() : string
        {
        }
        /**
         * Tests to see if the requested variable is set either as a post field or as a URL
         * param and returns the value if so.
         *
         * Post data takes priority over fields passed in the URL query. If the field is not
         * set then $default (null unless a different value is specified) will be returned.
         *
         * The variable being tested for can be an array if you wish to find a nested value.
         *
         * @since 1.0.0
         *
         * @param string|array $var
         * @param mixed        $default
         *
         * @return mixed
         */
        protected function get_request_var($var, $default = null)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_slug() : string
        {
        }
        /**
         * @inheritDoc
         */
        public function get_wordpress_org_data()
        {
        }
        /**
         * @inheritDoc
         */
        public function handle_request()
        {
        }
        /**
         * @inheritDoc
         */
        public function install() : bool
        {
        }
        /**
         * @inheritDoc
         */
        public function is_active() : bool
        {
        }
        /**
         * Checks if the plugin is installed.
         *
         * @since 1.0.0
         *
         * @return boolean True if active
         */
        public function is_installed() : bool
        {
        }
    }
}
namespace TEC\Common\StellarWP\Installer {
    class Installer
    {
        /**
         * The version number for the library.
         *
         * @since 1.1.0
         */
        public const VERSION = '1.1.1';
        /**
         * Asset object.
         *
         * @since 1.1.0
         *
         * @var Assets|null
         */
        protected $assets;
        /**
         * @var ?string
         */
        protected static $hook_prefix;
        /**
         * Is this libary initialized?
         *
         * @since 1.0.0
         *
         * @var Installer|null
         */
        public static $instance;
        /**
         * Initialize.
         *
         * @since 1.0.0
         *
         * @return Installer
         */
        public static function init() : \TEC\Common\StellarWP\Installer\Installer
        {
        }
        /**
         * Gets the asset object.
         *
         * @since 1.1.0
         *
         * @return Assets
         */
        public function assets() : \TEC\Common\StellarWP\Installer\Assets
        {
        }
        /**
         * Helper function for ::init().
         *
         * @since 1.0.0
         *
         * @return Installer
         */
        public static function get() : \TEC\Common\StellarWP\Installer\Installer
        {
        }
        /**
         * Resets the object back to its origin state.
         *
         * @since 1.0.0
         *
         * @return void
         */
        public static function reset() : void
        {
        }
        /**
         * Deregisters a plugin for installation / activation.
         *
         * @since 1.0.0
         *
         * @param string $plugin_slug The slug of the plugin.
         *
         * @return bool Whether the plugin was deregistered or not.
         */
        public function deregister_plugin(string $plugin_slug) : bool
        {
        }
        /**
         * Gets the busy class.
         *
         * @since 1.1.0
         *
         * @return string
         */
        public function get_busy_class()
        {
        }
        /**
         * Gives the JS object name used for handling JS behaviors.
         *
         * @since 1.0.0
         *
         * @return string
         */
        public function get_js_object_key() : string
        {
        }
        /**
         * Gives the JS selectors indexed by slug.
         *
         * @since 1.0.0
         *
         * @return array
         */
        public function get_js_selectors() : array
        {
        }
        /**
         * Generates a nonce for the installer.
         *
         * @since 1.0.0
         *
         * @return false|string
         */
        public function get_nonce()
        {
        }
        /**
         * Gets the nonce name.
         *
         * @since 1.0.0
         *
         * @return string
         */
        public function get_nonce_name() : string
        {
        }
        /**
         * Gets a plugin button.
         *
         * @since 1.0.0
         *
         * @param string      $slug Plugin slug.
         * @param string      $action Action to perform. (install|activate)
         * @param string|null $button_label Button label.
         * @param string|null $redirect_url Redirect URL.
         *
         * @return string|null
         */
        public function get_plugin_button(string $slug, string $action, ?string $button_label = null, ?string $redirect_url = null) : ?string
        {
        }
        /**
         * Gets registered plugins.
         *
         * @since 1.0.0
         *
         * @return array
         */
        public function get_registered_plugins() : array
        {
        }
        /**
         * Gets registered plugin.
         *
         * @since 1.0.0
         *
         * @return Handler\Plugin|null
         */
        public function get_registered_plugin(string $slug) : ?\TEC\Common\StellarWP\Installer\Handler\Plugin
        {
        }
        /**
         * Returns whether or not a plugin is active.
         *
         * @param string $slug Resource slug.
         *
         * @return bool
         */
        public function is_active(string $slug) : bool
        {
        }
        /**
         * Returns whether or not a plugin is installed.
         *
         * @param string $slug Resource slug.
         *
         * @return bool
         */
        public function is_installed(string $slug) : bool
        {
        }
        /**
         * Returns whether or not a plugin is installed.
         *
         * @param string $slug Resource slug.
         *
         * @return bool
         */
        public function is_plugin_installed(string $slug) : bool
        {
        }
        /**
         * Returns whether or not a plugin is registered.
         *
         * @param string $slug Resource slug.
         *
         * @return bool
         */
        public function is_registered(string $slug) : bool
        {
        }
        /**
         * Registers a plugin for installation / activation.
         *
         * @since 1.0.0
         *
         * @param string $plugin_slug The slug of the plugin.
         * @param string $plugin_name The non-translated name of the plugin.
         * @param string|null $download_url The download URL of the plugin.
         * @param string|null $did_action The action that indicates that a plugin is active.
         *
         * @return void
         */
        public function register_plugin(string $plugin_slug, string $plugin_name, ?string $download_url = null, ?string $did_action = null) : void
        {
        }
        /**
         * Renders a plugin button.
         *
         * @since 1.0.0
         *
         * @param string      $slug Plugin slug.
         * @param string      $action Action to perform. (install|activate)
         * @param string|null $button_label Button label.
         * @param string|null $redirect_url Redirect URL.
         *
         * @return void
         */
        public function render_plugin_button(string $slug, string $action, ?string $button_label = null, ?string $redirect_url = null) : void
        {
        }
    }
}
namespace TEC\Common\StellarWP\Installer\Utils {
    class Array_Utils
    {
        /**
         * Find a value inside of an array or object, including one nested a few levels deep.
         *
         * Example: get( $a, [ 0, 1, 2 ] ) returns the value of $a[0][1][2] or the default.
         *
         * @since 1.0.0
         *
         * @param array|object $variable Array or object to search within.
         * @param array|string $indexes Specify each nested index in order.
         *                                Example: array( 'lvl1', 'lvl2' );
         * @param mixed        $default Default value if the search finds nothing.
         *
         * @return mixed The value of the specified index or the default if not found.
         */
        public static function get($variable, $indexes, $default = null)
        {
        }
        /**
         * Find a value inside a list of array or objects, including one nested a few levels deep.
         *
         * @since 1.0.0
         *
         * Example: get( [$a, $b, $c], [ 0, 1, 2 ] ) returns the value of $a[0][1][2] found in $a, $b or $c
         * or the default.
         *
         * @param array        $variables Array of arrays or objects to search within.
         * @param array|string $indexes Specify each nested index in order.
         *                                 Example: array( 'lvl1', 'lvl2' );
         * @param mixed        $default Default value if the search finds nothing.
         *
         * @return mixed The value of the specified index or the default if not found.
         */
        public static function get_in_any(array $variables, $indexes, $default = null)
        {
        }
        /**
         * Sanitizes a value according to its type.
         *
         * The function will recursively sanitize array values.
         *
         * @since 1.0.0
         *
         * @param mixed $value The value, or values, to sanitize.
         *
         * @return mixed|null Either the sanitized version of the value, or `null` if the value is not a string, number or
         *                    array.
         */
        public static function sanitize_deep(&$value)
        {
        }
    }
}
namespace TEC\Common\StellarWP\Telemetry\Contracts {
    /**
     * Interface Subscriber_Interface
     *
     * @package TEC\Common\StellarWP\Telemetry\Contracts
     */
    interface Subscriber_Interface
    {
        /**
         * Register action/filter listeners to hook into WordPress
         *
         * @return void
         */
        public function register();
    }
    /**
     * Class Abstract_Subscriber
     *
     * @package TEC\Common\StellarWP\Telemetry\Contracts
     */
    abstract class Abstract_Subscriber implements \TEC\Common\StellarWP\Telemetry\Contracts\Subscriber_Interface
    {
        /**
         * @var ContainerInterface
         */
        protected $container;
        /**
         * Constructor for the class.
         *
         * @param ContainerInterface $container The container.
         */
        public function __construct(\TEC\Common\StellarWP\ContainerContract\ContainerInterface $container)
        {
        }
    }
}
namespace TEC\Common\StellarWP\Telemetry\Admin {
    /**
     * Handles all hooks/filters related to the admin screens.
     *
     * @since 1.0.0
     *
     * @package StellarWP\Telemetry
     */
    class Admin_Subscriber extends \TEC\Common\StellarWP\Telemetry\Contracts\Abstract_Subscriber
    {
        /**
         * @inheritDoc
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function register() : void
        {
        }
        /**
         * Registers required hooks to set up the admin assets.
         *
         * @since 1.0.0
         * @since 2.0.0 - Adjust to output assets if any stellar slug should render its modal.
         *
         * @return void
         */
        public function maybe_enqueue_admin_assets()
        {
        }
    }
    /**
     * A class that enqueues and localizes admin assets.
     *
     * @since 1.0.0
     *
     * @package StellarWP\Telemetry
     */
    class Resources
    {
        const SCRIPT_HANDLE = 'stellarwp-telemetry-admin';
        const SCRIPT_VERSION = '1.0.0';
        /**
         * Enqueues the admin resources.
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function enqueue_admin_assets()
        {
        }
        /**
         * Enqueues the admin JS script.
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Localizes the admin JS script.
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function localize_script()
        {
        }
        /**
         * Enqueues the admin CSS styles.
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function enqueue_styles()
        {
        }
        /**
         * Gets the path to the assets folder.
         *
         * @since 1.0.0
         *
         * @return string
         */
        public static function get_asset_path() : string
        {
        }
    }
}
namespace TEC\Common\StellarWP\Telemetry {
    /**
     * A configuration class to help set up the library.
     *
     * @since 1.0.0
     *
     * @package StellarWP\Telemetry
     */
    class Config
    {
        /**
         * Container object.
         *
         * @since 1.0.0
         *
         * @var \TEC\Common\StellarWP\ContainerContract\ContainerInterface
         */
        protected static $container;
        /**
         * Prefix for hook names.
         *
         * @since 1.0.0
         *
         * @var string
         */
        protected static $hook_prefix = '';
        /**
         * Unique ID for the stellarwp slug.
         *
         * @since 1.0.0
         *
         * @var string
         */
        protected static $stellar_slug = '';
        /**
         * Unique IDs and optional plugin slugs for StellarWP slugs.
         *
         * @since 2.0.0
         *
         * @var array
         */
        protected static $stellar_slugs = [];
        /**
         * The url of the telemetry server.
         *
         * @since 1.0.0
         *
         * @var string
         */
        protected static $server_url = 'https://telemetry.stellarwp.com/api/v1';
        /**
         * Get the container.
         *
         * @since 1.0.0
         *
         * @throws \RuntimeException Throws exception if container is not set.
         *
         * @return \TEC\Common\StellarWP\ContainerContract\ContainerInterface
         */
        public static function get_container()
        {
        }
        /**
         * Gets the hook prefix.
         *
         * @since 1.0.0
         *
         * @return string
         */
        public static function get_hook_prefix()
        {
        }
        /**
         * Gets the telemetry server url.
         *
         * @since 1.0.0
         *
         * @return string
         */
        public static function get_server_url()
        {
        }
        /**
         * Gets the stellar slug.
         *
         * @since 1.0.0
         *
         * @return string
         */
        public static function get_stellar_slug()
        {
        }
        /**
         * Gets the registered stellar slugs.
         *
         * @since 2.0.0
         *
         * @return array<string,string>
         */
        public static function get_all_stellar_slugs()
        {
        }
        /**
         * Returns whether the container has been set.
         *
         * @since 1.0.0
         *
         * @return bool
         */
        public static function has_container()
        {
        }
        /**
         * Resets this class back to the defaults.
         *
         * @since 1.0.0
         *
         * @return void
         */
        public static function reset()
        {
        }
        /**
         * Set the container object.
         *
         * @since 1.0.0
         *
         * @param \TEC\Common\StellarWP\ContainerContract\ContainerInterface $container Container object.
         *
         * @return void
         */
        public static function set_container(\TEC\Common\StellarWP\ContainerContract\ContainerInterface $container)
        {
        }
        /**
         * Sets the hook prefix.
         *
         * @since 1.0.0
         *
         * @param string $prefix The prefix to use for hooks.
         *
         * @return void
         */
        public static function set_hook_prefix(string $prefix)
        {
        }
        /**
         * Sets the stellar slug.
         *
         * @since 1.0.0
         *
         * @param string $stellar_slug The unique slug to identify the plugin with the server.
         *
         * @return void
         */
        public static function set_stellar_slug(string $stellar_slug)
        {
        }
        /**
         * Adds a new stellar slug to the stellar slugs array.
         *
         * Utilizing an array of stellar slugs, the library can be tailored for use in a single plugin
         * or use within a shared library for several plugins. Each stellar slug registered will
         * generate unique filters and hooks that give further customization for each slug
         *
         * @since 2.0.0
         *
         * @param string $stellar_slug A unique slug to add to the config.
         * @param string $wp_slug      The plugin's basename (used for capturing deactivation "Exit Interview" info).
         *
         * @return void
         */
        public static function add_stellar_slug(string $stellar_slug, string $wp_slug = '')
        {
        }
        /**
         * Sets the telemetry server url.
         *
         * @since 1.0.0
         *
         * @param string $url The url of the telemetry server.
         *
         * @return void
         */
        public static function set_server_url(string $url)
        {
        }
    }
}
namespace TEC\Common\StellarWP\Telemetry\Contracts {
    /**
     * An interface that provides the API for all data providers.
     *
     * @since 1.0.0
     *
     * @package TEC\Common\StellarWP\Telemetry\Contracts
     */
    interface Data_Provider
    {
        /**
         * Gets the data that should be sent to the telemetry server.
         *
         * @since 1.0.0
         *
         * @return array
         */
        public function get_data() : array;
    }
    /**
     * Provides an API for all classes that are runnable.
     *
     * @since 1.0.0
     *
     * @package TEC\Common\StellarWP\Telemetry\Contracts
     */
    interface Runnable
    {
        /**
         * Run the intended action.
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function run();
    }
    /**
     * Interface that provides an API for rendering templates.
     */
    interface Template_Interface
    {
        /**
         * Renders the template.
         *
         * @since 1.0.0
         * @since 2.0.0 - Update to handle passed in stellar slug.
         *
         * @param string $stellar_slug The stellar slug to be referenced when the modal is rendered.
         *
         * @return void
         */
        public function render(string $stellar_slug);
        /**
         * Determines if the template should be rendered.
         *
         * @since 1.0.0
         * @since 2.0.0 - Update to handle passed in stellar slug.
         *
         * @param string $stellar_slug The stellar slug for which the modal should be rendered.
         *
         * @return boolean
         */
        public function should_render(string $stellar_slug);
    }
}
namespace TEC\Common\StellarWP\Telemetry {
    /**
     * The core class of the library.
     *
     * @since 1.0.0
     *
     * @package StellarWP\Telemetry
     */
    class Core
    {
        const PLUGIN_BASENAME = 'plugin.basename';
        const PLUGIN_FILE = 'plugin.file';
        const SITE_PLUGIN_DIR = 'site.plugin_dir';
        /**
         * Returns the current instance or creates one to return.
         *
         * @since 1.0.0
         *
         * @return self
         */
        public static function instance()
        {
        }
        /**
         * Initializes the library.
         *
         * @since 1.0.0
         *
         * @param string $plugin_path The path to the main plugin file.
         *
         * @throws \RuntimeException Throws exception if container is not set.
         *
         * @return void
         */
        public function init(string $plugin_path)
        {
        }
        /**
         * Gets the container.
         *
         * @since 1.0.0
         *
         * @return \TEC\Common\StellarWP\ContainerContract\ContainerInterface
         */
        public function container()
        {
        }
    }
}
namespace TEC\Common\StellarWP\Telemetry\Data_Providers {
    /**
     * Provides methods for retrieving site health data.
     *
     * @since 1.0.0
     *
     * @package StellarWP\Telemetry
     */
    class Debug_Data implements \TEC\Common\StellarWP\Telemetry\Contracts\Data_Provider
    {
        /**
         * Gets the current site health data
         *
         * @since 1.0.0
         *
         * @see https://developer.wordpress.org/reference/classes/wp_debug_data/
         *
         * @return array Site health data
         */
        public function get_data() : array
        {
        }
    }
    /**
     * Class Null_Data_Provider.
     *
     * @since   TBD
     *
     * @package TEC\Common\StellarWP\Telemetry\Data_Providers;
     */
    class Null_Data_Provider implements \TEC\Common\StellarWP\Telemetry\Contracts\Data_Provider
    {
        /**
         * {@inheritDoc}
         *
         * @since   TBD
         */
        public function get_data() : array
        {
        }
    }
}
namespace TEC\Common\StellarWP\Telemetry\Events {
    /**
     * The class that handles user triggered events.
     *
     * @since 2.1.0
     *
     * @package StellarWP\Telemetry
     */
    class Event
    {
        /**
         * The hook name for sending events asyncronously.
         *
         * @since 2.2.0
         */
        public const AJAX_ACTION = 'stellarwp_telemetry_send_event';
        /**
         * The class constructor.
         *
         * @since 2.1.0
         *
         * @param Telemetry $telemetry An instance of the Telemetry class.
         */
        public function __construct(\TEC\Common\StellarWP\Telemetry\Telemetry\Telemetry $telemetry)
        {
        }
        /**
         * Sends an event to the telemetry server.
         *
         * @since 2.1.0
         *
         * @param string $name The name of the event.
         * @param array  $data Additional information to include with the event.
         *
         * @return bool
         */
        public function send(string $name, array $data = [])
        {
        }
        /**
         * Send batched events.
         *
         * @since 2.2.0
         *
         * @param array $events An array of stored events to send to the telemetry server.
         *
         * @return bool
         */
        public function send_batch(array $events)
        {
        }
        /**
         * Gets the url used for sending events.
         *
         * @since 2.1.0
         *
         * @return string
         */
        protected function get_url()
        {
        }
    }
    /**
     * Handles all actions and filters related to telemetry events.
     *
     * @since 2.1.0
     *
     * @package StellarWP\Telemetry
     */
    class Event_Subscriber extends \TEC\Common\StellarWP\Telemetry\Contracts\Abstract_Subscriber
    {
        /**
         * @inheritDoc
         *
         * @since 2.1.0
         *
         * @return void
         */
        public function register()
        {
        }
        /**
         * Caches an event to be sent during shutdown.
         *
         * @since 2.2.0
         *
         * @param string $name         The name of the event.
         * @param array  $data         The data sent along with the event.
         *
         * @return void
         */
        public function cache_event($name, $data)
        {
        }
        /**
         * Sends the events that have been stored for the current request.
         *
         * @since 2.2.0
         *
         * @return void
         */
        public function send_cached_events()
        {
        }
        /**
         * Send the event to the telemetry server.
         *
         * @since 2.2.0
         *
         * @return void
         */
        public function send_events()
        {
        }
    }
}
namespace TEC\Common\StellarWP\Telemetry\Exit_Interview {
    /**
     * A class that handles displaying an "Exit Interview" for users deactivating the plugin.
     *
     * @since 1.0.0
     *
     * @package StellarWP\Telemetry
     */
    class Exit_Interview_Subscriber extends \TEC\Common\StellarWP\Telemetry\Contracts\Abstract_Subscriber
    {
        const AJAX_ACTION = 'exit-interview';
        /**
         * @inheritDoc
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function register() : void
        {
        }
        /**
         * Possibly renders the exit interview if the user is on the plugins list page.
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function render_exit_interview()
        {
        }
        /**
         * Handles the ajax request for submitting "Exit Interivew" form data.
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function ajax_exit_interview()
        {
        }
        /**
         * Adds an <i> element after the "deactivate" link on the plugin list table so that it can be targeted by JS to trigger the interview modal.
         *
         * The deactivation is deferred to the modal displayed.
         *
         * @param array  $links        The links of the plugin in the plugin list.
         * @param string $plugin_file The plugin file of the current plugin in the list.
         *
         * @since 1.0.0
         *
         * @return array
         */
        public function plugin_action_links($links, $plugin_file)
        {
        }
    }
    /**
     * The primary class for rendering the "Exit Interview" modal on plugin deactivation.
     *
     * @since 1.0.0
     *
     * @package StellarWP\Telemetry
     */
    class Template implements \TEC\Common\StellarWP\Telemetry\Contracts\Template_Interface
    {
        /**
         * The plugin container.
         *
         * @since 1.0.0
         *
         * @var \TEC\Common\StellarWP\ContainerContract\ContainerInterface
         */
        protected $container;
        /**
         * The class constructor.
         *
         * @since 1.0.0
         *
         * @param \TEC\Common\StellarWP\ContainerContract\ContainerInterface $container The container.
         */
        public function __construct(\TEC\Common\StellarWP\ContainerContract\ContainerInterface $container)
        {
        }
        /**
         * Gets the arguments for configuring the "Exit Interview" modal.
         *
         * @since 1.0.0
         * @since 2.0.0 - Updated to accept a passed stellar slug.
         *
         * @param string $stellar_slug The stellar slug used when outputting the modal.
         *
         * @return array
         */
        protected function get_args(string $stellar_slug)
        {
        }
        /**
         * @inheritDoc
         *
         * @since 1.0.0
         *
         * @param string $stellar_slug The stellar slug to be referenced when the modal is rendered.
         *
         * @return void
         */
        public function render(string $stellar_slug)
        {
        }
        /**
         * @inheritDoc
         *
         * @since 1.0.0
         *
         * @param string $stellar_slug The stellar slug for which the modal should be rendered.
         *
         * @return boolean
         */
        public function should_render(string $stellar_slug)
        {
        }
        /**
         * Renders the template if it should be rendered.
         *
         * @since 1.0.0
         *
         * @param string $stellar_slug The stellar slug that could be rendered.
         *
         * @return void
         */
        public function maybe_render(string $stellar_slug)
        {
        }
    }
}
namespace TEC\Common\StellarWP\Telemetry\Last_Send {
    /**
     * Handles all methods for determining when to send telemetry data.
     *
     * @since 1.0.0
     *
     * @package StellarWP\Telemetry
     */
    class Last_Send
    {
        public const OPTION_NAME = 'stellarwp_telemetry_last_send';
        /**
         * Initially sets the _last_send option in the options table.
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function initialize_option()
        {
        }
        /**
         * Checks whether the last send timestamp is expired or not.
         *
         * If the timestamp is >= 1 week, the last send is expired.
         *
         * @since 1.0.0
         *
         * @return bool
         */
        public function is_expired()
        {
        }
        /**
         * Sets a new timestamp for the last_send option.
         *
         * @param DateTimeImmutable $time The time to use for the timestamp.
         *
         * @return int Number of rows affected.
         */
        public function set_new_timestamp(\DateTimeImmutable $time)
        {
        }
        /**
         * Queries the database directly to get the timestamp.
         *
         * This avoids any filters being applied than are necessary.
         *
         * @since 1.0.0
         *
         * @return string The timestamp of the last send.
         */
        public function get_timestamp()
        {
        }
    }
    /**
     * The subscriber for the Last_Send option.
     *
     * @since 1.0.0
     *
     * @package StellarWP\Telemetry
     */
    class Last_Send_Subscriber extends \TEC\Common\StellarWP\Telemetry\Contracts\Abstract_Subscriber
    {
        /**
         * @inheritDoc
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function register()
        {
        }
        /**
         * Initializes the option in the options table to track the last time data was sent to the telemetry server.
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function initialize_last_send_option()
        {
        }
    }
}
namespace TEC\Common\StellarWP\Telemetry\Opt_In {
    /**
     * Class to handle all actions/filters related to the opt-in.
     *
     * @since 1.0.0
     *
     * @package StellarWP\Telemetry
     */
    class Opt_In_Subscriber extends \TEC\Common\StellarWP\Telemetry\Contracts\Abstract_Subscriber
    {
        /**
         * @inheritDoc
         *
         * @return void
         */
        public function register() : void
        {
        }
        /**
         * Sets the opt-in status for the site.
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function set_optin_status()
        {
        }
        /**
         * Renders the opt-in modal if it should be rendered.
         *
         * @since 1.0.0
         * @since 2.0.0 - Update to handle rendering multiple modals.
         *
         * @param string $stellar_slug The stellar slug to use in determining when and how the modal is displayed.
         *
         * @return void
         */
        public function maybe_render_optin(string $stellar_slug = '')
        {
        }
        /**
         * Sets the initial value when the plugin is loaded.
         *
         * If the plugin doesn't already have the opt-in option set, we need to set it
         * so that the opt-in should be shown to the user when the do_action is run.
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function initialize_optin_option()
        {
        }
        /**
         * Registers the site/user with the telemetry server and sets the opt-in status.
         *
         * @since 1.0.0
         * @since 2.0.0 - Updated to allow specifying the stellar slug.
         * @since 2.2.0 - Updated to add opt-in text.
         *
         * @param string $stellar_slug The slug to use when opting in.
         * @param string $opt_in_text  The text displayed to the user when they agreed to opt-in.
         *
         * @return void
         */
        public function opt_in(string $stellar_slug, string $opt_in_text = '')
        {
        }
    }
    /**
     * Handles all methods related to rendering the Opt-In template.
     *
     * @since 1.0.0
     *
     * @package StellarWP\Telemetry
     */
    class Opt_In_Template implements \TEC\Common\StellarWP\Telemetry\Contracts\Template_Interface
    {
        protected const YES = '1';
        protected const NO = '-1';
        /**
         * The opt-in status object.
         *
         * @since 1.0.0
         *
         * @var Status
         */
        protected $opt_in_status;
        /**
         * The Telemetry constructor
         *
         * @param Status $opt_in_status The opt-in status object.
         */
        public function __construct(\TEC\Common\StellarWP\Telemetry\Opt_In\Status $opt_in_status)
        {
        }
        /**
         * Gets the arguments for configuring how the Opt-In modal is rendered.
         *
         * @since 1.0.0
         * @since 2.0.0 - Updated to handle passed in stellar slug
         *
         * @param string $stellar_slug The slug to use when configuring the modal args.
         *
         * @return array
         */
        public function get_args(string $stellar_slug)
        {
        }
        /**
         * @inheritDoc
         *
         * @since 1.0.0
         * @since 2.0.0 - Update to handle passed in stellar slug.
         *
         * @param string $stellar_slug The slug to render the modal with.
         *
         * @return void
         */
        public function render(string $stellar_slug)
        {
        }
        /**
         * Gets the option that determines if the modal should be rendered.
         *
         * @since 1.0.0
         * @since 2.0.0 - Update to handle passed in stellar_slug.
         *
         * @param string $stellar_slug The current stellar slug to be used in the option name.
         *
         * @return string
         */
        public function get_option_name(string $stellar_slug)
        {
        }
        /**
         * Helper function to determine if the modal should be rendered.
         *
         * @since 1.0.0
         * @since 2.0.0 - update to handle passed in stellar_slug.
         *
         * @param string $stellar_slug The stellar slug to get the option name for.
         *
         * @return boolean
         */
        public function should_render(string $stellar_slug)
        {
        }
        /**
         * Renders the modal if it should be rendered.
         *
         * @since 1.0.0
         * @since 2.0.0 - Add ability to render multiple modals.
         *
         * @param string $stellar_slug The stellar slug for which the modal should be rendered.
         *
         * @return void
         */
        public function maybe_render(string $stellar_slug)
        {
        }
        /**
         * Gets an array of opted-in plugin names.
         *
         * @since 1.0.0
         *
         * @return string[]
         */
        public function get_opted_in_plugin_names()
        {
        }
        /**
         * Gets the primary message displayed on the opt-in modal.
         *
         * @param string $user_name   The display name of the user.
         * @param string $plugin_name The name of the plugin.
         *
         * @return string
         */
        public function get_intro($user_name, $plugin_name)
        {
        }
    }
    /**
     * Class for handling the Opt-in status for the site.
     *
     * @since 1.0.0
     *
     * @package StellarWP\Telemetry
     */
    class Status
    {
        public const OPTION_NAME = 'stellarwp_telemetry';
        public const OPTION_NAME_USER_INFO = 'stellarwp_telemetry_user_info';
        public const STATUS_ACTIVE = 1;
        public const STATUS_INACTIVE = 2;
        /**
         * Gets the option name used to store the opt-in status.
         *
         * @since 1.0.0
         *
         * @return string
         */
        public function get_option_name()
        {
        }
        /**
         * Gets the current opt-in status.
         *
         * @since 1.0.0
         *
         * @return array
         */
        public function get_option()
        {
        }
        /**
         * Gets the current Opt-in status.
         *
         * The status is stored as an integer because there are multiple possible statuses:
         * 1 = Active
         * 2 = Inactive
         *
         * @since 1.0.0
         * @since 2.0.1 Correct logic so it is not subject to the order of the plugins.
         * @since 2.2.0 Update to remove unnecessary "mixed" status.
         *
         * @return integer The status value.
         */
        public function get()
        {
        }
        /**
         * Gets the site auth token.
         *
         * @since 1.0.0
         *
         * @return string
         */
        public function get_token()
        {
        }
        /**
         * Determines if the plugin slug exists in the opt-in option array.
         *
         * @since 1.0.0
         *
         * @param string $stellar_slug The plugin's unique slug.
         *
         * @return boolean
         */
        public function plugin_exists(string $stellar_slug)
        {
        }
        /**
         * Adds a plugin slug to the opt-in option array.
         *
         * @since 1.0.0
         *
         * @param string  $stellar_slug    The unique slug identifier for the plugin.
         * @param boolean $status          The opt-in status for the plugin.
         * @param string  $plugin_basename The specific basename for the plugin.
         *
         * @return boolean
         */
        public function add_plugin(string $stellar_slug, bool $status = false, string $plugin_basename = '')
        {
        }
        /**
         * Removes a plugin slug from the opt-in option array.
         *
         * @since 1.0.0
         *
         * @param string $stellar_slug The slug to remove from the option.
         *
         * @return boolean
         */
        public function remove_plugin(string $stellar_slug)
        {
        }
        /**
         * Get an array of opted-in plugins.
         *
         * @since 1.0.0
         *
         * @return array<int, array<string, string>>
         */
        public function get_opted_in_plugins()
        {
        }
        /**
         * Sets the opt-in status option for the site.
         *
         * @since 1.0.0
         * @since 2.0.0 - Updated to allow defined stellar_slug.
         *
         * @param boolean $status       The status to set.
         * @param string  $stellar_slug The stellar_slug to set the status of.
         *
         * @return boolean
         */
        public function set_status(bool $status, string $stellar_slug = '')
        {
        }
        /**
         * Gets the site's opt-in status label.
         *
         * @since 1.0.0
         *
         * @return string
         */
        public function get_status()
        {
        }
        /**
         * Determines if the opt-in status is active.
         *
         * @since 1.0.0
         *
         * @return boolean
         */
        public function is_active() : bool
        {
        }
    }
}
namespace TEC\Common\StellarWP\Telemetry\Telemetry {
    /**
     * Handles all methods required for sending data to the telemetry server.
     *
     * @since 1.0.0
     *
     * @package StellarWP\Telemetry
     */
    class Telemetry
    {
        public const AJAX_ACTION = 'stellarwp_telemetry_send_data';
        /**
         * A data provider for gathering the data.
         *
         * @since 1.0.0
         *
         * @var Data_Provider
         */
        protected $provider;
        /**
         * The opt-in status object.
         *
         * @since 1.0.0
         *
         * @var Status
         */
        protected $opt_in_status;
        /**
         * The Telemetry constructor
         *
         * @param Data_Provider $provider      The provider that collects the site data.
         * @param Status        $opt_in_status The opt-in status object.
         */
        public function __construct(\TEC\Common\StellarWP\Telemetry\Contracts\Data_Provider $provider, \TEC\Common\StellarWP\Telemetry\Opt_In\Status $opt_in_status)
        {
        }
        /**
         * Registers the site with the telemetry server.
         *
         * @since 1.0.0
         *
         * @param bool $force Force the creation of the site on the server.
         *
         * @return bool True if the site was registered, false otherwise.
         */
        public function register_site(bool $force = false)
        {
        }
        /**
         * Registers the user with the telemetry server.
         *
         * @since 1.0.0
         * @since 2.0.0 - Add support for setting the stellar slug.
         *
         * @param string $stellar_slug The slug to pass to the server when registering the site user.
         * @param string $opt_in_text  The opt-in text displayed to the user when they agreed to share their data.
         *
         * @return void
         */
        public function register_user(string $stellar_slug = '', string $opt_in_text = '')
        {
        }
        /**
         * Sends the uninstall message to the telemetry server.
         *
         * @since 1.0.0
         *
         * @param string $plugin_slug         The plugin slug.
         * @param string $uninstall_reason_id The ID for the reason the plugin was deactivated.
         * @param string $uninstall_reason    Why the user deactivated the plugin.
         * @param string $comment             The additional comment from the text field shown with the uninstall reason.
         *
         * @return void
         */
        public function send_uninstall(string $plugin_slug, string $uninstall_reason_id, string $uninstall_reason, string $comment = '')
        {
        }
        /**
         * Saves the telemetry server's auth token for the site.
         *
         * @since 1.0.0
         *
         * @param string $token The site token to authenticate the request with.
         *
         * @return bool
         */
        public function save_token(string $token)
        {
        }
        /**
         * Determines if the current site is registered on the telemetry server.
         *
         * @since 1.0.0
         *
         * @return bool
         */
        public function is_registered()
        {
        }
        /**
         * Sends data to the telemetry server.
         *
         * @since 1.0.0
         *
         * @return bool
         */
        public function send_data()
        {
        }
        /**
         * Gets the stored auth token for the current site.
         *
         * @since 1.0.0
         *
         * @return string
         */
        public function get_token()
        {
        }
        /**
         * Sends requests to the telemetry server and parses the response.
         *
         * @since 1.0.0
         *
         * @param array  $data     The array of data to send.
         * @param string $url      The url of the telemetry server.
         * @param bool   $blocking Whether the request should be blocking or not.
         * @param float  $timeout  The timeout for the request, `0` for no timeout.
         *
         * @return array|null
         */
        public function send(array $data, string $url, bool $blocking = true, float $timeout = 5.0)
        {
        }
        /**
         * Actually sends the request to the telemetry server.
         *
         * @since 1.0.0
         *
         * @param string $url      The url of the telemetry server.
         * @param array  $data     The data to send.
         * @param bool   $blocking Whether the request should be blocking or not.
         * @param float  $timeout  The timeout for the request, `0` for no timeout.
         *
         * @return array|\WP_Error
         */
        protected function request(string $url, array $data, bool $blocking = true, float $timeout = 5.0)
        {
        }
        /**
         * Parses responses from wp_remote_requests.
         *
         * @since 1.0.0
         *
         * @param array $response The response from a request.
         *
         * @return array|null
         */
        protected function parse_response(array $response)
        {
        }
        /**
         * Gets the registered site url.
         *
         * @since 1.0.0
         *
         * @return string
         */
        protected function get_register_site_url()
        {
        }
        /**
         * Gets the uninstall url.
         *
         * @since 1.0.0
         *
         * @return string
         */
        protected function get_uninstall_url()
        {
        }
        /**
         * Gets the registered site data.
         *
         * @since 1.0.0
         *
         * @return array
         */
        protected function get_register_site_data()
        {
        }
        /**
         * Gets the current user's details.
         *
         * @since 1.0.0
         * @since 2.0.0 - Add support for passing stellar_slug directly.
         *
         * @param string $stellar_slug The plugin slug to pass to the server when registering a site user.
         * @param string $opt_in_text  The opt-in text displayed to the user when they agreed to share their data.
         *
         * @return array
         */
        protected function get_user_details(string $stellar_slug = '', string $opt_in_text = '')
        {
        }
        /**
         * Gets the telemetry option.
         *
         * @since 1.0.0
         *
         * @return array
         */
        protected function get_option()
        {
        }
        /**
         * Gets the args for sending data to the telemetry server.
         *
         * @since 1.0.0
         * @since TBD - Updated to include the opted in user with the telemetry json.
         *
         * @return array
         */
        protected function get_send_data_args()
        {
        }
        /**
         * Gets the URL for sending data to the telemetry server.
         *
         * @since 1.0.0
         *
         * @return string
         */
        protected function get_send_data_url()
        {
        }
    }
    /**
     * Class Telemetry_Subscriber
     *
     * @since 1.0.0
     *
     * @package StellarWP\Telemetry
     */
    class Telemetry_Subscriber extends \TEC\Common\StellarWP\Telemetry\Contracts\Abstract_Subscriber
    {
        /**
         * @inheritDoc
         *
         * @return void
         */
        public function register()
        {
        }
        /**
         * Sends an async request during the 'shutdown' action.
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function send_async_request()
        {
        }
        /**
         * Sends telemetry data to the server.
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function send_telemetry_data()
        {
        }
    }
}
namespace TEC\Common\StellarWP\Telemetry {
    /**
     * Uninstall class used for uninstalling the current instance of the library.
     *
     * @since 1.0.0
     *
     * @package StellarWP\Telemetry
     */
    class Uninstall
    {
        /**
         * Removes necessary items from the options table.
         *
         * @since 1.0.0
         *
         * @param string $stellar_slug The slug for the plugin being deleted.
         *
         * @return void
         */
        public static function run($stellar_slug)
        {
        }
        /**
         * Removes the main telemetry option if the current plugin is the last one to use it.
         *
         * @since 1.0.0
         *
         * @return void
         */
        public static function maybe_remove_optin_option()
        {
        }
    }
}
namespace TEC\Events\Blocks {
    /**
     * Class Controller
     *
     * @since 6.2.7
     *
     * @package TEC\Events\Blocks
     */
    class Controller extends \TEC\Common\Contracts\Provider\Controller
    {
        /**
         * Register the provider.
         *
         * @since 6.2.7
         */
        public function do_register() : void
        {
        }
        /**
         * Unhooks actions and filters.
         */
        public function unregister() : void
        {
        }
        /**
         * Adds the actions required by the Blocks components.
         *
         * @since 6.2.7
         */
        protected function add_actions()
        {
        }
        /**
         * Removes registered actions.
         *
         * @since 6.2.7
         */
        public function remove_actions()
        {
        }
        /**
         * Registers the Events Archive template.
         *
         * @since 6.2.7
         */
        public function action_register_archive_template()
        {
        }
        /**
         * Registers the Single Event template.
         *
         * @since 6.2.7
         */
        public function action_register_single_event_template()
        {
        }
    }
}
namespace TEC\Events\Configuration {
    class Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Registers Configuration provider.
         *
         * @since 6.1.3
         */
        public function register() : void
        {
        }
        /**
         * Removes provider.
         *
         * @since 6.1.3
         */
        public function unregister() : void
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1 {
    /**
     * Class Activation
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1
     */
    class Activation
    {
        /**
         * The name of the transient that will be used to flag whether the plugin did activate
         * or not.
         *
         * @since 6.0.0
         */
        public const ACTIVATION_TRANSIENT = 'tec_custom_tables_v1_initialized';
        /**
         * Handles the activation of the feature functions.
         *
         * @since 6.0.0
         */
        public static function activate()
        {
        }
        /**
         * Checks the state to determine if whether we should create or update custom tables.
         *
         * This method will run once a day (using transients).
         *
         * @since 6.0.0
         * @since 6.0.14 Reworked transient logic to use tec_timed_option instead. More concise. No longer forces schema updates.
         */
        public static function init()
        {
        }
        /**
         * Includes the Migration state into the System Information for support.
         *
         * @since 6.0.1
         *
         * @param array<string,mixed> $info The system information, as produced by the
         *                                  default logic and previous filters.
         *
         * @return array<string,mixed> The filtered system information.
         */
        public static function filter_include_migration_in_system_info(array $info = []) : array
        {
        }
        /**
         * Adds some health check reports to assist in troubleshooting.
         *
         * @since 6.0.9
         *
         * @param array<string,mixed> $info The report data to add our health check to.
         *
         * @return array<string,mixed> The modified report data.
         */
        public static function filter_include_migration_health_check_info(array $info = []) : array
        {
        }
        /**
         * Handles the feature deactivation.
         *
         * @since 6.0.0
         */
        public static function deactivate()
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Events\Event_Cleaner {
    /**
     * Class Provider
     *
     * This is the service for our "Old" Event Cleaner system.
     *
     * @since   6.0.13
     *
     * @package TEC\Events\Custom_Tables\V1\Events\Event_Cleaner
     */
    class Event_Cleaner
    {
        /**
         * Hooks into our automated event cleaner service, and modifies the expired events query to handle occurrences for
         * recurring events.
         *
         * @since 6.0.13
         *
         * @param string $sql The original query to retrieve expired events.
         *
         * @return string The modified CT1 query to retrieve expired events.
         */
        public function redirect_old_events_sql(string $sql) : string
        {
        }
    }
    /**
     * Class Provider
     *
     * This is the provider for our "Old" Event Cleaner system.
     *
     * @since   6.0.13
     *
     * @package TEC\Events\Custom_Tables\V1\Events\Event_Cleaner
     */
    class Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Registers the filters and implementations required by the Custom Tables implementation.
         *
         * @since 6.0.13
         *
         * @return bool If successfully registered. Will only register once, if called again will return false to indicate
         *              already registered.
         */
        public function register() : bool
        {
        }
        /**
         * Deprecating/removing 'tec.event-cleaner' and the scheduler. This is now being handled by the CT1 Event Cleaner.
         * system in CT1.
         *
         * @since 6.0.13
         */
        public function remove_old_recurrence_cleaners()
        {
        }
        /**
         * Hooks into our automated event cleaner service, and modifies the expired events query to handle only single
         * occurrences.
         *
         * @since 6.0.13
         *
         * @param string $sql The original query to retrieve expired events.
         *
         * @return string The modified CT1 query to retrieve expired events.
         */
        public function redirect_old_events_sql(string $sql) : string
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Events\Occurrences {
    /**
     * Class Max_Recurrence
     *
     * This is defined in TEC because the default variable is defined in TEC, not PRO, despite being a PRO variable.
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Events\Occurrences
     */
    class Max_Recurrence
    {
        /**
         * @since 6.0.0
         *
         * @param array $defaults
         *
         * @return array|mixed
         */
        public function change_default_options($defaults = [])
        {
        }
        /**
         * Sets our default value for the `recurrenceMaxMonthsAfter` field on the settings page.
         *
         * @since 6.0.0
         *
         * @param array  $fields
         * @param string $settings_tab
         *
         * @return array|mixed
         */
        public function change_default_settings_field($fields, $settings_tab)
        {
        }
        /**
         * A way to see what the base default max recurrence months value is set to. Useful for areas that do not leverage
         * a default from initialization.
         *
         * @since 6.0.0
         *
         * @return int
         */
        public static function get_recurrence_max_months_default()
        {
        }
    }
    /**
     * Class Max_Recurrence_Provider
     *
     * This is defined in TEC because the default variable is defined in TEC, not PRO, despite being a PRO variable.
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Events\Occurrences
     */
    class Max_Recurrence_Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Registers the filters and implementations required by the Custom Tables implementation.
         *
         * @since 6.0.0
         *
         * @return bool Whether the Provider did register or not.
         */
        public function register()
        {
        }
        /**
         * Sets our max recurrence months setting for initialized sites.
         *
         * @since 6.0.0
         *
         * @param array $defaults
         *
         * @return array|mixed
         */
        public function change_default_options($options = [])
        {
        }
        /**
         * Sets our default value for the `recurrenceMaxMonthsAfter` field on the settings page.
         *
         * @since 6.0.0
         *
         * @param array  $fields
         * @param string $settings_tab
         *
         * @return array|mixed
         */
        public function change_default_settings_field($fields, $settings_tab)
        {
        }
    }
    /**
     * Class Occurrences
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Events
     */
    class Occurrences_Generator
    {
        /**
         * Generate all the occurrences for this event, without using large chunks of memory in the process.
         *
         * @since 6.0.0
         *
         * @param Event $event The Event model instance.
         *
         * @return Generator<Occurrence>|void Either the next row generated for the Event or void to indicate the Event is
         *                                    not in a state where its Occurrences can be generated.
         */
        public function generate_from_event(\TEC\Events\Custom_Tables\V1\Models\Event $event)
        {
        }
        /**
         * Builds and returns the entry for a Single Occurrence.
         *
         * @since 6.0.0
         *
         * @param Event $event The Event model instance to generate the Occurrence entry for.
         *
         * @return Occurrence The Single Event Occurrence instance.
         */
        public function get_single_event_row(\TEC\Events\Custom_Tables\V1\Models\Event $event)
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Feedback {
    /**
     * Interface Feedback_Interface
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Feedback
     */
    interface Feedback_Interface
    {
        /**
         * Filters whole editor configuration, to localize information
         * the Blocks Editor will be able to use.
         *
         * @since 6.0.0
         *
         * @param array<string,mixed> $config A map of the current editor configuration, for all plugins.
         *
         * @return array<string,mixed> The modified plugin configuration.
         */
        public function filter_editor_config(array $config = []);
        /**
         * Renders the feedback prompt in any context, but the Blocks Editor one.
         *
         * @since 6.0.0
         */
        public function render_classic_editor_version();
        /**
         * Returns the HTML contents of the notice.
         *
         * Note: the content MUST be wrapped in an HTML to correctly render in the Blocks Editor context.
         *
         * @since 6.0.0
         *
         * @return string The notice HTML contents.
         */
        public function get_notice_contents();
    }
    /**
     * Class Google_Form_Feedback
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Feedback
     */
    class Google_Form_Feedback implements \TEC\Events\Custom_Tables\V1\Feedback\Feedback_Interface
    {
        /**
         * The URL of the form feedback should be submitted to.
         *
         * @since 6.0.0
         */
        const FORM_URL = 'https://docs.google.com/forms/d/e/1FAIpQLSfzTDl8ZpahmaV-7YjpB2dERoZpiJHA-cM8e-tdfZoma4jEkg/viewform?usp=pp_url';
        /**
         * Renders the feedback prompt.
         *
         * @since 6.0.0
         */
        public function render_classic_editor_version()
        {
        }
        /**
         * Filters whole editor configuration, to localize information
         * the Blocks Editor will be able to use.
         *
         * @since 6.0.0
         *
         * @param array<string,mixed> $config A map of the current editor configuration, for all plugins.
         *
         * @return array<string,mixed> The modified plugin configuration.
         */
        public function filter_editor_config(array $config = [])
        {
        }
        /**
         * Returns the HTML contents of the notice.
         *
         * Note: the content MUST be wrapped in an HTML to correctly render in the Blocks Editor context.
         *
         * @since 6.0.0
         *
         * @return string The notice HTML contents.
         */
        public function get_notice_contents()
        {
        }
    }
    /**
     * Class ServiceProvider
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Feedback
     */
    class Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Register the feedback related implementations and hooks.
         *
         * @since 6.0.0
         */
        public function register()
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1 {
    /**
     * Class Full_Activation_Provider
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1
     */
    class Full_Activation_Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Registers the filters and implementations required by the Custom Tables implementation.
         *
         * @since 6.0.0
         *
         * @return bool Whether the Provider did register or not.
         */
        public function register()
        {
        }
        /**
         * Updates the custom tables for a blog,
         *
         * @since 6.0.2
         *
         * @param int $blog_id The blog ID to udpate the tables for.
         *
         * @return void        Custom tables are updated, if required.
         */
        public function update_blog_tables($blog_id) : void
        {
        }
    }
    /**
     * Class to do some inspection on the migration and database state of the Custom Tables.
     *
     * @package TEC\Events\Custom_Tables\V1
     */
    class Health_Check
    {
        /**
         * @since 6.0.9
         *
         * @var State The state object.
         */
        protected $migration_state;
        /**
         * Construct the Migration Health Check object.
         *
         * @since 6.0.9
         *
         * @param State $state The migration state instance.
         */
        public function __construct(\TEC\Events\Custom_Tables\V1\Migration\State $state)
        {
        }
        /**
         * Checks if something is missing or malformed in the data.
         *
         * @since 6.0.9
         *
         * @return bool Checks if something is missing or malformed in the data.
         */
        public function is_event_data_healthy() : bool
        {
        }
        /**
         * Checks if something is missing or malformed in the data.
         *
         * @since 6.0.9
         *
         * @return bool Checks if something is missing or malformed in the data.
         */
        public function is_occurrence_data_healthy() : bool
        {
        }
        /**
         *  Whether the table should exist but doesn't. It considers activation state.
         *
         * @since 6.0.9
         *
         * @return bool Whether the table should exist but doesn't. It considers activation state.
         */
        public function is_event_table_missing() : bool
        {
        }
        /**
         *  Whether the table should exist but doesn't. It considers activation state.
         *
         * @since 6.0.9
         *
         * @return bool Whether the table should exist but doesn't. It considers activation state.
         */
        public function is_occurrence_table_missing() : bool
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Integrations\ACF {
    /**
     * Class Controller.
     *
     * @since   6.0.11
     *
     * @package TEC\Events\Custom_Tables\V1\Integrations\ACF;
     */
    class Controller extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * The priority at which the ACF field handling will start.
         *
         * @since 6.0.11
         */
        public const EARLY_PRIORITY = 0;
        /**
         * The priority at which the ACF field handling will end.
         *
         * @since 6.0.11
         */
        public const LATE_PRIORITY = 1000;
        /**
         * The priority at which the ACF field handling will start for AJAX queries.
         *
         * @since 6.0.11
         */
        public const AJAX_QUERY_PRIORITY = 10;
        /**
         * Returns the list of supported field types.
         *
         * @since 6.0.11
         *
         * @return array<string> The list of supported field types.
         */
        public static function get_supported_field_types() : array
        {
        }
        /**
         * Registers the implementations, actions and filters required by the Custom Tables implementation to work with
         * the Advanced Custom Fields plugin.
         *
         * @since 6.0.11
         *
         * @return void
         */
        public function register()
        {
        }
        /**
         * Removes the actions and filters added by the provider.
         *
         * @since 6.0.11
         *
         * @return void Actions and filters are removed.
         */
        public function unregister()
        {
        }
        /**
         * Raises the flag indicating that an ACF field of the supported type is being rendered.
         *
         * @since 6.0.11
         *
         * @return void The method does not return anything, the flag is raised.
         */
        public function start_acf_handling() : void
        {
        }
        /**
         * Lowers the flag indicating that an ACF field of the supported type is being rendered.
         *
         * @since 6.0.11
         *
         * @return void The method does not return anything, the flag is lowered.
         */
        public function stop_acf_handling() : void
        {
        }
        /**
         * Adds the query modifier implementation to the list of implementations.
         *
         * @since 6.0.11
         *
         * @param array<string> $implementations The list of implementations of the `Query_Modifier_Interface`.
         *
         * @return array<string> The filtered list of `Query_Modifier_Interface` implementations.
         */
        public function add_query_modifier_implementation($implementations)
        {
        }
        /**
         * Redirect supported type queries to the custom tables.
         *
         * Note: the method hooks, but never unhooks, to the `acf/fields/post_object/query` filter.
         * The is because there is not action/filter to hook to that is fired when the AJAX query is done,
         * and because the request will send the JSON data and die.
         *
         * @since 6.0.11
         *
         * @param array<string,mixed> $args  The input query argument, left unmodified.
         * @param array<string,mixed> $field The field data.
         *
         * @return array<string,mixed> The query arguments, left unmodified.
         */
        public function redirect_post_ajax_query($args, $field)
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\WP_Query\Modifiers {
    /**
     * Interface WP_Query_Modifier
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\WP_Query\Modifiers
     */
    interface WP_Query_Modifier
    {
        /**
         * Sets the `WP_Query` the Modifier instance is attached to.
         *
         * @since 6.0.0
         *
         * @param  WP_Query  $query  A reference to the `WP_Query` instance the modifier is attached to.
         */
        public function set_query(\WP_Query $query);
        /**
         * Returns whether the object did act on a specific WordPress filter or not.
         *
         * @since 6.0.0
         *
         * @param  string  $tag  The name of the filter, e.g. `posts_pre_query`.
         *
         * @return bool Whether the object did act on a specific filter or not.
         */
        public function did_filter($tag);
        /**
         * Returns the value returned by the object for a specific filter, if any.
         *
         * Since `null` is a legitimate value the modifier could return in a filter,
         * use  the `did_filter` method to correctly discriminate whether the modifier did
         * intervene in a filter at all or not.
         *
         * @since 6.0.0
         *
         * @param  string The filter name, e.g. `posts_pre_query`.
         *
         * @return mixed Either the value returned for the filter or `null` to indicate
         *                          the object did not inject any value in the filter.
         */
        public function get_filtered_value($tag);
        /**
         * Register all the hooks with this Query Monitor.
         *
         * @since 6.0.0
         *
         * @return void
         */
        public function hook();
        /**
         * Unhooks the query modifier from any filter or action it hooked itself,
         * or was hooked, to.
         *
         * @since 6.0.0
         *
         * @return void The method does not return any value.
         */
        public function unhook();
        /**
         * Define if this modifier should be applied or not.
         *
         * @since 6.0.0
         *
         * @param  WP_Query|null  $query A reference to the query object
         *                               the modifier should be applied to.
         *
         * @return bool If the current modifier should be applied or not.
         */
        public function applies_to(\WP_Query $query = null);
    }
}
namespace TEC\Events\Custom_Tables\V1\Traits {
    /**
     * Trait With_Observable_Filtering
     *
     * @since 6.0.0
     */
    trait With_Observable_Filtering
    {
        /**
         * A list of the filters the modifier did act on.
         *
         * @since 6.0.0
         *
         * @var array<string,bool>
         */
        protected $done_filters = [];
        /**
         * Returns whether the object did act on a specific WordPress filter or not.
         *
         * @since 6.0.0
         *
         * @param string $tag The name of the filter, e.g. `posts_pre_query`.
         *
         * @return bool Whether the object did act on a specific filter or not.
         */
        public function did_filter($tag)
        {
        }
        /**
         * Returns the value returned by the object for a specific filter, if any.
         *
         * Since `null` is a legitimate value the modifier could return in a filter,
         * use  the `did_filter` method to correctly discriminate whether the modifier did
         * intervene in a filter at all or not.
         *
         * @since 6.0.0
         *
         * @param string The filter name, e.g. `posts_pre_query`.
         *
         * @return mixed Either the value returned for the filter or `null` to indicate
         *                          the object did not inject any value in the filter.
         */
        public function get_filtered_value($tag)
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\WP_Query\Modifiers {
    /**
     * Class Base_Modifier
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\WP_Query\Modifiers
     */
    abstract class Base_Modifier implements \TEC\Events\Custom_Tables\V1\WP_Query\Modifiers\WP_Query_Modifier
    {
        use \TEC\Events\Custom_Tables\V1\Traits\With_Observable_Filtering;
        /**
         * A reference to the `WP_Query` instance this modifier is targeting, if any.
         *
         * @since 6.0.0
         *
         * @var WP_Query|null
         */
        protected $query;
        /**
         * Sets the reference to the `WP_Query` instance the Modifier should act on.
         *
         * @since 6.0.0
         *
         * @param  WP_Query  $query  A reference to the `WP_Query` instance this modifier is targeting.
         */
        public function set_query(\WP_Query $query)
        {
        }
        /**
         * Returns a reference to the `WP_Query` instance the modifier is attached to, if any.
         *
         * @since 6.0.0
         *
         * @return WP_Query|null A reference to the `WP_Query` instance the modifier is attached to, or `null`
         *                       if the modifier is not currently attached to any query.
         */
        public function get_query()
        {
        }
        /**
         * Deems the modifier action as completed and triggers the callbacks on the "done"
         * action.
         *
         * @since 6.0.0
         */
        public function done()
        {
        }
        /**
         * Returns whether a query instance is the one this modifier should target or not.
         *
         * @since 6.0.0
         *
         * @param  WP_Query  $query  A reference to the `WP_Query` instance to check.
         *
         * @return bool Whether the `WP_Query` instance is the target one or not.
         */
        protected function is_target_query(\WP_Query $query = null)
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Traits {
    /**
     * Trait With_WP_Query_Introspection
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Traits
     */
    trait With_WP_Query_Introspection
    {
        /**
         * Checks whether a `WP_Query` instance is using any of the specified meta keys in
         * the meta query or not.
         *
         * @since 6.0.0
         *
         * @param  WP_Query       $query      A reference to the `WP_Query` instance to check.
         * @param  array<string>  $meta_keys  A list of meta keys to check: if the query
         *                                    meta query contains at least one, then that
         *                                    is considered a match.
         *
         * @return bool Whether a `WP_Query` instance is date-bound by its meta query
         *              arguments or not.
         */
        protected function is_query_using_meta_keys(\WP_Query $query, array $meta_keys)
        {
        }
        /**
         * Returns whether a `WP_Query` is only querying the specified post type or not.
         *
         * @since 6.0.0
         *
         * @param  WP_Query  $query      A reference to the `WP_Query` instance to check.
         * @param  string    $post_type  The post type to check the `WP_Query` for.
         *
         * @return bool Whether a `WP_Query` is only querying the Event post type or not.
         */
        protected function is_query_for_post_type(\WP_Query $query = null, $post_type = '')
        {
        }
        /**
         * Checks whether a `WP_Query` instance was build by the TEC Repository
         * or not.
         *
         * @since 6.0.0
         *
         * @param  WP_Query  $query  A reference to the `WP_Query` instance to check.
         *
         * @return bool Whether a `WP_Query` instance was build by the TEC Repository
         *              or not.
         */
        protected function is_repository_query(\WP_Query $query)
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\WP_Query\Modifiers {
    /**
     * Class Events_Only_Modifier
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\WP_Query\Modifiers
     */
    class Events_Only_Modifier extends \TEC\Events\Custom_Tables\V1\WP_Query\Modifiers\Base_Modifier
    {
        use \TEC\Events\Custom_Tables\V1\Traits\With_WP_Query_Introspection;
        /**
         * {@inheritDoc}
         */
        public function applies_to(\WP_Query $query = null)
        {
        }
        /**
         * {@inheritDoc}
         *
         * @since 6.0.0
         */
        public function hook()
        {
        }
        /**
         * Applies any necessary alterations on Custom_Tables_Query before it runs get_posts();
         *
         * @since 6.0.13
         *
         * @param Custom_Tables_Query $query A reference to the query object used to get_posts() for Custom Table queries.
         *
         * @return Custom_Tables_Query The modified query object.
         */
        public function filter_ct_query(\TEC\Events\Custom_Tables\V1\WP_Query\Custom_Tables_Query $query) : \TEC\Events\Custom_Tables\V1\WP_Query\Custom_Tables_Query
        {
        }
        /**
         * Pre-fills the query posts with results fetched from the custom tables.
         *
         * @since 6.0.0
         *
         * @param WP_Query|null           $wp_query    A reference to the `WP_Query` instance that is currently running.
         * @param array<WP_Post|int>|null $posts       The filter input value, it could have already be filtered by other
         *                                             plugins at this stage.
         *
         * @return null|array<WP_Post|int> The filtered value of the posts, injected before the query actually runs.
         */
        public function filter_posts_pre_query($posts = null, $wp_query = null)
        {
        }
        /**
         * {@inheritDoc}
         *
         * @since 6.0.0
         */
        public function unhook()
        {
        }
        /**
         * {@inheritDoc}
         *
         * @since 6.0.0
         */
        protected function is_target_query(\WP_Query $query = null)
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Integrations\ACF {
    /**
     * Class Query_Modifier.
     *
     * @since   6.0.11
     *
     * @package TEC\Events\Custom_Tables\V1\Integrations\ACF;
     */
    class Query_Modifier extends \TEC\Events\Custom_Tables\V1\WP_Query\Modifiers\Events_Only_Modifier
    {
        /**
         * Whether this query modifier should handle the query or not.
         *
         * @since 6.0.11
         *
         * @param WP_Query|null $query The query object that will be modified.
         *
         * @return bool Whether this query modifier should handle the query or not.
         */
        public function applies_to(\WP_Query $query = null)
        {
        }
        /**
         * Sets whether the query modifier should handle the query or not.
         *
         * @since 6.0.11
         *
         * @param bool $handling Whether the query modifier should handle the query or not.
         *
         * @return $this This query modifier instance.
         */
        public function set_handling(bool $handling) : self
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Integrations {
    /**
     * Class Provider
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Integrations
     */
    class Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Registers the Service Providers required for the plugin to work with other plugins.
         *
         * @since 6.1.4 Removed registering ET CT1 logic.
         * @since 6.0.0
         */
        public function register()
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Migration\Admin {
    class Phase_View_Renderer
    {
        /**
         * Phase_View_Renderer constructor.
         *
         * @since 6.0.0
         *
         * @param string              $key       Our template key.
         * @param string              $file_path Path to the primary template.
         * @param array<string,mixed> $vars      Vars we need to pass down to the primary template.
         * @param array<string,mixed> $options   Vars to passthrough to the frontend output.
         */
        public function __construct($key, $file_path, array $vars = [], array $options = [])
        {
        }
        /**
         * Adds a node, with the template definitions to be rendered separately from the primary template.
         * This is used to decouple stateful nodes from static nodes that rarely render.
         *
         * @since 6.0.0
         *
         * @param string              $key      Our node key.
         * @param string              $selector The selector used to target where this node will be rendered. Often
         *                                      will be a target in the primary template.
         * @param string              $template Path to the node template.
         * @param array<string,mixed> $vars     A map from context variable names to their values.
         * @param array<string,mixed> $options  Frontend options to apply to this node.
         */
        public function register_node($key, $selector, $template, $vars = [], $options = [])
        {
        }
        /**
         * Compile the list of nodes into the format needed for consumption. Will render the html and store various meta
         * details.
         *
         * @since 6.0.0
         *
         * @return array The list of nodes.
         */
        protected function compile_nodes()
        {
        }
        /**
         * Will compile the nodes and primary template into a structured array.
         *
         * @since 6.0.0
         *
         * @return array<string, mixed> The compiled output.
         */
        public function compile()
        {
        }
        /**
         * Prepends and appends any custom HTML content to the output.
         *
         * @since 6.0.0
         *
         * @param $html string The HTML to be surrounded.
         *
         * @return string The HTML content with any generated pre post HTML added.
         */
        protected function pre_post_content($html)
        {
        }
        /**
         * Will include and buffer any output generated by a template file, and return as a string.
         *
         * @since 6.0.0
         *
         * @param string $template Relative path to the migration template file.
         * @param array  $vars     Variables to be put into local scope for the template.
         *
         * @return false|string|\WP_Error
         */
        protected function get_template_html($template, $vars = [])
        {
        }
        /**
         * Sets the flag value indicating whether this renderer should tell
         * the JS code to keep polling or not.
         *
         * @since 6.0.0
         *
         * @param bool $should_poll Whether this rendered instance should tell
         *                          the JS code to start, or keep, polling or not.
         */
        public function should_poll($should_poll)
        {
        }
    }
    /**
     * Class Modal
     *
     * @package TEC\Events\Custom_Tables\V1\Migration\Admin
     *
     * @since 6.0.0
     */
    class Progress_Modal
    {
        /**
         * Modal ID.
         *
         * @since 6.0.0
         *
         * @var string
         */
        public static $modal_id = 'tec-recurrence-migration__progress-dialog';
        /**
         * Modal target.
         *
         * @since 6.0.0
         *
         * @var string
         */
        public static $modal_target = 'tec-recurrence-migration__progress-dialog';
        /**
         * Check if we should render the modal.
         *
         * @since 6.0.0
         *
         * @return boolean Whether we should render the modal.
         */
        public function should_render()
        {
        }
        /**
         * Outputs the maintenance modal markup.
         *
         * @since 6.0.0
         */
        public function render_modal()
        {
        }
        /**
         * Get the default modal args.
         *
         * @since 6.0.0
         *
         * @param array $args Override default args by sending them in the `$args`.
         *
         * @return array The default modal args.
         */
        public function get_modal_args($args = [])
        {
        }
        /**
         * Get the default modal contents.
         *
         * @since 6.0.0
         *
         * @param array $args Override default args by sending them in the `$args`.
         *
         * @return string The modal content.
         */
        public function get_modal_content($args = [])
        {
        }
        /**
         * Gets the script tag that auto-opens the modal.
         *
         * @return string
         */
        public function get_modal_auto_trigger()
        {
        }
    }
    /**
     * Class Template
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Migration\Admin
     */
    class Template extends \Tribe__Template
    {
        /**
         * Building of the Class template configuration.
         *
         * @since 6.0.0
         */
        public function __construct()
        {
        }
    }
    class Upgrade_Tab
    {
        /**
         * A reference to the current migration state handler.
         *
         * @since 6.0.0
         *
         * @var State
         */
        protected $state;
        /**
         * Upgrade_Tab constructor.
         *
         * since 6.0.0
         *
         * @param State $state A reference to the current migration state handler.
         */
        public function __construct(\TEC\Events\Custom_Tables\V1\Migration\State $state)
        {
        }
        /**
         * Whether or not the upgrade tab in Event Settings should show. The tab will disappear after 30 days of migration completion.
         *
         * @since 6.0.0
         *
         * @return bool Whether the upgrade tab should show or not.
         */
        public function should_show()
        {
        }
        /**
         * Get the migration phase content and inject into the admin fields.
         *
         * @since 6.0.0
         *
         * @param array $upgrade_fields TEC Settings options.
         *
         * @return mixed
         */
        public function add_phase_content($upgrade_fields)
        {
        }
        /**
         * Renders and returns the current phase HTML code.
         *
         * @since 6.0.0
         *
         * @return string The current phase HTML code.
         */
        public function get_phase_html()
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Migration {
    /**
     * Class Ajax.
     *
     * @since   6.0.0
     * @package TEC\Events\Custom_Tables\V1\Migration;
     */
    class Ajax
    {
        /**
         * The full name of the action that will be fired following a migration UI
         * request for a paginated batch of events.
         */
        const ACTION_PAGINATE_EVENTS = 'wp_ajax_tec_events_custom_tables_v1_migration_event_pagination';
        /**
         * The full name of the action that will be fired following a migration UI
         * request for a report.
         *
         * @since 6.0.0
         */
        const ACTION_REPORT = 'wp_ajax_tec_events_custom_tables_v1_migration_report';
        /**
         * The full name of the action that will be fired following a request from
         * the migration UI to start the migration.
         *
         * @since 6.0.0
         */
        const ACTION_START = 'wp_ajax_tec_events_custom_tables_v1_migration_start';
        /**
         * The full name of the action that will be fired following a request from
         * the migration UI to cancel the migration.
         */
        const ACTION_CANCEL = 'wp_ajax_tec_events_custom_tables_v1_migration_cancel';
        /**
         * The full name of the action that will be fired following a request from
         * the migration UI to undo the migration.
         */
        const ACTION_REVERT = 'wp_ajax_tec_events_custom_tables_v1_migration_undo';
        /**
         * The name of the action that will be used to create the nonce used by
         * all requests that will start, cancel, undo or get a report about
         * the migration process.
         */
        const NONCE_ACTION = 'tec-ct1-upgrade';
        /**
         * Ajax constructor.
         *
         * @since 6.0.0
         *
         * @param Process           $process           The process master.
         * @param Events            $events_repository The migration events repository.
         * @param String_Dictionary $text              The string translations object.
         * @param State             $state             The migration state.
         */
        public function __construct(\TEC\Events\Custom_Tables\V1\Migration\Process $process, \TEC\Events\Custom_Tables\V1\Migration\Events $events_repository, \TEC\Events\Custom_Tables\V1\Migration\String_Dictionary $text, \TEC\Events\Custom_Tables\V1\Migration\State $state)
        {
        }
        /**
         * Builds and sends the report in the format expected by the Migration UI JS
         * component.
         *
         * @since 6.0.0
         *
         * @param bool $echo Flag whether we echo or return json string.
         *
         * @return void|string The JSON-encoded data for the front-end.
         *
         */
        public function send_report($echo = true)
        {
        }
        /**
         * Requests a batch of paginated events.
         *
         * @since 6.0.0
         *
         * @param bool $echo
         *
         * @return false|string|void
         */
        public function paginate_events($echo = true)
        {
        }
        /**
         * Responds to the paginated requests.
         *
         * @since 6.0.0
         *
         * @param int    $page     The page of results we are fetching.
         * @param int    $count    The number of events we are requesting.
         * @param bool   $upcoming If we want upcoming or past events.
         * @param string $category The category of event reports we are searching.
         *
         * @return mixed[]
         */
        public function get_paginated_response($page, $count, $upcoming, $category)
        {
        }
        /**
         * Builds the structured report HTML.
         *
         * @since 6.0.0
         *
         * @return array<string, mixed>
         */
        protected function get_report()
        {
        }
        /**
         * Will fetch event reports for a particular filter, and check if there are more to request for that filter.
         *
         * @since 6.0.0
         *
         * @param int $page  Which page we are on.
         * @param int $count How many we want.
         * @param     $filter
         *
         * @return array{ has_more:bool, event_reports:array<Event_Report> }
         */
        protected function get_events_and_has_more($page, $count, $filter)
        {
        }
        /**
         * Construct the query args for the primary renderer template (not used for the node templates).
         *
         * @since 6.0.0
         *
         * @param string $phase The current phase.
         *
         * @return array<string,mixed> The primary renderer template args.
         */
        protected function get_renderer_args($phase)
        {
        }
        /**
         * Based on the current phase, find the correct template file for the renderer.
         *
         * @since 6.0.0
         *
         * @param string $phase The current phase.
         *
         * @return string|void The primary template file to load for this phase.
         */
        protected function get_renderer_template($phase)
        {
        }
        /**
         * Determines if the frontend should poll for updates from the backend.
         *
         * @since 6.0.0
         *
         * @param string $phase The current phase.
         *
         * @return bool Whether the frontend should continue polling.
         */
        protected function should_renderer_poll($phase)
        {
        }
        /**
         * Will construct the appropriate templates and nodes to be compiled, for this phase in the migration.
         *
         * @since 6.0.0
         *
         * @param string $phase The current phase of the migration.
         *
         * @return Phase_View_Renderer The configured Phase_View_Renderer for this particular phase.
         */
        public function get_renderer_for_phase($phase)
        {
        }
        /**
         * Handles the request from the Admin UI to start the migration and returns
         * a first report about its progress.
         *
         * @since 6.0.0
         *
         * @param bool $echo Flag whether we echo or return json string.
         *
         * @return void|string The JSON-encoded data for the front-end.
         */
        public function start_migration($echo = true)
        {
        }
        /**
         * Handles the request from the Admin UI to cancel the migration and returns
         * a first report about its progress.
         *
         * @since 6.0.0
         *
         * @param bool $echo Flag whether we echo or return json string.
         *
         * @return void|string The JSON-encoded data for the front-end.
         *
         */
        public function cancel_migration($echo = true)
        {
        }
        /**
         * Handles the request from the Admin UI to undo the migration and returns
         * a first report about its progress.
         *
         * @since 6.0.0
         *
         * @param bool $echo Flag whether we echo or return json string.
         *
         * @return void|string The JSON-encoded data for the front-end.
         */
        public function revert_migration($echo = true)
        {
        }
    }
    /**
     * Class Asset_Loader.
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Migration;
     */
    class Asset_Loader
    {
        /**
         * Enqueues the scripts required by the migration front-end component and
         * the required localized data.
         *
         * @since 6.0.0
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Registers the scripts required by the service provider.
         *
         * The method is idem-potent and will not register the scripts
         * a second time if already registered.
         *
         * @since 6.0.0
         */
        public function register_scripts()
        {
        }
        /**
         * Filters the `script` HTML tag that will be used to print the `script`
         * tags on the page to make sure the main asset is loaded as an ES6 module.
         *
         * Once the filtering is applied, this method will remove itself from the filtering.
         *
         * @since 6.0.0
         *
         * @param string $tag    The HTML that is being produced for the script.
         * @param string $handle The handle of the script the HTML is being filtered for.
         *
         * @return string
         */
        public function register_module_scripts($tag, $handle)
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Migration\CSV_Report {
    /**
     * Class Download_Report_Provider.
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Migration\CSV_Report;
     */
    class Download_Report_Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Registers the required implementations and hooks into the required
         * actions and filters.
         *
         * @since 6.0.0
         *
         * @return void
         */
        public function register()
        {
        }
        /**
         * Remove hooks.
         *
         * @since 6.0.0
         */
        public function unregister()
        {
        }
        /**
         * Trigger the download CSV check.
         *
         * @since 6.0.0
         */
        public function download_csv()
        {
        }
    }
    /**
     * Class File_Download.
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Migration\CSV_Report;
     */
    class File_Download
    {
        /**
         * @var string The page slug.
         */
        const DOWNLOAD_SLUG = 'ct1-migration-report-download';
        /**
         * @var string The query var to check for our page slug.
         */
        const DOWNLOAD_QUERY_PARAM = 'action';
        /**
         * @var array The list of columns that are output.
         */
        const CSV_COLUMNS = ['Event Name', 'Admin URL', 'Status', 'Has Error'];
        /**
         * Get the download URL string.
         *
         * @since 6.0.0
         *
         * @return string|void
         */
        public static function get_download_url()
        {
        }
        /**
         * Whether this is a legitimate download request.
         *
         * @since 6.0.0
         *
         * @return bool If the download should continue.
         */
        public function should_download()
        {
        }
        /**
         * Outputs the CSV file for the current event report.
         *
         * @since 6.0.0
         *
         * @param bool $should_exit Whether the downloader should exit automatically or continue.
         *
         * @return false|void
         */
        public function download_csv($should_exit = true)
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Migration {
    /**
     * Class Events.
     *
     * @since   6.0.0
     * @package TEC\Events\Custom_Tables\V1\Migration;
     */
    class Events
    {
        /**
         * Returns an Event post ID, claimed and locked to process.
         *
         * @since 6.0.0
         *
         * @param bool $has_been_migrated Whether to limit results to only those that have been previously touched by
         *                                migration.
         *
         * @return int|false Either an Event post ID, or `false` if no
         *                   Event post ID could be claimed and locked.
         */
        public function get_id_to_process($has_been_migrated = false)
        {
        }
        /**
         * Returns a set of Event post IDs that have been locked and claimed
         * for operation.
         *
         * @since 6.0.0
         *
         * @param int $limit The max number of Event post IDs to return.
         *
         * @return array<numeric> An array of claimed and locked Event post IDs.
         */
        public function get_ids_to_process($limit)
        {
        }
        /**
         * Calculate how many events are remaining to migrate.
         *
         * @since 6.0.0
         *
         * @return int The total number of Events that are not migrated or migrating.
         */
        public function get_total_events_remaining()
        {
        }
        /**
         * Fetches all the post IDs of Events that have been migrated.
         *
         * @since 6.0.0
         *
         * @param int   $page   Page in a pagination retrieval.
         * @param int   $count  How many to retrieve.
         * @param array $filter Filter the events returned.
         *
         * @return array<numeric>
         */
        public function get_events_migrated($page, $count, $filter = [])
        {
        }
        /**
         * Total number of events that are flagged as locked for processing.
         *
         * @since 6.0.0
         *
         * @return int
         */
        public function get_total_events_in_progress()
        {
        }
        /**
         * Total number of events that are flagged with a failure.
         *
         * @since 6.0.0
         *
         * @return int
         */
        public function get_total_events_with_failure()
        {
        }
        /**
         * How many events have been migrated (failure and success).
         *
         * @since 6.0.0
         *
         * @return int
         */
        public function get_total_events_migrated()
        {
        }
        /**
         * The total number of TEC events.
         *
         * @since 6.0.0
         *
         * @return int The total number of Events in the database, migrated or not.
         */
        public function get_total_events()
        {
        }
        /**
         * Formulate an estimate on time to complete migration.
         *
         * @return float|int
         */
        public function calculate_time_to_completion()
        {
        }
    }
    /**
     * Class Expected_Migration_Exception.
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Migration;
     */
    class Expected_Migration_Exception extends \Exception
    {
    }
    /**
     * Class Maintenance_Mode.
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Migration;
     */
    class Maintenance_Mode
    {
        /**
         * Maintenance_Mode constructor.
         *
         * @since 6.0.0
         *
         * @param State          $state          A reference to the current migration state provider.
         * @param Progress_Modal $progress_modal A reference to the progress modal displayed to lock several pages.
         */
        public function __construct(\TEC\Events\Custom_Tables\V1\Migration\State $state, \TEC\Events\Custom_Tables\V1\Migration\Admin\Progress_Modal $progress_modal)
        {
        }
        /**
         * Output our special maintenance modal for all settings tabs except the Upgrade tab.
         *
         * @since 6.0.0
         *
         * @param string $tab The settings tab this action is running for.
         */
        public function inject_settings_page_modal($tab)
        {
        }
        /**
         * Activates the migration mode, disabling a number of UI elements
         * across plugins, if required by the current migration state.
         *
         * @since 6.0.0
         *
         * @return bool Whether the Event-wide maintenance mode was activated or not.
         */
        public function activate()
        {
        }
        /**
         * Disable Events Aggregator.
         *
         * @param mixed  $value  The `tribe_option` value.
         * @param string $option The `tribe_option` name.
         *
         * @return mixed The filtered option value, `true` when the option
         *               being filtered is the one to disable Events Aggregator.
         */
        public function filter_aggregator_disable($value, $option)
        {
        }
        /**
         * Inject the content and data of the Admin\Progress_Modal.
         *
         * @since 6.0.0
         */
        public function inject_progress_modal()
        {
        }
        /**
         * Inject the Admin\Progress_Modal trigger that pops open the modal.
         *
         * @since 6.0.0
         */
        public function inject_progress_modal_js_trigger()
        {
        }
    }
    /**
     * Class Migration_Exception.
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Migration;
     */
    class Migration_Exception extends \Exception
    {
    }
    /**
     * Class Process. Responsible for overseeing some phase management, and delegating workers.
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Migration;
     */
    class Process
    {
        /**
         * The meta key that will be used to flag an Event as migrated during the migration process.
         *
         * @since 6.0.0
         */
        const EVENT_CREATED_BY_MIGRATION_META_KEY = '_tec_event_created_by_migration';
        /**
         * Process constructor.
         *
         * @since 6.0.0
         *
         * @param Events $events A reference to the current Events' migration repository.
         * @param State  $state  A reference to the migration state data.
         */
        public function __construct(\TEC\Events\Custom_Tables\V1\Migration\Events $events, \TEC\Events\Custom_Tables\V1\Migration\State $state)
        {
        }
        /**
         * Starts the migration enqueueing the first set of Events to process.
         *
         * @since 6.0.0
         *
         * @param bool $dry_run Whether to do a preview or finalize the migration operations.
         *
         * @return int|false The number of Events queued for migration or false if migration already started.
         */
        public function start($dry_run = true)
        {
        }
        /**
         * Starts the cancel migration process.
         *
         * @since 6.0.0
         *
         * @return boolean False if undo blocked.
         */
        public function cancel()
        {
        }
        /**
         * Starts the revert migration process.
         *
         * @since 6.0.0
         *
         * @return boolean False if undo blocked.
         */
        public function revert()
        {
        }
        /**
         * When doing a migration failure cleanup, handle the appropriate steps.
         *
         * @since 6.0.0
         *
         * @return boolean False if undo blocked.
         */
        public function cancel_migration_with_failure()
        {
        }
        /**
         * Starts the migration undoing process.
         *
         * @since 6.0.0
         *
         */
        protected function undo()
        {
        }
        /**
         * Unschedules all of our process workers in the Action Schedule queue.
         *
         * @since 6.0.0
         */
        public function empty_process_queue()
        {
        }
        /**
         * Clean up when a queued migration worker is canceled.
         *
         * @since 6.0.0
         *
         * @param $action_id numeric The action scheduler action ID
         */
        public function cancel_async_action($action_id)
        {
        }
        /**
         * Clean up when our queued migration workers are canceled.
         *
         * @since 6.0.0
         *
         * @param array $action_ids List of action IDs.
         */
        public function cancel_async_actions(array $action_ids)
        {
        }
        /**
         * Remove the migration report meta from all events.
         *
         * @since 6.0.0
         *
         * @return void
         */
        public function remove_migration_report_meta() : void
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Traits {
    /**
     * Trait With_Database_Transactions.
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Traits;
     */
    trait With_Database_Transactions
    {
        /**
         * A flag property that will be set by the transaction methods
         * to keep track whether the current queries are running in a transaction
         * or not.
         *
         * @since 6.0.0
         *
         * @var bool
         */
        private $transaction_started = false;
        /**
         * Returns whether all tables in a set use the InnoDB engine or not.
         *
         * @since 6.0.0
         *
         * @param array<string> $tables The list of tables to check.
         *
         * @return bool Whether all tables in a set use the InnoDB engine or not.
         */
        private function tables_use_innodb(array $tables = [])
        {
        }
        /**
         * Returns whether database transactions are supported or not.
         *
         * The method will look up the `posts` and `postmeta` table and
         * check if the ENGINE is INNODB to assume transactions are supported.
         *
         * @since 6.0.0
         *
         * @param string|null The table prefix to check for, or `null` to use
         *                    the current one.
         *
         * @return bool Whether database transactions are supported or not.
         */
        private function transactions_supported($table_prefix = null)
        {
        }
        /**
         * Starts a transaction if supported and possible.
         *
         * @since 6.0.0
         *
         * @return bool Whether the transaction started or not.
         */
        private function transaction_start()
        {
        }
        /**
         * Rollback the current transaction if supported and possible.
         *
         * @since 6.0.0
         *
         * @return bool Whether the transaction was rolled back or not.
         */
        private function transaction_rollback()
        {
        }
        /**
         * Commits the current transaction if supported and possible.
         *
         * @since 6.0.0
         *
         * @return bool Whether the transaction was committed or not.
         */
        private function transaction_commit()
        {
        }
    }
    /**
     * Trait With_String_Dictionary.
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Traits;
     */
    trait With_String_Dictionary
    {
        /**
         * Returns the markup for the event edit link.
         *
         * @since 6.0.0
         *
         * @param int $post_id The post ID.
         *
         * @return string The HTML markup with the event link.
         */
        private function get_event_link_markup($post_id)
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Migration {
    /**
     * Class Process_Worker. Handles the migration and undo operations.
     *
     * @since   6.0.0
     * @package TEC\Events\Custom_Tables\V1\Migration;
     */
    class Process_Worker
    {
        use \TEC\Events\Custom_Tables\V1\Traits\With_Database_Transactions;
        use \TEC\Events\Custom_Tables\V1\Traits\With_String_Dictionary;
        /**
         * The full name of the action that will be fired to signal one
         * Event should be migrated, or have its migration previewed.
         */
        const ACTION_PROCESS = 'tec_events_custom_tables_v1_migration_process';
        /**
         * The full name of the action that will be fired to signal one
         * Event should be undone.
         */
        const ACTION_UNDO = 'tec_events_custom_tables_v1_migration_cancel';
        /**
         * The full name of the action that will be fired to signal the background
         * operation the phase should be checked.
         */
        const ACTION_CHECK_PHASE = 'tec_events_custom_tables_v1_migration_check_state';
        /**
         * Process_Worker constructor.
         *
         * @since 6.0.0
         *
         * @param Events $events A reference to the current Events' migration repository.
         * @param State  $state  A reference to the migration state data.
         */
        public function __construct(\TEC\Events\Custom_Tables\V1\Migration\Events $events, \TEC\Events\Custom_Tables\V1\Migration\State $state)
        {
        }
        /**
         * Any actions to be run immediately before a dry run migration will be applied.
         *
         * @since 6.0.0
         *
         * @param numeric $post_id
         */
        public function before_dry_run($post_id)
        {
        }
        /**
         * Any actions to be run immediately after a dry run migration was applied.
         *
         * @since 6.0.0
         *
         * @param numeric $post_id
         */
        public function after_dry_run($post_id)
        {
        }
        /**
         * Add hooks to handle cache issues when we are clearing post cache during migration.
         *
         * @since 6.0.0
         */
        public function add_cache_compatibility_hooks()
        {
        }
        /**
         * Remove hooks to handle cache issues when we are clearing post cache during migration.
         *
         * @since 6.0.0
         */
        public function remove_cache_compatibility_hooks()
        {
        }
        /**
         * Skips some cache actions that fail in our cleanup of post cache.
         *
         * @since 6.0.0
         *
         * @param mixed $all
         *
         * @return false
         */
        public function wpsc_delete_related_pages_on_edit($all)
        {
        }
        /**
         * Processes an Event migration.
         *
         * @since 6.0.0
         *
         * @param int  $post_id The post ID of the Event to migrate.
         * @param bool $dry_run Whether the migration should commit or just preview
         *                      the changes.
         *
         * @return Event_Report A reference to the migration report object produced by the
         *                      migration.
         */
        public function migrate_event(int $post_id, bool $dry_run = false) : ?\TEC\Events\Custom_Tables\V1\Migration\Reports\Event_Report
        {
        }
        /**
         * Will trigger the migration failure handling.
         *
         * @since 6.0.0
         */
        public function cancel_migration_with_failure()
        {
        }
        /**
         * Undoes an Event migration.
         *
         * @since 6.0.0
         *
         * @param array<string, mixed> The metadata we pass to ourselves.
         *
         */
        public function undo_event_migration($meta)
        {
        }
        /**
         * Handles non-fatal errors that might be triggered during the migration.
         *
         * @since 6.0.0
         *
         * @param int    $errno   The error code.
         * @param string $errstr  The error message.
         * @param string $errfile The file the error occurred in.
         *
         * @return bool A value indicating whether the error handler handled the erorr or not..
         *
         * @throws Migration_Exception A reference to an exception wrapping the error.
         */
        public function error_handler(int $errno, string $errstr, string $errfile) : bool
        {
        }
        /**
         * Hooked to the WordPress `shutdown` hook.
         * This method should be removed during a successful migration
         * or one that is properly handled. If not, then this method is
         * an attempt to log the failure.
         *
         * @since 6.0.0
         */
        public function shutdown_handler()
        {
        }
        /**
         * Checks and updates the migration phase depending on the current status of the database.
         *
         * This is an idem-potent method that will only ste the migration state to done
         * when done; two or more concurrent workers doing the same will not break the
         * logic.
         *
         * @since 6.0.0
         *
         * @return bool Whether the migration, or its preview, is completed or not.
         */
        public function check_phase()
        {
        }
        /**
         * Hooked to the `ob_start` function, this method will run consistently
         * across PHP versions when the `die` or `exit` function is called during
         * the migration process.
         *
         * @since 6.0.0
         *
         * @param string $buffer A string buffer that will contain all the output
         *                       produced by the PHP code before the `die` or `exit`
         *                       call.
         */
        public function ob_flush_handler($buffer)
        {
        }
        /**
         * Checks if the current phase is completed or not,
         * else queue another action to run the same check.
         *
         * @since 6.0.0
         *
         * @return int The ID of the new Action scheduled to check
         *             on the migration phase, `0` if no new Action
         *             was queued.
         */
        public function check_phase_complete()
        {
        }
        /**
         * Migrates up to a number of not yet migrated Events.
         *
         * @since 6.0.2
         *
         * @param int $count The number of Events to migrate, at the most.
         *
         * @return int The number of migrated Events.
         */
        public function migrate_many_events(int $count) : int
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1 {
    /**
     * Interface Provider_Contract
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\WP_Query
     */
    interface Provider_Contract
    {
        /**
         * Register the filters and DI container bindings required to integrate the plugin custom tables logic.
         *
         * @since 6.0.0
         */
        public function register();
        /**
         * Unregisters the filters registered by the provider.
         *
         * @since 6.0.0
         */
        public function unregister();
    }
}
namespace TEC\Events\Custom_Tables\V1\Migration {
    /**
     * Class Provider.
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Migration;
     */
    class Provider extends \TEC\Common\Contracts\Service_Provider implements \TEC\Events\Custom_Tables\V1\Provider_Contract
    {
        /**
         * Registers the required implementations and hooks into the required
         * actions and filters.
         *
         * @since 6.0.0
         *
         * @return void
         */
        public function register()
        {
        }
        /**
         * Run actions on WordPress 'init' action.
         */
        public function init()
        {
        }
        /**
         * Unhooks the hooks set by the Provider in the `register` method.
         *
         * @since 6.0.0
         *
         * @return void The method does not return any value and will have the side
         *              effect of unsetting the hooks set in the `register` method.
         */
        public function unregister()
        {
        }
        /**
         * Executes one step of the migration process to migrate, or preview
         * the migration of, one Event.
         *
         * @since 6.0.0
         *
         * @param int  $post_id The post ID of the Event to migrate.
         * @param bool $dry_run Whether the step should be executed in dry-run mode or not.
         *
         * @return void The method does not return any value but will trigger the action
         *              that will migrate the Event.
         */
        public function migrate_event($post_id, $dry_run = false)
        {
        }
        /**
         * Executes a check on the current migration phase state to transition it to the correct
         * one if no Worker took care of that.
         *
         * @since 6.0.0
         *
         * @return void The method does not return any value and will have the side-effect of
         *              updating the phase, if completed.
         */
        public function check_migration_phase()
        {
        }
        /**
         * Executes one step of the migration process to undo the migration of one Event.
         *
         * @since 6.0.0
         *
         * @param array<string,mixed> The metadata the worker passes itself to track state.
         *
         * @return void The method does not return any value but will trigger the action
         *              that will undo the Event migration.
         */
        public function undo_event_migration($meta = [])
        {
        }
        /**
         * Respond to canceled Action Scheduler actions.
         *
         * @since 6.0.0
         *
         * @param numeric $action_id The action scheduler action ID.
         */
        public function cancel_async_action($action_id)
        {
        }
        /**
         * Respond to bulk canceled Action Scheduler actions.
         *
         * @since 6.0.0
         *
         * @param array $action_id A list of the action scheduler action IDs.
         */
        public function cancel_async_actions($action_ids)
        {
        }
        /**
         * Sends (echoes) a JSON format report of the site migration.
         *
         * @since 6.0.0
         *
         * @return void The method does not return any value and will have the side effect
         *              of echoing a JSON format string back for the Migration UI JS component
         *              to consume.
         */
        public function send_report()
        {
        }
        /**
         * Sends (echoes) a JSON format report of a batch of paginated events.
         *
         * @since 6.0.0
         *
         * @return void The method does not return any value and will have the side effect
         *              of echoing a JSON format string back for the Migration UI JS component
         *              to consume.
         */
        public function paginate_events()
        {
        }
        /**
         * Starts the migration and sends the initial report.
         *
         * @since 6.0.0
         *
         * @return void The method does not return any value and will have the side effect
         *              of echoing a JSON format string back for the Migration UI JS component
         *              to consume.
         */
        public function start_migration()
        {
        }
        /**
         * Stops the migration and sends the final report.
         *
         * @since 6.0.0
         *
         * @return void The method does not return any value and will have the side effect
         *              of echoing a JSON format string back for the Migration UI JS component
         *              to consume.
         */
        public function cancel_migration()
        {
        }
        /**
         * Undoes the migration and sends the initial report.
         *
         * @since 6.0.0
         *
         * @return void The method does not return any value and will have the side effect
         *              of echoing a JSON format string back for the Migration UI JS component
         *              to consume.
         */
        public function revert_migration()
        {
        }
        /**
         * Activate the Event-only maintenance mode, if required by the current
         * migration state.
         *
         * @since 6.0.0
         *
         * @return void The method does not return any value and will have the side
         *              effect of putting the site Events, and related data, in maintenance
         *              mode.
         */
        public function activate_maintenance_mode()
        {
        }
        /**
         * Filters whether the Upgrade tab, hosting the migration report, should show or not.
         *
         * @since 6.0.0
         *
         * @param bool $show_tab The initial value as worked out by TEC and other plugins.
         *
         * @return bool Whether the Upgrade tab should show or not. A logic OR on the input
         *              value depending on the Migration state.
         */
        public function show_upgrade_tab($show_tab)
        {
        }
        /**
         * Filters the Upgrade tab fields to add the ones dedicated to the Migration.
         *
         * @since 6.0.0
         *
         * @param array<string,mixed> $upgrade_fields The Upgrade page fields, as set up
         *                                            by The Events Calendar and other plugins.
         *
         * @return array<string,mixed> The filtered Upgrade tab fields, including the fields
         *                             dedicated to Migration.
         */
        public function add_phase_callback($upgrade_fields)
        {
        }
        /**
         * Loads Action Scheduler late, after the `plugins_loaded` hook, at the
         * start of the `init` one.
         *
         * Action Scheduler does support loading after the `plugins_loaded` hook, but
         * not during it. The provider will register exactly during the `plugins_loaded`
         * action, so we need to retry setting up Action Scheduler again.
         *
         * @since 6.0.0
         */
        public function load_action_scheduler_late()
        {
        }
        /**
         * Piggy-back on the Migration UI JS component polling of the backend to migrate some events, if possible.
         *
         * @since 6.0.2
         *
         * @return void Some Events might be migrated.
         */
        public function migrate_events_on_js_poll() : void
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Migration\Reports {
    /**
     * Class Event_Report.
     *
     * @since   6.0.0
     * @package TEC\Events\Custom_Tables\V1\Migration;
     * @property object      source_event_post
     * @property array       strategies_applied
     * @property array       series
     * @property null|string error
     * @property string      status
     * @property array       created_events
     * @property bool        is_single
     * @property string      tickets_provider
     * @property bool        has_tickets
     * @property null|float  end_timestamp
     * @property null|float  start_timestamp
     */
    class Event_Report implements \JsonSerializable
    {
        /**
         * Key used to store the category this event is associated with. These categories are used to organize reports for
         * some views.
         */
        const META_KEY_MIGRATION_CATEGORY = '_tec_ct1_report_category';
        /**
         * Key used to flag this event is in progress and already assigned
         * to a strategy worker.
         */
        const META_KEY_MIGRATION_LOCK_HASH = '_tec_ct1_migration_lock_uid';
        /**
         * Key used to store the Event_Report data.
         */
        const META_KEY_REPORT_DATA = '_tec_ct1_migrated_report';
        /**
         * Flag to store the various reportable phases for an event.
         */
        const META_KEY_MIGRATION_PHASE = '_tec_ct1_current_migration_phase';
        /**
         * Flag for undo in progress.
         */
        const META_VALUE_MIGRATION_PHASE_UNDO_IN_PROGRESS = 'UNDO_IN_PROGRESS';
        /**
         * Flag for migration in progress.
         */
        const META_VALUE_MIGRATION_PHASE_MIGRATION_IN_PROGRESS = 'MIGRATION_IN_PROGRESS';
        /**
         * Flag for migration completed successfully.
         */
        const META_VALUE_MIGRATION_PHASE_MIGRATION_SUCCESS = 'MIGRATION_SUCCESS';
        /**
         * Flag for migration completed with a failure.
         */
        const META_VALUE_MIGRATION_PHASE_MIGRATION_FAILURE = 'MIGRATION_FAILURE';
        /**
         * Status flags for a particular operation. This is not tied to the action,
         * it should denote a high level failure.
         */
        const ALLOWED_STATUSES = ['success', 'failure'];
        /**
         * Status for failed migration.
         */
        const STATUS_FAILURE = 'failure';
        /**
         * Status for successful migration.
         */
        const STATUS_SUCCESS = 'success';
        /**
         * The report key used to indicate whether the migration of an Event is a failure or not.
         */
        const REPORT_KEY_FAILURE = 'report_failure';
        /**
         * The report key used to indicate whether an Event is single and has tickets or not.
         */
        const REPORT_KEY_SINGLE_WITH_TICKETS = 'report_single_event_with_tickets';
        /**
         * The report key used to indicate whether an Event is single or not.
         */
        const REPORT_KEY_SINGLE_EVENT = 'report_is_single_event';
        /**
         * Construct and hydrate the Event_Report for this WP_Post
         *
         * @since 6.0.0
         *
         * @param WP_Post $source_post
         */
        public function __construct($source_post)
        {
        }
        /**
         * Get all of the report data.
         *
         * @since 6.0.0
         *
         * @return array<string, mixed>
         */
        public function get_data()
        {
        }
        /**
         * Will fetch its data from the database and populate it's internal state.
         *
         * @since 6.0.0
         *
         * @return Event_Report
         */
        public function hydrate()
        {
        }
        /**
         * Add each WP_Post for events that will be created for this migration strategy.
         *
         * @since 6.0.0
         *
         * @param WP_Post $post
         * @param         $occurrences_generated
         *
         * @return $this
         */
        public function add_created_event(\WP_Post $post, $occurrences_generated)
        {
        }
        /**
         * When you start the migration process set the appropriate state.
         *
         * @since 6.0.0
         *
         * @return $this
         */
        public function start_event_migration()
        {
        }
        /**
         * Setup the microtime for when the migration starts.
         *
         * @since 6.0.0
         *
         * @return $this
         */
        protected function set_start_timestamp()
        {
        }
        /**
         * Setup the microtime for when the migration ends.
         *
         * @since 6.0.0
         *
         * @return $this
         */
        protected function set_end_timestamp()
        {
        }
        /**
         * Sets a key in the report data.
         *
         * @since 6.0.0
         *
         * @param string     $key   The key to set in the report data.
         * @param mixed|null $value The value to set for the key.
         *
         * @return $this A reference to this object, for chaining purposes.
         */
        public function set($key, $value = null)
        {
        }
        /**
         * Set the error message for migration failure events.
         *
         * @since 6.0.0
         *
         * @param string $reason
         *
         * @return $this
         */
        protected function set_error($reason)
        {
        }
        /**
         * Set the status flag for this report.
         *
         * @since 6.0.0
         *
         * @param string $status The status to set the migration state to, should be
         *                       one of the `ALLOWED_STATUSES` constant.
         *
         * @return $this A reference to this object, for chaining.
         *
         * @throws Migration_Exception If the input status is not allowed.
         */
        protected function set_status($status)
        {
        }
        /**
         * Add each WP_Post for series that will be created for this migration strategy.
         *
         * @since 6.0.0
         *
         * @param WP_Post $post
         *
         * @return $this
         */
        public function add_series(\WP_Post $post)
        {
        }
        /**
         * Add each strategy applied for this migration.
         *
         * @since 6.0.0
         *
         * @param string $strategy The slug of the applied migration strategy.
         *
         * @return $this A reference to this object, for chaining.
         */
        public function add_strategy($strategy)
        {
        }
        /**
         * Set the ticket provider, when an ET event.
         *
         * @since 6.0.0
         *
         * @param string $tickets_provider The slug of the tickets provider, if any.
         *
         * @return $this A reference to this object, for chaining.
         */
        public function set_tickets_provider($tickets_provider)
        {
        }
        /**
         * Removes all of the migration metadata.
         *
         * @since 6.0.0
         *
         * @return $this
         */
        public function clear_meta()
        {
        }
        /**
         * Mark this event migration as a success, and save in the database.
         *
         * @since 6.0.0
         *
         * @return Event_Report
         */
        public function migration_success()
        {
        }
        /**
         * Mark this event migration as a failure, and save in database with a reason.
         *
         * @since 6.0.0
         *
         * @param string $reason_key A reason key that is translated into the human-readable description of why the
         *                           migration failed.
         * @param array  $context    Context args that can be applied to the error message.
         *
         * @return Event_Report A reference to the Event Report object for the specific
         *                      that is being processed.
         */
        public function migration_failed($reason_key, array $context = [])
        {
        }
        /**
         * This will retrieve the translated text for the migration strategies being applied to this event.
         *
         * @since 6.0.0
         *
         * @return string The translated migration strategy being applied.
         */
        public function get_migration_strategy_text()
        {
        }
        /**
         * Will remove the lock from this Event.
         *
         * @since 6.0.0
         *
         * @return $this
         */
        public function unlock_event()
        {
        }
        /**
         * Stores current state in the meta table.
         *
         * @since 6.0.0
         *
         * @return $this
         */
        protected function save()
        {
        }
        /**
         * Getter for the report data.
         *
         * @since 6.0.0
         *
         * @param string $prop The property key.
         *
         * @return mixed|null
         */
        public function __get($prop)
        {
        }
        /**
         * The JSON serializer logic.
         *
         * @since 6.0.0
         */
        #[\ReturnTypeWillChange]
        public function jsonSerialize()
        {
        }
    }
    class Event_Report_Categories
    {
        /**
         * @var String_Dictionary Translations object.
         */
        protected $text;
        /**
         * @var State The migration State object.
         */
        protected $state;
        /**
         * @since 6.0.0
         *
         * @param String_Dictionary $text  The translations object.
         * @param State             $state The migration State object.
         */
        public function __construct(\TEC\Events\Custom_Tables\V1\Migration\String_Dictionary $text, \TEC\Events\Custom_Tables\V1\Migration\State $state)
        {
        }
        /**
         * Retrieve the migration event report categories.
         *
         * @since 6.0.0
         *
         * @return array<array{ key:string, label:string }>
         */
        public function get_categories()
        {
        }
    }
    /**
     * Class Site_Report.
     *
     * @since   6.0.0
     * @package TEC\Events\Custom_Tables\V1\Migration;
     * @property float  estimated_time_in_seconds
     * @property float  estimated_time_in_minutes
     * @property string date_completed
     * @property string completed_timestamp
     * @property int    total_events
     * @property int    total_events_migrated
     * @property int    total_events_in_progress
     * @property int    total_events_remaining
     * @property bool   has_changes
     * @property bool   has_errors
     * @property string migration_phase
     * @property bool   is_completed
     * @property bool   is_running
     * @property int    progress_percent
     * @property int    total_events_failed
     */
    class Site_Report implements \JsonSerializable
    {
        /**
         * Site report data.
         *
         * @since 6.0.0
         *
         * @var array<mixed> The report data.
         */
        protected $data = ['estimated_time_in_seconds' => 0, 'estimated_time_in_minutes' => 0, 'date_completed' => null, 'completed_timestamp' => null, 'total_events' => null, 'total_events_migrated' => null, 'total_events_in_progress' => null, 'total_events_remaining' => null, 'has_changes' => false, 'migration_phase' => null, 'is_completed' => false, 'is_running' => false, 'has_errors' => false, 'progress_percent' => 0, 'total_events_failed' => null];
        /**
         * Site_Report constructor.
         *
         * @since 6.0.0
         *
         * @param array <string,mixed> $data The report data in array format.
         */
        public function __construct(array $data)
        {
        }
        /**
         * Factory that builds and returns the site migration report, with pagination for the Event_Reports.
         *
         * @since 6.0.0
         *
         * @return Site_Report A reference to the site migration report instance.
         */
        public static function build()
        {
        }
        /**
         * Retrieves a sorted list of Event_Report objects.
         *
         * @since 6.0.0
         *
         * @param int   $page                  The page to retrieve in a pagination request. If -1, it will retrieve all
         *                                     reports in the database.
         * @param int   $count                 The number of event reports to retrieve. If $page is -1 this will be
         *                                     ignored.
         * @param array $filter                An option set of filters to apply to the search.
         *
         * @return array<Event_Report> A sorted list of Event_Report objects.
         */
        public function get_event_reports($page = -1, $count = 20, $filter = [])
        {
        }
        /**
         * Get all of the site report data.
         *
         * @since 6.0.0
         *
         * @return array<string,mixed>
         */
        public function get_data()
        {
        }
        /**
         * Getter for site report data.
         *
         * @since 6.0.0
         *
         * @param string $prop The key of the data.
         *
         * @return mixed|null
         */
        public function __get($prop)
        {
        }
        /**
         * The JSON serializer.
         *
         * @since 6.0.0
         */
        #[\ReturnTypeWillChange]
        public function jsonSerialize()
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Migration {
    /**
     * Class State.
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Migration;
     */
    class State
    {
        /**
         * Indicates the migration failed and is enacting remediation steps.
         *
         * @since 6.0.0
         *
         * @var string
         */
        const PHASE_MIGRATION_FAILURE_IN_PROGRESS = 'migration-failed-in-progress';
        /**
         * Indicates the migration failed and remediation steps are finished.
         *
         * @since 6.0.0
         *
         * @var string
         */
        const PHASE_MIGRATION_FAILURE_COMPLETE = 'migration-failed-complete';
        /**
         * Indicates the migration is not required at all.
         *
         * @since 6.0.0
         *
         * @var string
         */
        const PHASE_MIGRATION_NOT_REQUIRED = 'migration-not-required';
        /**
         * Indicates the migration cancel has completed.
         *
         * @since 6.0.0
         *
         * @var string
         */
        const PHASE_CANCEL_COMPLETE = 'cancel-complete';
        /**
         * Indicates the migration revert has completed.
         *
         * @since 6.0.0
         *
         * @var string
         */
        const PHASE_REVERT_COMPLETE = 'revert-complete';
        /**
         * Indicates the migration preview is ready to start.
         *
         * @since 6.0.0
         *
         * @var string
         */
        const PHASE_PREVIEW_PROMPT = 'preview-prompt';
        /**
         * Indicates the migration preview is in progress.
         *
         * @since 6.0.0
         *
         * @var string
         */
        const PHASE_PREVIEW_IN_PROGRESS = 'preview-in-progress';
        /**
         * Indicates the migration is ready to start and waiting for user confirmation.
         *
         * @since 6.0.0
         *
         * @var string
         */
        const PHASE_MIGRATION_PROMPT = 'migration-prompt';
        /**
         * Indicates the migration is in progress.
         *
         * @since 6.0.0
         *
         * @var string
         */
        const PHASE_MIGRATION_IN_PROGRESS = 'migration-in-progress';
        /**
         * Indicates the migration is complete.
         *
         * @since 6.0.0
         *
         * @var string
         */
        const PHASE_MIGRATION_COMPLETE = 'migration-complete';
        /**
         * Indicates a cancel migration is in progress.
         *
         * @since 6.0.0
         *
         * @var string
         */
        const PHASE_CANCEL_IN_PROGRESS = 'cancel-in-progress';
        /**
         * Indicates a revert migration is in progress.
         *
         * @since 6.0.0
         *
         * @var string
         */
        const PHASE_REVERT_IN_PROGRESS = 'revert-in-progress';
        /**
         * The key used in the calendar options to store the current state.
         *
         * @since 6.0.0
         *
         * @var string
         */
        const STATE_OPTION_KEY = 'tec_ct1_migration_state';
        /**
         * State constructor.
         *
         * @since 6.0.0
         */
        public function __construct(\TEC\Events\Custom_Tables\V1\Migration\Events $events)
        {
        }
        /**
         * Returns whether the migration is completed or not.
         *
         * @since 6.0.0
         *
         * @return bool Whether the migration is completed or not.
         */
        public function is_completed()
        {
        }
        /**
         * Returns whether the migration has been performed and has been successfully completed.
         *
         * @since 6.0.0
         *
         * @return bool
         */
        public function is_migrated()
        {
        }
        /**
         * Check if we should allow a reverse migration action to occur. There is an expiration period of time for how long
         * we allow someone to reverse.
         *
         * @since 6.0.0
         *
         * @return bool
         *
         * @throws \Exception
         */
        public function should_allow_reverse_migration()
        {
        }
        /**
         * Returns whether there is work being done. Does not only check for an in progress migration.
         *
         * @since 6.0.0
         *
         * @return bool Whether some worker actions are in flight.
         */
        public function is_running()
        {
        }
        /**
         * Checks the phases we want to lock out access to certain features.
         *
         * @since 6.0.0
         *
         * @return bool Whether we should lock the site for maintenance mode.
         */
        public function should_lock_for_maintenance()
        {
        }
        /**
         * Returns whether the migration is required or not.
         *
         * @since 6.0.0
         *
         * @return bool Whether the migration is required or not.
         */
        public function is_required()
        {
        }
        /**
         * Returns the current migration phase the site is in.
         *
         * @since 6.0.0
         *
         * @return string The current migration phase the site is in.
         */
        public function get_phase()
        {
        }
        /**
         * Returns a value for a specific data key or nested data key.
         *
         * @since 6.0.0
         *
         * @param string ...$keys A set of one or more indexes to get the
         *                        value of.
         *
         * @return mixed|null The value of the requested index, or nested indexed, or `null`
         *                    if not defined.
         */
        public function get(...$keys)
        {
        }
        /**
         * Set a value for the migration state.
         *
         * @since 6.0.0
         *
         * @param ...$keys string The key(s) of the value to store.
         * @param $value   mixed The value to store.
         */
        public function set(...$keys)
        {
        }
        /**
         * Save our current state.
         *
         * @since 6.0.0
         */
        public function save()
        {
        }
        /**
         * Returns whether the current phase is a migration dry-run or not.
         *
         * @since 6.0.2
         *
         * @return bool Whether the current phase is a migration dry-run or not.
         */
        public function is_dry_run() : bool
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Migration\Strategies {
    /**
     * Interface StrategyInterface.
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Migration\Stategies
     */
    interface Strategy_Interface
    {
        /**
         * Returns the strategy slug that should uniquely identify it among the possible
         * migration strategies.
         *
         * @since 6.0.0
         *
         * @return string The migration strategy slug.
         */
        public static function get_slug();
        /**
         * Applies the migration strategy and returns a report representing
         * its effects.
         *
         * @since 6.0.0
         *
         * @param Event_Report $event_report A reference to the Event Report that
         *                                   will be used for the Event.
         *
         * @return Event_Report A reference to the report for the Event migration.
         *
         * @throws Migration_Exception If there's any issue during the migration process.
         */
        public function apply(\TEC\Events\Custom_Tables\V1\Migration\Reports\Event_Report $event_report);
    }
    /**
     * Class Null_Migration_Strategy.
     *
     * @since 6.0.0
     */
    class Null_Migration_Strategy implements \TEC\Events\Custom_Tables\V1\Migration\Strategies\Strategy_Interface
    {
        /**
         * {@inheritDoc}
         */
        public static function get_slug()
        {
        }
        /**
         * The method will not actually do anything and will flag
         * the Event as migrated.
         *
         * @since 6.0.0
         *
         * @param Event_Report $event_report A reference to the report
         *                                   value object that should be
         *                                   updated with the migration results.
         *
         * @return Event_Report A reference to the updated Event report.
         */
        public function apply(\TEC\Events\Custom_Tables\V1\Migration\Reports\Event_Report $event_report)
        {
        }
    }
    /**
     * Class Single_Event_Migration_Strategy.
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Migration\Strategies
     */
    class Single_Event_Migration_Strategy implements \TEC\Events\Custom_Tables\V1\Migration\Strategies\Strategy_Interface
    {
        use \TEC\Events\Custom_Tables\V1\Traits\With_String_Dictionary;
        /**
         * {@inheritDoc}
         */
        public static function get_slug()
        {
        }
        /**
         * Single_Event_Migration_Strategy constructor.
         *
         * @since 6.0.0
         *
         * @param int  $post_id The post ID of the Event to migrate.
         * @param bool $dry_run Whether the migration should actually commit information,
         *                      or run in dry-run mode.
         *
         * @return Event_Report A reference to the report for the Event migration.
         *
         * @throws Migration_Exception If the post is not of the Event type.
         */
        public function __construct($post_id, $dry_run)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function apply(\TEC\Events\Custom_Tables\V1\Migration\Reports\Event_Report $event_report)
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Migration {
    /**
     * Class Strings.
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Migration;
     */
    class String_Dictionary
    {
        /**
         * String_Dictionary constructor.
         *
         * @since 6.0.0
         *
         * @param Plugins $plugins A reference to the current plugin dependencies handler.
         */
        public function __construct(\Tribe__Dependency $plugins)
        {
        }
        /**
         * Gets the migration prompt trailing message based on plugin activation state.
         *
         * Note this code will sense around for both .org and premium plugins: it's by
         * design and meant to keep the logic lean.
         *
         * @since 6.0.0
         *
         * @return string
         */
        public function get_plugin_state_migration_addendum()
        {
        }
        /**
         * Returns the filtered, localized string for a slug.
         *
         * @since 6.0.0
         *
         * @param string $key The key to return the string for.
         *
         * @return string The filtered localized string for the key,
         *                or the key itself if no string for the key
         *                can be found.
         */
        public function get($key)
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Models {
    /**
     * Class Builder
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Models
     */
    class Builder
    {
        /**
         * @var int Flag to validate the Builder::upsert was an insert. Note - This is dependent on whether the MySQL
         *      CLIENT_FOUND_ROWS flag is set or not.
         */
        const UPSERT_DID_INSERT = 1;
        /**
         * @var int Flag to validate the Builder::upsert was an update. Note - This is dependent on whether the MySQL
         *      CLIENT_FOUND_ROWS flag is set or not.
         */
        const UPSERT_DID_UPDATE = 2;
        /**
         * @var int Flag to validate the Builder::upsert made no changes. Note - This is dependent on whether the MySQL
         *      CLIENT_FOUND_ROWS flag is set or not.
         */
        const UPSERT_DID_NOT_CHANGE = 0;
        /**
         * The size of the batch the Builder should use to fetch
         * Models in unbound query methods like `find_all`.
         *
         * Set statically to affect any instance of the Builder.
         *
         * @since 6.0.0
         *
         * @var int
         */
        protected $batch_size = 1000;
        /**
         * List of all the valid operators to use when running comparisons with SQL.
         *
         * @since 6.0.0
         *
         * @var string[] operators
         */
        public $operators = ['=', '<', '>', '<=', '>=', '!=', '<>'];
        /**
         * Builder constructor.
         *
         * @since 6.0.0
         *
         * @param Model $model The model using this builder.
         */
        public function __construct(\TEC\Events\Custom_Tables\V1\Models\Model $model)
        {
        }
        /**
         * Sets the class-wide queries execution toggle that will enable or
         * disable the execution of queries overriding the per-instance value of the
         * `$execute_queries` flag.
         *
         * @since 6.0.0
         *
         * @param bool $class_execute_queries Whether to enable or disable the execution
         *                                    of queries class-wide.
         *
         * @see Builder::enable_query_execution() to set the flag on a per-instance basis
         */
        public static function class_enable_query_execution($class_execute_queries)
        {
        }
        /**
         * Get an instance to this builder class.
         *
         * @since 6.0.0
         *
         * @return $this An instance to this builder class.
         */
        public function builder_instance()
        {
        }
        /**
         * If this builder class has invalid queries or not.
         *
         * @since 6.0.0
         *
         * @return bool True if this builder has an invalid query, false otherwise.
         */
        public function has_invalid_queries()
        {
        }
        /**
         * Returns an array of strings with all the SQL queries generated by this builder class.
         *
         * @since 6.0.0
         *
         * @return array<string> An array of the current Builder queries.
         */
        public function queries()
        {
        }
        /**
         * Method to enable query execution or not.
         *
         * @since 6.0.0
         *
         * @param bool $execute_queries If the query should be executed or not against the Database.
         */
        public function enable_query_execution($execute_queries = true)
        {
        }
        /**
         * Sets the size of the batch the Builder should use to fetch models in unbound query methods like `find_all`.
         *
         * @since 6.0.0
         *
         * @param int $size    The size of the batch the Builder should use to fetch
         *                     Models in unbound query methods like `find_all`.
         *
         * @return Builder The instance to the current class.
         */
        public function set_batch_size($size = 100)
        {
        }
        /**
         * Insert a new row or update one if already exists.
         *
         * @since 6.1.3 Integration with memoization.
         * @since 6.0.0
         *
         * @param array<string>            $unique_by A list of columns that are marked as UNIQUE on the database.
         * @param array<string,mixed>|null $data      The data to be inserted or updated into the table.
         *
         * @return false|int The rows affected flag or false on failure.
         */
        public function upsert(array $unique_by, array $data = null)
        {
        }
        /**
         * Add operation to insert new records inside of the table that is used from the current model. A single entry can
         * be set here as an array of key => value pairs, where the key is the column being saved and the value is the
         * value intended to be saved.
         *
         * A bulk insert is also supported, only rows of the same size can be inserted, an array of arrays representing
         * each
         * the column to be inserted, all rows should be the same length of columns and values as the rest of the rows
         * inside of the data, otherwise the operation is won't complete.
         *
         * @since 6.0.0
         *
         * @param array<string, mixed>|array<array<string,mixed> $data The data that is being inserted.
         *
         * @return int The number of affected rows.
         */
        public function insert(array $data)
        {
        }
        /**
         * Perform updates against a model that already exists on the database.
         *
         * @since 6.1.3 Integration with memoization.
         * @since 6.0.0
         *
         * @param array|null $data    If the data is null the data of the model would be used to set an update, otherwise
         *                            an array of `column => value` are used to construct the series of updates to perform
         *                            against this model.
         *
         * @return bool|int False if the operation was unsuccessfully
         */
        public function update(array $data = null)
        {
        }
        /**
         * Run a delete operation against an existing model if the model has not been persisted on the DB the operation
         * will fail.
         *
         * @since 6.1.3 Integration with memoization.
         * @since 6.0.0
         *
         * @return int The number of affected rows.
         */
        public function delete()
        {
        }
        /**
         * Find an instance of the model in the database using a specific value and column if no column is specified
         * the primary key is used.
         *
         * @since 6.1.3 Added memoization behind a feature flag (default on).
         * @since 6.0.0
         *
         * @param mixed|array<mixed> $value  The value, or values, of the column we are looking for.
         * @param string|null        $column The name of the column used to compare against, primary key if not defined.
         *
         * @return Model|null Returns a single record where if the model is found, `null` otherwise.
         */
        public function find($value, $column = null)
        {
        }
        /**
         * Generates a cache key for this particular model instance.
         *
         * @since 6.1.3
         *
         * @param Model  $model The instance we are generating a cache key for.
         * @param string $field The field we are searching / caching by.
         * @param mixed  $value The value we are searching / caching with.
         *
         * @return string
         */
        public static function generate_cache_key(\TEC\Events\Custom_Tables\V1\Models\Model $model, $field, $value) : string
        {
        }
        /**
         * Get an array of models that match with the criteria provided.
         *
         * @since 6.0.0
         *
         * @param string       $column    The column name to look for.
         * @param array<mixed> $in_values An array of values to test against the database.
         *
         * @return Builder
         */
        public function where_in($column, array $in_values = [])
        {
        }
        /**
         * Append a new "NOT IN()" clause to the builder of where clauses.
         *
         * @since 6.0.0
         *
         * @param string       $column        The name of the column to compare against.
         * @param array<mixed> $not_in_values The list of values used in the comparison.
         *
         * @return $this
         */
        public function where_not_in($column, array $not_in_values = [])
        {
        }
        /**
         * Finds all the Model instances matching a set of values for a column.
         *
         * The method will query the database for matching Models in batches of fixed size
         * that will be hidden from the client code.
         *
         * @since 6.0.0
         *
         * @param mixed|array<mixed> $value     The value, or values, to find the matches for.
         * @param string|null        $column    The column to search the Models by, or `null` to use the Model
         *                                      primary column.
         *
         * @return Generator<Model>|null A generator that will return all matching Model instances
         *                               hiding the batched query logic.
         */
        public function find_all($value, $column = null)
        {
        }
        /**
         * Limit the results from a query to a single result and return the first instance if available otherwise null.
         *
         * @since 6.0.0
         *
         * @return Model|array|null The requested model in the required format, or `null` if the model could not be found.
         */
        public function first()
        {
        }
        /**
         * Execute a COUNT() call against the DB using the provided query elements.
         *
         * @since 6.0.0
         *
         * @param string|null $column_name The name of the column used for the count, '*` otherwise.
         *
         * @return int
         */
        public function count($column_name = null)
        {
        }
        /**
         * Execute an EXISTS() call using the created query as subquery of the EXISTS function.
         *
         * @since 6.0.0
         * @return bool True If the query has at least 1 result available, false otherwise.
         */
        public function exists()
        {
        }
        /**
         * Create a join clause with the single builder method.
         *
         * @since 6.0.0
         *
         * @param string $table_name           The name of the table to join.
         * @param string $left_column          The field on the table to join.
         * @param string $current_model_column The field on the current model to join against with.
         *
         * @return $this
         */
        public function join($table_name, $left_column, $current_model_column)
        {
        }
        /**
         * Select all the rows that match with the query.
         *
         * @since 6.0.0
         * @return Model[]
         */
        public function get()
        {
        }
        /**
         * Get all the pieces of the SQL constructed to used against the DB.
         *
         * @since 6.0.0
         * @return string
         */
        public function get_sql()
        {
        }
        /**
         * Add the available where clauses on the model.
         *
         * @since 6.0.0
         *
         * @param string      $column   The name of the column
         * @param string|null $operator The operator to use against to compare or the value
         * @param string|null $value    The value to compare against with.
         *
         * @return $this
         */
        public function where($column, $operator = null, $value = null)
        {
        }
        /**
         * Allow to define the clause for order by on the Query.
         *
         * @since 6.0.0
         * @since 6.0.13 Can accept multiple order by statements. Previously `order_by()` would only use the last statement specified.
         *
         * @param string|null $column The name of the column to order by, if not provided fallback to the primary key name
         * @param string      $order  The type of order for the results.
         *
         * @return $this
         */
        public function order_by($column = null, $order = 'ASC')
        {
        }
        /**
         * Set the limit for the current Query.
         *
         * @since 6.0.0
         *
         * @param int $limit The limit to apply to the current query.
         *
         * @return $this Instance to the current class.
         */
        public function limit($limit)
        {
        }
        /**
         * Set the offset for the current query.
         *
         * @since 6.0.0
         *
         * @param int $offset The offset applied to the current query.
         *
         * @return $this Instance to the current class.
         */
        public function offset($offset)
        {
        }
        /**
         * If an instance already exists refresh the values by querying the same value against the DB.
         *
         * @since 6.1.3 Integration with memoization.
         * @since 6.0.0
         *
         * @return Model
         */
        public function refresh()
        {
        }
        /**
         * Adds a raw WHERE clause to the SQL statement being built.
         *
         * @since 6.0.0
         * @param string $query   The SQL clause to be prepared using the `wpdb::prepare()`
         *                        method and placeholder format.
         * @param mixed  ...$args A set of arguments that should be used to prepare the SQL
         *                        statement.
         *
         * @return $this A reference to the query builder object, for chaining purposes.
         */
        public function where_raw($query, ...$args)
        {
        }
        /**
         * Sets the output format that should be used to format the result(s) of a SELECT
         * Model query.
         *
         * @since 6.0.0
         *
         * @param string $output One of `OBJECT`, `ARRAY_A` or `ARRAY_N`. Note that `OBJECT`
         *                       will build and return instances of the Model.
         *
         * @return $this A reference to the query builder object, for chaining purposes.
         */
        public function output($output = OBJECT)
        {
        }
        /**
         * Fetches all the matching results for the query.
         *
         * The method will handle querying the database in batches, running bound queries
         * to support unbound fetching.
         *
         * @since 6.0.0
         *
         * @return Generator<Model|array> A generator of either this Model instances or arrays, depending on
         *                                the selected output format.
         */
        public function all()
        {
        }
        /**
         * Bulk updates instances of the Model.
         *
         * Since MySQL does not come with a bulk update feature, this code will actually
         * delete the exising model entries and re-insert them, by primary key, using the
         * updated data.
         *
         * @since 6.1.3 Integration with memoization.
         * @since 6.0.0
         *
         * @param array<Model>|array<array<string,mixed>> $models Either a list of Model
         *                                                        instances to update, or a
         *                                                        set of models in array format.
         *
         * @return int The number of updated rows.
         */
        public function upsert_set(array $models = [])
        {
        }
        /**
         * Gets the results and plucks a field from each.
         *
         * @since 6.0.1
         *
         * @param string $field The field to pluck.
         *
         * @return array The plucked values.
         */
        public function pluck(string $field) : array
        {
        }
        /**
         * Maps from the results of the query to a new array using the callback.
         *
         * @since 6.0.1
         *
         * @param callable $callback The callback to use to map the results.
         *
         * @return array The mapped results.
         */
        public function map(callable $callback) : array
        {
        }
    }
    /**
     * Class Model
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Models
     *
     * @method static bool|int upsert( array $unique_by, array $data ) Update or Insert a new record into the table.
     * @method static Model|null find( mixed $value, string $column = null ) Find a record based on the $value and column provided
     * @method static Builder set_batch_size( int $size ) Sets the size of the batch the Builder should use to fetch models in unbound query methods like `find_all`.
     * @method static Generator find_all( mixed $value, string $column = null ) Find all the records based one the $value and column provided.
     * @method bool delete() Run a delete operation
     * @method static array get() An array with the result of a select constructed out with the current filters.
     * @method static int insert( array $data ) All the data than is going to be inserted.
     * @method static Builder where_in( string $column, array $in_values ) A list of all the records that match the query.
     * @method static Builder where_not_in( string $column, array $not_in_values ) A list of values that shouldn't match the query.
     * @method static Builder where( string $column, string $operator = null, string $value = null ) Set a where clause to filter the results.
     * @method static Builder where_raw( string $where, mixed ...$args ) Prepare and set a custom WHERE clause to filter the results.
     * @method static Builder limit( int $limit ) Sets the limit clause on the Query.
     * @method static Builder offset( int $offset ) Set the OFFSET clause on the Query.
     * @method static Builder order_by( string $column = null, string $order = 'ASC' ) Set the order by clause on the Query.
     * @method static Builder builder_instance() Get an instance from the Builder class.
     * @method static Builder count( string $column_name = null ) Count all the records that match the query.
     * @method static bool exists() If the SQL Query has at least one result on the Database.
     * @method static Builder join( string $table_name, string $left_column, string $right_column ) Creates an INNER JOIN statement.
     * @method static Builder output( string $output ) Sets the format that should be used to format results in SELECT queries.
     * @method static Builder all( ) Find all the records based on the built query.
     * @method static int upsert_set( array $data ) Update or Insert a multiple records into the table.
     * @method static array pluck( string $field ) Pluck a single field from the results.
     * @method static array map (callable $callback ) Maps from the results of the query to a new array using the callback.
     */
    abstract class Model implements \Serializable
    {
        /**
         * A map of the Model extensions, `null` when not yet initialized.
         *
         * @since 6.0.0
         *
         * @var array<string,array<string,array<string,mixed>>>|null
         */
        protected static $extensions;
        /**
         * A map relating the columns of this model with a validation class.
         *
         * @since 6.0.0
         * @var array<string,ValidatorInterface>
         */
        protected $validations = [];
        /**
         * A map relating the column of this model to the Formatter implementation for each.
         *
         * @since 6.0.0
         *
         * @var array<string,Formatter>
         */
        protected $formatters = [];
        /**
         * Hold the name of the table for this model.
         *
         * @since 6.0.0
         *
         * @var string The table where this model is persisted.
         */
        protected $table = '';
        /**
         * An associative array with the key of the error and the error message when validation fails for that particular
         * column.
         *
         * @since 6.0.0
         *
         * @var array<string, string>
         */
        protected $errors = [];
        /**
         * An associative array with the key of the error and the error message when validation fails for that particular
         * column. This is cumulative and will retain errors aside from a specific instance. Useful when interacting with the
         * models with the static API.
         *
         * @since 6.0.0
         *
         * @var array<string, string>
         */
        protected static $static_errors = [];
        /**
         * Array holding all the dynamic values attached to the object, before running the validation.
         *
         * @since 6.0.0
         *
         * @var array<string, mixed> An array holding the dynamic values set to this model.
         */
        protected $data = [];
        /**
         * A name of the column holding a reference to the primary key on this object.
         *
         * @since 6.0.0
         *
         * @var string $primary_key The name of the primary key.
         */
        protected $primary_key = '';
        /**
         * Define the properties or the columns used to create a hash associated with this model.
         *
         * @since 6.0.0
         *
         * @var array<string> A list with all the keys that are used to generate a hash for this model.
         */
        protected $hashed_keys = [];
        /**
         * Enable the model to indicate only a single field validation is happening, useful when we are just checking
         * the value of a single column instead of a composer series of values.
         *
         * @since 6.0.0
         *
         * @var array<string, bool> $single_validation
         */
        public $single_validations = [];
        /**
         * A map from properties to either the callable that will resolve their value,
         * or their previously resolved value.
         *
         *
         * @since 6.0.0
         *
         * @var array<string,callable|int|float|string>
         */
        protected $extended_properties = [];
        /**
         * If this model is memoized, this is the key to retrieve it.
         *
         * @since 6.1.3
         *
         * @var null|string
         */
        public $cache_key = null;
        /**
         * Model constructor.
         *
         * @param  array                    $data       An array with key => value pairs used to populate the model on creation of the object.
         * @param  Container|null  $container  A reference to the current Dependency Injection container instance.
         */
        public function __construct(array $data = [], \TEC\Common\Contracts\Container $container = null)
        {
        }
        /**
         * Flush this instances cache if it was cached.
         *
         * @since 6.1.3
         */
        public function flush_cache()
        {
        }
        /**
         * Get the name of the table that is being affected by this model.
         *
         * @since 6.0.0
         *
         * @return string The name of the table used for this model.
         */
        public function table_name()
        {
        }
        /**
         * Get the name of the primary column of this model.
         *
         * @since 6.0.0
         *
         * @return string The name of the column with the primary key value.s
         */
        public function primary_key_name()
        {
        }
        /**
         * Validates the Entry to make sure all of its data is valid and consistent.
         *
         * @since 6.0.0
         *
         * @param  array|null  $columns
         *
         * @return bool Whether the Entry is valid and consistent or not.
         */
        public function validate(array $columns = null)
        {
        }
        /**
         * If this function passed the validation or not.
         *
         * @since 6.0.0
         *
         * @return bool If this function passed the validation or not.
         */
        public function is_valid()
        {
        }
        /**
         * Whether the validations on this model failed.
         *
         * @since 6.0.0
         *
         * @return bool If the validation on this model failed.
         */
        public function is_invalid()
        {
        }
        /**
         * Returns the set of errors, if any, generated during the Entry validation.
         *
         * @since 6.0.0
         *
         * @return array<string> The set of errors, if any, generated during the Entry validation.
         */
        public function errors()
        {
        }
        /**
         * Returns the set of errors, if any, generated during validation across the most recent instances operation.
         * This is useful for situations when interacting with models via the static API.
         *
         * @since 6.0.0
         *
         * @return array<string> The set of errors, if any, generated during the Entry validation.
         */
        public static function last_errors()
        {
        }
        /**
         * Format only the column that were considered or are marked as valid, only valid and formatted columns are considered
         * as valid.
         *
         * @since 6.0.0
         *
         * @return array<array<string, mixed>, array<string>> An array with 2 elements, first the data as column => value, second array
         *                                                    is the format of each column like '%d' and such.
         */
        public function format()
        {
        }
        /**
         * Create a unique hash for this occurrence.
         *
         * @since 6.0.0
         *
         * @param  array  $keys
         *
         * @return string|null The generated hash if valid, null otherwise.
         */
        public function generate_hash()
        {
        }
        /**
         * Reset the data of the model back to a clear state.
         *
         * @since 6.0.0
         */
        public function reset()
        {
        }
        /**
         * Any static method call that is not found is proxies to this magic method that creates a new instance of this model
         * and forwards the call to the builder.
         *
         * @since 6.0.0
         *
         * @param  string  $name       The name of the method.
         * @param  array   $arguments  An array with all the parameters to the method.
         *
         * @return mixed The result of calling a not found static method on this class.
         */
        public static function __callStatic($name, $arguments)
        {
        }
        /**
         * Any method that was not found on the model, pass it through the builder class.
         *
         * @since 6.0.0
         *
         * @param  string  $name       The name of the method.
         * @param  array   $arguments  An array with all the parameters to the method.
         *
         * @return mixed The result of calling the method inside of the builder class.
         */
        public function __call($name, $arguments)
        {
        }
        /**
         * Set a value to a dynamic property.
         *
         * @since 6.0.0
         *
         * @param  string  $name   The name of the property.
         * @param  mixed   $value  The value of the property.
         */
        public function __set($name, $value)
        {
        }
        /**
         * Getter to access dynamic properties, to allow to change the value when reading from MySQL, due all properties
         * are returned as string or NULL when those are null on the columns of each row.
         *
         * @since 6.0.0
         *
         * @param  string  $name  The name of the property.
         *
         * @return mixed|null null if the value does not exists mixed otherwise the the value to the dynamic property.
         */
        public function __get($name)
        {
        }
        /**
         * Getter to retrieve all currently stored model values.
         *
         * @since 6.0.0
         *
         * @return array<string,mixed> The model data, in array format.
         */
        public function get_values()
        {
        }
        /**
         * Make sure when using `isset` or `empty` with a model the value reviews the dynamic properties instead.
         *
         * @since 6.0.0
         *
         * @param  string  $name  The name of the property.
         *
         * @return bool If the property has been defined as dynamic attribute.
         */
        public function __isset($name)
        {
        }
        /**
         * Create a new method to transform the values from a model into an array.
         *
         * @since 6.0.0
         * @return array An array with the result of the data associated with this model.
         */
        public function to_array()
        {
        }
        /**
         * Returns whether a Column is valid for the model or not.
         *
         * @since 6.0.0
         *
         * @param  string  $column  The column to check against the Model.
         *
         * @return bool Whether a Column is valid for the model or not.
         */
        public function valid_column($column)
        {
        }
        /**
         * If a model is cached, make sure only the important data is serialized, to reduce the amount of space that the
         * object uses when stored as a string.
         *
         * @since 6.0.6
         *
         * @return array The array representation of the object.
         */
        public function __serialize() : array
        {
        }
        /**
         * If a model is cached, make sure only the important data is serialized, to reduce the amount of space that the
         * object uses when stored as a string.
         *
         * @since 6.0.0
         * @since 6.0.6 - Utilize magic method for 8.1 support.
         *
         * @return string The string representing the object.
         */
        public function serialize() : string
        {
        }
        /**
         * If this object is constructed out of a `unserialize` call make sure the properties are set up correctly on the
         * object.
         *
         * @since 6.0.6
         *
         * @param  array  $serialized The array representation of the object.
         */
        public function __unserialize(array $serialized) : void
        {
        }
        /**
         * If this object is constructed out of a `unserialize` call make sure the properties are set up correctly on the
         * object.
         *
         * @since 6.0.0
         * @since 6.0.6 - Utilize magic method for 8.1 support.
         *
         * @param  string  $serialized
         */
        public function unserialize($serialized)
        {
        }
        /**
         * Mechanism to detect if the specified column was set as single validation.
         *
         * @since 6.0.0
         *
         * @param string $column The name of the column on the database where we are checking validation against with.
         *
         * @return bool `true` if the column was set as single validation `false` otherwise.
         */
        public function has_single_validation($column)
        {
        }
        /**
         * Mechanism to set a column with single validation
         *
         * @since 6.0.0
         *
         * @param string $column The name of the column on the database where we are checking validation against with.
         *
         * @return $this An instance to the current model.
         */
        public function enable_single_validation($column)
        {
        }
        /**
         * Mechanism to revert a single validation into a column.
         *
         * @since 6.0.0
         *
         * @param string $column The name of the column on the database where we are checking validation against with.
         *
         * @return $this An instance to the current model.
         */
        public function disable_single_validation($column)
        {
        }
        /**
         * Allow to convert this model into a string value.
         *
         * @since 6.0.0
         * @return string
         */
        public function __toString()
        {
        }
    }
    /**
     * Trait Model_Date_Attributes
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Models
     */
    trait Model_Date_Attributes
    {
        /**
         * Returns the Model instance `start_date` attribute in string format.
         *
         * This method will be internally called when trying to access the `start_date`
         * property of the Model instance.
         *
         * @since 6.0.0
         *
         * @return string The Model instance `start_date` attribute in string format.
         */
        public function get_start_date_attribute()
        {
        }
        /**
         * Returns the Model instance `start_date_utc` attribute in string format.
         *
         * This method will be internally called when trying to access the `start_date_utc`
         * property of the Model instance.
         *
         * @since 6.0.0
         *
         * @return string The Model instance `start_date_utc` attribute in string format.
         */
        public function get_start_date_utc_attribute()
        {
        }
        /**
         * Returns the Model instance `end_date` attribute in string format.
         *
         * This method will be internally called when trying to access the `end_date`
         * property of the Model instance.
         *
         * @since 6.0.0
         *
         * @return string The Model instance `end_date` attribute in string format.
         */
        public function get_end_date_attribute()
        {
        }
        /**
         * Returns the Model instance `end_date_utc` attribute in string format.
         *
         * This method will be internally called when trying to access the `end_date_utc`
         * property of the Model instance.
         *
         * @since 6.0.0
         *
         * @return string The Model instance `end_date_utc` attribute in string format.
         */
        public function get_end_date_utc_attribute()
        {
        }
    }
    /**
     * Class Event
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Models
     *
     * @property int    event_id
     * @property int    post_id
     * @property string rset (ECP only)
     * @property string start_date
     * @property string end_date
     * @property string timezone
     * @property string start_date_utc
     * @property string end_date_utc
     * @property int    duration
     * @property string updated_at
     * @property string hash
     */
    class Event extends \TEC\Events\Custom_Tables\V1\Models\Model
    {
        use \TEC\Events\Custom_Tables\V1\Models\Model_Date_Attributes;
        /**
         * {@inheritdoc }
         */
        protected $validations = ['event_id' => \TEC\Events\Custom_Tables\V1\Models\Validators\Integer_Key::class, 'post_id' => \TEC\Events\Custom_Tables\V1\Models\Validators\Valid_Event::class, 'start_date' => \TEC\Events\Custom_Tables\V1\Models\Validators\Start_Date::class, 'end_date' => \TEC\Events\Custom_Tables\V1\Models\Validators\End_Date::class, 'timezone' => \TEC\Events\Custom_Tables\V1\Models\Validators\Valid_Timezone::class, 'duration' => \TEC\Events\Custom_Tables\V1\Models\Validators\Duration::class, 'start_date_utc' => \TEC\Events\Custom_Tables\V1\Models\Validators\Start_Date_UTC::class, 'end_date_utc' => \TEC\Events\Custom_Tables\V1\Models\Validators\End_Date_UTC::class, 'hash' => \TEC\Events\Custom_Tables\V1\Models\Validators\String_Validator::class];
        /**
         * {@inheritdoc }
         */
        protected $formatters = ['event_id' => \TEC\Events\Custom_Tables\V1\Models\Formatters\Integer_Key_Formatter::class, 'post_id' => \TEC\Events\Custom_Tables\V1\Models\Formatters\Numeric_Formatter::class, 'duration' => \TEC\Events\Custom_Tables\V1\Models\Formatters\Numeric_Formatter::class, 'start_date' => \TEC\Events\Custom_Tables\V1\Models\Formatters\Date_Formatter::class, 'end_date' => \TEC\Events\Custom_Tables\V1\Models\Formatters\End_Date_Formatter::class, 'start_date_utc' => \TEC\Events\Custom_Tables\V1\Models\Formatters\Date_Formatter::class, 'end_date_utc' => \TEC\Events\Custom_Tables\V1\Models\Formatters\End_Date_Formatter::class, 'timezone' => \TEC\Events\Custom_Tables\V1\Models\Formatters\Timezone_Formatter::class, 'hash' => \TEC\Events\Custom_Tables\V1\Models\Formatters\Text_Formatter::class];
        /**
         * {@inheritdoc}
         */
        protected $table = 'tec_events';
        /**
         * {@inheritdoc}
         */
        protected $primary_key = 'event_id';
        /**
         * {@inheritdoc}
         *
         * @since 6.0.0
         *
         * @var string[] hashed_keys
         */
        protected $hashed_keys = ['post_id', 'duration', 'start_date', 'end_date', 'start_date_utc', 'end_date_utc', 'timezone'];
        /**
         * Add relationship between the event and the occurrences.
         *
         * @since 6.0.0
         *
         * @return Occurrence A reference to the Occurrence model instance.
         */
        public function occurrences()
        {
        }
        /**
         * Cast the value of the event ID to an integer if present, null otherwise when reading the `event_id` property.
         *
         * @since 6.0.0
         *
         * @param $value
         *
         * @return int|null
         */
        public function get_event_id_attribute($value)
        {
        }
        /**
         * Cast the value of the property `post_id` if present to an integer.
         *
         * @since 6.0.0
         *
         * @param $value
         *
         * @return int|null
         */
        public function get_post_id_attribute($value)
        {
        }
        /**
         * Cast the duration of the property `duration` to an integer.
         *
         * @since 6.0.0
         *
         * @param $value
         *
         * @return int
         */
        public function get_duration_attribute($value)
        {
        }
        /**
         * Check if the event is infinite or not, when the end date is not present (is null) it means the event
         * is infinite.
         *
         * @since 6.0.0
         *
         * @return bool Whether the Event is infinite or not.
         */
        public function is_infinite()
        {
        }
        /**
         * Check if the event is a multi-day event.
         *
         * $since 6.0.0
         *
         * @return bool Whether an Event is multi-day or not.
         */
        public function is_multiday()
        {
        }
        /**
         * Builds and returns, if possible, the data that should be used to hydrate an Event
         * Model instance from the existing Event Post, from the posts table.
         *
         * The data provided from this method is *unvalidated* and must be passed to the Model
         * instance for validation and sanitization.
         *
         * @since 6.0.0
         *
         * @param int|WP_Post $event_id Either the Event Post ID, or a reference to the Event
         *                              Post object.
         *
         * @return array<string,mixed> Either an array of the Event Model data read from the
         *                             existing post, or an empty array if the post data could
         *                             not be read for any reason.
         */
        public static function data_from_post($event_id)
        {
        }
        /**
         * Returns the value of a model field.
         *
         * @since 6.0.0
         *
         * @param int    $post_id The Event post ID to return the value for.
         * @param string $field   The name of the Event model property to return the value for.
         *
         * @return mixed|null Either the field value, or the default value if not found.
         */
        public static function get_field($post_id, $field, $default = null)
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Models\Formatters {
    /**
     * Interface Formatter
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Models\Formatters
     */
    interface Formatter
    {
        /**
         * Format a column into a suitable format for processing.
         *
         * @since 6.0.0
         *
         * @param $value
         *
         * @return mixed The result of the formatting.
         */
        public function format($value);
        /**
         * Format used to prepare this value before is saved into the database like `%s` for strings.
         *
         * @since 6.0.0
         *
         * @return mixed How the data should be prepared (sanitized) before is saved into the DB.
         */
        public function prepare();
    }
    class Boolean_Formatter implements \TEC\Events\Custom_Tables\V1\Models\Formatters\Formatter
    {
        public function format($value)
        {
        }
        public function prepare()
        {
        }
    }
    /**
     * Class Date_Formatter
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Models\Formatters
     */
    class Date_Formatter implements \TEC\Events\Custom_Tables\V1\Models\Formatters\Formatter
    {
        /**
         * Date_Formatter constructor.
         *
         * @since 6.0.0
         *
         * @param  Text_Formatter  $formatter  A reference to a text formatter instance.
         */
        public function __construct(\TEC\Events\Custom_Tables\V1\Models\Formatters\Text_Formatter $formatter)
        {
        }
        /**
         * {@inheritdoc }
         */
        public function format($value)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function prepare()
        {
        }
    }
    /**
     * Class Date_Formatter
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Models\Formatters
     */
    class End_Date_Formatter implements \TEC\Events\Custom_Tables\V1\Models\Formatters\Formatter
    {
        /**
         * Date_Formatter constructor.
         *
         * @since 6.0.0
         *
         * @param  Text_Formatter  $formatter  A reference to a text formatter instance.
         */
        public function __construct(\TEC\Events\Custom_Tables\V1\Models\Formatters\Date_Formatter $formatter)
        {
        }
        /**
         * {@inheritdoc }
         */
        public function format($value)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function prepare()
        {
        }
    }
    /**
     * Class Integer_Key_Formatter
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Models\Formatters
     */
    class Integer_Key_Formatter implements \TEC\Events\Custom_Tables\V1\Models\Formatters\Formatter
    {
        /**
         * Format a key if it was provided
         *
         * @since 6.0.0
         *
         * @param $value
         *
         * @return int|null
         */
        public function format($value)
        {
        }
        /**
         * @inheritDoc
         *
         * @since 6.0.0
         *
         * @return string
         */
        public function prepare()
        {
        }
    }
    class Numeric_Formatter implements \TEC\Events\Custom_Tables\V1\Models\Formatters\Formatter
    {
        public function format($value)
        {
        }
        public function prepare()
        {
        }
    }
    class Text_Formatter implements \TEC\Events\Custom_Tables\V1\Models\Formatters\Formatter
    {
        public function format($value)
        {
        }
        public function prepare()
        {
        }
    }
    class Timezone_Formatter implements \TEC\Events\Custom_Tables\V1\Models\Formatters\Formatter
    {
        public function __construct(\TEC\Events\Custom_Tables\V1\Models\Formatters\Text_Formatter $formatter)
        {
        }
        public function format($value)
        {
        }
        public function prepare()
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Models {
    /**
     * Class Occurrence
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Models
     *
     * @property Event  event
     * @property int    occurrence_id
     * @property int    event_id
     * @property int    post_id
     * @property string start_date
     * @property string start_date_utc
     * @property string end_date
     * @property string end_date_utc
     * @property int    duration
     * @property string hash
     * @property string updated_at
     * @property bool   has_recurrence (ECP only)
     * @property int    sequence  (ECP only)
     * @property int    provisional_id (ECP only)
     * @property bool   is_rdate (ECP only)
     */
    class Occurrence extends \TEC\Events\Custom_Tables\V1\Models\Model
    {
        use \TEC\Events\Custom_Tables\V1\Models\Model_Date_Attributes;
        /**
         * {@inheritdoc }
         */
        protected $validations = ['occurrence_id' => \TEC\Events\Custom_Tables\V1\Models\Validators\Integer_Key::class, 'event_id' => \TEC\Events\Custom_Tables\V1\Models\Validators\Positive_Integer::class, 'post_id' => \TEC\Events\Custom_Tables\V1\Models\Validators\Valid_Event::class, 'start_date' => \TEC\Events\Custom_Tables\V1\Models\Validators\Start_Date::class, 'end_date' => \TEC\Events\Custom_Tables\V1\Models\Validators\End_Date::class, 'start_date_utc' => \TEC\Events\Custom_Tables\V1\Models\Validators\Start_Date_UTC::class, 'end_date_utc' => \TEC\Events\Custom_Tables\V1\Models\Validators\End_Date_UTC::class, 'duration' => \TEC\Events\Custom_Tables\V1\Models\Validators\Occurrence_Duration::class, 'hash' => \TEC\Events\Custom_Tables\V1\Models\Validators\String_Validator::class, 'updated_at' => \TEC\Events\Custom_Tables\V1\Models\Validators\Valid_Date::class];
        /**
         * {@inheritdoc }
         */
        protected $formatters = ['occurrence_id' => \TEC\Events\Custom_Tables\V1\Models\Formatters\Integer_Key_Formatter::class, 'event_id' => \TEC\Events\Custom_Tables\V1\Models\Formatters\Numeric_Formatter::class, 'post_id' => \TEC\Events\Custom_Tables\V1\Models\Formatters\Numeric_Formatter::class, 'start_date' => \TEC\Events\Custom_Tables\V1\Models\Formatters\Date_Formatter::class, 'end_date' => \TEC\Events\Custom_Tables\V1\Models\Formatters\Date_Formatter::class, 'start_date_utc' => \TEC\Events\Custom_Tables\V1\Models\Formatters\Date_Formatter::class, 'end_date_utc' => \TEC\Events\Custom_Tables\V1\Models\Formatters\Date_Formatter::class, 'duration' => \TEC\Events\Custom_Tables\V1\Models\Formatters\Numeric_Formatter::class, 'hash' => \TEC\Events\Custom_Tables\V1\Models\Formatters\Text_Formatter::class, 'updated_at' => \TEC\Events\Custom_Tables\V1\Models\Formatters\Date_Formatter::class];
        /**
         * {@inheritdoc}
         */
        protected $table = 'tec_occurrences';
        /**
         * {@inheritdoc}
         */
        protected $primary_key = 'occurrence_id';
        /**
         * {@inheritdoc}
         *
         * @since 6.0.0
         *
         * @var string[] hashed_keys
         */
        protected $hashed_keys = ['post_id', 'start_date', 'end_date', 'start_date_utc', 'end_date_utc', 'duration'];
        /**
         * Filters the Occurrence post ID to normalize it.
         *
         * By default the Occurrence post ID will not be modified.
         *
         * @since 6.0.0
         *
         * @param int $occurrence_id The Occurrence post ID to normalize.
         *
         * @return int The normalized Occurrence post ID.
         */
        public static function normalize_id($occurrence_id)
        {
        }
        /**
         * Method to save the occurrences from an event.
         *
         * @since 6.0.0
         *
         * @param mixed $args,... The arguments that should be used to generate and save the Occurrences.
         *
         * @return void The method has the side-effect of generating and saving Occurrences for the Event.
         *
         * @throws Exception If there's an issue in the format or coherency of the additional data.
         */
        public function save_occurrences(...$args)
        {
        }
        /**
         * Cast the value of the event ID to an integer if present, null otherwise when reading the `event_id` property.
         *
         * @since 6.0.0
         *
         * @param $value
         *
         * @return int|null
         */
        public function get_event_id_attribute($value)
        {
        }
        /**
         * Cast the value of the property `post_id` if present to an integer.
         *
         * @since 6.0.0
         *
         * @param $value
         *
         * @return int|null
         */
        public function get_post_id_attribute($value)
        {
        }
        /**
         * Dynamic accessor to the occurrence ID attribute.
         *
         * @since 6.0.0
         *
         * @param $value
         *
         * @return int|null
         */
        public function get_occurrence_id_attribute($value)
        {
        }
        /**
         * If the occurrence was generated using a recurrence rule.
         *
         * @since 6.0.0
         *
         * @param $value
         *
         * @return bool
         */
        public function get_has_recurrence_attribute($value)
        {
        }
        /**
         * Returns the Occurrence model instance, if any , that starts first between all the Occurrences.
         *
         * @since 6.0.0
         *
         * @return Model|null Either the Model for the Occurrence entry that starts first, or `null`
         *                    to indicate there are no Occurrences.
         */
        public static function earliest()
        {
        }
        /**
         * Returns the Occurrence mode, if any , that ends last between all the Occurrences.
         *
         * @since 6.0.0
         *
         * @return Model|null Either the Model for the Occurrence entry that ends last, or `null`
         *                    to indicate there are no Occurrences.
         */
        public static function latest()
        {
        }
        /**
         * Returns whether an Occurrence is the last Occurrence in context of the Recurring Event
         * it belongs to, or not.
         *
         * @since 6.0.0
         *
         * @param  int|Occurrence  $occurrence  Either an Occurrence `occurrence_id` or an instance of the
         *                                      Occurrence Model.
         *
         * @return bool Whether an Occurrence is the first occurrence in context of the Recurring Event
         *              it belongs to, or not.
         */
        public static function is_last($occurrence)
        {
        }
        /**
         * Returns whether an Occurrence is the first Occurrence in context of the Recurring Event
         * it belongs to, or not.
         *
         * @since 6.0.0
         *
         * @param  int|Occurrence  $occurrence  Either an Occurrence `occurrence_id` or an instance of the
         *                                      Occurrence Model.
         *
         * @return bool Whether an Occurrence is the first occurrence in context of the Recurring Event
         *              it belongs to, or not.
         */
        public static function is_first($occurrence)
        {
        }
        /**
         * Finds the Occurrence model instance, if any, for a real post ID, a provisional post ID,
         * or an Occurrence ID.
         *
         * @param int $id The ID to return an Occurrence instance for. Either a real Event Post ID,
         *                a provisional Occurrence ID.
         *
         * @return Occurrence|null A reference to the matching Occurrence instance, or `null` if
         *                         no Occurrence instance could be matched to the ID.
         */
        public static function find_by_post_id($id)
        {
        }
        /**
         * Returns the Model instance `updated_at` attribute in string format.
         *
         * This method will be internally called when trying to access the `updated_at`
         * property of the Model instance.
         *
         * @since 6.0.0
         *
         * @return string The Model instance `updated_at` attribute in string format.
         */
        public function get_updated_at_attribute()
        {
        }
        /**
         * @since 6.0.0
         *
         * @param int $id Provisional or other ID that we want to validate against the database as a valid Occurrence ID.
         *
         * @return bool
         */
        public static function is_valid_occurrence_id($id)
        {
        }
    }
    /**
     * Interface Post_Model
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Models
     */
    interface Post_Model
    {
        /**
         * Validates, or inserts, posts of the post model type.
         *
         * @since 6.0.0
         *
         * @param array<int,string>|int|string A post ID to validate, the title of a post to insert or a list of those.
         * @param array<string,mixed> $create_overrides A map of overrides that should be used to insert the post if
         *                                              not present.
         *
         * @return array<int>|int Either the validated or inserted post ID, or a list of them. The method will return
         *                        `0` to indicate the post could is not valid or could not be created.
         */
        public static function vinsert($posts, array $create_overrides = []);
    }
}
namespace TEC\Events\Custom_Tables\V1\Models\Validators {
    /**
     * Interface Validator
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Models\Validators
     */
    interface ValidatorInterface
    {
        /**
         * Validates an input value with an optional context.
         *
         * @since 6.0.0
         *
         * @param  Model   $model  An optional context to use for the validation.
         * @param  string  $name   The name of the parameter being modified.
         * @param  mixed   $value  The actual value being saved.
         *
         * @return bool Whether the input value is valid or not.
         */
        public function validate(\TEC\Events\Custom_Tables\V1\Models\Model $model, $name, $value);
        /**
         * Get the validation error messages.
         *
         * @since 6.0.0
         *
         * @return array The validation error messages.
         */
        public function get_error_messages();
        /**
         * Adds an error message to the list of errors retrieved by get_error_messages().
         *
         * @since 6.0.0
         *
         * @param string $message The error message to store.
         *
         * @return $this
         */
        public function add_error_message($message);
        /**
         * Clears any stored error messages.
         *
         * @since 6.0.0
         * @return $this
         */
        public function clear_error_messages();
    }
    /**
     * Class Validation
     *
     * @since 6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Models\Validators
     */
    abstract class Validator implements \TEC\Events\Custom_Tables\V1\Models\Validators\ValidatorInterface
    {
        /**
         * The error message if the validation fails.
         *
         * @since 6.0.0
         *
         * @var array The error message if the validation fails.
         */
        protected $error_messages = [];
        /**
         * Get the validation error message.
         *
         * @since 6.0.0
         *
         * @return array The validation error messages.
         */
        public function get_error_messages()
        {
        }
        /**
         * Adds an error message to the list of errors.
         *
         * @since 6.0.0
         *
         * @param string $message The error message to save.
         *
         * @return $this
         */
        public function add_error_message($message)
        {
        }
        /**
         * Clears all the currently stored error messages.
         *
         * @since 6.0.0
         *
         * @return $this
         */
        public function clear_error_messages()
        {
        }
    }
    /**
     * Class Start_Date_UTC
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Models\Validators
     */
    class Duration extends \TEC\Events\Custom_Tables\V1\Models\Validators\Validator
    {
        /**
         * @var Whole_Number
         */
        protected $whole_number_validator;
        /**
         * Duration constructor.
         *
         * @param Whole_Number $whole_number_validator A reference to the Positive Integer validator.
         */
        public function __construct(\TEC\Events\Custom_Tables\V1\Models\Validators\Whole_Number $whole_number_validator)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function validate(\TEC\Events\Custom_Tables\V1\Models\Model $model, $name, $value)
        {
        }
        /**
         * Checks the duration against a date couple.
         *
         * The Duration value represents the value of a single event occurrence.
         * As such it should be less than, or equal for Single Events, to the difference between End and Start.
         *
         * @since 6.0.0
         *
         * @param string|int|\DateTimeInterface $start_date The Start Date.
         * @param string|int|\DateTimeInterface $end_date   The End Date.
         * @param int                           $duration   The Duration value.
         * @param string|null                   $timezone   The timezone to use for the calculation.
         *
         * @return bool Whether the Duration value is valid when validated in the context of the Dates or not.
         */
        protected function check_against_dates($start_date, $end_date, int $duration, ?string $timezone = null)
        {
        }
    }
    /**
     * Class Start_Date_UTC
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Models\Validators
     */
    class End_Date extends \TEC\Events\Custom_Tables\V1\Models\Validators\Validator
    {
        /**
         * End_Date constructor.
         *
         * @since 6.0.0
         *
         * @param  Valid_Date   $date_validator         A Date validator instance.
         * @param  Range_Dates  $range_dates_validator  A Dates Range validator instance.
         */
        public function __construct(\TEC\Events\Custom_Tables\V1\Models\Validators\Valid_Date $date_validator, \TEC\Events\Custom_Tables\V1\Models\Validators\Range_Dates $range_dates_validator)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function validate(\TEC\Events\Custom_Tables\V1\Models\Model $model, $name, $value)
        {
        }
    }
    /**
     * Class End_Date_UTC
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Models\Validators
     */
    class End_Date_UTC extends \TEC\Events\Custom_Tables\V1\Models\Validators\Validator
    {
        /**
         * End_Date_UTC constructor.
         *
         * @since 6.0.0
         *
         * @param  Valid_Date   $date_validator  A Date validator instance.
         * @param  Range_Dates  $range_dates     A Dates Range validator instance.
         */
        public function __construct(\TEC\Events\Custom_Tables\V1\Models\Validators\Valid_Date $date_validator, \TEC\Events\Custom_Tables\V1\Models\Validators\Range_Dates $range_dates)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function validate(\TEC\Events\Custom_Tables\V1\Models\Model $model, $name, $value)
        {
        }
    }
    /**
     * Class Ignore_Validator
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Models\Validators
     */
    class Ignore_Validator extends \TEC\Events\Custom_Tables\V1\Models\Validators\Validator
    {
        /**
         * Consider any input as valid.
         *
         * @since 6.0.0
         *
         * @param  Model   $model
         * @param  string  $name
         * @param  mixed   $value
         *
         * @return bool
         */
        public function validate(\TEC\Events\Custom_Tables\V1\Models\Model $model, $name, $value)
        {
        }
    }
    /**
     * Class Positive_Integer
     *
     * @package TEC\Events\Custom_Tables\V1\Models\Validators
     */
    class Integer_Key extends \TEC\Events\Custom_Tables\V1\Models\Validators\Validator
    {
        /**
         * Positive_Integer constructor.
         *
         * @since 6.0.0
         *
         * @param  Present           $present  The present validator.
         * @param  Positive_Integer  $positive_integer
         */
        public function __construct(\TEC\Events\Custom_Tables\V1\Models\Validators\Present $present, \TEC\Events\Custom_Tables\V1\Models\Validators\Positive_Integer $positive_integer)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function validate(\TEC\Events\Custom_Tables\V1\Models\Model $model, $name, $value)
        {
        }
    }
    /**
     * Class Occurrence_Duration
     *
     * @since 6.0.1
     *
     * @package TEC\Events\Custom_Tables\V1\Models\Validators
     */
    class Occurrence_Duration extends \TEC\Events\Custom_Tables\V1\Models\Validators\Duration
    {
        /**
         * {@inheritDoc}
         */
        public function validate(\TEC\Events\Custom_Tables\V1\Models\Model $model, $name, $value)
        {
        }
        /**
         * Fetch the timezone that relates to this occurrence.
         *
         * @since 6.0.1
         *
         * @param Occurrence $model The occurrence to fetch it's timezone for.
         *
         * @return string|null
         */
        protected function get_occurrence_timezone(\TEC\Events\Custom_Tables\V1\Models\Occurrence $model) : ?string
        {
        }
    }
    /**
     * Class Positive_Integer
     *
     * @package TEC\Events\Custom_Tables\V1\Models\Validators
     */
    class Positive_Integer extends \TEC\Events\Custom_Tables\V1\Models\Validators\Validator
    {
        /**
         * Positive_Integer constructor.
         *
         * @since 6.0.0
         *
         * @param  Present  $present  The present validator.
         */
        public function __construct(\TEC\Events\Custom_Tables\V1\Models\Validators\Present $present)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function validate(\TEC\Events\Custom_Tables\V1\Models\Model $model, $name, $value)
        {
        }
    }
    /**
     * Class Present
     *
     * @package TEC\Events\Custom_Tables\V1\Models\Validators
     */
    class Present extends \TEC\Events\Custom_Tables\V1\Models\Validators\Validator
    {
        /**
         * {@inheritDoc}
         */
        public function validate(\TEC\Events\Custom_Tables\V1\Models\Model $model, $name, $value)
        {
        }
    }
    /**
     * Class End_Date_UTC
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Models\Validators
     */
    class Range_Dates
    {
        /**
         * Compares the Start Date and End Date of an event to make sure the End Date is equal to or after the Start Date.
         *
         * @since 6.0.0
         *
         * @param string|int|DateTimeInterface $start The Start Date to compare.
         * @param string|int|DateTimeInterface $end   The End Date to compare.
         *
         * @return bool Whether the End Date is after the Start Date or not.
         */
        public function compare($start, $end)
        {
        }
    }
    /**
     * Class Start_Date_UTC
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Models\Validators
     */
    class Start_Date extends \TEC\Events\Custom_Tables\V1\Models\Validators\Validator
    {
        public function __construct(\TEC\Events\Custom_Tables\V1\Models\Validators\Valid_Date $date_validator, \TEC\Events\Custom_Tables\V1\Models\Validators\Range_Dates $range_dates)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function validate(\TEC\Events\Custom_Tables\V1\Models\Model $model, $name, $value)
        {
        }
    }
    /**
     * Class Start_Date_UTC
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Models\Validators
     */
    class Start_Date_UTC extends \TEC\Events\Custom_Tables\V1\Models\Validators\Validator
    {
        /**
         * Start_Date_UTC constructor.
         *
         * @since 6.0.0
         *
         * @param  Valid_Date   $date_validator  An instance of the Date validator.
         * @param  Range_Dates  $range_dates     An instance of the Date Ranges validator.
         */
        public function __construct(\TEC\Events\Custom_Tables\V1\Models\Validators\Valid_Date $date_validator, \TEC\Events\Custom_Tables\V1\Models\Validators\Range_Dates $range_dates)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function validate(\TEC\Events\Custom_Tables\V1\Models\Model $model, $name, $value)
        {
        }
    }
    /**
     * Class Present
     *
     * @package TEC\Events\Custom_Tables\V1\Models\Validators
     */
    class String_Validator extends \TEC\Events\Custom_Tables\V1\Models\Validators\Validator
    {
        /**
         * String_Validation constructor.
         *
         * @since 6.0.0
         *
         * @param  Present  $present
         */
        public function __construct(\TEC\Events\Custom_Tables\V1\Models\Validators\Present $present)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function validate(\TEC\Events\Custom_Tables\V1\Models\Model $model, $name, $value)
        {
        }
    }
    /**
     * Class Valid_Date
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Models\Validators
     */
    class Valid_Date extends \TEC\Events\Custom_Tables\V1\Models\Validators\Validator
    {
        /**
         * {@inheritDoc}
         */
        public function validate(\TEC\Events\Custom_Tables\V1\Models\Model $model, $name, $value)
        {
        }
    }
    /**
     * Class Valid_Event
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Models\Validators
     */
    class Valid_Event extends \TEC\Events\Custom_Tables\V1\Models\Validators\Validator
    {
        /**
         * {@inheritDoc}
         */
        public function validate(\TEC\Events\Custom_Tables\V1\Models\Model $model, $name, $value)
        {
        }
    }
    /**
     * Class Valid_Event_Model
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Models\Validators
     */
    class Valid_Event_Model extends \TEC\Events\Custom_Tables\V1\Models\Validators\Validator
    {
        /**
         * {@inheritdoc}
         */
        public function validate(\TEC\Events\Custom_Tables\V1\Models\Model $model, $name, $value)
        {
        }
    }
    /**
     * Class Valid_Timezone
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Models\Validators
     */
    class Valid_Timezone extends \TEC\Events\Custom_Tables\V1\Models\Validators\Validator
    {
        /**
         * {@inheritDoc}
         */
        public function validate(\TEC\Events\Custom_Tables\V1\Models\Model $model, $name, $value)
        {
        }
    }
    /**
     * Model validator for whole numbers.
     */
    class Whole_Number extends \TEC\Events\Custom_Tables\V1\Models\Validators\Validator
    {
        /**
         * {@inheritDoc}
         */
        public function validate(\TEC\Events\Custom_Tables\V1\Models\Model $model, $name, $value)
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1 {
    /**
     * Class Notices
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1
     */
    class Notices
    {
        /**
         * Handles an error or exception raised at any stage of the Custom Tables implementation
         * flow.
         *
         * @since 6.0.0
         *
         * @param \Throwable|\Exception $error A reference to the thrown Throwable (on PHP 7.0+)
         *                                     or Exception (on PHP 5.6) that should be handled.
         */
        public function on_error($error)
        {
        }
    }
    /**
     * Class Provider
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1
     */
    class Provider extends \TEC\Common\Contracts\Service_Provider
    {
        const DISABLED = 'TEC_CUSTOM_TABLES_V1_DISABLED';
        /**
         * Registers the filters and implementations required by the Custom Tables implementation.
         *
         * @since 6.0.0
         *
         * @return bool Whether the Provider did register or not.
         */
        public function register()
        {
        }
        /**
         * Returns whether the Custom Tables implementation should register, thus activate,
         * or not.
         *
         * @since 6.0.0
         *
         * @return bool Whether the Custom Tables implementation should register or not.
         */
        public static function is_active()
        {
        }
        /**
         * Removes all the actions and filters registered by the Provider, or
         * only the specified one.
         *
         * @since 6.0.0
         *
         * @param string|null $filter Removes a filter or action hooked by
         *                            the provider, if any.
         *
         * @return int The number of removed filters.
         */
        public function unhook($filter = null)
        {
        }
        /**
         * Logs the error.
         *
         * @since 6.1.3
         *
         * @param \Throwable $error The error to log.
         */
        public function log_errors($error) : void
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Repository {
    /**
     * Provides methods to alter how the repository performs some operations.
     *
     * @since   6.0.3.1
     *
     * @package tec\events\custom_tables\v1\repository
     */
    class Events
    {
        /**
         * Returns the callback that should be used to update Events in the context of
         * the Repository.
         *
         * @since 6.0.0
         *
         * @return Closure The callback that should be used to upsert the Event data in the custom tables.
         */
        public function update_callback(callable $repository_callback, array $postarr = []) : \Closure
        {
        }
        /**
         * Creates the database values for the Event.
         *
         * @since 6.0.0
         *
         * @param int|WP_Post         $event_id The Event post ID, or a reference to the Event post object.
         * @param array<string,mixed> $data     The data, all of it, used to upsert the Event.
         *
         * @return int|null Either the updated Event post ID, or `null` if the Event could not be created.
         */
        public function update($event_id, array $data) : ?int
        {
        }
        /**
         * Upserts the Event data in the Events custom table.
         *
         * @param int                 $post_id            The Event post ID.
         *
         * @return Event A reference to the Event model instance.
         *
         * @throws RuntimeException On failure.
         */
        protected function upsert_event($post_id)
        {
        }
        /**
         * Upserts the Event data in the Occurrences custom table.
         *
         * @since 6.0.0
         *
         * @param Event $event A reference to the Event model.
         *
         * @return Event A reference to the Event model.
         *
         * @throws RuntimeException On failure.
         */
        protected function save_occurrences(\TEC\Events\Custom_Tables\V1\Models\Event $event)
        {
        }
    }
    /** * Class Provider.
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Repository
     */
    class Provider extends \TEC\Common\Contracts\Service_Provider implements \TEC\Events\Custom_Tables\V1\Provider_Contract
    {
        /**
         * Hooks on the filters used in the Repository to handle the creation and update of custom
         * tables data.
         *
         * @since 6.0.0
         */
        public function register()
        {
        }
        /**
         * Removes the hooks in the Filters API to handle the creation and update of custom tables data.
         *
         * @since 6.0.0
         */
        public function unregister()
        {
        }
        /**
         * Replaces the default Event Repository create and update callback with one that will operate on
         * custom tables.
         *
         * @since 6.0.0
         *
         * @param callable            $repository_callback The default repository callback.
         * @param array<string,mixed> $postarr             An array of datat to create or update the Event.
         *
         * @return callable The callback that will handle upsertions of an Event custom tables data
         *                  in the context of a repository call.
         */
        public function update_callback(callable $repository_callback, array $postarr = []) : callable
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Schema_Builder {
    /**
     * Interface Custom_Field_Interface
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Schema_Builder
     */
    interface Field_Schema_Interface
    {
        /**
         * Drop the custom fields.
         *
         * @since 6.0.0
         *
         * @return bool `true` if successful operation, `false` to indicate a failure.
         */
        public function drop();
        /**
         * Creates, or updates, the custom fields.
         *
         * @since 6.0.0
         *
         * @return bool `true` if successful operation, `false` to indicate a failure.
         */
        public function update();
        /**
         * References our stored version versus the version defined in the class.
         *
         * @since 6.0.0
         *
         * @return bool Whether our latest schema has been applied.
         */
        public function is_schema_current();
        /**
         * A reference to the table definition we are modifying with new fields.
         *
         * @since 6.0.0
         *
         * @return Abstract_Custom_Table
         */
        public function table_schema();
    }
    /**
     * Class Abstract_Custom_Field
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Schema_Builder
     */
    abstract class Abstract_Custom_Field implements \TEC\Events\Custom_Tables\V1\Schema_Builder\Field_Schema_Interface
    {
        const SCHEMA_VERSION_OPTION = null;
        const SCHEMA_VERSION = null;
        /**
         * {@inheritdoc}
         */
        public function update()
        {
        }
        /**
         * Inspects query strings being passed to dbDelta, and logs an error if not ideal.
         *
         * @since 6.0.14
         *
         * @see https://developer.wordpress.org/reference/functions/dbdelta/
         *
         * @param string $query Query string to inspect for case sensitivity before using in dbDelta
         */
        public function validate_for_db_delta(string $query)
        {
        }
        /**
         * Returns the table creation SQL for the fields being created in the format supported
         * by the `dbDelta` function.
         *
         * @since 6.0.0
         *
         * @return string The table creation SQL for the fields being created, in the format supported
         *                by the `dbDelta` function.
         */
        protected abstract function get_update_sql();
        /**
         * Allows extending classes that require it to run some methods
         * immediately before the field creation or update.
         *
         * @since 6.0.6
         */
        protected function before_update() : void
        {
        }
        /**
         * Allows extending classes that require it to run some methods
         * immediately after the table creation or update.
         *
         * @since 6.0.0
         *
         * @param array<string,string> $results A map of results in the format
         *                                      returned by the `dbDelta` function.
         *
         * @return array<string,string> A map of results in the format returned by
         *                              the `dbDelta` function.
         */
        protected function after_update(array $results)
        {
        }
        /**
         * Returns whether a fields' schema definition exists in the table or not.
         *
         * @since 6.0.0
         *
         * @return bool Whether a set of fields exists in the database or not.
         */
        public function exists()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function drop()
        {
        }
        /**
         * @since 6.0.0
         *
         * @return array<string>
         */
        public abstract function fields();
        /**
         * Update our stored version with what we have defined.
         */
        protected function sync_stored_version()
        {
        }
        /**
         * Clear our stored version.
         */
        protected function clear_stored_version()
        {
        }
        /**
         * @inheritDoc
         */
        public function is_schema_current()
        {
        }
    }
    /**
     * Interface Table_Schema_Interface
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Schema_Builder
     */
    interface Table_Schema_Interface
    {
        /**
         * Returns the name of the column that is guaranteed to uniquely identify an
         * entry across updates.
         *
         * @since 6.0.0
         *
         * @return string The name of the column that is guaranteed to uniquely identify an
         *                entry across updates.
         */
        public static function uid_column();
        /**
         * Empties the custom table.
         *
         * @since 6.0.0
         *
         * @return int|false The number of removed rows, or `false` to indicate a failure.
         */
        public function empty_table();
        /**
         * Drop the custom table.
         *
         * @since 6.0.0
         *
         * @return boolean `true` if successful operation, `false` to indicate a failure.
         */
        public function drop();
        /**
         * Creates, or updates, the custom table.
         *
         * @since 6.0.0
         *
         * @return boolean `true` if successful operation, `false` to indicate a failure.
         */
        public function update();
        /**
         * Returns the custom table name.
         *
         * @since 6.0.0
         *
         * @return string The custom table name, prefixed by the current `wpdb` prefix,
         *                if required.
         */
        public static function table_name();
        /**
         * Returns the custom table name.
         *
         * @since 6.0.0
         *
         * @return string The base custom table name.
         */
        public static function base_table_name();
        /**
         * References our stored version versus the version defined in the class.
         *
         * @since 6.0.0
         *
         * @return bool Whether our latest schema has been applied.
         */
        public function is_schema_current();
        /**
         * Returns the name of the group the table belongs to.
         *
         * @since 6.0.0
         *
         * @return string The name of the group the table belongs to.
         */
        public static function group_name();
        /**
         * Returns whether a table exists or not in the database.
         *
         * @since 6.0.0
         *
         * @return bool
         */
        public function exists();
    }
    /**
     * Class Base_Custom_Table
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Schema_Builder
     */
    abstract class Abstract_Custom_Table implements \TEC\Events\Custom_Tables\V1\Schema_Builder\Table_Schema_Interface
    {
        /**
         * @var string The option key used to store the SCHEMA_VERSION.
         */
        const SCHEMA_VERSION_OPTION = null;
        /**
         * @var string The version number for this schema definition.
         */
        const SCHEMA_VERSION = null;
        /**
         * {@inheritdoc}
         */
        public function empty_table()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function update()
        {
        }
        /**
         * Inspects query strings being passed to dbDelta, and logs an error if not ideal.
         *
         * @since 6.0.14
         *
         * @see https://developer.wordpress.org/reference/functions/dbdelta/
         *
         * @param string $query Query string to inspect for case sensitivity before using in dbDelta
         */
        public function validate_for_db_delta(string $query)
        {
        }
        /**
         * Returns the table creation SQL in the format supported
         * by the `dbDelta` function.
         *
         * @since 6.0.0
         *
         * @return string The table creation SQL, in the format supported
         *                by the `dbDelta` function.
         */
        protected abstract function get_update_sql();
        /**
         * Allows extending classes that require it to run some methods
         * immediately before the table creation or update.
         *
         * @since 6.0.6
         */
        protected function before_update() : void
        {
        }
        /**
         * Allows extending classes that require it to run some methods
         * immediately after the table creation or update.
         *
         * @since 6.0.0
         *
         * @param array<string,string> $results A map of results in the format
         *                                      returned by the `dbDelta` function.
         *
         * @return array<string,string> A map of results in the format returned by
         *                              the `dbDelta` function.
         */
        protected function after_update(array $results)
        {
        }
        /**
         * Returns the table name, with prefix if required.
         *
         * @since 6.0.0
         *
         * @return string The table name.
         */
        public static function table_name($with_prefix = true)
        {
        }
        /**
         * Checks if an index already exists on the table.
         *
         * @since 6.0.0
         *
         * @param string      $index      The name of the index to check for.
         * @param string|null $table_name The table name to search the index for, or `null`
         *                                to use this table name.
         *
         * @return bool Whether the table already has an index or not.
         */
        protected function has_index($index, $table_name = null)
        {
        }
        /**
         * Checks if a constraint exists for a particular field.
         *
         * @since 6.0.6
         *
         * @param string $this_field The field of the table that has the foreign key (not the target of the constraint).
         * @param string $this_table The table that has the foreign key (not the target of the constraint).
         *
         * @return bool Whether this constraint exists.
         */
        public function has_constraint($this_field, $this_table) : bool
        {
        }
        /**
         * Fetches the constraint for a particular field.
         *
         * @since 6.0.6
         *
         * @param string $this_field The field of the table that has the foreign key (not the target of the constraint).
         * @param string $this_table The table that has the foreign key (not the target of the constraint).
         *
         * @return stdClass|null A stdClass with the INFORMATION_SCHEMA.key_column_usage or null if none found.
         */
        public function get_schema_constraint($this_field, $this_table) : ?\stdClass
        {
        }
        /**
         * Returns whether a table exists in the database or not.
         *
         * @since 6.0.0
         *
         * @return bool Whether a table exists in the database or not.
         */
        public function exists()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function drop()
        {
        }
        /**
         * Update our stored version with what we have defined.
         */
        protected function sync_stored_version()
        {
        }
        /**
         * Clear our stored version.
         */
        protected function clear_stored_version()
        {
        }
        /**
         * @inheritDoc
         */
        public function is_schema_current()
        {
        }
        /**
         * Returns the name of the group the table belongs to.
         *
         * @since 6.0.0
         *
         * @return string The name of the group the table belongs to.
         */
        public static function group_name()
        {
        }
    }
    /**
     * Interface Schema_Provider_Interface
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Schema_Builder
     */
    interface Schema_Provider_Interface
    {
        /**
         * Handles registering this providers table and field Schema_Builder hooks.
         *
         * @since 6.0.0
         */
        public function register();
        /**
         * Return our set of table schema definitions.
         *
         * @since 6.0.0
         *
         * @return array<Field_Schema_Interface> A list of table schemas.
         */
        public static function get_table_schemas();
        /**
         * Return our set of field schema definitions.
         *
         * @since 6.0.0
         *
         * @return array<Field_Schema_Interface> A list of field schemas.
         */
        public static function get_field_schemas();
        /**
         * @since 6.0.0
         *
         * @param array<Table_Schema_Interface> $schemas
         *
         * @return array<Field_Schema_Interface> A list of table schemas.
         */
        public function filter_table_schemas($schemas);
        /**
         * @since 6.0.0
         *
         * @param array<Field_Schema_Interface> $schemas
         *
         * @return array<Field_Schema_Interface> A list of field schemas.
         */
        public function filter_field_schemas($schemas);
    }
    /**
     * Abstract class Schema_Provider
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Schema_Builder
     */
    abstract class Abstract_Schema_Provider extends \TEC\Common\Contracts\Service_Provider implements \TEC\Events\Custom_Tables\V1\Schema_Builder\Schema_Provider_Interface
    {
        /**
         * @inheritDoc
         */
        public function register()
        {
        }
        /**
         * @inheritDoc
         */
        public function filter_table_schemas($schemas)
        {
        }
        /**
         * @inheritDoc
         */
        public function filter_field_schemas($schemas)
        {
        }
        /**
         * @inheritDoc
         */
        public static function get_table_schemas()
        {
        }
        /**
         * @inheritDoc
         */
        public static function get_field_schemas()
        {
        }
    }
    class Schema_Builder
    {
        /**
         * Helper to filter out the schema updates that are already current.
         *
         * @since 6.0.0
         *
         * @param array<Field_Schema_Interface|Table_Schema_Interface> $handlers
         *
         * @return array<Field_Schema_Interface|Table_Schema_Interface>
         */
        protected function filter_for_version($handlers)
        {
        }
        /**
         * Get the registered table handlers that need updates.
         *
         * @since 6.0.0
         *
         * @return array<Table_Schema_Interface>
         */
        public function get_table_schemas_that_need_updates()
        {
        }
        /**
         * Get the registered field handlers that need updates.
         *
         * @since 6.0.0
         *
         * @return array<Field_Schema_Interface>
         */
        public function get_field_schemas_that_need_updates()
        {
        }
        /**
         * Get the md5 hash of all the registered schemas classes with their versions.
         *
         * @since 6.0.0
         *
         * @return string
         */
        public function get_registered_schemas_version_hash() : string
        {
        }
        /**
         * Get the registered table handlers.
         *
         * @since 6.0.0
         *
         * @return array<Table_Schema_Interface>
         */
        public function get_registered_table_schemas()
        {
        }
        /**
         * Get the registered field handlers.
         *
         * @since 6.0.0
         *
         * @return array<Field_Schema_Interface>
         */
        public function get_registered_field_schemas()
        {
        }
        /**
         * Trigger actions to drop the custom tables.
         *
         * @since 6.0.0
         */
        public function down()
        {
        }
        /**
         * Filters the list of tables for a blog adding the ones created by the plugin.
         *
         * @since 6.0.0
         *
         * @param array $tables An array of table names for the blog.
         *
         * @return array<string> A filtered array of table names, including prefix.
         */
        public function filter_tables_list($tables)
        {
        }
        /**
         * A proxy method to update the tables without forcing
         * them.
         *
         * If the `update_tables` was directly hooked to the blog
         * switches, then the blog ID, a positive integer, would be
         * cast to a truthy value and force the table updates when
         * not really required to.
         *
         * @since 6.0.0
         *
         * @return array<string,mixed> A list of each creation or update result; empty if
         *                      the blog tables have already been updated in this request.
         */
        public function update_blog_tables(int $blog_id) : array
        {
        }
        /**
         * Creates or updates the custom tables the plugin will use.
         *
         * @since 6.0.0
         *
         * @param bool $force Whether to force the creation or update of the tables or not.
         *
         * @return array<string,mixed> A list of each creation or update result.
         */
        public function up($force = false)
        {
        }
        /**
         * Registers the custom table names as properties on the `wpdb` global.
         *
         * @since 6.0.0
         */
        public function register_custom_tables_names()
        {
        }
        /**
         * Empties the plugin custom tables.
         *
         * @since 6.0.0
         */
        public function empty_custom_tables()
        {
        }
        /**
         * Whether all the custom tables exist or not. Does not check custom fields.
         *
         * Note: the method will return `false` if even one table is missing.
         *
         * @since 6.0.0
         *
         * @param string|null $group An optional group name to restrict the check to.
         *
         * @return bool Whether all custom tables exist or not. Does not check custom fields.
         */
        public function all_tables_exist($group = null)
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Tables {
    /**
     * Class Events
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Tables
     */
    class Events extends \TEC\Events\Custom_Tables\V1\Schema_Builder\Abstract_Custom_Table
    {
        /**
         * @inheritDoc
         */
        const SCHEMA_VERSION_OPTION = 'tec_ct1_events_table_schema_version';
        /**
         * @inheritDoc
         */
        const SCHEMA_VERSION = '1.0.1';
        /**
         * {@inheritdoc}
         */
        public static function uid_column()
        {
        }
        /**
         * @inheritDoc
         */
        public static function base_table_name()
        {
        }
        /**
         * {@inheritDoc}
         */
        public static function group_name()
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function get_update_sql()
        {
        }
        /**
         * Overrides the base method to add `post_id` as index.
         *
         * {@inheritdoc}
         */
        protected function after_update(array $results)
        {
        }
    }
    /**
     * Class Occurrences
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Tables
     */
    class Occurrences extends \TEC\Events\Custom_Tables\V1\Schema_Builder\Abstract_Custom_Table
    {
        /**
         * @inheritDoc
         */
        const SCHEMA_VERSION_OPTION = 'tec_ct1_occurrences_table_schema_version';
        /**
         * @since 6.0.6 Will now simply create an `event_id` index, removes the foreign key from the previous version.
         *
         * @inheritDoc
         */
        const SCHEMA_VERSION = '1.0.2';
        /**
         * @inheritDoc
         */
        public static function base_table_name()
        {
        }
        /**
         * {@inheritDoc}
         */
        public static function group_name()
        {
        }
        /**
         * {@inheritdoc}
         */
        public static function uid_column()
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function get_update_sql()
        {
        }
        /**
         * Overrides the base method to add `event_id` as key.
         *
         * @since 6.0.6 Will now create an `event_id` index, removes the foreign key from the previous version.
         *
         * {@inheritdoc}
         */
        protected function after_update(array $results)
        {
        }
    }
    /**
     * Class Provider
     *
     * @since   6.0.0
     * @package TEC\Events\Custom_Tables\V1\Tables
     */
    class Provider extends \TEC\Events\Custom_Tables\V1\Schema_Builder\Abstract_Schema_Provider
    {
        /**
         * @inheritDoc
         */
        public static function get_table_schemas()
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Traits {
    /**
     * Trait With_Core_Tables
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Traits
     */
    trait With_Core_Tables
    {
        /**
         * Returns a list of the `posts` table columns.
         *
         * @since 6.0.0
         *
         * @return array<string> A list of the `posts` table columns.
         */
        protected function get_posts_table_columns()
        {
        }
    }
    /**
     * Trait With_Dates_Representation
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Traits
     */
    trait With_Dates_Representation
    {
        /**
         * The object is formatted as JS (Gutenberg Blocks). The data is converted to UTC as specified to the ISO SPEC,
         * then formatted according to the JS format.
         *
         * @see: https://262.ecma-international.org/6.0/#sec-date-time-string-format
         *
         * JS Format: YYYY-MM-DDTHH:mm:ss.sssZ
         * PHP Format: Y-m-d\T-H:i:s:000Z
         *
         * @param  string|DateTimeInterface  $date_time
         *
         * @return string The formatted date as ISO 8601.
         */
        protected function to_iso_8601($date_time)
        {
        }
    }
    /**
     * Trait With_Reflection.
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Traits;
     */
    trait With_Reflection
    {
        /**
         * Returns the value of a not accessible object property.
         *
         * @since 6.0.0
         *
         * @param object $object The object to read the property value from.
         * @param string $prop   The name of the property to get the value of.
         *
         * @return mixed The property value.
         *
         * @throws \ReflectionException If the object does not declare such a
         *                              property.
         */
        private function get_private_property($object, $prop)
        {
        }
    }
    /**
     * Trait With_Timezones
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Traits
     */
    trait With_Timezones
    {
        /**
         * Detect if a provided timezone is using a variant of the UTC+0 timezone.
         *
         * Depending on the system providing the timezone string, the UTC+0 timezone might
         * have a different name, but still mean the same. This methods discriminates it.
         *
         * @since 6.0.0
         *
         * @param string $time_zone_name The timezone name to check.
         *
         * @return bool Whether the provided timezone is using a variant of the UTC+0 timezone or not.
         */
        private function is_utc($time_zone_name)
        {
        }
    }
    /**
     * Trait With_Unbound_Queries
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Traits
     */
    trait With_Unbound_Queries
    {
        protected $unbound_query_batch_size = 200;
        /**
         * Runs an unbound `get_posts` query batching the query to make sure it will not kill the database.
         *
         * @since 6.0.0
         *
         * @param array<string,mixed> $args A set of arguments that should be used to run the query. Pagination,
         *                                  offset and posts-per-page settings will be overridden in each single
         *                                  query request.
         *
         * @return array<int|WP_Post,array<int,array<int>>> The results of the unbound query, the format depending
         *                                                  on the specified fields.
         */
        protected function get_all_posts(array $args = [])
        {
        }
        /**
         * Run a potentially unbound direct query in limited size batches.
         *
         * Note: the method will add the `LIMIT` clause to the original query
         * SQL, for this reason the original query SQL should not contain the
         * `LIMIT` clause.
         *
         * @since 6.0.0
         *
         * @param string       $query  The prepared SQL query to run.
         * @param false|string $column A column to pluck from the result set, if
         *                             `null`, then the result set will be returned
         *                             in `ARRAY_A` format.
         *
         * @todo test!
         *
         * @return array An array of all the available results for the query.
         */
        private function get_all_results($query, $column = null)
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Updates {
    /**
     * Class Controller
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Updates
     */
    class Controller
    {
        /**
         * Controller constructor.
         *
         * @since 6.0.0
         *
         * @param Meta_Watcher $meta_watcher A reference to the current Meta Watcher service implementation.
         * @param Requests     $requests     A reference to the curret Request factory and repository implementation.
         * @param Events       $events       A reference to the current Events implementation.
         */
        public function __construct(\TEC\Events\Custom_Tables\V1\Updates\Meta_Watcher $meta_watcher, \TEC\Events\Custom_Tables\V1\Updates\Requests $requests, \TEC\Events\Custom_Tables\V1\Updates\Events $events)
        {
        }
        /**
         * Updates the custom tables' information for each Event post whose important
         * meta was updated during the request.
         *
         * @since 6.0.0
         *
         * @return int The number of updated Events.
         */
        public function commit_updates()
        {
        }
        /**
         * Updates the custom tables' information for an Event post whose important
         * meta was updated.
         *
         * After a first update, the post ID is removed from the marked-for-update stack
         * and will not be automatically updated again during the request.
         *
         * @since 6.0.0
         *
         * @param WP_REST_Request|null $request A reference to the object modeling the current request,
         *                                      or `null` to build a request from the current HTTP data.
         *                                      Mind the WP_REST_Request class can be used to
         *                                      model a non-REST API request too|
         *
         * @param int                  $post_id The post ID, not guaranteed to be an Event post ID if this
         *                                      method is not called from this class!
         *
         * @return bool Whether the post updates were correctly applied or not.
         */
        public function commit_post_updates($post_id, \WP_REST_Request $request = null)
        {
        }
        /**
         * Will trigger a contextual event inserted action hook.
         *
         * @since 6.0.0
         *
         * @param $post_id
         */
        public function event_was_inserted_by_request($post_id)
        {
        }
        /**
         * Will trigger a contextual event updated action hook.
         *
         * @since 6.0.0
         *
         * @param $post_id
         */
        public function event_was_updated_by_request($post_id)
        {
        }
        /**
         * Updates the custom tables' information for an Event post whose important meta
         * was updated in the context of a REST request.
         *
         * After a first update, the post ID is removed from the marked-for-update stack
         * and will not be automatically updated again during the request.
         *
         * @since 6.0.0
         *
         * @param WP_Post         $post    A reference to the post object representing the Event
         *                                 post.
         * @param WP_REST_Request $request A reference to the REST API request object that is,
         *                                 currently, being processed.
         *
         * @return bool Whether the custom tables' updates were correctly applied or not.
         */
        public function commit_post_rest_update(\WP_Post $post, \WP_REST_Request $request)
        {
        }
        /**
         * Deletes an Event custom tables information.
         *
         * @since 6.0.0
         *
         * @param int                  $post_id The deleted Event post ID.
         * @param WP_REST_Request|null $request A reference to the request object triggering the deletion, if any.
         *
         * @return int|false Either the number of affected rows, or `false` on failure.
         */
        public function delete_custom_tables_data(int $post_id, \WP_REST_Request $request = null)
        {
        }
        /**
         * Filters the location a post should be redirected to.
         *
         * @since 6.0.0
         *
         * @param string $location The post redirection location, as worked out
         *                         by WordPress and previous filtering methods.
         * @param int $post_id The
         *
         * @return mixed|void
         */
        public function redirect_post_location($location, $post_id)
        {
        }
    }
    /**
     * Class Events
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Updates
     */
    class Events
    {
        /**
         * Updates an Event by post ID.
         *
         * @since 6.0.0
         *
         * @param int $post_id The Event post ID.
         *
         * @return bool Whether the update was correctly performed or not.
         */
        public function update($post_id)
        {
        }
        /**
         * Deletes an Event and related data from the custom tables.
         *
         * @since 6.0.0
         *
         * @param int $post_id The Event post ID.
         *
         * @return int|false Either the number of affected rows, or `false` to
         *                   indicate a failure.
         */
        public function delete($post_id)
        {
        }
        /**
         * Rebuilds the known Events dates range setting the values of the options
         * used to track the earliest Event start date and the latest Event end date.
         *
         * @since 6.0.0
         * @since 6.0.13 Fix for "markers" being computed incorrectly, and only fetching provisional IDs.
         *
         * @return true To indicate the earliest and latest Event dates were updated.
         */
        public function rebuild_known_range()
        {
        }
        /**
         * Returns the earliest Event start date in the database.
         *
         * @since 6.0.0
         *
         * @param string|array|null $stati A post status, or a set of post statuses, to fetch
         *                                 the earliest date for; or `null` to use the default
         *                                 set of statuses.
         *
         * @return \DateTime The earliest start time object, in the site timezone.
         */
        public function get_earliest_date($stati = null)
        {
        }
        /**
         * Returns the latest Event start date in the database.
         *
         * @since 6.0.0
         *
         * @param string|array|null $stati A post status, or a set of post statuses, to fetch
         *                                 the latest date for; or `null` to use the default
         *                                 set of statuses.
         *
         * @return \DateTime The latest start time object, in the site timezone.
         */
        public function get_latest_date($stati = null)
        {
        }
    }
    /**
     * Class Meta_Watcher
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Updates
     */
    class Meta_Watcher
    {
        /**
         * Returns the filtered set of meta keys that should be tracked to detect
         * whether an Event post custom tables data might require update or not.
         *
         * @since 6.0.0
         *
         * @param int $id  The ID of the object (could not be an Event post!)
         *                 the filters are being applied for.
         *
         * @return array<string> The filtered set of tracked meta keys.
         */
        public function get_tracked_meta_keys($id = null)
        {
        }
        /**
         * If the addition, update or deletion is for a meta field used to model
         * an Event, then mark the Event as requiring an update to its custom tables
         * information.
         *
         * @since 6.0.0
         *
         * @param int    $object_id The ID  of the object (might be other than an Event post!)
         *                          whose meta is being updated.
         * @param string $meta_key  The meta key that is being updated.
         */
        public function mark_for_update($object_id, $meta_key)
        {
        }
        /**
         * Returns the current list of IDs marked for update.
         *
         * @since 6.0.0
         *
         * @return array<int> The current list of IDs marked for update.
         */
        public function get_marked_ids()
        {
        }
        /**
         * Returns the first element of the marked IDs.
         *
         * Note: the order in which elements are popped is the inverse
         * of the order in which they are pushed: pop from the bottom, push
         * to the top.
         *
         * @since 6.0.0
         *
         * @return int|null Either the next oldest tracked ID, or `null` if not found.
         */
        public function pop()
        {
        }
        /**
         * Adds an ID back into the last position of the FIFO queue.
         *
         * Note: the order in which elements are pushed is the inverse
         * of the order in which they are popped: pop from the bottom, push
         * to the top.
         * Only Event IDs are allowed and are guaranteed to be added at most once.
         *
         * @since 6.0.0
         *
         * @param int $id The post ID to add in the last position of the FIFO queue.
         */
        public function push($id)
        {
        }
        /**
         * Returns whether an Event post ID is currently tracked by the meta watcher or not.
         *
         * @since 6.0.0
         *
         * @param int $post_id The Event post ID to check.
         */
        public function is_tracked($post_id)
        {
        }
        /**
         * Removes an ID from the marked IDs.
         *
         * @since 6.0.0
         *
         * @param int ...$post_ids The post ID(s) to remove from the marked IDs.
         */
        public function remove(int ...$post_ids) : void
        {
        }
    }
    /**
     * Class Provider
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Updates
     */
    class Provider extends \TEC\Common\Contracts\Service_Provider implements \TEC\Events\Custom_Tables\V1\Provider_Contract
    {
        public function register()
        {
        }
        /**
         * Unregisters, from the Filters API, the actions and filters added by this provider.
         *
         * @since 6.0.0
         */
        public function unregister()
        {
        }
        /**
         * This plugin will, by default, not redirect the post ID at all.
         * It will, instead, fire an action allowing other plugins to
         * intervene and redirect the post ID.
         *
         * @since 6.0.0
         */
        public function redirect_classic_editor_post_id()
        {
        }
        /**
         * Redirect the REST Request, modifying it.
         *
         * By default, this method will NOT redirect the REST request and will
         * only provide other plugins the chance to do so.
         *
         * @since 6.0.0
         *
         * @param null|mixed      $result  The result of the dispatch, as filtered by
         *                                 WordPress and previous filters.
         * @param WP_REST_Server  $server  A reference to the REST Server instance
         *                                 currently handling the request.
         * @param WP_REST_Request $request A reference to the REST Request that is
         *                                 going to be handled.
         *
         * @return null|mixed The input result value: this method will not modify
         *                    the result and will just use the filter as an action.
         */
        public function redirect_rest_request_post_id($result, $server, $request)
        {
        }
        /**
         * Watches the updates to the post objects meta values to detect and keep track
         * of changes that might require the data in the custom tables to be updated.
         *
         * @since 6.0.0
         *
         * @param array|int $meta_ids Either a meta id or an array of meta ids that
         *                            are being updated.
         * @param int       $post_id  The id of the post that is being updated.
         * @param string    $meta_key The meta key that is being updated.
         */
        public function watch_for_meta_updates($meta_ids, $post_id, $meta_key)
        {
        }
        /**
         * Iterates over the list of Event posts that had their Event-related meta
         * updated to update their custom tables data.
         *
         * @since 6.0.0
         */
        public function commit_updates()
        {
        }
        /**
         * Commits custom tables updates for an Event post that might require it in the
         * context of a REST API request (including Blocks Editor).
         *
         * @since 6.0.0
         *
         * @param WP_Post         $post          A reference to the Event post object
         *                                       that is being updated.
         * @param WP_REST_Request $request       A reference to the REST Request that is being
         *                                       processed.
         */
        public function commit_rest_update($post, $request)
        {
        }
        /**
         * Commits custom tables updates for an Event post that might require it in the
         * context of a Classic Editor request.
         *
         * The filter is used as an action, the input `$location` value is not changed.
         *
         * @since 6.0.0
         *
         * @param string $location The location the post will be redirected to. Unused by the method.
         * @param int    $post_id  The post ID of the post that is being updated.
         */
        public function commit_and_redirect_classic_editor($location, $post_id)
        {
        }
        /**
         * Hooked on the post delete action, this method will clear all the custom
         * tables information related to the Event.
         *
         * @since 6.0.0
         *
         * @param int $post_id The deleted Event post ID.
         */
        public function delete_custom_tables_data($post_id)
        {
        }
        /**
         * Rebuild the known range of Events from the Occurrences information.
         *
         * @since 6.0.0
         *
         * @return bool Whether the method did take care of rebuilding the known range or not.
         */
        public function rebuild_known_range()
        {
        }
    }
    /**
     * Class Requests
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Editors\Classic
     */
    class Requests
    {
        /**
         * Models the current HTTP request using a WP REST Request object.
         *
         * @since 6.0.0
         *
         * @return WP_REST_Request A reference to an instance of the WP_Rest_Request
         *                         set up to provide information about the current HTTP request.
         */
        public function from_http_request()
        {
        }
        /**
         * Identifies a request as being an update one.
         *
         * In the context of this class an "update" is either a POST, PUT or PATCH
         * request for a post, or a GET request to trash or delete a post.
         *
         * @since 6.0.0
         *
         * @param WP_REST_Request $request A reference to the Request object that
         *                                 should be inspected.
         *
         * @return bool Whether the input Request is an update one or not.
         */
        public function is_update_request(\WP_REST_Request $request) : bool
        {
        }
        /**
         * Models the current HTTP request using a WP REST Request object and updates the
         * request parameters related to the definition of an Event start, end and timezone
         * to match the parameters.
         *
         * @since 6.0.0
         * @param mixed $start The description, timestamp or `DateTime` object representing
         *                     the Event start date and time.
         * @param mixed $end   The description, timestamp or `DateTime` object representing
         *                     the Event end date and time.
         * @param mixed|null The timezone string, object or `null` to use the default timezone.
         *
         * @return WP_REST_Request A reference to an instance of the WP_Rest_Request
         *                         set up to provide information about the current HTTP request.
         */
        public function from_http_request_with_dates($start, $end, $timezone = null)
        {
        }
        /**
         * Determines if the current request is a request to delete or trash a post or not.
         *
         * @since 6.0.0
         *
         * @param WP_REST_Request $request A reference to the Request object to check.
         *
         * @return bool Whether the input Request is a request to delete or trash a post or not.
         */
        public function is_delete_request(\WP_REST_Request $request) : bool
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\Views\V2 {
    /**
     * Class By_Day_View_Compatibility
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Views\V2
     */
    class By_Day_View_Compatibility
    {
        /**
         * Returns the day results, prepared as the `By_Day_View` expects them.
         *
         * @since 6.0.0
         *
         * @param array<int> $ids A list of the Event post IDs to prepare the day results
         *                        for.
         *
         * @return array<int,stdClass> The prepared day results.
         */
        public function prepare_day_results(array $ids = [])
        {
        }
    }
    /**
     * Class Customizer_Compatibility.
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Views\V2;
     */
    class Customizer_Compatibility
    {
        /**
         * Filters the Global Elements section CSS template to add Views v2 related style templates to it.
         *
         * @since 6.0.0
         *
         * @param Customizer_Section $section      The Global Elements section.
         * @param Customizer         $customizer   The current Customizer instance.
         * @param string             $css_template The CSS template, as produced by the Global Elements.
         *
         * @return string The filtered CSS template.
         *
         * @throws Exception If the Color util is built incorrectly.
         *
         */
        public function update_global_customizer_styles($css_template, $section, $customizer)
        {
        }
    }
    /**
     * Class Provider
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\Views\V2
     */
    class Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Registers the handlers and modifiers required to make the plugin correctly work
         * with Views v2.
         *
         * @since 6.0.0
         */
        public function register()
        {
        }
        /**
         * Returns the prepared `By_Day_View` day results.
         *
         * @since 6.0.0
         *
         * @param array<int,stdClass>|null $day_results  Either the prepared day results, or `null`
         *                                               if the day results have not been prepared yet.
         * @param array<int>               $event_ids    A list of the Event post IDs that should be prepared.
         *
         * @return array<int,stdClass> The prepared day results.
         */
        public function prepare_by_day_view_day_results(array $day_results = null, array $event_ids = [])
        {
        }
        /**
         * Filters the Global Elements section CSS template to add Views v2 related style templates to it.
         *
         * @since 6.0.0
         *
         * @param Customizer_Section $section      The Global Elements section.
         * @param Customizer         $customizer   The current Customizer instance.
         * @param string             $css_template The CSS template, as produced by the Global Elements.
         *
         * @return string The filtered CSS template.
         *
         * @throws Exception If the Color util is built incorrectly.
         *
         */
        public function update_global_customizer_styles($css_template, $section, $customizer)
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\WP_Query {
    /**
     * Class Custom_Tables_Meta_Query
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\WP_Query
     */
    class Custom_Tables_Meta_Query extends \WP_Meta_Query
    {
        /**
         * A set of SQL comparison operators that will operate on numeric inputs.
         *
         * @since 6.0.0
         *
         * @var array<string>
         */
        protected static $numeric_operators = ['>', '>=', '<', '<=', 'BETWEEN', 'NOT BETWEEN'];
        /**
         * A set of SQL comparison operators that do not necessarily operate on numeric inputs.
         *
         * @since 6.0.0
         *
         * @var array<string>
         */
        protected static $non_numeric_operators = ['=', '!=', 'LIKE', 'NOT LIKE', 'IN', 'NOT IN', 'EXISTS', 'NOT EXISTS', 'RLIKE', 'REGEXP', 'NOT REGEXP'];
        /**
         * A map from meta keys, e.g. '_EventStartDate', to the corresponding custom table name and column.
         *
         * @since 6.0.0
         *
         * @var array<string,<array<string>>
         */
        protected $meta_key_redirection_map = [];
        /**
         * A list of tables the object has already joined.
         *
         * @since 6.0.0
         *
         * @var array<string,true>
         */
        protected $joined_tables = [];
        /**
         * Whether to `LEFT JOIN` to the custom tables, thus yielding `NULL` values on the custom tables side
         * on missing matches from the posts tables, or not.
         *
         * @since 6.0.0
         *
         * @var bool
         */
        protected $left_join = false;
        /**
         * Custom_Tables_Meta_Query constructor.
         *
         * This method overrides the default `WP_Meta_Query` constructor to set up the instance to suit
         * our requirements.
         *
         * @since 6.0.0
         *
         * @param  false|array<string,mixed>  $meta_query  A meta query in a format supported by WordPress Meta Query.
         */
        public function __construct($meta_query = false)
        {
        }
        /**
         * Overrides the base implementation to ensure the format of the meta query arguments is correct and the values are
         * coherent.
         *
         * @since 6.0.0
         *
         * @param array<string|int,mixed> $queries The meta query array representation.
         *
         * @return array<string|int,mixed> The sanitized meta query array representation.
         */
        public function sanitize_query($queries)
        {
        }
        /**
         * Overrides the base method to redirect some clauses to the custom tables.
         *
         * We cannot, possibly, handle and thus redirect ALL the custom fields queries to the custom tables.
         * As such, we still rely on the `WP_Meta_Query` implementation to redirect the custom fields we control
         * to the custom tables and let the base class handle the others.
         *
         * @since 6.0.0
         *
         * @param  array<string,mixed>         $clause         The clause in array format, specifying the key, value,
         *                                                     comparison operator and so on.
         * @param  array<array<string,mixed>>  $parent_query   The parent query, a set of clauses.
         * @param  string|int                  $clause_key     Optional. The array key used to name the clause in the
         *                                                     original `$meta_query` parameters. If not provided, a key
         *                                                     will be generated automatically.
         *
         * @return array<string,array<string>> Array containing JOIN and WHERE SQL clauses to append to a first-order query.
         */
        public function get_sql_for_clause(&$clause, $parent_query, $clause_key = '')
        {
        }
        /**
         * Normalizes, setting it to a default value if not set, the clause `compare` entry.
         *
         * @since 6.0.0
         *
         * @param  array<string,mixed>  $clause  The clause in array format.
         *
         * @return string The normalized `compare` operator.
         */
        protected function normalize_clause_compare(array $clause)
        {
        }
        /**
         * Normalizes, setting it to a default value if not set, the clause `compare_key` entry.
         *
         * While the `compare` key will apply to the custom field value (`meta_value` in the `postmeta`
         * table), the `compare_key` will apply to the custom field name (`meta_key` in the `postmeta`
         * table).
         *
         * @since 6.0.0
         *
         * @param  array<string,mixed>  $clause  The clause in array format.
         *
         * @return string The normalized `compare_key` operator.
         */
        protected function normalize_clause_compare_key(array $clause)
        {
        }
        /**
         * Returns the SQL string to use for the table and column with awareness of the
         * MySQL CAST, if required by the type.
         *
         * @since 6.0.0
         *
         * @param  string  $table      The  table name to build the table and column string for.
         * @param  string  $column     The column to build the table and column string for.
         * @param  string  $meta_type  The meta type, set by the clause `type` key.
         *
         * @return string The `table.column` string, type-cast if required.
         */
        protected function build_type_casted_table_column($table, $column, $meta_type)
        {
        }
        /**
         * Returns the SQL fragment required to run a comparison or similar statement.
         *
         * @since 6.0.0
         *
         * @param  string  $table_and_column  The table and column string, with CAST if required.
         * @param  string  $meta_compare      The comparison operator, e.g. `=` or `>=`.
         * @param  string  $value             The value to build the statement for.
         *
         * @return string The SQL for the comparison clause.
         */
        protected function build_where_operator_sql($table_and_column, $meta_compare, $value)
        {
        }
        /**
         * Returns a SQL statement to check if a redirected custom field exists.
         *
         * @since 6.0.0
         *
         * @param  string  $table  The name of the table to build the statement for.
         *
         * @return string The SQL for the `EXISTS` check.
         */
        protected function build_where_exists_sql($table)
        {
        }
        /**
         * Returns a SQL statement to check if a redirected custom field not exists.
         *
         * @since 6.0.0
         *
         * @param  string  $table  The name of the table to build the statement for.
         *
         * @return string The SQL for the `NOT EXISTS` check.
         */
        protected function build_where_not_exists_sql($table)
        {
        }
        /**
         * Returns the SQL fragment required to run a `LIKE` or similar statement.
         *
         * @since 6.0.0
         *
         * @param  string  $table_and_column  The table and column string, with CAST if required.
         * @param  string  $meta_compare      The comparison operator, one of `LIKE` or `NOT LIKE`.
         * @param  string  $value             The value to build the `LIKE` statement for.
         *
         * @return string The SQL for the `LIKE` clause.
         */
        protected function build_where_like_sql($table_and_column, $meta_compare, $value)
        {
        }
        /**
         * Returns the SQL fragment required to run a `IN` or similar statement.
         *
         * @since 6.0.0
         *
         * @param  string        $table_and_column  The table and column string, with CAST if required.
         * @param  string        $meta_compare      The comparison operator, one of `IN` or `NOT IN`.
         * @param  array<mixed>  $value             The values to build the IN set from.
         *
         * @return string The SQL for the `IN` clause.
         */
        protected function build_where_in_sql($table_and_column, $meta_compare, $value)
        {
        }
        /**
         * Returns the SQL fragment required to run a `REGEXP` or similar statement.
         *
         * @since 6.0.0
         *
         * @param  string               $table_and_column  The table and column string, with CAST if required.
         * @param  string               $meta_compare      The comparison operator, one of `REGEXP`, `REGLIKE` or
         *                                                 `REGEXP_LIKE`.
         * @param  array<string,mixed>  $clause            The clause in array format.
         *
         * @return string The SQL for the `REGEXP` clause.
         */
        protected function build_where_regexp_sql($table_and_column, $meta_compare, array $clause)
        {
        }
        /**
         * Returns the SQL fragment required to run a `BETWEEN` or `NOT BETWEEN` statement.
         *
         * @since 6.0.0
         *
         * @param  string        $table_and_column  The table and column string, with CAST if required.
         * @param  string        $meta_compare      The comparison operator, either `BETWEEN` or `NOT BETWEEN`.
         * @param  array<mixed>  $value             The two values to build the interval for.
         *
         * @return string The SQL for the `BETWEEN` clause.
         */
        protected function build_where_between_sql($table_and_column, $meta_compare, $value)
        {
        }
        /**
         * Returns a SQL statement for the default check.
         *
         * @since 6.0.0
         *
         * @param  mixed  $value  The value to prepare the SQL for.
         *
         * @return string The SQL for the check.
         */
        protected function build_where_default_sql($value)
        {
        }
        /**
         * Overrides the base method to return, for the custom fields controlled by the query, the custom table name.
         *
         * @since 6.0.0
         *
         * @param  array<string,mixed>         $clause         The clause in array format, specifying the key, value,
         *                                                     comparison operator and so on.
         * @param  array<array<string,mixed>>  $parent_query   The parent query, a set of clauses.
         *
         * @return string|false A table name (for custom fields whose that should be redirected to the plugin custom
         *                      tables), a `postmeta` table alias or `false` to indicate a table alias should be generated
         *                      for the clause.
         */
        protected function find_compatible_table_alias($clause, $parent_query)
        {
        }
        /**
         * Returns whether the Custom Tables Meta Query did JOIN on a specific table or not.
         *
         * @since 6.0.0
         *
         * @param string|array<string> $table The table(s) to check.
         *
         * @return bool Whether the Custom Tables Meta Query did JOIN on a specific table or not.
         */
        public function did_join_table($table)
        {
        }
    }
    /**
     * Class Custom_Tables_Query
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\WP_Query
     */
    class Custom_Tables_Query extends \WP_Query
    {
        /**
         * The last error string logged by any instance of the class.
         *
         * @since 6.0.4
         *
         * @var string
         */
        protected static $last_error = '';
        /**
         * Returns an instance of this class, built using the input `WP_Query` as a model.
         *
         * @since 6.0.0
         *
         * @param  WP_Query                  $wp_query       A reference to the `WP_Query` instance that
         *                                                   should be used as a model to build an instance
         *                                                   of this class.
         * @param  array<string,mixed>|null  $override_args  An array of query arguments to override
         *                                                   the ones set from the original query.
         *
         * @return Custom_Tables_Query An instance of the class, built using the input `WP_Query`
         *                             instance as a model.
         */
        public static function from_wp_query(\WP_Query $wp_query, array $override_args = null)
        {
        }
        /**
         * Returns the last error string logged by any instance of the class.
         *
         * @since 6.0.4
         *
         * @return string The last error string logged by any instance of the class.
         */
        public static function get_last_error() : string
        {
        }
        /**
         * Overrides the base method to replace the Meta Query with one that will redirect
         * to the plugin custom tables.
         *
         * The method will use the `posts_search` filter as an action to access the `WP_Query` instance
         * `meta_query` property after it's been built and before it's used to produce Custom Fields related
         * SQL.
         *
         * @since 6.0.0
         *
         * @return array<int|WP_Post> The query results, in the same format used by the `WP_Query::get_posts` method.
         */
        public function get_posts()
        {
        }
        /**
         * Replaces the `WP_Meta_Query` instance built in the `WP_Query::get_posts` method with an instance of
         * the `WP_Meta_Query` extension that will redirect some custom fields queries to the plugin custom tables.
         *
         * This method is expected to be hooked to the `posts_search` hook in the `WP_Query::get_posts` method.
         * The method will not change
         *
         * @since 6.0.0
         *
         * @param  string    $search    The WHERE clause as produced by the `WP_Query` instance.
         * @param  WP_Query  $wp_query  A reference to the `WP_Query` instance whose search WHERE clause is currently being
         *                              filtered.
         *
         * @return string The WHERE clause as produced by the `WP_Query` instance, untouched by the method.
         */
        public function replace_meta_query($search, $wp_query)
        {
        }
        /**
         * Redirects the `SELECT` part of the query to fetch from the Occurrences table.
         *
         * @since 6.0.0
         *
         * @param  string        $request_fields The original `SELECT` SQL.
         * @param  WP_Query|null $query          A reference to the `WP_Query` instance currently being
         *                                 filtered.
         *
         * @return string The filtered `SELECT` clause.
         */
        public function redirect_posts_fields($request_fields, $query = null)
        {
        }
        /**
         * Changes the `GROUP BY` clause for posts to avoid the collapse of results on the post ID.
         *
         * @since 6.0.0
         *
         * @param  string         $groupby  The original `GROUP BY` SQL clause.
         * @param  WP_Query|null  $query    A reference to the `WP_Query` instance currently being filtered.
         *
         * @return string The updated `GROUP BY` SQL clause.
         */
        public function group_posts_by_occurrence_id($groupby, $query = null)
        {
        }
        /**
         * Redirects the the table and fields used in the `ORDER BY` clause of the query to the Custom Tables,
         * if required.
         *
         * @since 6.0.0
         *
         * @param string $orderby The original `ORDER BY` SQL clause.
         *
         * @return string|false The redirected `ORDER BY` field, `false` on failure.
         */
        protected function parse_orderby($orderby)
        {
        }
        /**
         * Adds a filter for TEC custom queries in order to further parse the `WHERE` statements.
         *
         * @since 6.0.0
         *
         * @param string        $where          The input `WHERE` clause, as built by the `WP_Query`
         *                                      class code.
         * @param WP_Query|null $query          A reference to the `WP_Query` instance currently being filtered.
         *
         * @return string The `WHERE` SQL clause, modified to be date-bound, if required.
         */
        public function filter_where($where, $query)
        {
        }
        /**
         * Updates the `WHERE` statements to ensure any Event Query is date-bound.
         *
         * @since 6.0.0
         *
         * @param string        $where          The input `WHERE` clause, as built by the `WP_Query`
         *                                      class code.
         * @param WP_Query|null $query          A reference to the `WP_Query` instance currently being filtered.
         *
         * @return string The `WHERE` SQL clause, modified to be date-bound, if required.
         */
        public function filter_by_date($where, $query = null)
        {
        }
        /**
         * Filters the Query JOIN clause to JOIN on the Occurrences table if the Custom
         * Tables Meta Query did not do that already.
         *
         * @since 6.0.0
         *
         * @param string   $join   The input JOIN query, as parsed and built by the WordPress
         *                         Query.
         * @param WP_Query $query  A reference to the WP Query object that is currently filtering
         *                         its JOIN query.
         *
         * @return string The filtered JOIN query, if required.
         */
        public function join_occurrences_table($join, $query)
        {
        }
        /**
         * Implementation of the magic method to check if a property is set on this object or not.
         *
         * @since 6.0.0
         *
         * @param string $name The property to check for.
         *
         * @return bool Whether a property is set on this object or not.
         */
        public function __isset($name)
        {
        }
        /**
         * Returns a reference to the `WP_Query` instance this instance is wrapping.
         *
         * @since 6.0.0
         *
         * @return WP_Query|null A reference to the `WP_Query` instance this object is wrapping.
         */
        public function get_wp_query()
        {
        }
        /**
         * Short-circuits the controlled `WP_Query` instance query to get the number of found results
         * to avoid it from running twice.
         *
         * The Custom Tables query will pre-fill the results on the `posts_pre_query` filter and will run,
         * in that context, a query to get the posts and the found rows. The `WP_Query` instance whose posts
         * are pre-filled, will attempt to run the query to get the found rows again. This method will intercept
         * that second `SELECT FOUND_ROWS()` query to pre-fill it with a result the Custom Tables query already
         * has.
         *
         * @since 6.0.4
         *
         * @param string $found_posts_query The SQL query that would run to fill in the `found_posts` property of the
         *                                  `WP_Query` instance.
         * @param        $query             WP_Query The `WP_Query` instance that is currently filtering its `found_posts`
         *                                  property.
         *
         * @return string The filtered SQL query that will run to fill in the `found_posts` property of the `WP_Query`
         *                instance.
         */
        public function filter_found_posts_query($found_posts_query, $query)
        {
        }
        /**
         * Removes all the filters the Custom Tables Query has added to filter its own inner workings while
         * pre-filling the results in the `posts_pre_query` filter.
         *
         * @since 6.0.4
         *
         * @return void Lingering filters will be removed.
         */
        protected function remove_filters() : void
        {
        }
        /**
         * Removes late filters that are required after the `posts_pre_query` filter.
         *
         * @since 6.0.4
         *
         * @param array    $the_posts The array of posts that will be returned by the `WP_Query` instance.
         * @param WP_Query $query     WP_Query The `WP_Query` instance that is currently filtering its `the_posts` property.
         *
         * @return array The filtered array of posts that will be returned by the `WP_Query` instance, not modified by
         *               this filter.
         */
        public function remove_late_filters($the_posts, $query)
        {
        }
        /**
         * Attempt an early hydration of the post caches when fetching the found rows, this method
         * is using the `found_posts` filter as an action.
         *
         * @since 6.0.4
         *
         * @param int      $found_posts The number of found posts, not used by this method.
         * @param WP_Query $query       The `WP_Query` instance that is currently filtering its `found_posts` property.
         *
         * @return int The number of found posts, not modified by this method.
         */
        public function hydrate_posts_on_found_rows($found_posts, $query)
        {
        }
        /**
         * Filters the `ORDER` section of the query to redirect the fields that require it to the custom tables.
         *
         * The `parse_orderby` method might have not completely taken care of this redirection if the query did
         * not originally specify any `orderby` or later filters have modified the `ORDER BY` section of the query
         * further.
         *
         * @since 6.0.4
         *
         * @param string   $posts_orderby The `ORDER` section of the query.
         * @param WP_Query $query         The `WP_Query` instance that is currently filtering its `posts_orderby` property.
         *
         * @return string The filtered `ORDER` section of the query.
         */
        public function redirect_posts_orderby($posts_orderby, $query)
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\WP_Query\Modifiers {
    /**
     * Class Events_Admin_List_Modifier
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\WP_Query\Modifiers
     */
    class Events_Admin_List_Modifier extends \TEC\Events\Custom_Tables\V1\WP_Query\Modifiers\Base_Modifier
    {
        /**
         * {@inheritDoc}
         */
        public function applies_to(\WP_Query $query = null)
        {
        }
        /**
         * {@inheritDoc}
         *
         * @since 6.0.0
         */
        public function hook()
        {
        }
        /**
         * @since 6.0.0
         *
         * @param array<string,string> $pieces Query clauses.
         *
         * @return array<string,string> The modified WHERE query clauses.
         */
        public function filter_legacy_child_events($pieces)
        {
        }
        /**
         * {@inheritDoc}
         *
         * @since 6.0.0
         */
        public function unhook()
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\WP_Query\Monitors {
    /**
     * Trait Query_Monitor
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\WP_Query\Monitors
     */
    trait Query_Monitor
    {
        use \TEC\Events\Custom_Tables\V1\Traits\With_WP_Query_Introspection;
        /**
         * A reference to the DI Container the Monitor will use to build the Modifiers.
         *
         * @since 6.0.0
         *
         * @var Container
         */
        private $container;
        /**
         * An object storage that will map from WP_Query instances to their modifiers, if any.
         *
         * @since 6.0.0
         *
         * @var SplObjectStorage<WP_Query,array<WP_Query_Modifier>>
         */
        private $modifiers;
        /**
         * A flag property to indicate whether the Monitor is enabled or not.
         *
         * @since 6.0.0
         *
         * @var bool
         */
        private $enabled = true;
        /**
         * A flag property to indicate whether the Monitor should keep a reference to
         * the done Modifiers or not.
         *
         * @since 6.0.0
         *
         * @var bool
         */
        private $keep_modifiers_reference = false;
        /**
         * Whether the implementations have been filtered at least once or not.
         *
         * @since 6.0.11
         *
         * @var bool
         */
        private bool $filtered_implementations = false;
        /**
         * Monitor constructor.
         *
         * @since 6.0.0
         *
         * @param Container|null $container    Either a reference to a specific container, or `null` to use the
         *                                              global one.
         */
        public function __construct(\TEC\Common\Contracts\Container $container = null)
        {
        }
        /**
         * Will filter and retrieve the list of WP_Query_Modifier implementations. Any implementation filters
         * must be applied before the init hook is completed.
         *
         * @since 6.0.5
         *
         * @return array<WP_Query_Modifier> List of WP_Query_Modifier implementations.
         */
        public function get_implementations() : array
        {
        }
        /**
         * Attaches a Modifier to a WP_Query, if required.
         *
         * @since 6.0.0
         *
         * @param WP_Query $query A reference to the WP Query object that is currently running.
         *
         *
         * @return array<WP_Query_Modifier> An array of references to the Modifier instances that attached to the
         *                                  query instance, if any.
         */
        public function attach(\WP_Query $query = null)
        {
        }
        /**
         * Registers the attachment of a Modifier to a `WP_Query` instance.
         *
         * @since 6.0.0
         *
         * @param WP_Query_Modifier $modifier A reference to the Modifier instance attached to the `WP_Query` instance.
         * @param WP_Query          $query    A reference to the `WP_Query` object the modifier is attached to.
         */
        private function register_modifier_for(\TEC\Events\Custom_Tables\V1\WP_Query\Modifiers\WP_Query_Modifier $modifier, \WP_Query $query)
        {
        }
        /**
         * Returns a closure that will remove a set of Modifiers from the tracked Modifiers.
         *
         * @since 6.0.0
         *
         * @param WP_Query $query The query that will be used as key to remove the modifiers.
         *
         * @return Closure A Closure that will remove the modifiers, using the Query as key,
         *                 from the list of modifiers.
         */
        private function drop_modifiers(\WP_Query $query)
        {
        }
        /**
         * Return the number of Queries to which at least one modifier is attached.
         *
         * @since 6.0.0
         *
         * @return int The number of modifier instances.
         */
        #[\ReturnTypeWillChange]
        public function count()
        {
        }
        /**
         * Remove instances from the modifiers so it can be garbage collected.
         *
         * @since 6.0.0
         */
        public function detach()
        {
        }
        /**
         * Returns a reference to the Modifier instance attached to a specific `WP_Query` instance, if any.
         *
         * @since 6.0.0
         *
         * @param WP_Query $wp_query A reference to the `WP_Query` object to fetch the Modifier instance for.
         * @param int      $index    The index of the modifier to return
         *
         * @return WP_Query_Modifier|null Either a reference to the Modifier instance attached to the `WP_Query`
         *                                instance, or `null` if no Modifier is attached to it.
         */
        public function get_modifier_for_query(\WP_Query $wp_query, $index = 0)
        {
        }
        /**
         * Disables the Monitor.
         *
         * If the Monitor was already disabled, the method will not have any effect.
         *
         * @since 6.0.0
         */
        public function disable()
        {
        }
        /**
         * Enables the Monitor.
         *
         * If the Monitor was already enabled, the method will not have any effect.
         *
         * @since 6.0.0
         */
        public function enable()
        {
        }
        /**
         * Sets whether the Monitor should keep a reference to "done" Modifiers or not.
         *
         * By default, the Monitor will try to remove a reference to a Modifier that has
         * completed its work, and the Query it modified, to allow for the cascading garbage
         * collection to happen.
         * Think of it like a "weak map" implementation built on what we have.
         * Setting the flat to `true` will force the Monitor to keep references to all the modifiers
         * and cascading objects referenced by them: use only for testing, please.
         *
         * @since 6.0.0
         *
         * @param bool $keep_modifiers_reference    Whether the Monitor should keep a reference
         *                                          to "done" Modifiers or not.
         */
        public function keep_modifiers_reference($keep_modifiers_reference)
        {
        }
    }
    /**
     * Class Custom_Tables_Query_Monitor
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\WP_Query\Monitors
     */
    class Custom_Tables_Query_Monitor
    {
        use \TEC\Events\Custom_Tables\V1\WP_Query\Monitors\Query_Monitor;
        /**
         * Returns the flag property that will be set on a `WP_Query` instance to indicate it should
         * be ignored by the Monitor.
         *
         * @since 6.0.0
         *
         * @return string The name of the flag property that will be set on a `WP_Query` object to indicate it
         *                should be ignored by the Monitor.
         */
        public static function ignore_flag()
        {
        }
    }
    /**
     * Class Monitor
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\WP_Query\Monitors
     */
    class WP_Query_Monitor implements \Countable
    {
        use \TEC\Events\Custom_Tables\V1\WP_Query\Monitors\Query_Monitor;
        /**
         * Returns the flag property that will be set on a `WP_Query` instance to indicate it should
         * be ignored by the Monitor.
         *
         * @since 6.0.0
         *
         * @return string The name of the flag property that will be set on a `WP_Query` object to indicate it
         *                should be ignored by the Monitor.
         */
        public static function ignore_flag()
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\WP_Query {
    /**
     * Class Provider
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\WP_Query
     */
    class Provider extends \TEC\Common\Contracts\Service_Provider implements \Serializable, \TEC\Events\Custom_Tables\V1\Provider_Contract
    {
        /**
         * Register the filters and bindings required to integrate the plugin custom tables in the normal
         * WP_Query flow.
         *
         * @since 6.0.0
         */
        public function register()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function unregister()
        {
        }
        /**
         * Attaches a Monitor instance to the running query.
         *
         * @since 6.0.0
         *
         * @param  WP_Query  $query  A reference to the currently running query.
         */
        public function attach_monitor($query)
        {
        }
        /**
         * Hooks into the Event Repository initialization to replace the default Query Filters
         * with an implementation that will redirect to the custom tables.
         *
         * @since 6.0.0
         *
         * @param  Repository  $repository  A reference to the instance of the repository that is initializing.
         */
        public function replace_repository_query_filters(\Tribe__Repository $repository)
        {
        }
        /**
         * Implements the method that is going to be invoked to serialize
         * the class to make sure the Container instance, that uses non-serializable
         * Closures, will not be part of the serialized data.
         *
         * @since 6.0.0
         *
         * @return string An empty string, to not serialize the object.
         */
        public function serialize()
        {
        }
        /**
         * Returns void to not spawn the object from serialized data.
         *
         * @since 6.0.0
         *
         * @param string $data The data to unserialize.
         *
         * @return void Return void to not spawn the object from serialized data.
         */
        public function unserialize($data)
        {
        }
        /**
         * Implements the method that is going to be invoked to serialize
         * the class to make sure the Container instance, that uses non-serializable
         * Closures, will not be part of the serialized data.
         *
         * @since 6.0.6
         *
         * @return array An empty array, the object is not serializable.
         */
        public function __serialize() : array
        {
        }
        /**
         * Returns void to not spawn the object from serialized data.
         *
         * @since 6.0.6
         *
         * @param array $data The data to unserialize.
         *
         * @return void Return void to not spawn the object from serialized data.
         */
        public function __unserialize(array $data) : void
        {
        }
    }
    /**
     * Class Redirection_Schema
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\WP_Query
     */
    class Redirection_Schema
    {
        /**
         * Returns the unfiltered version of the meta key redirection map.
         *
         * Note: extending classes should extend this method to modify the map.
         *
         * @since 6.0.0
         *
         * @return array<string,array<string>> The unfiltered version of the meta key redirection map.
         */
        protected static function get_meta_key_redirection_map()
        {
        }
        /**
         * Returns the filtered version of the meta key redirection map.
         *
         * Note: this method is to decouple the set up and filtering of the map for the benefit or external code; extending
         * classes should override the `get_meta_key_redirection_map` method.
         *
         * @since 6.0.0
         *
         * @return array<string,array<string>> The filtered version of the meta key redirection map.
         */
        public static function get_filtered_meta_key_redirection_map()
        {
        }
    }
}
namespace TEC\Events\Custom_Tables\V1\WP_Query\Repository {
    /**
     * Class Custom_Tables_Query_Filters
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\WP_Query\Repository
     */
    class Custom_Tables_Query_Filters extends \Tribe__Repository__Query_Filters
    {
        /**
         * A list of redirected meta keys, compiled during calls to the `redirect` method.
         *
         * @since 6.0.0
         *
         * @var array<string,array<string,mixed>>
         */
        protected $redirects = [];
        /**
         * Custom_Tables_Query_Filters constructor.
         *
         * Overrides the base constructor to set up a meta key redirection map.
         *
         * @since 6.0.0
         *
         * @param  Query_Replace  $query_redirect
         */
        public function __construct(\TEC\Events\Custom_Tables\V1\WP_Query\Repository\Query_Replace $query_redirect)
        {
        }
        /**
         * Overrides the default implementation to redirect some WHERE LIKE clauses
         * to the custom tables.
         *
         * @since 6.0.0
         *
         * {@inheritdoc}
         */
        public function filter_by_like($where, \WP_Query $query)
        {
        }
        /**
         * Overrides the default implementation to redirect some `WHERE` clauses
         * to the custom tables.
         *
         * @since 6.0.0
         *
         * {@inheritdoc}
         */
        public function filter_posts_where($where, \WP_Query $query)
        {
        }
        /**
         * Overrides the default implementation to redirect some `WHERE` clauses
         * to the custom tables.
         *
         * @since 6.0.0
         *
         * {@inheritdoc}
         */
        public function filter_by_to_ping($where, \WP_Query $query)
        {
        }
        /**
         * Overrides the default implementation to redirect some 'JOIN' clauses
         * to the custom tables.
         *
         * @since 6.0.0
         *
         * {@inheritdoc}
         */
        public function filter_posts_join($join, \WP_Query $query)
        {
        }
        /**
         * Overrides the default implementation to redirect some 'ORDER BY' clauses
         * to the custom tables.
         *
         * @since 6.0.0
         *
         * {@inheritdoc}
         */
        public function filter_posts_orderby($orderby, \WP_Query $query)
        {
        }
        /**
         * Overrides the default implementation to redirect some 'SELECT' clauses
         * to the custom tables.
         *
         * @since 6.0.0
         *
         * {@inheritdoc}
         */
        public function filter_posts_fields($fields, \WP_Query $query)
        {
        }
        /**
         * Filters the `GROUP BY` part of the SQL built by the Query to replace references
         * of `wp_posts.ID` with references to the `Occurrences.occurrence_id` table.
         *
         * @since 6.0.0
         *
         * @param  string    $groupby  The original `GROUP BY` string.
         * @param  WP_Query  $query    A reference to the `WP_Query` object that is currently
         *                             running.
         *
         * @return string The modified `GROUP BY` SQL.
         */
        public function group_by_occurrence_id($groupby, \WP_Query $query)
        {
        }
        /**
         * Overrides the base method to handle post parent based queries that might come from PRO code.
         *
         * @since 6.0.0
         *
         * @param string      $join_clause The original JOIN clause to add.
         * @param string|null $id          An optional unique identifier for the JOIN clause in the context of the filters.
         * @param bool        $override    Whether to override a pre-existing JOIN clause with this one, if present, or
         *                                 not. This will only apply if the `$id` is provided.
         */
        public function join($join_clause, $id = null, $override = false)
        {
        }
        /**
         * Sets the mask value for a query var, or a list of query vars, that should be applied at filtering time.
         *
         * The mask will NOT change the value and content of each query var, it will just prevent the `filter_` methods
         * from applying if set to `false`. By default, all query vars will be applied.
         *
         * @since 6.0.0
         *
         * @param string|array<string> $query_var Either a query var, or a list of query vars to set the mask value for.
         * @param bool $mask Whether the query var should apply at filtering time (`true`) or not (`false`).
         */
        public function set_query_var_mask($query_var, $mask)
        {
        }
        /**
         * Returns a reference to the current target Query.
         *
         * @since 6.0.0
         *
         * @return WP_Query A reference to the current target query.
         */
        public function get_query()
        {
        }
        /**
         * Resets the query vars filtering mask to the default value.
         *
         * @since 6.0.0
         */
        public function reset_query_vars_mask()
        {
        }
        /**
         * Returns a de-duplicated version of the query input JOIN clause that will not contain JOINs
         * that would duplicated the ones set in the this object `join` query variables.
         *
         * @param string $query_join The query input JOIN clause.
         *
         * @return string The de-duplicated JOIN clause.
         */
        protected function deduplicate_joins($query_join) : string
        {
        }
    }
    /**
     * Class Query_Replace
     *
     * @since   6.0.0
     *
     * @package TEC\Events\Custom_Tables\V1\WP_Query\Repository
     */
    class Query_Replace
    {
        /**
         * The filtered version of the meta key redirection map, the same used by
         * the Custom Tables Meta Query.
         *
         * @since 6.0.0
         *
         * @var array<string,array<string>>
         */
        protected $meta_key_redirection_map;
        /**
         * A set of `LIKE` clauses that should be redirected to the custom tables.
         *
         * @since 6.0.0
         *
         * @var array<string,array<string,string>>|null
         */
        protected $like;
        /**
         * Custom_Tables_Query_Filters constructor.
         *
         * Overrides the base constructor to set up a meta key redirection map.
         *
         * @since 6.0.0
         */
        public function __construct()
        {
        }
        /**
         * Sets the fields as those could be set on the `WP_Query` `fields` parameter.
         *
         * @since 6.0.0
         *
         * @param string $fields The fields value.
         *
         * @return $this A reference to this for chaining.
         */
        public function set_fields($fields = '')
        {
        }
        /**
         * Set the different joins.
         *
         * @since 6.0.0
         *
         * @param  array<string, string>  $join  An array with the different joins.
         *
         * @return $this
         */
        public function set_join(array $join)
        {
        }
        /**
         * Set the different where clauses available.
         *
         * @since 6.0.0
         *
         * @param  array<string, string>  $where  The list of where clauses to be modified.
         *
         * @return $this
         */
        public function set_where(array $where)
        {
        }
        /**
         * Allow to set the order_by clause
         *
         * @since 6.0.0
         *
         * @param string|array<string>|array<string,string> $order_by The order by clause, in any format supported by
         *                                                            `WP_Query`.
         *
         * @return $this
         */
        public function set_order_by($order_by)
        {
        }
        /**
         * Custom setter for the after order by clause.
         *
         * @since 6.0.0
         *
         * @param string|array<string>|array<string,string> $after_order_by The order by clause, in any format supported
         *                                                                  by `WP_Query`.
         */
        public function set_after_order_by(array $after_order_by)
        {
        }
        /**
         * Parses the current filters, as set up by the default version of the class, and
         * redirects them to the Custom Tables where required.
         *
         * @since 6.0.0
         *
         * @return array<string,array<mixed>> The redirected query vars.
         */
        public function build()
        {
        }
        /**
         * Sets the array of `LIKE` clauses that should be redirected.
         *
         * @since 6.0.0
         *
         * @param array<string,array<string,string>>|null $like An array of `LIKE` clauses that should be redirected to
         *                                                      the custom tables.
         */
        public function set_like(array $like = null)
        {
        }
    }
}
namespace TEC\Events\Editor\Full_Site {
    /**
     * Interface Block_Template_Contract
     */
    interface Block_Template_Contract
    {
        /**
         * The Block ID.
         *
         * @since 6.2.7
         *
         * @return string
         */
        public function id() : string;
        /**
         * The Block slug.
         *
         * @since 6.2.7
         *
         * @return string
         */
        public function slug() : string;
        /**
         * Our namespace for a set of blocks.
         *
         * @since 6.2.7
         *
         * @return string
         */
        public function get_namespace() : string;
        /**
         * The getter for this template service to retrieve a hydrated WP_Block_Template.
         *
         * @since 6.2.7
         *
         * @return WP_Block_Template|null
         */
        public function get_block_template() : ?\WP_Block_Template;
        /**
         * Handles rendering the template.
         *
         * @since 6.2.7
         *
         * @return string
         */
        public function render() : string;
    }
    /**
     * Class Archive_Block_Template
     *
     * @since   6.2.7
     *
     * @package TEC\Events\Editor\Full_Site
     */
    class Archive_Block_Template extends \Tribe__Editor__Blocks__Abstract implements \TEC\Events\Editor\Full_Site\Block_Template_Contract
    {
        /**
         * @since 6.2.7
         *
         * @var string The namespace of this template.
         */
        protected $namespace = 'tec';
        /**
         * @since 6.2.7
         *
         * @return string The WP Block Template ID.
         */
        public function id() : string
        {
        }
        /**
         * Returns the name/slug of this block.
         *
         * @since 6.2.7
         *
         * @return string The name/slug of this block.
         */
        public function slug() : string
        {
        }
        /**
         * Set the default attributes of this block.
         *
         * @since 6.2.7
         *
         * @return array<string,mixed> The array of default attributes.
         */
        public function default_attributes()
        {
        }
        /**
         * Since we are dealing with a Dynamic type of Block we need a PHP method to render it.
         *
         * @since 6.2.7
         *
         * @param array $attributes The block attributes.
         *
         * @return string The block HTML.
         */
        public function render($attributes = []) : string
        {
        }
        /**
         * Creates then returns the WP_Block_Template object for archive events.
         *
         * @since 6.2.7
         *
         * @return null|WP_Block_Template The hydrated archive events template object.
         */
        protected function create_wp_block_template() : ?\WP_Block_Template
        {
        }
        /**
         * Creates if non-existent theme post, then returns the WP_Block_Template object for archive events.
         *
         * @since 6.2.7
         *
         * @return null|WP_Block_Template The hydrated archive events template object.
         */
        public function get_block_template() : ?\WP_Block_Template
        {
        }
    }
    /**
     * Class Controller
     *
     * @since   6.2.7
     *
     * @package TEC\Events\Editor\Full_Site
     */
    class Controller extends \TEC\Common\Contracts\Provider\Controller
    {
        /**
         * Register the provider.
         *
         * @since 6.2.7
         */
        public function do_register() : void
        {
        }
        /**
         * Unhooks actions and filters.
         *
         * @since 6.2.7
         */
        public function unregister() : void
        {
        }
        /**
         * Should only be active if we are in a Site Editor theme.
         *
         * @since 6.2.7
         *
         * @return bool Only active during FS theme.
         */
        public function is_active() : bool
        {
        }
        /**
         * Internal FSE function for asset conditional testing.
         *
         * @since 5.14.2
         *
         * @return bool Whether The current theme supports full-site editing or not.
         */
        public function is_full_site_editor() : bool
        {
        }
        /**
         * Adds the filters required by the FSE components.
         *
         * @since 5.14.2
         * @since 6.2.7 Adding support for block templates.
         */
        protected function add_filters()
        {
        }
        /**
         * Removes registered filters.
         *
         * @since 6.2.7
         */
        public function remove_filters()
        {
        }
        /**
         * Redirect the post type template to our Events Archive slug, as that is what is used for lookup in the database.
         *
         * @since 6.2.7
         *
         * @param string[] $templates Templates in order of display hierarchy.
         *
         * @return string[] Adjusted file name that is parsed to match our block template.
         */
        public function filter_archive_template_hierarchy($templates)
        {
        }
        /**
         * Redirect the post type template to our Single Event slug, as that is what is used for lookup in the database.
         *
         * @since 6.2.7
         *
         * @param array $templates Templates in order of display hierarchy.
         *
         * @return array Adjusted file name that is parsed to match our block template.
         */
        public function filter_single_template_hierarchy($templates)
        {
        }
        /**
         * Registers the Events Archive template.
         *
         * @since 5.14.2
         */
        public function action_register_archive_template()
        {
        }
        /**
         * Registers the Single Event template.
         *
         * @since 6.2.7
         */
        public function action_register_single_event_template()
        {
        }
        /**
         * Adds the archive template to the array of block templates.
         *
         * @since 5.14.2
         * @since 6.2.7 Added support for single event templates.
         *
         * @param WP_Block_Template[] $query_result Array of found block templates.
         * @param array               $query        {
         *                                          Optional. Arguments to retrieve templates.
         *
         * @type array                $slug__in     List of slugs to include.
         * @type int                  $wp_id        Post ID of customized template.
         * }
         *
         *
         * @return array The modified $query.
         */
        public function filter_include_templates($query_result, $query, $template_type)
        {
        }
        /**
         * Fetch our Block Template by ID.
         *
         * @since 6.2.7
         *
         * @param null|WP_Block_Template $block_template The filtered template.
         * @param string                 $id             The block template ID.
         * @param string                 $template_type  The template type.
         *
         * @return null|WP_Block_Template
         */
        public function filter_include_template_by_id($block_template, $id, $template_type)
        {
        }
        /**
         * Filters and returns the available Event Block Template Services, used to locate
         * WP_Block_Template instances.
         *
         * @since 6.2.7
         *
         * @param string $template_type The type of templates we are fetching.
         *
         * @return Block_Template_Contract[] List of filtered Event Calendar templates.
         */
        public function get_filtered_block_templates($template_type = 'wp_template') : array
        {
        }
        /**
         * If we're using a FSE theme, we always use the full styling.
         *
         * @since 5.14.2
         *
         * @param string $value The value of the option.
         *
         * @return string $value The original value, or an empty string if FSE is active.
         */
        public function filter_events_template_setting_option($value)
        {
        }
        /**
         * Override the get_single_option to return the default event template when FSE is active.
         *
         * @since 5.14.2
         *
         * @param mixed  $option      Results of option query.
         * @param string $default     The default value.
         * @param string $option_name Name of the option.
         *
         * @return mixed results of option query.
         */
        public function filter_tribe_get_single_option($option, $default, $option_name)
        {
        }
        /**
         * Overwrite the template option on save if FSE is active.
         * We only support the default events template for now.
         *
         * @since 5.14.2
         *
         * @param array<string, mixed> $options   The array of values to save. In the format option key => value.
         * @param string               $option_id The main option ID.
         *
         * @return array<string, mixed> $options   The array of values to save. In the format option key => value.
         */
        public function filter_tribe_save_template_option($options, $option_id)
        {
        }
    }
    /**
     * Class Single_Block_Templates
     *
     * @since   6.2.7
     *
     * @package TEC\Events\Editor\Full_Site
     */
    class Single_Block_Template extends \Tribe__Editor__Blocks__Abstract implements \TEC\Events\Editor\Full_Site\Block_Template_Contract
    {
        /**
         * @since 6.2.7
         *
         * @var string The namespace of this template.
         */
        protected $namespace = 'tec';
        /**
         * Returns the name/slug of this block.
         *
         * @since 6.2.7
         *
         * @return string The name/slug of this block.
         */
        public function slug() : string
        {
        }
        /**
         * The ID of this block.
         *
         * @since 6.2.7
         *
         * @return string The WP Block Template ID.
         */
        public function id() : string
        {
        }
        /**
         * Set the default attributes of this block.
         *
         * @since 6.2.7
         *
         * @return array<string,mixed> The array of default attributes.
         */
        public function default_attributes() : array
        {
        }
        /**
         * Since we are dealing with a Dynamic type of Block we need a PHP method to render it.
         *
         * @since 6.2.7
         *
         * @param array $attributes The block attributes.
         *
         * @return string The block HTML.
         */
        public function render($attributes = []) : string
        {
        }
        /**
         * Creates then returns the WP_Block_Template object for single event.
         *
         * @since 6.2.7
         *
         * @return null|WP_Block_Template The hydrated single event template object.
         */
        protected function create_wp_block_template() : ?\WP_Block_Template
        {
        }
        /**
         * Creates if non-existent theme post, then returns the WP_Block_Template object for single events.
         *
         * @since 6.2.7
         *
         * @return null|WP_Block_Template The hydrated single events template object.
         */
        public function get_block_template() : ?\WP_Block_Template
        {
        }
    }
}
namespace TEC\Events\Installer {
    class Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 6.0.9
         */
        public function register()
        {
        }
    }
}
namespace TEC\Events\Legacy\Views\V1 {
    /**
     * Class Provider
     *
     * @since   5.13.0
     * @package TEC\Events\Legacy\Views\V1
     */
    class Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Registers the handlers and modifiers for notifying the site
         * that Legacy views are removed.
         *
         * @since 5.13.0
         */
        public function register()
        {
        }
        /**
         * Gets the files and paths that have been removed from the plugin.
         *
         * @since 5.13.0
         *
         * @return array<string>
         */
        public function get_removed_paths()
        {
        }
        /**
         * Gets the files and paths that have been removed from the plugin.
         *
         * @since 5.13.0
         */
        public function check_theme_for_removed_paths()
        {
        }
        /**
         * Locate the template path for a given path.
         *
         * @since 5.13.0
         *
         * @param $string $path
         * @return string|null
         */
        public function check_theme_for_removed_path($path)
        {
        }
    }
}
namespace TEC\Events\SEO {
    /**
     * Class Provider
     *
     * @since 6.2.3
     * @package TEC\Events\SEO
     */
    class Controller extends \TEC\Common\Contracts\Provider\Controller
    {
        /**
         * @inerhitDoc
         */
        public function do_register() : void
        {
        }
        /**
         * @inerhitDoc
         */
        public function unregister() : void
        {
        }
        /**
         * Hooked to wp action to check if we should bail before hooking the full noindex logic.
         *
         * @since 6.2.6
         *
         * @return void
         */
        public function hook_issue_noindex()
        {
        }
        /**
         * Runs on the "wp" action. Inspects the main query object and if it relates to an events
         * query makes a decision to add a noindex meta tag based on whether events were returned
         * in the query results or not.
         *
         * @since 3.12.4
         * @since 6.0.0 Relies on v2 code.
         *
         * Disabling this behavior completely is possible with:
         *
         *     add_filter( 'tec_events_seo_robots_meta_include', '__return_false' );
         *
         *  Always adding the noindex meta tag for all event views is possible with:
         *
         *     add_filter( 'tec_events_seo_robots_meta_include', '__return_true' );
         *
         *  Always adding the noindex meta tag for a specific event view is possible with:
         *
         *     add_filter( "tec_events_seo_robots_meta_include_{$view}", '__return_true' );
         *
         *  Where `$view` above is the view slug, e.g. `month`, `day`, `list`, etc.
         *
         * @param View_Interface $instance The view instance.
         */
        public function issue_noindex($instance) : void
        {
        }
        /**
         * Determine if a nonindex should be added for list based views that don't have events.
         *
         * @since 6.2.6
         *
         * @param View_Interface $instance The view instance.
         *
         * @return bool
         */
        protected function should_add_no_index_for_list_based_views($instance) : bool
        {
        }
        /**
         * Get the noindex, follow string.
         *
         * @since 6.2.6
         *
         * @return string
         */
        public function get_noindex_follow() : string
        {
        }
        /**
         * Get the noindex, nofollow string.
         *
         * @since 6.2.6
         *
         * @return string
         */
        public function get_noindex_nofollow() : string
        {
        }
        /**
         * Prints a "noindex,follow" robots tag.
         *
         * @since 6.2.3
         */
        public function print_noindex_meta() : void
        {
        }
        /**
         * Returns the end date time object read from the current context.
         *
         * @since 6.2.3
         *
         * @param [type] $view
         * @param [type] $start_date
         * @param [type] $context
         *
         * @return DateTime|false A DateTime object or `false` if a DateTime object could not be built.
         */
        public function get_end_date($view, $start_date, $context)
        {
        }
    }
}
namespace TEC\Events\Site_Health {
    /**
     * Class Site_Health
     *
     * @since   6.1.0
     * @package TEC\Events\Site_Health
     */
    class Info_Section extends \TEC\Common\Site_Health\Info_Section_Abstract
    {
        /**
         * Slug for the section.
         *
         * @since 6.1.0
         *
         * @var string $slug
         */
        protected static string $slug = 'the-events-calendar';
        /**
         * Label for the section.
         *
         * @since 6.1.0
         *
         * @var string $label
         */
        protected string $label;
        /**
         * If we should show the count of fields in the site health info page.
         *
         * @since 6.1.0
         *
         * @var bool $show_count
         */
        protected bool $show_count = false;
        /**
         * If this section is private.
         *
         * @since 6.1.0
         *
         * @var bool $is_private
         */
        protected bool $is_private = false;
        /**
         * Description for the section.
         *
         * @since 6.1.0
         *
         * @var string $description
         */
        protected string $description;
        /**
         * Sets up the section and internally add the fields.
         *
         * @since 6.1.0
         */
        public function __construct()
        {
        }
        /**
         * Generates and adds our fields to the section.
         *
         * @since 6.1.0
         *
         * @param array $info The debug information to be added to the core information page.
         *
         * @return array The debug information to be added to the core information page.
         */
        public function add_fields() : void
        {
        }
    }
    /**
     * Class Provider
     *
     * @since   6.1.0
     * @package TEC\Events\Site_Health
     */
    class Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Internal placeholder to pass around the section slug.
         *
         * @since 6.1.0
         *
         * @var string
         */
        protected $slug;
        public function register()
        {
        }
        /**
         * Add the action hooks.
         *
         * @since 6.1.0
         */
        public function add_actions()
        {
        }
        /**
         * Add the filter hooks.
         *
         * @since 6.1.0
         */
        public function add_filters()
        {
        }
        /**
         * Includes the Section for The Events Calendar.
         *
         * @since 6.1.0
         *
         * @param array<string, \TEC\Common\Site_Health\Info_Section_Abstract> $sections Existing sections.
         *
         * @return array<string, \TEC\Common\Site_Health\Info_Section_Abstract>
         */
        public function filter_include_sections($sections)
        {
        }
    }
}
namespace TEC\Events\Telemetry {
    /**
     * Class Provider
     *
     * @since   6.1.0
     * @package TEC\Events\Telemetry
     */
    class Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Handles the registering of the provider.
         *
         * @since 6.1.0
         */
        public function register()
        {
        }
        /**
         * Handles the inclusion of the Filters for this module.
         *
         * @since 6.1.0
         */
        public function add_filters()
        {
        }
        /**
         * Handles the action hooks for this module.
         *
         * @since 6.1.0
         */
        public function add_actions()
        {
        }
        /**
         * Filter the telemetry opt-in arguments.
         *
         * @since 6.1.0
         *
         * @param array $optin_args Previous set of args we are changing.
         *
         * @return array
         */
        public function filter_tec_common_telemetry_optin_args($optin_args)
        {
        }
        /**
         * Adds the opt in/out control to the general tab debug section.
         *
         * @since 6.1.0
         *
         * @param array<string|mixed> $fields The fields for the general tab Debugging section.
         *
         * @return array<string|mixed> The fields, with the optin control appended.
         */
        public function filter_tribe_general_settings_debugging_section($fields) : array
        {
        }
        /**
         * Ensures the admin control reflects the actual opt-in status.
         * Note this filter is defined twice with different signatures.
         * We take the "low road" - 2 params and test them in the later function
         * to ensure we're only changing the thing we expect.
         *
         * @since 6.1.0
         *
         * @param mixed  $value  The value of the attribute.
         * @param string $field  The field object id.
         *
         * @return mixed $value
         */
        public function filter_tribe_field_opt_in_status($value, $id)
        {
        }
        /**
         * Let The Events Calendar add itself to the list of registered plugins for Telemetry.
         *
         * @since 6.1.0
         *
         * @param array<string,string> $slugs The existing array of slugs.
         *
         * @return array<string,string> $slugs The modified array of slugs.
         */
        public function filter_tec_telemetry_slugs($slugs)
        {
        }
        /**
         * Conditionally injects the hook to trigger the Telemetry modal.
         *
         * @since 6.1.0
         */
        public function action_inject_modal_link()
        {
        }
        /**
         * Update our option and the stellar option when the user opts in/out via the TEC admin.
         *
         * @since 6.1.0
         *
         * @param bool $value The optin value.
         */
        public function action_save_opt_in_setting_field($value)
        {
        }
    }
    /**
     * Class Telemetry
     *
     * @since   6.1.0
     * @package TEC\Events\Telemetry
     */
    class Telemetry
    {
        /**
         * The Telemetry plugin slug for The Events Calendar.
         *
         * @since 6.1.1
         *
         * @var string
         */
        protected static $plugin_slug = 'the-events-calendar';
        /**
         * The "plugin path" for The Events Calendar main file.
         *
         * @since 6.1.1
         *
         * @var string
         */
        protected static $plugin_path = 'the-events-calendar.php';
        /**
         * Filters the modal optin args to be specific to TEC
         *
         * @since 6.1.1
         *
         * @param array<string|mixed> $original_optin_args The original args, provided by Common.
         *
         * @return array<string|mixed> The filtered args.
         */
        public function filter_tec_common_telemetry_optin_args($original_optin_args) : array
        {
        }
        /**
         * Adds the opt in/out control to the general tab debug section.
         *
         * @since 6.1.1
         *
         * @param array<string|mixed> $fields The fields for the general tab Debugging section.
         *
         * @return array<string|mixed> The fields, with the optin control appended.
         */
        public function filter_tribe_general_settings_debugging_section($fields) : array
        {
        }
        /**
         * Reconcile our option and the Telemetry option to a single value.
         *
         * @since 6.1.1
         */
        public function get_reconciled_telemetry_opt_in() : bool
        {
        }
        /**
         * Ensures the admin control reflects the actual opt-in status.
         * We save this value in tribe_options but since that could get out of sync,
         * we always display the status from TEC\Common\StellarWP\Telemetry\Opt_In\Status directly.
         *
         * @since 6.1.0
         *
         * @param mixed  $value  The value of the attribute.
         * @param string $id  The field object id.
         *
         * @return mixed $value
         */
        public function filter_tribe_field_opt_in_status($value, $id)
        {
        }
        /**
         * Adds The Events Calendar to the list of plugins
         * to be opted in/out alongside tribe-common.
         *
         * @since 6.1.0
         *
         * @param array<string,string> $slugs The default array of slugs in the format  [ 'plugin_slug' => 'plugin_path' ]
         *
         * @see \TEC\Common\Telemetry\Telemetry::get_tec_telemetry_slugs()
         *
         * @return array<string,string> $slugs The same array with The Events Calendar added to it.
         */
        public function filter_tec_telemetry_slugs($slugs)
        {
        }
        /**
         * Determines if we are on a TEC admin page except the post edit page.
         *
         * @since 6.1.0
         *
         * @return boolean
         */
        public static function is_tec_admin_page() : bool
        {
        }
        /**
         * Outputs the hook that renders the Telemetry action on all TEC admin pages.
         *
         * @since 6.1.0
         */
        public function inject_modal_link()
        {
        }
        /**
         * Update our option and the stellar option when the user opts in/out via the TEC admin.
         *
         * @since 6.1.0
         *
         * @param bool $saved_value The option value
         */
        public function save_opt_in_setting_field($saved_value) : void
        {
        }
    }
}
namespace {
    class Tribe__Events__API
    {
        public static $valid_venue_keys = ['Venue', 'Address', 'City', 'Province', 'State', 'StateProvince', 'Province', 'Zip', 'Phone'];
        public static $valid_organizer_keys = ['Organizer', 'Phone', 'Email', 'Website'];
        /**
         * Create a new event
         *
         * @param array $args The post args.
         *
         * @return int|WP_Error The created event ID or a WP_Error object if it fails.
         */
        public static function createEvent($args)
        {
        }
        /**
         * Update an existing event
         *
         * @param int   $event_id The event ID to update.
         * @param array $args     The post args.
         *
         * @return int|WP_Error The updated event ID or a WP_Error object if it fails.
         */
        public static function updateEvent($event_id, $args)
        {
        }
        /**
         * Delete an event - all instances if recurring
         *
         * @param int  $eventId      The Event ID to delete.
         * @param bool $force_delete Same as the WP parameter.
         *
         * @return mixed
         */
        public static function deleteEvent($eventId, $force_delete = \false)
        {
        }
        /**
         * Used by createEvent and updateEvent - saves all the various event meta
         *
         * @param int     $event_id The event ID we are modifying meta for.
         * @param array   $data     The meta fields we want saved.
         * @param WP_Post $event    The event post, itself.
         *
         * @return bool
         */
        public static function saveEventMeta($event_id, $data, $event = \null)
        {
        }
        /**
         * Determines if a meta value has been changed
         *
         * @param string $field Field to compare against
         * @param array $new New data
         * @param array $old Old post data
         *
         * @return boolean
         */
        public static function is_meta_value_changed($field, $new, $old)
        {
        }
        /**
         * Determines if a post value has been changed
         *
         * @param string $field Field to compare against
         * @param array $new New data
         * @param array $old WP_Post pre-update
         *
         * @return boolean
         */
        public static function is_post_value_changed($field, $new, $old)
        {
        }
        /**
         * given a set of meta data, prepare date data if it exists
         *
         * @param $data array Associative array of event meta data
         *
         * @return array|WP_Error
         */
        protected static function prepare_event_date_meta($event_id, $data)
        {
        }
        //end prepare_event_date_meta
        /**
         * Triggers an update of the cost meta data (min <-> max) for an event.
         *
         * This is primarily for internal use where an addon needs to update the cost meta
         * data for an event (but no other meta fields). To actually add to or modify the
         * range of cost values the tribe_events_event_costs filter hook should be
         * leveraged.
         *
         * @since 5.8.2
         * @param array|string|int $cost Event cost.
         * @param int $event_id Event post ID.
         *
         */
        public static function update_event_cost($event_id, $cost = [])
        {
        }
        /**
         * @param int $event_id The event post ID
         * @param array $args An array of arguments supported by the `wp_get_object_terms` function.
         *
         * @since 4.5
         *
         * @see wp_get_object_terms()
         *
         * @return array An associative array of terms in the [ <taxonomy> => [ <term_1>, <term_2>, ...], ...] format.
         */
        public static function get_event_terms($event_id, array $args = [])
        {
        }
        /**
         * Creates a new organizer
         *
         * @param array  $data        The organizer data.
         * @param string $post_status the intended post status.
         *
         * @return mixed
         */
        public static function createOrganizer($data, $post_status = 'publish')
        {
        }
        /**
         * Deletes an organizer
         *
         * @param int  $organizer_id  The organizer ID to delete.
         * @param bool $force_delete Same as WP param.
         *
         */
        public static function deleteOrganizer($organizer_id, $force_delete = \false)
        {
        }
        /**
         * Updates an organizer
         *
         * @param int   $organizer_id The organizer ID to update.
         * @param array $data        The organizer data.
         *
         */
        public static function updateOrganizer($organizer_id, $data)
        {
        }
        /**
         * Creates a new venue
         *
         * @param array  $data        The venue data.
         * @param string $post_status the intended post status.
         *
         * @return mixed
         */
        public static function createVenue($data, $post_status = 'publish')
        {
        }
        /**
         * Updates an venue
         *
         * @param int   $venue_id The venue ID to update.
         * @param array $data    The venue data.
         *
         */
        public static function updateVenue($venue_id, $data)
        {
        }
        /**
         * Deletes a venue
         *
         * @param int  $venue_id      The venue ID to delete.
         * @param bool $force_delete Same as WP param.
         *
         */
        public static function deleteVenue($venue_id, $force_delete = \false)
        {
        }
        /**
         * Gets all post meta and flattens it out a bit
         *
         * @param int $event_id Post ID for event
         *
         * @return array
         */
        public static function get_and_flatten_event_meta($event_id)
        {
        }
        /**
         * Sanitize the arguments array before sending to create/update an event post.
         *
         * Use this prior to sending arguments to post create/update function.
         *
         * @since 4.6.20
         *
         * @see Tribe__Events__API::sanitize_meridian_meta_value
         * @see Tribe__Events__API::sanitize_hour_meta_value
         * @see Tribe__Events__API::sanitize_minute_meta_value
         *
         * @param array $args The arguments sent to create/update an event post.
         *
         * @return array|WP_Error
         */
        public static function sanitize_event_post_create_update_args($args)
        {
        }
        /**
         * Sanitize a string to be used as an event meridian post meta value: am|pm.
         *
         * Use this prior to sending value to the database.
         *
         * @since 4.6.20
         *
         * @param string $value            The post meta value to be checked, such as 'am'.
         * @param bool   $empty_if_invalid If true, set an invalid value to an empty string, else generate WP_Error.
         *
         * @return string|WP_Error
         */
        public static function sanitize_meridian_meta_value($value, $empty_if_invalid = \true)
        {
        }
        /**
         * Sanitize a string to be used as an event hour post meta value: 1-12 if `Event{Start|End}Meridian`
         * is also passed, else 0-23.
         *
         * Use this prior to sending value to the database.
         *
         * @since 4.6.20
         *
         * @param string $value       The post meta value to be checked, such as '07'.
         * @param bool   $twelve_hour If false, allow 0-23. If true, only allow 1-12.
         *
         * @return string|WP_Error
         */
        public static function sanitize_hour_meta_value($value, $twelve_hour = \false)
        {
        }
        /**
         * Sanitize a string to be used as an event minute post meta value: 0-59.
         *
         * Use this prior to sending value to the database.
         *
         * @since 4.6.20
         *
         * @param string $value The post meta value to be checked, such as '30'.
         *
         * @return string|WP_Error
         */
        public static function sanitize_minute_meta_value($value)
        {
        }
    }
    /**
     * Controls getting a previous or next event from the context of a single event being viewed.
     */
    class Tribe__Events__Adjacent_Events
    {
        /**
         * @var int
         */
        protected $current_event_id = 0;
        /**
         * @var int
         */
        public $previous_event_id;
        /**
         * @var int
         */
        public $next_event_id;
        /**
         * @var string
         */
        public $previous_event_link = '';
        /**
         * @var string
         */
        public $next_event_link = '';
        /**
         * Set the "center" event ID to look on either side of in prev/next methods.
         *
         * @since 4.6.12
         *
         * @param int $event_id The event ID to look on either side of in prev/next methods.
         */
        public function set_current_event_id($event_id)
        {
        }
        /**
         * Get the "center" event ID to look on either side of in prev/next methods.
         *
         * @since 4.6.12
         *
         * @param int $event_id The event ID to look on either side of in prev/next methods.
         */
        public function get_current_event_id()
        {
        }
        /**
         * Get link to the previous event.
         *
         * @since 4.6.12
         *
         * @param boolean $anchor
         * @return string
         */
        public function get_prev_event_link($anchor)
        {
        }
        /**
         * Get link to the next event.
         *
         * @since 4.6.12
         *
         * @param boolean $anchor
         * @return string
         */
        public function get_next_event_link($anchor)
        {
        }
        /**
         * Modify the WHERE clause of query when fetching next/prev posts so events with identical times are not excluded
         *
         * This method ensures that when viewing single events that occur at a given time, other events
         * that occur at the exact same time are are not excluded from the prev/next links
         *
         * @since 4.0.2
         * @since 4.6.12 Moved to new Tribe__Events__Adjacent_Events class.
         *
         * @param string $where_sql WHERE SQL statement
         * @param WP_Query $query WP_Query object
         *
         * @return string
         */
        public function get_closest_event_where($where_sql)
        {
        }
        /**
         * Get the prev/next post for a given event. Ordered by start date instead of ID.
         *
         * @since 4.6.12
         * @since 6.0.7 Cache the query results.
         *
         * @param string  $mode Either 'next' or 'previous'.
         *
         * @return null|WP_Post The closest Event post object, or `null` if no post was found.
         */
        public function get_closest_event($mode = 'next')
        {
        }
        /**
         * Get a "previous/next post" link for events. Ordered by start date instead of ID.
         *
         * @since 4.6.12
         *
         * @param string  $mode Either 'next' or 'previous'.
         * @param mixed   $anchor
         *
         * @return string The link (with <a> tags).
         */
        public function get_event_link($mode = 'next', $anchor = \false)
        {
        }
    }
    class Tribe__Events__Admin__Bar__Admin_Bar
    {
        /**
         * @var Tribe__Events__Admin__Bar__Admin_Bar
         */
        protected static $instance;
        /**
         * @var Tribe__Events__Constants
         */
        protected $constants;
        /**
         * @var Tribe__Events__Admin__Bar__Configurator_Interface
         */
        protected $config;
        /**
         * Singleton constructor for the class.
         *
         * @return Tribe__Events__Admin__Bar__Admin_Bar
         */
        public static function instance()
        {
        }
        /**
         * Tribe__Events__Admin__Bar__Admin_Bar constructor.
         *
         * @param Tribe__Events__Admin__Bar__Configurator_Interface $config    An admin bar configurator.
         * @param Tribe__Events__Constants                          $constants A constants access proxy.
         */
        public function __construct(\Tribe__Events__Admin__Bar__Configurator_Interface $config = \null, \Tribe__Events__Constants $constants = \null)
        {
        }
        /**
         * Whether the Tribe Admin Bar is enabled or not.
         *
         * @return bool `false` if the `TRIBE_DISABLE_TOOLBAR_ITEMS` constant is `true` or the current screen is the network
         *              admin one, `true` otherwise.
         */
        public function is_enabled()
        {
        }
        /**
         * Adds menus, groups and nodes to the admin bar according the configuration.
         *
         * @param WP_Admin_Bar|null $wp_admin_bar
         */
        public function init(\WP_Admin_Bar $wp_admin_bar = \null)
        {
        }
    }
    interface Tribe__Events__Admin__Bar__Configurator_Interface
    {
        /**
         * Configures an admin bar object adding menus, groups and nodes to it.
         *
         * @param WP_Admin_Bar $wp_admin_bar
         *
         * @return mixed
         */
        public function configure(\WP_Admin_Bar $wp_admin_bar);
    }
    class Tribe__Events__Admin__Bar__Default_Configurator implements \Tribe__Events__Admin__Bar__Configurator_Interface
    {
        /**
         * Configures an admin bar object adding menus, groups and nodes to it.
         *
         * @param WP_Admin_Bar $wp_admin_bar
         *
         * @return array An array of menus to add to the admin bar.
         */
        public function configure(\WP_Admin_Bar $wp_admin_bar)
        {
        }
    }
    /**
     * Sets up and renders the main event meta box used in the event editor.
     */
    class Tribe__Events__Admin__Event_Meta_Box
    {
        /**
         * @var WP_Post
         */
        protected $event;
        /**
         * @var Tribe__Events__Main
         */
        protected $tribe;
        /**
         * Variables (with some defaults) for use within the meta box template itself.
         *
         * @var array
         */
        protected $vars = ['_EventAllDay' => \false, '_EventEndDate' => \null, '_EventStartDate' => \null, '_EventOrganizerID' => \null, '_EventVenueID' => \null];
        /**
         * Sets up and renders the event meta box for the specified existing event
         * or for a new event (if $event === null).
         *
         * @param null $event
         */
        public function __construct($event = \null)
        {
        }
        public function init_with_event($event)
        {
        }
        /**
         * Exposes all the variables used in this instance, in a way that it's usable to extract
         * to be used by a template/view
         *
         * @param  WP_Post|int|null  $event What Post we are dealing with
         * @return array
         */
        public function get_extract_vars($event)
        {
        }
        /**
         * Work with the specified event object or else use a placeholder if we are in
         * the middle of creating a new event.
         *
         * @param null $event
         */
        protected function get_event($event = \null)
        {
        }
        /**
         * Sets up the default data for the meta box.
         *
         * @since 5.9.0
         */
        protected function setup_default_vars()
        {
        }
        /**
         * Sets up the data for the meta box.
         *
         * @since 5.9.0
         */
        protected function setup_data()
        {
        }
        /**
         * Checks for existing event post meta data and populates the list of vars accordingly.
         */
        protected function get_existing_event_vars()
        {
        }
        /**
         * Checks for existing organizer post meta data and populates the list of vars accordingly.
         */
        protected function get_existing_organizer_vars()
        {
        }
        /**
         * Checks for existing venue post meta data and populates the list of vars accordingly.
         */
        protected function get_existing_venue_vars()
        {
        }
        /**
         * If it's an all day event and the EOD cutoff is later than midnight
         * set the end date to be the previous day so it displays correctly in the datepicker
         * so the datepickers will match. we'll set the correct end time upon saving
         *
         * @todo remove this once we're allowed to have all day events without a start/end time
         */
        protected function eod_correction()
        {
        }
        /**
         * Assess if this is an all day event.
         */
        protected function set_all_day()
        {
        }
        protected function set_start_date_time()
        {
        }
        protected function set_end_date_time()
        {
        }
        /**
         * Check if the Event is an Auto-Draft
         *
         * @since 4.4
         *
         * @return bool
         */
        public function is_auto_draft()
        {
        }
        /**
         * Gets the default value for the Timepicker
         *
         * @since 4.4
         *
         * @param mixed $type
         *
         * @return string
         */
        public function get_timepicker_default($type = \null)
        {
        }
        /**
         * Gets the Step for the Timepicker
         *
         * @since 4.4
         *
         * @param mixed $type
         *
         * @return int
         */
        public function get_timepicker_step($type = \null)
        {
        }
        /**
         * Gets whether or not the timepicker should round the minutes
         *
         * @since 4.4
         *
         * @return bool
         */
        public function get_timepicker_round()
        {
        }
        /**
         * Pull the expected variables into scope and load the meta box template.
         */
        protected function do_meta_box()
        {
        }
        /**
         * Disable WordPress Custom Fields in Events
         *
         * @since 4.6.23
         */
        public function display_wp_custom_fields_metabox()
        {
        }
    }
}
namespace Tribe\Events\Admin\Filter_Bar {
    /**
     * Class Provider
     *
     * @since 5.14.0
     *
     */
    class Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 5.14.0
         */
        public function register()
        {
        }
        /**
         * Add actions.
         *
         * @since 5.14.0
         */
        public function add_actions()
        {
        }
        /**
         * Register Assets.
         *
         * @since 5.14.0
         */
        public function add_assets()
        {
        }
        /**
         * Stores the instance of the template engine that we will use for rendering the elements.
         *
         * @since 5.14.0
         *
         * @var Tribe__Template
         */
        protected $template;
        /**
         * Gets the template instance used to setup the rendering html.
         *
         * @since 5.14.0
         *
         * @return Tribe__Template
         */
        public function get_template()
        {
        }
        /**
         * Returns html of the Filter Bar upsell banner.
         *
         * @since 5.14.0
         *
         * @param array   $context Context of template.
         * @param boolean $echo    Whether or not to output the HTML or just return it.
         *
         * @return Tribe__Template
         */
        public function get_upsell_html($context = [], $echo = false)
        {
        }
        /**
         * Create a Filter Bar upsell tab.
         *
         * @since 5.14.0
         * @since 5.15.0 Early bail if we're not on TEC settings.
         */
        public function add_tab($admin_page)
        {
        }
        /**
         * Checks whether we are on the correct admin page to enqueue admin.
         *
         * @since 5.14.0
         *
         * @return bool
         */
        public function should_enqueue_admin()
        {
        }
    }
}
namespace Tribe\Events\Admin\Notice {
    /**
     * Class Full_Site_Editor
     *
     * @since 5.12.4
     *
     */
    class Full_Site_Editor
    {
        /**
         * Register the notices related to Full Site Editor.
         *
         * @since 5.12.4
         */
        public function hook()
        {
        }
        /**
         * Whether the FSE Widgets notice should display.
         *
         * @since 5.12.4
         *
         * @return boolean
         */
        public function incompatibility_should_display()
        {
        }
        /**
         * HTML for the FSE Widgets compatibility.
         *
         * @see   https://evnt.is/wp5-7
         *
         * @since 5.12.4
         *
         * @return string
         */
        public function incompatibility_display()
        {
        }
    }
    /**
     */
    class Install_Event_Tickets
    {
        /**
         * Stores the plugin slug.
         *
         * @since 6.0.9
         *
         * @var string
         */
        protected static $plugin_slug = 'event-tickets';
        /**
         * Stores the assets group ID for the notice.
         *
         * @since 6.0.9
         *
         * @var string
         */
        protected static $assets_group = 'tribe-events-admin-notice-install-event-tickets';
        /**
         * Stores the instance of the notice template.
         *
         * @since 6.0.9
         *
         * @var Tribe__Template
         */
        protected $template;
        /**
         * Register update notices.
         *
         * @since 6.0.9
         */
        public function hook()
        {
        }
        /**
         * Register `Install` notice assets.
         *
         * @since 6.0.9
         *
         * @return void
         */
        public function assets()
        {
        }
        /**
         * Checks if `Event Tickets` is installed.
         *
         * @since 6.0.9
         *
         * @return boolean True if active
         */
        public function is_installed() : bool
        {
        }
        /**
         * Checks if `Event Tickets` is active.
         *
         * @since 6.0.9
         *
         * @return boolean True if active.
         */
        public function is_active() : bool
        {
        }
        /**
         * Check if we're on the classic "Install Plugin" page.
         *
         * @since 6.0.9
         *
         * @return boolean
         */
        public function is_install_plugin_page() : bool
        {
        }
        /**
         * Should the `Install` notice be displayed?
         *
         * @since 6.0.9
         *
         * @return bool True if the install notice should be displayed.
         */
        public function should_display_notice_install() : bool
        {
        }
        /**
         * Should the `Activate` notice be displayed?
         *
         * @since 6.0.9
         *
         * @return bool True if the activate notice should be displayed.
         */
        public function should_display_notice_activate() : bool
        {
        }
        /**
         * Install notice for `Event Tickets`.
         *
         * @since 6.0.9
         *
         * @return string $html The HTML for the notice.
         */
        public function notice_install() : string
        {
        }
        /**
         * Should enqueue assets required for the notice.
         *
         * @since 6.0.9
         *
         * @return bool True if the assets should be enqueued.
         */
        public function should_enqueue_assets() : bool
        {
        }
        /**
         * Activate notice for `Event Tickets`.
         *
         * @since 6.0.9
         *
         * @return string $html The HTML for the notice.
         */
        public function notice_activate() : string
        {
        }
        /**
         * Get template object.
         *
         * @since 6.0.9
         *
         * @return \Tribe__Template
         */
        public function get_template()
        {
        }
    }
    /**
     * Class Legacy_Views_Deprecation
     *
     * @since 5.5.0
     *
     */
    class Legacy_Views_Deprecation
    {
        /**
         * Register v1 deprecation notice.
         *
         * @since 5.5.0
         */
        public function hook()
        {
        }
        /**
         * Checks if we are using a debug constant.
         *
         * @since 5.5.0
         *
         * @return bool
         */
        public function is_debug()
        {
        }
        /**
         * Checks if we are in a page we need to display.
         *
         * @since 5.5.0
         *
         * @return bool
         */
        public function is_valid_screen()
        {
        }
        /**
         * Checks all methods required for display.
         *
         * @since 5.5.0
         *
         * @return bool
         */
        public function should_display()
        {
        }
        /**
         * Get the date in which we are meant to deprecate.
         *
         * @since 5.5.0
         *
         * @return Tribe\Utils\Date_I18n_Immutable
         */
        public function get_deprecation_date()
        {
        }
        /**
         * HTML for the notice for sites using V1.
         *
         * @since 5.5.0
         *
         * @return string
         */
        public function notice()
        {
        }
    }
    /**
     * Class Legacy_Views_Updated.
     *
     * @since   6.0.0
     *
     * @package Tribe\Events\Admin\Notice
     */
    class Legacy_Views_Updated
    {
        /**
         * Stores the instance of the notice template.
         *
         * @since 6.0.0
         *
         * @var \Tribe__Template
         */
        protected $template;
        /**
         * Register legacy views updated notice.
         *
         * @since 6.0.0
         */
        public function hook() : void
        {
        }
        /**
         * Checks if we are in a page we need to display.
         *
         * @since 6.0.0
         *
         * @return bool
         */
        public function is_valid_screen() : bool
        {
        }
        /**
         * Checks all methods required for display.
         *
         * @since 6.0.0
         *
         * @return bool
         */
        public function should_display($notice = null) : bool
        {
        }
        /**
         * Determines that we have a negative value stored, which means this installation was forced into V2.
         *
         * @since 6.0.0
         *
         * @return bool
         */
        protected function has_views_v2_negative_value() : bool
        {
        }
        /**
         * Get template object.
         *
         * @since 6.0.0
         *
         * @return \Tribe__Template
         */
        public function get_template()
        {
        }
        /**
         * HTML for the notice for sites using V1.
         *
         * @since 6.0.0
         *
         * @return string
         */
        public function notice() : string
        {
        }
    }
    /**
     * @internal This class may be removed or changed without notice
     */
    class Marketing
    {
        /**
         * Register marketing notices.
         *
         * @since 4.6.17
         * @since 5.1.5 - add Virtual Events Notice.
         */
        public function hook()
        {
        }
        /**
         * @since 4.6.17
         *
         * @return bool
         */
        public function should_display()
        {
        }
        /**
         * HTML for the notice for sites using UTC Timezones.
         *
         * @since 4.6.17
         *
         * @return string
         */
        public function notice()
        {
        }
    }
    /**
     * Shows an admin notice for Timezones
     * (When using UTC and on TEC Pages or WordPress > General Settings)
     */
    class Timezones
    {
        public function hook()
        {
        }
        /**
         * Fetches the date in which the Notice had it's reset
         *
         * @since  4.8.2
         *
         * @return string|null
         */
        public function get_current_reset_date()
        {
        }
        /**
         * Which dates this Notice gets reset
         *
         * @since  4.8.2
         *
         * @return array
         */
        public function get_reset_dates()
        {
        }
        /**
         * Checks if we are in an TEC page or over
         * the WordPress > Settings > General
         *
         * @since  4.6.17
         *
         * @return boolean
         */
        public function should_display()
        {
        }
        /**
         * Checks if the site is using UTC Timezone Options
         *
         * @since  4.6.17
         *
         * @return boolean
         */
        public function is_utc_timezone($event = 0)
        {
        }
        /**
         * HTML for the notice for sites using UTC Timezones.
         *
         * @since  4.6.17
         *
         * @return string
         */
        public function notice()
        {
        }
    }
    /**
     * @internal This class may be removed or changed without notice
     */
    class Update
    {
        /**
         * Stores the instance of the notice template.
         *
         * @since 6.0.0
         *
         * @var Tribe__Template
         */
        protected $template;
        /**
         * Register update notices.
         *
         * @since 6.0.0
         */
        public function register()
        {
        }
        /**
         * Should the notice be displayed?
         *
         * @since 6.0.0
         *
         * @return bool
         */
        public function should_display()
        {
        }
        /**
         * HTML for the notice for sites using UTC Timezones.
         *
         * @since 6.0.0
         *
         * @return string
         */
        public function notice()
        {
        }
        /**
         * Get template object.
         *
         * @since 6.0.0
         *
         * @return \Tribe__Template
         */
        public function get_template()
        {
        }
    }
}
namespace Tribe\Events\Admin {
    class Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Register implementations.
         *
         * @since 5.15.0
         */
        public function register()
        {
        }
        /**
         * Add hooks.
         *
         * @since 5.15.0
         */
        public function add_hooks()
        {
        }
    }
    class Settings
    {
        /**
         * The Events Calendar settings page slug.
         *
         * @var string
         */
        public static $settings_page_id = 'tec-events-settings';
        /**
         * Settings tabs
         */
        public $tabs = [];
        /**
         * Returns the main admin settings URL.
         *
         * @param array $args Arguments to pass to the URL.
         *
         * @return string The URL to the admin settings page.
         */
        public function get_url(array $args = [])
        {
        }
        /**
         * Adds The Events Calendar settings page to the pages configuration.
         *
         * @since 5.15.0
         *
         * @param array $pages An array containing the slug of the pages with tabs.
         *
         * @return array $pages The modified array containing the pages with tabs.
         */
        public function add_to_pages_with_tabs($pages)
        {
        }
        /**
         * Filter The Events CAlendar Settings page title
         *
         * @param string $title The title of the settings page.
         *
         * @return string The modified title of the settings page.
         */
        public function settings_page_title($title)
        {
        }
        /**
         * Defines wether the current page is The Events Calendar Settings page.
         *
         * @since 5.15.0
         *
         * @return boolean Whether the current page is The Events Calendar Settings page.
         */
        public function is_tec_events_settings()
        {
        }
        /**
         * Get the icon for The Events Calendar menu item.
         *
         * @since 5.15.0
         *
         * @return string
         */
        public function get_menu_icon()
        {
        }
        /**
         * Get the slug for The Events Calendar page/menu item.
         *
         * @since 5.15.0
         *
         * @return string $menu_slug The slug for the The Events Calendar page/menu item.
         */
        public function get_tec_events_menu_slug()
        {
        }
        /**
         * Adds the menu and pages for The Events Calendar.
         *
         * @since 5.15.0
         */
        public function add_admin_pages()
        {
        }
        /**
         * Maybe add network settings page for The Events Calendar.
         *
         * @since 5.15.0
         */
        public function maybe_add_network_settings_page()
        {
        }
        /**
         * Maybe add troubleshooting page for The Events Calendar
         *
         * @since 5.15.0
         */
        public function maybe_add_troubleshooting()
        {
        }
        /**
         * Maybe add troubleshooting page for The Events Calendar
         *
         * @since 5.15.0
         */
        public function maybe_add_app_shop()
        {
        }
        /**
         * Filters the settings tab URL.
         *
         * @since 5.15.0
         *
         * @param string $url The URL of the settings tab.
         * @param string $page The slug of the page.
         * @param string $tab The slug of the settings tab.
         *
         * @return string $url The modified URL of the tab.
         */
        public function filter_settings_tab_url($url, $page, $tab)
        {
        }
        /**
         * Filters the settings page URL.
         *
         * @since 5.15.0
         *
         * @param string $url The URL of the settings page.
         * @param string $page The slug of the page.
         * @param string $tab The slug of the settings tab.
         *
         * @return string $url The modified URL of the settings.
         */
        public function filter_settings_page_url($url, $page, $tab)
        {
        }
        /**
         * Maybe register the events menu.
         *
         * @return void
         */
        public function maybe_register_events_menu()
        {
        }
        /**
         * Do the basic main settings page.
         *
         * @since 5.15.0
         *
         * @param string $admin_page The slug of the admin page.
         */
        public function settings_ui($admin_page)
        {
        }
        /**
         * Sort the tabs, forcing some to the front and some to the end.
         *
         * @since 6.0.5
         * @since 6.2.1 Correctly prepend 'general' and 'display' tabs to the beginning.
         *
         * @param array $tabs        The array of tabs.
         * @param string $admin_page The ID of the admin page we are on.
         *
         * @todo deprecate this when we can get the tab priority working correctly, globally.
         *
         * @return array             The sorted array of tabs.
         */
        public function sort_tabs($tabs, $admin_page) : array
        {
        }
        /**
         * Generate network settings page for The Events Calendar.
         *
         * @since 5.15.0
         *
         * @param string $admin_page The slug of the admin page.
         */
        public function do_network_settings_tab($admin_page) : void
        {
        }
        /**
         * Add The Events Calendar admin footer text.
         *
         * @since 5.15.0
         *
         * @param string $footer_text The admin footer text.
         * @return string $footer_text The admin footer text, maybe modified.
         */
        public function admin_footer_text_settings($footer_text)
        {
        }
        /**
         * Get Events settings tab IDs.
         *
         * @since 5.15.0
         *
         * @return array $tabs Array of tabs IDs for the Events settings page.
         */
        public function get_events_settings_tabs_ids() : array
        {
        }
        /**
         * Maybe hijack the saving for the network settings page, when not in TEC network settings.
         * The purpose is to merge the settings between plugins.
         *
         * @since 5.15.0
         *
         * @param array  $options Formatted the same as from get_options().
         * @param string $admin_page The admin page being saved.
         *
         * @return array $options Formatted the same as from get_options(), maybe modified.
         */
        public function maybe_hijack_save_network_settings($options, $admin_page) : array
        {
        }
        /**
         * Filter the event type args to add the menu icon.
         *
         * @since 5.15.0
         *
         * @param array $args The default arguments for the event type.
         */
        public function filter_event_type_args($args) : array
        {
        }
        /**
         * Adds disabled ECP views to the views list as a "teaser".
         *
         * @since 6.0.5
         *
         * @param string $output The HTML output for the Views checkboxes.
         *
         * @return string        The modified HTML output.
         */
        public function tease_premium_views($output) : string
        {
        }
        /**
         * Initialize the addons api settings tab.
         *
         * @since 5.15.0 Added check to see if we are on TEC settings page.
         * @since 6.0.5  Moved to Settings class.
         */
        public function do_addons_api_settings_tab($admin_page) : void
        {
        }
        /**
         * should we show the upgrade nags?
         *
         * @since 4.9.12
         * @since 6.0.5	 Moved to Settings class.
         *
         * @return boolean
         */
        public function show_upgrade() : bool
        {
        }
        /**
         * Create the upgrade tab
         *
         * @since 4.9.12
         * @since 5.15.0 Added check to see if we are on TEC settings page.
         * @since 6.0.5  Moved to Settings class.
         */
        public function do_upgrade_tab($admin_page) : void
        {
        }
        /**
         * When TEC is activated, the Events top level menu item in the dashboard needs the post_type appended to it
         *
         * @since 4.3.5
         * @since 6.0.5 Moved to Settings class.
         *
         * @param string $url Settings URL to filter
         *
         * @return string
         */
        public function filter_url($url) : string
        {
        }
    }
}
namespace {
    /**
     * Manages the admin settings UI in relation to timezones.
     */
    class Tribe__Events__Admin__Timezone_Settings
    {
        /**
         * Sets up the display of timezone-related settings and listeners to deal with timezone-update
         * requests (which are initiated from within the settings screen).
         */
        public function __construct()
        {
        }
        /**
         * Adds timezone settings to the *Display* settings tab.
         *
         * When it is determined that timezone data still needs to be generated for one or more
         * events then only the update tool will be exposed in this area, in all other cases this
         * is not exposed and the ordinary timezone settings will be visible.
         *
         * @param array $display_settings
         *
         * @return array
         */
        public function settings_ui(array $display_settings)
        {
        }
        /**
         * Loads the timezone settings from an admin-view file and returns them as an array.
         *
         * @return array
         */
        protected function get_settings_array()
        {
        }
        /**
         * Accommodates timezone update requests.
         *
         * Usually, the result is that an initial batch of events will be updated and any
         * remaining events will be dealt with by an "ajax loop" - however in the event
         * of a JS conflict this could actually be called repeatedly (by the user simply
         * clicking the "Update Timezone Data" button until it is cleared.
         */
        protected function listen()
        {
        }
        /**
         * Facilitates updates of timezone data via an ajax loop.
         *
         * This approach helps to avoid potential timeout issues on sites with poor performance
         * or large numbers of events, besides facilitating visual feedback as to progress.
         */
        public function ajax_updater()
        {
        }
    }
    /**
     * Tool for adding timezone data to events.
     *
     * The application for this is in transitioning any event data created in 3.11.x or
     * earlier that hasn't since been updated, so that it becomes "timezone ready".
     */
    class Tribe__Events__Admin__Timezone_Updater
    {
        /**
         * A count of events in need of updating - used to determine the percentage
         * of the task that has been completed.
         *
         * @var int
         */
        protected $initial_count = 0;
        /**
         * Initializes the update process.
         *
         * Determines if events are still in need of an update and triggers an update of an
         * initial batch of events if so.
         *
         * Once these are processed, notices are set to communicate the state of the update
         * back to the user (which also serves as a vehicle for continuing the update via
         * an ajax loop).
         */
        public function init_update()
        {
        }
        /**
         * Setup an admin-notice based progress report along with supporting assets to facilitate
         * an ajax loop for further processing where needed.
         */
        protected function notice_setup()
        {
        }
        /**
         * Renders the admin notice.
         *
         * This effectively just wraps notice_inner() - which is independently called to build
         * ajax responses.
         */
        public function notice_display()
        {
        }
        /**
         * Provides a progress report relating to the status of the timezone data update process.
         *
         * @return string
         */
        public function notice_inner()
        {
        }
        /**
         * Sets up the Javascript needed to facilitate the ajax loop on the frontend.
         */
        public function notice_assets()
        {
        }
        /**
         * Returns an integer representing the degree to which the update task has progressed
         * as a percentage of events in need of updating.
         *
         * @param  int $remaining
         *
         * @return int
         */
        protected function calculate_progress($remaining)
        {
        }
        /**
         * Updates the next batch of non-timezone ready events.
         *
         * @param int $batch_size (defaults to -1 meaning "update all")
         */
        public function process($batch_size = -1)
        {
        }
        /**
         * Return an array of event IDs for those events that still do not have
         * timezone data.
         *
         * @param  int $limit
         *
         * @return array
         */
        public function get_ids($limit = -1)
        {
        }
        /**
         * Get the number of events that still require timezone data.
         *
         * @return int
         */
        public function count_ids()
        {
        }
        /**
         * Indicates if there are still events that need to be updated
         * with timezone data.
         *
         * @return bool
         */
        public function update_needed()
        {
        }
        /**
         * Utility function that can return either an array of IDs for all (or the specified
         * number) of events without timezone data, or alternatively can return a count of
         * those events.
         *
         * @param  int        $limit
         * @param  bool|false $count
         *
         * @return array|int
         */
        protected function find($limit = -1, $count = \false)
        {
        }
    }
    class Tribe__Events__Admin_List
    {
        protected static $start_col_active = \true;
        protected static $end_col_active = \true;
        protected static $start_col_first = \true;
        /**
         * The init function for this class, adds actions and filters.
         *
         */
        public static function init()
        {
        }
        /**
         * Fields filter for standard wordpress templates.  Adds the start and end date to queries in the
         * events category
         *
         * @param string   $fields The current fields query part.
         * @param WP_Query $query
         *
         * @return string The modified form.
         */
        public static function events_search_fields($fields, $query)
        {
        }
        /**
         * Sets whether sorting will be ascending or descending based on input
         *
         * @param   WP_Query    $wp_query   Query for a library post type
         *
         * @return  string                  ASC/DESC prefixed with a single space
         */
        public static function get_sort_direction(\WP_Query $wp_query)
        {
        }
        /**
         * Defines custom logic for sorting events table by start/end date. No matter how user selects
         * what should be is sorted, always include date sorting in some fashion
         *
         * @param   Array       $clauses    SQL clauses for fetching posts
         * @param   WP_Query    $wp_query   A paginated query for items
         *
         * @return  Array                   Modified SQL clauses
         */
        public static function sort_by_event_date(array $clauses, \WP_Query $wp_query)
        {
        }
        /**
         * Defines custom logic for filtering events table by aggregator record.
         *
         * @param array<string> $clauses    SQL clauses for fetching posts.
         * @param WP_Query      $wp_query   A paginated query for items.
         *
         * @return array<string>            Modified SQL clauses.
         */
        public static function filter_by_aggregator_record(array $clauses, \WP_Query $wp_query)
        {
        }
        /**
         * Defines custom logic for sorting events table by category or tags
         *
         * @param   Array       $clauses    SQL clauses for fetching posts
         * @param   WP_Query    $wp_query   A paginated query for items
         *
         * @return  Array                   Modified SQL clauses
         */
        public static function sort_by_tax(array $clauses, \WP_Query $wp_query)
        {
        }
        /**
         * limit filter for admin queries
         *
         * @param          string limits clause
         * @param WP_Query $query
         *
         * @return string modified limits clause
         */
        public static function events_search_limits($limits, $query)
        {
        }
        /**
         * Add the proper column headers.
         *
         * @param array $columns The columns.
         *
         * @return array The modified column headers.
         */
        public static function column_headers($columns)
        {
        }
        /**
         * This will only be fired if Advanced Post Manger is active
         * Helps ensure dates show correctly if only one or the other of
         * start & end date columns is showing
         */
        public static function column_headers_check($columns)
        {
        }
        /**
         * Allows events to be sorted by start date/end date/category/tags
         *
         * @param array $columns The columns array.
         *
         * @return array The modified columns array.
         */
        public static function register_sortable_columns($columns)
        {
        }
        /**
         * Add the custom columns.
         *
         * @param string $column_id The custom column id.
         * @param int    $post_id   The post id for the data.
         *
         */
        public static function custom_columns($column_id, $post_id)
        {
        }
        /**
         * Update event counts.
         *
         * @param array $counts The counts array.
         *
         * @return array The modified counts array.
         */
        public static function update_event_counts($counts)
        {
        }
    }
    class Tribe__Events__Aggregator
    {
        /**
         * Cache key used to storage the services list returned by the call to:
         * - Tribe__Events__Aggregator__Service::instance()->get_origins();
         *
         * @since 4.6.12
         */
        public $KEY_CACHE_SERVICES = 'tribe_aggregator_services_list';
        /**
         * @var Tribe__Events__Aggregator__Meta_Box Event Aggregator Meta Box object
         */
        public $meta_box;
        /**
         * @var Tribe__Events__Aggregator__Page Event Aggregator page root object
         */
        public $page;
        /**
         * @var Tribe__Events__Aggregator__Service Event Aggregator service object
         */
        public $service;
        /**
         * @var Tribe__Events__Aggregator__Record__Queue_Processor Event Aggregator record queue processor
         */
        public $queue_processor;
        /**
         * @var Tribe__Events__Aggregator__Record__Queue_Realtime Event Aggregator record queue processor in realtime
         */
        public $queue_realtime;
        /**
         * @var Tribe__Events__Aggregator__Settings Event Aggregator settings object
         */
        public $settings;
        /**
         * @var Tribe__PUE__Checker PUE Checker object
         */
        public $pue_checker;
        /**
         * @var array Collection of API objects
         */
        protected $api;
        /**
         * @var Tribe__Events__Aggregator__Migrate Event Aggregator migration object.
         */
        public $migrate;
        /**
         * @var Tribe__Events__Aggregator__Records Event Aggregator records object.
         */
        public $records;
        /**
         * @var Tribe__Events__Aggregator__Cron Event Aggregator cron object.
         */
        public $cron;
        /**
         * @var Tribe__Events__Aggregator__Errors Event Aggregator errors object.
         */
        public $errors;
        /**
         * Static Singleton Factory Method
         *
         * @return Tribe__Events__Aggregator
         */
        public static function instance()
        {
        }
        /**
         * Add Event Aggregator System Status to the Help page
         */
        public function add_status_to_help()
        {
        }
        /**
         * Set up any necessary notices
         */
        public function setup_notices()
        {
        }
        /**
         * Initializes and provides the API objects
         *
         * @param string $api Which API to provide
         *
         * @return Tribe__Events__Aggregator__API__Abstract|stdClass|null
         */
        public function api($api = \null)
        {
        }
        /**
         * Creates the Required Endpoint for the Aggregator Service to Query
         *
         * @param array $query_vars
         *
         * @return void
         */
        public function action_endpoint_configuration($rewrite)
        {
        }
        /**
         * Adds the required Query Vars for the Aggregator Endpoint to work
         *
         * @param array $query_vars
         *
         * @return array
         */
        public function filter_endpoint_query_vars($query_vars = [])
        {
        }
        /**
         * Allows the API to call the website
         *
         * @param  WP    $wp
         *
         * @return void
         */
        public function action_endpoint_parse_request($wp)
        {
        }
        /**
         * Handles the filtering of the PUE "plugin name" for event aggregator which...isn't a plugin
         *
         * @param string $plugin_name Plugin name to filter
         * @param string $plugin_slug Plugin slug
         *
         * @return string
         */
        public function filter_pue_plugin_name($plugin_name, $plugin_slug)
        {
        }
        /**
         * Filters the list of post types for Event Tickets to remove Import Records
         *
         * @param array $post_types Post Types
         *
         * @return array
         */
        public function filter_remove_record_post_type($post_types)
        {
        }
        /**
         * Purges the aggregator transients that are tied to the event-aggregator license
         *
         * @param string $option Option key
         *
         * @return boolean
         */
        public function action_purge_transients($option)
        {
        }
        /**
         * Verify if Aggregator was fully loaded and is active
         *
         * @param  boolean $service  Should compare if the service is also active
         *
         * @return boolean
         */
        public function is_active($service = \false)
        {
        }
        /**
         * Verifies if the service is active
         *
         * @return boolean
         */
        public static function is_service_active()
        {
        }
        /**
         * Verifies if user has a license key
         *
         * @return boolean
         *
         * @since 4.6.19
         */
        public function has_license_key()
        {
        }
        /**
         * Returns the daily import limit
         *
         * @return int
         */
        public function get_daily_limit()
        {
        }
        /**
         * Returns the available daily limit of import requests
         *
         * @return int
         */
        public function get_daily_limit_available()
        {
        }
        /**
         * Reduces the daily limit by the provided amount
         *
         * @param int $amount Amount to reduce the daily limit by
         *
         * @return bool
         */
        public function reduce_daily_limit($amount = 1)
        {
        }
        /**
         * Tells whether the legacy ical plugin is active
         *
         * @return boolean
         */
        public function is_legacy_ical_active()
        {
        }
        /**
         * Tells whether the legacy facebook plugin is active
         *
         * @return boolean
         */
        public function is_legacy_facebook_active()
        {
        }
        /**
         * Loads and initializes Events Aggregator.
         *
         * Will set the `is_loaded` flag property if successfully loaded.
         *
         * @return bool Whether Events Aggregator successfully loaded or not.
         */
        public function load()
        {
        }
        /**
         * Adds support for CSV's multiple mime types
         *
         * WordPress mime support requires a one to one mapping of an extension to a type, but CSV can come in multiple types
         *
         * @param  array $mimes supported mime types
         * @return array        mime types with expanded support
         */
        public function add_csv_mimes($info, $file, $filename, $mimes)
        {
        }
        /**
         * Adds the Items for Aggregator on the Admin bar
         *
         * @since   4.5.12
         *
         * @return  void
         */
        public function add_admin_bar_items()
        {
        }
        /**
         * Hooks all the filters and actions needed for Events Aggregator to work.
         *
         * No action or filter will be loaded if Events Aggregator has not loaded first.
         *
         * @return bool `true` if the hooks and filters were added, `false` otherwise.
         */
        public function hook()
        {
        }
        /**
         * Function used to remove cache stored in transients.
         *
         * @since 4.6.12
         *
         * @return boolean
         */
        public function clear_services_list_cache()
        {
        }
        public function notice_facebook_oauth_feedback()
        {
        }
        public function notice_facebook_token_expired()
        {
        }
    }
    abstract class Tribe__Events__Aggregator__API__Abstract
    {
        /**
         * @var Tribe__Events__Aggregator__Service
         */
        public $service;
        public $cache_group = 'tribe_aggregator';
        public function __construct()
        {
        }
    }
    class Tribe__Events__Aggregator__API__Image extends \Tribe__Events__Aggregator__API__Abstract
    {
        /**
         * Fetches an image from the service and saves it to the filesystem if needed
         *
         * @param  string                                      $image_id  EA Image ID
         * @param  Tribe__Events__Aggregator__Record__Abstract $record    Record Object
         *
         * @return WP_Error|stdClass {
         *     @type int        $post_id      Attachment ID on WP
         *     @type string     $filename     Name of the image file
         *     @type string     $path         Absolute path of the image
         *     @type string     $extension    Extension of the image
         * }
         *
         */
        public function get($image_id, $record = \false)
        {
        }
    }
    class Tribe__Events__Aggregator__API__Import extends \Tribe__Events__Aggregator__API__Abstract
    {
        public $event_field_map = ['title' => 'post_title', 'description' => 'post_content', 'start_date' => 'EventStartDate', 'start_hour' => 'EventStartHour', 'start_minute' => 'EventStartMinute', 'start_meridian' => 'EventStartMeridian', 'end_date' => 'EventEndDate', 'end_hour' => 'EventEndHour', 'end_minute' => 'EventEndMinute', 'end_meridian' => 'EventEndMeridian', 'url' => 'EventURL', 'parent_id' => 'parent_id', 'uid' => 'uid', 'dev_start' => 'dev_start', 'dev_end' => 'dev_end', 'all_day' => 'EventAllDay', 'timezone' => 'EventTimezone', 'recurrence' => 'recurrence', 'categories' => 'categories', 'currency_symbol' => 'EventCurrencySymbol', 'currency_position' => 'EventCurrencyPosition', 'cost' => 'EventCost'];
        public $organizer_field_map = ['organizer' => 'Organizer', 'phone' => 'Phone', 'website' => 'Website', 'email' => 'Email'];
        public $venue_field_map = ['venue' => 'Venue', 'address' => 'Address', 'city' => 'City', 'stateprovince' => 'StateProvince', 'country' => 'Country', 'zip' => 'Zip', 'phone' => 'Phone', 'overwrite_coordinates' => 'OverwriteCoords', 'latitude' => 'Lat', 'longitude' => 'Lng'];
        public function __construct()
        {
        }
        /**
         * Gets the status (and possibly the results) of an import
         *
         * @param string $import_id Event Aggregator import id
         *
         * @return stdClass|WP_Error A class containing the service response or a WP_Error if the service could not be reached.
         */
        public function get($import_id, $data = [])
        {
        }
        /**
         * Creates an import
         *
         * @param array $args Array of arguments for event creation
         *
         * @return stdClass|WP_Error
         */
        public function create($args)
        {
        }
        /**
         * Update the details of an existing import into EA server.
         *
         * @since 5.1.5
         *
         * @param $import_id string The ID of the import to be updated.
         * @param $args      array An key, value array representing the values to update on the EA server.
         *
         * @return object|stdClass|string|WP_Error Response from EA server.
         */
        public function update($import_id, $args)
        {
        }
        /**
         * Translates event JSON to the-events-calendar Event array format
         *
         * @param object $json Event data in Event Aggregator format
         *
         * @return array
         */
        public function translate_json_to_event($json)
        {
        }
    }
    class Tribe__Events__Aggregator__API__Origins extends \Tribe__Events__Aggregator__API__Abstract
    {
        /**
         * @since 4.9.6
         */
        const VERSION = '1.1.0';
        /**
         * @var array
         */
        public $origins;
        /**
         * @var bool Whether EA is enabled or not.
         *           While EA might be ready to work on a license and functional level
         *           the user might disable it; this flag tracks that choice.
         */
        protected $is_ea_disabled = \true;
        /**
         * @var array An array of origins that will still be available when EA has
         *            been disabled by the user.
         */
        protected $available_when_disabled = ['csv'];
        public function __construct()
        {
        }
        /**
         * Get event-aggregator origins
         *
         * @return array
         */
        public function get()
        {
        }
        /**
         * Returns whether oauth for a given origin is enabled.
         *
         * The OAuth status for the origin is enabled on EA Service side.
         *
         * @param string $origin The origin to check the OAuth status for.
         *
         * @return boolean Whether OAuth is enabled for the origin or not.
         */
        public function is_oauth_enabled($origin)
        {
        }
        /**
         * Get origin limit values for an operation.
         *
         * @param string $type Type of operation limit to retrieve; defaults to `import`.
         *
         * @return int The numeric limit (how many times) applied to the operation.
         */
        public function get_limit($type = 'import')
        {
        }
        public function get_name($id)
        {
        }
        /**
         * Whether an origin is available or not in respect to the user possibility
         * to disable EA functions.
         *
         * @param stdClass|string $origin The origin to check for availability as an object
         *                                or a slug.
         *
         * @return bool
         */
        public function is_origin_available($origin)
        {
        }
        /**
         * Gets the data for an internal Origins data key.
         *
         * The result might be cached from a previous request.
         *
         * @since 4.9.6
         *
         * @param string|null $key The key to fetch the data for.
         *
         * @return mixed|object|bool The data associated with the key if any and available, `false` otherwise.
         */
        public function get_data($key)
        {
        }
    }
    /**
     * Class Tribe__Events__Aggregator__API__Requests
     *
     * Encapsulates the WordPress HTTP API.
     */
    class Tribe__Events__Aggregator__API__Requests
    {
        /**
         * Builds and returns the custom headers needed to identify the site in the service.
         *
         * @since 4.6.2
         *
         * @return array
         */
        public function get_site_headers()
        {
        }
        /**
         * Retrieve the raw response from the HTTP request using the GET method.
         *
         * @param string $url  Site URL to retrieve.
         * @param array  $args Optional. Request arguments. Default empty array.
         *
         * @return array|WP_Error
         */
        public function get($url, $args = [])
        {
        }
        /**
         * Retrieve the raw response from the HTTP request using the POST method.
         *
         * @since 4.6.2
         *
         * @param string $url  Site URL to retrieve.
         * @param array  $args Optional. Request arguments. Default empty array.
         *
         * @return array|WP_Error
         */
        public function post($url, $args = [])
        {
        }
    }
    /**
     * Class to initialize and add the required items in
     *
     * @since  4.5.12
     */
    class Tribe__Events__Aggregator__Admin_Bar
    {
        /**
         * Instance of this Class
         *
         * @since  4.5.12
         *
         * @var Tribe__Events__Admin__Bar__Admin_Bar
         */
        protected static $instance;
        /**
         * Plugin Constants
         *
         * @since  4.5.12
         *
         * @var Tribe__Events__Constants
         */
        protected $constants;
        /**
         * Singleton constructor for the class.
         *
         * @since  4.5.12
         *
         * @return Tribe__Events__Aggregator__Admin_Bar
         */
        public static function instance()
        {
        }
        /**
         * Tribe__Events__Aggregator__Admin_Bar constructor.
         *
         * @since  4.5.12
         *
         * @param  Tribe__Events__Constants  $constants A constants access proxy.
         */
        public function __construct(\Tribe__Events__Constants $constants = \null)
        {
        }
        /**
         * Whether the Tribe Admin Bar is enabled or not.
         *
         * @since  4.5.12
         *
         * @return bool `false` if the `TRIBE_DISABLE_TOOLBAR_ITEMS` constant is `true` or the current screen is the network
         *              admin one, `true` otherwise.
         */
        public function is_enabled()
        {
        }
        /**
         * Adds menus, groups and nodes to the admin bar according the configuration.
         *
         * @since  4.5.12
         *
         * @param WP_Admin_Bar|null $wp_admin_bar
         */
        public function init(\WP_Admin_Bar $wp_admin_bar = \null)
        {
        }
        /**
         * Facebook is no longer supported in EA, so ensure that it doesn't show up in the list of available
         * services.
         *
         * @since 4.6.24
         *
         * @param array $service_response The array of EA import origins.
         * @return array The array of EA import origins with Facebook removed.
         */
        protected function remove_facebook_from_service_response($service_response)
        {
        }
    }
    class Tribe__Events__Aggregator__CLI__Command
    {
        /**
         * @var int The polling interval timeout in seconds.
         */
        protected $polling_timeout = 30;
        /**
         * @var int The polling interval in seconds.
         */
        protected $polling_interval = 2;
        /**
         * Run an import of the specified type from a specified source.
         *
         * The command will use the API and licenses set for the site if required.
         *
         * <origin>
         * : the import origin type
         * ---
         * options:
         *   - ical
         *   - gcal
         *   - csv
         *   - ics
         *   - facebook
         *   - meetup
         *   - url
         * ---
         *
         * <source>
         * : The source to import events from; a URL or a file path for .ics and CSV files.
         *
         * [--keywords=<keywords>]
         * : Optionally filter events by these keywords.
         *
         * [--location=<location>]
         * : Filter events by this location, not supported by all origin types.
         *
         * [--radius=<radius>]
         * : Only fetch events in this mile radius around the location.
         * Will be ignored if the `--location` parameter is not set.
         *
         * [--start=<start>]
         * : Only fetch events starting after this date.
         * This should be a valid date string or a value supported by the `strtotime` PHP function.
         * Not supported by all origin types.
         *
         * [--end=<end>]
         * : Only fetch events starting before this date.
         * This should be a valid date string or a value supported by the `strtotime` PHP function.
         * When using natural language expressions keep in mind that those apply from the current time, not start.
         * Not supported by all origin types.
         * Defaults the range set in the import settings for this origin type.
         *
         * [--limit_type=<limit_type>]
         * : The type of limit that should be used to limit the number of fetched events.
         * ---
         * options:
         *   - count
         *   - range
         *   - no_limit
         * ---
         *
         * [--limit=<limit>]
         * : The value of the limit that should be applied; ignored if `--limit_type` is not set or set to `no_limit`.
         * Either a value in seconds if the `--limit_type` is range or a number if `--limit_type` is set to `count`.
         * When importing CSV files this limit will NOT apply.
         *
         * [--timeout=<timeout>]
         * : How long should the command wait for the data from EA Service in seconds
         * ---
         * default: 30
         * ---
         *
         * [--post_status=<post_status>]
         * : The post status that should be assigned to the imported events; default to the one set in Import options.
         * ---
         * options:
         *   - publish
         *   - draft
         *   - pending
         *   - private
         * ---
         *
         * [--category=<category>]
         * : An optional category that should be assigned to the imported events.
         *
         * [--content_type=<content_type>]
         * : The type of import for CSV files.
         * The column mapping must be defined with the `--column_map` parameter.
         * ---
         * default: events
         * options:
         *   - events
         *   - venues
         *   - organizers
         * ---
         *
         * [--column_map=<column_map>]
         * : the column mapping that should be used for CSV imports; required when running CSV imports. A comma separated
         * list where the order counts.
         * For events the available columns are: name, description, excerpt, start_date, start_time, end_date, end_time,
         * timezone, all_day, hide, sticky, venue_name, organizer_name, show_map_link, show_map, cost, currency_symbol,
         * currency_position, category, tags, website, comment_status, ping_status, featured_image, feature_event
         * For venues the available columns are: name, description, country, address, address2, city, state, zip, phone,
         * url, featured_image
         * For organizers the available columns are: name, description, email, website, phone, featured_image
         *
         * [--format=<format>]
         * : The results output format
         * ---
         *
         * ## Examples
         *
         *      wp event-aggregator import-from ical https://some-ical-source/feed.ics
         *      wp event-aggregator import-from ical https://some-ical-source/feed.ics --start=tomorrow --end="+3 weeks"
         *      wp event-aggregator import-from ical https://some-ical-source/feed.ics --limit_type=count --limit=20
         *      wp event-aggregator import-from ical https://some-ical-source/feed.ics --location="Toronto" --radius=50
         *      wp event-aggregator import-from ical https://some-ical-source/feed.ics --keywords=Party
         *      wp event-aggregator import-from meetup https://www.meetup.com/wordpress-ile-de-france/
         *      wp event-aggregator import-from gcal https://calendar.google.com/calendar/ical/me/public/basic.ics
         *      wp event-aggregator import-from csv /Users/moi/events.csv --content_type=events --column_map=name,description,start_date,start_time,end_date,end_time
         *      wp event-aggregator import-from ics /Users/moi/events.ics
         *
         *
         * @since      4.6.15
         *
         * @subcommand import-from
         *
         * @when       after_wp_load
         */
        public function import_from_source(array $args, array $assoc_args = [])
        {
        }
        /**
         * Check the timeout parameter if set.
         *
         * @since 4.6.15
         */
        protected function ensure_timeout(array $assoc_args)
        {
        }
        /**
         * Creates a new record.
         *
         * @since 4.6.15
         *
         * @param array $assoc_args
         * @param string $origin
         * @param string $source
         *
         * @return Tribe__Events__Aggregator__Record__Abstract
         */
        protected function create_record_from(array $assoc_args, $origin, $source)
        {
        }
        /**
         * Fetches the data from the Service and processes it.
         *
         * @since 4.6.15
         *
         * @param array $assoc_args
         * @param Tribe__Events__Aggregator__Record__Abstract $record
         * @param bool $is_csv
         *
         * @return array
         */
        protected function fetch_and_process(array $assoc_args, $record, $is_csv)
        {
        }
        /**
         * Imports a CSV file.
         *
         * The logic to handle and import CSV files is different, primarily in it not relying on the Service, from
         * other imports. Mind that CSV source files should have their columns in exactly the same order and named
         * exactly as those found in the UI.
         *
         * @since 4.6.15
         *
         * @param Tribe__Events__Aggregator__Record__CSV $record
         * @param array $record_meta
         * @param string|array $column_map The column map that should be used for the import, either a comma-separated list
         *                                 or an array.
         *
         * @return Tribe__Events__Aggregator__Record__Activity
         */
        protected function import_csv_file($queue_result, $record, $column_map)
        {
        }
        /**
         * Imports the data for a record from the Service.
         *
         * This is a full end-to-end handling of the request; the method will queue the import on the Service,
         * fetch the data from it and import the returned data (if any).
         *
         * @param array $assoc_args
         * @param object|WP_Error $queue_result The result of the queue operation on the Service
         * @param Tribe__Events__Aggregator__Record__Abstract $record
         *
         * @return Tribe__Events__Aggregator__Record__Activity
         */
        protected function import_from_service($queue_result, $record)
        {
        }
        /**
         * Run a schuduled import.
         *
         * The command will use the API and licenses set for the site if required.
         *
         * <import_id>
         * : the import ID, i.e. the import post ID in the site database
         *
         * [--timeout=<timeout>]
         * : How long should the command wait for the data from EA Service in seconds
         * ---
         * default: 30
         * ---
         *
         * [--format=<format>]
         * : The results output format
         * ---
         *
         * ## Examples
         *
         *      wp event-aggregator run-import 2389
         *      wp event-aggregator run-import 2389 --timeout=180
         *
         * @since      4.6.15
         *
         * @subcommand run-import
         *
         * @when       after_wp_load
         */
        public function run_import(array $args, array $assoc_args = [])
        {
        }
        /**
         * Checks the associative arguments to make sure the column map is provided for CSV imports.
         *
         * @since 4.6.15
         *
         * @param array $assoc_args
         */
        protected function ensure_column_map(array $assoc_args = [])
        {
        }
    }
    class Tribe__Events__Aggregator__CLI__Service_Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         */
        public function register()
        {
        }
    }
    class Tribe__Events__Aggregator__Cron
    {
        /**
         * Action where the cron will run, on schedule
         * @var string
         */
        public static $action = 'tribe_aggregator_cron';
        /**
         * Action where the cron will run, if enqueued manually
         * @var string
         */
        public static $single_action = 'tribe_aggregator_single_cron';
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        /**
         * Frequencies in which a Scheduled import can Happen
         *
         * @param  array  $search  Search on existing schedules with `array_intersect_assoc`
         *
         * @return array|stdClass
         */
        public function get_frequency($search = [])
        {
        }
        /**
         * Register the base frequency on WP cron system
         *
         * @return void
         */
        public function action_register_cron()
        {
        }
        /**
         * Adds the Frequency to WP cron schedules
         * Instead of having cron be scheduled to specific times, we will check every 30 minutes
         * to make sure we can insert without having to expire cache.
         *
         * @param array $schedules Current list of schedules.
         *
         * @return array            Modified list of schedules.
         */
        public function filter_add_cron_schedules($schedules = [])
        {
        }
        /**
         * Allows us to Prevent too many of our Requests to be fired at on single Cron Job
         *
         * @param  boolean  $run     Shouldn't trigger the call
         * @param  array    $request The Request that was made
         * @param  string   $url     To which URL
         *
         * @return boolean|array|object
         */
        public function filter_check_http_limit($run = \false, $request = \null, $url = \null)
        {
        }
        /**
         * A Wrapper method to run the Cron Tasks here
         *
         * @return void
         */
        public function run()
        {
        }
        /**
         * Checks if any Child Record needs to be created, this will run on the Cron every 15m
         *
         * @since  4.3
         * @return void
         */
        public function verify_child_record_creation()
        {
        }
        /**
         * Start the processing of the scheduled imports created with batch pushing the cron job would select and start
         * the beginning of the batch delivery.
         *
         * @since 5.3.0
         */
        public function start_batch_pushing_records()
        {
        }
        /**
         * Checks if any record data needs to be fetched from the service, this will run on the Cron every 15m
         *
         * @since  4.3
         * @return void
         */
        public function verify_fetching_from_service()
        {
        }
        /**
         * @since  4.3.2
         * @return void
         */
        public function purge_expired_records()
        {
        }
        /**
         * Tries to fetch the data for the scheduled import and immediately process it.
         *
         * @since 4.6.16
         *
         * @param Tribe__Events__Aggregator__Record__Abstract $record
         */
        protected function maybe_process_immediately(\Tribe__Events__Aggregator__Record__Abstract $record)
        {
        }
    }
    class Tribe__Events__Aggregator__Errors
    {
        /**
         * Comment Type for EA errors
         *
         * @since  4.3.2
         *
         * @var string
         */
        public static $comment_type = 'tribe-ea-error';
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        /**
         * Exclude Aggregator Errors (comments) from showing in Recent Comments widgets
         * Note: On WP 4.1 and above
         *
         * @since 4.3.2
         *
         * @param obj $query WordPress Comment Query Object
         *
         * @return void
         */
        public function hide_error_comments($query)
        {
        }
        /**
         * Exclude Aggregator Errors (comments) from showing in Recent Comments widgets
         * Note: On Pre WP 4.1
         *
         * @since 4.3.2
         *
         * @param array $clauses Comment clauses for comment query
         * @param obj $wp_comment_query WordPress Comment Query Object
         *
         * @return array $clauses Updated comment clauses
         */
        public function hide_error_comments_pre_41($clauses, $wp_comment_query)
        {
        }
        /**
         * Exclude Aggregator Errors (comments) from showing in comment feeds
         *
         * @since 4.3.2
         *
         * @param array $where
         * @param obj $wp_comment_query WordPress Comment Query Object
         *
         * @return array $where
         */
        public function hide_error_comments_from_feeds($where, $wp_comment_query)
        {
        }
        /**
         * Remove Aggregator Error Comments from the wp_count_comments function
         *
         * @since 4.3.2
         *
         * @param array $stats (empty from core filter)
         * @param int $post_id Post ID
         *
         * @return array Array of comment counts
         */
        public function remove_error_comments_from_wp_counts($stats, $post_id)
        {
        }
        /**
         * Maybe build message from args
         *
         * @since 4.3
         * @param string $message
         * @param array $args Message args
         *
         * @return string
         */
        public static function build($message, $args = [])
        {
        }
    }
    class Tribe__Events__Aggregator__Event
    {
        /**
         * Slug used to mark Event Orgin on `_EventOrigin` meta
         *
         * @var string
         */
        public static $event_origin = 'event-aggregator';
        /**
         * Key of the Meta to store the Event origin inside of Aggregator
         *
         * @var string
         */
        public static $origin_key = '_tribe_aggregator_origin';
        /**
         * Key of the Meta to store the Record that imported this Event
         *
         * @var string
         */
        public static $record_key = '_tribe_aggregator_record';
        /**
         * Key of the Meta to store the Record's source
         *
         * @var string
         */
        public static $source_key = '_tribe_aggregator_source';
        /**
         * Key of the Meta to store the Post Global ID
         *
         * @var string
         */
        public static $global_id_key = '_tribe_aggregator_global_id';
        /**
         * Key of the Meta to store the Post Global ID lineage
         *
         * @var string
         */
        public static $global_id_lineage_key = '_tribe_aggregator_global_id_lineage';
        /**
         * Key of the Meta to store the Record's last import date
         *
         * @var string
         */
        public static $updated_key = '_tribe_aggregator_updated';
        public $data;
        public function __construct($data = [])
        {
        }
        public static function translate_service_data($item)
        {
        }
        /**
         * Fetch all existing unique IDs from the provided list that exist in meta
         *
         * @param string $key Meta key
         * @param array $values Array of meta values
         *
         * @return array
         */
        public function get_existing_ids($origin, $values)
        {
        }
        /**
         * Fetch the Post ID for a given Global ID
         *
         * @param array $value The Global ID we are searching for
         *
         * @return bool|WP_Post
         */
        public static function get_post_by_meta($key, $value = \null)
        {
        }
        /**
         * Preserves changed fields by resetting array indexes back to the stored post/meta values
         *
         * @param array $data Event array to reset
         *
         * @return array
         */
        public static function preserve_changed_fields($data)
        {
        }
    }
    class Tribe__Events__Aggregator__Meta_Box
    {
        /**
         * @var Tribe__Events__Aggregator Event Aggregator bootstrap class
         */
        protected static $instance;
        /**
         * Static Singleton Factory Method
         *
         * @return Tribe__Events__Aggregator
         */
        public static function instance()
        {
        }
        public function add()
        {
        }
        public function render()
        {
        }
    }
    class Tribe__Events__Aggregator__Migrate
    {
        /**
         * Static Singleton Holder
         *
         * @var self
         */
        protected static $instance;
        /**
         * Option key for tracking that legacy ical migration has completed
         * @var string
         */
        protected static $migrated_ical_key = 'tribe-aggregator-legacy-ical-migrated';
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        /**
         * Checks if there are existing settings from the Old iCal or Facebook Plugins
         * and displays a notice with a button to migrated those using AJAX
         *
         * @return string
         */
        public function notice()
        {
        }
        /**
         * Gets one or all the iCal legacy settings
         *
         * @param string|null $index If null will return a Object with all the legacy settings
         *
         * @return mixed
         */
        public function get_ical_setting()
        {
        }
        /**
         * Checks if one or any iCal settings exists
         *
         * @param string|null $index If null will return a Object with all the legacy settings
         *
         * @return bool
         */
        public function has_ical_setting($index = \null)
        {
        }
        /**
         * Checks if legacy Facebook settings were migrated
         *
         * @return bool
         */
        public function is_ical_migrated()
        {
        }
        /**
         * Filters out empty values
         *
         * NOTE: we aren't using array_filter because EVEN with an empty() alias, the results are
         * unpredictable
         *
         * @param array $original_values
         *
         * @return array
         */
        public function filter_out_unwanted_values($original_values)
        {
        }
        /**
         * Method that Handles the AJAX converting of Legacy iCal Settings
         * AJAX methods will not return anything, only print a JSON string
         *
         * @return void
         */
        public function ajax_convert_ical_settings()
        {
        }
        /**
         * Gets one or all the Facebook legacy settings
         *
         * @deprecated 4.6.23
         *
         * @param string|null $index If null will return a Object with all the legacy settings
         *
         * @return mixed
         */
        public function get_facebook_setting($index = \null)
        {
        }
        /**
         * Checks if one or any Facebook settings exists
         *
         * @deprecated 4.6.23
         *
         * @param string|null $index If null will return a Object with all the legacy settings
         *
         * @return bool
         */
        public function has_facebook_setting($index = \null)
        {
        }
        /**
         * Checks if legacy Facebook settings were migrated
         *
         * @deprecated 4.6.23
         *
         * @return bool
         */
        public function is_facebook_migrated()
        {
        }
        /**
         * Method that Handles the AJAX converting of Legacy Facebook Settings
         * AJAX methods will not return anything, only print a JSON string
         *
         * @deprecated 4.6.23
         *
         * @return void
         */
        public function ajax_convert_facebook_settings()
        {
        }
    }
    class Tribe__Events__Aggregator__Page
    {
        /**
         * The page slug
         * @var string
         */
        public static $slug = 'aggregator';
        /**
         * Stores the Registered ID from `add_submenu_page`
         *
         * @var string
         */
        public $ID;
        /**
         * Stores the Tabs Manager class
         *
         * @var null|Tribe__Events__Aggregator__Tabs
         */
        public $tabs;
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        public function init()
        {
        }
        /**
         * Filter the plupload media settings to remove mime_type restrictions
         *
         * Even though .ics is in the default extension list for supported mime types,
         * Safari ignores that fact. Let's not restrict the extensions (much like the
         * Dashboard's Add New Media page)
         *
         * @param array $settings Plupload settings
         *
         * @return array
         */
        public function filter_plupload_default_settings($settings)
        {
        }
        /**
         * Hooked to `current_screen` allow tabs and other parts of the plugin to hook to aggregator before rendering any headers
         *
         * @param  WP_Screen $screen Variable from `current_screen`
         *
         * @return bool
         */
        public function action_request($screen)
        {
        }
        /**
         * Basically an edited version of is_screen(), below,
         * that allows for loading on all non-post edit admin pages.
         *
         * @since 5.16.2.1
         *
         * @return boolean
         */
        public function aggregator_should_load_scripts()
        {
        }
        /**
         * Checks if we are on the correct screen.
         *
         * @return boolean
         */
        public function is_screen()
        {
        }
        /**
         * Checks if the license is still valid once the aggregator page
         * is accessed.
         *
         * @since 4.6.19
         *
         * @return void
         */
        public function check_for_license_updates()
        {
        }
        /**
         * Returns the main admin settings URL.
         *
         * @param array|string $args     Query String or Array with the arguments
         * @param boolean      $relative Return a relative URL or absolute
         *
         * @return string
         */
        public function get_url($args = [], $relative = \false)
        {
        }
        /**
         * Gets the Menu label for the Aggregator
         *
         * @return string
         */
        public function get_menu_label()
        {
        }
        /**
         * Gets the Page title for the Aggregator
         *
         * @return string
         */
        public function get_page_title()
        {
        }
        /**
         * Register the Sub Menu item for this page
         *
         * @return string Page ID on WordPress
         */
        public function register_menu_item()
        {
        }
        /**
         * A very simple method to include a Aggregator Template, allowing filtering and additions using hooks.
         *
         * @param string  $name Which file we are talking about including-
         * @param array   $data Any context data you need to expose to this file.
         * @param boolean $echo If we should also print the Template.
         *
         * @return string        Final Content HTML
         */
        public function template($name, $data = [], $echo = \true)
        {
        }
        /**
         * A simple shortcut to render the Template for the page
         *
         * @return string
         */
        public function render()
        {
        }
        public function notice_legacy_plugins()
        {
        }
    }
}
namespace Tribe\Events\Aggregator\Processes {
    /**
     * Class Batch_Imports
     *
     * @since 5.3.0
     */
    /**
     * Class Batch_Imports
     *
     * Add custom hooks in order to support batch pushing.
     *
     * @since 5.3.0
     */
    class Batch_Imports
    {
        /**
         * Update the endpoint used to initiate a process an import of events.
         *
         * @param string   $url      The input, generated URL.
         * @param string   $endpoint The path of the endpoint inside of the base url.
         * @param stdClass $api      An object representing the properties of the API.
         *
         * @return string The modified URL where to hit to process an import.
         */
        public function build_url($url, $endpoint, $api)
        {
        }
        /**
         * Filter imports (if it has a parent import is a schedule import) and if the parent was not a batch pushing import,
         * make sure that that setting is respected, in this way we can support backwards compatibility as all imports created
         * before batch pushing are going to remaining using the old system and new imports are going to be considered as
         * batch pushing imports.
         *
         * @since 5.3.0
         *
         * @param bool            $service_supports_batch_push If the current import has support for batch pushing.
         * @param Record_Abstract $abstract
         *
         * @return boolean If the current import supports batch pushing or not.
         */
        public function allow_batch_import($service_supports_batch_push, $abstract)
        {
        }
    }
}
namespace {
    /**
     * Class Tribe__Events__Aggregator__Processes__Import_Events
     *
     * Imports events in an async queue.
     *
     * @since 4.6.16
     */
    class Tribe__Events__Aggregator__Processes__Import_Events extends \Tribe__Process__Queue
    {
        /**
         * @var string
         */
        protected $transitional_id;
        /**
         * @var int The post ID of the record associated to this queue instance.
         */
        protected $record_id;
        /**
         * @var bool Whether the current item has dependencies or not.
         */
        protected $has_dependencies = \true;
        /**
         * @var Tribe__Events__Aggregator__Record__Activity[]
         */
        protected $activities = [];
        /**
         * @var int The maximum number of times and item should be requed due to unmet dependencies.
         */
        protected $requeue_limit = 5;
        /**
         * Returns the async process action name.
         *
         * @since 4.6.16
         *
         * @return string
         */
        public static function action()
        {
        }
        public function __construct()
        {
        }
        /**
         * Adds transitional data, used to check dependencies, to an event linked posts.
         *
         * @since 4.6.16
         *
         * @param array $event
         */
        public function add_transitional_data(array $event)
        {
        }
        /**
         * Returns the `meta_key` that will be used to store the transitional data
         * in linked post for this import process.
         *
         * @since 4.6.16
         *
         * @param null $transitional_id
         *
         * @return string
         */
        public function get_transitional_meta_key($transitional_id = \null)
        {
        }
        /**
         * Sets the final part `meta_key` that should be used to store transitional
         * information for this import process.
         *
         * @since 4.6.16
         *
         * @param string $transitional_id
         */
        public function set_transitional_id($transitional_id)
        {
        }
        /**
         * Overrides the parent `save` method to save some additonal data.
         *
         * @since 4.6.16
         *
         * @return Tribe__Events__Aggregator__Processes__Import_Events
         */
        public function save()
        {
        }
        /**
         * Overrides the parent `update` method to save some additonal data.
         *
         * @since 4.6.16
         *
         * @return Tribe__Events__Aggregator__Processes__Import_Events
         */
        public function update($key, $data)
        {
        }
        /**
         * Saves some additional data on the record to keep track of the progress.
         *
         * @since 4.6.16
         *
         * @param array $save_data
         *
         * @return array
         */
        public function save_data(array $save_data = [])
        {
        }
        /**
         * Returns this import process record post ID.
         *
         * @since 4.6.16
         *
         * @return int
         */
        public function get_record_id()
        {
        }
        /**
         * Sets this import process record ID.
         *
         * @since 4.6.16
         *
         * @param int $record_id
         */
        public function set_record_id($record_id)
        {
        }
        /**
         * Handles the real import.
         *
         * In short: if an event has dependencies and those are not yet all in place then the event
         * will be re-queued; otherwise it's inserted.
         *
         * @since 4.6.16
         *
         * @param array $item
         *
         * @return array|false Either the event data to requeue or `false` if done.
         */
        protected function task($item)
        {
        }
        /**
         * Parses the Event Venue and Organizer dependencies.
         *
         * @since 4.6.16
         *
         * @param array $data
         *
         * @return array An array containing a list of identifiers (contextual to the import) for the
         *               dependencies.
         */
        protected function parse_linked_post_dependencies($data)
        {
        }
        /**
         * Inserts an event.
         *
         * @since 4.6.16
         *
         * @param int $record_id
         * @param object $data
         *
         * @return Tribe__Events__Aggregator__Record__Activity|bool Either the resulting activity or `false`
         *                                                          if the record could not be found.
         */
        protected function insert_event($record_id, $data)
        {
        }
        /**
         * Returns this import process record.
         *
         * @since 4.6.16
         *
         * @param int $record_id
         *
         * @return null|Tribe__Error|Tribe__Events__Aggregator__Record__Abstract
         */
        protected function get_record($record_id)
        {
        }
        /**
         * Checks the database to make sure all the dependencies are available.
         *
         * @since 4.6.16
         *
         * @param $dependencies
         *
         * @return array|bool e
         */
        protected function check_dependencies($dependencies)
        {
        }
        /**
         * Replaces, in the event data, the unique ids of the linked posts with their post IDs.
         *
         * @since 4.6.16
         *
         * @param array $data
         * @param array $dependencies_ids
         *
         * @return array
         */
        protected function set_linked_posts_ids(&$data, array $dependencies_ids)
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function complete()
        {
        }
    }
    /**
     * Class Tribe__Events__Aggregator__Processes__Queue_Control
     *
     * @since 4.6.22
     */
    class Tribe__Events__Aggregator__Processes__Queue_Control
    {
        const CLEAR_PROCESSES = 'tribe_clear_ea_processes';
        const CLEAR_RESULT = 'tribe_clear_ea_processes_result';
        /**
         * Clears the queues, in whatever state they are, related to Event Aggregator imports
         * and redirects the user to the current page or a specified location.
         *
         * @since 4.6.22
         *
         * @param null|string $location The location the user should be redirected to or null
         *                              to use the current location.
         */
        public function clear_queues_and_redirect($location = \null)
        {
        }
        /**
         * Clears the queues, in whatever state they are, related to Event Aggregator imports.
         *
         * @since 4.6.22
         *
         * @return int The number of cleared queue processes.
         */
        public function clear_queues()
        {
        }
    }
    /**
     * Class Tribe__Events__Aggregator__Processes__Service_Provider
     *
     * @since 4.6.16
     */
    class Tribe__Events__Aggregator__Processes__Service_Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 4.6.16
         */
        public function register()
        {
        }
        /**
         * Registers the event import background process.
         *
         * @since 4.6.16
         *
         * @param array $queues
         *
         * @return array
         */
        public function filter_tribe_process_queues(array $queues = [])
        {
        }
        /**
         * Handles requests to clear queue processes.
         *
         * @since 4.6.23
         */
        protected function handle_clear_request()
        {
        }
        /**
         * Handles requests to show the queue processes clearing results.
         *
         * @since 4.6.23
         */
        protected function handle_clear_result()
        {
        }
        /**
         * Filters the save operation of the process system to watch for system switches while there are
         * running asynchronous queues.
         *
         * While going from cron-based to async will work, due to underlying system, the reverse will not.
         * To prevent this from creating issues all asynchronous queue processes will be cleared before
         * the switch.
         *
         * @since 4.6.23
         *
         * @param string $value    The new setting value.
         * @param string $field_id The setting field id.
         *
         * @return string The new setting value, unmodified.
         */
        public function filter_tribe_settings_save_field_value($value, $field_id)
        {
        }
    }
    /**
     * Class Tribe__Events__Aggregator__REST__V1__Endpoints__Base
     *
     * @since 4.6.15
     *
     * The base for the Aggregator endpoints.
     */
    abstract class Tribe__Events__Aggregator__REST__V1__Endpoints__Base
    {
        /**
         * Whether the current import ID exists and is for a record that needs data.
         *
         * @since 4.6.15
         *
         * @param string $import_id
         *
         * @return bool
         */
        public function is_valid_import_id($import_id)
        {
        }
        /**
         * Whether the batch hash is the expected one or not.
         *
         * @since 4.6.15
         *
         * @param string $batch_hash
         *
         * @return bool
         */
        public function is_expected_batch_hash($batch_hash, \WP_REST_Request $request)
        {
        }
        /**
         * Whether the interval is an acceptable one or not.
         *
         * @since 4.6.15
         *
         * @param int $interval
         *
         * @return bool
         */
        public function is_valid_interval($interval)
        {
        }
        /**
         * Whether the specified percentage is legit or not.
         *
         * @since 4.6.15
         *
         * @param int $percentage
         *
         * @return bool
         */
        public function is_percentage($percentage)
        {
        }
    }
    /**
     * Class Tribe__Events__Aggregator__REST__V1__Endpoints__Batch
     *
     * @since 4.6.15
     *
     * An endpoint dedicated to processing events in batches.
     */
    class Tribe__Events__Aggregator__REST__V1__Endpoints__Batch extends \Tribe__Events__Aggregator__REST__V1__Endpoints__Base implements \Tribe__REST__Endpoints__CREATE_Endpoint_Interface
    {
        /**
         * @var Record_Abstract
         */
        protected $current_record;
        /**
         * The minimum interval, in seconds.
         *
         * @var int
         */
        protected $interval_min = 10;
        /**
         * The maximum interval, in seconds.
         *
         * @var
         */
        protected $interval_max = 600;
        /**
         * Handles a batch processing request sent by the server.
         *
         * @since 4.6.15
         *
         * @param WP_REST_Request $request   Object representing the Http request to this endpoint.
         * @param bool            $return_id Whether the ID should be returned or not.
         *
         * @return int|WP_Error|WP_REST_Response
         */
        public function create(\WP_REST_Request $request, $return_id = \false)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function CREATE_args()
        {
        }
        /**
         * Whether batch imports are supported or not.
         */
        public function can_create()
        {
        }
        /**
         * Validates the status information sent by the server.
         *
         * @since 4.6.15
         *
         * @param object $status
         *
         * @return bool
         */
        public function is_valid_status_information($status)
        {
        }
    }
    class Tribe__Events__Aggregator__REST__V1__Endpoints__State extends \Tribe__Events__Aggregator__REST__V1__Endpoints__Base implements \Tribe__REST__Endpoints__CREATE_Endpoint_Interface
    {
        /**
         * Handles POST requests on the endpoint.
         *
         * @param WP_REST_Request $request
         * @param bool            $return_id Whether the created post ID should be returned or the full response object.
         *
         * @return WP_Error|WP_REST_Response|int An array containing the data on success or a WP_Error instance on failure.
         */
        public function create(\WP_REST_Request $request, $return_id = \false)
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         */
        public function CREATE_args()
        {
        }
        /**
         * Whether the current user can create content of the specified type or not.
         *
         * @return bool Whether the current user can post or not.
         */
        public function can_create()
        {
        }
    }
    /**
     * Class Tribe__Events__Aggregator__REST__V1__Service_Provider
     *
     * Provides the Event Aggregator batch process support functionality.
     *
     * @since 4.6.15
     */
    class Tribe__Events__Aggregator__REST__V1__Service_Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         */
        public $namespace;
        /**
         * Registers the classes and functionality needed to support batch imports.
         *
         * @since 4.6.15
         */
        public function register()
        {
        }
        /**
         * Registers the REST API endpoints needed to support batch imports.
         *
         * @since 4.6.15
         */
        public function register_endpoints()
        {
        }
    }
    abstract class Tribe__Events__Aggregator__Record__Abstract
    {
        /**
         * Meta key prefix for ea-record data
         *
         * @var string
         */
        public static $meta_key_prefix = '_tribe_aggregator_';
        public $id;
        public $post;
        public $meta;
        public $type;
        public $frequency;
        public $is_schedule = \false;
        public $is_manual = \false;
        public $last_wpdb_error = '';
        /**
         * An associative array of origins and the settings they define a policy for.
         *
         * @var array
         */
        protected $origin_import_policies = ['url' => ['show_map_link']];
        public static $unique_id_fields = ['meetup' => ['source' => 'meetup_id', 'target' => 'EventMeetupID'], 'eventbrite' => ['source' => 'eventbrite_id', 'target' => 'EventBriteID'], 'ical' => ['source' => 'uid', 'target' => 'uid'], 'gcal' => ['source' => 'uid', 'target' => 'uid'], 'ics' => ['source' => 'uid', 'target' => 'uid'], 'url' => ['source' => 'id', 'target' => 'EventOriginalID']];
        /**
         * @var array
         */
        public static $unique_venue_id_fields = ['meetup' => ['source' => 'meetup_id', 'target' => 'VenueMeetupID'], 'eventbrite' => ['source' => 'eventbrite_id', 'target' => 'VenueEventBriteID']];
        /**
         * @var array
         */
        public static $unique_organizer_id_fields = ['meetup' => ['source' => 'meetup_id', 'target' => 'OrganizerMeetupID'], 'eventbrite' => ['source' => 'eventbrite_id', 'target' => 'OrganizerEventBriteID']];
        /**
         * Cache variable to store the last child post.
         *
         * @var  WP_Post
         */
        protected $last_child;
        /**
         * The import record origin.
         *
         * @var string
         */
        public $origin;
        /**
         * Setup all the hooks and filters
         *
         * @return void
         */
        public function __construct($post = \null)
        {
        }
        /**
         * Public facing Label for this Origin
         *
         * @return string
         */
        public abstract function get_label();
        /**
         * Loads the WP_Post associated with this record
         */
        public function load($post = \null)
        {
        }
        /**
         * Sets up meta fields by de-prefixing them into the array
         *
         * @param array $meta Meta array
         */
        public function setup_meta($meta)
        {
        }
        /**
         * Updates import record meta
         *
         * @param string $key   Meta key
         * @param mixed  $value Meta value
         */
        public function update_meta($key, $value)
        {
        }
        /**
         * Deletes import record meta
         *
         * @param string $key Meta key
         */
        public function delete_meta($key)
        {
        }
        /**
         * Returns the Activity object for the record
         *
         * @return Tribe__Events__Aggregator__Record__Activity
         */
        public function activity()
        {
        }
        /**
         * Saves activity data on a record
         */
        public function save_activity()
        {
        }
        /**
         * Gets a hash with the information we need to verify if a given record is a duplicate
         *
         * @since  4.5.13
         *
         * @return string
         */
        public function get_data_hash()
        {
        }
        /**
         * Creates an import record
         *
         * @param string $type Type of record to create - manual or schedule
         * @param array  $args Post type args
         * @param array  $meta Post meta
         *
         * @return WP_Post|WP_Error
         */
        public function create($type = 'manual', $args = [], $meta = [])
        {
        }
        /**
         * Edits an import record
         *
         * @param int   $post_id
         * @param array $args Post type args
         * @param array $meta Post meta
         *
         * @return WP_Post|WP_Error
         */
        public function save($post_id, $args = [], $meta = [])
        {
        }
        /**
         * Filter the post_modified dates to be unchanged
         * conditionally hooked to wp_insert_post_data and then unhooked after wp_update_post
         *
         * @param array $data    new data to be used in the update
         * @param array $postarr existing post data
         *
         * @return array
         */
        public function dont_change_post_modified($data, $postarr)
        {
        }
        /**
         * Preps post arguments for create/save
         *
         * @param string $type Type of record to create - manual or schedule.
         * @param object $args Post type args.
         * @param array  $meta Post meta.
         *
         * @return array
         */
        public function prep_post_args($type, $args, $meta = [])
        {
        }
        /**
         * A simple method to create a Title for the Records
         *
         * @param mixed $Nparams This method accepts any number of params, they must be string compatible
         *
         * @return string
         */
        public function generate_title()
        {
        }
        /**
         * Creates a schedule record based on the import record
         *
         * @return boolean|Tribe_Error
         */
        public function create_schedule_record()
        {
        }
        /**
         * Creates a child record based on the import record
         *
         * @return boolean|Tribe_Error|Tribe__Events__Aggregator__Record__Abstract
         */
        public function create_child_record()
        {
        }
        /**
         * If using WP < 4.4, we need to add meta to the post via update_post_meta
         *
         * @param int   $id   Post id to add data to
         * @param array $meta Meta to add to the post
         */
        public function maybe_add_meta_via_pre_wp_44_method($id, $meta)
        {
        }
        /**
         * Queues the import on the Aggregator service
         *
         * @see Tribe__Events__Aggregator__API__Import::create()
         *
         * @return stdClass|WP_Error|int A response object, a `WP_Error` instance on failure or a record
         *                               post ID if the record had to be re-scheduled due to HTTP request
         *                               limit.
         */
        public function queue_import($args = [])
        {
        }
        /**
         * Returns the record import data either fetching it locally or trying to retrieve
         * it from EA Service.
         *
         * @return stdClass|WP_Error An object containing the response data or a `WP_Error` on failure.
         */
        public function get_import_data()
        {
        }
        public function delete($force = \false)
        {
        }
        /**
         * Sets a status on the record
         *
         * @return int
         */
        public function set_status($status)
        {
        }
        /**
         * Marks a record as failed
         *
         * @return int
         */
        public function set_status_as_failed($error = \null)
        {
        }
        /**
         * Marks a record as pending
         *
         * @return int
         */
        public function set_status_as_pending()
        {
        }
        /**
         * Marks a record as successful
         *
         * @return int
         */
        public function set_status_as_success()
        {
        }
        /**
         * A quick method to fetch the Child Records to the current on this class
         *
         * @param array $args WP_Query Arguments
         *
         * @return WP_Query|WP_Error
         */
        public function query_child_records($args = [])
        {
        }
        /**
         * A quick method to fetch the Child Records by Status
         *
         * @param string $status Which status, must be a valid EA status
         *
         * @return WP_Query|WP_Error|bool
         */
        public function get_child_record_by_status($status = 'success', $qty = -1, array $args = [])
        {
        }
        /**
         * Gets errors on the record post
         */
        public function get_errors($args = [])
        {
        }
        /**
         * Logs an error to the comments of the Record post
         *
         * @param WP_Error $error Error message to log
         *
         * @return bool
         */
        public function log_error(\WP_Error $error)
        {
        }
        /**
         * Verifies if this Schedule Record can create a new Child Record
         *
         * @return boolean
         */
        public function is_schedule_time()
        {
        }
        /**
         * Verifies if this Record can pruned
         *
         * @return boolean
         */
        public function has_passed_retention_time()
        {
        }
        /**
         * Get info about the source, via and title
         *
         * @return array
         */
        public function get_source_info()
        {
        }
        /**
         * Fetches the status message for the last import attempt on (scheduled) records
         *
         * @param string $type            Type of message to fetch
         * @param bool   $lookup_children Whether the function should try to read the last children post status to return a coherent
         *                                last import status or not, default `false`.
         *
         * @return bool|string Either the message corresponding to the last import status or `false` if the last import status
         *                     is empty or not the one required.
         */
        public function get_last_import_status($type = 'error', $lookup_children = \false)
        {
        }
        /**
         * Updates the source name on the import record and its parent (if the parent exists)
         *
         * @param string $source_name Source name to set on the import record
         */
        public function update_source_name($source_name)
        {
        }
        /**
         * Queues events, venues, and organizers for insertion
         *
         * @param array $data              Import data.
         * @param bool  $start_immediately Whether the data processing should start immediately or not.
         *
         * @return array|Tribe__Events__Aggregator__Record__Queue_Interface|WP_Error|Tribe__Events__Aggregator__Record__Activity
         */
        public function process_posts($data = [], $start_immediately = \false)
        {
        }
        /**
         * Returns whether or not the record has a queue
         *
         * @return bool
         */
        public function has_queue()
        {
        }
        public function get_event_count($type = \null)
        {
        }
        /**
         * Handles import data before queuing
         *
         * Ensures the import record source name is accurate, checks for errors, and limits import items
         * based on selection
         *
         * @param array $data Import data
         *
         * @return array|WP_Error
         */
        public function prep_import_data($data = [])
        {
        }
        /**
         * Inserts events, venues, and organizers for the Import Record
         *
         * @param array $items Dummy data var to allow children to optionally react to passed in data
         *
         * @return Tribe__Events__Aggregator__Record__Activity The import activity record.
         */
        public function insert_posts($items = [])
        {
        }
        /**
         * Gets all ids that already exist in the post meta table from the provided records
         *
         * @param array $records Array of records
         *
         * @return array
         */
        protected function get_existing_ids_from_import_data($import_data)
        {
        }
        protected function filter_data_by_selected($import_data)
        {
        }
        /**
         * Gets the unique field map for the current origin and the specified post type.
         *
         * @param string $for
         *
         * @return array|null
         */
        protected function get_unique_field($for = \null)
        {
        }
        /**
         * Finalizes the import record for insert
         */
        public function finalize()
        {
        }
        /**
         * preserve Event Options
         *
         * @param array $event Event data
         *
         * @return array
         */
        public static function preserve_event_option_fields($event)
        {
        }
        /**
         * Imports an image information from EA server and creates the WP attachment object if required.
         *
         * @param array $event An event representation in the format provided by an Event Aggregator response.
         *
         * @return bool|stdClass|WP_Error An image information in the format provided by an Event Aggregator responsr or
         *                                `false` on failure.
         */
        public function import_aggregator_image($event)
        {
        }
        /**
         * Imports the image contained in the post data `image` field if any.
         *
         * @param array $data A post data in array format.
         *
         * @return object|bool An object with the image post ID or `false` on failure.
         */
        public function import_image($data)
        {
        }
        /**
         * Whether an origin has more granulat policies concerning an import setting or not.
         *
         * @param string $origin
         * @param string $setting
         *
         * @return bool
         */
        protected function has_import_policy_for($origin, $setting)
        {
        }
        /**
         * Starts monitoring the db for errors.
         */
        protected function watch_for_db_errors()
        {
        }
        /**
         * @return bool Whether a db error happened during the insertion of data or not.
         */
        protected function db_errors_happened()
        {
        }
        /**
         * Cast error responses from the Service to WP_Errors to ease processing down the line.
         *
         * If a response is a WP_Error already or is not an error response then it will not be modified.
         *
         * @since 4.5.9
         *
         * @param WP_Error|object $import_data
         *
         * @return array|WP_Error
         */
        protected function maybe_cast_to_error($import_data)
        {
        }
        /**
         * Sets the post associated with this record.
         *
         * @since 4.5.11
         *
         * @param WP_post|int $post A post object or post ID
         */
        public function set_post($post)
        {
        }
        /**
         * Returns the user ID of the first user that can edit events or the current user ID if available.
         *
         * During cron runs current user ID will be set to 0; here we try to get a legit author user ID to
         * be used as an author using the first non-0 user ID among the record author, the current user, the
         * first available event editor.
         *
         * @since 4.5.11
         *
         * @return int The user ID or `0` (not logged in user) if not possible.
         */
        protected function get_default_user_id()
        {
        }
        /**
         * Assigns a new post thumbnail to the specified post if needed.
         *
         * @since 4.5.13
         *
         * @param int $post_id          The ID of the post the thumbnail should be assigned to.
         * @param int $new_thumbnail_id The new attachment post ID.
         *
         * @return bool Whether the post thumbnail ID changed or not.
         */
        protected function set_post_thumbnail($post_id, $new_thumbnail_id)
        {
        }
        /**
         * Getter/setter to check/set whether the import for this record should be queued on EA Service or not.
         *
         * Note this is a passive check: if the meta is not set or set to `false` we assume the import
         * should not be queued on EA Service.
         *
         * @since 4.6.2
         *
         * @param bool $should_queue_import If a value is provided here then the `should_queue_import` meta will
         *                                  be set to the boolean representation of that value.
         *
         * @return bool
         */
        public function should_queue_import($should_queue_import = \null)
        {
        }
        /**
         * Attaches a service-provided image to an organizer.
         *
         * @since 4.6.9
         *
         * @param int                                         $organizer_id The organizer post ID.
         * @param string                                      $image_url
         * @param Tribe__Events__Aggregator__Record__Activity $activity
         *
         * @return bool Whether the image was attached to the organizer or not.
         */
        public function import_organizer_image($organizer_id, $image_url, $activity)
        {
        }
        /**
         * Attaches a service-provided image to a venue.
         *
         * @since 4.6.9
         *
         * @param int                                         $venue_id The venue post ID.
         * @param string                                      $image_url
         * @param Tribe__Events__Aggregator__Record__Activity $activity
         *
         * @return bool Whether the image was attached to the venue or not.
         */
        public function import_venue_image($venue_id, $image_url, $activity)
        {
        }
        /**
         * Imports and attaches an image as post thumbnail to a post.
         *
         * @since 4.6.9
         *
         * @param int                                         $post_id
         * @param string                                      $image_url
         * @param Tribe__Events__Aggregator__Record__Activity $activity
         *
         * @return bool `true` if the image was correctly downloaded and attached, `false` otherwise.
         */
        protected function import_and_attach_image_to($post_id, $image_url, $activity)
        {
        }
        /**
         * Attaches a service-provided image to an event.
         *
         * @since 4.6.9
         *
         * @param array                                       $event The event data.
         * @param Tribe__Events__Aggregator__Record__Activity $activity
         *
         * @return bool Whether the image was attached to the event or not.
         */
        public function import_event_image($event, $activity)
        {
        }
        /**
         * Returns this record last child record or the record itself if no children are found.
         *
         * @since 4.6.15
         *
         * @return Tribe__Events__Aggregator__Record__Abstract
         */
        public function last_child()
        {
        }
        /**
         * Returns this record last child post object.
         *
         * @since 4.6.15
         *
         * @param bool $force Whether to use the the last child cached value or refetch it.
         *
         * @return WP_Post|false Either the last child post object or `false` on failure.
         */
        public function get_last_child_post($force = \false)
        {
        }
        /**
         * Whether this record failed before a specific time.
         *
         * @since 4.6.15
         *
         * @param string|int $time A timestamp or a string parseable by the `strtotime` function.
         *
         * @return bool
         */
        public function failed_before($time)
        {
        }
        /**
         * Whether the record has its own last import status stored in the meta or
         * it should be read from its last child record.
         *
         * @since 4.6.15
         *
         * @return bool
         */
        protected function has_own_last_import_status()
        {
        }
        /**
         * Returns the default retry interval depending on this record frequency.
         *
         * @since 4.6.15
         *
         * @return int
         */
        public function get_retry_interval()
        {
        }
        /**
         * Returns the record retry timestamp.
         *
         * @since 4.6.15
         *
         * @return int|bool Either the record retry timestamp or `false` if the record will
         *                  not retry to import.
         */
        public function get_retry_time()
        {
        }
        /**
         * Whether the record will try to fetch the import data polling EA Service or
         * expecting batches of data being pushed to it by EA Service.
         *
         * @since 4.6.15
         *
         * @return bool
         */
        public function is_polling()
        {
        }
        /*
         *
         * Generates the hash that will be expected in the for the next batch of events.
         *
         * @since 4.6.15
         *
         * @return string
         */
        public function generate_next_batch_hash()
        {
        }
    }
    class Tribe__Events__Aggregator__Record__Activity
    {
        /**
         * The below constants are meant to be used to set a status on the activity.
         * The reasons, check and management of said status are up to the client
         * object and not managed by the activity instance.
         *
         * @see Tribe__Events__Aggregator__Record__Activity::set_last_status()
         * @see Tribe__Events__Aggregator__Record__Activity::get_last_status()
         *
         */
        const STATUS_SUCCESS = 'success';
        const STATUS_FAIL = 'fail';
        const STATUS_PARTIAL = 'partial';
        const STATUS_NULL = 'null';
        /**
         * Holds a Log of what has been done on This Queue
         * @var array
         */
        protected $items = [];
        /**
         * The status of the last processing operation.
         *
         * @var string
         */
        protected $last_status;
        public $total = 0;
        public function __construct()
        {
        }
        /**
         * Register the Activities Tracked
         */
        public function __wakeup()
        {
        }
        /**
         * Prevents Mapping to be saved on the DB object
         * @return array
         */
        public function __sleep()
        {
        }
        /**
         * Register a Specific Activity and it's mappings
         *
         * @param  string $slug Name of this Activity
         * @param  array  $map  (optional) Other names in which you can access this activity
         *
         * @return boolean       [description]
         */
        public function register($slug, $map = array())
        {
        }
        /**
         * Logs an Activity
         *
         * @param string       $slug Name of this Activity
         * @param string|array $items Type of activity
         * @param array        $ids   items inside of the action
         *
         * @return boolean
         */
        public function add($slug, $items, $ids = array())
        {
        }
        /**
         * Returns the merged version of two Activities classes
         *
         * @param  self   $activity Which activity should be merged here
         *
         * @return self
         */
        public function merge(self $activity)
        {
        }
        /**
         * Removes a activity from the Registered ones
         *
         * @param  string  $slug   The Slug of the Activity
         *
         * @return boolean
         */
        public function remove($slug)
        {
        }
        /**
         * Fetches a registered Activity
         *
         * @param  string  $slug   (optional) The Slug of the Activity
         * @param  string  $action (optional) Which action
         *
         * @return null|array|object
         */
        public function get($slug = \null, $action = \null)
        {
        }
        /**
         * Fetches a registered Activity counter
         *
         * @param  string  $slug   (optional) The Slug of the Activity
         * @param  string  $action (optional) Which action
         *
         * @return int
         */
        public function count($slug = \null, $action = \null)
        {
        }
        /**
         * Checks if a given Activity type exists
         *
         * @param  string  $slug The Slug of the Tab
         *
         * @return boolean
         */
        public function exists($slug)
        {
        }
        /**
         * Checks the activities for a slug to make sure there are no incoherent duplicate entries due to concurring processes.
         *
         * @since 4.5.12
         *
         * @param string $slug
         */
        protected function prevent_duplicates_between_item_actions($slug)
        {
        }
        /**
         * Returns the raw items from the activity.
         *
         * @since 4.6.15
         *
         * @return array
         */
        public function get_items()
        {
        }
        /**
         * Sets the last status on the activity object.
         *
         * Ideally set to one of the `STATUS_` constants defined by the class
         * but allowing arbitrary stati by design. It's up to the client to set
         * and consume this information.
         *
         * @since 4.6.15
         *
         * @param string $status
         */
        public function set_last_status($status)
        {
        }
        /**
         * Gets the last status on the activity object.
         *
         * Ideally set to one of the `STATUS_` constants defined by the class
         * but allowing arbitrary stati by design. It's up to the client to set
         * and consume this information.
         *
         * @since 4.6.15
         *
         * @return string
         */
        public function get_last_status()
        {
        }
    }
    interface Tribe__Events__Aggregator__Record__Queue_Interface
    {
        public function activity();
        /**
         * Shortcut to check how many items are going to be processed next
         *
         * @return int
         */
        public function count();
        /**
         * Shortcut to check if this queue is empty.
         *
         * @return boolean `true` if this queue instance has acquired the lock and
         *                 the count is 0, `false` otherwise.
         */
        public function is_empty();
        /**
         * Processes a batch for the queue
         *
         * @return \Tribe__Events__Aggregator__Record__Queue
         */
        public function process($batch_size = \null);
        /**
         * Returns the total progress made on processing the queue so far as a percentage.
         *
         * @return int
         */
        public function progress_percentage();
        /**
         * Sets a flag to indicate that update work is in progress for a specific event:
         * this can be useful to prevent collisions between cron-based updated and realtime
         * updates.
         *
         * The flag naturally expires after an hour to allow for recovery if for instance
         * execution hangs half way through the processing of a batch.
         */
        public function set_in_progress_flag();
        /**
         * Clears the in progress flag.
         */
        public function clear_in_progress_flag();
        /**
         * Indicates if the queue for the current event is actively being processed.
         *
         * @return bool
         */
        public function is_in_progress();
        /**
         * Returns the primary post type the queue is processing
         *
         * @return string
         */
        public function get_queue_type();
        /**
         * Whether the current queue process is stuck or not.
         *
         * @since 4.6.21
         *
         * @return bool
         */
        public function is_stuck();
        /**
         * Orderly closes the queue process.
         *
         * @since 4.6.21
         *
         * @return bool
         */
        public function kill_queue();
        /**
         * Whether the current queue process failed or not.
         *
         * @since 4.6.21
         *
         * @return bool
         */
        public function has_errors();
        /**
         * Whether the current queue is fetching values from a remote or external source.
         *
         * @since 5.3.0
         *
         * @return bool
         */
        public function is_fetching();
        /**
         * Returns the queue error message.
         *
         * @since 4.6.21
         *
         * @return string
         */
        public function get_error_message();
    }
    class Tribe__Events__Aggregator__Record__Async_Queue implements \Tribe__Events__Aggregator__Record__Queue_Interface
    {
        /**
         * @var Tribe__Events__Aggregator__Record__Abstract
         */
        public $record;
        /**
         * @var Tribe__Events__Aggregator__Record__Activity
         */
        protected $activity;
        /**
         * @var Tribe__Process__Queue
         */
        protected $queue_process;
        /**
         * @var string
         */
        protected $error;
        /**
         * Tribe__Events__Aggregator__Record__Async_Queue constructor.
         *
         * @since 4.6.16
         *
         * @param Tribe__Events__Aggregator__Record__Abstract $record
         * @param array $items
         */
        public function __construct(\Tribe__Events__Aggregator__Record__Abstract $record, $items = [])
        {
        }
        /**
         * Initializes the async queue.
         *
         * @since 4.6.16
         *
         * @param $items
         *
         * @return Tribe__Process__Queue|null Either a built and ready queue process or `null`
         *                                    if the queue process was not built as not needed;
         *                                    the latter will happen when there are no items to
         *                                    process.
         */
        protected function init_queue($items)
        {
        }
        /**
         * Magic method override.
         *
         * @since 4.6.16
         *
         * @param string $key
         *
         * @return Tribe__Events__Aggregator__Record__Activity
         */
        public function __get($key)
        {
        }
        /**
         * Returns the queue activity.
         *
         * In this implementation really stored on the record.
         *
         * @since 4.6.16
         *
         * @return Tribe__Events__Aggregator__Record__Activity
         */
        public function activity()
        {
        }
        /**
         * Shortcut to check if this queue is empty.
         *
         * @since 4.6.16
         *
         * @return boolean `true` if this queue instance has acquired the lock and
         *                 the count is 0, `false` otherwise.
         */
        public function is_empty()
        {
        }
        /**
         * Shortcut to check how many items are going to be processed next
         *
         * @since 4.6.16
         *
         * @return int
         */
        public function count()
        {
        }
        /**
         * Returns the process status of the queue, read from the queue meta.
         *
         * @since 4.6.16
         *
         * @return array
         */
        protected function get_queue_process_status()
        {
        }
        /**
         * Processes a batch for the queue
         *
         * The `batch_size` is ignored in async mode.
         *
         * @since 4.6.16
         *
         * @return Tribe__Events__Aggregator__Record__Async_Queue
         */
        public function process($batch_size = \null)
        {
        }
        /**
         * Initializes the async queue process if required.
         *
         * @since 4.6.16
         *
         * @return bool Whether the queue needed and was correctly initialized or not.
         */
        protected function maybe_init_queue()
        {
        }
        /**
         * Indicates if the queue for the current event is actively being processed.
         *
         * @since 4.6.16
         *
         * @return bool
         */
        public function is_in_progress()
        {
        }
        /**
         * Sets a flag to indicate that update work is in progress for a specific event.
         *
         * No-op as the async queue has its own lock system.
         *
         * @since 4.6.16
         */
        public function set_in_progress_flag()
        {
        }
        /**
         * Clears the in progress flag.
         *
         * No-op as the async queue has its own lock system.
         *
         * @since 4.6.16
         */
        public function clear_in_progress_flag()
        {
        }
        /**
         * Returns the total progress made on processing the queue so far as a percentage.
         *
         * @since 4.6.16
         *
         * @return int
         */
        public function progress_percentage()
        {
        }
        /**
         * Returns the primary post type the queue is processing
         *
         * @since 4.6.16
         *
         * @return string
         */
        public function get_queue_type()
        {
        }
        /**
         * Generates a transitional id that will be used to uniquely identify dependencies in the
         * context of an import.
         *
         * @since 4.6.16
         *
         * @return string An 8 char long unique ID.
         */
        protected function generate_transitional_id()
        {
        }
        /**
         * Whether the current queue process is stuck or not.
         *
         * @since 4.6.21
         *
         * @return bool
         */
        public function is_stuck()
        {
        }
        /**
         * Orderly closes the queue process.
         *
         * @since 4.6.21
         *
         * @return bool
         */
        public function kill_queue()
        {
        }
        /**
         * Whether the current queue process failed or not.
         *
         * @since 4.6.21
         *
         * @return bool
         */
        public function has_errors()
        {
        }
        /**
         * This Queue never fetches on external resources so is always `false`.
         *
         * @return bool The state of the queue with external resources.
         */
        public function is_fetching()
        {
        }
        /**
         * Returns the queue error message.
         *
         * @since 4.6.21
         *
         * @return string
         */
        public function get_error_message()
        {
        }
    }
}
namespace Tribe\Events\Aggregator\Record {
    /**
     * Class Tribe__Events__Aggregator__Record__Batch_Queue - New Queue system to process imports crated with the new
     * batch system.
     *
     * @since 5.3.0
     */
    class Batch_Queue implements \Tribe__Events__Aggregator__Record__Queue_Interface
    {
        /**
         * Set a name to identify the activity object.
         *
         * @since 5.3.0
         *
         * @var string $activity_key Key to identify the activity object.
         */
        public static $activity_key = 'activity';
        /**
         * Access to the current record.
         *
         * @since 5.3.0
         *
         * @var Tribe__Events__Aggregator__Record__Abstract $record The current record.
         */
        public $record;
        /**
         * @var Tribe__Events__Aggregator__Record__Activity
         */
        protected $activity;
        /**
         * Whether any real processing should happen for the queue or not.
         *
         * @since 5.3.0
         *
         * @var bool
         */
        protected $null_process = false;
        /**
         * Tribe__Events__Aggregator__Record__Queue constructor.
         *
         * @since 5.3.0
         *
         * @param int|Tribe__Events__Aggregator__Record__Abstract       $record The current record or record ID.
         * @param array|string|null                                     $items The items to build the Queue.
         * @param Tribe__Events__Aggregator__Record__Queue_Cleaner|null $cleaner The cleaner to remove duplicates.
         */
        public function __construct($record, $items = null, \Tribe__Events__Aggregator__Record__Queue_Cleaner $cleaner = null)
        {
        }
        /**
         * Get the activity if a call to a dynamic attribute is taking place in this case `$this->>activity`
         *
         * @since 5.3.0
         *
         * @param string $key The dynamic key to be returned.
         *
         * @return mixed|Tribe__Events__Aggregator__Record__Activity
         */
        public function __get($key)
        {
        }
        /**
         * Returns the activity object for the processing of this Queue.
         *
         * @since 5.3.0
         *
         * @return mixed|Tribe__Events__Aggregator__Record__Activity
         */
        public function activity()
        {
        }
        /**
         * Allows us to check if the Events Data has still pending
         *
         * @since 5.3.0
         *
         * @return boolean
         */
        public function is_fetching()
        {
        }
        /**
         * Shortcut to check how many items are going to be processed next.
         *
         * @since 5.3.0
         *
         * @return int
         */
        public function count()
        {
        }
        /**
         * Shortcut to check if this queue is empty or it has a null process.
         *
         * @since 5.3.0
         *
         * @return boolean `true` if this queue instance has acquired the lock and
         *                 the count is 0, `false` otherwise.
         */
        public function is_empty()
        {
        }
        /**
         * After the process has been completed make sure the `post_modified` and `post_status` are updated accordingly.
         *
         * @since 5.3.0
         *
         * @return $this
         */
        protected function complete()
        {
        }
        /**
         * Processes a batch for the queue
         *
         * @since 5.3.0
         *
         * @throws Exception
         *
         * @param null $batch_size The batch size is ignored on batch import as is controlled via the initial filtered value.
         *
         * @return self|Tribe__Events__Aggregator__Record__Activity
         */
        public function process($batch_size = null)
        {
        }
        /**
         * Create the initial request to the EA server requesting that the client is ready to start getting batches of events.
         *
         * @since 5.3.0
         */
        public function start()
        {
        }
        /**
         * Returns the total progress made on processing the queue so far as a percentage.
         *
         * @since 5.3.0
         *
         * @return int
         */
        public function progress_percentage()
        {
        }
        /**
         * Sets a flag to indicate that update work is in progress for a specific event:
         * this can be useful to prevent collisions between cron-based updated and realtime
         * updates.
         *
         * The flag naturally expires after an hour to allow for recovery if for instance
         * execution hangs half way through the processing of a batch.
         *
         * @since 5.3.0
         */
        public function set_in_progress_flag()
        {
        }
        /**
         * Clears the in progress flag.
         *
         * @since 5.3.0
         */
        public function clear_in_progress_flag()
        {
        }
        /**
         * Indicates if the queue for the current event is actively being processed.
         *
         * @since 5.3.0
         *
         * @return bool
         */
        public function is_in_progress()
        {
        }
        /**
         * Returns the primary post type the queue is processing
         *
         * @since 5.3.0
         *
         * @return string
         */
        public function get_queue_type()
        {
        }
        /**
         * Whether the current queue process is stuck or not.
         *
         * @since 5.3.0
         *
         * @return bool
         */
        public function is_stuck()
        {
        }
        /**
         * Orderly closes the queue process.
         *
         * @since 5.3.0
         *
         * @return bool
         */
        public function kill_queue()
        {
        }
        /**
         * Whether the current queue process failed or not.
         *
         * @since 5.3.0
         *
         * @return bool
         */
        public function has_errors()
        {
        }
        /**
         * Returns the queue error message.
         *
         * @since 5.3.0
         *
         * @return string
         */
        public function get_error_message()
        {
        }
    }
}
namespace {
    class Tribe__Events__Aggregator__Record__CSV extends \Tribe__Events__Aggregator__Record__Abstract
    {
        use \Tribe\Traits\With_DB_Lock;
        public $origin = 'csv';
        protected $importer;
        /**
         * Creates an import record
         *
         * @param string $origin EA origin
         * @param string $type Type of record to create - import or schedule
         * @param array $args Post type args
         *
         * @return WP_Post|WP_Error
         */
        public function create($type = 'manual', $args = array(), $meta = array())
        {
        }
        public function queue_import($args = array())
        {
        }
        /**
         * Public facing Label for this Origin
         *
         * @return string
         */
        public function get_label()
        {
        }
        public function get_csv_data()
        {
        }
        /**
         * Queues events, venues, and organizers for insertion
         *
         * @param array $data   Import data
         * @param bool $ignored This parameter is, de facto, ignored when processing CSV files: all
         *                      imports are immediately started.
         *
         * @return array|WP_Error
         */
        public function process_posts($data = array(), $ignored = \false)
        {
        }
        /**
         * Handles import data before queuing
         *
         * Ensures the import record source name is accurate, checks for errors, and limits import items
         * based on selection
         *
         * @param array $data Import data
         *
         * @return array|WP_Error
         */
        public function prep_import_data($data = array())
        {
        }
        public function get_importer()
        {
        }
        public function get_content_type()
        {
        }
        /**
         * Translates the posttype-driven content types to content types that the CSV importer knows
         *
         * @param string $content_type Content Type
         *
         * @return string CSV Importer compatible content type
         */
        public function get_csv_content_type($content_type = \null)
        {
        }
        /**
         * Gets the available post types for importing
         *
         * @return array Array of Post Type Objects
         */
        public function get_import_post_types()
        {
        }
        /**
         * Returns the path to the CSV file.
         *
         * @since 4.6.15
         *
         * @return bool|false|string Either the absolute path to the CSV file or `false` on failure.
         */
        protected function get_file_path()
        {
        }
        public function reset_tracking_options()
        {
        }
        public function continue_import()
        {
        }
        /**
         * If a custom category has been specified, set it in the importer
         *
         * @param Tribe__Events__Importer__File_Importer $importer Importer object
         *
         * @return Tribe__Events__Importer__File_Importer
         */
        public function maybe_set_default_category($importer)
        {
        }
        /**
         * If a custom post_status has been specified, set it in the importer
         *
         * @param Tribe__Events__Importer__File_Importer $importer Importer object
         *
         * @return Tribe__Events__Importer__File_Importer
         */
        public function maybe_set_default_post_status($importer)
        {
        }
        protected function do_import(\Tribe__Events__Importer__File_Importer $importer)
        {
        }
        protected function log_import_results(\Tribe__Events__Importer__File_Importer $importer)
        {
        }
    }
    class Tribe__Events__Aggregator__Record__Eventbrite extends \Tribe__Events__Aggregator__Record__Abstract
    {
        public $origin = 'eventbrite';
        /**
         * Queues the import on the Aggregator service
         */
        public function queue_import($args = array())
        {
        }
        /**
         * Gets the Regular Expression string to match a source URL
         *
         * @since 4.6.18
         *
         * @return string
         */
        public static function get_source_regexp()
        {
        }
        /**
         * Returns the Eventbrite authorization token generation URL.
         *
         * @param array $args
         *
         * @return string Either the URL to obtain Eventbrite authorization token or an empty string.
         */
        public static function get_auth_url($args = array())
        {
        }
        /**
         * Public facing Label for this Origin
         *
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * Filters the event to ensure that a proper URL is in the EventURL
         *
         * @param array $event Event data
         * @param Tribe__Events__Aggregator__Record__Abstract $record Aggregator Import Record
         *
         * @return array
         */
        public static function filter_event_to_force_url($event, $record)
        {
        }
        /**
         * Filters the event to ensure that fields are preserved that are not otherwise supported by Eventbrite
         *
         * @param array $event Event data
         * @param Tribe__Events__Aggregator__Record__Abstract $record Aggregator Import Record
         *
         * @return array
         */
        public static function filter_event_to_preserve_fields($event, $record)
        {
        }
        /**
         * Add Site URL for Eventbrite Requets
         *
         * @since 4.6.18
         *
         * @param array $args EA REST arguments
         * @param Tribe__Events__Aggregator__Record__Abstract $record Aggregator Import Record
         *
         * @return mixed
         */
        public static function filter_add_site_get_import_data($args, $record)
        {
        }
        /**
         * When "(do not override)" status option is used, this ensures the imported event's status matches its original Eventbrite.com status.
         *
         * @since 4.8.1
         *
         * @param string $post_status The event's post status before being filtered.
         * @param array $event The WP event data about to imported and saved to the DB.
         * @param Tribe__Events__Aggregator__Record__Abstract $record The import's EA Import Record.
         * @return array
         */
        public static function filter_setup_do_not_override_post_status($post_status, $event, $record)
        {
        }
        /**
         * Helps to ensure that post status selection UIs always default to "(do not override)" for Eventbrite imports.
         *
         * @since 4.8.1
         *
         * @return string The key for the "(do not override)" option.
         */
        public static function filter_set_default_post_status()
        {
        }
    }
    class Tribe__Events__Aggregator__Record__ICS extends \Tribe__Events__Aggregator__Record__Abstract
    {
        public $origin = 'ics';
        /**
         * Creates an import record
         *
         * @param string $origin EA origin
         * @param string $type Type of record to create - import or schedule
         * @param array $args Post type args
         *
         * @return WP_Post|WP_Error
         */
        public function create($type = 'manual', $args = [], $meta = [])
        {
        }
        /**
         * Public facing Label for this Origin
         *
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * Filters the event to ensure that fields are preserved that are not otherwise supported by ICS
         *
         * @param array $event Event data
         * @param Tribe__Events__Aggregator__Record__Abstract $record Aggregator Import Record
         *
         * @return array
         */
        public static function filter_event_to_preserve_fields($event, $record)
        {
        }
    }
    /**
     * Class Tribe__Events__Aggregator__Record__Items
     *
     * @since 4.6.16
     */
    class Tribe__Events__Aggregator__Record__Items
    {
        /**
         * @var array
         */
        protected $items;
        /**
         * @var array
         */
        protected $original_items;
        /**
         * Tribe__Events__Aggregator__Record__Items constructor.
         *
         * @since 4.6.16
         *
         * @param array $items A list of items to process, the format should be the one used by EA Service
         */
        public function __construct(array $items = [])
        {
        }
        /**
         * Returns the items as modified by the class.
         *
         * @since 4.6.16
         *
         * @return array
         */
        public function get_items()
        {
        }
        /**
         * Resets, or sets, the items the class should handle.
         *
         * @since 4.6.16
         *
         * @param array $items
         */
        public function set_items(array $items)
        {
        }
        /**
         * Parses the items to find those that depend on linked posts defined by other items
         * and marks them as dependent.
         *
         * @since 4.6.16
         *
         * @return $this
         */
        public function mark_dependencies()
        {
        }
        /**
         * Returns the items originally set via the constructor the `set_items` method.
         *
         * @since 4.6.16
         *
         * @return array
         */
        public function get_original_items()
        {
        }
    }
    class Tribe__Events__Aggregator__Record__List_Table extends \WP_List_Table
    {
        public $tab;
        public $page;
        public $user;
        public function __construct($args = [])
        {
        }
        /**
         *
         * @global array    $avail_post_stati
         * @global WP_Query $wp_query
         * @global int      $per_page
         * @global string   $mode
         */
        public function prepare_items()
        {
        }
        public function nonce()
        {
        }
        /**
         * Get a list of sortable columns. The format is:
         * 'internal-name' => 'orderby'
         * or
         * 'internal-name' => array( 'orderby', true )
         *
         * The second format will make the initial sorting order be descending
         *
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * @param string $which
         */
        protected function extra_tablenav($which)
        {
        }
        /**
         * Get an associative array ( option_name => option_title ) with the list
         * of bulk actions available on this table.
         *
         *
         * @return array
         */
        protected function get_bulk_actions()
        {
        }
        /**
         * Display the bulk actions dropdown.
         *
         * @param string $which The location of the bulk actions: 'top' or 'bottom'.
         *                      This is designated as optional for backwards-compatibility.
         */
        protected function bulk_actions($which = '')
        {
        }
        /**
         * Get an associative array ( id => link ) with the list
         * of views available on this table.
         *
         * @return array
         */
        protected function get_views()
        {
        }
        /**
         *
         * @return array
         */
        public function get_columns()
        {
        }
        protected function handle_row_actions($post, $column_name, $primary)
        {
        }
        public function column_source($post)
        {
        }
        public function column_imported($post)
        {
        }
        public function column_frequency($post)
        {
        }
        public function column_total($post)
        {
        }
        /**
         * Handles the checkbox column output.
         *
         * @since 4.3.0
         * @access public
         *
         * @param WP_Post $post The current WP_Post object.
         */
        public function column_cb($post)
        {
        }
        /**
         * Displays the pagination.
         *
         * @since 5.3.0
         * @access protected
         *
         * @param string $which Equal to NULL, 'top' or 'bottom'.
         */
        protected function pagination($which)
        {
        }
    }
    class Tribe__Events__Aggregator__Record__Meetup extends \Tribe__Events__Aggregator__Record__Abstract
    {
        public $origin = 'meetup';
        /**
         * Queues the import on the Aggregator service
         */
        public function queue_import($args = [])
        {
        }
        /**
         * Gets the Regular Expression string to match a source URL
         *
         * @since 4.6.18
         *
         * @return string
         */
        public static function get_source_regexp()
        {
        }
        /**
         * Public facing Label for this Origin
         *
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * Filters the event to ensure that a proper URL is in the EventURL
         *
         * @param array $event Event data
         * @param Tribe__Events__Aggregator__Record__Abstract $record Aggregator Import Record
         *
         * @return array
         */
        public static function filter_event_to_force_url($event, $record)
        {
        }
        /**
         * Filters the event to ensure that fields are preserved that are not otherwise supported by Meetup
         *
         * @param array $event Event data
         * @param Tribe__Events__Aggregator__Record__Abstract $record Aggregator Import Record
         *
         * @return array
         */
        public static function filter_event_to_preserve_fields($event, $record)
        {
        }
        /**
         * Returns the Meetup authorization token generation URL.
         *
         * @since 4.9.6
         *
         * @param array $args
         *
         * @return string Either the URL to obtain Eventbrite authorization token or an empty string.
         */
        public static function get_auth_url($args = array())
        {
        }
    }
    class Tribe__Events__Aggregator__Record__Queue implements \Tribe__Events__Aggregator__Record__Queue_Interface
    {
        public static $in_progress_key = 'tribe_aggregator_queue_';
        public static $queue_key = 'queue';
        public static $activity_key = 'activity';
        /**
         * @var Tribe__Events__Aggregator__Record__Abstract
         */
        public $record;
        public $is_fetching = \false;
        protected $importer;
        /**
         * @var Tribe__Events__Aggregator__Record__Activity
         */
        protected $activity;
        /**
         * Holds the Items that will be processed
         *
         * @var array
         */
        public $items = [];
        /**
         * Holds the Items that will be processed next
         *
         * @var array
         */
        public $next = [];
        /**
         * How many items are going to be processed
         *
         * @var int
         */
        public $total = 0;
        /**
         * @var Tribe__Events__Aggregator__Record__Queue_Cleaner
         */
        protected $cleaner;
        /**
         * Whether any real processing should happen for the queue or not.
         *
         * @var bool
         */
        protected $null_process = \false;
        /**
         * @var bool Whether this queue instance has acquired the lock or not.
         */
        protected $has_lock = \false;
        /**
         * Tribe__Events__Aggregator__Record__Queue constructor.
         *
         * @param int|Tribe__Events__Aggregator__Record__Abstract       $record
         * @param array                                                 $items
         * @param Tribe__Events__Aggregator__Record__Queue_Cleaner|null $cleaner
         */
        public function __construct($record, $items = [], \Tribe__Events__Aggregator__Record__Queue_Cleaner $cleaner = \null)
        {
        }
        public function __get($key)
        {
        }
        protected function init_queue($items)
        {
        }
        protected function load_queue()
        {
        }
        public function activity()
        {
        }
        /**
         * Allows us to check if the Events Data has still pending
         *
         * @return boolean
         */
        public function is_fetching()
        {
        }
        /**
         * Shortcut to check how many items are going to be processed next
         *
         * @return int
         */
        public function count()
        {
        }
        /**
         * Shortcut to check if this queue is empty or it has a null process.
         *
         * @return boolean `true` if this queue instance has acquired the lock and
         *                 the count is 0, `false` otherwise.
         */
        public function is_empty()
        {
        }
        /**
         * Gets the queue's total
         *
         * @return int
         */
        protected function get_total()
        {
        }
        /**
         * Saves queue data to relevant meta keys on the post
         *
         * @return self
         */
        protected function save()
        {
        }
        /**
         * Processes a batch for the queue
         *
         * @return self|Tribe__Events__Aggregator__Record__Activity
         */
        public function process($batch_size = \null)
        {
        }
        /**
         * Returns the total progress made on processing the queue so far as a percentage.
         *
         * @return int
         */
        public function progress_percentage()
        {
        }
        /**
         * Sets a flag to indicate that update work is in progress for a specific event:
         * this can be useful to prevent collisions between cron-based updated and realtime
         * updates.
         *
         * The flag naturally expires after an hour to allow for recovery if for instance
         * execution hangs half way through the processing of a batch.
         */
        public function set_in_progress_flag()
        {
        }
        /**
         * Clears the in progress flag.
         */
        public function clear_in_progress_flag()
        {
        }
        /**
         * Indicates if the queue for the current event is actively being processed.
         *
         * @return bool
         */
        public function is_in_progress()
        {
        }
        /**
         * Returns the primary post type the queue is processing
         *
         * @return string
         */
        public function get_queue_type()
        {
        }
        /**
         * Acquires the global (db stored) queue lock if available.
         *
         * @since 4.5.12
         *
         * @return bool Whether the lock could be acquired or not if another instance/process has
         *              already acquired the lock.
         */
        protected function acquire_lock()
        {
        }
        /**
         * Release the queue lock if this instance of the queue holds it.
         *
         * @since 4.5.12
         *
         * @return bool
         */
        protected function release_lock()
        {
        }
        /**
         * Whether the current queue process is stuck or not.
         *
         * @since 4.6.21
         *
         * @return mixed
         */
        public function is_stuck()
        {
        }
        /**
         * Orderly closes the queue process.
         *
         * @since 4.6.21
         *
         * @return bool
         */
        public function kill_queue()
        {
        }
        /**
         * Whether the current queue process failed or not.
         *
         * @since 4.6.21
         *
         * @return bool
         */
        public function has_errors()
        {
        }
        /**
         * Returns the queue error message.
         *
         * @since 4.6.21
         *
         * @return string
         */
        public function get_error_message()
        {
        }
    }
    class Tribe__Events__Aggregator__Record__Queue_Cleaner
    {
        /**
         * Default is 12hrs.
         *
         * @var int The time a record is allowed to stall before have the status set to to failed since its creation in
         *          seconds.
         */
        protected $time_to_live = \HOUR_IN_SECONDS * 12;
        /**
         * @var int The time a record is allowed to stall before having
         *          its status set to failed in seconds.
         */
        protected $stall_limit = \HOUR_IN_SECONDS;
        /**
         * Removes duplicate records for the same import ID.
         *
         * While it makes sense to keep track of past import records it does not make sense
         * to keep more than one pending record for the same import ID.
         *
         * @param Tribe__Events__Aggregator__Record__Abstract $record A record object or a record post ID.
         *
         * @return int[] An array containing the deleted posts IDs.
         */
        public function remove_duplicate_pending_records_for(\Tribe__Events__Aggregator__Record__Abstract $record)
        {
        }
        /**
         * Depending from how long a record has been pending and the allowed lifespan
         * update the record status to failed.
         *
         * @param Tribe__Events__Aggregator__Record__Abstract $record
         *
         * @return bool If the record status has been set to failed or not.
         */
        public function maybe_fail_stalled_record(\Tribe__Events__Aggregator__Record__Abstract $record)
        {
        }
        /**
         * Allow external caller to define the amount of the time to live in seconds.
         *
         * @since 5.3.0
         *
         * @param int $time_to_live Live time in seconds default to 12 hours.
         *
         * @return $this
         */
        public function set_time_to_live($time_to_live)
        {
        }
        /**
         * Get the current value of time to live setting an integer in seconds, default to 12 hours.
         *
         * @since 5.3.0
         *
         * @return int The number of time to consider a record alive.
         */
        public function get_time_to_live()
        {
        }
        /**
         * Gets the time, in seconds, after which a pending record is considered stalling.
         *
         * @return int The number in seconds for a record to be stalled
         */
        public function get_stall_limit()
        {
        }
        /**
         * Sets the time, in seconds, after which a pending record is considered stalling.
         *
         * @param int $stall_limit Allow to set the stall limit of a record.
         */
        public function set_stall_limit($stall_limit)
        {
        }
    }
    class Tribe__Events__Aggregator__Record__Queue_Processor
    {
        public static $scheduled_key = 'tribe_aggregator_process_insert_records';
        /**
         * Which Action will be triggered as a single Cron event
         *
         * @since  4.5.9
         *
         * @var    string
         */
        public static $scheduled_single_key = 'tribe_aggregator_single_process_insert_records';
        /**
         *Number of items to be processed in a single batch.
         *
         * @var int
         */
        public static $batch_size = 5;
        /**
         *Number of items to be processed in a single small batch.
         *
         * @var int
         */
        public static $small_batch_size = 5;
        /**
         * Number of items in the current batch processed so far.
         *
         * @var int
         */
        protected $processed = 0;
        /**
         * @var int
         */
        protected $current_record_id = 0;
        /**
         * @var Tribe__Events__Aggregator__Record__Queue_Interface
         */
        public $current_queue;
        public function __construct()
        {
        }
        public function action_init()
        {
        }
        /**
         * Configures a scheduled task to handle "background processing" of import record insertions/updates.
         */
        public function manage_scheduled_task()
        {
        }
        /**
         * Runs upon plugin activation, registering our scheduled task used to process
         * batches of pending import record inserts/updates.
         */
        public function register_scheduled_task()
        {
        }
        /**
         * Fires upon plugin deactivation.
         */
        public function clear_scheduled_task()
        {
        }
        /**
         * Process a batch of queued items for a specific import record.
         *
         * This is typically used when processing a small number of instances immediately upon
         * an import record queue being updated for a particular import record, or to facilitate
         * batches being updated via an ajax update loop.
         *
         * The default number of items processed in a single batch is 10, which can be
         * overridden using the tribe_events_aggregator_small_batch_size filter hook
         *
         * @param int $record_id
         * @param int $batch_size
         */
        public function process_batch($record_id, $batch_size = \null)
        {
        }
        /**
         * Processes the next waiting batch of Import Record posts, if there are any.
         *
         * @param int $batch_size
         */
        public function process_queue($batch_size = \null)
        {
        }
        public function set_current_queue(\Tribe__Events__Aggregator__Record__Queue_Interface $queue)
        {
        }
        /**
         * Obtains the post ID of the next record which has a queue of items in need
         * of processing.
         *
         * If no records in need of further processing can be found it will return bool false.
         *
         * @since 5.3.0 Inclusion of a $cache param for performance purposes.
         *
         * @param boolean $interactive_only Whether or not we should look for imports that were kicked off interactively
         * @param boolean $cache            When checking on every request we should utilize transient caching to prevent hitting the DB every time.
         *
         * @return boolean|integer
         */
        public function next_waiting_record($interactive_only = \false, $cache = \false)
        {
        }
        /**
         * Processes the current import record queue. May return boolean false if it is unable to continue.
         *
         * @return bool
         */
        protected function do_processing()
        {
        }
        /**
         * Returns true if a non-empty queue exists for the current record, else returns false.
         *
         * @return bool
         */
        protected function get_current_queue()
        {
        }
        /**
         * Determines if the batch job is complete.
         *
         * Currently this is simply a measure of the number of instances processed against
         * the batch size limit - however it could potentially be expanded to include an
         * additional time based check.
         *
         * @return bool
         */
        protected function batch_complete()
        {
        }
        /**
         * Builds the correct class of queue.
         *
         * @since 4.6.16
         *
         * @param int|Tribe__Events__Aggregator__Record__Abstract $record     A record object or ID
         * @param array|string                                    $items
         * @param bool                                            $use_legacy Whether to use the legacy queue processor or not.
         *
         * @return Tribe__Events__Aggregator__Record__Queue_Interface
         */
        public static function build_queue($record, $items = \null, $use_legacy = \false)
        {
        }
    }
    /**
     * Facilitates "realtime" processing of an import result insertion queue while the user
     * remains within the editor by means of an ajax update loop.
     */
    class Tribe__Events__Aggregator__Record__Queue_Realtime
    {
        /** @var Tribe__Events__Aggregator__Record__Queue_Interface */
        protected $queue;
        /** @var int */
        protected $record_id;
        /**
         * The Queue_Realtime constructor method.
         *
         * @param Tribe__Events__Aggregator__Record__Queue_Interface|null           $queue An optional Queue instance.
         * @param Tribe__Events__Ajax__Operations|null                    $ajax_operations An optional Ajax Operations instance.
         * @param Tribe__Events__Aggregator__Record__Queue_Processor|null $queue_processor An optional Queue_Processor instance.
         */
        public function __construct(\Tribe__Events__Aggregator__Record__Queue_Interface $queue = \null, \Tribe__Events__Ajax__Operations $ajax_operations = \null, \Tribe__Events__Aggregator__Record__Queue_Processor $queue_processor = \null)
        {
        }
        /**
         * Adds additional data to the tribe_aggregator object (available to our JS).
         */
        public function update_loop_vars()
        {
        }
        public function render_update_message()
        {
        }
        /**
         * Action to reply every time a heart beat is executed to send the progress of EA if an EA record is present.
         *
         * @since 5.4.0 Change the method signature to be a little bit less aggressive with enforcing types.
         *
         * @param array<string, mixed> $response The current response object.
         * @param array<string, mixed> $data     An array with the data from the client.
         *
         * @return array<string, mixed> An array used to construct the heart beat response.
         */
        public function receive_heartbeat($response, $data)
        {
        }
        /**
         * Handle queue ajax requests
         */
        public function ajax()
        {
        }
        /**
         * @return string
         */
        public function get_ajax_nonce()
        {
        }
        /**
         * Generates the nonce action string on an event and user base.
         *
         * @param int|null $event_id An event post ID to override the instance defined one.
         *
         * @return string
         */
        public function get_ajax_nonce_action($record_id = \null)
        {
        }
        /**
         * @return mixed|string|void
         */
        public function get_unable_to_continue_processing_data()
        {
        }
        /**
         * Returns the progress message data.
         *
         * @param Tribe__Events__Aggregator__Record__Queue_Interface $queue
         * @param int $percentage
         * @param bool $done
         *
         * @return mixed|string|void
         */
        public function get_progress_message_data($queue, $percentage, $done)
        {
        }
    }
    /**
     * Models a record for a no longer, or not still, supported origin.
     *
     * Passing around an instance of an unsupported origin record should not break the code.
     *
     * @since 4.6.25
     */
    /**
     * Class Tribe__Events__Aggregator__Record__Unsupported
     *
     * @since 4.6.25
     */
    class Tribe__Events__Aggregator__Record__Unsupported extends \Tribe__Events__Aggregator__Record__Abstract
    {
        /**
         * Tribe__Events__Aggregator__Record__Unsupported constructor.
         *
         * Overrides the base method to play along nicely for the request context
         * that builds this post and then remove it, if clean is allowed, on `shutdown`.
         *
         * @param int|WP_Post|null $post The record post or post ID.
         */
        public function __construct($post = \null)
        {
        }
        /**
         * Public facing Label for this Origin
         *
         * @since 4.6.25
         *
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * Overrides the base method short-circuiting the check for the
         * schedule time to return false.
         *
         * @since 4.6.25
         *
         * @return bool An indication that it's never time for an unsupported record to run.
         */
        public function is_schedule_time()
        {
        }
        /**
         * Returns the unsupported record hash.
         *
         * The hash is usually built from the record meta; in the case
         * of an unsupported record that's skipped and a default string
         * is returned. Since the hash is usually compared to strings built
         * the same way the returned fixed hash will never match.
         *
         * @since 4.6.25
         *
         * @return string The record fixed hash.
         */
        public function get_data_hash()
        {
        }
        /**
         * Deletes the base post for this record.
         *
         * @since 4.6.25
         */
        public function delete_post()
        {
        }
    }
    class Tribe__Events__Aggregator__Record__Url extends \Tribe__Events__Aggregator__Record__Abstract
    {
        /**
         * @var string
         */
        public $origin = 'url';
        /**
         * Public facing Label for this Origin
         *
         * @return string
         */
        public function get_label()
        {
        }
    }
    /**
     * Class Tribe__Events__Aggregator__Record__Void_Queue
     *
     * @since 4.6.22
     */
    class Tribe__Events__Aggregator__Record__Void_Queue implements \Tribe__Events__Aggregator__Record__Queue_Interface
    {
        /**
         * The error string for the queue.
         *
         * @var string
         */
        protected $error;
        /**
         * The WP_Error instance used to build the void queue, if any.
         *
         * @var WP_Error
         */
        protected $wp_error;
        /**
         * Tribe__Events__Aggregator__Record__Void_Queue constructor.
         *
         * @param string|WP_Error $error The reason, in form of a string or
         *                               `WP_Error` object, why this queue
         *                               is void.
         */
        public function __construct($error)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function activity()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function count()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function is_empty()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function process($batch_size = \null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function progress_percentage()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function set_in_progress_flag()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function clear_in_progress_flag()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function is_in_progress()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function get_queue_type()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function is_stuck()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function kill_queue()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function has_errors()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function get_error_message()
        {
        }
        /**
         * Returns the `WP_Error` instance used to build this void queue, if any.
         *
         * @since 4.6.22
         *
         * @return WP_Error|null The `WP_Error` used to build this void queue or `null`
         *                       if no `WP_Error` object was used to build this void queue.
         */
        public function get_wp_error()
        {
        }
        /**
         * This Queue never fetches on external resources so is always `false`.
         *
         * @return bool The state of the queue with external resources.
         */
        public function is_fetching()
        {
        }
    }
    class Tribe__Events__Aggregator__Record__gCal extends \Tribe__Events__Aggregator__Record__Abstract
    {
        public $origin = 'gcal';
        /**
         * Public facing Label for this Origin
         *
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * Filters the event to ensure that fields are preserved that are not otherwise supported by ICS
         *
         * @param array $event Event data
         * @param Tribe__Events__Aggregator__Record__Abstract $record Aggregator Import Record
         *
         * @return array
         */
        public static function filter_event_to_preserve_fields($event, $record)
        {
        }
    }
    class Tribe__Events__Aggregator__Record__iCal extends \Tribe__Events__Aggregator__Record__Abstract
    {
        public $origin = 'ical';
        /**
         * Public facing Label for this Origin
         *
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * Filters the event to ensure that fields are preserved that are not otherwise supported by iCal
         *
         * @param array $event Event data
         * @param Tribe__Events__Aggregator__Record__Abstract $record Aggregator Import Record
         *
         * @return array
         */
        public static function filter_event_to_preserve_fields($event, $record)
        {
        }
    }
    class Tribe__Events__Aggregator__Records
    {
        /**
         * Slug of the Post Type used for Event Aggregator Records
         *
         * @var string
         */
        public static $post_type = 'tribe-ea-record';
        /**
         * Base slugs for all the EA Record Post Statuses
         *
         * @var stdClass
         */
        public static $status = [
            'success' => 'tribe-ea-success',
            'failed' => 'tribe-ea-failed',
            'pending' => 'tribe-ea-pending',
            // Used to mark which are the Original Scheduled Import
            'schedule' => 'tribe-ea-schedule',
            // Currently Not Displayed
            'draft' => 'tribe-ea-draft',
        ];
        /**
         * @var string The time, in "Y-m-d H:i:s" format, that's used to query records.
         */
        protected $after_time;
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        /**
         * Setup all the hooks and filters
         *
         * @return void
         */
        public function __construct()
        {
        }
        public function filter_edit_link($link, $post, $context)
        {
        }
        public function filter_delete_link($link, $post, $context)
        {
        }
        /**
         * Register and return the Aggregator Record Custom Post Type
         * Instead of having a method for returning and another registering
         * we do it all in one single method depending if it exists or not
         *
         * @return stdClass|WP_Error
         */
        public function get_post_type()
        {
        }
        /**
         * Register and return the Aggregator Record Custom Post Status
         * Instead of having a method for returning and another registering
         * we do it all in one single method depending if it exists or not
         *
         * @param  string $status Which status object you are looking for
         *
         * @return stdClass|WP_Error|array
         */
        public function get_status($status = \null)
        {
        }
        public function count_by_origin($type = ['schedule', 'manual'], $raw_statuses = '')
        {
        }
        /**
         * Returns an appropriate Record object for the given origin.
         *
         * @param string $origin The record import origin.
         * @param int|WP_Post The record post or post ID.
         *
         * @return Tribe__Events__Aggregator__Record__Abstract An instance of the correct record class
         *                                                     for the origin or an unsupported record
         *                                                     instance.
         */
        public function get_by_origin($origin, $post = \null)
        {
        }
        /**
         * Returns an appropriate Record object for the given post id
         *
         * @param int $post_id WP Post ID of record
         *
         * @return Tribe__Events__Aggregator__Record__Abstract|WP_Error|null
         */
        public function get_by_post_id($post)
        {
        }
        /**
         * Returns an appropriate Record object for the given import id
         *
         * @param int $import_id Aggregator import id
         * @param array $args An array of arguments to override the default ones.
         *
         * @return Tribe__Events__Aggregator__Record__Abstract|WP_Error
         */
        public function get_by_import_id($import_id, array $args = [])
        {
        }
        /**
         * Returns an appropriate Record object for the given event id
         *
         * @param  int $event_id   Post ID for the Event
         *
         * @return Tribe__Events__Aggregator__Record__Abstract|WP_Error
         */
        public function get_by_event_id($event_id)
        {
        }
        /**
         * Returns a WP_Query object built using some default arguments for records.
         *
         * @param array $args An array of arguments to override the default ones.
         *
         * @return WP_Query The built WP_Query object; since it's built with arguments
         *                  the query will run, actually hitting the database, before
         *                  returning.
         */
        public function query($args = [])
        {
        }
        /**
         * Returns whether or not there are any scheduled imports
         *
         * @return boolean
         */
        public function has_scheduled()
        {
        }
        /**
         * Returns whether or not there have been any import requests
         *
         * @return boolean
         */
        public function has_history()
        {
        }
        /**
         * Filter the Admin page tile and add Tab Name
         *
         * @param  string $admin_title Full Admin Title
         * @param  string $title       Original Title from the Page
         *
         * @return string
         */
        public function filter_admin_title($admin_title, $title)
        {
        }
        /**
         * Fetches the current active tab
         *
         * @return object An instance of the Class used to create the Tab
         */
        public function get_active()
        {
        }
        public function action_do_import()
        {
        }
        public function filter_post_origin()
        {
        }
        /**
         * Adds the import record and origin to the imported event
         *
         * @param int $id Event ID
         * @param int $record_id Import Record ID
         * @param string $origin Import Origin
         */
        public function add_record_to_event($id, $record_id, $origin)
        {
        }
        /**
         * Prefixes a String to be the Key for Record meta
         *
         * @since  4.3
         *
         * @param  string $str Append to the Prefix
         *
         * @return string
         */
        public function prefix_meta($str = \null)
        {
        }
        /**
         * Fetches the Amount of seconds that we will hold a Record Log on the Posts Table
         *
         * @since  4.3.2
         *
         * @return int
         */
        public function get_retention()
        {
        }
        /**
         * Filters the records query to only return records after a defined time.
         *
         * @since 4.5.11
         *
         * @param string $where The original WHERE clause.
         *
         * @return string The updated WHERE clause.
         */
        public function filter_posts_where($where)
        {
        }
        /**
         * Hooks all the actions and filters needed by the class.
         *
         * @since 4.6.15
         */
        public function hook()
        {
        }
        /**
         * Filter records by source and data hash.
         *
         * @param string $source    Source value.
         * @param string $data_hash Data hash.
         *
         * @since 4.6.25
         *
         * @return Tribe__Events__Aggregator__Record__Abstract|false Record object or false if not found.
         */
        public function find_by_data_hash($source, $data_hash)
        {
        }
    }
    class Tribe__Events__Aggregator__Service
    {
        /**
         * @var Tribe__Events__Aggregator__Service Event Aggregator Service class
         */
        protected static $instance;
        /**
         * @var Tribe__Events__Aggregator Event Aggregator object
         */
        protected $aggregator;
        /**
         * @var object
         */
        protected $origins = \false;
        /**
         * @var string
         */
        public static $auth_transient = 'tribe_aggregator_has_eventbrite_authorized_response';
        /**
         * The name of the transient containing the Meetup authorization response.
         *
         * @since 4.9.6
         *
         * @var string
         */
        public static $auth_transient_meetup = 'tribe_aggregator_has_meetup_authorized_response';
        /**
         * API varibles stored in a single Object
         *
         * @var array $api {
         *     @type string     $key         License key for the API (PUE)
         *     @type string     $version     Which version of we are dealing with
         *     @type string     $domain      Domain in which the API lies
         *     @type string     $path        Path of the API on the domain above
         *     @type array      $licenses    Array with plugins and licenses that we will pass to EA
         * }
         */
        public $api = ['key' => \null, 'version' => 'v1', 'domain' => 'https://ea.theeventscalendar.com/', 'path' => 'api/aggregator/', 'licenses' => []];
        /**
         * @var Tribe__Events__Aggregator__API__Requests
         */
        protected $requests;
        /**
         * Static Singleton Factory Method
         *
         * @return Tribe__Events__Aggregator__Service
         */
        public static function instance()
        {
        }
        /**
         * Constructor!
         */
        public function __construct(\Tribe__Events__Aggregator__API__Requests $requests)
        {
        }
        /**
         * Create a clean way of fetching API variables
         *
         * @return stdClass|WP_Error
         */
        public function api()
        {
        }
        /**
         * Builds an endpoint URL
         *
         * @param string $endpoint  Endpoint for the Event Aggregator service
         * @param array  $data      Parameters to add to the URL
         *
         * @return string|WP_Error
         */
        public function build_url($endpoint, $data = [])
        {
        }
        /**
         * Performs a GET request against the Event Aggregator service
         *
         * @param string $endpoint   Endpoint for the Event Aggregator service
         * @param array  $data       Parameters to send to the endpoint
         *
         * @return stdClass|WP_Error
         */
        public function get($endpoint, $data = [])
        {
        }
        /**
         * Performs a POST request against the Event Aggregator service
         *
         * @param string $endpoint   Endpoint for the Event Aggregator service
         * @param array  $data       Parameters to send to the endpoint
         *
         * @return stdClass|WP_Error
         */
        public function post($endpoint, $data = [])
        {
        }
        /**
         * Fetch origins from service
         *
         * @param bool $return_error Whether response errors should be returned, if any.
         *
         * @return array The origins array of an array containing the origins first and an error second if `return_error` is set to `true`.
         */
        public function get_origins($return_error = \false)
        {
        }
        /**
         * Get Eventbrite Arguments for EA
         *
         * @since 4.6.18
         *
         * @return mixed|void
         */
        public function get_eventbrite_args()
        {
        }
        /**
         * Fetch Eventbrite Extended Token from the Service
         *
         * @since 4.6.18
         *
         *  @return stdClass|WP_Error
         */
        public function has_eventbrite_authorized()
        {
        }
        /**
         * Disconnect Eventbrite Token on EA
         *
         * @since 4.6.18
         *
         * @return stdClass|WP_Error
         */
        public function disconnect_eventbrite_token()
        {
        }
        /**
         * Fetch import data from service
         *
         * @param string $import_id ID of the Import Record
         *
         * @param array $data
         *
         * @return stdClass|WP_Error
         */
        public function get_import($import_id, $data = [])
        {
        }
        /**
         * Creates an import
         *
         * Note: This method exists because WordPress by default doesn't allow multipart/form-data
         *       with boundaries to happen
         *
         * @param array $args {
         *     Array of arguments. See REST docs for details. 1 exception listed below:
         *
         *     @type array $source_file Source file array using the $_FILES array values
         * }
         *
         * @return string
         */
        public function post_import($args)
        {
        }
        /**
         * Update the details of an existing import into EA server.
         *
         * @since 5.1.5
         *
         * @param $import_id string The ID of the import to be updated.
         * @param $args      array An key, value array representing the values to update on the EA server.
         *
         * @return object|stdClass|string|WP_Error Response from EA server.
         */
        public function update_import($import_id, $args)
        {
        }
        /**
         * Fetches an image from the Event Aggregator service
         *
         * @param string $image_id Image ID to fetch
         * @param  Tribe__Events__Aggregator__Record__Abstract $record    Record Object
         *
         * @return stdClass|WP_Error
         */
        public function get_image($image_id, $record)
        {
        }
        /**
         * Returns a service message based on key
         *
         * @param string $key     Service Message index
         * @param array  $args    An array of arguments that will be fed to a `sprintf` like function to replace
         *                        placeholders.
         * @param string $default A default message that should be returned should the message code not be found; defaults
         *                        to the unknown message.
         *
         * @return string
         */
        public function get_service_message($key, $args = [], $default = \null)
        {
        }
        /**
         * Returns usage limits
         *
         * @param string $type Type of limits to return
         * @param boolean $ignore_cache Whether or not cache should be ignored when fetching the value
         *
         * @return array|int Either an array detailing the limit information (used, remaining) or `0` if
         *                   the limit for the specified type could not be determined.
         */
        public function get_limit($type, $ignore_cache = \false)
        {
        }
        /**
         * Returns limit usage
         *
         * @param string $type Type of usage to return
         * @param boolean $ignore_cache Whether or not cache should be ignored when fetching the value
         *
         * @return array
         */
        public function get_usage($type, $ignore_cache = \false)
        {
        }
        /**
         * Returns whether or not the limit has been exceeded
         *
         * @param boolean $ignore_cache Whether or not cache should be ignored when fetching the value
         *
         * @return boolean
         */
        public function is_over_limit($ignore_cache = \false)
        {
        }
        /**
         * Returns the currently used imports for the day
         *
         * @param boolean $ignore_cache Whether or not cache should be ignored when fetching the value
         *
         * @return int
         */
        public function get_limit_usage($ignore_cache = \false)
        {
        }
        /**
         * Returns the remaining imports for the day
         *
         * @param boolean $ignore_cache Whether or not cache should be ignored when fetching the value
         *
         * @return int
         */
        public function get_limit_remaining($ignore_cache = \false)
        {
        }
        /**
         * Registers the message map used to translate message slugs returned from EA service into localized strings.
         *
         * These messages are delivered by the EA service and don't need to be registered. They just need to exist
         * here so that they can be translated.
         */
        protected function register_messages()
        {
        }
        /**
         * Returns the message used for unknown message codes.
         *
         * @return string
         */
        public function get_unknow_message()
        {
        }
        /**
         * Confirms an import with Event Aggregator Service.
         *
         * @param array $args
         *
         * @return bool Whether the import was confirmed or not.
         */
        public function confirm_import($args)
        {
        }
        /**
         * Returns the default origins array.
         *
         * @since 4.5.11
         *
         * @return array
         */
        protected function get_default_origins()
        {
        }
        /**
         * Applies a limit to the import request.
         *
         * @since 4.5.13
         *
         * @param array $args An array of request arguments.
         *
         * @return mixed
         */
        protected function apply_import_limit($args)
        {
        }
        /**
         * Get Meetup Arguments for EA
         *
         * @since 4.9.6
         *
         * @return mixed|void
         */
        public function get_meetup_args()
        {
        }
        /**
         * Fetch Meetup Extended Token from the Service.
         *
         * @since 4.9.6
         *
         * @param bool $request_security_key Whether to explicitly request the Meetup security key in the response or not.
         *
         * @return stdClass|WP_Error Either the Event Aggregator Service response or a `WP_Error` on failure.
         */
        public function has_meetup_authorized($request_security_key = \false)
        {
        }
        /**
         * Disconnect Meetup Token on EA
         *
         * @since 4.9.6
         *
         * @return stdClass|WP_Error
         */
        public function disconnect_meetup_token()
        {
        }
        /**
         * Fetch Facebook Extended Token from the Service
         *
         * @return stdClass|WP_Error
         *
         * @deprecated 4.6.23
         *
         */
        public function get_facebook_token()
        {
        }
    }
    class Tribe__Events__Aggregator__Settings
    {
        /** * @var Tribe__Events__Aggregator__Settings Event Aggregator settings bootstrap class
         */
        protected static $instance;
        /**
         * Default update authority setting
         *
         * @var string
         */
        public static $default_update_authority = 'overwrite';
        /**
         * Static Singleton Factory Method
         *
         * @return Tribe__Events__Aggregator__Settings
         */
        public static function instance()
        {
        }
        /**
         * A private method to prevent it to be created twice.
         * It will add the methods and setup any dependecies
         *
         * Note: This should load on `plugins_loaded@P10`
         */
        public function __construct()
        {
        }
        /**
         * Hooked to current_screen, this method identifies whether or not eb credentials should be cleared
         *
         * @param WP_Screen $screen
         */
        public function maybe_clear_eb_credentials($screen)
        {
        }
        /**
         * Get EB Security Key
         *
         * @since 4.6.18
         *
         */
        public function get_eb_security_key()
        {
        }
        /**
         * Check if Security Key
         *
         * @since 4.6.18
         *
         */
        public function has_eb_security_key()
        {
        }
        /**
         * Handle Checking if there is a Security Key and Saving It
         *
         * @since 4.6.18
         *
         * @param object $eb_authorized object from EA service for EB Validation
         *
         * @return bool
         */
        public function handle_eventbrite_security_key($eb_authorized)
        {
        }
        /**
         * Disconnect Eventbrite from EA
         *
         * @since 4.6.18
         *
         */
        public function clear_eb_credentials()
        {
        }
        /**
         * Given a URL, tack on the parts of the URL that gets used to disconnect Eventbrite
         *
         * @param string $url
         *
         * @return string
         */
        public function build_disconnect_eventbrite_url($url)
        {
        }
        /**
         * Check if the Eventbrite credentials are connected in EA
         *
         * @return bool Whether the Eventbrite credentials are valid
         */
        public function is_ea_authorized_for_eb()
        {
        }
        /**
         * Hooked to current_screen, this method identifies whether or not eb credentials should be cleared
         *
         * @since 4.9.6
         *
         * @param WP_Screen $screen The current screen instance.
         */
        public function maybe_clear_meetup_credentials($screen)
        {
        }
        /**
         * Get EB Security Key
         *
         * @since 4.9.6
         *
         */
        public function get_meetup_security_key()
        {
        }
        /**
         * Check if Security Key
         *
         * @since 4.9.6
         *
         * @return bool
         *
         */
        public function has_meetup_security_key()
        {
        }
        /**
         * Handle Checking if there is a Security Key and Saving It
         *
         * @since 4.9.6
         *
         * @param object $eb_authorized object from EA service for Meetup Validation
         *
         * @return bool
         */
        public function handle_meetup_security_key($meetup_authorized)
        {
        }
        /**
         * Disconnect Meetup from EA
         *
         * @since 4.9.6
         */
        public function clear_meetup_credentials()
        {
        }
        /**
         * Given a URL, tack on the parts of the URL that gets used to disconnect Meetup
         *
         * @param string $url
         *
         * @since 4.9.6
         *
         * @return string The URL to issue a Meeetup disconnect request to EA Service.
         */
        public function build_disconnect_meetup_url($url)
        {
        }
        /**
         * Check if the Meetup API credentials are connected in EA and correctly set.
         *
         * @since 4.9.6
         *
         * @return bool Whether the Meetup credentials are valid or not.
         */
        public function is_ea_authorized_for_meetup()
        {
        }
        public function do_import_settings_tab($admin_page)
        {
        }
        public function get_all_default_settings()
        {
        }
        /**
         * Returns the default update authority for imports
         *
         * Origin default settings trump global settings
         *
         * @param string $origin Origin
         *
         * @return string
         */
        public function default_update_authority($origin = \null)
        {
        }
        /**
         * Returns the default post status for imports
         *
         * Origin default settings trump global settings
         *
         * @param string $origin Origin
         *
         * @return string
         */
        public function default_post_status($origin = \null)
        {
        }
        /**
         * Returns the default category for imports
         *
         * Origin default settings trump global settings
         *
         * @since 5.16.0 - Fix the default category is added to the origin.
         *
         * @param string $origin The name of the EA origin.
         *
         * @return integer|null The category id for null if none set.
         */
        public function default_category($origin = \null)
        {
        }
        /**
         * Returns the default map setting for imports
         *
         * Origin default settings trump global settings
         *
         * @param string $origin Origin
         *
         * @return string
         */
        public function default_map($origin = \null)
        {
        }
        /**
         * Returns the default value for an origin regarding applicable event settings.
         *
         * Event setttings are those settings related to an event presentation like Show Google Map, Hide from Listings and so on.
         *
         * @param string $origin The origin to look up the settings for.
         *
         * @return string The option value.
         */
        public function default_settings_import($origin)
        {
        }
        /**
         * Returns the range options available for URL imports.
         *
         * Titles are meant to be used in titles and make sense alone, range strings are meant to be used when using the
         * duration in a sentence and do not make sense alone.
         *
         * @param bool $title Whether the values of the array should be for title or for use as range.
         *
         * @return array An associative array of durations and strings.
         */
        public function get_url_import_range_options($title = \true)
        {
        }
        /**
         * Returns the list of limit options that should be applied to imports.
         *
         * @since 4.5.13
         *
         * @return array An array of limit type options in the [ <limit_type> => <limit description> ]
         *               format.
         */
        public function get_import_limit_type_options()
        {
        }
        /**
         * Returns a list of date range options.
         *
         * @since 4.5.13
         *
         * @return array $options An array of arrays in the format
         *                      [ <range duration in seconds> => [ 'title' => <title>, 'range' => <range> ] ].
         */
        protected function get_range_options()
        {
        }
        /**
         * Returns the range options available for imports.
         *
         * Titles are meant to be used in titles and make sense alone, range strings are meant to be used when using the
         * duration in a sentence and do not make sense alone.
         *
         * @since 4.5.13
         *
         * @param bool $title Whether the values of the array should be for title or for use as range.
         *
         * @return array An associative array of durations and strings.
         */
        public function get_import_range_options($title = \true)
        {
        }
        /**
         * Return a list of available options for the import numeric limit.
         *
         * @since 4.5.13
         *
         * @return array $options An array of arrays in the format [ <number> => <number> ].
         */
        public function get_import_limit_count_options()
        {
        }
        /**
         * Returns the default value of the import count limit.
         *
         * @since 4.5.13
         *
         * @return int
         */
        public function get_import_limit_count_default()
        {
        }
        /**
         * Returns the default value of the import count limit.
         *
         * @since 4.5.13
         *
         * @return int
         */
        public function get_import_range_default()
        {
        }
        /**
         * Gets all the possible regular-exp for external url sources
         *
         * @since 4.6.18
         *
         * @return array
         */
        public function get_source_origin_regexp()
        {
        }
        /**
         * Matches which other origin this source url might be
         *
         * @since 4.6.18
         *
         * @param  string $source Which source we are testing against
         *
         * @return string|bool
         */
        public function match_source_origin($source)
        {
        }
        /**
         * Hooked to current_screen, this method identifies whether or not fb credentials should be cleared
         *
         * @deprecated 4.6.23
         *
         * @param WP_Screen $screen
         */
        public function maybe_clear_fb_credentials($screen)
        {
        }
        /**
         * @deprecated 4.6.23
         */
        public function get_fb_credentials()
        {
        }
        /**
         * @deprecated 4.6.23
         */
        public function has_fb_credentials()
        {
        }
        /**
         * @deprecated 4.6.23
         */
        public function clear_fb_credentials()
        {
        }
        /**
         * Given a URL, tack on the parts of the URL that gets used to disconnect Facebook
         *
         * @deprecated 4.6.23
         *
         * @param string $url
         *
         * @return string
         */
        public function build_disconnect_facebook_url($url)
        {
        }
        /**
         * @deprecated 4.6.23
         */
        public function is_fb_credentials_valid($time = \null)
        {
        }
        /**
         * Returns a filtered map of import process slugs to classes.
         *
         * @since 4.6.23
         *
         * @param bool $pretty Whether to return human-readable and "pretty" name for the process
         *                     or the class names.
         *
         * @return array A map of import process slugs to classes or names in the shape
         *               [ <slug> => <class_or_name> ].
         */
        public function get_import_process_options($pretty = \false)
        {
        }
        /**
         * Returns the filtered default import process slug or class.
         *
         * @since 4.6.23
         *
         * @param bool $return_class Whether to return the import process class (`true`) or
         *                           slug (`false`).
         *
         * @return string The default import process slug or class.
         */
        public function get_import_process_default($return_class = \true)
        {
        }
        /**
         * Returns the currently selected, or a specific, import process class.
         *
         * @since 4.6.23
         *
         * @param null|string $slug The slug of the import process class to return; if not specified
         *                          then the default import process class will be returned. If the
         *                          slug is not available then the default class will be returned.
         *
         * @return string The import process class for the specified slug or the default class if the
         *                slug was not specified or is not available.
         */
        public function get_import_process_class($slug = \null)
        {
        }
    }
    class Tribe__Events__Aggregator__Tabs extends \Tribe__Tabbed_View
    {
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        /**
         * Filter the Admin page tile and add Tab Name
         *
         * @param  string $admin_title Full Admin Title
         * @param  string $title       Original Title from the Page
         *
         * @return string
         */
        public function filter_admin_title($admin_title, $title)
        {
        }
        /**
         * Register a new tab on the Aggregator page
         *
         * @param  string|object   $tab  A list of
         * @return object|boolean        The instance of the tab or false if we couldn't register
         */
        public function register($tab)
        {
        }
        /**
         * Checks if a given Tab (slug) is active
         *
         * @param  string  $slug The Slug of the Tab
         *
         * @return boolean       Is this tab active?
         */
        public function is_active($slug = \null)
        {
        }
        /**
         * @return mixed|void
         */
        public function get_default_tab()
        {
        }
        /**
         * Returns the main admin settings URL.
         *
         * @param array|string $args     Query String or Array with the arguments
         * @param boolean      $relative Return a relative URL or absolute
         *
         * @return string
         */
        public function get_url($args, $relative)
        {
        }
    }
    abstract class Tribe__Events__Aggregator__Tabs__Abstract extends \Tribe__Tabbed_View__Tab
    {
        /**
         * Creates a way to include the this tab HTML easily
         *
         * @return string Content of the tab
         */
        public function render()
        {
        }
        /**
         * The constructor for any new Tab on the Aggregator,
         * If you need an action to be hook to any Tab, use this.
         */
        public function __construct()
        {
        }
        /**
         * Fetches the link to this tab
         *
         * @param array|string $args     Query String or Array with the arguments
         * @param boolean      $relative Return a relative URL or absolute
         *
         * @return string
         */
        public function get_url($args = array(), $relative = \false)
        {
        }
        /**
         * Determines if this Tab is currently displayed
         *
         * @return boolean
         */
        public function is_active()
        {
        }
        public function handle_submit()
        {
        }
        /**
         * Validates the meta in relation to the origin.
         *
         * @param string $origin
         * @param array  $meta
         *
         * @return array|WP_Error The updated/validated meta array or A `WP_Error` if the validation failed.
         */
        protected function validate_meta_by_origin($origin, $meta)
        {
        }
        /**
         * Casts a string or int to a timestamp.
         *
         * @param int|string $time
         * @param int        $default The default time that should be used if the conversion of `$time` fails
         *
         * @return int
         */
        protected function to_timestamp($time, $default = '')
        {
        }
    }
    class Tribe__Events__Aggregator__Tabs__Edit extends \Tribe__Events__Aggregator__Tabs__Abstract
    {
        public $priority = 10;
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        public function __construct()
        {
        }
        public function enqueue_media()
        {
        }
        public function is_visible()
        {
        }
        public function get_slug()
        {
        }
        public function get_label()
        {
        }
        public function handle_submit()
        {
        }
        /**
         * Finalizes the saving of a scheduled import
         *
         * @param Tribe__Events__Aggregator__Record__Abstract $record Record object
         * @param array $post_data Massaged POSTed data
         * @param array $meta Meta to be saved to the schedule
         */
        public function finalize_schedule_edit($record, $post_data, $meta)
        {
        }
        /**
         * Handles the previewing of a scheduled import edit
         */
        public function ajax_preview_import()
        {
        }
    }
    class Tribe__Events__Aggregator__Tabs__Favorite extends \Tribe__Events__Aggregator__Tabs__Abstract
    {
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        public $priority = 40;
        public function is_visible()
        {
        }
        public function get_slug()
        {
        }
        public function get_label()
        {
        }
    }
    class Tribe__Events__Aggregator__Tabs__History extends \Tribe__Events__Aggregator__Tabs__Abstract
    {
        /**
         * This Tab Ordering priority
         * @var integer
         */
        public $priority = 30;
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        public function __construct()
        {
        }
        /**
         * Adds Screen Options for This Tab
         *
         * @return void
         */
        public function action_screen_options($screen)
        {
        }
        /**
         * Allows the saving for our created Page option
         *
         * @param mixed  $status Which value should be saved, if false will not save
         * @param string $option Name of the option
         * @param mixed  $value  Which value was saved
         *
         * @return mixed
         */
        public function filter_save_screen_options($status, $option, $value)
        {
        }
        public function is_visible()
        {
        }
        public function get_slug()
        {
        }
        public function get_label()
        {
        }
    }
    class Tribe__Events__Aggregator__Tabs__New extends \Tribe__Events__Aggregator__Tabs__Abstract
    {
        public $priority = 10;
        protected $content_type;
        protected $content_type_plural;
        protected $content_type_object;
        protected $content_post_type;
        protected $messages;
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        public function __construct()
        {
        }
        public function maybe_display_notices()
        {
        }
        public function enqueue_media()
        {
        }
        public function is_visible()
        {
        }
        public function get_slug()
        {
        }
        public function get_label()
        {
        }
        public function handle_submit()
        {
        }
        public function handle_import_finalize($data)
        {
        }
        /**
         * Parses the queue for errors and informations.
         *
         * @param Tribe__Events__Aggregator__Record__Queue_Interface|WP_Error|Tribe__Events__Aggregator__Record__Activity $queue
         *
         * @return array
         */
        public function get_result_messages($queue)
        {
        }
        public function ajax_save_credentials()
        {
        }
        public function ajax_create_import()
        {
        }
        public function ajax_fetch_import()
        {
        }
        /**
         * Renders the "Missing Aggregator License" notice
         *
         * @return string
         */
        public function maybe_display_aggregator_upsell()
        {
        }
        /**
         * Renders the "Eventbrite Tickets" upsell
         *
         * @since 4.6.19
         *
         * @return string
         */
        public function maybe_display_eventbrite_upsell()
        {
        }
        /**
         * Renders the "Expired Aggregator License" notice
         *
         * @return string
         */
        public function render_notice_expired_aggregator_license()
        {
        }
        /**
         * Renders any of the "import complete" messages
         */
        public function render_notice_import_complete()
        {
        }
        /**
         * Renders failed import messages
         */
        public function render_notice_import_failed()
        {
        }
        /**
         * @deprecated 4.6.23
         */
        public function handle_facebook_credentials()
        {
        }
    }
    class Tribe__Events__Aggregator__Tabs__Scheduled extends \Tribe__Events__Aggregator__Tabs__Abstract
    {
        /**
         * To Order the Tabs on the UI you need to change the priority
         * @var integer
         */
        public $priority = 20;
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        public function __construct()
        {
        }
        /**
         * Adds Screen Options for This Tab
         *
         * @return void
         */
        public function action_screen_options($screen)
        {
        }
        /**
         * Allows the saving for our created Page option
         *
         * @param mixed  $status Which value should be saved, if false will not save
         * @param string $option Name of the option
         * @param mixed  $value  Which value was saved
         *
         * @return mixed
         */
        public function filter_save_screen_options($status, $option, $value)
        {
        }
        public function is_visible()
        {
        }
        public function get_slug()
        {
        }
        public function get_label()
        {
        }
        public function handle_request()
        {
        }
        public function get_errors_transient_name($nonce)
        {
        }
        /**
         * Run Imports for a given set of Records
         *
         * @since 4.6.18
         *
         * @param  array  $records
         *
         * @return array
         */
        public function action_run_import($records = [])
        {
        }
        /**
         * Renders the "Missing Aggregator License" notice
         *
         * @return string
         */
        public function maybe_display_aggregator_missing_license_key_message()
        {
        }
    }
    /**
     * Class Tribe__Events__Ajax__Operations
     *
     * Handles The Events Calendar specific class operations.
     */
    class Tribe__Events__Ajax__Operations extends \Tribe__Ajax__Operations
    {
    }
    class Tribe__Events__Amalgamator
    {
        /**
         * constructor
         */
        public function __construct()
        {
        }
        /**
         * Merge all duplicate event-related posts
         *
         */
        public function merge_duplicates()
        {
        }
        /**
         * Merge identical organizers
         *
         */
        public function merge_identical_organizers()
        {
        }
        /**
         * Merge identical venues
         *
         */
        public function merge_identical_venues()
        {
        }
        /**
         * Merge all venues in the given list into one post (keeping the first)
         *
         * @since 5.14.2 - Change to public method.
         *
         * @param array<string|integer> $venue_ids An Array of venue ids to merge.
         */
        public function amalgamate_venues($venue_ids)
        {
        }
        /**
         * Run the Venue amalgamation, by default it keeps the lowest venue_id.
         *
         * @since 5.14.2
         *
         * @param array<string|integer> $venue_ids An Array of venue ids to merge.
         * @param array<string|integer> $keep      An Array of the post IDs to keep or an empty array.
         */
        public function run_amalgamate_venues($venue_ids, $keep = [])
        {
        }
        /**
         * Merge all organizers in the given list into one post (keeping the first)
         *
         * @param array $organizer_ids
         *
         */
        public function amalgamate_organizers($organizer_ids)
        {
        }
        /**
         * Run the Venue amalgamation, by default it keeps the lowest venue_id.
         *
         * @since 5.14.2
         *
         * @param array<string|integer> $organizer_ids An Array of organizer ids to merge.
         * @param array<string|integer> $keep      An Array of the post IDs to keep or an empty array.
         */
        public function run_amalgamate_organizers($organizer_ids, $keep = [])
        {
        }
        /**
         * Make a button to trigger the amalgamation process
         *
         * @param string $text
         *
         * @return string
         */
        public static function migration_button($text = '')
        {
        }
        /**
         * If the migration button is clicked, start working
         *
         */
        public static function listen_for_migration_button()
        {
        }
    }
    /**
     * Registers and Enqueues the assets
     *
     * @since  4.6.21
     */
    class Tribe__Events__Assets
    {
        /**
         * Hooks any required filters and action
         *
         * @since  4.6.21
         *
         * @return void
         */
        public function hook()
        {
        }
        /**
         * Registers and Enqueues the assets
         *
         * @since  4.6.21
         *
         * @return void
         */
        public function register()
        {
        }
        /**
         * Add admin scripts and styles
         *
         * @since  4.6.21
         */
        public function load_admin()
        {
        }
        /**
         * Compatibility fix: some plugins enqueue jQuery UI/other styles on all post screens,
         * breaking our own custom styling of event editor components such as the datepicker.
         *
         * Needs to execute late enough during admin_enqueue_scripts that the items we are removing
         * have already been registered and enqueued.
         *
         * @since  4.6.21
         *
         * @see https://github.com/easydigitaldownloads/easy-digital-downloads/issues/3033
         */
        public function dequeue_incompatible()
        {
        }
        /**
         * Checks if we should enqueue on frontend and backend on our pages
         *
         * @since  4.6.21
         *
         * @return bool
         */
        public function should_enqueue_on_tribe()
        {
        }
        /**
         * Checks if we should enqueue frontend assets
         *
         * @since  4.6.21
         *
         * @return bool
         */
        public function should_enqueue_frontend()
        {
        }
        /**
         * Checks if we should enqueue full styles assets
         *
         * @since  4.6.21
         *
         * @return bool
         */
        public function should_enqueue_full_styles()
        {
        }
        /**
         * Checks if we are on the correct admin pages to enqueue admin
         *
         * @since  4.6.21
         *
         * @return bool
         */
        public function should_enqueue_admin()
        {
        }
        /**
         * Checks if we are on the correct admin page to enqueue updates assets.
         *
         * @since  6.0.0
         *
         * @return bool
         */
        public function should_enqueue_admin_update_page_assets()
        {
        }
        /**
         * Checks if we have a mobile Breakpoint
         *
         * @since  4.6.21
         *
         * @return bool
         */
        public function is_mobile_breakpoint()
        {
        }
        /**
         * Checks if we are using Tribe setting for Style
         *
         * @since  4.6.21
         *
         * @return bool
         */
        public function is_style_option_tribe()
        {
        }
        /**
         * Checks if we are using "Full Styles" setting for Style
         *
         * @since  4.6.23
         *
         * @return bool
         */
        public function is_style_option_full()
        {
        }
        /**
         * Checks if we are on the correct admin settings page
         *
         * @since  4.6.21
         *
         * @return bool
         */
        public function is_settings_page()
        {
        }
        /**
         * Playing ping-pong with WooCommerce. They keep changing their script.
         *
         * @since 4.6.21
         *
         * @see https://github.com/woothemes/woocommerce/issues/3623
         *
         * @return string
         */
        public function get_placeholder_handle()
        {
        }
        /**
         * Due to how we define which style we use based on an Option on the Administration
         * we need to determine this file.
         *
         * @since  4.6.21
         *
         * @return string
         */
        public function get_style_file()
        {
        }
        /**
         * Gets the Localize variable for TEC admin JS
         *
         * @since  4.6.21
         *
         * @return array
         */
        public function get_ajax_url_data()
        {
        }
        /**
         * Gets the Localize variable for Calendar Script JS
         *
         * @since  4.6.21
         *
         * @return array
         */
        public function get_js_calendar_script_data()
        {
        }
        /**
         * Gets the Localize variable for Dynamic JS
         *
         * @since  4.6.21
         *
         * @return array
         */
        public function get_js_dynamic_data()
        {
        }
        /**
         * Add legacy stylesheets to customizer styles array to check.
         *
         * @since 5.1.1
         *
         * @param array  $sheets Array of sheets to search for.
         * @param string $css_template String containing the inline css to add.
         *
         * @return array Modified array of sheets to search for.
         */
        public function customizer_inline_stylesheets($sheets, $css_template)
        {
        }
    }
    class Tribe__Events__Capabilities
    {
        /**
         * The transient key for delayed capabilities updates.
         *
         * @since 5.1.1
         *
         * @var string
         */
        public static $key_needs_init = '_tribe_events_needs_capability_init';
        /**
         * An array of roles to update capabilities.
         *
         * @since 5.1.1
         *
         * @var array
         */
        protected $roles = ['administrator', 'editor', 'author', 'contributor', 'subscriber'];
        /**
         * @deprecated 5.1.1
         *
         * @var bool
         */
        public $set_initial_caps = \false;
        /**
         * Hook up the correct methods to the places required to setup the capabilities.
         *
         * @since 5.1.1
         */
        public function hook()
        {
        }
        /**
         * Set the transient for flagging the transients needs a initialization.
         *
         * @since 5.1.1
         *
         * @return bool Status of set_transient.
         */
        public function set_needs_init()
        {
        }
        /**
         * Deletes the transient for flagging the transients needs a initialization.
         *
         * @since 5.1.1
         *
         * @return bool Status of delete_transient.
         */
        public function delete_needs_init()
        {
        }
        /**
         * Determines if capabilities need initialization on this request.
         *
         * @since 5.1.1
         *
         * @return bool Caps need initialisation.
         */
        public function needs_init()
        {
        }
        /**
         * Get the Roles to Modify Capabilities.
         *
         * @since 5.1.1
         *
         * @return array An array of roles to modify capabilities.
         */
        public function get_roles()
        {
        }
        /**
         * Grant caps for the given post type to the given role
         *
         * @param string $post_type The post type to grant caps for
         * @param string $role_id The role receiving the caps
         * @param string $level The capability level to grant (see the list of caps above)
         *
         * @return bool false if the action failed for some reason, otherwise true
         */
        public function register_post_type_caps($post_type, $role_id, $level = '')
        {
        }
        /**
         * Remove all caps for the given post type from the given role
         *
         * @param string $post_type The post type to remove caps for
         * @param string $role_id The role which is losing caps
         *
         * @return bool false if the action failed for some reason, otherwise true
         */
        public function remove_post_type_caps($post_type, $role_id)
        {
        }
        /**
         * Set the initial capabilities for events and related post types on default roles
         *
         * @since 5.1.1 - use get_roles() method, add check for transient.
         *
         * @param boolean $force Force the registering of new caps without checking any flags.
         *
         * @return void
         */
        public function set_initial_caps($force = \false)
        {
        }
        /**
         * Remove capabilities for events and related post types from default roles
         *
         * @since 5.1.1 - use get_roles() method.
         *
         * @return void
         */
        public function remove_all_caps()
        {
        }
    }
}
namespace Tribe\Events\Collections {
    /**
     * Class Lazy_Post_Collection
     *
     * @since   5.0.0
     *
     * @package Tribe\Events\Collections
     */
    class Lazy_Post_Collection extends \Tribe\Utils\Lazy_Collection
    {
        /**
         * The callback function that should be called to rebuild the collection items from an array of post IDs.
         *
         * @since 5.0.0
         *
         * @var callable|string
         */
        protected $unserialize_callback;
        /**
         * Lazy_Post_Collection constructor.
         *
         * @since 5.0.0
         *
         * @param callable $callback             The callback that should be used to fetch the collection items.
         * @param string   $unserialize_callback The callback that should be used to rebuild the collection items from the
         *                                       serialized post IDs.
         */
        public function __construct(callable $callback, $unserialize_callback = 'get_post')
        {
        }
        /**
         * Plucks the post IDs from the collection items before serialization.
         *
         * While serializing a post object w/ added properties will not generate any error during serialization, doing the
         * same during unserialization will yield a `false` result.
         * To avoid dealing with the lower level details of how the post object is built or decorated, here we extract
         * the post IDs to only store those.
         *
         * @since 5.0.0
         *
         * @param array<\WP_Post> $items The posts part of this collection.
         *
         * @return array The collection post IDs and callback.
         *
         * @see   Lazy_Post_Collection::custom_unserialize() for the other part of the post handling.
         */
        protected function before_serialize(array $items)
        {
        }
        /**
         * Custom handling of the lazy collection unserialization, this method will build complete post objects from
         * the serialized post IDs.
         *
         * @since 5.0.0
         *
         * @param string $serialized The serialized values, usually an array of post IDs.
         *
         * @return array<\WP_Post>|null Either the rebuilt collection, or `null` if the serialized string cannot be
         *                             unserialized.
         */
        protected function custom_unserialize($serialized)
        {
        }
    }
}
namespace {
    class Tribe__Events__Constants implements \ArrayAccess
    {
        /**
         * @var bool Whether the class will define and read real constants or not.
         */
        protected $volatile;
        /**
         * @var array An array that will store volatile values if the class is used in volatile mode.
         */
        protected $volatile_values;
        /**
         * Tribe__Events__Constants constructor.
         *
         * @param bool $volatile If `true` the class will not define and read real constants.
         */
        #[\ReturnTypeWillChange]
        public function __construct($volatile = \false)
        {
        }
        /**
         * Whether a constant is defined or not.
         *
         * @param string $offset
         *
         * @return bool
         */
        #[\ReturnTypeWillChange]
        public function offsetExists($offset) : bool
        {
        }
        /**
         * Gets a constant value.
         *
         * @param string $offset
         *
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function offsetGet($offset)
        {
        }
        /**
         * Sets the value of a constant if not already defined.
         *
         * @param string $offset
         * @param mixed $value
         */
        #[\ReturnTypeWillChange]
        public function offsetSet($offset, $value) : void
        {
        }
        /**
         * Unsets a constant if in volatile mode.
         *
         * @param string $offset
         */
        #[\ReturnTypeWillChange]
        public function offsetUnset($offset) : void
        {
        }
    }
    class Tribe__Events__Cost_Utils extends \Tribe__Cost_Utils
    {
        const UNCOSTED_EVENTS_TRANSIENT = 'tribe_events_have_uncosted_events';
        /**
         * Static Singleton Factory Method
         *
         * @return Tribe__Events__Cost_Utils
         */
        public static function instance()
        {
        }
        /**
         * Fetches all event costs from the database
         *
         * @return array
         */
        public function get_all_costs()
        {
        }
        /**
         * Fetches an event's cost values
         *
         * @param int|WP_Post $event The Event post object or event ID
         *
         * @return array
         */
        public function get_event_costs($event)
        {
        }
        /**
         * Returns a formatted event cost
         *
         * @param int|WP_Post $event                The Event post object or event ID
         * @param bool        $with_currency_symbol Include the currency symbol (optional)
         *
         * @return string
         */
        public function get_formatted_event_cost($event, $with_currency_symbol = \false)
        {
        }
        /**
         * Returns boolean true if there are events for which a cost has not been specified.
         *
         * @return bool
         */
        public function has_uncosted_events()
        {
        }
    }
    /**
     * The Events Calendar Customizer Section Class
     * Day List View
     *
     * @package The Events Calendar
     * @subpackage Customizer
     * @since 4.4
     */
    class Tribe__Events__Customizer__Day_List_View extends \Tribe__Customizer__Section
    {
        /**
         * PHP 5.2 method of creating "instances" of an abstract require this
         *
         * Note: This is the only required method for a Connector to work
         *
         * @return self The dynamic instance of this Class
         */
        public static function instance($name = \null)
        {
        }
        /**
         * Grab the CSS rules template
         *
         * @return string
         */
        public function get_css_template($template)
        {
        }
        public function create_ghost_settings($settings = [])
        {
        }
        public function setup()
        {
        }
        /**
         * Create the Fields/Settings for this sections
         *
         * @param  WP_Customize_Section $section The WordPress section instance
         * @param  WP_Customize_Manager $manager [description]
         *
         * @return void
         */
        public function register_settings(\WP_Customize_Section $section, \WP_Customize_Manager $manager)
        {
        }
    }
    /**
     * The Events Calendar Customizer Section Class
     * General Theme
     *
     * @package The Events Calendar
     * @subpackage Customizer
     * @since 4.4
     */
    final class Tribe__Events__Customizer__General_Theme extends \Tribe__Customizer__Section
    {
        /**
         * PHP 5.2 method of creating "instances" of an abstract require this
         *
         * Note: This is the only required method for a Connector to work
         *
         * @return self The dynamic instance of this Class
         */
        public static function instance()
        {
        }
        /**
         * Creates the Section ghost settings for Customizer
         *
         * @since  F17.5
         *
         * @param  array  $settings Section array of settings
         * @return array
         */
        public function create_ghost_settings($settings = [])
        {
        }
        /**
         * Grab the CSS rules template
         *
         * @return string
         */
        public function get_css_template($template)
        {
        }
        public function setup()
        {
        }
        /**
         * Create the Fields/Settings for this sections
         *
         * @param  WP_Customize_Section $section The WordPress section instance
         * @param  WP_Customize_Manager $manager [description]
         *
         * @return void
         */
        public function register_settings(\WP_Customize_Section $section, \WP_Customize_Manager $manager)
        {
        }
        /**
         * Get color schemes for featured events
         *
         * @return array
         */
        public function get_featured_color_schemes()
        {
        }
        /**
         * Gets featured color choices as key/value pairs
         *
         * @return array
         */
        public function get_featured_color_choices()
        {
        }
        /**
         * Sanitizes the featured color choices
         *
         * @param string $choice Color choice
         *
         * @return string
         */
        public function sanitize_featured_color_choice($choice)
        {
        }
    }
    /**
     * The Events Calendar Customizer Section Class
     * Global Elements
     *
     * @package The Events Calendar
     * @subpackage Customizer
     * @since 4.4
     */
    final class Tribe__Events__Customizer__Global_Elements extends \Tribe__Customizer__Section
    {
        /**
         * PHP 5.2 method of creating "instances" of an abstract require this
         *
         * Note: This is the only required method for a Connector to work
         *
         * @return self The dynamic instance of this Class
         */
        public static function instance()
        {
        }
        /**
         * Grab the CSS rules template
         *
         * @return string
         */
        public function get_css_template($template)
        {
        }
        public function create_ghost_settings($settings = [])
        {
        }
        public function setup()
        {
        }
        /**
         * Create the Fields/Settings for this sections
         *
         * @param  WP_Customize_Section $section The WordPress section instance
         * @param  WP_Customize_Manager $manager WP_Customize_Manager instance.
         *
         * @return void
         */
        public function register_settings(\WP_Customize_Section $section, \WP_Customize_Manager $manager)
        {
        }
    }
    /**
     * The Events Calendar Customizer Section Class
     * Month Week View
     *
     * @package The Events Calendar
     * @subpackage Customizer
     * @since 4.4
     */
    final class Tribe__Events__Customizer__Month_Week_View extends \Tribe__Customizer__Section
    {
        /**
         * PHP 5.2 method of creating "instances" of an abstract require this
         *
         * Note: This is the only required method for a Connector to work
         *
         * @return self The dynamic instance of this Class
         */
        public static function instance()
        {
        }
        /**
         * Grab the CSS rules template
         *
         * @return string
         */
        public function get_css_template($template)
        {
        }
        public function create_ghost_settings($settings = [])
        {
        }
        /**
         * A way to apply filters when getting the Customizer options
         * @return array
         */
        public function setup()
        {
        }
        /**
         * Create the Fields/Settings for this sections
         *
         * @param  WP_Customize_Section $section The WordPress section instance
         * @param  WP_Customize_Manager $manager [description]
         *
         * @return void
         */
        public function register_settings(\WP_Customize_Section $section, \WP_Customize_Manager $manager)
        {
        }
        /**
         * Set default values according to the selected stylesheet
         *
         * @since 4.6.19
         *
         * @return void
         */
        public function set_defaults()
        {
        }
    }
    /**
     * The Events Calendar Customizer Section Class
     * Single Event
     *
     * @package The Events Calendar
     * @subpackage Customizer
     * @since 4.4
     */
    final class Tribe__Events__Customizer__Single_Event extends \Tribe__Customizer__Section
    {
        /**
         * PHP 5.2 method of creating "instances" of an abstract require this
         *
         * Note: This is the only required method for a Connector to work
         *
         * @return self The dynamic instance of this Class
         */
        public static function instance()
        {
        }
        /**
         * Add the CSS rules template to the `tribe_events_pro_customizer_css_template`
         *
         * @return string
         */
        public function get_css_template($template)
        {
        }
        public function create_ghost_settings($settings = [])
        {
        }
        public function setup()
        {
        }
        /**
         * Create the Fields/Settings for this sections
         *
         * @param  WP_Customize_Section $section The WordPress section instance
         * @param  WP_Customize_Manager $manager [description]
         *
         * @return void
         */
        public function register_settings(\WP_Customize_Section $section, \WP_Customize_Manager $manager)
        {
        }
    }
    /**
     * The Events Calendar Customizer Section Class
     * Widgets
     *
     * @package The Events Calendar
     * @subpackage Customizer
     * @since 4.4
     */
    final class Tribe__Events__Customizer__Widget extends \Tribe__Customizer__Section
    {
        /**
         * PHP 5.2 method of creating "instances" of an abstract require this
         *
         * Note: This is the only required method for a Connector to work
         *
         * @return self The dynamic instance of this Class
         */
        public static function instance()
        {
        }
        /**
         * Grab the CSS rules template
         *
         * @return string
         */
        public function get_css_template($template)
        {
        }
        public function setup()
        {
        }
        /**
         * Create the Fields/Settings for this sections
         *
         * @param  WP_Customize_Section $section The WordPress section instance
         * @param  WP_Customize_Manager $manager [description]
         *
         * @return void
         */
        public function register_settings(\WP_Customize_Section $section, \WP_Customize_Manager $manager)
        {
        }
    }
    class Tribe__Events__Dates__Known_Range
    {
        /**
         * @var static
         */
        protected static $instance;
        /**
         * The class singleton constructor.
         *
         * @return Tribe__Events__Dates__Known_Range
         */
        public static function instance()
        {
        }
        /**
         * Determine the earliest start date and latest end date currently in the database
         * and store those values for future use.
         */
        public function rebuild_known_range()
        {
        }
        /**
         * Intelligently updates our record of the earliest start date/latest event date in
         * the system. If the existing earliest/latest values have not been superseded by the new post's
         * start/end date then no update takes place.
         *
         * This is deliberately hooked into save_post, rather than save_post_tribe_events, to avoid issues
         * where the removal/restoration of hooks within addEventMeta() etc might stop this method from
         * actually being called (relates to a core WP bug).
         *
         * @param int $event_id
         */
        public function update_known_range($event_id)
        {
        }
        /**
         * Intended to run when the save_post_tribe_events action is fired.
         *
         * At this point we know an event is being updated or created and, if the post is going to
         * be visible, we can set up a further action to handle updating our record of the
         * populated date range once the post meta containing the start and end date for the post
         * has saved.
         */
        public function maybe_update_known_range($post_id)
        {
        }
        /**
         * Fires on delete_post and decides whether or not to rebuild our record or
         * earliest/latest event dates (which will be done when deleted_post fires,
         * so that the deleted event is removed from the db before we recalculate).
         *
         * @param $post_id
         */
        public function maybe_rebuild_known_range($post_id)
        {
        }
    }
    class Tribe__Events__Deactivation extends \Tribe__Abstract_Deactivation
    {
        /**
         * The deactivation routine for a single blog
         */
        protected function blog_deactivate()
        {
        }
        /**
         * An abridged version that is less DB intensive.
         *
         * @see wp_is_large_network() and the 'wp_is_large_network' filter
         */
        protected function short_blog_deactivate()
        {
        }
    }
    class Tribe__Events__Default_Values
    {
        public function __call($method, $args)
        {
        }
        public function venue()
        {
        }
        public function venue_id()
        {
        }
        public function organizer()
        {
        }
        public function organizer_id()
        {
        }
        public function address()
        {
        }
        public function city()
        {
        }
        public function state()
        {
        }
        public function province()
        {
        }
        public function zip()
        {
        }
        public function country()
        {
        }
        public function phone()
        {
        }
    }
    /**
     * Initialize Gutenberg editor blocks and styles
     *
     * @since 4.7
     */
    class Tribe__Events__Editor extends \Tribe__Editor
    {
        /**
         * Hooks actions from the editor into the correct places
         *
         * @since 4.7
         *
         * @return bool
         */
        public function hook()
        {
        }
        /**
         * For now we don't use Blocks editor on the Post Type for Organizers
         *
         * @todo  see https://core.trac.wordpress.org/ticket/45275
         *
         * @since  4.7
         *
         * @param  boolean $is_enabled
         * @param  string  $post_type
         *
         * @return boolean
         */
        public function deactivate_blocks_editor_organizer($is_enabled, $post_type)
        {
        }
        /**
         * For now we don't use Blocks editor on the Post Type for Venues
         *
         * @todo  see https://core.trac.wordpress.org/ticket/45275
         *
         * @since  4.7
         *
         * @param  boolean $is_enabled
         * @param  string  $post_type
         *
         * @return boolean
         */
        public function deactivate_blocks_editor_venue($is_enabled, $post_type)
        {
        }
        /**
         * Deactivate the blocks editor from the events post type unless explicitly enabled by the user via the settings
         * on the events tab.
         *
         * @since 5.7.1
         *
         * @param bool   $is_enabled If blocks editor is enabled or not.
         * @param string $post_type  The current post type.
         *
         * @return false
         */
        public function deactivate_blocks_editor_event($is_enabled, $post_type)
        {
        }
        /**
         * When Gutenberg is active, we do not care about custom-fields as a metabox, but as part of the Rest API
         *
         * Code is located at:
         * https://github.com/moderntribe/the-events-calendar/blob/f8af49bc41048e8632372fc8da77202d9cb98d86/src/Tribe/Admin/Event_Meta_Box.php#L345
         *
         * @todo  Block that option once the user has Gutenberg active
         *
         * @since 4.7
         *
         * @return void
         */
        public function add_event_custom_field_support()
        {
        }
        /**
         * When initially loading a post in gutenberg flags if came from classic editor
         *
         * @since 4.7
         *
         * @return bool
         */
        public function flag_post_from_classic_editor()
        {
        }
        /**
         * Making sure we have correct post content for blocks after going into Gutenberg
         *
         * @since 4.7
         *
         * @param  int $post Which post we will migrate
         *
         * @return bool
         */
        public function update_post_content_to_blocks($post)
        {
        }
        /**
         * Gets the classic template, used for migration and setup new events with classic look
         *
         * @since 4.7
         *
         * @return array
         */
        public function get_classic_template()
        {
        }
        /**
         * Adds the required blocks into the Events Post Type
         *
         * @since 4.7
         *
         * @param  array $args Arguments used to setup the CPT template
         *
         * @return array
         */
        public function add_event_template_blocks($args = [])
        {
        }
        /**
         * Prevents us from using `init` to register our own blocks, allows us to move
         * it when the proper place shows up
         *
         * @since 4.7
         *
         * @return void
         */
        public function register_blocks()
        {
        }
        /**
         * Check if current admin page is post type `tribe_events`
         *
         * @since 4.7
         * @since 6.2.7 Adding support to load on site editor screen.
         *
         * @return bool
         */
        public function is_events_post_type() : bool
        {
        }
        /**
         * Check whether the current page is an edit post type page.
         *
         * @since 5.12.0
         * @since 6.2.7 Adding support to load on site editor screen.
         *
         * @return bool
         */
        public function is_edit_screen() : bool
        {
        }
        /**
         * @todo   Move this into the Block PHP files
         *
         * @since 4.7
         *
         * @return void
         */
        public function assets()
        {
        }
        /**
         * Remove scripts that are not relevant for the Gutenberg editor or conflict with the scripts
         * used on gutenberg
         *
         * @since 4.7
         */
        public function deregister_scripts()
        {
        }
        /**
         * Add "Event Blocks" category to the editor
         *
         * @deprecated 5.8.2
         *
         * @since 4.7
         *
         * @param array<array<string|string>> $categories An array of categories each an array
         *                                                in the format property => value.
         * @param WP_Post                     $post       The post object we're editing.
         *
         * @return array
         */
        public function block_categories($categories, $post)
        {
        }
        /**
         * Add "Event Blocks" category to the editor.
         *
         * @since 5.8.2 block_categories() modified to cover WP 5.8 change of filter in a backwards-compatible way.
         *
         * @param array<array<string,string>> $categories An array of categories each an array.
         *                                                in the format property => value.
         * @param WP_Block_Editor_Context     $context    The Block Editor Context object.
         *                                                In WP versions prior to 5.8 this was the post object.
         *
         * @return array<array<string,string>> The block categories, filtered to add the Event Categories if applicable.
         */
        public function block_categories_all($categories, $context)
        {
        }
        /************************
         *                      *
         *  Deprecated Methods  *
         *                      *
         ************************/
        /**
         * Adds the required blocks into the Events Post Type
         *
         * @since 4.7
         * @deprecated 0.1.3-alpha
         *
         * @param  array $args Arguments used to setup the CPT template
         *
         * @return array
         */
        public function add_template_blocks($args = [])
        {
        }
        /**
         * When the plugin loads the option is not set so the value is an empty string and when casting into a bool value
         * this returns a `false` positive. As empty string indicates the value has not set already.
         *
         * This is something should be addressed on TEC as is affecting any new user installing the plugin.
         *
         * Code is located at: https://github.com/moderntribe/the-events-calendar/blob/f8af49bc41048e8632372fc8da77202d9cb98d86/src/Tribe/Admin/Event_Meta_Box.php#L345
         *
         * @since 4.7
         * @deprecated 0.3.2-alpha
         *
         * @param $value
         * @param $name
         *
         * @return bool
         */
        public function get_option($value, $name)
        {
        }
    }
    /**
     * Events Gutenberg Assets
     *
     * @since 4.7
     */
    class Tribe__Events__Editor__Assets
    {
        /**
         * Caches the result of the `should_enqueue_frontend` check.
         *
         * @since 4.9.13
         *
         * @var bool
         */
        protected $should_enqueue_frontend;
        /**
         *
         * @since 4.7
         *
         * @return void
         */
        public function hook()
        {
        }
        /**
         * Registers and Enqueues the assets
         *
         * @since 4.7
         *
         * @param string $key Which key we are checking against
         *
         * @return boolean
         */
        public function register()
        {
        }
        /**
         * Checks if we should enqueue frontend assets
         *
         * @since 4.7
         * @since 4.9.13 Cache the check value.
         *
         * @return bool
         */
        public function should_enqueue_frontend()
        {
        }
    }
    class Tribe__Events__Editor__Blocks__Classic_Event_Details extends \Tribe__Editor__Blocks__Abstract
    {
        /**
         * Which is the name/slug of this block
         *
         * @since 4.7
         *
         * @return string
         */
        public function slug()
        {
        }
        /**
         * Since we are dealing with a Dynamic type of Block we need a PHP method to render it
         *
         * @since 4.7
         *
         * @param  array $attributes
         *
         * @return string
         */
        public function render($attributes = [])
        {
        }
        /**
         * Register the Assets for when this block is active
         *
         * @since 4.7
         *
         * @return void
         */
        public function assets()
        {
        }
    }
    class Tribe__Events__Editor__Blocks__Event_Category extends \Tribe__Editor__Blocks__Abstract
    {
        /**
         * Which is the name/slug of this block
         *
         * @since 4.7
         *
         * @return string
         */
        public function slug()
        {
        }
        /**
         * Since we are dealing with a Dynamic type of Block we need a PHP method to render it
         *
         * @since 4.7
         *
         * @param  array $attributes
         *
         * @return string
         */
        public function render($attributes = [])
        {
        }
        /**
         * Register the Assets for when this block is active
         *
         * @since 4.7
         *
         * @return void
         */
        public function assets()
        {
        }
    }
    class Tribe__Events__Editor__Blocks__Event_Datetime extends \Tribe__Editor__Blocks__Abstract
    {
        /**
         * Which is the name/slug of this block
         *
         * @since 4.7
         *
         * @return string
         */
        public function slug()
        {
        }
        /**
         * Since we are dealing with a Dynamic type of Block we need a PHP method to render it
         *
         * @since 4.7
         *
         * @param  array $attributes
         *
         * @return string
         */
        public function render($attributes = [])
        {
        }
        /**
         * Register the Assets for when this block is active
         *
         * @since 4.7
         *
         * @return void
         */
        public function assets()
        {
        }
        /**
         * Returns the block data for the block editor.
         *
         * @since 5.1.1
         *
         * @return array<string,mixed> The block data for the editor.
         */
        public function block_data()
        {
        }
    }
    class Tribe__Events__Editor__Blocks__Event_Links extends \Tribe__Editor__Blocks__Abstract
    {
        /**
         * Which is the name/slug of this block
         *
         * @since 4.7
         *
         * @return string
         */
        public function slug()
        {
        }
        /**
         * Set the default attributes of this block
         *
         * @since 4.7
         *
         * @return array
         */
        public function default_attributes()
        {
        }
        /**
         * Since we are dealing with a Dynamic type of Block we need a PHP method to render it
         *
         * @since 4.7
         *
         * @param  array $attributes
         *
         * @return string
         */
        public function render($attributes = [])
        {
        }
        /**
         * Register the Assets for when this block is active
         *
         * @since 4.7
         *
         * @return void
         */
        public function assets()
        {
        }
    }
    class Tribe__Events__Editor__Blocks__Event_Organizer extends \Tribe__Editor__Blocks__Abstract
    {
        /**
         * Which is the name/slug of this block
         *
         * @since 4.7
         *
         * @return string
         */
        public function slug()
        {
        }
        /**
         * Since we are dealing with a Dynamic type of Block we need a PHP method to render it
         *
         * @since 4.7
         *
         * @param  array $attributes
         *
         * @return string
         */
        public function render($attributes = [])
        {
        }
        /**
         * Register the Assets for when this block is active
         *
         * @since 4.7
         *
         * @return void
         */
        public function assets()
        {
        }
    }
    class Tribe__Events__Editor__Blocks__Event_Price extends \Tribe__Editor__Blocks__Abstract
    {
        /**
         * Which is the name/slug of this block
         *
         * @since 4.7
         *
         * @return string
         */
        public function slug()
        {
        }
        /**
         * Set the default attributes of this block
         *
         * @since 4.7
         *
         * @return array
         */
        public function default_attributes()
        {
        }
        /**
         * Since we are dealing with a Dynamic type of Block we need a PHP method to render it
         *
         * @since 4.7
         *
         * @param  array $attributes
         *
         * @return string
         */
        public function render($attributes = [])
        {
        }
        /**
         * Register the Assets for when this block is active
         *
         * @since 4.7
         *
         * @return void
         */
        public function assets()
        {
        }
    }
    class Tribe__Events__Editor__Blocks__Event_Tags extends \Tribe__Editor__Blocks__Abstract
    {
        /**
         * Which is the name/slug of this block
         *
         * @since 4.7
         *
         * @return string
         */
        public function slug()
        {
        }
        /**
         * Since we are dealing with a Dynamic type of Block we need a PHP method to render it
         *
         * @since 4.7
         *
         * @param  array $attributes
         *
         * @return string
         */
        public function render($attributes = [])
        {
        }
        /**
         * Register the Assets for when this block is active
         *
         * @since 4.7
         *
         * @return void
         */
        public function assets()
        {
        }
    }
    class Tribe__Events__Editor__Blocks__Event_Venue extends \Tribe__Editor__Blocks__Abstract
    {
        /**
         * The ID of the venue to display.
         *
         * @since 6.2.0
         *
         * @var ?int
         */
        protected static ?int $venue_id = \null;
        /**
         * Which is the name/slug of this block
         *
         * @since 4.7
         *
         * @return string
         */
        public function slug()
        {
        }
        /**
         * Since we are dealing with a Dynamic type of Block we need a PHP method to render it
         *
         * @since 4.7
         *
         * @param  array $attributes
         *
         * @return string
         */
        public function render($attributes = [])
        {
        }
        /**
         * Register the Assets for when this block is active
         *
         * @since 4.7
         *
         * @return void
         */
        public function assets()
        {
        }
        /**
         * Determines if assets should be enqueued.
         *
         * @since 6.2.0
         *
         * @return bool
         */
        public function should_enqueue_assets() : bool
        {
        }
        /**
         * Gets the venue ID from the block.
         *
         * @since 6.2.0
         *
         * @param array $attributes Array of attributes for the block.
         *
         * @return ?int
         */
        public function get_venue_id(array $attributes) : ?int
        {
        }
        /**
         * Should we show the map?
         *
         * @since 6.2.0
         *
         * @param array $attributes Array of attributes for the block.
         *
         * @return bool
         */
        public function should_show_map(array $attributes) : bool
        {
        }
        /**
         * Should we show the map link?
         *
         * @since 6.2.0
         *
         * @param array $attributes Array of attributes for the block.
         *
         * @return bool
         */
        public function should_show_map_link(array $attributes) : bool
        {
        }
    }
    class Tribe__Events__Editor__Blocks__Event_Website extends \Tribe__Editor__Blocks__Abstract
    {
        /**
         * Which is the name/slug of this block
         *
         * @since 4.7
         *
         * @return string
         */
        public function slug()
        {
        }
        /**
         * Set the default attributes of this block
         *
         * @since 4.7
         *
         * @return array
         */
        public function default_attributes()
        {
        }
        /**
         * Since we are dealing with a Dynamic type of Block we need a PHP method to render it
         *
         * @since 4.7
         *
         * @param  array $attributes
         *
         * @return string
         */
        public function render($attributes = [])
        {
        }
        /**
         * Register the Assets for when this block is active
         *
         * @since 4.7
         *
         * @return void
         */
        public function assets()
        {
        }
    }
    class Tribe__Events__Editor__Blocks__Featured_Image extends \Tribe__Editor__Blocks__Abstract
    {
        /**
         * Which is the name/slug of this block
         *
         * @since 4.7
         *
         * @return string
         */
        public function slug()
        {
        }
        /**
         * Since we are dealing with a Dynamic type of Block we need a PHP method to render it
         *
         * @since 4.7
         *
         * @param  array $attributes
         *
         * @return string
         */
        public function render($attributes = [])
        {
        }
        /**
         * Register the Assets for when this block is active
         *
         * @since 4.7
         *
         * @return void
         */
        public function assets()
        {
        }
    }
    /**
     * Events Editor Compatibility
     *
     * @since 4.7
     */
    class Tribe__Events__Editor__Compatibility
    {
        /**
         * Key we store the toggle under in the tribe_events_calendar_options array.
         *
         * @since 5.14.0
         *
         * @var string
         */
        public static $blocks_editor_key = 'toggle_blocks_editor';
        /**
         * Key we store the toggle under in the tribe_events_calendar_options array.
         *
         * @since 15.4.0
         * @since 6.0.1
         *
         * @deprecated Using the \Tribe__Cache object instead of caching locally.
         *
         * @var string
         */
        public static $blocks_editor_value = \null;
        /**
         * Key for the Hidden Field of toggling blocks editor.
         *
         * @since 5.14.0
         * @deprecated 6.0.5
         *
         * @var string
         */
        public static $blocks_editor_hidden_field_key = 'toggle_blocks_editor_hidden_field';
        /**
         * Any hooking any class needs happen here.
         *
         * In place of delegating the hooking responsibility to the single classes they are all hooked here.
         *
         * @since 4.7
         *
         * @return void
         */
        public function hook()
        {
        }
        /**
         * Gets if user toggled blocks editor on the settings
         *
         * @since 4.7
         *
         * @return bool
         */
        public function is_blocks_editor_toggled_on()
        {
        }
        /**
         * Filters tribe_editor_should_load_blocks to disable blocks if the admin toggle is off.
         *
         * @since 5.14.0
         *
         * @param boolean $should_load_blocks Whether the editor should use the classic or blocks UI.
         *
         * @return boolean $should_load_blocks Whether the editor should use the classic or blocks UI.
         */
        public function filter_tribe_editor_should_load_blocks($should_load_blocks)
        {
        }
        /**
         * Compatibility specific to the Classic Editor plugin.
         * This ensures we allow blocks when default is classic but user switching is on.
         *
         * @since 5.14.0
         *
         * @param array<string|boolean> $editors   An array of editors and if they are enabled.
         * @param string                $post_type The post type we are checking against.
         *
         * @return array<string|boolean> $editors   AThe modified array of editors and if they are enabled.
         */
        public function filter_classic_editor_enabled_editors_for_post_type($editors, $post_type)
        {
        }
        /**
         * Inserts the Toggle and Hidden Field for the Activation of Blocks Editor
         *
         * @since 4.7
         *
         * @param array $fields Fields from Options General
         *
         * @return array
         */
        public function insert_toggle_blocks_editor_field($fields)
        {
        }
        /* DEPRECATED */
        /**
         * Gets the option key for toggling Blocks Editor active
         *
         * @since 4.7
         * @deprecated 5.14.0
         *
         * @return string
         */
        public function get_toggle_blocks_editor_key()
        {
        }
        /**
         * Gets the option key for the Hidden Field of toggling blocks editor
         *
         * @since 4.7
         * @deprecated 5.14.0
         *
         * @return string
         */
        public function get_toggle_blocks_editor_hidden_key()
        {
        }
        /**
         * On any administration page that we see the Gutenberg Extension plugin we deactivate and redirect
         * to the Plugins page so the user can't do anything weird.
         *
         * @since 4.7
         *
         * @deprecated 5.14.0
         *
         * @return void
         */
        public function deactivate_gutenberg_extension_plugin()
        {
        }
        /**
         * Filter when we are in the classic editor page
         *
         * @since  4.7.4
         *
         * @param  boolean $pre
         *
         * @return boolean
         */
        public function filter_is_classic_editor($is_classic_editor = \false)
        {
        }
    }
    /**
     * Class Tribe__Events__Editor__Configuration
     *
     * @since 4.7
     */
    class Tribe__Events__Editor__Configuration implements \Tribe__Editor__Configuration_Interface
    {
        /**
         * Hook used to attach actions / filters
         *
         * @since 4.7
         */
        public function hook()
        {
        }
        /**
         * Add custom variables to be localized
         *
         * @since 4.7
         *
         * @param array $editor_config
         * @return array
         */
        public function editor_config($editor_config)
        {
        }
        /**
         * Return the variables to be localized
         *
         * @since 4.7
         *
         * @return array
         */
        public function localize()
        {
        }
        /**
         * Check if post is from classic editor
         *
         * @since 4.7
         *
         * @param int|WP_Post $post
         *
         * @return bool
         */
        public function post_is_from_classic_editor($post)
        {
        }
        /**
         * Returns the site timezone as a string
         *
         * @since 4.7.2
         *
         * @return string
         */
        public function get_timezone_label()
        {
        }
    }
}
namespace Tribe\Events\Editor {
    /**
     * Events block editor hooks.
     *
     * @since 5.12.0
     */
    class Hooks extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 5.12.0
         */
        public function register()
        {
        }
        /**
         * Adds the actions required by each Views v2 component.
         *
         * @since 5.12.0
         */
        protected function add_actions()
        {
        }
        /**
         * Adds the editor styles required by the block editor.
         *
         * We trigger this action so that we only need to do the is_block_editor() check once.
         *
         * @since 5.12.0
         */
        public function add_widget_resources()
        {
        }
        /**
         * Triggers the print styles action for widgets in the block editor.
         *
         * @since 5.12.0
         */
        public function admin_print_widget_styles()
        {
        }
        /**
         * Triggers the print scripts action for widgets in the block editor.
         *
         * @since 5.12.0
         */
        public function admin_print_widget_scripts()
        {
        }
        /**
         * Triggers the print footer scripts action for widgets in the block editor.
         *
         * @since 5.12.0
         */
        public function admin_print_footer_widget_scripts()
        {
        }
        /**
         * Triggers the admin footer widgets action in the block editor.
         *
         * @since 5.12.0
         */
        public function admin_footer_widgets()
        {
        }
    }
}
namespace {
    /**
     * Include translations to Gutenberg Ext
     *
     * @since 4.7
     */
    class Tribe__Events__Editor__I18n
    {
        /**
         * Hook into the required places to make it work
         *
         * @since 4.7
         *
         * @return void
         */
        public function hook()
        {
        }
        /**
         * Include the Inline Script with locale
         *
         * @since 4.7
         *
         * @return void
         */
        public function include_inline_script($value)
        {
        }
    }
    /**
     * Initialize Gutenberg Event Meta fields
     *
     * @since 4.7
     */
    class Tribe__Events__Editor__Meta extends \Tribe__Editor__Meta
    {
        /**
         * Register the required Meta fields for good Gutenberg saving
         *
         * @since 4.7
         *
         * @return void
         */
        public function register()
        {
        }
        /**
         * Short-circuits deleting metadata items that don't exist, for compatibility purposes we need to make sure
         * WordPress doesn't throw an error when the meta is not present.
         *
         * @since 5.5.0
         * @since 4.6.0 Apply to all Rest Endpoints not only Events.
         *
         * @param null|bool $delete     Whether to allow metadata deletion of the given type.
         * @param int       $object_id  ID of the object metadata is for.
         * @param string    $meta_key   Metadata key.
         * @param mixed     $meta_value Metadata value. Must be serializable if non-scalar.
         * @param bool      $delete_all Whether to delete the matching metadata entries
         *                              for all objects, ignoring the specified $object_id.
         *                              Default false.
         *
         * @return bool
         */
        public function filter_allow_meta_delete_non_existent_key($delete, $object_id, $meta_key, $meta_value, $delete_all)
        {
        }
        /**
         * Make sure we make the REST response backwards compatible.
         *
         * @since 4.7
         *
         * @param WP_REST_Response $data
         * @param WP_Post          $post    Post object.
         * @param WP_REST_Request  $request Request object.
         *
         * @return WP_REST_Response $data
         */
        public function meta_backwards_compatibility($data, $post, $request)
        {
        }
        /**
         * Make sure we allow other plugins and customizations to filter the cost field.
         *
         * @since 5.7.1
         *
         * @param \stdClass        $post_data The post insertion/update payload.
         * @param \WP_REST_Request $request The current insertion or update request object.
         *
         * @return \stdClass The post insertion/update payload.
         */
        public function update_cost($post_data, $request)
        {
        }
        /**
         * Adds, triggering their updates, the UTC start and end dates to the post insertion or
         * update REST payload.
         *
         * @since 4.9
         *
         * @param             \stdClass     $post_data The post insertion/update payload.
         * @param \WP_REST_Request $request The current insertion or update request object.
         *
         * @return \stdClass The post insertion/update payload with an added `meta_input` entry if
         *                   the insertion/update of UTC dates is required.
         */
        public function add_utc_dates($post_data, \WP_REST_Request $request)
        {
        }
    }
}
namespace Tribe\Events\Editor\Objects {
    /**
     * Class Editor_Object_Interface
     *
     * @since   5.1.0
     *
     * @package Tribe\Events\Editory\Objects
     */
    interface Editor_Object_Interface
    {
        /**
         * Returns the editor object data in the format required by the block editor.
         *
         * @since 5.1.0
         *
         * @param string|null $key     The specific data key to get, or `null` to get all data.
         * @param mixed       $default The default value to return if the specified data key is not found, ignored if the
         *                             data key is `null`.
         *
         * @return array<string,mixed> An array representation of the block editor object.
         */
        public function data($key = null, $default = null);
    }
    /**
     * Class Event
     *
     * @since   5.1.0
     *
     * @package Tribe\Events\Editor\Objects
     */
    class Event implements \Tribe\Events\Editor\Objects\Editor_Object_Interface
    {
        /**
         * The event data in the format required by the block editor.
         *
         * @since 5.1.0
         *
         * @var array<string,mixed>
         */
        protected $data;
        /**
         * The post object to model the data on.
         *
         * @since 5.1.0
         *
         * @var \WP_Post
         */
        protected $post;
        /**
         * Event constructor.
         *
         * @since 5.1.0
         *
         * @param int|\WP_Post|null $event The event post ID or object, or `null` to use the global `post` object.
         */
        public function __construct($event = null)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function data($key = null, $default = null)
        {
        }
    }
}
namespace {
    class Tribe__Events__Editor__Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 4.7
         *
         */
        public function register()
        {
        }
        public function register_singletons()
        {
        }
        public function call_singletons()
        {
        }
        /**
         * Any hooking any class needs happen here.
         *
         * In place of delegating the hooking responsibility to the single classes they are all hooked here.
         *
         * @since 4.7
         *
         */
        protected function hook()
        {
        }
        /**
         * Binds and sets up implementations at boot time.
         *
         * @since 4.7
         */
        public function boot()
        {
        }
    }
    /**
     * Fetch the Tribe Settings to use on the JS side
     *
     * @since 4.7
     */
    class Tribe__Events__Editor__Settings
    {
        /**
         * Hook into the required places to make it work
         *
         * @since 4.7
         *
         * @return void
         */
        public function hook()
        {
        }
        /**
         * Based on a set of rules determines if a Tribe Option is private or not
         *
         * @since 4.7
         *
         * @param string $key Which key we are checking against
         *
         * @return boolean
         */
        public function is_private_option($key)
        {
        }
        /**
         * Get all Public options of Tribe Options
         *
         * @since 4.7
         *
         * @todo   move the filtering into Core Tribe__Settings_Manager::get_options
         *
         * @return array
         */
        public function get_options()
        {
        }
    }
    /**
     * Allow including of Gutenberg Template
     *
     * @since 4.7
     */
    class Tribe__Events__Editor__Template extends \Tribe__Template
    {
        /**
         * Building of the Class template configuration
         *
         * @since 4.7
         */
        public function __construct()
        {
        }
        /**
         * Return the attributes of the template
         *
         * @since 4.7
         *
         * @param array $default_attributes
         * @return array
         */
        public function attributes($default_attributes = [])
        {
        }
        /**
         * Return a specific attribute
         *
         * @since 4.7
         *
         * @param  mixed $default
         * @return mixed
         */
        public function attr($index, $default = \null)
        {
        }
        /**
         * Set notices
         *
         * @since 4.7
         *
         * @return void
         */
        public function set_notices()
        {
        }
    }
    /**
     * Initialize template overwrite for block single pages
     *
     * @since 4.7
     */
    class Tribe__Events__Editor__Template__Overwrite
    {
        /**
         * Hook into the Events Template single page to allow Blocks to be properly reordered
         *
         * @since 4.7
         *
         * @return void
         */
        public function hook()
        {
        }
        /**
         * Gets the file path in Gutenberg Ext
         *
         * @since 4.7
         *
         * @param  array|string  $slug  Which file we want to include
         *
         * @return string
         */
        public function get_path($slug)
        {
        }
        /**
         * Silence the actual templating and lets use an action to prevent Old Stuff to have any sort of interactions
         * with what we are constructing here.
         *
         * @since 4.7
         *
         * @param string $file Which file would be loaded
         *
         * @return string
         */
        public function silence($file)
        {
        }
        /**
         * After `tribe_events_before_view` we will include the blocks template for Single Events
         *
         * @since 4.7
         *
         * @param string $silence Unused file path, since it's always the same for Blocks editor
         *
         * @return string
         */
        public function include_blocks($silence)
        {
        }
        /**
         * If function gutenberg_disable_editor_settings_wpautop() does not exist, use this to
         * disable wpautop in classic editor if blocks exist.
         *
         * @todo This function is a copy of gutenberg_disable_editor_settings_wpautop() from the
         * gutenberg plugin. If WP 5.0 patches this, this function should be removed.
         *
         * @since 4.7
         *
         * @param  array  $settings  Original editor settings.
         * @param  string $editor_id ID for the editor instance.
         *
         * @return array  Filtered settings.
         */
        public function disable_editor_settings_wpautop($settings, $editor_id)
        {
        }
        /**
         * If function gutenberg_wpautop() does not exist, use this to disable wpautop.
         *
         * @deprecated 4.9.5
         *
         * @param  string $content Post content.
         * @return string Paragraph-converted text if non-block content.
         */
        public function wpautop($content)
        {
        }
    }
    /**
     * Facilitates embedding one or more maps utilizing the Google Maps API.
     */
    class Tribe__Events__Embedded_Maps
    {
        /**
         * Script handle for the embedded maps script.
         */
        const MAP_HANDLE = 'tribe_events_embedded_map';
        /**
         * @var Tribe__Events__Embedded_Maps
         */
        protected static $instance;
        /**
         * Post ID of the current event.
         *
         * @var int
         */
        protected $event_id = 0;
        /**
         * Post ID of the current venue (if known/if can be determined).
         *
         * @var int
         */
        protected $venue_id = 0;
        /**
         * Address of the current event/venue.
         *
         * @var string
         */
        protected $address = '';
        /**
         * Container for map address data (potentially allowing for multiple maps
         * per page).
         *
         * @var array
         */
        protected $embedded_maps = [];
        /**
         * Indicates if the Google Maps API script has been enqueued.
         *
         * @var bool
         */
        protected $map_script_enqueued = \false;
        /**
         * @return Tribe__Events__Embedded_Maps
         */
        public static function instance()
        {
        }
        /**
         * Returns the placeholder HTML needed to embed a map within a page and
         * additionally enqueues supporting scripts, etc.
         *
         * @param int  $post_id ID of the pertinent event or venue
         * @param int  $width
         * @param int  $height
         * @param bool $force_load add the map even if no address data can be found
         *
         * @return string
         */
        public function get_map($post_id, $width, $height, $force_load)
        {
        }
        protected function get_ids($post_id)
        {
        }
        protected function form_address()
        {
        }
        public function get_map_data($map_index)
        {
        }
        public function update_map_data($map_index, array $data)
        {
        }
        protected function setup_scripts()
        {
        }
        protected function enqueue_map_scripts()
        {
        }
    }
    /**
     * Class Event_Cleaner
     *
     * @since 4.6.13
     */
    class Tribe__Events__Event_Cleaner
    {
        /**
         * The option name to move old events to trash.
         *
         * @var $key_trash_events
         *
         * @since 4.6.13
         */
        public $key_trash_events = 'trash-past-events';
        /**
         * The option name to permanently delete old events.
         *
         * @var $key_delete_events
         *
         * @since 4.6.13
         */
        public $key_delete_events = 'delete-past-events';
        public function __construct(\Tribe__Events__Event_Cleaner_Scheduler $scheduler = \null)
        {
        }
        /**
         * Receives the existing value and the new value (modified by user) for the $key_trash_events option,
         * compares them and runs the scheduler if the conditions are satisfied.
         *
         * @param array<string,mixed>|null $old_value The old value of the `tribe_events_calendar_options` option.
         * @param array<string,mixed>|null $new_value The old value of the `tribe_events_calendar_options` option.
         *
         * @since 4.6.13
         * @since 5.3.0 Loosen the type-checking to avoid errors during option updates.
         */
        public function move_old_events_to_trash($old_value = [], $new_value = [])
        {
        }
        /**
         * Receives the existing value and the new value (modified by user) for the $key_delete_events option,
         * compares them and runs the scheduler if the conditions are satisfied.
         *
         * @param array $old_value
         * @param array $new_value
         *
         * @since 4.6.13
         */
        public function permanently_delete_old_events(array $old_value, array $new_value)
        {
        }
    }
    /**
     * Class Event_Cleaner_Scheduler
     *
     * Uses cron to move old events to trash and/or permanently delete them.
     *
     * @since 4.6.13
     */
    class Tribe__Events__Event_Cleaner_Scheduler
    {
        /**
         * The name of the cron event to permanently delete past events.
         * @static $del_cron_hook
         */
        public static $del_cron_hook = 'tribe_del_event_cron';
        /**
         * The name of the cron event to move past events to trash.
         * @static $trash_cron_hook
         */
        public static $trash_cron_hook = 'tribe_trash_event_cron';
        /**
         * The new value for the $key_trash_events option.
         *
         * @var $trash_new_date
         *
         * @since 4.6.13
         */
        public $trash_new_date;
        /**
         * The new value for the $key_delete_events option.
         *
         * @var $del_new_date
         *
         * @since 4.6.13
         */
        public $del_new_date;
        /**
         * Receives the existing values for $key_trash_events and $key_delete_events options
         * and defines them as trash_new_date and del_new_date variables.
         *
         * @param mixed $move_to_trash
         * @param mixed $permanently_delete
         *
         * @since 4.6.13
         */
        public function __construct($move_to_trash = \null, $permanently_delete = \null)
        {
        }
        /**
         * Receives the new user-defined value for $key_trash_events option
         * and defines it as the trash_new_date variable.
         *
         * @param mixed $trash_new_value - the value for the $key_trash_events option
         *
         * @since 4.6.13
         */
        public function set_trash_new_date($trash_new_value)
        {
        }
        /**
         * Receives the new user-defined value for $key_delete_events option
         * and defines it as the del_new_date variable.
         *
         * @param mixed $del_new_value - the value for the $key_delete_events option
         *
         * @since 4.6.13
         */
        public function set_delete_new_date($del_new_value)
        {
        }
        /**
         * Schedules the hooks to delete and move old events to trash
         * These hooks will be executed daily.
         *
         * @since 4.6.13
         */
        public function add_hooks()
        {
        }
        /**
         * Removes the hooks
         *
         * @since 4.6.13
         */
        public function remove_hooks()
        {
        }
        /**
         * Un-schedules all previously-scheduled cron jobs for tribe_trash_event_cron
         *
         * @since 4.6.13
         */
        public function trash_clear_scheduled_task()
        {
        }
        /**
         * Un-schedules all previously-scheduled cron jobs for tribe_del_event_cron
         *
         * @since 4.6.13
         */
        public function delete_clear_scheduled_task()
        {
        }
        /**
         * Selects events to be moved to trash or permanently deleted.
         *
         * @since 4.6.13
         * @since 6.0.13 Now batches each purge. By default, it limits to 15 occurrences.
         *
         * @param int $month - The value chosen by user to purge all events older than x months
         *
         * @return array $post_ids - an array of event Post_IDs with the Event End Date older than $month
         */
        public function select_events_to_purge($month)
        {
        }
        /**
         * Moves to trash events that ended before a date specified by user
         *
         * @since 4.6.13
         * @since 6.0.13 Added a return value, and suspends Tribe__Events__Dates__Known_Range::rebuild_known_range() until batch is complete.
         *
         * @return array<string,WP_Post|false|null> An associative array of ID to the result of wp_trash_post().
         */
        public function move_old_events_to_trash() : array
        {
        }
        /**
         * Will add the hooks for the Tribe__Events__Dates__Known_Range::rebuild_known_range() callbacks.
         *
         * @since 6.0.13
         */
        public function hook_rebuild_known_range()
        {
        }
        /**
         * Will remove the hooks for the Tribe__Events__Dates__Known_Range::rebuild_known_range() callbacks.
         *
         * @since 6.0.13
         */
        public function unhook_rebuild_known_range()
        {
        }
        /**
         * Permanently deletes events that ended before a date specified by user
         *
         * @since 4.6.13
         *
         * @return mixed - The post object (if it was deleted successfully) or false (failure)
         */
        public function permanently_delete_old_events()
        {
        }
    }
}
namespace Tribe\Events\Event_Status {
    /**
     * Class Admin_Template
     *
     * @since   5.11.0
     *
     * @package Tribe\Events\Event_Status
     */
    class Admin_Template extends \Tribe__Template
    {
        /**
         * Template constructor.
         *
         * Sets the correct paths for templates for event status.
         *
         * @since 5.11.0
         */
        public function __construct()
        {
        }
    }
    /**
     * Class Classic_Editor
     *
     * @since   5.11.0
     *
     * @package Tribe\Events\Event_Status
     */
    class Classic_Editor
    {
        /**
         * ID for the Classic_Editor in WP.
         *
         * @since 5.11.0
         *
         * @var string
         */
        public static $id = 'tribe-events-status';
        /**
         * Action name used for the nonce on saving the metabox.
         *
         * @since 5.11.0
         *
         * @var string
         */
        public static $nonce_action = 'tribe-events-status-nonce';
        /**
         * Stores the template class used.
         *
         * @since 5.11.0
         *
         * @var Admin_Template
         */
        protected $admin_template;
        /**
         * @var Tribe__Context
         */
        protected $context;
        /**
         * Metabox constructor.
         *
         * @since 5.11.0
         *
         * @param Admin_Template $admin_template An instance of the plugin template handler.
         * @param Context|null   $context        The instance of the Context the metabox should use
         *                                       or `null` to use the global one.
         */
        public function __construct(\Tribe\Events\Event_Status\Admin_Template $admin_template, \Tribe__Context $context = null)
        {
        }
        /**
         * Fetches the Metabox title.
         *
         * @since 5.11.0
         *
         * @return string The translated metabox title for Event Status.
         */
        public function get_title()
        {
        }
        /**
         * Render the metabox contents.
         *
         * @since 5.11.0
         *
         * @param WP_Post $post Which post we are using here.
         *
         * @return string The metabox template for event status or an empty string if not an event.
         */
        public function render($post)
        {
        }
        /**
         * Register the metabox in WP system.
         *
         * @since 5.11.0
         */
        public function register_metabox()
        {
        }
        /**
         * Register all the fields in the Rest API for event status.
         *
         * @since 5.11.0
         */
        public function register_fields()
        {
        }
        /**
         * Saves the metabox, which will be triggered in `save_post`.
         *
         * @since 5.11.0
         *
         * @param int     $post_id Which post ID we are dealing with when saving.
         * @param WP_Post $post    WP Post instance we are saving.
         * @param boolean $update  If we are updating the post or not.
         */
        public function save($post_id, $post, $update)
        {
        }
        /**
         * Update event status meta fields.
         *
         * @since 5.11.0
         *
         * @param int   $post_id Which post ID we are dealing with when saving.
         * @param array $data    An array of meta field values.
         */
        public function update_fields($post_id, $data)
        {
        }
        /**
         * Delete event status meta fields.
         *
         * @since 5.11.0
         *
         * @param int   $post_id Which post ID we are dealing with when saving.
         * @param array $data    An array of meta field values.
         */
        public function delete_fields($post_id, $data)
        {
        }
    }
}
namespace Tribe\Events\Event_Status\Compatibility\Events_Control_Extension {
    /**
     * Class JSON_LD
     *
     * @since   5.11.0
     *
     * @package Tribe\Events\Event_Status\Compatibility\Events_Control_Extension
     */
    class JSON_LD
    {
        const ONLINE_EVENT_ATTENDANCE_MODE = 'https://schema.org/OnlineEventAttendanceMode';
        /**
         * Modifiers to the JSON LD event object for online attendance events if the extension is active.
         *
         * @since 5.11.0
         *
         * @param object  $data The JSON-LD object.
         * @param array   $args The arguments used to get data.
         * @param WP_Post $post The post object.
         *
         * @return object JSON LD object after modifications.
         */
        public function modify_online_event($data, $args, $post)
        {
        }
        /**
         * Get the Online URL for an Event Trying the Online URL, the Website URL, and using the Permalink if nothing found.
         * A URL is required when using VirtualLocation.
         *
         * @since 5.11.0
         *
         * @param WP_Post $post The post object to use to get the online url for an event.
         *
         * @return mixed The string of the online url for an event if available.
         */
        protected function get_online_url($post)
        {
        }
    }
    /**
     * Class Service_Provider
     *
     * @since   5.11.0
     *
     * @package Tribe\Events\Event_Status\Compatibility\Events_Control_Extension
     */
    class Service_Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Registers the bindings and filters used to ensure compatibility with the Events Control extension.
         *
         * @since 5.11.0
         */
        public function register()
        {
        }
        /**
         * Un-hooks the extension actions that deal with events with canceled or postponed status.
         *
         * @since 5.11.0
         */
        public function handle_actions()
        {
        }
        /**
         * Handles the filters hooked by the extension by short-circuiting or removing them.
         *
         * @since 5.11.0
         */
        public function handle_filters()
        {
        }
        /**
         * Modifiers to the JSON LD object we use.
         *
         * @since 5.11.0
         *
         * @param object  $data The JSON-LD object.
         * @param array   $args The arguments used to get data.
         * @param WP_Post $post The post object.
         *
         * @return object JSON LD object after modifications.
         */
        public function filter_json_ld_modifiers($data, $args, $post)
        {
        }
        /**
         * Short-circuits the templates the extension would load for event status.
         *
         * @since 5.11.0
         *
         * @param bool|null    $done A flag to indicate whether the template request has been handled or not.
         * @param string|array $name The name, or name fragments, of the requested template.
         *
         * @return bool|null Either the original `$done` value if the template is not one of the target ones, or `true` if
         *                   the template is one of the target ones and should not be printed.
         */
        public function short_circuit_templates($done, $name)
        {
        }
        /**
         * This method adds the marked online option to the event status metabox,
         * only when the events control extension is active and virtual event is not.
         * The extension continues to handle the saving and display of the field.
         *
         * @since 5.11.0
         *
         * @param string               $found_file The template file found for the template name.
         * @param array<string>|string $name       The name, or name fragments, of the requested template.
         * @param \Tribe__Template     $template   The template instance that is currently handling the template location
         *
         * @return string An empty string or the HTML of the mark online template.
         */
        public function replace_metabox_template($found_file, $name, \Tribe__Template $template)
        {
        }
    }
}
namespace Tribe\Events\Event_Status\Compatibility\Filter_Bar {
    /**
     * Class Detect
     *
     * @since   5.12.1
     *
     * @package Tribe\Events\Event_Status\Compatibility\Filter_Bar
     */
    class Detect
    {
        /**
         * Detects if the Filter Bar constant is defined and thus active.
         *
         * @since 5.12.1
         *
         * @return bool  Whether the constant is defined.
         */
        public static function is_active()
        {
        }
    }
    /**
     * Class Service_Provider
     *
     * @since   5.12.1
     *
     * @package Tribe\Events\Event_Status\Compatibility\Filter_Bar
     */
    class Service_Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Register the bindings and filters required to ensure compatibility w/Filter Bar.
         *
         * @since 5.12.1
         */
        public function register()
        {
        }
        /**
         * Includes the custom filter class and creates an instance of it.
         *
         * @since 5.12.1
         */
        public function create_filter()
        {
        }
        /**
         * Filters the map of filters available on the front-end to include one for event status.
         *
         * @since 5.12.1
         *
         * @param array<string,string> $map A map relating the filter slugs to their respective classes.
         *
         * @return array<string,string> The filtered slug to filter class map.
         */
        public function filter_context_to_filter_map(array $map)
        {
        }
        /**
         * Filters the list of default Filter Bar filters to add the ones provided by the plugin.
         *
         * @since 5.12.1
         *
         * @param array<string,string> $map A map relating the filter classes to their default names.
         *
         * @return array<string,string> The filtered map relating the filter classes to their default names.
         */
        public function filter_default_filter_names_map($map)
        {
        }
        /**
         * Filters the Context locations to let the Context know how to fetch the value of the filter from a request.
         *
         * @since 5.12.1
         *
         * @param array<string,array> $locations A map of the locations the Context supports and is able to read from and write
         *                                       to.
         *
         * @return array<string,array> The filtered map of Context locations, with the one required from the filter added to it.
         */
        public function filter_context_locations(array $locations)
        {
        }
    }
}
namespace Tribe\Events\Event_Status {
    /**
     * Class Event_Meta
     *
     * @since   5.11.0
     *
     * @package Tribe\Events\Event_Status
     */
    class Event_Meta
    {
        /**
         * Meta Key for Status field.
         *
         * @since 5.11.0
         *
         * @var string
         */
        public static $key_status = '_tribe_events_status';
        /**
         * Meta Key for Canceled reason field.
         *
         * @since 5.11.0
         *
         * @var string
         */
        public static $key_status_reason = '_tribe_events_status_reason';
        /**
         * Meta Key for event status field used for migration from extension.
         *
         * @since 5.11.0
         *
         * @var string
         */
        public static $key_control_status = '_tribe_events_control_status';
        /**
         * Meta Key for Canceled reason field used for migration from extension.
         *
         * @since 5.11.0
         *
         * @var string
         */
        public static $key_status_canceled_reason = '_tribe_events_control_status_canceled_reason';
        /**
         * Meta Key for Postponed reason field used for migration from extension.
         *
         * @since 5.11.0
         *
         * @var string
         */
        public static $key_status_postponed_reason = '_tribe_events_control_status_postponed_reason';
        /**
         * All the meta keys, in a set.
         *
         * @since 5.11.0
         *
         * @var array<string>
         */
        public static $event_status_keys = ['_tribe_events_status', '_tribe_events_status_reason'];
    }
    /**
     * Class Event_Status_Provider
     *
     * @since   5.11.0
     *
     * @package Tribe\Events\Event_Status
     */
    class Event_Status_Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * The constant to disable the event status coding.
         *
         * @since 5.11.0
         */
        const DISABLED = 'TEC_EVENT_STATUS_DISABLED';
        /**
         * Binds and sets up implementations.
         *
         * @since 5.11.0
         */
        public function register()
        {
        }
        /**
         * Returns whether the event status should register, thus activate, or not.
         *
         * @since 5.11.0
         *
         * @return bool Whether the event status should register or not.
         */
        public static function is_active()
        {
        }
        /**
         * Adds the actions required for event status.
         *
         * @since 5.11.0
         */
        protected function add_actions()
        {
        }
        /**
         * Adds the filters required by the plugin.
         *
         * @since 5.11.0
         */
        protected function add_filters()
        {
        }
        /**
         * Handle compatibility with external plugins and extensions for event status.
         *
         * @since 5.12.1
         *
         */
        protected function handle_compatibility()
        {
        }
        /**
         * Register the metabox fields in the correct action.
         *
         * @since 5.11.0
         */
        public function on_init()
        {
        }
        /**
         * Renders the metabox template.
         *
         * @since 5.11.0
         *
         * @param int $post_id  The post ID of the event we are interested in.
         */
        public function register_metabox($post_id)
        {
        }
        /**
         * Register the metabox fields in the correct action.
         *
         * @since 5.11.0
         *
         * @param int     $post_id Which post ID we are dealing with when saving.
         * @param WP_Post $post    WP Post instance we are saving.
         * @param boolean $update  If we are updating the post or not.
         */
        public function on_save_post($post_id, $post, $update)
        {
        }
        /**
         * Filters the object returned by the `tribe_get_event` function to add to it properties related to event status.
         *
         * @since 5.11.0
         *
         * @param WP_Post $post The events post object to be modified.
         *
         * @return \WP_Post The original event object decorated with properties related to event status.
         */
        public function filter_tribe_get_event($post)
        {
        }
        /**
         * Add, to the Context, the locations used by the plugin.
         *
         * @since 5.11.0
         *
         * @param array<string,array> $context_locations The current Context locations.
         *
         * @return array<string,array> The updated Context locations.
         */
        public function filter_context_locations(array $context_locations)
        {
        }
        /**
         * Add the event statuses to select for an event.
         *
         * @since 5.11.0
         *
         * @param array<string|mixed> $statuses       The event status options for an event.
         * @param string              $current_status The current event status for the event or empty string if none.
         *
         * @return array<string|mixed> The event status options for an event.
         */
        public function filter_event_statuses($statuses, $current_status)
        {
        }
        /**
         * Add the status classes for the views v2 elements
         *
         * @since 5.11.0
         *
         * @param array<string|string> $classes Space-separated string or array of class names to add to the class list.
         * @param int|WP_Post          $post    Post ID or post object.
         *
         * @return array<string|string> An array of post classes with the status added.
         */
        public function filter_add_post_class($classes, $class, $post)
        {
        }
        /**
         * Modifiers to the JSON LD object we use.
         *
         * @since 5.11.0
         *
         * @param object  $data The JSON-LD object.
         * @param array   $args The arguments used to get data.
         * @param WP_Post $post The post object.
         *
         * @return object JSON LD object after modifications.
         */
        public function filter_json_ld_modifiers($data, $args, $post)
        {
        }
        /**
         * Adds the templates for event status.
         *
         * @since 5.11.0
         */
        protected function add_templates()
        {
        }
        /**
         * Include the status reason for the single pages.
         *
         * @since 5.11.0
         *
         * @param string $notices_html Previously set HTML.
         * @param array  $notices      Array of notices added previously.
         *
         * @return string  Before event html with the status reason.
         */
        public function filter_include_single_status_reason($notices_html, $notices)
        {
        }
        /**
         * Inserts Status Label.
         *
         * @since 5.11.0
         *
         * @param string   $hook_name        For which template include this entry point belongs.
         * @param string   $entry_point_name Which entry point specifically we are triggering.
         * @param Template $template         Current instance of the Template.
         */
        public function filter_insert_status_label($hook_name, $entry_point_name, $template)
        {
        }
        /**
         * Handles the compatibility with the "The Events Calendar Extension: Events Control" plugin.
         *
         * @since 5.12.1
         */
        public function handle_events_control_extension()
        {
        }
        /**
         * Handles the compatibility with the Filter Bar plugin.
         *
         * @since 5.12.1
         */
        public function handle_filter_bar()
        {
        }
    }
    /**
     * Class JSON_LD.
     *
     * @since   5.11.0
     *
     * @package Tribe\Events\Event_Status
     */
    class JSON_LD
    {
        /**
         * Schema for EventScheduled event status.
         *
         * @since 6.0.11
         */
        const SCHEDULED_SCHEMA = 'https://schema.org/EventScheduled';
        /**
         * The reference schema URL for an offline event attendance mode.
         *
         * @since 5.11.0
         */
        const OFFLINE_EVENT_ATTENDANCE_MODE = 'https://schema.org/OfflineEventAttendanceMode';
        /**
         * The reference schema URL for a canceled event attendance mode.
         *
         * @since 5.11.0
         */
        const CANCELED_SCHEMA = 'https://schema.org/EventCancelled';
        /**
         * The reference schema URL for a postponed event attendance mode.
         *
         * @since 5.11.0
         */
        const POSTPONED_SCHEMA = 'https://schema.org/EventPostponed';
        /**
         * Modifiers to the JSON LD event object.
         *
         * @since 5.11.0
         * @since 6.0.11 Adding a default value for eventStatus.
         *
         * @param object  $data The JSON-LD object.
         * @param array   $args The arguments used to get data.
         * @param WP_Post $post The post object.
         *
         * @return object JSON LD object after modifications.
         */
        public function modify_event($data, $args, $post)
        {
        }
    }
}
namespace Tribe\Events\Event_Status\Models {
    /**
     * Class Event
     *
     * @since   5.11.0
     *
     * @package Tribe\Events\Event_Status\Model
     */
    class Event
    {
        /**
         * Filters the object returned by the `tribe_get_event` function to add to it properties related to event status.
         *
         * @since 5.11.0
         *
         * @param WP_Post $event The event post object.
         *
         * @return WP_Post The original event object decorated with properties related to event status.
         */
        public function add_properties(\WP_Post $event)
        {
        }
        /**
         * Retrieves an event's status.
         *
         * @since 5.11.0
         *
         * @param WP_Post $event Event post object.
         *
         * @return null|string The event's status.
         */
        public function get_status($event)
        {
        }
        /**
         * Retrieves an event's status reason.
         *
         * @since 5.11.0
         *
         * @param WP_Post $event Event ID.
         *
         * @return string The event's status reason, or empty string if none or scheduled status.
         */
        public function get_reason($event)
        {
        }
    }
}
namespace Tribe\Events\Event_Status {
    /**
     * Class Statuses
     *
     * @since   5.11.0
     *
     * @package Tribe\Events\Event_Status
     */
    class Status_Labels
    {
        /**
         * Add the event statuses to select for an event.
         *
         * @since 5.11.0
         *
         * @param array<string|mixed> $statuses       The event status options for an event.
         * @param string              $current_status The current event status for the event or empty string if none.
         *
         * @return array<string|mixed> The event status options for an event.
         */
        public function filter_event_statuses($statuses, $current_status)
        {
        }
        /**
         * Get the event status label.
         *
         * @since 5.12.1
         *
         * @return string The label for the event status.
         */
        public function get_event_status_label()
        {
        }
        /**
         * Get the scheduled status label.
         *
         * @since 5.11.0
         *
         * @return string The label for the scheduled status.
         */
        public function get_scheduled_label()
        {
        }
        /**
         * Get the canceled status label.
         *
         * @since 5.11.0
         *
         * @return string The label for the canceled status.
         */
        public function get_canceled_label()
        {
        }
        /**
         * Get the postponed status label.
         *
         * @since 5.11.0
         *
         * @return string The label for the postponed status.
         */
        public function get_postponed_label()
        {
        }
    }
    /**
     * Class Template
     *
     * @since   5.11.0
     *
     * @package Tribe\Events\Event_Status
     */
    class Template extends \Tribe__Template
    {
        /**
         * Template constructor.
         *
         * @since 5.11.0
         */
        public function __construct()
        {
        }
    }
    /**
     * Class Template_Modifications
     *
     * @since   5.11.0
     *
     * @package Tribe\Events\Event_Status
     */
    class Template_Modifications
    {
        /**
         * Stores the template class used.
         *
         * @since 5.11.0
         *
         * @var Template
         */
        protected $template;
        /**
         * Status Labels.
         *
         * @since 5.11.0
         *
         * @var Status_Labels
         */
        protected $status_labels;
        /**
         * Template Modification constructor.
         *
         * @since 5.11.0
         *
         * @param Template $template      An instance of the plugin template handler.
         * @param Status_Labels $status_labels An instance of the statuses handler.
         */
        public function __construct(\Tribe\Events\Event_Status\Template $template, \Tribe\Events\Event_Status\Status_Labels $status_labels)
        {
        }
        /**
         * Gets the instance of template class set for the metabox.
         *
         * @since 5.11.0
         *
         * @return Template Instance of the template we are using to render this metabox.
         */
        public function get_template()
        {
        }
        /**
         * Add the control classes for the views v2 elements
         *
         * @since 5.11.0
         *
         * @param int|WP_Post $event Post ID or post object.
         *
         * @return array<string|string> An array of post classes.
         */
        public function get_post_classes($event)
        {
        }
        /**
         * Include the event status label and reason to the single page notices.
         *
         * @since 5.11.0
         *
         * @param string               $notices_html Previously set HTML of notices.
         * @param array<string|string> $notices      Array of notices added previously.
         *
         * @return string  HTML for existing notices if any plus the optional status and reason.
         */
        public function add_single_status_reason($notices_html, $notices)
        {
        }
        /**
         * Inserts Status Label.
         *
         * @since 5.11.0
         *
         * @param string   $hook_name        For which template include this entry point belongs.
         * @param string   $entry_point_name Which entry point specifically we are triggering.
         * @param Template $template         Current instance of the Template.
         */
        public function insert_status_label($hook_name, $entry_point_name, $template)
        {
        }
    }
}
namespace {
    /**
     * The Events Calendar integration with Event Tickets Attendees Report class
     *
     * @package The Events Calendar
     * @subpackage Event Tickets
     * @since 4.0.1
     */
    class Tribe__Events__Event_Tickets__Attendees_Report
    {
        /**
         * Constructor
         */
        public function __construct()
        {
        }
        /**
         * Adds hooks for injecting/overriding aspects of the Attendees Report from Event Tickets
         *
         * @since 4.0.1
         */
        public function add_hooks()
        {
        }
        /**
         * Injects event meta data into the Attendees report
         *
         * @param int $event_id
         */
        public function event_details_top($event_id)
        {
        }
    }
    /**
     * The Events Calendar integration with Event Tickets class
     *
     * @package The Events Calendar
     * @subpackage Event Tickets
     * @since 4.0.1
     */
    class Tribe__Events__Event_Tickets__Main
    {
        /**
         * Method to return the private instance of the class
         *
         * @since 4.0.1
         *
         * @return Tribe__Events__Event_Tickets__Main
         */
        public static function instance()
        {
        }
        /**
         * Constructor
         */
        public function __construct()
        {
        }
        /**
         * Attendees Report integration class object accessor method
         *
         * @since 4.0.1
         *
         * @param object $object Override Attendees Report object
         * @return Tribe__Events__Event_Tickets__Attendees_Report
         */
        public function attendees_report($object = \null)
        {
        }
        /**
         * Ticket email integration class object accessor method
         *
         * @since 4.0.2
         *
         * @param object $object Override Ticket Email object
         * @return Tribe__Events__Event_Tickets__Ticket_Email
         */
        public function ticket_email($object = \null)
        {
        }
    }
    /**
     * The Events Calendar integration with Event Tickets ticket email
     *
     * @package The Events Calendar
     * @subpackage Event Tickets
     * @since 4.0.2
     */
    class Tribe__Events__Event_Tickets__Ticket_Email
    {
        /**
         * Constructor
         */
        public function __construct()
        {
        }
        /**
         * Adds hooks for injecting/overriding aspects of the ticket emails from Event Tickets
         *
         * @since 4.0.2
         */
        public function add_hooks()
        {
        }
        /**
         * Includes the start date in the ticket email if the post type is appropriate
         *
         * @since 4.0.2
         * @param boolean $include_start_date Whether or not to include the start date
         * @param int $event_id Event ID
         * @return boolean
         */
        public function maybe_include_start_date($include_start_date, $event_id)
        {
        }
    }
    class Tribe__Events__Featured_Events
    {
        const FEATURED_EVENT_KEY = '_tribe_featured';
        /**
         * Marks an event as featured.
         *
         * @param int|WP_Post $event
         *
         * @return bool
         */
        public function feature($event = \null)
        {
        }
        /**
         * Clears the featured status of an event.
         *
         * @param int|WP_Post $event
         *
         * @return bool
         */
        public function unfeature($event = \null)
        {
        }
        /**
         * Confirms if an event is featured.
         * @param int|WP_Post $event
         *
         * @return bool
         */
        public function is_featured($event = \null)
        {
        }
        /**
         * Indicates is the specified query (or the current global WP_Query object if not
         * specified) relates to featured events.
         *
         * @param WP_Query|null $query
         *
         * @return bool
         */
        public function is_featured_query(\WP_Query $query = \null)
        {
        }
        /**
         * Indicates if 'featured' is set to a positive value either in the URL query
         * or the posted data (if any).
         *
         * @return bool
         */
        public function featured_events_requested()
        {
        }
    }
    /**
     * @internal
     */
    class Tribe__Events__Featured_Events__Permalinks_Helper
    {
        public function hook()
        {
        }
        public function maybe_add_featured_slug($url, $type, $secondary, $term, $url_args, $featured)
        {
        }
    }
    /**
     * @internal
     */
    class Tribe__Events__Featured_Events__Query_Helper
    {
        public function hook()
        {
        }
        public function pre_get_posts($query)
        {
        }
    }
    /**
     * Provides an option to position the main events view on the site homepage.
     */
    class Tribe__Events__Front_Page_View
    {
        public function hook()
        {
        }
        /**
         * Inspect and possibly adapt the main query in order to force the main events page to the
         * front of the house.
         *
         * @param WP_Query $query
         */
        public function parse_query(\WP_Query $query)
        {
        }
        /**
         * Parse the query when the customizer sends request to preview specific page to avoid 404 pages
         * or the wrong page.
         *
         * @since 4.6.15
         *
         * @param WP_Query $query
         */
        public function parse_customizer_query($query)
        {
        }
        /**
         * Where TEC generates a link to the nominal main events page replace it with a link to the
         * front page instead.
         *
         * We'll only do this if pretty permalinks are in use.
         *
         * @param string $url
         *
         * @return string
         */
        public function main_event_page_links($url)
        {
        }
        /**
         * Supplies the nominal main events page URL (ie, the regular /events/ page that is used
         * when front page event view is not enabled).
         *
         * @return string
         */
        protected function get_main_events_url()
        {
        }
        /**
         * Return the $original_value to avoid convert to a positive integer if the $original_value is the same as
         * the ID of the virtual page.
         *
         * @since 4.6.15
         *
         * @param $value
         * @param $option
         * @param $original_value
         *
         * @return mixed
         */
        public function save_page_on_front($value, $option, $original_value)
        {
        }
        /**
         * Add "Main Events Page" option to the Customizer's "Homepage Settings" and the reading settings of the admin
         *
         * @since 4.6.15
         *
         * @param string $output HTML output for drop down list of pages.
         * @param array  $args   The parsed arguments array.
         * @param array  $pages  List of WP_Post objects returned by `get_pages()`
         *
         * @return string
         */
        public function add_events_page_option($output, $args, $pages)
        {
        }
        /**
         * Reset the values for:
         *
         * - page_on_front
         * - page_for_posts
         * - front_page_event_archive
         *
         * if only the value for show_on_front is changed.
         *
         * @since 4.6.15
         *
         * @param $value
         *
         * @return mixed
         */
        public function save_show_on_front($value)
        {
        }
        /**
         * Make sure to set the correct values if we need to update old versions using the previous logic.
         *
         * @since 4.6.15
         * @return boolean
         */
        public function backwards_compatible()
        {
        }
        /**
         * Returns `true` if the 'front_page_event_archive' is `true` and the `page_on_front` is same as the virtual page ID
         *
         * @since 4.6.15
         *
         * @return bool
         */
        public function is_page_on_front()
        {
        }
        /**
         * Returns `true` if the `front_page_event_archive` is `true` otherwise `false`
         *
         * @since 4.6.15
         *
         * @return bool
         */
        public function has_event_archive_option()
        {
        }
        /**
         * Compares the value of the setting `page_on_front` is same as the one used for the virtual page ID.
         *
         * @since 4.6.15
         *
         * @return bool
         */
        public function is_virtual_page_on_front()
        {
        }
        /**
         * Compare a value with the value used on the virtual page ID and converts the var $compare to an integer
         * to make sure the strict comparision is done correctly between two integers.
         *
         * @since 4.6.15
         *
         * @param $compare
         *
         * @return bool
         */
        public function is_virtual_page_id($compare)
        {
        }
        /**
         * Return the ID of the virtual page.
         *
         * @since 4.6.15
         *
         * @return int
         */
        public function get_virtual_id()
        {
        }
        /**
         * Hydrates the post cache for the post that should represent the virtual page.
         *
         * @since 6.0.6
         *
         * @param mixed|null $input The first iput of the method, when used as a filter.
         *
         * @return mixed|null The first input of the method, when used as a filter, unmodified.
         */
        public function hydrate_virtual_page_cache($input = \null)
        {
        }
    }
    /**
     * Class Tribe__Events__Google__Maps_API_Key
     *
     * Handles support for the Google Maps API key.
     */
    class Tribe__Events__Google__Maps_API_Key
    {
        /**
         * @var string
         */
        public static $api_key_option_name = 'google_maps_js_api_key';
        /**
         * The Events Calendar's default Google Maps API Key, which supports the Basic Embed API.
         *
         * @since 4.6.24
         *
         * @var string
         */
        public static $default_api_key = 'AIzaSyDNsicAsP6-VuGtAb1O9riI3oc_NOb7IOU';
        /**
         * @var static
         */
        protected static $instance;
        /**
         * The class singleton constructor.
         *
         * @return Tribe__Events__Google__Maps_API_Key
         */
        public static function instance()
        {
        }
        /**
         * Adds Google Maps API key fields to the addon fields.
         *
         * @param array $addon_fields
         *
         * @return array
         */
        public function filter_tribe_addons_tab_fields(array $addon_fields)
        {
        }
        /**
         * Generates the tooltip text for when The Events Calendar's fallback API key is being used instead of a custom one.
         *
         * @since 4.6.24
         *
         * @return string
         */
        public function get_basic_embed_api_tooltip()
        {
        }
        /**
         * Adds the browser key api key to the Google Maps JavaScript API url if set by the user.
         *
         * @param string $js_maps_api_url
         *
         * @return string
         */
        public function filter_tribe_events_google_maps_api($js_maps_api_url)
        {
        }
        public function filter_tribe_events_pro_google_maps_api($js_maps_api_url)
        {
        }
        /**
         * Ensures the Google Maps API Key field in Settings > Integrations is always populated with TEC's
         * default API key if no user-supplied key is present.
         *
         * @since 4.6.24
         *
         * @param string $value_string The original HTML string for the input's value attribute.
         * @param string $field_name The name of the field; usually the key of the option it's associated with.
         * @return string The default license key as the input's new value.
         */
        public function populate_field_with_default_api_key($value_string, $field_name)
        {
        }
        /**
         * Ensures the Google Maps API Key field in Settings > Integrations shows the correct tooltip text, especially when
         * the auto-populating of the field is done via populate_field_with_default_api_key().
         *
         * @since 4.6.24
         *
         * @param string $tooltip_string The original HTML string for the input's tooltip attribute.
         * @param string $field_name The name of the field; usually the key of the option it's associated with.
         * @return string The default license key as the input's new value.
         */
        public function populate_field_tooltip_with_helper_text($tooltip_string, $field_name)
        {
        }
    }
    class Tribe__Events__Gutenberg
    {
        /**
         * Extension hooks and initialization; exits if the extension is not authorized by Tribe Common to run.
         *
         * @since  4.6.13
         *
         * @deprecated 5.14.0
         */
        public function hook()
        {
        }
        /**
         * Checks if we have The Events Calendar Gutenberg Extension active
         *
         * @since  4.6.13
         *
         * @deprecated 5.14.0
         *
         * @return boolean
         */
        public function is_extension_active()
        {
        }
        /**
         * Checks if we have Gutenberg Project online, only useful while
         * its a external plugin
         *
         * @todo   Revise when Gutenberg is merged into core
         *
         * @since  4.6.13
         *
         * @deprecated 5.14.0
         *
         * @return boolean
         */
        public function is_gutenberg_active()
        {
        }
        /**
         * Checks if we have Editor Block active
         *
         * @since  4.6.13
         *
         * @deprecated 5.14.0
         *
         * @return boolean
         */
        public function is_blocks_editor_active()
        {
        }
        /**
         * Checks if we should display Event Metabox fields
         *
         * Currently only used for fields that we want to hide because they
         * already have a block to replace.
         *
         * @since  4.6.25
         *
         * @deprecated 5.14.0
         *
         * @return boolean
         */
        public function should_display()
        {
        }
        /**
         * Checks if we are on the classic editor page
         *
         * @since  4.6.26
         *
         * @return boolean
         */
        public function is_classic_editor_page()
        {
        }
        /**
         * HTML for the notice from Gutenberg Extension download
         *
         * @since  4.6.13
         *
         * @deprecated 5.14.0
         *
         * @return string
         */
        public function notice()
        {
        }
    }
}
namespace Tribe\Events {
    /**
     * Class I18n
     *
     * @since   5.1.1
     *
     * @package Tribe\Events
     */
    class I18n
    {
        /**
         * A flag to require translation compilation of the input as is.
         *
         * @since 5.1.5
         */
        public const COMPILE_INPUT = 1;
        /**
         * A flag to require translation compilation of the lower-case version of the input.
         *
         * @since 5.1.5
         */
        public const COMPILE_STRTOLOWER = 2;
        /**
         * A flag to require translation compilation of the input in its title form.
         *
         * @since 5.1.5
         */
        public const COMPILE_UCFIRST = 4;
        /**
         * A flag to require translation compilation of the input in all the available forms.
         *
         * @since 5.1.5
         */
        public const COMPILE_ALL = 7;
        /**
         * A flag to require the translations to be returned indexed by language.
         *
         * @since 6.0.13
         */
        public const RETURN_BY_LANGUAGE = 8;
        /**
         * A flag to require the translations to include the slug version of the translation.
         *
         * @since 6.0.13
         */
        public const COMPILE_SLUG = 9;
        /**
         * An instance of the The Events Calendar main class.
         *
         * @since 5.1.1
         *
         * @var TEC
         */
        protected $tec;
        /**
         * I18n constructor.
         *
         * @param TEC $tec An instance of The Events Calendar main class.
         */
        public function __construct(\Tribe__Events__Main $tec)
        {
        }
        /**
         * Get all possible translations for a String based on the given Languages and Domains
         *
         * WARNING: This function is slow because it deals with files, so don't overuse it!
         *
         * @since 5.1.1 Moved here from Tribe__Events__Main.
         * @since 5.1.5   Add support for the $flags argument.
         *
         * @param array  $strings          An array of strings (required).
         * @param array  $languages        Which l10n to fetch the string (required).
         * @param array  $domains          Possible Domains to re-load.
         * @param string $default_language The default language to avoid re-doing that.
         * @param int    $flags            An integer resulting from the combination of compilation flags;
         *                                 defaults to `static::COMPILE_ALL` to compile all versions of the translations.
         *                                 `static::COMPILE_INPUT` will compile the translation for the string, as input.
         *                                 `static::COMPILE_STRTOLOWER` will compile the translation for the string in its
         *                                 lowercase version.
         *                                 `static::COMPILE_UCFIRST` will compile the translation for the string in its
         *                                 title version.
         *                                 `static::RETURN_BY_LANGUAGE` will return the translations indexed by language.
         *
         * @return array<array<string>> A multi level array with the possible translations for the given strings
         */
        public function get_i18n_strings($strings, $languages, $domains = [], $default_language = 'en_US', $flags = 7)
        {
        }
        /**
         * Get all possible translations for a String based on the given Languages and Domains.
         *
         * WARNING: This function is slow because it deals with files, so don't overuse it!
         * Differently from the `get_i18n_strings` method this will not use any domain that's not specified.
         *
         * @since 5.1.1
         * @since 5.1.5   Add support for the $flags argument.
         * @since 6.0.13     Add support for the `RETURN_BY_LANGUAGE` and `COMPILE_SLUG` flags.
         *
         * @param array $strings    An array of strings (required).
         * @param array $languages Which l10n to fetch the string (required).
         * @param array $domains   Possible domains to re-load.
         * @param int   $flags     An integer resulting from the combination of compilation flags;
         *                         defaults to `static::COMPILE_ALL` to compile all versions of the translations.
         *                         `static::COMPILE_INPUT` will compile the translation for the string, as input.
         *                         `static::COMPILE_STRTOLOWER` will compile the translation for the string in its lowercase
         *                         version.
         *                         `static::COMPILE_UCFIRST` will compile the translation for the string in its title
         *                         version.
         *                         `static::RETURN_BY_LANGUAGE` will return the translations indexed by language.
         *
         * @return array<string,array|string> A multi level array with the possible translations for the given strings.
         */
        public function get_i18n_strings_for_domains($strings, $languages, $domains = ['default'], $flags = 7)
        {
        }
        /**
         * Get all possible translations for a URL String based on the given Languages and Domains.
         *
         * WARNING: This function is slow because it deals with files, so don't overuse it!
         * Differently from the `get_i18n_strings` method this will not use any domain that's not specified.
         *
         * This function is same as above one, but instead of sanitizing with 'sanitize_key()' which removes '%',
         * it uses 'sanitize_title()'.
         *
         * @since 6.0.2
         * @since 6.0.13  Add support for `static::COMPILE_SLUG` flag.
         *
         * @param array<string> $strings   An array of strings (required).
         * @param array<string> $languages Which l10n to fetch the string (required).
         * @param array<string> $domains   Possible domains to re-load.
         * @param int           $flags     An integer resulting from the combination of compilation flags;
         *                                 defaults to `static::COMPILE_ALL` to compile all versions of the translations.
         *                                 `static::COMPILE_INPUT` will compile the translation for the string, as input.
         *                                 `static::COMPILE_STRTOLOWER` will compile the translation for the string in its
         *                                 lowercase version.
         *                                 `static::COMPILE_UCFIRST` will compile the translation for the string in its title
         *                                 version.
         *                                 `static::COMPILE_SLUG` will compile the translation for the string in its slug
         *                                 version.
         *
         * @return array<string,array|string> A multi level array with the possible translations for the given strings.
         */
        public function get_i18n_url_strings_for_domains($strings, $languages, $domains = ['default'], $flags = 7)
        {
        }
        /**
         * Executes a callback ensuring the `current_locale` will be set to the specified language code.
         *
         * The method will backup and detach the functions and methods currently filtering the `locale` filter to execute
         * the callback in isolation and restore the filters after that.
         * The main purpose of this method is to avoid a rat race against plugins and themes that will filter the locale
         * by attaching the filtering method or function at `PHP_INT_MAX`.
         *
         * @since 5.1.1
         * @since 5.4.0 Changed the method visibility to public.
         *
         * @param string       $locale The locale to set for the execution of the callback.
         * @param callable     $do     The callable to execute in the context of a specific locale.
         * @param array<mixed> $args   A set of arguments that will be passed to the callback.
         *
         * @return mixed The callback return value, if any.
         */
        public function with_locale($locale, callable $do, array $args = [])
        {
        }
        /**
         * Compiles the translations for a set of strings iterating on a set of domains.
         *
         * The 4th argument is a bitmask to control the compiled translations.
         * E.g. `$i18n->compile_translations( $strings, $domains, I18n::COMPILE_STRTOLOWER);` will only compile
         * translations of the strings in their `strtolower` versions.
         * Combine the flags using the usual PHP syntax: `I18n::COMPILE_INPUT | I18n::COMPILE_STRTOLOWER` to compile
         * only the translation of the string as input and in their lowercase version.
         *
         * @since 5.1.1
         * @since 5.1.5   Add support for the $flags argument.
         * @since 6.0.13     Add support for the `static::COMPILE_SLUG` flag.
         *
         * @param array<string,array|string> $strings The set of strings to compile the translations for.
         * @param string|array<string>       $domains The domain(s) that should be used to compile the string translations.
         * @param int                        $flags   An integer resulting from the combination of compilation flags;
         *                                            defaults to `static::COMPILE_ALL` to compile all versions of the
         *                                            translations.
         *                                            `static::COMPILE_INPUT` will compile the translation for the string,
         *                                            as input.
         *                                            `static::COMPILE_STRTOLOWER` will compile the translation for the
         *                                            string in its lowercase version.
         *                                            `static::COMPILE_UCFIRST` will compile the translation for the string
         *                                            in its title version.
         *                                            `static::COMPILE_SLUG` will compile the translation for the string in
         *                                            its slug version.
         *
         * @return array<string|array> A map of the compiled string translations.
         */
        public function compile_translations(array $strings, $domains, $flags = 7)
        {
        }
    }
}
namespace {
    /**
     * Ignored Events are fully powered by this class
     */
    class Tribe__Events__Ignored_Events
    {
        public static $ignored_status = 'tribe-ignored';
        public static $legacy_deleted_post = 'deleted_event';
        public static $legacy_origin = 'ical-importer';
        /**
         * Where we save the previous Status when ignoring an Event
         *
         * @since 4.5.13
         * @var string
         */
        public static $key_previous_status = '_tribe_ignored_event_previous_status';
        /**
         * Static Singleton Factory Method
         *
         * @return self
         */
        public static function instance()
        {
        }
        public function action_assets()
        {
        }
        /**
         * Filter the displayed bulk actions on the Ignored Events status
         *
         * @param   array $actions List of bulk actions
         *
         * @return  array
         */
        public function filter_bulk_actions($actions)
        {
        }
        /**
         * Makes sure that we have the Required Messages displaying correctly for the Legacy Events Warning
         *
         * @param  array $messages  Array of arrays, with the CPT messages for each status
         * @param  array $counts    Array with the Counts of each one of the messages
         *
         * @return array
         */
        public function filter_updated_messages($messages, $counts)
        {
        }
        /**
         * Returns the HTML for a notice depending on the if we have Legacy Items to be Migrated
         *
         * @return string
         */
        public function render_notice_legacy()
        {
        }
        /**
         * Action to Restore Events on the Single Page
         *
         * @param  WP_Screen $screen Which WP Screen we are currently in
         *
         * @return void|Redirect
         */
        public function action_restore_events()
        {
        }
        /**
         * Allows Bulk Actions to Work it's magic (more Complex than it needs to be)
         *
         * @return void|false
         */
        public function action_restore_ignored()
        {
        }
        /**
         * Which Columns are Available on Ignored Events view
         *
         * @param  array $columns Columns and it's labels
         *
         * @return array
         */
        public function filter_columns($columns)
        {
        }
        /**
         * Filters the Contents of the Columns for the Ignored Events View
         *
         * @param  string      $column Which column we are dealing with
         * @param  int|WP_Post $post   WP Post ID or Object
         *
         * @return string|null|false
         */
        public function action_column_contents($column, $post)
        {
        }
        /**
         * Add the required Row Actions for the Ignored Events View
         *
         * @param  array       $actions List of the current actions
         * @param  int|WP_Post $post    WP Post ID or Object
         *
         * @return array
         */
        public function filter_actions($actions, $post)
        {
        }
        /**
         * Add the new Link to the Ignored events on the Events Page
         *
         * @param array $views Array of all the previous Views/Links
         *
         * @return array $views After adding the new Link
         */
        public function filter_views($views = [])
        {
        }
        /**
         * Count legacy "ignored" posts
         *
         * @return int
         */
        public function count_legacy_deleted_posts()
        {
        }
        /**
         * Check if there are any legacy posts
         *
         * @return boolean
         */
        public function has_legacy_deleted_posts()
        {
        }
        /**
         * Check if there are any ignored posts
         *
         * @param  boolean $check_legacy If the method should also check legacy CPTs
         * @return boolean
         */
        public function has_ignored_posts($check_legacy = \true)
        {
        }
        /**
         * Gets all ids for events that have been ignored
         *
         * @param null|array $data Array of event IDs/objects/data to check
         *
         * @return array
         */
        public function get($args = [])
        {
        }
        /**
         * Gets all ids for events that have been ignored
         *
         * @param null|array $data Array of event IDs/objects/data to check
         *
         * @return WP_Query
         */
        public function get_query($args = [])
        {
        }
        /**
         * Gets all ids for events that have been ignored
         *
         * @param null|array $data Array of event IDs/objects/data to check
         * @param array $args WP_Query args
         *
         * @return array
         */
        public function get_by_id($data = [], $args = [])
        {
        }
        /**
         * Changes the event to the correct Post Status
         *
         * @param  int|WP_Post       $event Which event try to convert
         * @return bool|int|WP_Error
         */
        public function ignore_event($event, $force = \false)
        {
        }
        /**
         * Verify if we can Ignore an Event depending on all the Required rules
         *
         * @param  int|WP_Post $post ID of the Event or it's Object
         *
         * @return bool
         */
        public function can_ignore($post)
        {
        }
        /**
         * Restore Event
         *
         * @param  int|WP_Post       $event Which event try to convert
         * @return bool|int|WP_Error
         */
        public function restore_event($event)
        {
        }
        /**
         * Register the Ignored Post Status
         *
         * @return void
         */
        public function register_ignored_post_status()
        {
        }
        /**
         * Making sure that we have the previous Status saved
         *
         * @since  4.5.13
         *
         * @param  int|WP_Post  $event  Which event to track the Previous status
         *
         * @return bool
         */
        public function action_track_previous_status($event)
        {
        }
        /**
         * On version 4.4 of WP we get a new Filter to prevent an event from been trashed and/or deleted
         *
         * @param  null|bool $check        Boolean or Null depending if we need to delete or not
         * @param  int       $post         WP Post ID
         * @param  bool      $force_delete Force the Event delete
         *
         * @return null|bool
         */
        public function action_pre_delete_event($unused_check, $post, $force_delete)
        {
        }
        /**
         * Used to get an Trashed event and move it to the `post_status` of Ignored
         *
         * @param  int $post ID of the Post
         *
         * @return bool|null
         */
        public function action_from_trash_to_ignored($post)
        {
        }
        /**
         * Method that Handles the AJAX converting of Legacy Ignored Events to the new `post_status`
         * AJAX methods will not return anything, only print a JSON string
         *
         * @return void
         */
        public function ajax_convert_legacy_ignored_events()
        {
        }
        /**
         * Hooks the filters and actions needed for the class to work.
         *
         * @return bool Whether the filters and actions were hooked or not.
         */
        public function hook()
        {
        }
        /**
         * Patch post-list-table queries to include ignored status,
         * as WP just accesses the stati without checking if they exist.
         *
         * @see wp-admin/includes/class-wp-posts-list-table.php->get_views()
         *
         * @since 5.1.5
         *
         * @param object $counts       An object containing the current post_type's post
         *                             counts by status.
         *
         * @return object $counts       The modified object containing the current post_type's post
         *                              counts by status.
         */
        public function patch_count_posts($counts)
        {
        }
    }
    /**
     * Class Tribe__Events__Importer__Column_Mapper
     */
    class Tribe__Events__Importer__Column_Mapper
    {
        public function __construct($import_type)
        {
        }
        public function set_defaults($defaults)
        {
        }
        public function make_select_box($index)
        {
        }
        public function get_column_label($key)
        {
        }
    }
    /**
     * Class Tribe__Events__Importer__Featured_Image_Uploader
     *
     * An extension of the base class to implement further methods that might be needed.
     */
    class Tribe__Events__Importer__Featured_Image_Uploader extends \Tribe__Image__Uploader
    {
    }
    /**
     * Class Tribe__Events__Importer__File_Importer
     */
    abstract class Tribe__Events__Importer__File_Importer
    {
        protected $required_fields = [];
        /**
         * An array that keeps tracks of the terms created for a taxonomy in the shape
         * [ <taxonomy> => ArrayIterator( [ <term_id>, ... ] ) ].
         *
         * @var array
         */
        protected $created_terms = [];
        protected $log = [];
        protected $skipped = [];
        protected $inverted_map = [];
        public $is_aggregator = \false;
        public $aggregator_record;
        public $default_category;
        public $default_post_status;
        /**
         * @var Tribe__Events__Importer__Featured_Image_Uploader
         */
        protected $featured_image_uploader;
        /**
         * @param string                         $type
         * @param Tribe__Events__Importer__File_Reader $file_reader
         *
         * @return Tribe__Events__Importer__File_Importer
         * @throws InvalidArgumentException
         */
        public static function get_importer($type, \Tribe__Events__Importer__File_Reader $file_reader)
        {
        }
        /**
         * @param Tribe__Events__Importer__File_Reader $file_reader
         */
        public function __construct(\Tribe__Events__Importer__File_Reader $file_reader, \Tribe__Events__Importer__Featured_Image_Uploader $featured_image_uploader = \null)
        {
        }
        public function set_map(array $map_array)
        {
        }
        public function set_type($type)
        {
        }
        public function set_limit($limit)
        {
        }
        public function set_offset($offset)
        {
        }
        public function do_import()
        {
        }
        public function do_import_preview()
        {
        }
        public function get_last_completed_row()
        {
        }
        public function import_complete()
        {
        }
        public function get_line_count()
        {
        }
        public function get_updated_post_count()
        {
        }
        public function get_new_post_count()
        {
        }
        public function get_skipped_row_count()
        {
        }
        public function get_skipped_row_numbers()
        {
        }
        public function get_encoding_changes_row_count()
        {
        }
        public function get_encoding_changes_row_numbers()
        {
        }
        public function get_log_messages()
        {
        }
        public function get_required_fields()
        {
        }
        public function get_type()
        {
        }
        public function import_next_row($throw = \false, $preview = \false)
        {
        }
        protected function update_or_create_post(array $record)
        {
        }
        protected abstract function match_existing_post(array $record);
        protected abstract function update_post($post_id, array $record);
        protected abstract function create_post(array $record);
        protected function is_valid_record(array $record)
        {
        }
        /**
         * Retrieves a value from the record.
         *
         * @since 5.1.6 - modify to use has_value_by_key().
         *
         * @param array  $record An event record from the import.
         * @param string $key    The text of the key to find in the record array.
         *
         * @return mixed|string Either the value or an empty string if the value was not found.
         */
        public function get_value_by_key(array $record, $key)
        {
        }
        /**
         * Check if a key is found.
         *
         * @since 5.1.6
         *
         * @param array  $record An event record from the import.
         * @param string $key    The text of the key to find in the record array.
         *
         * @return bool Whether the key is found in the record.
         */
        public function has_value_by_key(array $record, $key)
        {
        }
        protected function find_matching_post_id($name, $post_type, $post_status = 'publish')
        {
        }
        public function filter_query_for_title_search($search, \WP_Query $wp_query)
        {
        }
        /**
         * @param string|int $featured_image Either an absolute path to an image or an attachment ID.
         *
         * @return Tribe__Events__Importer__Featured_Image_Uploader
         */
        protected function featured_image_uploader($featured_image)
        {
        }
        /**
         * Returns a boolean value from the record.
         *
         * @param array  $record
         * @param string $key
         * @param string $return_true_value    The value to return if the value was found and is truthy.
         * @param string $return_false_value   The value to return if the value was not found or is not truthy;
         *                                     defaults to the original value.
         * @param array  $accepted_true_values An array of values considered truthy.
         *
         * @return string
         */
        public function get_boolean_value_by_key($record, $key, $return_true_value = '1', $return_false_value = \null, $accepted_true_values = ['yes', 'true', '1'])
        {
        }
        /**
         * @param $row
         *
         * @return string
         */
        protected function get_skipped_row_message($row)
        {
        }
        /**
         * @param       $event_id
         * @param array $record
         *
         * @return bool|int|mixed|null
         */
        protected function get_featured_image($event_id, array $record)
        {
        }
        /**
         * Hooks on term creation to log it.
         *
         * @since 4.6.24
         *
         * @param int    $term_id  The newly created term ID.
         * @param int    $tt_id    The newly created term taxonomy ID.
         * @param string $taxonomy The current taxonomy.
         */
        public function on_created_term($term_id, $tt_id, $taxonomy)
        {
        }
        /**
         * Hooks on the term creation to watch for any newly created terms.
         *
         * @since 4.6.24
         */
        public function watch_term_creation()
        {
        }
        /**
         * Stops watching for term creation and logging.
         *
         * @since 4.6.24
         */
        public function stop_watching_term_creation()
        {
        }
        /**
         * Returns an iterator to iterate over the last created terms.
         *
         * @since 4.6.24
         *
         * By default a NoRewindIterator will be returned, this will allow successive calls from iterating code,
         * e.g. a `foreach`, to resume from the previously last position.
         *
         * @param string $taxonomy The taxonomy to fetch the created terms for.
         * @param bool   $rewind   Whether to return a rewinding iterator (`true`) or a NoRewind one (`false`);
         *                         defaults to `false`.
         *
         * @return ArrayIterator|NoRewindIterator An ArrayIterator built on the term IDs created for the taxonomy
         *                                        or a NoRewindIterator built on top of it.
         */
        public function created_terms($taxonomy, $rewind = \false)
        {
        }
    }
    /**
     * Class Tribe__Events__Importer__File_Importer_Events
     */
    class Tribe__Events__Importer__File_Importer_Events extends \Tribe__Events__Importer__File_Importer
    {
        protected $required_fields = ['event_name', 'event_start_date'];
        /**
         * Searches the database for an existing event matching the one described
         * by the specified record.
         *
         * @param array $record An array of values from the Events CSV file.
         *
         * @return int An event matching the one described by the record or `0` if no matching
         *            events are found.
         */
        protected function match_existing_post(array $record)
        {
        }
        /**
         * Update an event with the imported information.
         *
         * @param integer             $post_id The event ID to update.
         * @param array<string|mixed> $record  An event record from the import.
         *
         * @return false False if the update authority is set to retain or void if the update completes.
         */
        protected function update_post($post_id, array $record)
        {
        }
        /**
         * Create an event with the imported information.
         *
         * @param array<string|mixed> $record An event record from the import.
         *
         * @return integer The new event's post id.
         */
        protected function create_post(array $record)
        {
        }
        /**
         * Get Post Text from Import or Existing Value using the provided field name and post field.
         *
         * @since 5.1.6
         *
         * @param int    $event_id   The event id being updated by import.
         * @param array  $record     An event record from the import.
         * @param string $field      The import field name.
         * @param string $post_field The post field name.
         *
         * @return string The description value to update the event with.
         */
        protected function get_post_text_field($event_id, $record, $field, $post_field)
        {
        }
    }
    /**
     * Class Tribe__Events__Importer__File_Importer_Organizers
     */
    class Tribe__Events__Importer__File_Importer_Organizers extends \Tribe__Events__Importer__File_Importer
    {
        protected $required_fields = ['organizer_name'];
        protected function match_existing_post(array $record)
        {
        }
        protected function update_post($post_id, array $record)
        {
        }
        protected function create_post(array $record)
        {
        }
    }
    /**
     * Class Tribe__Events__Importer__File_Importer_Venues
     */
    class Tribe__Events__Importer__File_Importer_Venues extends \Tribe__Events__Importer__File_Importer
    {
        protected $required_fields = ['venue_name'];
        protected function match_existing_post(array $record)
        {
        }
        protected function update_post($post_id, array $record)
        {
        }
        protected function create_post(array $record)
        {
        }
        /**
         * Set default venue values.
         * Note this will only set a value if it has been mapped, and it is empty.
         * If you are using the importer to erase values, you should NOT be triggering this!
         *
         * @since 5.1.6
         *
         * @param array                 $venue  The array of venue data we're modifying.
         * @param array <string,string> $record The event record from the import file. Only contains mapped values.
         *                                      Useful if value and key above don't appear to match what's expected.
         *                                      In the format [ mapped_key => value ].
         *
         * @return array The modified venue data.
         */
        public function set_defaults($venue, $record)
        {
        }
    }
    /**
     * Class Tribe__Events__Importer__File_Reader
     */
    class Tribe__Events__Importer__File_Reader
    {
        public $lines;
        /**
         * Construct for Tribe__Events__Importer__File_Reader.
         *
         * @since 5.14.2 - Fix for PHP 8.0.15 to 8.0.17 on getting the last line of the csv file.
         *
         * @param string $file_path The full path to the file.
         */
        public function __construct($file_path)
        {
        }
        public function __destruct()
        {
        }
        public function get_header()
        {
        }
        public function set_row($row_number)
        {
        }
        public function read_row($row_number)
        {
        }
        public function read_next_row()
        {
        }
        public function get_last_line_number_read()
        {
        }
        public function at_end_of_file()
        {
        }
        /**
         * Sanitizes a row
         *
         * @since 4.5.5
         *
         * @param array $row Import row
         */
        public function sanitize_row($row)
        {
        }
        /**
         * Get the field parameters used for reading CSV files.
         *
         * @since 4.6.1
         *
         * @return array The CSV field parameters.
         */
        public function get_csv_params()
        {
        }
    }
    /**
     * Class Tribe__Events__Importer__File_Uploader
     */
    class Tribe__Events__Importer__File_Uploader
    {
        public function __construct($file_array)
        {
        }
        public function save_file()
        {
        }
        public static function clear_old_files()
        {
        }
        public static function get_file_path()
        {
        }
        /**
         * Indicates if the file returned by self::get_file_path() (still) exists
         * and is readable.
         *
         * @return bool
         */
        public static function has_valid_csv_file()
        {
        }
    }
    /**
     * Class Tribe__Events__Integrations__ACF__ACF
     *
     * Handles the integration between The Events Calendar plugin and Advanced Custom Fields.
     *
     * This class is meant to be an entry point hooking specialized classes and not
     * a logic hub per se.
     */
    class Tribe__Events__Integrations__ACF__ACF
    {
        /**
         * @var Tribe__Events__Integrations__ACF__ACF
         */
        protected static $instance;
        /**
         * @return Tribe__Events__Integrations__ACF__ACF
         */
        public static function instance()
        {
        }
        /**
         * Hooks the filters and actions needed for this integration to work.
         *
         * @since 4.6.3
         */
        public function hook()
        {
        }
        /**
         * Load our compatibility JS script to supplement the events-admin.js script.
         *
         * @since 4.6.3
         */
        public function load_compat_js()
        {
        }
    }
}
namespace Tribe\Events\Integrations {
    /**
     * Integrations with Beaver Builder plugin.
     *
     * @package Tribe\Events\Integrations
     *
     * @since 5.0.2
     */
    class Beaver_Builder
    {
        /**
         * Hooks all the required methods for Beaver_Builder usage on our code.
         *
         * @since 5.0.2
         *
         * @return void  Action hook with no return.
         */
        public function hook()
        {
        }
        /**
         * Restore main post for Beaver Builder plugin.
         *
         * @since 5.0.2
         *
         * @param int    $post_id Which Beaver Builder layout.
         *
         * @return void           Action hook with no return.
         */
        public function action_restore_post($post_id)
        {
        }
    }
}
namespace Tribe\Events\Integrations\Divi {
    /**
     * Class Service_Provider
     *
     * @since   6.0.1
     *
     * @package Tribe\Events\Integrations\Divi
     */
    class Service_Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 6.0.1
         */
        public function register()
        {
        }
        /**
         * Hooks the filters and actions required for this integration to work.
         *
         * @since 6.0.1
         */
        protected function hooks() : void
        {
        }
        /**
         * Unregisters the filters and actions required for this integration to work.
         *
         * @since 6.0.2
         *
         * @return void
         */
        public function unregister() : void
        {
        }
        /**
         * Get the $event_id using get_queried_object_id() for Divi users who aren't using the Default Events Template.
         *
         * @since 6.0.1
         *
         * @param int $event_id The event ID.
         */
        public function filter_tribe_post_id($event_id)
        {
        }
    }
}
namespace Tribe\Events\Integrations\Fusion {
    /**
     * Class Service_Provider
     *
     * @since   5.5.0
     *
     * @package Tribe\Events\Integrations\Fusion
     */
    class Service_Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Registers the bindings and hooks the filters required for the Fusion Core integration to work.
         *
         * @since   5.5.0
         */
        public function register()
        {
        }
        /**
         * Register the hooks for Fusion integration.
         *
         * @since   5.5.0
         */
        public function register_hooks()
        {
        }
        /**
         * Builds and hooks the class that will handle shortcode support in the context of Fusipn Core.
         *
         * @since 5.5.0
         *
         * @param array  $out       The output array of shortcode attributes.
         * @param array  $pairs     The supported attributes and their defaults.
         * @param array  $atts      The user defined shortcode attributes.
         * @param string $shortcode The shortcode name.
         *
         * @return array Change the attributes to fix the class name after WordPress borks the Namespaced method.
         */
        public function filter_shortcode_widget_atts($out, $pairs, $atts, $shortcode)
        {
        }
    }
    /**
     * Class Widget_Shortcode
     *
     * @since   5.5.0
     *
     * @package Tribe\Events\Pro\Integrations\Fusion
     */
    class Widget_Shortcode
    {
        /**
         * Fetches a list of widgets we will fix inside of the Fusion Core builder.
         *
         * @since 5.5.0
         *
         * @return array
         */
        public function get_widget_class_map()
        {
        }
        /**
         * Filters the attributes for shortcodes to modify the class names for Avada/Fusion core widgets.
         *
         * @since 5.5.0
         *
         *
         * @param array  $out       The output array of shortcode attributes.
         * @param array  $pairs     The supported attributes and their defaults.
         * @param array  $atts      The user defined shortcode attributes.
         * @param string $shortcode The shortcode name.
         *
         * @return array Change the attributes to fix the class name after WordPress borks the Namespaced method.
         */
        public function fix_type_for_namespaced_widgets($out, $pairs, $atts, $shortcode)
        {
        }
    }
}
namespace Tribe\Events\Integrations\Hello_Elementor {
    /**
     * Class Service_Provider
     *
     * @since   5.7.0
     *
     * @package Tribe\Events\Integrations\Hello_Elementor
     */
    class Service_Provider extends \TEC\Common\Contracts\Service_Provider
    {
        public function register()
        {
        }
    }
    /**
     * Class Templates
     *
     * @since   5.7.0
     *
     * @package Tribe\Events\Integrations\Hello_Elementor
     */
    class Templates
    {
        /**
         * Redirects an Elementor location to the correct one, if required.
         *
         * @since 5.7.0
         *
         * @param string $template The original Elementor location, e.g. `single` or `archive`.
         *
         * @return bool Whether the template location was redirected or not.
         */
        public function theme_do_location($template)
        {
        }
    }
}
namespace {
    /**
     * Class Tribe__Events__Integrations__Manager
     *
     * Loads and manages the third-party plugins integration implementations.
     */
    class Tribe__Events__Integrations__Manager
    {
        /**
         * @var Tribe__Events__Integrations__Manager
         */
        protected static $instance;
        /**
         * The class singleton constructor.
         *
         * @return Tribe__Events__Integrations__Manager
         */
        public static function instance()
        {
        }
        /**
         * Conditionally loads the classes needed to integrate with third-party plugins.
         *
         * Third-party plugin integration classes and methods will be loaded only if
         * supported plugins are activated.
         */
        public function load_integrations()
        {
        }
        /**
         * Loads our Twenty Seventeen integrations if that theme is active.
         *
         * @since 4.5.10
         *
         * @return bool
         */
        protected function load_twenty_seventeen_integration()
        {
        }
        /**
         * Loads the Fusion integration if Fusion Core is currently active.
         *
         * @since 5.5.0
         */
        public function load_fusion_integration()
        {
        }
    }
}
namespace Tribe\Events\Integrations\Restrict_Content_Pro {
    /**
     * Integrations with Restrict Content Pro plugin.
     *
     * @package Tribe\Events\Integrations
     *
     * @since 6.0.2
     */
    class Service_Provider
    {
        /**
         * Option slug used for storing the choice to apply post-type restrictions to the calendar views.
         *
         * @since 6.0.2
         *
         * @var string
         */
        protected static $option_slug = 'tec_events_rcp_hide_on_views';
        /**
         * Hooks all the required methods for Restrict Content Pro usage on our code.
         *
         * @since 6.0.2
         *
         * @return void  Action hook with no return.
         */
        public function hook()
        {
        }
        /**
         * Adds control for applying post-type restrictions to the calendar views.
         *
         * @since 6.0.2
         */
        public function add_rcp_post_type_restrictions()
        {
        }
        /**
         * Saves the value for applying post-type restrictions to the calendar views.
         *
         * @since 6.0.2
         *
         * @return void
         */
        public function rcp_save_post_type_restrictions()
        {
        }
        /**
         * Filter displayed events based on RCP restrictions.
         *
         * This should effect all calendar views.
         *
         * $done is null by default, if you return _anything_ other than null, the template won't display.
         * There are actually 4 params passed, but the last is $echo - useless for our purposes so we don't include it.
         *
         * @since 6.0.2
         *
         * @param string  null     Whether to continue displaying the template or not.
         * @param array   $name    Template name. Unused although it could be used for targeting a specific template.
         * @param array   $context Any context data you need to expose to this file.
         *
         * @return null|bool Null to display the event, boolean false to not.
         */
        public function filter_view_events($done, $name, $context)
        {
        }
        /**
         * Get the option slug.
         *
         * @since 6.0.2
         *
         * @return string $option_slug The option slug for this setting.
         */
        public static function get_slug()
        {
        }
    }
}
namespace {
    /**
     * Facilitates smoother integration with the Twenty Seventeen theme.
     *
     * @since 4.5.10
     */
    class Tribe__Events__Integrations__Twenty_Seventeen
    {
        /**
         * Performs setup for the Twenty Seventeen integration singleton.
         *
         * @since 4.5.10
         */
        public function hook()
        {
        }
        /**
         * Filters body classes for event archives.
         *
         * The default for event views is to remove the 'has-sidebar' class and
         * modify 'page-one-column' to 'page-two-column', to achieve better fit
         * and avoid JS errors.
         *
         * @since 4.5.10
         * @see   https://central.tri.be/issues/70853
         *
         * @param array $classes
         *
         * @return array
         */
        public function body_classes($classes)
        {
        }
    }
    /**
     * Class Tribe__Events__Integrations__WPML__Category_Translation
     *
     * Translates category links on the site front-end.
     */
    class Tribe__Events__Integrations__WPML__Category_Translation
    {
        /**
         * @var static
         */
        protected static $instance;
        /**
         * @return Tribe__Events__Integrations__WPML__Category_Translation
         */
        public static function instance()
        {
        }
        /**
         * Filters the `tribe_events_category_slug` to return the category slug that's WPML aware.
         *
         * WPML does not currently support translation of custom taxonomies root ,e.g. `category` in
         * The Events Calendar case. But we do take WPML-managed translations of the `category` slug
         * into account in our rewrite rules and try to show a localized version of the `category` slug
         * in the permalinks.
         *
         * @param string $slug The original, possibily translated, category slug.
         *
         * @return string The category slug in its ENG form if the Events Category translation is not active
         *                or in a translation that The Events Calendar supports.
         */
        public function filter_tribe_events_category_slug($slug)
        {
        }
        /**
         * Supplies an array containing all translated forms of the events category slug.
         *
         * The default (English) slug will not be containied in the resulting array.
         * Example: [ 'categorie', 'kategorie', 'categoria' ] // French, German, Italian
         *
         * @return array
         */
        public function get_translated_base_slugs()
        {
        }
    }
    /**
     * Class Tribe__Events__Integrations__WPML__Defaults
     *
     * Handles sensible defaults for to The Events Calendar in WPML.
     */
    class Tribe__Events__Integrations__WPML__Defaults
    {
        /**
         * @var Tribe__Events__Integrations__WPML__Defaults
         */
        protected static $instance;
        /**
         * @var string The name of the sub-option that will store the first run flag.
         */
        public $defaults_option_name = 'wpml_tec_did_set_defaults';
        /**
         * @var Tribe__Settings_Manager
         */
        protected $settings_manager;
        /**
         * Tribe__Events__Integrations__WPML__Defaults constructor.
         *
         * @param SitePress|null               $sitepress
         * @param Tribe__Settings_Manager|null $settings_manager
         */
        public function __construct(\Tribe__Settings_Manager $settings_manager = \null)
        {
        }
        /**
         * The class singleton constructor
         *
         * @return Tribe__Events__Integrations__WPML__Defaults
         */
        public static function instance()
        {
        }
        /**
         * Checks whether default custom field translation option values have been for the current installation.
         *
         * @return bool Whether defaaults have been set already or not.
         */
        public function has_set_defaults()
        {
        }
        /**
         * Dumps the contents of the default WPML config file for the plugin to the root plugin folder.
         *
         * @return bool `true` if the file was correctly written or exists already, `false` if the file does not exist
         *              and the plugin could not write it; in the latter case the plugin will show a notice.
         */
        public function setup_config_file()
        {
        }
        /**
         * Returns the path to the WPML config file for the plugin.
         *
         * @return string
         */
        protected function get_config_file_path()
        {
        }
        /**
         * Returns the default content of WPML config file for the plugin.
         *
         * @return string
         */
        protected function get_config_file_contents()
        {
        }
        /**
         * Returns the notice that will be shown to the user if the WPML config file could not be written.
         *
         * @return string
         */
        protected function get_config_file_fail_message()
        {
        }
    }
    class Tribe__Events__Integrations__WPML__Language_Switcher
    {
        /**
         * @var Tribe__Events__Integrations__WPML__Language_Switcher
         */
        protected static $instance;
        /**
         * @return Tribe__Events__Integrations__WPML__Language_Switcher
         */
        public static function instance()
        {
        }
        /**
         * Updates the `url` field in each language information array to preserve correct calendar links.
         *
         * While the default view of the calendar will will be served on `/events` non default calendar
         * views like `list` or `photo` will be served, respectively, at `/events/list`, `/events/photo`
         * and so on.
         * For any view that's not the default one the `url` field in the language informtion array has to
         * be set to the correct one.
         *
         * @param array $languages The original languages information array.
         *
         * @return array The languages with maybe updated URLs
         */
        public function filter_icl_ls_languages(array $languages = [])
        {
        }
    }
    /**
     * Class Tribe__Events__Integrations__WPML__Linked_Posts
     *
     * Handles linked posts fetching taking WPML managed translations into account.
     */
    class Tribe__Events__Integrations__WPML__Linked_Posts
    {
        /**
         * @var Tribe__Events__Integrations__WPML__Linked_Posts
         */
        protected static $instance;
        /**
         * @var string
         */
        public $current_language;
        /**
         * @var int
         */
        protected $element_id;
        /**
         * @var Tribe__Cache
         */
        protected $cache;
        /**
         * Tribe__Events__Integrations__WPML__Linked_Posts constructor.
         *
         * @param Tribe__Cache|null $cache
         */
        public function __construct(\Tribe__Cache $cache = \null)
        {
        }
        /**
         * @return Tribe__Events__Integrations__WPML__Linked_Posts
         */
        public static function instance()
        {
        }
        /**
         * Assign linked posts managed by The Events Calendar a language.
         *
         * We use the filter as an action to assign linked posts a language.
         * WPML will not "see" posts that have not a language assigned: here we make sure that linked posts like
         * venues and organizers will be assigned the language of the event they are being linked to.
         *
         * @param int    $id               The linked post ID; this would be `null` by default but we know TEC is inserting
         *                                 the post at priority 10.
         * @param array  $data             Unused, an array of data representing the linked post submission.
         * @param string $linked_post_type The linked post type, e.g. `tribe_venue` or `tribe_organizer`.
         * @param string $post_status      Unused, the linked post type post status.
         * @param int    $event_id         The post ID of the event this post is linked to; this will be null for newly created events.
         *
         * @return int The untouched linked post ID.
         */
        public function filter_tribe_events_linked_post_create($id, $data, $linked_post_type, $post_status, $event_id)
        {
        }
        /**
         * Filters the query for linked posts to return an array that will contain the translated version of linked
         * posts or the original one if a translation is missing.
         *
         * @param array $results  An array of linked post types results; comes `null` from the filter but other plugins
         *                        might set it differently.
         * @param array $args     An array of WP_Query args
         *
         * @return array|null An array of linked posts populated taking WPML managed translations into account or `null` if
         *                    WPML is not active or the current language is the default one.
         */
        public function filter_tribe_events_linked_posts_query($results = \null, array $args = [])
        {
        }
        /**
         * Returns a list of post IDs of linked posts for the current language.
         *
         * @param array $args An array WP_Query arguments
         *
         * @return array An array of linked posts filtered by the current language
         */
        protected function get_current_language_linked_posts_ids(array $args)
        {
        }
        /**
         * Returns a list of linked post IDs for the default language.
         *
         *
         * @param array $args An array WP_Query arguments
         *
         * @return array An array of linked posts filtered by the default language
         */
        protected function get_default_language_linked_post_ids(array $args)
        {
        }
        /**
         * Returns the post ID(s) of post(s) of the type specified in the args linked to the current event.
         *
         * @param array $args An array of arguments in the format supported by `WP_Query`
         *
         * @return array An array of linked post IDs or an empty array if no post types, more than one post type
         *               is specified in the args, or the current post is not an event.
         */
        protected function get_linked_post_assigned_to_current(array $args)
        {
        }
        /**
         * Conditionally sets up a `shutdown` action to translated the linked post IDs.
         *
         * @param array $data An array of data about the translation provided by WPML.
         *
         * @return bool Whether the `shutdown` action has been hooked or not.
         */
        public function maybe_translate_linked_posts(array $data)
        {
        }
        /**
         * Translates the linked posts when creating the translated version of a post.
         */
        public function translate_linked_posts()
        {
        }
        /**
         * Replaces the linked post IDs for the current post with the IDs of the translated versions if available.
         *
         * @param int    $post_id
         * @param string $current_language
         * @param array  $linked_post_ids
         */
        protected function set_linked_post_translations_for($post_id, $current_language, $linked_post_ids, $meta_key)
        {
        }
        /**
         * Whether a post ID has a translation in the current language or not.
         *
         * @param int $id The post ID
         *
         * @return bool `true` if the post lacks a WPML managed translation, `false` if the post has a WPML managed translation.
         */
        protected function is_not_translated($id)
        {
        }
    }
    /**
     * Translate post ids in Event meta data.
     *
     * @since 4.6.21
     */
    class Tribe__Events__Integrations__WPML__Meta
    {
        /**
         * @since 4.6.21
         *
         */
        public function hook()
        {
        }
        /**
         * Translates post id in the Event meta data.
         *
         * @since 4.6.21
         *
         * @param string $value
         * @param int    $object_id
         * @param string $meta_key
         * @param bool   $single
         *
         * @return mixed The translated id for _EventOrganizerID & _EventVenueID or false.
         */
        public function translate_post_id($value, $object_id, $meta_key, $single)
        {
        }
        /**
         * Query all translations of organizer or venue to fetch events.
         *
         * @since 4.6.21
         *
         * @param WP_Query $query A reference to the WordPress Query object that is being filtered.
         */
        public function include_all_languages($query)
        {
        }
        /**
         * Filters the meta keys tracked by the Custom Tables v1 implementation to detect a request
         * to update an event to add the meta key used by WPML to indicate a post is a duplicate
         * of another.
         *
         * @since 6.0.9
         *
         * @param array<string> $meta_keys The list of meta keys tracked by the Custom Tables v1 implementation.
         *
         * @return array<string> The list of meta keys tracked by the Custom Tables v1 implementation, including
         *                       the one used by WPML to indicate a post is a duplicate of another.
         */
        public static function filter_ct1_update_meta_keys($meta_keys)
        {
        }
    }
    /**
     * Handles the translation of the plugin settings.
     *
     * @since   5.2.0
     *
     * @package Tribe__Events__Integrations__WPML__Option
     */
    /**
     * Class Tribe__Events__Integrations__WPML__Option
     *
     * @since 5.2.0
     */
    class Tribe__Events__Integrations__WPML__Option
    {
        /**
         * The singleton instance of this class.
         *
         * @since 5.2.0
         *
         * @var Tribe__Events__Integrations__WPML__Option
         */
        protected static $instance;
        /**
         * The singleton method of this class.
         *
         * @since 5.2.0
         *
         * @return Tribe__Events__Integrations__WPML__Option The singleton instance of this class.
         */
        public static function instance()
        {
        }
        /**
         * Translate the option value using WPML filters.
         *
         * @since 5.2.0
         *
         * @param string $option_value The value of the option to translate.
         * @param string $default      The option default value.
         * @param string $option_name  The name of the option to translate.
         *
         * @return string The translated option value.
         *
         * @see   https://wpml.org/wpml-hook/wpml_translate_single_string/
         */
        public function translate($option_value, $default, $option_name)
        {
        }
    }
    /**
     * Class Tribe__Events__Integrations__WPML__Permalinks
     *
     * Handles permalink generations taking WPML into account.
     */
    class Tribe__Events__Integrations__WPML__Permalinks
    {
        /**
         * @var static
         */
        protected static $instance;
        /**
         * @var array
         */
        protected $supported_post_types;
        /**
         * Tribe__Events__Integrations__WPML__Permalinks constructor.
         *
         * @param array|null $supported_post_types An injectable array of supported post types.
         */
        public function __construct(array $supported_post_types = \null)
        {
        }
        /**
         * @return Tribe__Events__Integrations__WPML__Permalinks
         */
        public static function instance()
        {
        }
        /**
         * Filters the post type link to remove WPML language query arg/frags on non translated posts.
         *
         * @param string  $post_link The post's permalink.
         * @param WP_Post $post      The post in question.
         */
        public function filter_post_type_link($post_link, \WP_Post $post)
        {
        }
        /**
         * Returns the post link withe the language query arg removed or updated to the post language.
         *
         * @param string  $post_link
         * @param WP_Post $post
         * @param string  $post_language The post language code.
         *
         * @return string
         */
        protected function update_language_query_arg($post_link, $post_language)
        {
        }
        /**
         * Returns the post permalink taking the post language into account.
         *
         * @param WP_Post      $post
         * @param       string $post_language The post language code.
         *
         * @return string The post permalink.
         */
        protected function get_post_permalink(\WP_Post $post, $post_language)
        {
        }
    }
    /**
     * Class Tribe__Events__Integrations__WPML__Rewrites
     *
     * Handles modifications to rewrite rules taking WPML into account.
     */
    class Tribe__Events__Integrations__WPML__Rewrites
    {
        /**
         * @var Tribe__Events__Integrations__WPML__Linked_Posts
         */
        protected static $instance;
        /**
         * @var string The English version of the venue slug.
         */
        protected $venue_slug = 'venue';
        /**
         * @var string The English version of the organizer slug.
         */
        protected $organizer_slug = 'organizer';
        /**
         * @var array An array of translations for the venue slug
         */
        protected $venue_slug_translations = [];
        /**
         * @var array An array of translations for the organizer slug
         */
        protected $organizer_slug_translations = [];
        /**
         * @var array An array containing the translated version of each venue and organizer rule
         */
        protected $translated_rules = [];
        /**
         * @var array
         */
        protected $replacement_rules = [];
        /**
         * @return Tribe__Events__Integrations__WPML__Linked_Posts
         */
        public static function instance()
        {
        }
        /**
         * Filters the rewrite rules array to add support for translated versions of
         * venue and organizer slugs in their rules.
         *
         * @since 6.0.9 Moving type check down to safeguard this public filter.
         *
         * @param array|mixed $rewrite_rules The rewrite rules associative array from the rewrite_rules_array filter.
         *
         * @return array|mixed Translated rewrite rules or what was passed in.
         */
        public function filter_rewrite_rules_array($rewrite_rules)
        {
        }
        /**
         * Run translations of the rewrite rules array.
         *
         * @since 6.0.9
         *
         * @param array $rewrite_rules The rewrite rules to apply translations to.
         *
         * @return array The translated rules.
         */
        public function translate_rewrite_rules_array(array $rewrite_rules) : array
        {
        }
        /**
         * Translates the venue rewrite rules.
         *
         * @since 4.3.0
         *
         * @return void
         */
        protected function prepare_venue_slug_translations()
        {
        }
        /**
         * Translates the organizer rewrite rules.
         *
         * @since 4.3.0
         *
         * @return void
         */
        protected function prepare_organizer_slug_translations()
        {
        }
        /**
         * Attempts to replace rules with translations.
         *
         * @since 6.0.9 Some safeguard around return value, in case of unexpected rules.
         *
         * @param array $rewrite_rules Associative array of rewrite rules to translate.
         *
         * @return array Translated rules.
         */
        protected function replace_rules_with_translations(array $rewrite_rules) : array
        {
        }
        /**
         * Adds support for the translated version of the venue slug in all venues rewrite
         * rules regular expressions.
         *
         * E.g. `venue/then-some` becomes `(?:venue|luogo|lieu)/then-some`; the match uses
         * non-capturing groups not to mess up the match keys.
         *
         * @param string $rule  A rewrite rule scheme assigning pattern matches to vars.
         * @param string $regex A rewrite rule regular expression.
         */
        public function translate_venue_rules($rule, $regex)
        {
        }
        protected function is_venue_rule($candidate_rule)
        {
        }
        /**
         * Adds support for the translated version of the organizer slug in all organizers rewrite
         * rules regular expressions.
         *
         * E.g. `organizer/then-some` becomes `(?:organizer|organizzatore|organisateur)/then-some`;
         * the match uses non-capturing groups not to mess up the match keys.
         *
         * @param string $rule  A rewrite rule scheme assigning pattern matches to vars.
         * @param string $regex A rewrite rule regular expression.
         */
        public function translate_organizer_rules($rule, $regex)
        {
        }
        protected function is_organizer_rule($candidate_rule)
        {
        }
        /**
         * Adds translated versions of the events category base slug to the rewrite rules.
         *
         * @param array  $bases
         * @param string $method
         *
         * @return array
         */
        public function filter_tax_base_slug($bases, $method)
        {
        }
        /**
         * Translate the Event single slugs.
         *
         * @param array<string,array<string>> $bases The bases to translate.
         *
         * @return array<string,array<string>> The translated bases.
         */
        protected function translate_single_slugs(array $bases) : array
        {
        }
        /**
         * Translate the Event archive slugs.
         *
         * @since 6.0.13
         *
         * @param array<string,array<string>> $bases The bases to translate.
         *
         *
         * @return array<string,array<string>> The translated bases.
         */
        protected function translate_archive_slugs(array $bases) : array
        {
        }
        /**
         * Filters the bases used to generate TEC rewrite rules to use WPML managed translations.
         *
         * @param array<string,string> $bases  An array of bases to translate.
         * @param string               $method The method used to generate the rewrite rules, unused by this method.
         * @param array<string>        $domains
         *
         * @return array An array of bases each with its (optional) WPML managed translations set.
         */
        public function filter_tribe_events_rewrite_i18n_slugs_raw($bases, $method, $domains) : array
        {
        }
        /**
         * Filters the localized matcher to use WPML managed translations.
         *
         * @since 6.0.13
         *
         * @param string|null $localized_slug The matcher localized slug.
         * @param string      $base           The query var the matcher is for.
         *
         * @return string The localized slug.
         */
        public function localize_matcher($localized_slug, $base)
        {
        }
        /**
         * Decodes the bases that have been encoded by default from TEC.
         *
         * Bases are encoded by default to avoid issues with special characters
         * and back-compatibility.
         *
         * @since 6.0.13
         *
         * @param array<string<array<string>> $bases The bases to decode.
         *
         * @return array<string<array<string>> The decoded bases.
         */
        public function urldecode_base_slugs($bases)
        {
        }
    }
    /**
     * Class Tribe__Events__Integrations__WPML__Utils
     *
     * A utility class offering WPML related convenience methods.
     */
    class Tribe__Events__Integrations__WPML__Utils
    {
        /**
         * Returns the translation of an array of strings using WPML supported languages to do so.
         *
         * @param array  $strings
         *
         * @param string $locale    Optional; the locale the strings should be translated to;
         *                          should be in the "fr_FR" format.
         *
         * @return array
         */
        public static function get_wpml_i18n_strings(array $strings, $locale = \null, array $domains = \null)
        {
        }
        /**
         * Fetches the optional post slug translations for a post type.
         *
         * WPML allows translating a custom post type slug  when the String Translation
         * accessory plugin is active.
         *
         * @param string $type The custom post type slug.
         *
         * @return array An associative array in the format [ <language> => <translation> ] of
         *               translations for the slug or an empty array if String Translation is not active or
         *               the post type slug is not translated. Please note that the translation does not
         *               include the original slug.
         */
        public static function get_post_slug_translations_for($type)
        {
        }
        /**
         * Returns an array of currently active locales (other than English).
         *
         * Example: [ 'fr_FR', 'de_DE', 'it_IT' ]
         *
         * @return array
         */
        public static function get_active_locales()
        {
        }
    }
}
namespace Tribe\Events\Integrations\WPML\Views\V2 {
    /**
     * Class Filters
     *
     * @since   5.2.1
     *
     * @package Tribe\Events\Integrations\WPML\Views\V2
     */
    class Filters
    {
        /**
         * Translates the View URL.
         *
         * @since 5.2.1
         *
         * @param string $url The original View URL.
         *
         * @return string The translated View URL.
         */
        public static function translate_view_url($url)
        {
        }
        /**
         * Returns the current request language, read from the request cookie.
         *
         * @since 5.2.1
         *
         * @return string|false Either the request language, e.g. `fr`, or `false` to indicate the language could not be
         *                      parsed from the request context.
         */
        protected static function get_request_lang()
        {
        }
        /**
         * Translates the URls contained in the View template variables.
         *
         * @since 5.2.1
         *
         * @param array<string,mixed> $template_vars The original View template variables.
         *
         * @return array<string,mixed> The View template variables, with the URLs there contained translated, if required.
         */
        public static function translate_template_vars_urls($template_vars = [])
        {
        }
        /**
         * Translates the URL of the public Views, the ones selectable in the Views selector.
         *
         * @since 5.2.1
         *
         * @param array<string,array<string,mixed>> $public_views The original data for the current public Views.
         *
         * @return array<string,array<string,mixed>> $public_views The modified data for the current public Views.
         */
        public static function translate_public_views_urls($public_views = [])
        {
        }
        /**
         * Updates the Views v2 request URI used to set up the `$_SERVER['REQUEST_URI']` in the `View::setup_the_loop`
         * method to make sure it will point to the correct URL.
         *
         * @since 5.2.1
         *
         * @param string $request_uri The original request URI.
         *
         * @return string The corrected request URI.
         */
        public static function translate_view_request_uri($request_uri)
        {
        }
        /**
         * Returns whether the current WPML URL translation setting is the sub-directory one (e.g. `http://foo.bar/it`) or
         * not.
         *
         * @since 5.2.1
         *
         * @return bool Whether the current WPML URL translation setting is the sub-directory one or not.
         */
        protected static function using_subdir()
        {
        }
        /**
         * Filters the View repository arguments to correctly translate the Occurrences permalinks.
         *
         * @since 6.0.4
         *
         * @param array<string,mixed> $template_vars The View template variables.
         *
         * @return array<string,mixed> The View template variables, the Occurrences' permalink translated if required.
         */
        public static function translate_events_permalinks($template_vars)
        {
        }
    }
}
namespace {
    /**
     * Class Tribe__Events__Integrations__WPML__WPML
     *
     * Handles anything relating to The Events Calendar and WPML integration
     *
     * This class is meant to be an entry point hooking specialized classes and not
     * a logic hub per se.
     */
    class Tribe__Events__Integrations__WPML__WPML
    {
        /**
         * @var Tribe__Events__Integrations__WPML__WPML
         */
        protected static $instance;
        /**
         * The class singleton constructor.
         *
         * @return Tribe__Events__Integrations__WPML__WPML
         */
        public static function instance()
        {
        }
        /**
         * Hooks into The Events Calendar and WPML hooks to make the plugins play nice.
         */
        public function hook()
        {
        }
        protected function hook_actions()
        {
        }
        protected function hook_filters()
        {
        }
        protected function setup_cache_expiration_triggers()
        {
        }
    }
}
namespace Tribe\Events\Integrations {
    /**
     * Integrations with WP Rocket plugin.
     *
     * @package Tribe\Events\Integrations
     * @since 5.0.0.2
     */
    class WP_Rocket
    {
        /**
         * Hooks all the required methods for WP_Rocket usage on our code.
         *
         * @since 5.0.0.2
         */
        public function hook()
        {
        }
        /**
         * Filters the content of the WP Rocket excluded inline JS concat.
         *
         * @since 5.0.0.2
         *
         * @param array $excluded_inline Items to be excluded by WP Rocket.
         *
         * @return array Excluded inline scripts after adding the breakpoint code.
         */
        public function filter_excluded_inline_js_concat(array $excluded_inline)
        {
        }
    }
}
namespace {
    /**
     * Class Tribe__Events__Integrations__X_Theme__X_Theme
     *
     * Handles the integration between The Events Calendar plugin and
     * the X Theme.
     *
     * This class is meant to be an entry point hooking specialized classes and not
     * a logic hub per se.
     */
    class Tribe__Events__Integrations__X_Theme__X_Theme
    {
        /**
         * @var Tribe__Events__Integrations__X_Theme__X_Theme
         */
        protected static $instance;
        /**
         * @return Tribe__Events__Integrations__X_Theme__X_Theme
         */
        public static function instance()
        {
        }
        /**
         * Hooks the filters and actions needed for this integration to work.
         */
        public function hook()
        {
        }
        /**
         * Tries to "catch" the loading of X theme content templates that render a highly-filtered
         * excerpt view instead of full content, which often ruins the display of our Month View etc.
         *
         * @since 4.6.2
         * @see x_get_view()
         *
         * @return array $view An array of X-theme view data with the template file and render options.
         */
        public function force_full_content($view, $directory, $file_base, $file_extension)
        {
        }
        /**
         * Use the filter as an action to remove further filtering on X theme side
         * if the query is for our content.
         *
         * @param string $template
         *
         * @return string $template
         */
        public function filter_template_include($template)
        {
        }
        /**
         * Checks if we're in a "main" calendar view, like Month View etc., where we want to apply our
         * various integration filters and overrides.
         *
         * @since 4.6.2
         *
         * @return boolean
         */
        public function should_run_tribe_overrides()
        {
        }
    }
    /**
     * A JSON-LD class extended of the Abstract that lies on the Common Package
     * Used for generating a Event JSON-LD markup
     */
    class Tribe__Events__JSON_LD__Event extends \Tribe__JSON_LD__Abstract
    {
        /**
         * Which type of element this actually is
         *
         * @see https://developers.google.com/structured-data/rich-snippets/
         * @var string
         */
        public $type = 'Event';
        /**
         * On PHP 5.2 the child class doesn't get spawned on the Parent one, so we don't have
         * access to that information on the other side unless we pass it around as a param
         * so we throw __CLASS__ to the parent::instance() method to be able to spawn new instance
         * of this class and save on the parent::$instances variable.
         *
         * @return Tribe__Events__JSON_LD__Event
         */
        public static function instance($name = \null)
        {
        }
        /**
         * Fetches the JSON-LD data for this type of object
         *
         * @param  int|WP_Post|null $post The post/event
         * @param  array  $args
         *
         * @return array
         */
        public function get_data($posts = \null, $args = [])
        {
        }
        /**
         * Normalizes the price entry to make it compatible with JSON-LD guidelines.
         *
         * @param string|int $price
         *
         * @return string
         */
        protected function normalize_price($price)
        {
        }
        /**
         * Get a link to the event
         *
         * @since 4.5.10
         *
         * @param  int|WP_Post  $post The Post Object or ID
         *
         * @return false|string Link to the event or false
         */
        protected function get_link($post)
        {
        }
    }
    /**
     * A JSON-LD class extended of the Abstract that lies on the Common Package
     * Used for generating a Venue/Place JSON-LD markup
     */
    class Tribe__Events__JSON_LD__Organizer extends \Tribe__JSON_LD__Abstract
    {
        /**
         * Which type of element this actually is
         *
         * @see https://developers.google.com/structured-data/rich-snippets/
         * @var string
         */
        public $type = 'Person';
        /**
         * On PHP 5.2 the child class doesn't get spawned on the Parent one, so we don't have
         * access to that information on the other side unless we pass it around as a param
         * so we throw __CLASS__ to the parent::instance() method to be able to spawn new instance
         * of this class and save on the parent::$instances variable.
         *
         * @return Tribe__Events__JSON_LD__Organizer
         */
        public static function instance($name = \null)
        {
        }
        /**
         * Fetches the JSON-LD data for this type of object
         *
         * @param  int|WP_Post|null $post The post/organizer
         * @param  array  $args
         * @return array
         */
        public function get_data($post = \null, $args = ['context' => \false])
        {
        }
        /**
         * Get a link to the event
         *
         * @since 4.5.10
         *
         * @param  int|WP_Post  $post The Post Object or ID
         *
         * @return false|string Link to the event or false
         */
        protected function get_link($post)
        {
        }
    }
    /**
     * A JSON-LD class extended of the Abstract that lies on the Common Package
     * Used for generating a Venue/Place JSON-LD markup
     */
    class Tribe__Events__JSON_LD__Venue extends \Tribe__JSON_LD__Abstract
    {
        /**
         * Which type of element this actually is
         *
         * @see https://developers.google.com/structured-data/rich-snippets/
         * @var string
         */
        public $type = 'Place';
        /**
         * On PHP 5.2 the child class doesn't get spawned on the Parent one, so we don't have
         * access to that information on the other side unless we pass it around as a param
         * so we throw __CLASS__ to the parent::instance() method to be able to spawn new instance
         * of this class and save on the parent::$instances variable.
         *
         * @param  $name DONT USE THIS PARAM, it's here for Abstract compatibility
         * @return Tribe__Events__JSON_LD__Venue
         */
        public static function instance($name = \null)
        {
        }
        /**
         * Fetches the JSON-LD data for this type of object
         *
         * @param  int|WP_Post|null $post The post/venue
         * @param  array  $args
         * @return array
         */
        public function get_data($post = \null, $args = ['context' => \false])
        {
        }
        /**
         * Get a link to the event
         *
         * @since 4.5.10
         *
         * @param  int|WP_Post  $post The Post Object or ID
         *
         * @return false|string Link to the event or false
         */
        protected function get_link($post)
        {
        }
    }
    /**
     * Object used to handle the linking/unlinking of post types for events
     */
    class Tribe__Events__Linked_Posts
    {
        /**
         * @var string Meta key prefix for linked posts
         */
        const META_KEY_PREFIX = '_tribe_linked_post_';
        /**
         * @var Tribe__Events__Linked_Posts Singleton instance of the class
         */
        public static $instance;
        /**
         * @var Tribe__Events__Main Singleton
         */
        public $main;
        /**
         * @var array Collection of post types that can be linked with events
         */
        public $linked_post_types;
        /**
         * @var Tribe__Cache
         */
        protected $cache;
        /**
         * Returns a singleton of this class
         *
         * @return Tribe__Events__Linked_Posts
         */
        public static function instance()
        {
        }
        /**
         * Constructor!
         *
         * @param Tribe__Cache|null $cache
         */
        public function __construct(\Tribe__Cache $cache = \null)
        {
        }
        public function enqueue_scripts()
        {
        }
        /**
         * Generates post_type => container key value pairs of linked post types for use on the front end
         */
        public function get_post_type_container_data()
        {
        }
        /**
         * Registers the default linked post types for events
         *
         * @since 4.2
         */
        public function register_default_linked_post_types()
        {
        }
        /**
         * Registers a post type as a linked post type for events
         *
         * Notable arguments that can be passed/filtered while registering linked post types:
         * - labels['name']
         * - labels['singular_name']
         * - allow_multiple (default: true) specifies how many of the post type can be linked with an event
         * - allow_creation (default: false) specifies whether or not post creation should be allowed
         *
         * @since 4.2
         *
         * @param string $post_type Post type slug
         * @param array $args Arguments for the linked post type - note: gets merged with get_post_type_object data
         *
         * @return boolean
         */
        public function register_linked_post_type($post_type, $args = [])
        {
        }
        /**
         * Returns the meta key for the given post type
         *
         * @since 4.2
         *
         * @param string $post_type Post Type
         *
         * @return string
         */
        public function get_meta_key($post_type)
        {
        }
        /**
         * Returns the meta key for linked post order
         *
         * @deprecated 4.6.23
         * @todo Remove on 4.7
         *
         * @since 4.6.13
         *
         * @param string $post_type Post Type
         *
         * @return bool|string
         */
        public function get_order_meta_key($post_type)
        {
        }
        /**
         * Returns the post type's form field container name
         *
         * @since 4.2
         *
         * @param string $linked_post_type Linked post type
         *
         * @return string
         */
        public function get_post_type_container($linked_post_type)
        {
        }
        /**
         * Returns the post type's ID field name
         *
         * @since 4.2
         *
         * @param string $linked_post_type Linked post type
         *
         * @return string
         */
        public function get_post_type_id_field_index($linked_post_type)
        {
        }
        /**
         * Returns the post type's name field
         *
         * @since 4.2
         *
         * @param string $linked_post_type Linked post type
         *
         * @return string
         */
        public function get_post_type_name_field_index($linked_post_type)
        {
        }
        /**
         * Deregisters a post type as a linked post type for events
         *
         * @since 4.2
         *
         * @param string $post_type Post type slug
         *
         * @return boolean
         */
        public function deregister_linked_post_type($post_type)
        {
        }
        /**
         * Returns whether or not there are any linked posts for the given post id
         *
         * @since 4.2
         *
         * @param int $post_id Post ID of the object
         *
         * @return boolean
         */
        public function has_linked_posts($post_id)
        {
        }
        /**
         * Returns all linked posts for the given post id
         *
         * Post collection is indexed by post type
         *
         * @since 4.2
         *
         * @param int $post_id Post ID of the object
         *
         * @return array
         */
        public function get_linked_posts($post_id)
        {
        }
        /**
         * Returns whether or not there are linked posts of the specified post type
         *
         * @since 4.2
         *
         * @param int $post_id Post ID of the object
         * @param string $post_type Post type of linked posts to look for
         *
         * @return boolean
         */
        public function has_linked_posts_by_post_type($post_id, $post_type)
        {
        }
        /**
         * Returns an array of linked post ID(s) of the specified post type.
         *
         * @since 4.6.22
         *
         * @param int    $post_id   Post ID of the object.
         * @param string $post_type Post type of linked posts to look for.
         *
         * @return array
         */
        public function get_linked_post_ids_by_post_type($post_id, $post_type)
        {
        }
        /**
         * Returns an array of linked WP_Post objects of the specified post type.
         *
         * @since 4.2
         *
         * @see Tribe__Events__Linked_Posts::get_linked_post_ids_by_post_type
         *
         * @param int    $post_id   Post ID of the object.
         * @param string $post_type Post type of linked posts to look for.
         *
         * @return array
         */
        public function get_linked_posts_by_post_type($post_id, $post_type)
        {
        }
        /**
         * Returns whether or not there are any linked post types
         *
         * @since 4.2
         *
         * @return boolean
         */
        public function has_linked_post_types()
        {
        }
        /**
         * Returns the linked post types
         *
         * @since 4.2
         *
         * @return array
         */
        public function get_linked_post_types()
        {
        }
        /**
         * Get Linked Post info
         *
         * @param string    $linked_post_type   Post type of linked post.
         * @param array     $args               Extra WP Query args.
         * @param array|int $linked_post_ids    Post ID(s).
         *
         * @return array
         */
        public function get_linked_post_info($linked_post_type, $args = [], $linked_post_ids = \null)
        {
        }
        /**
         * Returns whether or not the provided post type is a linked post type
         *
         * @since 4.2
         *
         * @param string $post_type Post type slug
         *
         * @return boolean
         */
        public function is_linked_post_type($post_type)
        {
        }
        /**
         * Returns whether or not the provided linked post type allows multiple posts of that type
         *
         * @since 4.2
         *
         * @param string $post_type Post type
         *
         * @return boolean
         */
        public function allow_multiple($post_type)
        {
        }
        /**
         * Links two posts together
         *
         * @since 4.2
         *
         * @param int $target_post_id Post ID of post to add linked post to
         * @param int $subject_post_id Post ID of post to add as a linked post to the target
         *
         * @return int|false The result of `add_metadata()` - the meta ID on success, false on failure.
         */
        public function link_post($target_post_id, $subject_post_id)
        {
        }
        /**
         * Save Order of Linked Posts
         *
         * @deprecated 4.6.23
         * @todo Remove on 4.7
         *
         * @since 4.6.13
         *
         * @param int $target_post_id post id to save meta from
         * @param string $post_type the post-type to get the key for
         * @param array $current_order an array of the linked post ids being saved
         */
        public function order_linked_posts($target_post_id, $post_type, $current_order)
        {
        }
        /**
         * Unlinks two posts from each other.
         *
         * @since 4.2
         *
         * @param int $target_post_id Post ID of post to remove linked post from
         * @param int $subject_post_id Post ID of post to remove as a linked post from the target
         */
        public function unlink_post($target_post_id, $subject_post_id)
        {
        }
        /**
         * Detects linked post type data within a form submission and executes the post type-specific handlers
         *
         * @since 4.2
         *
         * @param int $event_id Submitted Event ID
         * @param array $submission Submitted form data
         */
        public function handle_submission($event_id, $submission)
        {
        }
        /**
         * Handles the submission of linked post data
         *
         * @since 4.2
         *
         * @param int   $event_id   Submitted Event ID.
         * @param int   $post_type  Post type of linked post.
         * @param array $submission Submitted form data.
         */
        public function handle_submission_by_post_type($event_id, $linked_post_type, $submission)
        {
        }
        /**
         * Re-orders linked posts if the order has changed.
         *
         * @since 6.2.0
         *
         * @param int    $event_id Event ID.
         * @param string $linked_post_type The post type of the linked post.
         * @param array  $new_order The new order of the linked posts.
         * @param array  $old_order The old order of the linked posts.
         *
         * @return bool
         */
        public function maybe_reorder_linked_posts_ids(int $event_id, string $linked_post_type, array $new_order = [], array $old_order = []) : bool
        {
        }
        /**
         * Reorder the meta keys to match the block order.
         *
         * @since 6.2.0
         *
         * @param int    $event_id Event ID.
         * @param string $linked_post_type The post type of the linked post.
         * @param array  $original_order The original IDs/order stored in meta.
         *
         * @return array
         */
        public function maybe_get_new_order_from_blocks(int $event_id, string $linked_post_type, array $original_order = [])
        {
        }
        /**
         * Helper function for displaying dropdowns for linked post types
         *
         * @param string $post_type Post type to display dropdown for.
         * @param mixed  $current   The current saved linked post item.
         */
        public function saved_linked_post_dropdown($post_type, $current = \null)
        {
        }
        /**
         * Outputs the metabox form sections for our linked posttypes.
         *
         * @param $event
         */
        public function render_meta_box_sections($event)
        {
        }
        /**
         * A several-step process that prints the "Create or Find {Linked Post Type Name}" labels.
         *
         * Numerous steps and caveats are covered in this method so that we can make these labels, which
         * are rather important, as translation-friendly as possible.
         *
         * @since 4.6.3
         *
         * @param object $post_type The linked post type whose label is being rendered.
         * @param boolean $creation_enabled Whether the current user can create post types. If false, they can only add existing ones.
         *
         * @return string
         */
        public function get_create_or_find_labels($post_type, $creation_enabled)
        {
        }
    }
    /**
     * Class Tribe__Events__Linked_Posts__Base
     *
     * The base for each linked post managing class.
     *
     * @since TDB
     */
    abstract class Tribe__Events__Linked_Posts__Base
    {
        /**
         * @var string The post type managed by the linked post class.
         */
        protected $post_type = '';
        /**
         * @var string The prefix that will be used for the linked post custom fields.
         */
        protected $meta_prefix = '';
        /**
         * @var string The meta key relating a post of the type managed by the class to events.
         */
        protected $event_meta_key = '';
        /**
         * Returns an array of post fields that should be used to spot possible duplicates.
         *
         * @return array An array of post fields to matching strategy in the format
         *               [ <post_field> => [ 'match' => <strategy> ] ]
         *
         * @see   Tribe__Duplicate__Strategy_Factory for supported strategies
         *
         * @since TDB
         */
        protected abstract function get_duplicate_post_fields();
        /**
         * Returns an array of post custom fields that should be used to spot possible duplicates.
         *
         * @return array An array of post fields to matching strategy in the format
         *               [ <custom_field> => [ 'match' => <strategy> ] ]
         *
         * @see   Tribe__Duplicate__Strategy_Factory for supported strategies
         *
         * @since TDB
         */
        protected abstract function get_duplicate_custom_fields();
        /**
         * Finds posts of the type managed by the class that contain the search string.
         *
         * The method will search in the post and custom fields defined by the class.
         *
         * @param string $search
         *
         * @return array|bool An array of post IDs or `false` if nothing was found.
         *
         * @see   get_duplicate_post_fields()
         * @see   get_duplicate_custom_fields()
         *
         * @since TDB
         */
        public function find_like($search)
        {
        }
        /**
         * Returns posts linked to the specified event.
         *
         * @param int|WP_Post $event_id
         *
         * @return array An array of matching post IDs.
         *
         * @since 4.6
         */
        public function find_for_event($event_id)
        {
        }
        /**
         * Returns an array of posts that have events, past or future, linked to them.
         *
         * @param bool  $has_events          Whether to look for posts with linked events or not.
         * @param array $excluded_post_stati An array of post stati that should not be
         *                                   considered for the purpose of marking a post
         *                                   as "with events".
         *
         * @return array An array of matching post IDs.
         *
         * @since 4.6
         */
        public function find_with_events($has_events = \true, $excluded_post_stati = \null)
        {
        }
        /**
         * Finds posts of the type managed by the class that are related to upcoming events.
         *
         * @param bool              $only_with_upcoming
         * @param null|string|array $event_post_status Only fetch events with the defined post status or stati;
         *                                             will default to the post status set according to the current
         *                                             user capabilities if not provided.
         *
         * @return array|bool An array of post IDs or `false` if nothing was found.
         *
         * @since TDB
         */
        public function find_with_upcoming_events($only_with_upcoming = \true, $event_post_status = \null)
        {
        }
        /**
         * Prefixes a key with the correct meta key prefix if needed.
         *
         * @param string $key
         *
         * @return string
         *
         * @since TDB
         */
        protected function prefix_key($key)
        {
        }
        /**
         * Builds and returns a closure to lazily fetch an Event linked posts.
         *
         * @since 4.9.7
         *
         * @param int $event The event post ID or object.
         *
         * @return callable A closure that will fetch an Event linked posts; the default implementation will return a
         *                  closure returning an empty array.
         */
        public static function get_fetch_callback($event)
        {
        }
    }
    /**
     * Class Tribe__Events__Linked_Posts__Chooser_Meta_Box
     *
     * Handles the Venue and Organizer sections inside the Events meta box
     */
    class Tribe__Events__Linked_Posts__Chooser_Meta_Box
    {
        /**
         * @var WP_Post
         */
        protected $event;
        /**
         * @var Tribe__Events__Main
         */
        protected $tribe;
        /**
         * @var Tribe__Events__Linked_Posts
         */
        protected $linked_posts;
        /**
         * @var string
         */
        protected $post_type;
        /**
         * @var string
         */
        protected $singular_name;
        /**
         * @var string
         */
        protected string $singular_name_lowercase;
        public function __construct($event = \null, $post_type = \null)
        {
        }
        /**
         * Work with the specified event object or else use a placeholder if in the middle of creating a new event.
         *
         * @param mixed $event
         */
        protected function get_event($event = \null)
        {
        }
        /**
         * Render the chooser section for the events meta box
         */
        public function render()
        {
        }
        /**
         * Displays the saved linked post dropdown in the event metabox.
         *
         * @since 3.0
         * @since 4.5.11 Genericized to work for all linked posts, not just organizers like it was originally.
         */
        public function render_dropdowns()
        {
        }
        /**
         * Render a single row of the linked post's table
         *
         * @since 3.0
         *
         * @param int $linked_post_id
         */
        protected function single_post_dropdown($linked_post_id)
        {
        }
        /**
         * Render a link to edit the linked post
         *
         * @since 6.0.1 Reversed check for editing posts. Added check if the $edit_link is empty.
         * @since 3.0
         *
         * @param int $linked_post_id
         */
        protected function edit_post_link($linked_post_id)
        {
        }
        /**
         * Determine if the event can use the default setting
         *
         * @param array $current_posts
         * @return bool
         */
        protected function use_default_post($current_posts)
        {
        }
        /**
         * Renders the footer for the linked post area.
         *
         * @since 6.2.0
         */
        protected function render_footer()
        {
        }
        /**
         * Renders the "Add Another Organizer" button
         */
        protected function render_add_post_button()
        {
        }
        /**
         * Renders the map fields if necessary.
         *
         * @since 6.2.0
         */
        protected function render_map_fields()
        {
        }
        /**
         * Renders the handle for sorting linked posts
         *
         * @since 3.0
         */
        protected function move_handle()
        {
        }
        /**
         * Renders the handle for deleting a linked post
         *
         * @since 3.0
         */
        protected function delete_handle()
        {
        }
        /**
         * Supply previously submitted linked post field values to the events-admin.js script in order to provide
         * them with sticky qualities. This *must* run later than the action:priority used to enqueue events-admin.js.
         */
        public function sticky_form_data()
        {
        }
    }
    /**
     * Handles the `Tribe__Events__Main` class deprecated methods.
     *
     * This trait will only make sense in the context of the `Tribe__Events__Main` class
     * and it should not be used elsewhere.
     *
     * @since 6.0.2
     */
    /**
     * Trait Tribe__Events__Main_Deprecated.
     *
     * @since 6.0.2
     */
    trait Tribe__Events__Main_Deprecated
    {
        /**
         * Get the prev/next post for a given event. Ordered by start date instead of ID.
         *
         * @deprecated 6.0.0 Use Tribe__Events__Adjacent_Events::get_closest_event instead.
         *
         * @param WP_Post $post The post/event.
         * @param string  $mode Either 'next' or 'previous'.
         *
         * @return null|WP_Post Either the closest Event post, or `null` if not found.
         */
        public function get_closest_event($post, $mode = 'next')
        {
        }
    }
    /**
     * The Events Calendar Class
     *
     * This is where all the magic happens, the unicorns run wild and the leprechauns use WordPress to schedule events.
     */
    class Tribe__Events__Main
    {
        use \Tribe__Events__Main_Deprecated;
        /**
         * This constant is deprecated (as of 4.0) in favor of Tribe__Main::OPTIONNAME
         */
        const OPTIONNAME = 'tribe_events_calendar_options';
        /**
         * This constant is deprecated (as of 4.0) in favor of Tribe__Main::OPTIONNAME
         */
        const OPTIONNAMENETWORK = 'tribe_events_calendar_network_options';
        const EVENTSERROROPT = '_tribe_events_errors';
        const TAXONOMY = 'tribe_events_cat';
        const POSTTYPE = 'tribe_events';
        const VENUE_POST_TYPE = 'tribe_venue';
        const ORGANIZER_POST_TYPE = 'tribe_organizer';
        const VERSION = '6.2.8.2';
        /**
         * Min Pro Addon
         *
         * @deprecated 4.8
         */
        const MIN_ADDON_VERSION = '6.1.0-dev';
        /**
         * Min Common
         *
         * @deprecated 4.8
         */
        const MIN_COMMON_VERSION = '5.1.15.1-dev';
        const WP_PLUGIN_URL = 'https://wordpress.org/extend/plugins/the-events-calendar/';
        /**
         * Min Version of WordPress
         *
         * @since 4.8
         */
        protected $min_wordpress = '6.2';
        /**
         * Min Version of PHP
         *
         * @since 4.8
         */
        protected $min_php = '7.4.0';
        /**
         * Min Version of Event Tickets
         *
         * @since 4.8
         */
        protected $min_et_version = '5.7.0-dev';
        /**
         * Args for the event post type
         *
         * @var array
         */
        protected $post_type_args = ['public' => \true, 'rewrite' => ['slug' => 'event', 'with_front' => \false], 'menu_position' => 6, 'supports' => ['title', 'editor', 'excerpt', 'author', 'thumbnail', 'custom-fields', 'comments', 'revisions'], 'taxonomies' => ['post_tag'], 'capability_type' => ['tribe_event', 'tribe_events'], 'map_meta_cap' => \true, 'has_archive' => \true, 'menu_icon' => 'dashicons-calendar'];
        /**
         * Args for venue post type
         * @var array
         */
        public $postVenueTypeArgs = [];
        protected $taxonomyLabels;
        /**
         * Args for organizer post type
         * @var array
         */
        public $postOrganizerTypeArgs = [];
        public static $tribeUrl = 'https://tri.be/';
        public static $tecUrl = 'https://theeventscalendar.com/';
        public static $addOnPath = 'products/';
        public static $dotOrgSupportUrl = 'https://wordpress.org/support/plugin/the-events-calendar';
        public $rewriteSlug = 'events';
        public $rewriteSlugSingular = 'event';
        public $category_slug = 'category';
        public $tag_slug = 'tag';
        public $monthSlug = 'month';
        public $featured_slug = 'featured';
        /**
         * @var Tribe__Events__Event_Cleaner_Scheduler $scheduler
         */
        public $scheduler;
        /**
         * @deprecated 5.14.0 use Tribe__Events__Venue::$valid_venue_keys instead.
         */
        public $valid_venue_keys = [];
        /**
         * @deprecated 4.5.8 use `Tribe__Events__Pro__Main::instance()->all_slug` instead.
         *
         * @var string
         */
        public $all_slug = 'all';
        /** @deprecated 4.0 */
        public $taxRewriteSlug = 'event/category';
        /** @deprecated 4.0 */
        public $tagRewriteSlug = 'event/tag';
        /** @var Tribe__Events__Admin__Timezone_Settings */
        public $timezone_settings;
        /**
         * A Stored version of the Welcome and Update Pages.
         * @var Tribe__Admin__Activation_Page
         */
        public $activation_page;
        // @todo [BTRIA-602]: Remove in 4.0.
        public $upcomingSlug = 'upcoming';
        public $pastSlug = 'past';
        public $listSlug = 'list';
        public $daySlug = 'day';
        public $todaySlug = 'today';
        protected $postExceptionThrown = \false;
        /**
         * Deprecated property in 4.0. Use plugin_dir instead
         */
        public $pluginDir;
        /**
         * Deprecated property in 4.0. Use plugin_path instead
         */
        public $pluginPath;
        /**
         * Deprecated property in 4.0. Use plugin_url instead
         */
        public $pluginUrl;
        /**
         * Deprecated property in 4.0. Use plugin_name instead
         */
        public $pluginName;
        public $displaying;
        public $plugin_file;
        public $plugin_dir;
        public $plugin_path;
        public $plugin_url;
        public $plugin_name;
        public $date;
        protected $tabIndexStart = 2000;
        public $metaTags = ['_EventAllDay', '_EventStartDate', '_EventEndDate', '_EventStartDateUTC', '_EventEndDateUTC', '_EventDuration', '_EventVenueID', '_EventShowMapLink', '_EventShowMap', '_EventCurrencySymbol', '_EventCurrencyCode', '_EventCurrencyPosition', '_EventCost', '_EventCostMin', '_EventCostMax', '_EventURL', '_EventOrganizerID', '_EventPhone', '_EventHideFromUpcoming', '_EventTimezone', '_EventTimezoneAbbr', self::EVENTSERROROPT, '_EventOrigin', '_tribe_featured'];
        public $venueTags = ['_VenueCountry', '_VenueAddress', '_VenueCity', '_VenueStateProvince', '_VenueState', '_VenueProvince', '_VenueZip', '_VenuePhone', '_VenueURL', '_VenueShowMap', '_VenueShowMapLink'];
        public $organizerTags = ['_OrganizerEmail', '_OrganizerWebsite', '_OrganizerPhone'];
        public $currentPostTimestamp;
        /**
         * @deprecated 4.4
         */
        public $daysOfWeekShort;
        /**
         * @deprecated 4.4
         */
        public $daysOfWeek;
        /**
         * @deprecated 4.4
         */
        public $daysOfWeekMin;
        /**
         * @deprecated 4.4
         */
        public $monthsFull;
        /**
         * @deprecated 4.4
         */
        public $monthsShort;
        public $singular_venue_label;
        public $plural_venue_label;
        public $singular_organizer_label;
        public $plural_organizer_label;
        public $singular_event_label_lowercase;
        public $plural_event_label_lowercase;
        public $singular_event_label;
        public $plural_event_label;
        public $currentDay;
        public $errors;
        public $registered;
        public static $tribeEventsMuDefaults;
        /**
         * Where in the themes we will look for templates
         *
         * @since 4.7
         *
         * @var string
         */
        public $template_namespace = 'events';
        /**
         * Static Singleton Holder
         * @var self
         */
        protected static $instance;
        /**
         * Get (and instantiate, if necessary) the instance of the class
         *
         * @return self
         */
        public static function instance()
        {
        }
        /**
         * Initializes plugin variables and sets up WordPress hooks/actions.
         */
        protected function __construct()
        {
        }
        /**
         * To avoid duplication of our own methods and to provide a underlying system
         * The Events Calendar maintains a Library called Common to store a base for our plugins
         *
         * Currently we will read the File `common/package.json` to determine which version
         * of the Common Lib we will pass to the Auto-Loader of PHP.
         *
         * In the past we used to parse `common/src/Tribe/Main.php` for the Common Lib version.
         *
         * @link https://github.com/moderntribe/tribe-common
         * @see  self::init_autoloading
         *
         * @return void
         */
        public function maybe_set_common_lib_info()
        {
        }
        /**
         * Prevents bootstrapping and autoloading if the version of ET that is running is too old
         *
         * @since 4.9.3.2
         */
        public function maybe_bail_if_old_et_is_present()
        {
        }
        /**
         * Prevents bootstrapping and autoloading if the version of WP or PHP are too old
         *
         * @since 4.9.3.2
         */
        public function maybe_bail_if_invalid_wp_or_php()
        {
        }
        /**
         * Plugins shouldn't include their functions before `plugins_loaded` because this will allow
         * better compatibility with the autoloader methods.
         *
         * @return void
         */
        public function plugins_loaded()
        {
        }
        /**
         * Adds our main plugin file to the list of paths.
         *
         * @since 6.1.0
         *
         *
         * @param array<string> $paths The paths to TCMN parent plugins.
         *
         * @return array<string>
         */
        public function include_parent_plugin_path_to_common($paths) : array
        {
        }
        /**
         * Load Text Domain on tribe_common_loaded as it requires common
         *
         * @since 4.8
         *
         */
        public function bootstrap()
        {
        }
        /**
         * To allow easier usage of classes on our files we have a AutoLoader that will match
         * class names to it's required file inclusion into the Request.
         *
         * @return void
         */
        protected function init_autoloading()
        {
        }
        /**
         * Load The Events Calendar text domain.
         *
         * @since 5.1.0
         *
         * @return bool
         */
        public function load_text_domain()
        {
        }
        /**
         * Registers the implementations in the container.
         *
         * Classes that should be built at `plugins_loaded` time are also instantiated.
         *
         * @since  4.4
         *
         * @return void
         */
        public function bind_implementations()
        {
        }
        /**
         * Registers this plugin as being active for other tribe plugins and extensions
         */
        protected function register_active_plugin()
        {
        }
        /**
         * Load all the required library files.
         */
        protected function loadLibraries()
        {
        }
        /**
         * Add filters and actions
         */
        protected function addHooks()
        {
        }
        /**
         * Run on applied action init
         */
        public function init()
        {
        }
        /**
         * Settings page object accessor.
         *
         * @since 5.15.0
         *
         * @return Settings
         */
        public function settings()
        {
        }
        /**
         * Initializes any admin-specific code (expects to be called when admin_init fires).
         */
        public function admin_init()
        {
        }
        /**
         * Controller object accessor method
         */
        public function updater()
        {
        }
        public function run_updates()
        {
        }
        /**
         * @return Tribe__Admin__Activation_Page
         */
        public function activation_page()
        {
        }
        /**
         * before_html_data_wrapper adds a persistent tag to wrap the event display with a
         * way for jQuery to maintain state in the dom. Also has a hook for filtering data
         * attributes for inclusion in the dom
         *
         * @param  string $html
         *
         * @return string
         */
        public function before_html_data_wrapper($html)
        {
        }
        /**
         * after_html_data_wrapper close out the persistent dom wrapper
         *
         * @param  string $html
         *
         * @return string
         */
        public function after_html_data_wrapper($html)
        {
        }
        /**
         * When a post transitions from a post_status to another, we remove the archive-slug-conflict notice
         *
         * @param  string $new_status New Status on Post
         * @param  string $old_status Old Status on Post
         * @param  int|WP_Post $post  A Post ID or Post Object
         *
         * @return bool
         */
        public function action_expire_archive_slug_conflict_notice($new_status, $old_status, $post)
        {
        }
        /**
         * Displays the Archive conflict notice using Tribe__Admin__Notices code
         *
         * @return string
         */
        public function render_notice_archive_slug_conflict()
        {
        }
        /**
         * Initialize the addons api settings tab.
         *
         * @since 5.15.0 Added check to see if we are on TEC settings page.
         *
         * @deprecated 6.0.5
         */
        public function do_addons_api_settings_tab($admin_page)
        {
        }
        /**
         * Should we show the upgrade nags?
         *
         * @since 4.9.12
         *
         * @deprecated 6.0.5
         *
         * @return bool
         */
        public function show_upgrade()
        {
        }
        /**
         * Create the upgrade tab.
         *
         * @since 4.9.12
         * @since 5.15.0 Added check to see if we are on TEC settings page.
         *
         * @deprecated 6.0.5
         */
        public function do_upgrade_tab($admin_page)
        {
        }
        /**
         * By default Tribe__Tracker won't track Event Post Types, so we add them here.
         *
         * @since  4.5
         *
         * @param  array $post_types
         *
         * @return array
         */
        public function filter_tracker_event_post_types(array $post_types)
        {
        }
        /**
         * By default Tribe__Tracker won't track our Post Types taxonomies, so we add them here.
         *
         * @since  4.5
         *
         * @param  array $taxonomies
         *
         * @return array
         */
        public function filter_tracker_event_taxonomies(array $taxonomies)
        {
        }
        /**
         * Append the text about The Events Calendar to the feature box on the Help page
         *
         * @filter "tribe_help_pre_get_sections"
         * @param Tribe__Admin__Help_Page $help The Help Page Instance
         * @return void
         */
        public function add_help_section_feature_box_content($help)
        {
        }
        /**
         * Append the text about The Events Calendar to the support section on the Help page
         *
         * @filter "tribe_help_pre_get_sections"
         * @param Tribe__Admin__Help_Page $help The Help Page Instance
         * @return void
         */
        public function add_help_section_support_content($help)
        {
        }
        /**
         * Append the text about The Events Calendar to the Extra Help section on the Help page
         *
         * @filter "tribe_help_pre_get_sections"
         * @param Tribe__Admin__Help_Page $help The Help Page Instance
         * @return void
         */
        public function add_help_section_extra_content($help)
        {
        }
        /**
         * Allow users to specify their own plural label for Venues
         *
         * @return string
         */
        public function get_venue_label_plural()
        {
        }
        /**
         * Allow users to specify their own singular label for Venues
         * @return string
         */
        public function get_venue_label_singular()
        {
        }
        /**
         * Allow users to specify their own plural label for Organizers
         * @return string
         */
        public function get_organizer_label_plural()
        {
        }
        /**
         * Allow users to specify their own singular label for Organizers
         * @return string
         */
        public function get_organizer_label_singular()
        {
        }
        /**
         * Allow users to specify their own plural label for Events
         * @return string
         */
        public function get_event_label_plural()
        {
        }
        /**
         * Allow users to specify their own singular label for Events
         * @return string
         */
        public function get_event_label_singular()
        {
        }
        /**
         * Runs on the "wp" action. Inspects the main query object and if it relates to an events
         * query makes a decision to add a noindex meta tag based on whether events were returned
         * in the query results or not.
         *
         * @since ??
         * @since 6.0.0 Relies on √2 code.
         *
         * Disabling this behavior completely is possible with:
         *
         *     add_filter( 'tec_events_add_no_index_meta_tag', '__return_false' );
         *
         *  Always adding the noindex meta tag for all event views is possible with:
         *
         *     add_filter( 'tribe_events_add_no_index_meta', '__return_true' );
         *
         *  Always adding the noindex meta tag for a specific event view is possible with:
         *
         *     add_filter( "tribe_events_{$view}_add_no_index_meta", '__return_true' );
         *
         *  Where `$view` above is the view slug, e.g. `month`, `day`, `list`, etc.
         */
        public function issue_noindex()
        {
        }
        /**
         * Prints a "noindex,follow" robots tag.
         *
         * @since 6.2.3
         *
         */
        public function print_noindex_meta()
        {
        }
        /**
         * Set the Calendar Version in the options table if it's not already set.
         */
        public function maybeSetTECVersion()
        {
        }
        /**
         * Provides a list of URLs that are considered safe for redirecting
         */
        public function safe_redirect_domains()
        {
        }
        /**
         * Updates the start/end time on all day events to match the EOD cutoff
         *
         * @see 'update_option_'.Tribe__Main::OPTIONNAME
         */
        public function fix_all_day_events($old_value, $new_value)
        {
        }
        /**
         * Test PHP and WordPress versions for compatibility
         *
         * @param string $system - system to be tested such as 'php' or 'wordpress'
         *
         * @return boolean - is the existing version of the system supported?
         */
        public function supportedVersion($system)
        {
        }
        /**
         * Display a WordPress or PHP incompatibility error
         */
        public function notSupportedError()
        {
        }
        /**
         * Display Notice if Event Tickets is Running an Older Version
         *
         * @since 4.8
         *
         */
        public function compatibility_notice()
        {
        }
        /**
         * Prevents Extensions from running if ET is on an Older Version
         *
         * @since 4.9.3.1
         *
         */
        public function remove_exts()
        {
        }
        /**
         * Display a missing-tribe-common library error
         */
        public function missing_common_libs()
        {
        }
        /**
         * Add a menu item class to the event
         *
         * @param array $items
         * @param array $args
         *
         * @return array
         */
        public function add_current_menu_item_class_to_events($items, $args)
        {
        }
        /**
         * Add a checkbox to the menu
         *
         * @param array  $posts
         * @param array  $args
         * @param object $post_type
         *
         * @return array
         */
        public function add_events_checkbox_to_menu($posts, $args, $post_type)
        {
        }
        /**
         * Get the event taxonomy
         *
         * @return string
         */
        public function get_event_taxonomy()
        {
        }
        /**
         * Add space to the title in RSS
         *
         * @param string $title
         *
         * @return string
         */
        public function add_space_to_rss($title)
        {
        }
        /**
         * Update body classes
         *
         * @param array $classes
         *
         * @return array
         * @todo move this to template class
         */
        public function body_class($classes)
        {
        }
        /**
         * Update post classes
         *
         * @param array $classes
         *
         * @return array
         * @todo move this to template class
         */
        public function post_class($classes)
        {
        }
        /**
         * Register the post types.
         */
        public function registerPostType()
        {
        }
        /**
         * Get the rewrite slug
         *
         * @return string
         */
        public function getRewriteSlug()
        {
        }
        /**
         * Get the single post rewrite slug
         *
         * @return string
         */
        public function getRewriteSlugSingular()
        {
        }
        /**
         * Returns the string to be used as the taxonomy slug.
         *
         * @return string
         */
        public function get_category_slug()
        {
        }
        /**
         * Returns the string to be used as the tag slug.
         *
         * @return string
         */
        public function get_tag_slug()
        {
        }
        /**
         * Generate custom post type labels
         */
        protected function generatePostTypeLabels()
        {
        }
        /**
         * Update custom post type messages
         *
         * @param $messages
         *
         * @return mixed
         */
        public function updatePostMessage($messages)
        {
        }
        /**
         * Adds the submenu items for editing the Venues and Organizers.
         * Used to be a PRO only feature, but as of 3.0, it is part of Core.
         *
         */
        public function addVenueAndOrganizerEditor()
        {
        }
        /**
         * Display a helper for the user, about the location and microdata for rich snippets
         * @param int $postId the event ID to see if the helper is needed
         */
        public function display_rich_snippets_helper($post_id)
        {
        }
        /**
         * override default wp_terms_checklist arguments to prevent checked items from bubbling to the
         * top. Instead, retain hierarchy.
         */
        public function prevent_checked_on_top_terms($args, $post_id)
        {
        }
        /**
         * Update admin classes
         *
         * @param array $classes
         *
         * @return array
         */
        public function admin_body_class($classes)
        {
        }
        /**
         * Clean up trashed venues
         *
         * @param int $postId
         *
         */
        public function cleanupPostVenues($postId)
        {
        }
        /**
         * Clean up trashed organizers.
         *
         * @param int $postId
         *
         */
        public function cleanupPostOrganizers($postId)
        {
        }
        /**
         * Clean up trashed venues or organizers.
         *
         * @param string $key
         * @param int    $postId
         *
         */
        protected function removeDeletedPostTypeAssociation($key, $postId)
        {
        }
        /**
         * Filters the post types across all of the Tribe plugins
         */
        public function filter_post_types($post_types)
        {
        }
        /**
         * Get the post types that are associated with TEC.
         *
         * @deprecated 6.0.0
         *
         * @return array The post types associated with this plugin
         */
        public static function getPostTypes()
        {
        }
        /**
         * Set the displaying class property.
         *
         * @deprecated 6.0.0
         */
        public function setDisplay($query = \null)
        {
        }
        /**
         * Returns the default view, providing a fallback if the default is no longer available.
         *
         * This can be useful is for instance a view added by another plugin (such as PRO) is
         * stored as the default but can no longer be generated due to the plugin being deactivated.
         *
         * @deprecated 6.0.0
         *
         * @since 3.3
         * @since 5.12.3 - Add a filter to the default view determination.
         * @since 6.0.0  - Deprecated.
         *
         * @return string $view The slug of the default view.
         */
        public function default_view()
        {
        }
        /**
         * An event can have one or more start dates. This gives
         * the earliest of those.
         *
         * @param int $post_id
         *
         * @return string The date string for the earliest occurrence of the event
         */
        public static function get_series_start_date($post_id)
        {
        }
        /**
         * Runs the Event Scheduler to purge old events
         *
         * @return void
         */
        public function run_scheduler()
        {
        }
        /**
         * Initializes admin-specific items for the events admin list dashboard page. Hooked to the
         * current_screen action
         *
         * @param WP_Screen $screen WP Admin screen object for the current page
         */
        public function init_admin_list_screen($screen)
        {
        }
        public function setup_l10n_strings()
        {
        }
        /**
         * Helper method to return an array of translated month names or short month names
         *
         * @deprecated 6.0.0
         *
         * @param bool $short
         *
         * @return array Translated month names
         */
        public function monthNames($short = \false)
        {
        }
        /**
         * Flush rewrite rules to support custom links
         *
         * @todo This is only registering the events post type, not the meta types
         *
         * @link https://codex.wordpress.org/Custom_Queries#Permalinks_for_Custom_Archives
         */
        public static function flushRewriteRules()
        {
        }
        /**
         * If a themer uses get_post_type_archive_link() to find the event archive URL, this
         * ensures they get the correct result.
         *
         * @param  string $link
         * @param  string $post_type
         * @return string
         */
        public function event_archive_link($link, $post_type)
        {
        }
        /**
         * Returns various internal events-related URLs
         *
         * @param string        $type      type of link. See switch statement for types.
         * @param string|bool   $secondary for $type = month, pass a YYYY-MM string for a specific month's URL
         *                                 for $type = week, pass a Week # string for a specific week's URL
         * @param int|bool|null $term
         * @param bool|null     $featured
         *
         * @return string The link.
         */
        public function getLink($type = 'home', $secondary = \false, $term = \null, $featured = \null)
        {
        }
        /**
         * If pretty perms are off, get the ugly link.
         *
         * @param string $type      The type of link requested.
         * @param bool|string       $secondary Some secondary data for the link.
         *
         * @return string The ugly link.
         */
        public function uglyLink($type = 'home', $secondary = \false)
        {
        }
        /**
         * Returns the GCal export link for a given event id.
         *
         * @deprecated 5.14.0
         *
         * @param int|WP_Post|null $post The Event Post Object or ID, if left empty will give get the current post.
         *
         * @return string The URL for the GCal export link.
         */
        public function googleCalendarLink($post = \null)
        {
        }
        /**
         * Custom Escape for gCal Description to keep spacing characters in the url
         *
         * @return string sanitized url
         */
        public function esc_gcal_url($url)
        {
        }
        /**
         * Returns a link to google maps for the given event. This link can be filtered
         * using the tribe_events_google_map_link hook.
         *
         * @deprecated 6.0.0
         *
         * @param int|null $post_id
         *
         * @return string a fully qualified link to https://maps.google.com/ for this event
         */
        public function googleMapLink($post_id = \null)
        {
        }
        /**
         *  Returns the full address of an event along with HTML markup.  It
         *  loads the address template to generate the HTML
         *
         * @deprecated 6.0.0
         */
        public function fullAddress($post_id = \null, $includeVenueName = \false)
        {
        }
        /**
         *  Returns a string version of the full address of an event
         *
         * @deprecated 6.0.0
         *
         * @param int|WP_Post The post object or post id.
         *
         * @return string The event's address.
         */
        public function fullAddressString($post_id = \null)
        {
        }
        /**
         * plugin activation callback
         * @see register_activation_hook()
         *
         * @param bool $network_deactivating
         */
        public static function activate()
        {
        }
        /**
         * plugin deactivation callback
         * @see register_deactivation_hook()
         *
         * @param bool $network_deactivating
         */
        public static function deactivate($network_deactivating)
        {
        }
        /**
         * Adds an alias for get_post_meta so we can override empty values with defaults.
         * If you need the raw unfiltered data, use get_post_meta directly.
         * This is mainly for templates.
         *
         * @param int    $id     The post id.
         * @param string $meta   The meta key.
         * @param bool   $single Return as string? Or array?
         *
         * @return mixed The meta.
         */
        public function getEventMeta($id, $meta, $single = \true)
        {
        }
        /**
         * Adds / removes the event details as meta tags to the post.
         *
         * @param int     $postId
         * @param WP_Post $post
         *
         */
        public function addEventMeta($postId, $post)
        {
        }
        /**
         * Adds the '_<posttype>Origin' meta field for a newly inserted events-calendar post.
         *
         * @param int     $postId , the post ID
         * @param WP_Post $post   , the post object
         *
         */
        public function addPostOrigin($postId, $post)
        {
        }
        /**
         * Publishes associated venue/organizer when an event is published
         *
         * @param int     $post_id The post ID.
         * @param WP_Post $post    The post object.
         *
         */
        public function publishAssociatedTypes($post_id, $post)
        {
        }
        /**
         * Make sure the venue meta gets saved
         *
         * @param int     $postID The venue id.
         * @param WP_Post $post   The post object.
         *
         * @return null
         */
        public function save_venue_data($postID = \null, $post = \null)
        {
        }
        /**
         * Get venue info.
         *
         * @param int $p          post id
         * @param     $args
         *
         * @return WP_Query->posts || false
         */
        public function get_venue_info($p = \null, $args = [])
        {
        }
        /**
         * Make sure the organizer meta gets saved
         *
         * @param int     $postID The organizer id.
         * @param WP_Post $post   The post object.
         *
         * @return null
         */
        public function save_organizer_data($postID = \null, $post = \null)
        {
        }
        /**
         * Add a new Organizer
         *
         * @deprecated 6.0.0
         *
         * @param      $data
         * @param null $post
         *
         * @return int|WP_Error
         */
        public function add_new_organizer($data, $post = \null)
        {
        }
        /**
         * Get Organizer info.
         *
         * @param int $p          post id
         * @param     $args
         *
         * @return WP_Query->posts || false
         */
        public function get_organizer_info($p = \null, $args = [])
        {
        }
        /**
         * Handle ajax requests from admin form
         *
         */
        public function ajax_form_validate()
        {
        }
        /**
         * Get the current default value strategy
         * @return Tribe__Events__Default_Values
         */
        public function defaults()
        {
        }
        /**
         * Verify that a venue or organizer is unique
         *
         * @param string $name - name of venue or organizer
         * @param string $type - post type
         *
         * @return boolean
         */
        public function verify_unique_name($name, $post_type)
        {
        }
        /**
         * Given a date (YYYY-MM-DD), returns the first of the next month
         * hat tip to Dan Bernadict for method cleanup
         *
         * @deprecated 6.0.0
         *
         * @param string $date
         *
         * @return string Next month's date
         * @throws OverflowException
         */
        public function nextMonth($date)
        {
        }
        /**
         * Given a date (YYYY-MM-DD), return the first of the previous month
         * hat tip to Dan Bernadict for method cleanup
         *
         * @deprecated 6.0.0
         *
         * @param string $date
         *
         * @return string Previous month's date
         * @throws OverflowException
         */
        public function previousMonth($date)
        {
        }
        /**
         * Callback for adding the Meta box to the admin page
         *
         */
        public function addEventBox()
        {
        }
        /**
         * Include the event editor meta box.
         *
         */
        public function eventMetaBox()
        {
        }
        /**
         * Get the date string (shortened).
         *
         * @deprecated 6.0.0
         *
         * @param string $date The date.
         *
         * @return string The pretty (and shortened) date.
         */
        public function getDateStringShortened($date)
        {
        }
        /**
         * Return the next tab index
         *
         */
        public function tabIndex()
        {
        }
        /**
         * Check whether a post is an event.
         *
         * @param int|WP_Post The event/post id or object.
         *
         * @return bool Is it an event?
         */
        public function isEvent($event)
        {
        }
        /**
         * Check whether a post is a venue.
         *
         * @param int|WP_Post The venue/post id or object.
         *
         * @return bool Is it a venue?
         */
        public function isVenue($postId = \null)
        {
        }
        /**
         * Check whether a post is an organizer.
         *
         * @param int|WP_Post The organizer/post id or object.
         *
         * @return bool Is it an organizer?
         */
        public function isOrganizer($postId = \null)
        {
        }
        /**
         * Add meta links to the Plugins list page.
         *
         * @param array  $links The current action links.
         * @param string $file  The plugin to see if we are on TEC.
         *
         * @return array The modified action links array.
         */
        public function addMetaLinks($links, $file)
        {
        }
        /**
         * Register the dashboard widget.
         *
         */
        public function dashboardWidget()
        {
        }
        /**
         * Echo the dashboard widget.
         *
         * @param int $items
         *
         */
        public function outputDashboardWidget($items = 10)
        {
        }
        /**
         * Echoes upsell stuff, if it should.
         *
         * @param int $postId
         *
         */
        public function maybeShowMetaUpsell($postId)
        {
        }
        /**
         * Helper function for getting Post Id. Accepts null or a post id. If no $post object exists, returns false to avoid a PHP NOTICE
         *
         * @param int $postId (optional)
         *
         * @return int post ID
         */
        public static function postIdHelper($postId = \null)
        {
        }
        /**
         * Add the buttons/dropdown to the admin toolbar
         *
         * @return null
         */
        public function add_toolbar_items()
        {
        }
        /**
         * Displays the View Calendar link at the top of the Events list in admin.
         *
         */
        public function addViewCalendar()
        {
        }
        /**
         * Set the menu-edit-page to default display the events-related items.
         *
         */
        public function setInitialMenuMetaBoxes()
        {
        }
        /**
         * Add links to the plugins row
         *
         * @param $actions
         *
         * @return mixed
         * @todo move to an admin class
         */
        public function addLinksToPluginActions($actions)
        {
        }
        /**
         * Disable the canonical redirect if tribe_paged is set
         *
         * @param WP_Query $query The current query object.
         *
         * @return WP_Query The modified query object.
         */
        public function set_tribe_paged($query)
        {
        }
        /**
         * Add filters to register custom cron schedules
         *
         */
        public function filter_cron_schedules()
        {
        }
        /**
         * Add a new scheduled task interval (of 30mins).
         *
         * @param  array $schedules
         * @return array
         */
        public function register_30min_interval($schedules)
        {
        }
        /**
         * Facilitates the import of events in WXR format (ie, via the core WP importer).
         *
         * When WP imports posts it avoids duplication by comparing the post name, date and
         * type of each. Once a post has been imported, if another post matching the above
         * criteria is found it is discarded.
         *
         * In the case of recurring events this would cause all but the first in a series
         * to be discarded and so we workaround the problem by altering the title (and
         * restoring it afterwards - during "wp_import_post_data_processed").
         *
         * We apply this to *all* events being imported because we also need to cater for
         * a scenario where events that were originally created as part of a set of
         * recurring events may later have been broken out of the chain into standalone
         * events (otherwise we could restrict this operation to only those events with
         * a post parent).
         *
         * We're retaining this logic in core (rather than move it to PRO) since it's
         * possible for data from a site running PRO to be imported into a site running only
         * core.
         *
         * @see Tribe__Events__Main::filter_wp_import_data_after()
         *
         * @param array $post
         *
         * @return array
         */
        public function filter_wp_import_data_before($post)
        {
        }
        /**
         * Event titles have been modified by filter_wp_import_data_before().
         * This puts them back how they belong.
         *
         * @param array $post
         *
         * @return array
         * @see Tribe__Events__Main::filter_wp_import_data_before()
         */
        public function filter_wp_import_data_after($post)
        {
        }
        /**
         * Inject TEC specific setting fields into the general tab.
         *
         * @param array $general_tab_fields Fields for the general settings tab.
         *
         * @deprecated 6.0.5
         *
         * @return array
         */
        public function general_settings_tab_fields($general_tab_fields)
        {
        }
        /**
         * Inject TEC specific setting fields into the display tab.
         *
         * @param array $display_tab_fields Fields for the display settings tab.
         *
         * @deprecated 6.0.5
         *
         * @return array
         */
        public function display_settings_tab_fields($display_tab_fields)
        {
        }
        /**
         * When TEC is activated, the Events top level menu item in the dashboard needs the post_type appended to it.
         *
         * @param string $url Settings URL to filter.
         *
         * @deprecated 6.0.5
         *
         * @return string
         */
        public function tribe_settings_url($url)
        {
        }
        /**
         * Adds post types to the post_types array used to determine if on a post type screen
         *
         * @param array $post_types Collection of post types
         *
         * @return array
         */
        public function is_post_type_screen_post_types($post_types)
        {
        }
        /**
         * If tickets don't have an end date, let's provide the end date from the event
         *
         * @param string $date
         * @param int $post_id
         *
         * @return string
         */
        public function default_end_date_for_tickets($date, $post_id)
        {
        }
        /**
         * Set the currency symbol from tribe_events meta data if available
         *
         * @param boolean $currency_symbol Currency symbol to use
         * @param int $post_id Post ID
         *
         * @return string
         */
        public function maybe_set_currency_symbol_with_post($currency_symbol, $post_id)
        {
        }
        /**
         * Set the currency position from tribe_events meta data if available
         *
         * @param boolean $reverse_position Whether to reverse the location of the currency symbol
         * @param int $post_id Post ID
         *
         * @return boolean
         */
        public function maybe_set_currency_position_with_post($reverse_position, $post_id)
        {
        }
        /**
         * Filters the chunkable post types.
         *
         * @param array $post_types
         * @return array The filtered post types
         */
        public function filter_meta_chunker_post_types(array $post_types)
        {
        }
        /**
         * Prevents duplicate venues or organizers when previewing an event.
         *
         *
         * @since 4.5.1
         */
        public function maybe_add_preview_venues_and_organizers()
        {
        }
        /**
         * Specify the "preview venue" to link to an event.
         *
         *
         * @since 4.5.1
         *
         * @param int $event_id The ID of the event being previewed.
         */
        public function add_preview_venues($event_id)
        {
        }
        /**
         * Specify the "preview organizer" to link to an event.
         *
         *
         * @since 4.5.1
         *
         * @param int $event_id The ID of the event being previewed.
         */
        public function add_preview_organizers($event_id)
        {
        }
        /**
         * Identifies "preview" venues as duplicates and worthy of later deletion.
         *
         *
         * @since 4.5.1
         *
         * @param int $venue_id ID of venue being identified as a duplicate.
         * @param int $event_id ID of event being previewed.
         */
        public function link_preview_venue_to_event($venue_id, $event_id)
        {
        }
        /**
         * Identifies "preview" venues as duplicates and worthy of later deletion.
         *
         *
         * @since 4.5.1
         *
         * @param int $venue_id ID of venue being identified as a duplicate.
         * @param int $event_id ID of event being previewed.
         */
        public function link_preview_organizer_to_event($organizer_ids, $event_id)
        {
        }
        /**
         * Removes "preview" venues on a given event if any exist.
         *
         *
         * @since 4.5.1
         *
         * @param int $event_id The event ID whose preview venues to remove.
         * @param bool $delete_meta Whether to delete existing _EventVenueID
         */
        public function remove_preview_venues($event_id, $delete_meta = \false)
        {
        }
        /**
         * Removes "preview" organizers on a given event if any exist.
         *
         *
         * @since 4.5.1
         *
         * @param int $event_id The event ID whose preview organizers to remove.
         * @param bool $delete_meta Whether to delete existing _EventOrganizerID
         */
        public function remove_preview_organizers($event_id, $delete_meta = \false)
        {
        }
        /**
         * Returns the autoloader singleton instance to use in a context-aware manner.
         *
         * @since 4.9.2
         *
         * @return \Tribe__Autoloader The singleton common Autoloader instance.
         */
        public function get_autoloader_instance()
        {
        }
        /**
         * Registers the plugin autoload paths in the Common Autoloader instance.
         *
         * @since 4.9.2
         */
        public function register_plugin_autoload_paths()
        {
        }
        /**
         * Registers the Events' category taxonomy in WordPress.
         *
         * @since 6.0.9
         *
         * @return WP_Taxonomy|WP_Error The registered taxonomy object on success, WP_Error object on failure.
         */
        public function register_taxonomy()
        {
        }
        /**
         * Idempotent method to clear the state of the Custom Tables v1 activation state.
         *
         * Note the state might be persisted in the database, as a transient, or in the cache.
         * The method will handle both cases.
         *
         * @since 6.0.8
         *
         * @return void The method will clear the state of the Custom Tables v1 activation.
         */
        public static function clear_ct1_activation_state() : void
        {
        }
    }
    /**
     * Class Tribe__Events__Meta__Context
     *
     * Abstracts a post save operation context.
     *
     * @since 4.2.5
     */
    class Tribe__Events__Meta__Context
    {
        /**
         * @return bool
         */
        public function doing_ajax()
        {
        }
        /**
         * @return bool
         */
        public function is_bulk_editing()
        {
        }
        /**
         * @return bool
         */
        public function is_inline_save()
        {
        }
        /**
         * @return bool
         */
        public function has_nonce()
        {
        }
        /**
         * @return false|int
         */
        public function verify_nonce()
        {
        }
        /**
         * Whether the current user has the specified capability or not.
         *
         * @param string $capability
         *
         * @return bool
         */
        public function current_user_can_edit_events()
        {
        }
    }
    /**
     * Class Tribe__Events__Meta__Save
     *
     * Conditionally saves an event meta to the database.
     *
     * @since 4.2.5
     */
    class Tribe__Events__Meta__Save
    {
        /**
         * @var int
         */
        protected $post_id;
        /**
         * @var WP_Post
         */
        protected $post;
        /**
         * @var Tribe__Events__Meta__Context
         */
        protected $context;
        /**
         * Tribe__Events__Meta__Save constructor.
         *
         * @param                                   $post_id
         * @param WP_Post                           $post
         * @param Tribe__Events__Meta__Context|null $context
         */
        public function __construct($post_id, \WP_Post $post, \Tribe__Events__Meta__Context $context = \null)
        {
        }
        /**
         * ensure only one venue or organizer is created during post preview
         * subsequent previews will reuse that same post
         *
         * ensure that preview post is the one that's used when the event is published,
         * unless we're publishing with a saved venue
         *
         * @param string $post_type Can be 'venue' or 'organizer'
         */
        protected function manage_preview_metapost($post_type, $event_id)
        {
        }
        /**
         * Save the meta for the event if the user has the capability to.
         *
         * @return bool `true` if event meta was updated, `false` otherwise.
         */
        public function save()
        {
        }
        /**
         * Conditionally save the meta.
         *
         * Will save if the context is the expected one; will call `save` method.
         *
         * @return bool `true` if event meta was updated, `false` otherwise.
         */
        public function maybe_save()
        {
        }
        /**
         * @return bool
         */
        protected function is_auxiliary_save()
        {
        }
        /**
         * @return false|int
         */
        protected function is_autosave()
        {
        }
        /**
         * @return bool
         */
        protected function is_auto_draft()
        {
        }
        /**
         * @return bool
         */
        protected function is_event()
        {
        }
        /**
         * Used to save the event meta for events created in the block editor
         *
         * @param int     $event_id The event ID we are modifying meta for.
         * @param array   $data     The post data
         * @param WP_Post $event    The event post, itself.
         *
         * @return bool
         */
        public function save_block_editor_metadata($event_id, $data, $event = \null)
        {
        }
    }
}
namespace Tribe\Events\Models\Post_Types {
    /**
     * Class Event
     *
     * @since   4.9.9
     *
     * @package Tribe\Events\Post_Types
     */
    class Event extends \Tribe\Models\Post_Types\Base
    {
        /**
         * {@inheritDoc}
         */
        protected function build_properties($filter)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function get_cache_slug()
        {
        }
        /**
         * When dealing with a lot of events and the way we handle templates we need a way to prime the cache for the events
         * that we know will for sure be on the base, allowing us to prevent queries to Posts to be requested individually
         * which can lead to hundreds of more SQL calls.
         *
         * @since 6.0.0
         *
         * @param array<int|WP_Post> $events
         */
        public static function prime_cache(array $events = [])
        {
        }
        /**
         * Overrides the base method to conver the I18n Dates to PHP built-in Date types.
         *
         * @since 6.0.3.1
         *
         * @param array<string,mixed> $properties The properties to filter.
         *
         * @return array<string,mixed> The filtered properties.
         *
         * @throws \Exception If a date cannot be converted to a DateTime object.
         */
        protected function scalar_serialize_properties(array $properties) : array
        {
        }
        /**
         * Overrides the base method to convert date properties to I18n Dates.
         *
         * @since 6.0.3.1
         *
         * @param array<string,mixed> $properties The properties to filter.
         *
         * @return array<string,mixed> The filtered properties.
         *
         * @throws \Exception If a date cannot be converted to a I18n Date object.
         */
        protected function scalar_unserialize_properties(array $properties) : array
        {
        }
    }
    /**
     * Class Organizer
     *
     * @since   5.3.0
     *
     * @package Tribe\Events\Models\Post_Types
     */
    class Organizer extends \Tribe\Models\Post_Types\Base
    {
        /**
         * {@inheritDoc}
         *
         * @since 5.3.0
         */
        protected function get_cache_slug()
        {
        }
        /**
         * {@inheritDoc}
         *
         * @since 5.3.0
         */
        protected function build_properties($filter)
        {
        }
    }
    /**
     * Class Venue.
     *
     * @since   4.9.9
     *
     * @package Tribe\Events\Post_Types
     */
    class Venue extends \Tribe\Models\Post_Types\Base
    {
        /**
         * {@inheritDoc}
         */
        protected function build_properties($filter)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function get_cache_slug()
        {
        }
    }
}
namespace {
    class Tribe__Events__Options_Exception extends \Exception
    {
        /**
         * Display the exception message in the div #tribe-events-options-error
         */
        public static function displayMessage()
        {
        }
    }
    class Tribe__Events__Organizer extends \Tribe__Events__Linked_Posts__Base
    {
        const POSTTYPE = 'tribe_organizer';
        /**
         * @var string
         */
        protected $meta_prefix = '_Organizer';
        /**
         * @var string The meta key relating a post of the type managed by the class to events.
         */
        protected $event_meta_key = '_EventOrganizerID';
        /**
         * @var string The lowercase singular organizer label.
         */
        public $singular_organizer_label_lowercase;
        /**
         * @var string The lowercase plural organizer label.
         */
        public $plural_organizer_label_lowercase;
        /**
         * Args for organizer post type
         * @var array
         */
        public $post_type_args = ['public' => \false, 'rewrite' => ['slug' => 'organizer', 'with_front' => \false], 'show_ui' => \true, 'show_in_menu' => \false, 'supports' => ['title', 'editor'], 'capability_type' => ['tribe_organizer', 'tribe_organizers'], 'map_meta_cap' => \true, 'exclude_from_search' => \true];
        /**
         * @var array
         */
        public static $valid_keys = ['Organizer', 'Phone', 'Email', 'Website'];
        /**
         * @var array A list of the valid meta keys for this linked post.
         */
        public static $meta_keys = ['Phone', 'Email', 'Website'];
        public $singular_organizer_label;
        public $plural_organizer_label;
        protected static $instance;
        /**
         * Returns a singleton of this class
         *
         * @return Tribe__Events__Organizer
         */
        public static function instance()
        {
        }
        /**
         * Tribe__Events__Organizer constructor.
         */
        public function __construct()
        {
        }
        /**
         * Registers the post type
         */
        public function register_post_type()
        {
        }
        /**
         * Filters the post type args for the organizer post type
         *
         * @since 4.2
         *
         * @param array $args Array of linked post type arguments
         * @param string $post_type Linked post type
         *
         * @return array
         */
        public function filter_linked_post_type_args($args, $post_type)
        {
        }
        /**
         * Allow users to specify their own singular label for Organizers
         * @return string
         */
        public function get_organizer_label_singular()
        {
        }
        /**
         * Allow users to specify their own plural label for Organizers
         *
         * @return string
         */
        public function get_organizer_label_plural()
        {
        }
        /**
         * Allow users to specify their own lowercase singular label for Organizers
         * @return string
         */
        public function get_organizer_label_singular_lowercase()
        {
        }
        /**
         * Allow users to specify their own plural label for Organizers
         *
         * @return string
         */
        public function get_organizer_label_plural_lowercase()
        {
        }
        /**
         * Filters the linked post id field
         *
         * @since 4.2
         *
         * @param string $id_field Field name of the field that will hold the ID
         * @param string $post_type Post type of linked post
         */
        public function linked_post_id_field_index($id_field, $post_type)
        {
        }
        /**
         * Filters the linked post name field
         *
         * @since 4.2
         *
         * @param string $name_field Field name of the field that will hold the post name
         * @param string $post_type Post type of linked post
         */
        public function linked_post_name_field_index($name_field, $post_type)
        {
        }
        /**
         * Filters the index that contains the linked post type data during form submission
         *
         * @since 4.2
         *
         * @param string $container Container index that holds submitted data
         * @param string $post_type Post type of linked post
         */
        public function linked_post_type_container($container, $post_type)
        {
        }
        /**
         * Removes anything other than integers from the supplied array of Organizer IDs.
         *
         * @since 4.5.11
         *
         * @param array $organizer_ids An array of post IDs of the current event's attached Organizers.
         * @param int $post_id The current event's post ID.
         *
         * @return array
         */
        public function filter_out_invalid_organizer_ids($organizer_ids, $post_id)
        {
        }
        /**
         * Check to see if any organizer data set
         *
         * @param array $data the organizer data.
         *
         * @return bool If there is ANY organizer data set, return true.
         */
        public function has_organizer_data($data)
        {
        }
        /**
         * Saves the event organizer information passed via an event
         *
         * @param int|null $id ID of event organizer
         * @param array $data The organizer data
         * @param string $post_type The post type
         * @param string $post_status The intended post status
         *
         * @return mixed
         */
        public function save($id, $data, $post_type, $post_status)
        {
        }
        /**
         * Saves organizer meta
         *
         * @param int   $organizerId The organizer ID.
         * @param array $data        The organizer data.
         *
         */
        public function save_meta($organizerId, $data)
        {
        }
        /**
         * Creates a new organizer
         *
         * @param array  $data        The organizer data.
         * @param string $post_status the intended post status.
         * @param bool $avoid_duplicates Whether a check to avoid the insertion of a duplicate organizer
         *                               should be made (`true`) or not (`false`).
         *
         * @return mixed
         */
        public function create($data, $post_status = 'publish', $avoid_duplicates = \false)
        {
        }
        /**
         * Updates an organizer
         *
         * @param int   $organizerId The organizer ID to update.
         * @param array $data        The organizer data.
         *
         * @return int The updated organizer post ID
         *
         * @since 4.6
         */
        public function update($id, $data)
        {
        }
        /**
         * Deletes an organizer
         *
         * @param int  $organizerId  The organizer ID to delete.
         * @param bool $force_delete  Whether or not to bypass the trash when deleting the organizer (see wp_delete_post's $force_delete param)
         *
         */
        public function delete($id, $force_delete = \false)
        {
        }
        /**
         * Returns the default organizers
         *
         * @since 4.2
         *
         * @param int $default Default organizer ID
         * @param string $post_type Post type of form being output
         */
        public function linked_post_default($default, $post_type)
        {
        }
        /**
         * Outputs the Organizer form fields for creating new organizers
         *
         * @since 4.2
         *
         * @param string $post_type Post type of form being output
         */
        public function linked_post_new_form($post_type)
        {
        }
        /**
         * Returns an array of post fields that should be used to spot possible duplicates.
         *
         * @return array An array of post fields to matching strategy in the format
         *               [ <post_field> => [ 'match' => <strategy> ] ]
         *
         * @see Tribe__Duplicate__Strategy_Factory for supported strategies
         */
        protected function get_duplicate_post_fields()
        {
        }
        /**
         * Returns an array of post custom fields that should be used to spot possible duplicates.
         *
         * @return array An array of post fields to matching strategy in the format
         *               [ <custom_field> => [ 'match' => <strategy> ] ]
         *
         * @see Tribe__Duplicate__Strategy_Factory for supported strategies
         */
        protected function get_duplicate_custom_fields()
        {
        }
        /**
         * {@inheritDoc}
         *
         * @since 5.3.0 Changed the method to return Organizer post objects, not just organizer names.
         */
        public static function get_fetch_callback($event)
        {
        }
        /**
         * Builds and returns a Closure to lazily fetch an event Organizer names.
         *
         * @since 5.3.0 Changed the name of this method from `get_fetch_callback` to `get_fetch_names_callback`.
         */
        public static function get_fetch_names_callback($event)
        {
        }
        /**
         * Include the organizer editor meta box.
         *
         * @since 5.14.0
         */
        public static function add_post_type_metabox()
        {
        }
        /**
         * Adds the Meta box for Organizers to the Events Post Type.
         *
         * @since 6.0.0
         */
        public static function render_meta_box()
        {
        }
        /**
         * Add edit link to admin bar when viewing the tribe_organizer post type archive.
         *
         * @since 5.16.3
         *
         * @param WP_Admin_Bar $wp_admin_bar The admin bar object.
         */
        public function edit_organizer_admin_bar_menu_link($wp_admin_bar)
        {
        }
        /**
         * Updates the page title on the organizer single page to include the organizer title.
         *
         * @param string      $new_title The modified page title.
         * @param string      $title     The original page title.
         * @param string|null $sep       The separator character.
         *
         * @return string The modified page title.
         */
        public function update_organizer_title($new_title, $title, $sep = \null)
        {
        }
    }
    class Tribe__Events__Plugin_Register extends \Tribe__Abstract_Plugin_Register
    {
        protected $main_class = 'Tribe__Events__Main';
        /**
         * `addon-dependencies` AKA Min plugin versions.
         *
         * @var string[][]
         */
        protected $dependencies = ['addon-dependencies' => ['Tribe__Events__Pro__Main' => '6.1.0-dev', 'Tribe__Events__Filterbar__View' => '5.5.0-dev', 'Tribe__Events__Community__Main' => '4.10.10-dev', 'Tribe__Events__Community__Tickets__Main' => '4.9.3-dev', 'Tribe__Tickets__Main' => '5.7.0-dev', 'Tribe__Tickets_Plus__Main' => '5.8.0-dev', 'Tribe__Events__Tickets__Eventbrite__Main' => '4.6.14-dev', 'Tribe\\Events\\Virtual' => '1.15.5-dev', 'TEC\\Event_Automator' => '1.3.1-dev']];
        public function __construct()
        {
        }
    }
    class Tribe__Events__Post_Exception extends \Exception
    {
        /**
         * Display the exception message in the div #tribe-events-post-error
         *
         * @param int $post ->ID
         */
        public static function displayMessage($postId)
        {
        }
    }
    /**
     * Class Tribe__Events__Privacy
     */
    class Tribe__Events__Privacy
    {
        /**
         * Class initialization
         *
         * @since 4.6.20
         */
        public function hook()
        {
        }
        /**
         * Add the suggested privacy policy text to the policy postbox.
         *
         * @since 4.6.20
         */
        public function privacy_policy_content()
        {
        }
        /**
         * Return the default suggested privacy policy content.
         *
         * @param bool $descr Whether to include the descriptions under the section headings. Default false.
         *
         * @since 4.6.20
         *
         * @return string The default policy content.
         */
        public function default_privacy_policy_content($descr = \false)
        {
        }
    }
    /**
     * Handles the `Tribe__Events__Query` class deprecated methods.
     *
     * This trait will only make sense in the context of the `Tribe__Events__Query` class
     * and it should not be used elsewhere.
     *
     * @since 6.0.6
     */
    /**
     * Trait Tribe__Events__Query_Deprecated.
     *
     * @since 6.0.6
     */
    trait Tribe__Events__Query_Deprecated
    {
        /**
         * Is hooked by init() filter to parse the WP_Query arguments for main and alt queries.
         *
         * @deprecated 6.0.0 Query filtering is now handled in the Views v2 component or the Custom Tables v1 component.
         *
         * @param object $query WP_Query object args supplied or default
         *
         * @return WP_Query $query The query, unmodified.
         */
        public static function pre_get_posts($query)
        {
        }
    }
    class Tribe__Events__Query
    {
        use \Tribe__Events__Query_Deprecated;
        /**
         * @since 4.9.4
         *
         * @var array The WP_Query arguments used in the last `getEvents` method
         *            query.
         */
        protected static $last_result = [];
        /**
         * Set any query flags
         *
         * @param WP_Query $query
         */
        public static function parse_query($query)
        {
        }
        /**
         * Customized WP_Query wrapper to set up event queries with default arguments.
         *
         * @param array $args {
         *		Optional. Array of Query parameters.
         *
         *      @type bool $found_posts Return the number of found events.
         * }
         * @param bool  $full Whether the full WP_Query object should returned (`true`) or just the
         *                    found posts (`false`)
         *
         * @return array|WP_Query
         */
        public static function getEvents($args = [], $full = \false)
        {
        }
        /**
         * If the user has the Main events page set on the reading options it should return 0 or the default value in
         * order to avoid to set the:
         * - p
         * - page_id
         *
         * variables when using  pre_get_posts or posts_where
         *
         * This filter is removed when this functions has finished the execution
         *
         * @since 4.6.15
         *
         * @param $value
         *
         * @return int
         */
        public static function default_page_on_front($value)
        {
        }
        /**
         * Provided a query for Events, the method will set the query variables up to filter
         * and order Events by start and end date.
         *
         * @since 6.0.2
         *
         * @param WP_Query $query The query object to modify.
         *
         * @return void The query object is modified by reference.
         */
        public static function filter_and_order_by_date($query)
        {
        }
        /**
         * Returns the query post type(s) in array format.
         *
         * @since 6.0.6
         *
         * @param WP_Query $query The query object to read the post type entry from.
         *
         * @return array<string> The post type(s) read from the query.
         */
        protected static function get_query_post_types(\WP_Query $query) : array
        {
        }
        /**
         * Updates the query post count to include the specified ones.
         *
         * @since 6.0.6
         *
         * @param WP_Query $query         The query object to modify.
         * @param string   ...$post_types The post types to add to the query `post_types` entry.
         *
         * @return void The query object is modified by reference.
         */
        protected static function add_post_type_to_query(\WP_Query $query, string ...$post_types) : void
        {
        }
    }
    interface Tribe__Events__REST__Interfaces__Post_Repository
    {
        /**
         * Returns an array representation of an event.
         *
         * @param int    $event_id An event post ID.
         * @param string $context  Context of data.
         *
         * @return array|WP_Error Either the array representation of an event or an error object.
         *
         * @since 4.6 Added $context param
         */
        public function get_event_data($event_id, $context = '');
        /**
         * Returns an array representation of an event venue.
         *
         * @param int    $event_or_venue_id An event or venue post ID.
         * @param string $context           Context of data.
         *
         * @return array|WP_Error Either the array representation of a venue or an error object.
         *
         * @since 4.6 Added $context param
         */
        public function get_venue_data($event_or_venue_id, $context = '');
        /**
         * Returns an array representation of an event organizer(s).
         *
         * @param int    $event_or_organizer_id An event or organizer post ID.
         * @param string $context               Context of data.
         *
         * @return array|WP_Error Either an the array representation of an orgnanizer, an
         *                        arrya of array representations of an event organizer or
         *                        an error object.
         *
         * @since 4.6 Added $context param
         */
        public function get_organizer_data($event_or_organizer_id, $context = '');
        /**
         * Returns an array of prepared array representations of a taxonomy term.
         *
         * @param array $terms_data An array of term objects.
         * @param string $taxonomy The taxonomy of the term objects.
         *
         * @return array|\WP_Error Either the array representation of taxonomy terms or an error object.
         *
         * @since 4.6
         */
        public function prepare_terms_data(array $terms_data, $taxonomy);
        /**
         * Prepares a single term data for the response.
         *
         * @since 4.6
         *
         * @param array  $term_data
         * @param string $taxonomy
         * @param string $namespace
         *
         * @return array
         */
        public function prepare_term_data($term_data, $taxonomy, $namespace);
    }
    class Tribe__Events__REST__V1__Auth
    {
        public function can_post_event()
        {
        }
    }
    class Tribe__Events__REST__V1__Documentation__Event_Definition_Provider implements \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
    }
    class Tribe__Events__REST__V1__Documentation__Organizer_Definition_Provider implements \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
    }
    class Tribe__Events__REST__V1__Documentation__Venue_Definition_Provider implements \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
    }
    class Tribe__Events__REST__V1__Messages implements \Tribe__REST__Messages_Interface
    {
        /**
         * @var string
         */
        protected $message_prefix = 'rest-v1:';
        /**
         * @var array
         */
        protected $messages = [];
        public function __construct()
        {
        }
        /**
         * Returns the localized message associated with the slug.
         *
         * @param string $message_slug
         *
         * @return string
         */
        public function get_message($message_slug)
        {
        }
        /**
         * Returns the associative array of all the messages handled by the class.
         *
         * @return array An associative array in the `[ <slug> => <localized message> ]` format.
         */
        public function get_messages()
        {
        }
        /**
         * Prefixes a message slug with a common root.
         *
         * Used to uniform the slug format to the one used by the `Tribe__Events__Aggregator__Service` class.
         *
         * @see Tribe__Events__Aggregator__Service::register_messages()
         *
         * @param string $message_slug
         *
         * @return string The prefixed message slug.
         */
        public function prefix_message_slug($message_slug)
        {
        }
    }
    class Tribe__Events__REST__V1__EA_Messages extends \Tribe__Events__REST__V1__Messages implements \Tribe__REST__Messages_Interface
    {
        public function __construct()
        {
        }
    }
    abstract class Tribe__Events__REST__V1__Endpoints__Base
    {
        /**
         * @var Tribe__REST__Messages_Interface
         */
        protected $messages;
        /**
         * @var array
         */
        protected $supported_query_vars = [];
        /**
         * Tribe__Events__REST__V1__Endpoints__Base constructor.
         *
         * @param Tribe__REST__Messages_Interface $messages
         */
        public function __construct(\Tribe__REST__Messages_Interface $messages)
        {
        }
        /**
         * Returns a swagger structured array for the `requestBody` field.
         *
         * @param string              $contentType The Content-Type header.
         * @param array<string|mixed> $args The provided post args.
         *
         * @since 5.10.0
         *
         * @return array<string|mixed> The array of arguments for the swagger `requestBody` field.
         */
        public function swaggerize_post_args($contentType, array $args)
        {
        }
        /**
         * Converts an array of arguments suitable for the WP REST API to the Swagger format.
         *
         * @param array $args
         * @param array $defaults
         *
         * @return array The converted arguments.
         */
        public function swaggerize_args(array $args = [], array $defaults = [])
        {
        }
        /**
         * Falls back on an allowed post status in respect to the user user capabilities of publishing.
         *
         * @param string $post_status
         * @param string $post_type
         *
         * @return string
         */
        public function scale_back_post_status($post_status, $post_type)
        {
        }
        /**
        * Returns the default value of posts per page.
        an*
        * Cascading fallback is TEC `posts_per_page` option, `posts_per_page` option and, finally, 20.
        *
        * @return int
        */
        protected function get_default_posts_per_page()
        {
        }
        /**
         * Modifies a request argument marking it as not required.
         *
         * @param array $arg
         *
         * @since 4.6
         */
        protected function unrequire_arg(array &$arg)
        {
        }
        /**
         * Parses the arguments populated parsing the request filling out with the defaults.
         *
         * @param array $args
         * @param array $defaults
         *
         * @return array
         *
         * @since 4.6
         */
        protected function parse_args(array $args, array $defaults)
        {
        }
        /**
         * Whether a value is null or not.
         *
         * @param mixed $value
         *
         * @return bool
         *
         * @since 4.6
         */
        public function is_not_null($value)
        {
        }
        /**
         * Converts REST format type argument to the correspondant Swagger.io definition.
         *
         * @since 4.6
         *
         * @param string $type
         *
         * @return string
         */
        protected function convert_type($type)
        {
        }
    }
    abstract class Tribe__Events__REST__V1__Endpoints__Archive_Base extends \Tribe__Events__REST__V1__Endpoints__Base
    {
        /**
         * @var string The post type managed by this archive
         */
        protected $post_type = '';
        /**
         * @var array An array mapping the REST request supported query vars to the args used in a TEC WP_Query.
         */
        protected $supported_query_vars = [];
        /**
         * @var Tribe__Events__REST__Interfaces__Post_Repository
         */
        protected $repository;
        /**
         * @var Tribe__Events__Validator__Interface
         */
        protected $validator;
        /**
         * @var int The total number of posts according to the current request parameters and user access rights.
         */
        protected $total;
        /**
         * Tribe__Events__REST__V1__Endpoints__Archive_Event constructor.
         *
         * @param Tribe__REST__Messages_Interface                  $messages
         * @param Tribe__Events__REST__Interfaces__Post_Repository $repository
         * @param Tribe__Events__Validator__Interface              $validator
         */
        public function __construct(\Tribe__REST__Messages_Interface $messages, \Tribe__Events__REST__Interfaces__Post_Repository $repository, \Tribe__Events__Validator__Interface $validator)
        {
        }
        /**
         * Parses the `per_page` argument from the request.
         *
         * @param int $per_page The `per_page` param provided by the request.
         *
         * @return bool|int The `per_page` argument provided in the request or `false` if not set.
         */
        public function sanitize_per_page($per_page)
        {
        }
        /**
         * Returns the maximum number of posts per page fetched via the REST API.
         *
         * @return int
         */
        public abstract function get_max_posts_per_page();
        /**
         * Returns the total number of pages depending on the `per_page` setting.
         *
         * @param int $total
         * @param int $per_page
         *
         * @return int
         */
        protected function get_total_pages($total, $per_page = \null)
        {
        }
        /**
         * Returns the archive base REST URL
         *
         * @return string
         */
        protected abstract function get_base_rest_url();
        /**
         * Builds and returns the current rest URL depending on the query arguments.
         *
         * @param array $args
         * @param array $extra_args
         *
         * @return string
         */
        protected function get_current_rest_url(array $args = [], array $extra_args = [])
        {
        }
        /**
         * Builds and returns the next page REST URL.
         *
         * @param string $rest_url
         * @param int $page
         *
         * @return string
         */
        protected function get_next_rest_url($rest_url, $page)
        {
        }
        /**
         * Builds and returns the previous page REST URL.
         *
         * @param string $rest_url
         * @param int $page
         *
         * @return string
         */
        protected function get_previous_rest_url($rest_url, $page)
        {
        }
        /**
         * Filters a list of post stati returning only those accessible by the current user for the post type
         * managed by the endpoint.
         *
         * @since 4.6
         *
         * @param array|string $post_stati An array of post stati or a comma separated list of post stati.
         *
         * @return array|bool An array of post stati accessible by the current user or `false` if the no requested
         *               stati are accessible by the user.
         */
        public function filter_post_status_list($post_stati = 'publish')
        {
        }
    }
    abstract class Tribe__Events__REST__V1__Endpoints__Term_Archive_Base extends \Tribe__Events__REST__V1__Endpoints__Archive_Base
    {
        /**
         * @var \WP_REST_Terms_Controller
         */
        protected $terms_controller;
        /**
         * @var array An array mapping the REST request supported query vars to the args used in a WP_REST_Terms_Controller query.
         */
        protected $supported_query_vars = ['page' => 'page', 'per_page' => 'per_page', 'search' => 'search', 'exclude' => 'exclude', 'include' => 'include', 'order' => 'order', 'orderby' => 'orderby', 'hide_empty' => 'hide_empty', 'parent' => 'parent', 'post' => 'post', 'event' => 'post', 'slug' => 'slug'];
        public function __construct(\Tribe__REST__Messages_Interface $messages, \Tribe__Events__REST__Interfaces__Post_Repository $repository, \Tribe__Events__Validator__Interface $validator, \WP_REST_Terms_Controller $terms_controller)
        {
        }
        /**
         * Handles GET requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data on success or a WP_Error instance on failure.
         */
        public function get(\WP_REST_Request $request)
        {
        }
        /**
         * Returns the maximum number of posts per page fetched via the REST API.
         *
         * @return int
         */
        public function get_max_posts_per_page()
        {
        }
        /**
         * Returns the taxonomy of the terms handled by the endpoint.
         *
         * @return string
         *
         * @since 4.6
         */
        protected abstract function get_taxonomy();
        /**
         * Returns the data key that will be used to store terms data in the response.
         *
         * @return string
         *
         * @since 4.6
         */
        protected abstract function get_data_key();
    }
    class Tribe__Events__REST__V1__Endpoints__Archive_Category extends \Tribe__Events__REST__V1__Endpoints__Term_Archive_Base implements \Tribe__REST__Endpoints__READ_Endpoint_Interface, \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @since 4.6
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
        /**
         * Returns the taxonomy of the terms handled by the endpoint.
         *
         * @since 4.6
         *
         * @return string
         */
        public function get_taxonomy()
        {
        }
        /**
         * Returns the archive base REST URL
         *
         * @since 4.6
         *
         * @return string
         */
        protected function get_base_rest_url()
        {
        }
        /**
         * Returns the data key that will be used to store terms data in the response.
         *
         * @since 4.6
         *
         * @return string
         */
        protected function get_data_key()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @since 4.6
         *
         * @return array
         */
        public function READ_args()
        {
        }
    }
    class Tribe__Events__REST__V1__Endpoints__Archive_Event extends \Tribe__Events__REST__V1__Endpoints__Archive_Base implements \Tribe__REST__Endpoints__READ_Endpoint_Interface, \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * @var array An array mapping the REST request supported query vars to the args used in a TEC WP_Query.
         */
        protected $supported_query_vars = ['page' => 'paged', 'per_page' => 'posts_per_page', 'start_date' => 'start_date', 'end_date' => 'end_date', 'search' => 's', 'categories' => 'categories', 'tags' => 'tags', 'venue' => 'venue', 'organizer' => 'organizer', 'featured' => 'featured', 'geoloc' => 'tribe_geoloc', 'geoloc_lat' => 'tribe_geoloc_lat', 'geoloc_lng' => 'tribe_geoloc_lng', 'status' => 'post_status', 'post_parent' => 'post_parent', 'include' => 'post__in', 'starts_before' => 'starts_before', 'starts_after' => 'starts_after', 'ends_before' => 'ends_before', 'ends_after' => 'ends_after', 'ticketed' => 'ticketed'];
        /**
         * Tribe__Events__REST__V1__Endpoints__Archive_Event constructor.
         *
         * @since 4.6
         *
         * @param Tribe__REST__Messages_Interface                  $messages
         * @param Tribe__Events__REST__Interfaces__Post_Repository $repository
         * @param Tribe__Events__Validator__Interface              $validator
         */
        public function __construct(\Tribe__REST__Messages_Interface $messages, \Tribe__Events__REST__Interfaces__Post_Repository $repository, \Tribe__Events__Validator__Interface $validator)
        {
        }
        /**
         * Handles GET requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data on success or a WP_Error instance on failure.
         */
        public function get(\WP_REST_Request $request)
        {
        }
        /**
         * Parses the `page` argument from the request.
         *
         * @param WP_REST_Request $request
         * @return bool|int The `page` argument provided in the request or `false` if not set.
         */
        protected function parse_page(\WP_REST_Request $request)
        {
        }
        /**
         * Parses the request for featured events.
         *
         * @param string $featured
         *
         * @return array|bool Either the meta query for featured events or `false` if not specified.
         */
        protected function parse_featured_meta_query_entry($featured)
        {
        }
        /**
         * @param array|string $terms A list of terms term_id or slugs or a single term term_id or slug.
         * @param string $taxonomy The taxonomy of the terms to parse.
         *
         * @return array|bool Either an array of `terms_ids` or `false` on failure.
         *
         * @throws Tribe__REST__Exceptions__Exception If one of the terms does not exist for the specified taxonomy.
         */
        protected function parse_terms_query($terms, $taxonomy)
        {
        }
        /**
         * Parses and created a meta query entry in from the request.
         *
         * @param string $meta_value The value that should be used for comparison.
         * @param string $meta_key   The meta key that should be used for the comparison.
         * @param string $compare    The comparison operator.
         * @param string $type       The type to which compared values should be cast.
         * @param string $relation   If multiple meta values are provided then this is the relation that the query should use.
         *
         * @return array|bool The meta query entry or `false` on failure.
         */
        protected function parse_meta_query_entry($meta_value, $meta_key, $compare = '=', $type = 'CHAR', $relation = 'OR')
        {
        }
        /**
         * Whether there is a next page in respect to the specified one.
         *
         * @param array $args
         * @param int $page
         *
         * @return bool
         */
        protected function has_next($args, $page)
        {
        }
        /**
         * Whether there is a previous page in respect to the specified one.
         *
         * @param array $args
         * @param int $page
         *
         * @return bool
         */
        protected function has_previous($page, $args)
        {
        }
        /**
         * Returns the maximum number of posts per page fetched via the REST API.
         *
         * @return int
         */
        public function get_max_posts_per_page()
        {
        }
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @since 6.0.0 Added support for `ticketed` parameter.
         *
         * @return array
         */
        public function READ_args()
        {
        }
        /**
         * Returns the total number of posts matching the request.
         *
         * @since 4.6
         *
         * @param array $args
         *
         * @return int
         */
        protected function get_total($args)
        {
        }
        /**
         * Returns the archive base REST URL
         *
         * @since 4.6
         *
         * @return string
         */
        protected function get_base_rest_url()
        {
        }
    }
    class Tribe__Events__REST__V1__Endpoints__Archive_Organizer extends \Tribe__Events__REST__V1__Endpoints__Archive_Base implements \Tribe__REST__Endpoints__READ_Endpoint_Interface, \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * @var array An array mapping the REST request supported query vars to the args used in a TEC WP_Query.
         */
        protected $supported_query_vars = ['page' => 'paged', 'per_page' => 'posts_per_page', 'search' => 's', 'event' => 'event', 'has_events' => 'has_events', 'only_with_upcoming' => 'only_with_upcoming', 'status' => 'post_status'];
        /**
         * Tribe__Events__REST__V1__Endpoints__Archive_Organizer constructor.
         *
         * @since 4.6
         *
         * @param Tribe__REST__Messages_Interface                  $messages
         * @param Tribe__Events__REST__Interfaces__Post_Repository $repository
         * @param Tribe__Events__Validator__Interface              $validator
         */
        public function __construct(\Tribe__REST__Messages_Interface $messages, \Tribe__Events__REST__Interfaces__Post_Repository $repository, \Tribe__Events__Validator__Interface $validator)
        {
        }
        /**
         * Returns an array in the format used by Swagger 2.0
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
        /**
         * Handles GET requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data on success or a WP_Error instance on failure.
         *
         * @since 4.6
         */
        public function get(\WP_REST_Request $request)
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         *
         * @since 4.5
         */
        public function READ_args()
        {
        }
        /**
         * Returns the maximum number of posts per page fetched via the REST API.
         *
         * @return int
         *
         * @since 4.5
         */
        public function get_max_posts_per_page()
        {
        }
        /**
         * Returns the total number of posts matching the request.
         *
         * @since 4.6
         *
         * @param array $args
         * @param bool  $only_with_upcoming
         *
         * @return int
         */
        protected function get_total($args, $only_with_upcoming = \false)
        {
        }
        /**
         * Returns the archive base REST URL
         *
         * @since 4.6
         *
         * @return string
         */
        protected function get_base_rest_url()
        {
        }
        /**
         * Whether there is a next page in respect to the specified one.
         *
         * @param array $args
         * @param int   $page
         *
         * @param bool  $only_with_upcoming
         *
         * @return bool
         *
         * @since 4.6
         */
        protected function has_next($args, $page, $only_with_upcoming)
        {
        }
        /**
         * Whether there is a previous page in respect to the specified one.
         *
         * @param int   $page
         * @param array $args
         * @param bool  $only_with_upcoming
         *
         * @return bool
         *
         * @since 4.5
         */
        protected function has_previous($page, $args, $only_with_upcoming)
        {
        }
    }
    class Tribe__Events__REST__V1__Endpoints__Archive_Tag extends \Tribe__Events__REST__V1__Endpoints__Term_Archive_Base implements \Tribe__REST__Endpoints__READ_Endpoint_Interface, \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * @var array An array mapping the REST request supported query vars to the args used in a WP_REST_Terms_Controller query.
         */
        protected $supported_query_vars = ['page' => 'page', 'per_page' => 'per_page', 'search' => 'search', 'exclude' => 'exclude', 'include' => 'include', 'order' => 'order', 'orderby' => 'orderby', 'hide_empty' => 'hide_empty', 'post' => 'post', 'event' => 'post', 'slug' => 'slug'];
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @since 4.6
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
        /**
         * Returns the taxonomy of the terms handled by the endpoint.
         *
         * @since 4.6
         *
         * @return string
         */
        public function get_taxonomy()
        {
        }
        /**
         * Returns the archive base REST URL
         *
         * @since 4.6
         *
         * @return string
         */
        protected function get_base_rest_url()
        {
        }
        /**
         * Returns the data key that will be used to store terms data in the response.
         *
         * @since 4.6
         *
         * @return string
         */
        protected function get_data_key()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @since 4.6
         *
         * @return array
         */
        public function READ_args()
        {
        }
    }
    class Tribe__Events__REST__V1__Endpoints__Archive_Venue extends \Tribe__Events__REST__V1__Endpoints__Archive_Base implements \Tribe__REST__Endpoints__READ_Endpoint_Interface, \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * @var array An array mapping the REST request supported query vars to the args used in a TEC WP_Query.
         */
        protected $supported_query_vars = array('page' => 'paged', 'per_page' => 'posts_per_page', 'search' => 's', 'event' => 'event', 'has_events' => 'has_events', 'only_with_upcoming' => 'only_with_upcoming', 'status' => 'post_status');
        /**
         * Tribe__Events__REST__V1__Endpoints__Archive_Venue constructor. *
         * @param Tribe__REST__Messages_Interface                  $messages
         * @param Tribe__Events__REST__Interfaces__Post_Repository $repository
         * @param Tribe__Events__Validator__Interface              $validator
         */
        public function __construct(\Tribe__REST__Messages_Interface $messages, \Tribe__Events__REST__Interfaces__Post_Repository $repository, \Tribe__Events__Validator__Interface $validator)
        {
        }
        /**
         * Returns an array in the format used by Swagger 2.0
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
        /**
         * Handles GET requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data on success or a WP_Error instance on failure.
         *
         * @since 4.6
         */
        public function get(\WP_REST_Request $request)
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         *
         * @since 4.5
         */
        public function READ_args()
        {
        }
        /**
         * Returns the maximum number of posts per page fetched via the REST API.
         *
         * @return int
         *
         * @since 4.5
         */
        public function get_max_posts_per_page()
        {
        }
        /**
         * Returns the total number of posts matching the request.
         *
         * @since 4.6
         *
         * @param array $args
         * @param bool  $only_with_upcoming
         *
         * @return int
         */
        protected function get_total($args, $only_with_upcoming = \false)
        {
        }
        /**
         * Returns the archive base REST URL
         *
         * @since 4.6
         *
         * @return string
         */
        protected function get_base_rest_url()
        {
        }
        /**
         * Whether there is a next page in respect to the specified one.
         *
         * @param array $args
         * @param int   $page
         *
         * @param bool  $only_with_upcoming
         *
         * @return bool
         *
         * @since 4.6
         */
        protected function has_next($args, $page, $only_with_upcoming)
        {
        }
        /**
         * Whether there is a previous page in respect to the specified one.
         *
         * @param int   $page
         * @param array $args
         * @param bool  $only_with_upcoming
         *
         * @return bool
         *
         * @since 4.5
         */
        protected function has_previous($page, $args, $only_with_upcoming)
        {
        }
    }
    interface Tribe__Events__REST__V1__Endpoints__Linked_Post_Endpoint_Interface extends \Tribe__REST__Endpoints__READ_Endpoint_Interface, \Tribe__REST__Endpoints__CREATE_Endpoint_Interface, \Tribe__REST__Endpoints__DELETE_Endpoint_Interface, \Tribe__REST__Endpoints__UPDATE_Endpoint_Interface
    {
        /**
         * Inserts a post of the linked post type.
         *
         * @param int|array $data Either an existing linked post ID or the linked post data.
         *
         * @return false|array|WP_Error `false` if the linked post data is empty, the linked post ID (in an array as requested by the
         *                              linked posts engine) or a `WP_Error` if the linked post insertion failed.
         *
         * @since 4.6
         */
        public function insert($data);
    }
    abstract class Tribe__Events__REST__V1__Endpoints__Linked_Post_Base extends \Tribe__Events__REST__V1__Endpoints__Base implements \Tribe__Events__REST__V1__Endpoints__Linked_Post_Endpoint_Interface
    {
        /**
         * @var Tribe__Events__REST__Interfaces__Post_Repository
         */
        protected $post_repository;
        /**
         * @var Tribe__Events__REST__V1__Validator__Interface
         */
        protected $validator;
        /**
         * Tribe__Events__REST__V1__Endpoints__Single_Venue constructor.
         *
         * @param Tribe__REST__Messages_Interface                  $messages
         * @param Tribe__Events__REST__Interfaces__Post_Repository $post_repository
         * @param Tribe__Events__REST__V1__Validator__Interface    $validator
         */
        public function __construct(\Tribe__REST__Messages_Interface $messages, \Tribe__Events__REST__Interfaces__Post_Repository $post_repository, \Tribe__Events__REST__V1__Validator__Interface $validator)
        {
        }
        /**
         * Inserts a post of the linked post type.
         *
         * @param int|array $data Either an existing linked post ID or the linked post data.
         *
         * @return false|array|WP_Error `false` if the linked post data is empty, the linked post ID (in an array as requested by the
         *                              linked posts engine) or a `WP_Error` if the linked post insertion failed.
         */
        public function insert($data)
        {
        }
        /**
         * Whether the data represents a valid post type ID.
         *
         * @param mixed $data
         *
         * @return bool
         */
        protected abstract function is_post_type($data);
        /**
         * Returns the linked post ID index used by the linked posts engine to identify a linked post based on its post ID.
         *
         * @return string
         */
        public function get_id_index()
        {
        }
        /**
         * Returns the post type handled by this linked post endpoint.
         *
         * @return string
         */
        protected abstract function get_post_type();
    }
    abstract class Tribe__Events__REST__V1__Endpoints__Term_Single_Base extends \Tribe__Events__REST__V1__Endpoints__Base
    {
        /**
         * @var \Tribe__Events__REST__Interfaces__Post_Repository
         */
        protected $repository;
        /**
         * @var \Tribe__Events__Validator__Interface
         */
        protected $validator;
        /**
         * @var \WP_REST_Terms_Controller
         */
        protected $terms_controller;
        /**
         * Tribe__Events__REST__V1__Endpoints__Term_Single_Base constructor.
         *
         * @since 4.6
         *
         * @param \Tribe__REST__Messages_Interface                  $messages
         * @param \Tribe__Events__REST__Interfaces__Post_Repository $repository
         * @param \Tribe__Events__Validator__Interface              $validator
         * @param \WP_REST_Terms_Controller                         $terms_controller
         */
        public function __construct(\Tribe__REST__Messages_Interface $messages, \Tribe__Events__REST__Interfaces__Post_Repository $repository, \Tribe__Events__Validator__Interface $validator, \WP_REST_Terms_Controller $terms_controller)
        {
        }
        /**
         * Returns the taxonomy of the terms handled by the endpoint.
         *
         * @since 4.6
         *
         * @return string
         */
        public abstract function get_taxonomy();
        /**
         * Handles GET requests on the endpoint.
         *
         * @since 4.6
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data on success or a WP_Error instance on failure.
         */
        public function get(\WP_REST_Request $request)
        {
        }
        /**
         * Returns the term namespace used by the endpoint.
         *
         * @since 4.6
         *
         * @return string
         */
        protected abstract function get_term_namespace();
        /**
         * Handles POST requests on the endpoint.
         *
         * @since 4.6
         *
         * @param WP_REST_Request $request
         * @param bool            $return_id Whether the created post ID should be returned or the full response object.
         *
         * @return WP_Error|WP_REST_Response|int An array containing the data on success or a WP_Error instance on failure.
         */
        public function create(\WP_REST_Request $request, $return_id = \false)
        {
        }
        /**
         * Whether the current user can create content of the specified type or not.
         *
         * @since 4.6
         *
         * @return bool Whether the current user can post or not.
         */
        public function can_create()
        {
        }
        /**
         * Whether the current user can update content of this type or not.
         *
         * @since 4.6
         *
         * @return bool Whether the current user can update or not.
         */
        public function can_edit()
        {
        }
        /**
         * Handles UPDATE requests on the endpoint.
         *
         * @since 4.6
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the updated post on
         *                                   success or a WP_Error instance on failure.
         */
        public function update(\WP_REST_Request $request)
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @since 4.6
         *
         * @return array
         */
        public function EDIT_args()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @since 4.6
         *
         * @return array
         */
        public function DELETE_args()
        {
        }
        /**
         * Whether the current user can delete content of this type or not.
         *
         * @since 4.6
         *
         * @return bool Whether the current user can delete or not.
         */
        public function can_delete()
        {
        }
        /**
         * Handles DELETE requests on the endpoint.
         *
         * @since 4.6
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the trashed post on
         *                                   success or a WP_Error instance on failure.
         */
        public function delete(\WP_REST_Request $request)
        {
        }
    }
    class Tribe__Events__REST__V1__Endpoints__Single_Category extends \Tribe__Events__REST__V1__Endpoints__Term_Single_Base implements \Tribe__REST__Endpoints__READ_Endpoint_Interface, \Tribe__REST__Endpoints__CREATE_Endpoint_Interface, \Tribe__REST__Endpoints__DELETE_Endpoint_Interface, \Tribe__REST__Endpoints__UPDATE_Endpoint_Interface, \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @since 4.6
         *
         * @return array
         */
        public function CREATE_args()
        {
        }
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @since 4.6
         *
         * @link  http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @since 4.6
         *
         * @return array
         */
        public function READ_args()
        {
        }
        /**
         * Returns the taxonomy of the terms handled by the endpoint.
         *
         * @since 4.6
         *
         * @return string
         */
        public function get_taxonomy()
        {
        }
        /**
         * Returns the term namespace used by the endpoint.
         *
         * @since 4.6
         *
         * @return string
         */
        protected function get_term_namespace()
        {
        }
    }
    class Tribe__Events__REST__V1__Endpoints__Single_Event extends \Tribe__Events__REST__V1__Endpoints__Base implements \Tribe__REST__Endpoints__READ_Endpoint_Interface, \Tribe__REST__Endpoints__CREATE_Endpoint_Interface, \Tribe__REST__Endpoints__DELETE_Endpoint_Interface, \Tribe__REST__Endpoints__UPDATE_Endpoint_Interface, \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * @var Tribe__REST__Main
         */
        protected $main;
        /**
         * @var WP_REST_Request
         */
        protected $serving;
        /**
         * @var Tribe__Events__REST__Interfaces__Post_Repository
         */
        protected $post_repository;
        /**
         * @var Tribe__Events__REST__V1__Validator__Interface
         */
        protected $validator;
        /**
         * @var Tribe__Events__REST__V1__Endpoints__Linked_Post_Endpoint_Interface
         */
        protected $venue_endpoint;
        /**
         * @var Tribe__Events__REST__V1__Endpoints__Linked_Post_Endpoint_Interface
         */
        protected $organizer_endpoint;
        /**
         * Tribe__Events__REST__V1__Endpoints__Single_Event constructor.
         *
         * @param Tribe__REST__Messages_Interface                                    $messages
         * @param Tribe__Events__REST__Interfaces__Post_Repository                   $post_repository
         * @param Tribe__Events__REST__V1__Validator__Interface                      $validator
         * @param Tribe__Events__REST__V1__Endpoints__Linked_Post_Endpoint_Interface $venue_endpoint
         * @param Tribe__Events__REST__V1__Endpoints__Linked_Post_Endpoint_Interface $organizer_endpoint
         */
        public function __construct(\Tribe__REST__Messages_Interface $messages, \Tribe__Events__REST__Interfaces__Post_Repository $post_repository, \Tribe__Events__REST__V1__Validator__Interface $validator, \Tribe__Events__REST__V1__Endpoints__Linked_Post_Endpoint_Interface $venue_endpoint, \Tribe__Events__REST__V1__Endpoints__Linked_Post_Endpoint_Interface $organizer_endpoint)
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response|WP_Error An array containing the data on success or a WP_Error instance on failure.
         */
        public function get(\WP_REST_Request $request)
        {
        }
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
        /**
         * Provides the content of the `args` array to register the endpoint support for GET requests.
         *
         * @return array
         */
        public function READ_args()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         */
        public function CREATE_args()
        {
        }
        /**
         * Handles POST requests on the endpoint.
         *
         * @param WP_REST_Request $request
         * @param bool            $return_id Whether the created post ID should be returned or the full response object.
         *
         * @return WP_Error|WP_REST_Response|int An array containing the data on success or a WP_Error instance on failure.
         */
        public function create(\WP_REST_Request $request, $return_id = \false)
        {
        }
        /**
         * Whether the current user can create content of the specified type or not.
         *
         * @return bool Whether the current user can post or not.
         */
        public function can_create()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         */
        public function DELETE_args()
        {
        }
        /**
         * Handles DELETE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the trashed post on
         *                                   success or a WP_Error instance on failure.
         */
        public function delete(\WP_REST_Request $request)
        {
        }
        /**
         * Whether the current user can delete posts of the type managed by the endpoint or not.
         *
         * @since 4.6
         *
         * @return bool
         */
        public function can_delete()
        {
        }
        /**
         * Handles UPDATE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the updated post on
         *                                   success or a WP_Error instance on failure.
         */
        public function update(\WP_REST_Request $request)
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         */
        public function EDIT_args()
        {
        }
        /**
         * Whether the current user can update content of this type or not.
         *
         * @since 4.6
         *
         * @return bool Whether the current user can update or not.
         */
        public function can_edit()
        {
        }
        /**
         * Prepares an array with the event data from the specified request.
         *
         * @param WP_REST_Request $request
         *
         * @return array|WP_Error An array specifying the event data, a `WP_Error` if an error occurred.
         */
        protected function prepare_postarr(\WP_REST_Request $request)
        {
        }
    }
    class Tribe__Events__REST__V1__Endpoints__Single_Event_Slug extends \Tribe__Events__REST__V1__Endpoints__Single_Event
    {
        /**
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response|WP_Error An array containing the data on success or a WP_Error instance on failure.
         */
        public function get(\WP_REST_Request $request)
        {
        }
        /**
         * Provides the content of the `args` array to register the endpoint support for GET requests.
         *
         * @return array
         */
        public function READ_args()
        {
        }
        /**
         * Handles DELETE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the trashed post on
         *                                   success or a WP_Error instance on failure.
         */
        public function delete(\WP_REST_Request $request)
        {
        }
        /**
         * Handles UPDATE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the updated post on
         *                                   success or a WP_Error instance on failure.
         */
        public function update(\WP_REST_Request $request)
        {
        }
    }
    /**
     * Class Tribe__Events__REST__V1__Endpoints__Single_Organizer
     *
     * @since bucket/full-rest-api
     */
    class Tribe__Events__REST__V1__Endpoints__Single_Organizer extends \Tribe__Events__REST__V1__Endpoints__Linked_Post_Base implements \Tribe__Events__REST__V1__Endpoints__Linked_Post_Endpoint_Interface, \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * Handles GET requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data on success or a WP_Error instance on failure.
         *
         * @since bucket/full-rest-api
         */
        public function get(\WP_REST_Request $request)
        {
        }
        /**
         * Handles POST requests on the endpoint.
         *
         * @param WP_REST_Request $request
         * @param bool            $return_id Whether the created post ID should be returned or the full response object.
         *
         * @return WP_Error|WP_REST_Response|int An array containing the data on success or a WP_Error instance on failure.
         *
         * @since bucket/full-rest-api
         */
        public function create(\WP_REST_Request $request, $return_id = \false)
        {
        }
        /**
         * Inserts one or more organizers.
         *
         * @param int|array $data Either an existing linked post ID or the linked post data or an array of the previous options.
         *
         * @return false|array|WP_Error `false` if the linked post data is empty, the linked post ID (in an array as requested by the
         *                              linked posts engine) or a `WP_Error` if the linked post insertion failed.
         *
         * @since bucket/full-rest-api
         */
        public function insert($data)
        {
        }
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link  http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         *
         * @since bucket/full-rest-api
         */
        public function get_documentation()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         *
         * @since bucket/full-rest-api
         */
        public function READ_args()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         *
         * @since bucket/full-rest-api
         */
        public function CREATE_args()
        {
        }
        /**
         * Whether the current user can create content of the specified type or not.
         *
         * @return bool Whether the current user can post or not.
         */
        public function can_create()
        {
        }
        /**
         * Prepares an array with the or data from the specified request.
         *
         * @param WP_REST_Request $request
         *
         * @return array
         */
        public function prepare_postarr(\WP_REST_Request $request)
        {
        }
        /**
         * Returns the post type handled by this linked post endpoint.
         *
         * @return string
         *
         * @since bucket/full-rest-api
         */
        protected function get_post_type()
        {
        }
        /**
         * Whether the data represents a valid post type ID.
         *
         * @param mixed $data
         *
         * @return bool
         *
         * @since bucket/full-rest-api
         */
        protected function is_post_type($data)
        {
        }
        /**
         * Handles DELETE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the trashed post on
         *                                   success or a WP_Error instance on failure.
         */
        public function delete(\WP_REST_Request $request)
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         */
        public function DELETE_args()
        {
        }
        /**
         * Whether the current user can delete posts of the type managed by the endpoint or not.
         *
         * @since 4.6
         *
         * @return bool
         */
        public function can_delete()
        {
        }
        /**
         * Handles UPDATE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the updated post on
         *                                   success or a WP_Error instance on failure.
         */
        public function update(\WP_REST_Request $request)
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         */
        public function EDIT_args()
        {
        }
        /**
         * Whether the current user can update content of this type or not.
         *
         * @since 4.6
         *
         * @return bool Whether the current user can update or not.
         */
        public function can_edit()
        {
        }
    }
    class Tribe__Events__REST__V1__Endpoints__Single_Organizer_Slug extends \Tribe__Events__REST__V1__Endpoints__Single_Organizer
    {
        /**
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response|WP_Error An array containing the data on success or a WP_Error instance on failure.
         */
        public function get(\WP_REST_Request $request)
        {
        }
        /**
         * Provides the content of the `args` array to register the endpoint support for GET requests.
         *
         * @return array
         */
        public function READ_args()
        {
        }
        /**
         * Handles DELETE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the trashed post on
         *                                   success or a WP_Error instance on failure.
         */
        public function delete(\WP_REST_Request $request)
        {
        }
        /**
         * Handles UPDATE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the updated post on
         *                                   success or a WP_Error instance on failure.
         */
        public function update(\WP_REST_Request $request)
        {
        }
    }
    class Tribe__Events__REST__V1__Endpoints__Single_Tag extends \Tribe__Events__REST__V1__Endpoints__Term_Single_Base implements \Tribe__REST__Endpoints__READ_Endpoint_Interface, \Tribe__REST__Endpoints__CREATE_Endpoint_Interface, \Tribe__REST__Endpoints__DELETE_Endpoint_Interface, \Tribe__REST__Endpoints__UPDATE_Endpoint_Interface, \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @since 4.6
         *
         * @return array
         */
        public function CREATE_args()
        {
        }
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @since 4.6
         *
         * @link  http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @since 4.6
         *
         * @return array
         */
        public function READ_args()
        {
        }
        /**
         * Returns the taxonomy of the terms handled by the endpoint.
         *
         * @since 4.6
         *
         * @return string
         */
        public function get_taxonomy()
        {
        }
        /**
         * Returns the term namespace used by the endpoint.
         *
         * @since 4.6
         *
         * @return string
         */
        protected function get_term_namespace()
        {
        }
    }
    /**
     * Class Tribe__Events__REST__V1__Endpoints__Single_Venue
     *
     * @since bucket/full-rest-api
     */
    class Tribe__Events__REST__V1__Endpoints__Single_Venue extends \Tribe__Events__REST__V1__Endpoints__Linked_Post_Base implements \Tribe__Events__REST__V1__Endpoints__Linked_Post_Endpoint_Interface, \Tribe__Documentation__Swagger__Provider_Interface
    {
        /**
         * @var string
         */
        protected $post_type = \Tribe__Events__Main::VENUE_POST_TYPE;
        /**
         * Handles GET requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data on success or a WP_Error instance on failure.
         *
         * @since bucket/full-rest-api
         */
        public function get(\WP_REST_Request $request)
        {
        }
        /**
         * Handles POST requests on the endpoint.
         *
         * @param WP_REST_Request $request
         * @param bool            $return_id Whether the created post ID should be returned or the full response object.
         *
         * @return WP_Error|WP_REST_Response|int An array containing the data on success or a WP_Error instance on failure.
         *
         * @since bucket/full-rest-api
         */
        public function create(\WP_REST_Request $request, $return_id = \false)
        {
        }
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link  http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         *
         * @since bucket/full-rest-api
         */
        public function get_documentation()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         *
         * @since bucket/full-rest-api
         */
        public function READ_args()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         *
         * @since bucket/full-rest-api
         */
        public function CREATE_args()
        {
        }
        /**
         * Prepares an array with the venue data from the specified request.
         *
         * @param WP_REST_Request $request
         *
         * @return array
         */
        public function prepare_postarr(\WP_REST_Request $request)
        {
        }
        /**
         * Returns the post type handled by this linked post endpoint.
         *
         * @return string
         *
         * @since bucket/full-rest-api
         */
        protected function get_post_type()
        {
        }
        /**
         * Whether the data represents a valid post type ID.
         *
         * @param mixed $data
         *
         * @return bool
         *
         * @since bucket/full-rest-api
         */
        protected function is_post_type($data)
        {
        }
        /**
         * @return bool Whether the current user can post or not.
         */
        public function can_create()
        {
        }
        /**
         * Handles DELETE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the trashed post on
         *                                   success or a WP_Error instance on failure.
         */
        public function delete(\WP_REST_Request $request)
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         */
        public function DELETE_args()
        {
        }
        /**
         * Whether the current user can delete posts of the type managed by the endpoint or not.
         *
         * @since 4.6
         *
         * @return bool
         */
        public function can_delete()
        {
        }
        /**
         * Handles UPDATE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the updated post on
         *                                   success or a WP_Error instance on failure.
         */
        public function update(\WP_REST_Request $request)
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         */
        public function EDIT_args()
        {
        }
        /**
         * Whether the current user can update content of this type or not.
         *
         * @since 4.6
         *
         * @return bool Whether the current user can update or not.
         */
        public function can_edit()
        {
        }
    }
    class Tribe__Events__REST__V1__Endpoints__Single_Venue_Slug extends \Tribe__Events__REST__V1__Endpoints__Single_Venue
    {
        /**
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response|WP_Error An array containing the data on success or a WP_Error instance on failure.
         */
        public function get(\WP_REST_Request $request)
        {
        }
        /**
         * Provides the content of the `args` array to register the endpoint support for GET requests.
         *
         * @return array
         */
        public function READ_args()
        {
        }
        /**
         * Handles DELETE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the trashed post on
         *                                   success or a WP_Error instance on failure.
         */
        public function delete(\WP_REST_Request $request)
        {
        }
        /**
         * Handles UPDATE requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data of the updated post on
         *                                   success or a WP_Error instance on failure.
         */
        public function update(\WP_REST_Request $request)
        {
        }
    }
    class Tribe__Events__REST__V1__Endpoints__Swagger_Documentation implements \Tribe__REST__Endpoints__READ_Endpoint_Interface, \Tribe__Documentation__Swagger__Provider_Interface, \Tribe__Documentation__Swagger__Builder_Interface
    {
        /**
         * @var string
         */
        protected $swagger_version = '3.0.0';
        /**
         * @var string
         */
        protected $tec_rest_api_version;
        /**
         * @var Tribe__Documentation__Swagger__Provider_Interface[]
         */
        protected $documentation_providers = [];
        /**
         * @var Tribe__Documentation__Swagger__Provider_Interface[]
         */
        protected $definition_providers = [];
        /**
         * Tribe__Events__REST__V1__Endpoints__Swagger_Documentation constructor.
         *
         * @param string $tec_rest_api_version
         */
        public function __construct($tec_rest_api_version)
        {
        }
        /**
         * Handles GET requests on the endpoint.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response An array containing the data on success or a WP_Error instance on failure.
         */
        public function get(\WP_REST_Request $request)
        {
        }
        /**
         * Returns an array in the format used by Swagger 2.0.
         *
         * While the structure must conform to that used by v2.0 of Swagger the structure can be that of a full document
         * or that of a document part.
         * The intelligence lies in the "gatherer" of informations rather than in the single "providers" implementing this
         * interface.
         *
         * @link http://swagger.io/
         *
         * @return array An array description of a Swagger supported component.
         */
        public function get_documentation()
        {
        }
        protected function get_api_info()
        {
        }
        protected function get_paths()
        {
        }
        /**
         * Registers a documentation provider for a path.
         *
         * @param                                            $path
         * @param Tribe__Documentation__Swagger__Provider_Interface $endpoint
         */
        public function register_documentation_provider($path, \Tribe__Documentation__Swagger__Provider_Interface $endpoint)
        {
        }
        protected function get_own_documentation()
        {
        }
        protected function get_definitions()
        {
        }
        /**
         * @return Tribe__Documentation__Swagger__Provider_Interface[]
         */
        public function get_registered_documentation_providers()
        {
        }
        /**
         * Registers a documentation provider for a definition.
         *
         * @param                                                  string $type
         * @param Tribe__Documentation__Swagger__Provider_Interface       $provider
         */
        public function register_definition_provider($type, \Tribe__Documentation__Swagger__Provider_Interface $provider)
        {
        }
        /**
         * @return Tribe__Documentation__Swagger__Provider_Interface[]
         */
        public function get_registered_definition_providers()
        {
        }
        /**
         * Returns the content of the `args` array that should be used to register the endpoint
         * with the `register_rest_route` function.
         *
         * @return array
         */
        public function READ_args()
        {
        }
    }
    class Tribe__Events__REST__V1__Headers__Base implements \Tribe__REST__Headers__Base_Interface
    {
        /**
         * @var string
         */
        protected $api_version_header = 'X-TEC-API-VERSION';
        /**
         * @var string
         */
        protected $api_root_header = 'X-TEC-API-ROOT';
        /**
         * @var string
         */
        protected $api_origin_header = 'X-TEC-API-ORIGIN';
        /**
         * @var string
         */
        protected $api_version_meta_name = 'tec-api-version';
        /**
         * @var string
         */
        protected $api_origin_meta_name = 'tec-api-origin';
        /**
         * Returns the header that the REST API will print on the page head to report
         * its version.
         *
         * @return string
         */
        public function get_api_version_header()
        {
        }
        /**
         * Returns the header the REST API will print on the page head to report its root
         * url.
         *
         * @return string
         */
        public function get_api_root_header()
        {
        }
        /**
         * Returns the header the REST API will print on the page head to report its origin
         * url. Normaly the home_url()
         *
         * @return string
         */
        public function get_api_origin_header()
        {
        }
        /**
         * Returns the `name` of the meta tag that will be printed on the page to indicate
         * the REST API version.
         *
         * @return string
         */
        public function get_api_version_meta_name()
        {
        }
        /**
         * Returns the `name` of the meta tag that will be printed on the page to indicate
         * the REST API Origin URL.
         *
         * @return string
         */
        public function get_api_origin_meta_name()
        {
        }
        /**
         * Returns the REST API URL.
         *
         * @return string
         */
        public function get_rest_url()
        {
        }
        /**
         * Returns the REST API Origin Site.
         *
         * @return string
         */
        public function get_rest_origin_url()
        {
        }
    }
    /**
     * Class Tribe__Events__REST__V1__Main
     *
     * The main entry point for TEC REST API.
     *
     * This class should not contain business logic and merely set up and start the TEC REST API support.
     */
    class Tribe__Events__REST__V1__Main extends \Tribe__REST__Main
    {
        /**
         * The Events Calendar REST API URL prefix.
         *
         * This prefix is appended to the The Events Calendar REST API URL ones.
         *
         * @var string
         */
        protected $url_prefix = '/events/v1';
        /**
         * @var array
         */
        protected $registered_endpoints = [];
        /**
         * Binds the implementations needed to support the REST API.
         */
        public function bind_implementations()
        {
        }
        /**
         * Hooks the filters and actions required for the REST API support to kick in.
         */
        public function hook()
        {
        }
        /**
         * Hooks the additional headers and meta tags related to the REST API.
         */
        protected function hook_headers()
        {
        }
        /**
         * Hooks the additional Events Settings related to the REST API.
         */
        protected function hook_settings()
        {
        }
        protected function hook_messages()
        {
        }
        /**
         * Registers the endpoints, and the handlers, supported by the REST API
         *
         * @param bool $register_routes Whether routes should be registered as well or not.
         */
        public function register_endpoints($register_routes = \true)
        {
        }
        /**
         * Builds and hooks the documentation endpoint
         *
         * @since 4.5
         *
         * @param bool $register_routes Whether routes for the endpoint should be registered or not.
         *
         */
        protected function register_documentation_endpoint($register_routes = \true)
        {
        }
        protected function get_semantic_version()
        {
        }
        /**
         * Returns the events REST API namespace string that should be used to register a route.
         *
         * @return string
         */
        protected function get_events_route_namespace()
        {
        }
        /**
         * Returns the string indicating the REST API version.
         *
         * @return string
         */
        public function get_version()
        {
        }
        /**
         * Builds and hooks the event archives endpoint
         *
         * @since 4.5
         *
         * @param bool $register_routes Whether routes for the endpoint should be registered or not.
         *
         */
        protected function register_event_archives_endpoint($register_routes = \true)
        {
        }
        /**
         * Registers the endpoint that will handle requests for a single event.
         *
         * @since 4.5
         *
         * @param bool $register_routes Whether routes for the endpoint should be registered or not.
         *
         */
        protected function register_single_event_endpoint($register_routes = \true)
        {
        }
        /**
         * Registers the endpoint that will handle requests for a single event slug.
         *
         * @since 4.5
         *
         * @param bool $register_routes Whether routes for the endpoint should be registered or not.
         *
         */
        protected function register_single_event_slug_endpoint($register_routes = \true)
        {
        }
        /**
         * Returns the URL where the API users will find the API documentation.
         *
         * @return string
         */
        public function get_reference_url()
        {
        }
        /**
         * Filters the messages returned by the Event Aggregator Service to add those specific to the REST API v1.
         *
         * @param array $messages
         *
         * @return array The original messages plus those specific to the REST API V1.
         */
        public function filter_service_messages(array $messages = [])
        {
        }
        /**
         * Filters the messages localized by the Event Aggregator Service to add those specific to the REST API v1.
         *
         * @param array $localized_data
         *
         * @return array
         */
        public function filter_localized_data(array $localized_data = [])
        {
        }
        /**
         * Builds an instance of the single venue endpoint.
         *
         * @return Tribe__Events__REST__V1__Endpoints__Single_Venue
         */
        public function build_single_venue_endpoint()
        {
        }
        /**
         * Builds an instance of the single organizer endpoint.
         *
         * @return Tribe__Events__REST__V1__Endpoints__Single_Organizer
         */
        public function build_single_organizer_endpoint()
        {
        }
        /**
         * Returns the REST API URL prefix that will be appended to the namespace.
         *
         * The prefix should be in the `/some/path` format.
         *
         * @return string
         */
        protected function url_prefix()
        {
        }
        /**
         * Registers the endpoint that will handle requests for a single venue.
         *
         * @since 4.6
         *
         * @param bool $register_routes Whether routes for the endpoint should be registered or not.
         *
         */
        protected function register_single_venue_endpoint($register_routes = \true)
        {
        }
        /**
         * Registers the endpoint that will handle requests for a single venue slug.
         *
         * @since 4.6
         *
         * @param bool $register_routes Whether routes for the endpoint should be registered or not.
         *
         */
        protected function register_single_venue_slug_endpoint($register_routes = \true)
        {
        }
        /**
         * Registers the endpoint that will handle requests for a single organizer.
         *
         * @since bucket/full-rest-api
         *
         * @param bool $register_routes Whether routes for the endpoint should be registered or not.
         *
         */
        protected function register_single_organizer_endpoint($register_routes = \true)
        {
        }
        /**
         * Registers the endpoint that will handle requests for a single organizer slug.
         *
         * @since bucket/full-rest-api
         *
         * @param bool $register_routes Whether routes for the endpoint should be registered or not.
         *
         */
        protected function register_single_organizer_slug_endpoint($register_routes = \true)
        {
        }
        /**
         * Builds and hooks the venue archives endpoint
         *
         * @since 4.6
         *
         * @param bool $register_routes Whether routes for the endpoint should be registered or not.
         *
         */
        protected function register_venue_archives_endpoint($register_routes = \true)
        {
        }
        /**
         * Builds and hooks the organizer archives endpoint
         *
         * @since 4.6
         *
         * @param bool $register_routes Whether routes for the endpoint should be registered or not.
         *
         */
        protected function register_organizer_archives_endpoint($register_routes = \true)
        {
        }
        /**
         * Builds and hooks the event categories archives endpoint
         *
         * @since 4.6
         *
         * @param bool $register_routes Whether routes for the endpoint should be registered or not.
         */
        protected function register_categories_endpoint($register_routes)
        {
        }
        /**
         * Builds and hooks the event tags archives endpoint
         *
         * @since 4.6
         *
         * @param bool $register_routes Whether routes for the endpoint should be registered or not.
         */
        protected function register_tags_endpoint($register_routes)
        {
        }
        /**
         * Filters the event category taxonomy registration arguments to make it show in REST API requests.
         *
         * @since 4.6
         *
         * @param array $taxonomy_args
         *
         * @return array
         */
        public function filter_taxonomy_args(array $taxonomy_args)
        {
        }
    }
    class Tribe__Events__REST__V1__Post_Repository implements \Tribe__Events__REST__Interfaces__Post_Repository
    {
        /**
         * A post type to get data request handler map.
         *
         * @var array
         */
        protected $types_get_map = [];
        /**
         * @var Tribe__REST__Messages_Interface
         */
        protected $messages;
        public function __construct(\Tribe__REST__Messages_Interface $messages = \null)
        {
        }
        /**
         * Retrieves an array representation of the post.
         *
         * @param int    $id      The post ID.
         * @param string $context Context of data.
         *
         * @return array An array representation of the post.
         *
         * @since 4.6 Added $context param
         */
        public function get_data($id, $context = '')
        {
        }
        /**
         * Returns an array representation of an event.
         *
         * @param int    $event_id An event post ID.
         * @param string $context  Context of data.
         *
         * @return array|WP_Error Either the array representation of an event or an error object.
         *
         * @since 4.6 Added $context param
         */
        public function get_event_data($event_id, $context = '')
        {
        }
        /**
         * Returns an array representation of an event venue.
         *
         * @param int    $event_or_venue_id An event or venue post ID.
         * @param string $context           Context of data.
         *
         * @return array|WP_Error Either the array representation of a venue or an error object.
         *
         * @since 4.6 Added $context param
         */
        public function get_venue_data($event_or_venue_id, $context = '')
        {
        }
        protected function get_featured_image($id)
        {
        }
        /**
         * Adds the Global ID fields to a set of rest data
         *
         * @param array $data Rest Array of data
         * @param int   $id   Post ID
         *
         * @return array
         */
        protected function add_global_id_fields($data, $post_id)
        {
        }
        /**
         * Returns an array representation of an event organizer(s).
         *
         * @param int    $event_or_organizer_id An event or organizer post ID.
         * @param string $context               Context of data.
         *
         * @return array|WP_Error Either an the array representation of an orgnanizer, an
         *                        arrya of array representations of an event organizer or
         *                        an error object.
         *
         * @since 4.6 Added $context param
         */
        public function get_organizer_data($event_or_organizer_id, $context = '')
        {
        }
        /**
         * @param string $date A date string in a format `strtotime` can parse.
         *
         * @return array
         */
        protected function get_date_details($date)
        {
        }
        /**
         * Returns an ASC array of event costs.
         *
         * @param int|WP_Post $event_id The event post or the post ID.
         *
         * @return array
         */
        protected function get_cost_values($event_id)
        {
        }
        /**
         * Returns the categories assigned to the specified event.
         *
         * @since 4.6
         *
         * @param int $event_id
         *
         * @return array
         */
        protected function get_categories($event_id)
        {
        }
        /**
         * Returns the terms associated with an event.
         *
         * @since 4.6
         *
         * @param int $event_id An event post ID.
         * @param string $taxonomy
         *
         * @return array
         */
        public function get_terms($event_id, $taxonomy)
        {
        }
        /**
         * Returns the tags assigned to the specified event.
         *
         * @since 4.6
         *
         * @param int $event_id
         *
         * @return array
         */
        protected function get_tags($event_id)
        {
        }
        /**
         * Returns an array of prepared array representations of a taxonomy term.
         *
         * @since 4.6
         *
         * @param array $terms_data An array of term objects.
         * @param string $taxonomy The taxonomy of the term objects.
         *
         * @return array|\WP_Error Either the array representation of taxonomy terms or an error object.
         */
        public function prepare_terms_data(array $terms_data, $taxonomy)
        {
        }
        /**
         * Prepares a single term data for the response.
         *
         * @since 4.6
         *
         * @param array  $term_data
         * @param string $taxonomy
         * @param string $namespace
         *
         * @return array
         */
        public function prepare_term_data($term_data, $taxonomy, $namespace)
        {
        }
    }
    /**
     * Class Tribe__Events__REST__V1__Settings
     *
     * Adds and manages the TEC REST API settings.
     */
    class Tribe__Events__REST__V1__Settings
    {
        /**
         * @var Tribe__Events__REST__V1__System
         */
        protected $system;
        /**
         * Tribe__Events__REST__V1__Settings constructor.
         *
         * @param Tribe__Events__REST__V1__System $system
         */
        public function __construct(\Tribe__Events__REST__V1__System $system)
        {
        }
        /**
         * @param array $fields
         *
         * @return array
         */
        public function filter_tribe_addons_tab_fields(array $fields = [])
        {
        }
        /**
         * @param array $fields
         *
         * @return array
         */
        protected function add_fields(array $fields = [])
        {
        }
    }
    /**
     * Class Tribe__Events__REST__V1__System
     *
     * Handles scanning and asserting the current WordPress installation support of
     * TEC REST API.
     */
    class Tribe__Events__REST__V1__System extends \Tribe__REST__System
    {
        /**
         * @var string The name of the option that enables or disables the TEC REST API support.
         */
        protected static $disable_option_name = 'rest-v1-disabled';
        /**
         * Whether TEC REST API is supported by the WP installation or not.
         *
         * @return bool
         */
        public function supports_tec_rest_api()
        {
        }
        /**
         * Whether The Events Calendar REST API is enabled or not for the WP installation.
         *
         * @return bool
         */
        public function tec_rest_api_is_enabled()
        {
        }
        /**
         * Returns the name of the option used to indicate whether TEC REST API is enabled or not for
         * the WP installation.
         *
         * The option is stored in The Events Calendar options database record: use `tribe_get_option()`
         * to get it.
         *
         * @return string
         */
        public static function get_disable_option_name()
        {
        }
    }
    interface Tribe__Events__Validator__Interface extends \Tribe__Validator__Interface
    {
        /**
         * Whether the provided value is an existing Venue post ID or not.
         *
         * @param mixed $venue_id
         *
         * @return bool
         */
        public function is_venue_id($venue_id);
        /**
         * Whether the provided value is an existing Organizer post ID or not.
         *
         * @param mixed $organizer Either an array of Organizer post IDs or a single Organizer post ID.
         *
         * @return bool
         */
        public function is_organizer_id($organizer);
        /**
         * Whether a list or array of organizer post IDs only contains valid organizer IDs or not.
         *
         * @param  string|array $organizers A list of organizer post IDs separated by the specified separator or an array
         *                                  of organizer post IDs.
         * @param string        $sep        The separator used in the list to separate the organizer post IDs; ignored if
         *                                  the input value is an array.
         *
         * @return bool
         */
        public function is_organizer_id_list($organizers, $sep = ',');
        /**
         * Whether the event category exists or not.
         *
         * @param mixed  $category Either a single event category `term_id` or `slug` or an array of
         *                     `term_id`s and `slug`s
         * @return bool
         */
        public function is_event_category($category);
        /**
         * Whether the value is the post ID of an existing event or not.
         *
         * @param int|string $event_id
         *
         * @return bool
         */
        public function is_event_id($event_id);
        /**
         * Whether the value is the post name of an existing event or not.
         *
         * @param string $event_slug
         *
         * @return bool
         */
        public function is_event_slug($event_slug);
        /**
         * Whether a list or array of event post IDs only contains valid event IDs or not.
         *
         * @since 4.6.22
         *
         * @param  string|array $events A list of event post IDs separated by the specified separator or an array
         *                                  of event post IDs.
         * @param string $sep The separator used in the list to separate the event post IDs; ignored if
         *                                  the input value is an array.
         *
         * @return bool
         */
        public function is_event_id_list($events, $sep = ',');
        /**
         * Checks if the query is looking for ticketed events and Event Tickets is available.
         *
         * @since 6.0.0
         *
         * @param bool $value Can be true or false.
         *
         * @return mixed
         */
        public function supports_ticketed($value);
    }
    interface Tribe__Events__REST__V1__Validator__Interface extends \Tribe__Events__Validator__Interface
    {
    }
    /**
     * Class Tribe__Events__Validator__Base
     *
     * @since 4.6
     */
    class Tribe__Events__Validator__Base extends \Tribe__Validator__Base implements \Tribe__Events__Validator__Interface
    {
        /**
         * Whether the provided value is an existing Venue post ID or not.
         *
         * @since 4.6
         *
         * @param mixed $venue_id
         *
         * @return bool
         */
        public function is_venue_id($venue_id)
        {
        }
        /**
         * Whether the provided value is an existing Organizer post ID or not.
         *
         * @since 4.6
         *
         * @param mixed $organizer Either an array of Organizer post IDs or a single Organizer post ID.
         *
         * @return bool
         */
        public function is_organizer_id($organizer)
        {
        }
        /**
         * Whether a list or array of organizer post IDs only contains valid organizer IDs or not.
         *
         * @since 4.6
         *
         * @param  string|array $organizers A list of organizer post IDs separated by the specified separator or an array
         *                                  of organizer post IDs.
         * @param string        $sep        The separator used in the list to separate the organizer post IDs; ignored if
         *                                  the input value is an array.
         *
         * @return bool
         */
        public function is_organizer_id_list($organizers, $sep = ',')
        {
        }
        /**
         * Whether the event category exists or not.
         *
         * @since 4.6
         *
         * @param mixed $category Either a single event category `term_id` or `slug` or an array of
         *                        `term_id`s and `slug`s
         *
         * @return bool
         */
        public function is_event_category($category)
        {
        }
        /**
         * Whether the value is the post ID of an existing event or not.
         *
         * @since 4.6
         *
         * @param int|string $event_id
         *
         * @return bool
         */
        public function is_event_id($event_id)
        {
        }
        /**
         * Whether the value is the post name of an existing event or not.
         *
         * @since 4.6.8
         *
         * @param string $event_slug
         *
         * @return bool
         */
        public function is_event_slug($event_slug)
        {
        }
        /**
         * Whether the value is the post name of an existing organizer or not.
         *
         * @since 4.6.9
         *
         * @param string $organizer_slug
         *
         * @return bool
         */
        public function is_organizer_slug($organizer_slug)
        {
        }
        /**
         * Whether the value is the post name of an existing venue or not.
         *
         * @since 4.6.9
         *
         * @param string $venue_slug
         *
         * @return bool
         */
        public function is_venue_slug($venue_slug)
        {
        }
        /**
         * Whether the string represents a valid PHP timezone or not.
         *
         * @since 4.6
         *
         * @param string $candidate
         *
         * @return bool
         */
        public function is_timezone($candidate)
        {
        }
        /**
         * Whether the string is empty or represents a valid PHP timezone.
         *
         * @since 4.6.13
         *
         * @param string $candidate
         *
         * @return bool
         */
        public function is_timezone_or_empty($candidate)
        {
        }
        /**
         * Whether a list or array of venue post IDs only contains valid venue IDs or not.
         *
         * @since 4.6
         *
         * @param  string|array $venues A list of venue post IDs separated by the specified separator or an array
         *                                  of venue post IDs.
         * @param string        $sep        The separator used in the list to separate the venue post IDs; ignored if
         *                                  the input value is an array.
         *
         * @return bool
         */
        public function is_venue_id_list($venues, $sep = ',')
        {
        }
        /**
         * Whether a list or array of event post IDs only contains valid event IDs or not.
         *
         * @since 4.6.22
         *
         * @param  string|array $events A list of event post IDs separated by the specified separator or an array
         *                                  of event post IDs.
         * @param string        $sep        The separator used in the list to separate the event post IDs; ignored if
         *                                  the input value is an array.
         *
         * @return bool
         */
        public function is_event_id_list($events, $sep = ',')
        {
        }
        /**
         * Checks whether `ticketed` param is valid or not.
         *
         * @since 6.0.0
         *
         * @param bool $value Can be true or false.
         *
         * @return bool|WP_Error
         */
        public function supports_ticketed($value)
        {
        }
    }
    class Tribe__Events__REST__V1__Validator__Base extends \Tribe__Events__Validator__Base implements \Tribe__Events__REST__V1__Validator__Interface
    {
        /**
         * Determine if a value is a Venue ID, entry, or empty.
         *
         * @since 4.6.20
         *
         * @param string|array $venue Venue ID or entry.
         *
         * @return bool Whether a value is a Venue ID, entry, or empty.
         */
        public function is_venue_id_or_entry_or_empty($venue)
        {
        }
        /**
         * Determine if a value is a Organizer ID, entry, or empty.
         *
         * @since 4.6.20
         *
         * @param string|array $organizer Organizer ID or entry.
         *
         * @return bool Whether a value is a Organizer ID, entry, or empty.
         */
        public function is_organizer_id_or_entry_or_empty($organizer)
        {
        }
        /**
         * Determine if a value is a post ID or entry.
         *
         * @since 6.2.0
         *
         * @param string $type Type of linked post to check.
         * @param string|array $linked_post Post ID or data.
         *
         * @return bool
         */
        public function is_linked_post_id_or_entry($type, $linked_post)
        {
        }
        /**
         * Determine if a value is a post ID, entry, or empty.
         *
         * @since 6.2.0
         *
         * @param string $type Type of linked post to check.
         * @param string|array $linked_post Post ID or data.
         *
         * @return bool
         */
        public function is_linked_post_id_or_entry_or_empty($type, $linked_post)
        {
        }
    }
    /**
     * Class Tribe__Events__Repositories__Event
     *
     *
     * @since 4.9
     */
    class Tribe__Events__Repositories__Event extends \Tribe__Repository
    {
        /**
         * The unique fragment that will be used to identify this repository filters.
         *
         * @var string
         */
        protected $filter_name = 'events';
        /**
         * The menu_order override used in pre_get_posts to support negative menu_order lookups for Sticky Events.
         *
         * @var int
         */
        protected $menu_order = 0;
        /**
         * The meta key that should be used for the start date.
         *
         * Defaults to `_EventStartDateUTC`.
         *
         * @see \Tribe__Events__Repositories__Event::use_utc()
         *
         * @var string
         */
        protected $start_meta_key = '_EventStartDateUTC';
        /**
         * The meta key that should be used for the end date.
         *
         * Defaults to `_EventEndDateUTC`.
         *
         * @see \Tribe__Events__Repositories__Event::use_utc()
         *
         * @var string
         */
        protected $end_meta_key = '_EventEndDateUTC';
        /**
         * The timezone object that should be used to normalize dates.
         *
         * Defaults to the UTC timezone.
         *
         * @see \Tribe__Events__Repositories__Event::use_utc()
         *
         * @var \DateTimeZone
         */
        protected $normal_timezone;
        /**
         * Whether the use of UTC times for events filtering and ordering is being forced by means of a `use_utc` call
         * or not.
         *
         * @since 4.9.7
         *
         * @var bool
         */
        protected $using_utc;
        /**
         * Tribe__Events__Repositories__Event constructor.
         *
         * Sets up the repository default parameters and schema.
         *
         * @since 4.9
         */
        public function __construct()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function by_args(array $args)
        {
        }
        /**
         * Filters the event by their all-day status.
         *
         * @since 4.9
         *
         * @param bool $all_day Whether the events should be all-day or not.
         *
         * @return array|null An array of query arguments or null if modified with internal methods.
         */
        public function filter_by_all_day($all_day = \true)
        {
        }
        /**
         * Filters events whose start date occurs before the provided date; fetch is not inclusive.
         *
         * @since 4.9
         *
         * @param string|DateTime|int $datetime A `strtotime` parse-able string, a DateTime object or
         *                                      a timestamp.
         * @param string|DateTimeZone $timezone A timezone string, UTC offset or DateTimeZone object;
         *                                      defaults to the site timezone; this parameter is ignored
         *                                      if the `$datetime` parameter is a DatTime object.
         *
         * @return array An array of arguments that should be added to the WP_Query object.
         */
        public function filter_by_starts_before($datetime, $timezone = \null)
        {
        }
        /**
         * Filters events whose end date occurs on or before the provided date; fetch is not inclusive.
         *
         * @since 4.9
         *
         * @param string|DateTime|int $datetime A `strtotime` parse-able string, a DateTime object or
         *                                      a timestamp.
         * @param string|DateTimeZone $timezone A timezone string, UTC offset or DateTimeZone object;
         *                                      defaults to the site timezone; this parameter is ignored
         *                                      if the `$datetime` parameter is a DatTime object.
         *
         * @return array An array of arguments that should be added to the WP_Query object.
         */
        public function filter_by_ends_on_or_before($datetime, $timezone = \null)
        {
        }
        /**
         * Filters events whose end date occurs before the provided date; fetch is inclusive.
         *
         * @since 4.9
         *
         * @param string|DateTime|int $datetime A `strtotime` parse-able string, a DateTime object or
         *                                      a timestamp.
         * @param string|DateTimeZone $timezone A timezone string, UTC offset or DateTimeZone object;
         *                                      defaults to the site timezone; this parameter is ignored
         *                                      if the `$datetime` parameter is a DatTime object.
         *
         * @return array An array of arguments that should be added to the WP_Query object.
         */
        public function filter_by_ends_before($datetime, $timezone = \null)
        {
        }
        /**
         * Filters events whose start date occurs after the provided date; fetch is not inclusive.
         *
         * @since 4.9
         *
         * @param string|DateTime|int $datetime A `strtotime` parse-able string, a DateTime object or
         *                                      a timestamp.
         * @param string|DateTimeZone $timezone A timezone string, UTC offset or DateTimeZone object;
         *                                      defaults to the site timezone; this parameter is ignored
         *                                      if the `$datetime` parameter is a DatTime object.
         *
         * @return array An array of arguments that should be added to the WP_Query object.
         */
        public function filter_by_starts_after($datetime, $timezone = \null)
        {
        }
        /**
         * Filters events whose start date occurs on or after the provided date; fetch is inclusive.
         *
         * @since 4.9
         *
         * @param string|DateTime|int $datetime A `strtotime` parse-able string, a DateTime object or
         *                                      a timestamp.
         * @param string|DateTimeZone $timezone A timezone string, UTC offset or DateTimeZone object;
         *                                      defaults to the site timezone; this parameter is ignored
         *                                      if the `$datetime` parameter is a DatTime object.
         *
         * @return array An array of arguments that should be added to the WP_Query object.
         */
        public function filter_by_starts_on_or_after($datetime, $timezone = \null)
        {
        }
        /**
         * Filters events whose end date occurs after the provided date; fetch is not inclusive.
         *
         * @since 4.9
         *
         * @param string|DateTime|int $datetime A `strtotime` parse-able string, a DateTime object or
         *                                      a timestamp.
         * @param string|DateTimeZone $timezone A timezone string, UTC offset or DateTimeZone object;
         *                                      defaults to the site timezone; this parameter is ignored
         *                                      if the `$datetime` parameter is a DatTime object.
         *
         * @return array An array of arguments that should be added to the WP_Query object.
         */
        public function filter_by_ends_after($datetime, $timezone = \null)
        {
        }
        /**
         * Filters events whose duration overlaps a given Start and End date; fetch is inclusive
         * Will include multi-day events.
         *
         * @since 4.9
         * @since 4.9.11 Add the `$min_sec_overlap` parameter.
         *
         * @param string|DateTime|int $start_datetime  A `strtotime` parse-able string, a DateTime object or
         *                                             a timestamp.
         * @param string|DateTime|int $end_datetime    A `strtotime` parse-able string, a DateTime object or
         *                                             a timestamp.
         * @param string|DateTimeZone $timezone        A timezone string, UTC offset or DateTimeZone object;
         *                                             defaults to the site timezone; this parameter is ignored
         *                                             if the `$datetime` parameter is a DatTime object.
         * @param null|int            $min_sec_overlap The minimum overlap, in seconds, an event should have with the
         *                                             interval; defaults to at least a second.
         */
        public function filter_by_date_overlaps($start_datetime, $end_datetime, $timezone = \null, $min_sec_overlap = 1)
        {
        }
        /**
         * Filters events whose start date occurs between a set of dates; fetch is inclusive.
         *
         * @since 4.9
         *
         * @param string|DateTime|int $start_datetime A `strtotime` parse-able string, a DateTime object or
         *                                            a timestamp.
         * @param string|DateTime|int $end_datetime   A `strtotime` parse-able string, a DateTime object or
         *                                            a timestamp.
         * @param string|DateTimeZone $timezone       A timezone string, UTC offset or DateTimeZone object;
         *                                            defaults to the site timezone; this parameter is ignored
         *                                            if the `$datetime` parameter is a DatTime object.
         */
        public function filter_by_starts_between($start_datetime, $end_datetime, $timezone = \null)
        {
        }
        /**
         * Filters events whose end date occurs between a set of dates; fetch is inclusive.
         *
         * @since 4.9
         *
         * @param string|DateTime|int $start_datetime A `strtotime` parse-able string, a DateTime object or
         *                                            a timestamp.
         * @param string|DateTime|int $end_datetime   A `strtotime` parse-able string, a DateTime object or
         *                                            a timestamp.
         * @param string|DateTimeZone $timezone       A timezone string, UTC offset or DateTimeZone object;
         *                                            defaults to the site timezone; this parameter is ignored
         *                                            if the `$datetime` parameter is a DatTime object.
         */
        public function filter_by_ends_between($start_datetime, $end_datetime, $timezone = \null)
        {
        }
        /**
         * Filters events to include only those that match the provided multi day state.
         *
         * Please note that an event might be multi-day in its timezone but not in another;
         * this filter will make the check on the event times localized to the event timezone.
         * Furthermore the end of day cutoff is taken into account so, given a cutoff of 10PM
         * an event starting at 10:30PM and ending at 11AM is not multi-day.
         *
         * @since 4.9
         *
         * @param bool $multiday Whether to filter by events that are or not multi-day.
         */
        public function filter_by_multiday($multiday = \true)
        {
        }
        /**
         * Filters events to include only those events that appear on the given month’s calendar grid.
         *
         * @since 4.9
         *
         * @param int $month The month to display.
         * @param int $year  The year to display.
         *
         * @return array|null An array of arguments that should be added to the query or `null`
         *                    if the arguments are not valid (thus the filter will be ignored).
         */
        public function filter_by_on_calendar_grid($month, $year)
        {
        }
        /**
         * Filters events to include only those events that are running between two dates.
         *
         * An event is running between two dates when its start date or end date are between
         * the two dates.
         *
         * @since 4.9
         *
         * @param string|DateTime|int $start_datetime A `strtotime` parse-able string, a DateTime object or
         *                                            a timestamp.
         * @param string|DateTime|int $end_datetime   A `strtotime` parse-able string, a DateTime object or
         *                                            a timestamp.
         * @param string|DateTimeZone $timezone       A timezone string, UTC offset or DateTimeZone object;
         *                                            defaults to the site timezone; this parameter is ignored
         *                                            if the `$datetime` parameter is a DatTime object.
         *
         * @return array An array of arguments that should be added to the WP_Query object.
         */
        public function filter_by_runs_between($start_datetime, $end_datetime, $timezone = \null)
        {
        }
        /**
         * Filters events the given timezone.
         *
         * UTC, UTC+0, and UTC-0 should be parsed as the same timezone.
         *
         * @since 4.9
         *
         * @param string|DateTimeZone $timezone A timezone string or object.
         *
         * @return array An array of arguments to apply to the query.
         */
        public function filter_by_timezone($timezone)
        {
        }
        /**
         * Filters events whose start and end dates occur between a set of dates.
         *
         * Fetch is inclusive.
         *
         * @since 4.9
         *
         * @param string|DateTime|int $start_datetime A `strtotime` parse-able string, a DateTime object or
         *                                            a timestamp.
         * @param string|DateTime|int $end_datetime   A `strtotime` parse-able string, a DateTime object or
         *                                            a timestamp.
         * @param string|DateTimeZone $timezone       A timezone string, UTC offset or DateTimeZone object;
         *                                            defaults to the site timezone; this parameter is ignored
         *                                            if the `$datetime` parameter is a DatTime object.
         *
         * @return array An array of arguments that should be added to the WP_Query object.
         */
        public function filter_by_starts_and_ends_between($start_datetime, $end_datetime, $timezone = \null)
        {
        }
        /**
         * Filters events to include only those that match the provided featured state.
         *
         * @since 4.9
         *
         * @param bool $featured Whether the events should be featured or not.
         */
        public function filter_by_featured($featured = \true)
        {
        }
        /**
         * Filters events to include only those that match the provided hidden state.
         *
         * @since 4.9
         *
         * @param bool $hidden Whether the events should be hidden or not.
         */
        public function filter_by_hidden($hidden = \true)
        {
        }
        /**
         * Filters events by specific event organizer(s).
         *
         * @since 4.9
         *
         * @param int|WP_Post|array $organizer Organizer(s).
         */
        public function filter_by_organizer($organizer)
        {
        }
        /**
         * Filters events to include only those that match the provided hidden state.
         *
         * @since 4.9
         *
         * @param string            $linked_post_meta_key The linked post type meta key.
         * @param int|WP_Post|array $linked_post          Linked post(s).
         */
        public function filter_by_linked_post($linked_post_meta_key, $linked_post)
        {
        }
        /**
         * Filters events to include only those that match the provided sticky state.
         *
         * @since 4.9
         *
         * @param bool $sticky Whether the events should be sticky or not.
         */
        public function filter_by_sticky($sticky = \true)
        {
        }
        /**
         * Filters events by specific event venue(s).
         *
         * @since 4.9
         *
         * @param int|WP_Post|array $venue Venue(s).
         */
        public function filter_by_venue($venue)
        {
        }
        /**
         * Hook into WP_Query pre_get_posts and support negative menu_order values.
         *
         * @param WP_Query $query Query object.
         */
        public function support_negative_menu_order($query)
        {
        }
        /**
         * Filters events that have a cost relative to the given value based on the $comparator.
         * If Event Tickets is active, rather than looking at the event cost, all tickets attached
         * to the event should used to reference cost; the event cost meta will be ignored.
         *
         * Providing the symbol parameter should limit event results to only those events whose cost is relative to
         * the value AND the currency symbol matches. This way you can select posts that have a cost of 5 USD and
         * not accidentally get events with 5 EUR.
         *
         * @since 4.9
         *
         * @param float|array $value       The cost to use for the comparison; in the case of `BETWEEN`, `NOT BETWEEN`,
         *                                 `IN` and `NOT IN` operators this value should be an array.
         * @param string      $operator    The comparison operator to use for the comparison, one of `<`, `<=`, `>`, `>=`,
         *                                 `=`, `BETWEEN`, `NOT BETWEEN`, `IN`, `NOT IN`.
         * @param string      $symbol      The desired currency symbol or symbols; this symbol can be a currency ISO code,
         *                                 e.g. "USD" for U.S. dollars, or a currency symbol, e.g. "$".
         *                                 In the latter case results will include any event with the matching currency
         *                                 symbol, this might lead to ambiguous results.
         *
         * @return array An array of query arguments that will be added to the main query.
         *
         * @throws Tribe__Repository__Usage_Error If the comparison operator is not supported of is using the `BETWEEN`,
         *                                        `NOT BETWEEN` operators without passing a two element array `$value`.
         */
        public function filter_by_cost($value, $operator = '=', $symbol = \null)
        {
        }
        /**
         * Filters events that have a specific cost currency symbol.
         *
         * Events with a cost of `0` but a currency symbol set will be fetched when fetching
         * by their symbols.
         *
         * @since 4.9
         *
         * @param string|array $symbol One or more currency symbols or currency ISO codes. E.g.
         *                             "$" and "USD".
         *
         * @return array An array of arguments that will be added to the current query.
         */
        public function filter_by_cost_currency_symbol($symbol)
        {
        }
        /**
         * Filters events that have a cost between two given values.
         *
         * Cost search is inclusive.
         *
         * @since 4.9
         *
         * @param      float $low    The lower value of the search interval.
         * @param      float $high   The high value of the search interval.
         * @param string     $symbol The desired currency symbol or symbols; this symbol can be a currency ISO code,
         *                           e.g. "USD" for U.S. dollars, or a currency symbol, e.g. "$".
         *                           In the latter case results will include any event with the matching currency symbol,
         *                           this might lead to ambiguous results.
         *
         * @return array An array of query arguments that will be added to the main query.
         */
        public function filter_by_cost_between($low, $high, $symbol = \null)
        {
        }
        /**
         * Filters events that have a cost greater than the given value.
         *
         * Cost search is NOT inclusive.
         *
         * @since 4.9
         *
         * @param float  $value      The cost to use for the comparison.
         * @param string $symbol     The desired currency symbol or symbols; this symbol can be a currency ISO code,
         *                           e.g. "USD" for U.S. dollars, or a currency symbol, e.g. "$".
         *                           In the latter case results will include any event with the matching currency symbol,
         *                           this might lead to ambiguous results.
         *
         * @return array An array of query arguments that will be added to the main query.
         */
        public function filter_by_cost_greater_than($value, $symbol = \null)
        {
        }
        /**
         * Filters events that have a cost less than the given value.
         *
         * Cost search is NOT inclusive.
         *
         * @since 4.9
         *
         * @param float  $value      The cost to use for the comparison.
         * @param string $symbol     The desired currency symbol or symbols; this symbol can be a currency ISO code,
         *                           e.g. "USD" for U.S. dollars, or a currency symbol, e.g. "$".
         *                           In the latter case results will include any event with the matching currency symbol,
         *                           this might lead to ambiguous results.
         *
         * @return array An array of query arguments that will be added to the main query.
         */
        public function filter_by_cost_less_than($value, $symbol = \null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function filter_postarr_for_update(array $postarr, $post_id)
        {
        }
        /**
         * Filters and updates the event meta to make sure it makes sense.
         *
         * @since 4.9
         *
         * @param array $postarr The update post array, passed entirely for context purposes.
         * @param  int  $post_id The ID of the event that's being updated.
         *
         * @return array The filtered postarr array.
         */
        protected function filter_meta_input(array $postarr, $post_id = \null)
        {
        }
        /**
         *
         *
         * @since 4.9
         *
         * @param array $postarr
         * @param       $post_id
         *
         * @return array
         */
        protected function update_date_meta(array $postarr, $post_id = \null)
        {
        }
        /**
         * Filters the post array to make sure linked posts meta makes sense.
         *
         * @since 4.9
         *
         * @param array $postarr The update post array.
         *
         * @return array The filtered event post array.
         */
        protected function update_linked_post_meta(array $postarr)
        {
        }
        /**
         * Updates an event accessory meta and attributes.
         *
         * @since 4.9
         *
         * @param array $postarr The candidate post array for the update or insertion.
         * @param int   $post_id The ID of the event that is being updated.
         *
         * @return array The updated post array for update or insertion.
         */
        protected function update_accessory_meta(array $postarr, $post_id)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function filter_postarr_for_create(array $postarr)
        {
        }
        /**
         * Returns a filtered list of filters that are leveraging the event start and/or
         * end dates.
         *
         * @since 4.9
         *
         * @return array The filtered list of filters that are leveraging the event start and/or end dates
         */
        public function get_date_filters()
        {
        }
        /**
         * Whether the repository read operations have any kind of date-related filter
         * applied or not.
         *
         * @since 4.9
         *
         * @return bool Whether the repository read operations have any kind of date-related filter applied or not.
         */
        public function has_date_filters()
        {
        }
        /**
         * Filters events to include only those that start on a specific date.
         *
         * This method is a wrapper for the `filter_by_starts_between` one.
         *
         * @since 4.9
         *
         * @param      int|string|\DateTime $date     A date and time timestamp, string or object.
         * @param null                      $timezone The timezone that should be used to filter events, if not passed
         *                                            the site one will be used. This parameter will be ignored if the
         *                                            `$date` parameter is an object.
         *
         * @throws Exception If the date and/or timezone provided for the filtering are not valid.
         */
        public function filter_by_on_date($date, $timezone = \null)
        {
        }
        /**
         * Instructs the repository to use UTC dates and times for reading operations or not.
         *
         * By default the repository will use the events `_EventStartDateUTC` and `_EventEndDateUTC` meta keys
         * depending on the site Time Zone Settings.
         * This method allows overriding this behavior on a per-instance basis.
         *
         * @since 4.9
         *
         * @param bool $use_utc Whether ot use the UTC dates and times to read events or not. If `true` then the
         *                      `_EventStartDateUTC` and `_EventEndDateUTC` meta keys will be used, if `false` then the
         *                      `_EventStartDate` and `_EventEndDate` meta keys will be used.
         *
         * @return static This repository instance.
         */
        public function use_utc($use_utc)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function format_item($id)
        {
        }
        /**
         * Handles the `order_by` clauses for events
         *
         * @since 4.9.7
         *
         * @param string $order_by The key used to order events; e.g. `event_date` to order events by start date.
         */
        public function handle_order_by($order_by)
        {
        }
        /**
         * Overrides the base method to correctly handle the `order_by` clauses before.
         *
         * The Event repository handles ordering with some non trivial logic and some query filtering.
         * To avoid the "stacking" of `orderby` clauses and filters the query filters are added at the very last moment,
         * right before building the query.
         *
         * @since 4.9.7
         *
         * @return WP_Query The built query object.
         */
        protected function build_query_internally()
        {
        }
        /**
         * Applies start-date-based ordering to the query.
         *
         * @since 4.9.7
         * @since 4.9.11 Added the `$after` parameter.
         *
         * @param bool   $use_utc    Whether to use the events UTC start dates or their localized dates.
         * @param string $order      The order direction, either `ASC` or `DESC`; defaults to `null` to use the order
         *                           specified in the current query or default arguments.
         * @param bool   $after      Whether to append the order by clause to the ones managed by WordPress or not.
         *                           Defaults to `false`,to prepend them to the ones managed by WordPress.
         * @param bool   $override   Whether to override existing ORDER BY clauses or not; default to `true` to override
         *                           existing ORDER BY clauses.
         */
        protected function order_by_date($use_utc, $order = \null, $after = \false, $override = \true)
        {
        }
        /**
         * Applies Organizer-based ordering to the query.
         *
         * @since 4.9.7
         * @since 4.9.11 Added the `$after` parameter.
         *
         * @param string $order      The order direction, either `ASC` or `DESC`; defaults to `null` to use the order
         *                           specified in the current query or default arguments.
         * @param bool   $after      Whether to append the order by clause to the ones managed by WordPress or not.
         *                           Defaults to `false`,to prepend them to the ones managed by WordPress.
         * @param bool   $override   Whether to override existing ORDER BY clauses with this one or not; default to
         *                           `true` to override existing ORDER BY clauses.
         */
        protected function order_by_organizer($order = \null, $after = \false, $override = \true)
        {
        }
        /**
         * Applies Venue-based ordering to the query.
         *
         * @since 4.9.7
         * @since 4.9.11 Added the `$after` parameter.
         *
         * @param string $order      The order direction, either `ASC` or `DESC`; defaults to `null` to use the order
         *                           specified in the current query or default arguments.
         * @param bool   $after      Whether to append the order by clause to the ones managed by WordPress or not.
         *                           Defaults to `false`,to prepend them to the ones managed by WordPress.
         * @param bool   $override   Whether to override existing ORDER BY clauses with this one or not; default to
         *                           `true` to override existing ORDER BY clauses.
         */
        protected function order_by_venue($order = \null, $after = \false, $override = \true)
        {
        }
        /**
         * Overrides the base method to default the `order` to `ASC` for events.
         *
         * @since 4.9.7
         *
         * @param string      $order_by The key to order events by.
         * @param string|null $order    The order direction, either `ASC` or `DESC`; defaults to `ASC`.
         *
         * @return Tribe__Repository|Tribe__Repository__Read_Interface This repository instance.
         */
        public function order_by($order_by, $order = 'ASC')
        {
        }
        /**
         * Filters events by their "Hidden from Event Listings" status.
         *
         * This method assumes that we keep the following structure:
         * - if an event should be hidden its `_EventHideFromUpcoming` meta will be set to `yes` (or another truthy value).
         * - if an event should not be hidden its `_EventHideFromUpcoming` meta will not be set at all.
         *
         * @since 4.9.11
         *
         * @param bool $hidden Whether the events should be hidden from event listings or not.
         */
        public function filter_by_hidden_on_upcoming($hidden)
        {
        }
        /**
         * Sets up the query filters to order events by the duration (`_EventDuration`) custom field.
         *
         * @since 5.1.5
         *
         * @param string $order      The order direction, either `ASC` or `DESC`; defaults to `null` to use the order
         *                           specified in the current query or default arguments.
         * @param bool   $after      Whether to append the duration ORDER BY clause to the existing clauses or not;
         *                           defaults to `false` to prepend the duration clause to the existing ORDER BY
         *                           clauses.
         * @param bool   $override   Whether to override existing ORDER BY clauses with this one or not; default to
         *                           `true` to override existing ORDER BY clauses.
         */
        protected function order_by_duration($order = \null, $after = \false, $override = \true)
        {
        }
    }
    /**
     * The main ORM/Repository class for linked posts.
     *
     * @since 4.9
     */
    /**
     * Class Tribe__Events__Repositories__Linked_Posts
     *
     *
     * @since 4.9
     */
    class Tribe__Events__Repositories__Linked_Posts extends \Tribe__Repository
    {
        /**
         * The unique fragment that will be used to identify this repository filters.
         *
         * @var string
         */
        protected $filter_name = 'linked_posts';
        /**
         * Meta key used to store the Linked Post ID.
         *
         * @var string
         */
        protected $linked_id_meta_key;
        /**
         * Tribe__Events__Repositories__Linked_Posts constructor.
         *
         * Sets up the repository default parameters and schema.
         *
         * @since 4.9
         */
        public function __construct()
        {
        }
        /**
         * Filters linked post types by a specific event of set of events.
         *
         * @since 4.9
         *
         * @param int|WP_Post|array $event Post ID, Post Object, or an array of Post IDs or Objects.
         */
        public function filter_by_event($event)
        {
        }
    }
    /**
     * The main ORM/Repository class for organizers.
     *
     * @since 4.9
     */
    /**
     * Class Tribe__Events__Repositories__Organizer
     *
     *
     * @since 4.9
     */
    class Tribe__Events__Repositories__Organizer extends \Tribe__Events__Repositories__Linked_Posts
    {
        /**
         * The unique fragment that will be used to identify this repository filters.
         *
         * @var string
         */
        protected $filter_name = 'organizers';
        /**
         * Tribe__Events__Repositories__Organizer constructor.
         *
         * Sets up the repository default parameters and schema.
         *
         * @since 4.9
         */
        public function __construct()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function filter_postarr_for_create(array $postarr)
        {
        }
        /**
         * Filters a organizer query by ones that have associated events.
         *
         * @since 5.5.0
         *
         * @return array An array of query arguments that will be added to the main query.
         */
        public function filter_by_has_events()
        {
        }
        /**
         * Filters a organizer query by ones that DO NOT have associated events.
         *
         * @since 5.5.0
         *
         * @return array An array of query arguments that will be added to the main query.
         */
        public function filter_by_has_no_events()
        {
        }
    }
    /**
     * The main ORM/Repository class for venues.
     *
     * @since 4.9
     */
    /**
     * Class Tribe__Events__Repositories__Venue
     *
     *
     * @since 4.9
     */
    class Tribe__Events__Repositories__Venue extends \Tribe__Events__Repositories__Linked_Posts
    {
        /**
         * The unique fragment that will be used to identify this repository filters.
         *
         * @var string
         */
        protected $filter_name = 'venues';
        /**
         * Tribe__Events__Repositories__Venue constructor.
         *
         * Sets up the repository default parameters and schema.
         *
         * @since 4.9
         */
        public function __construct()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function filter_postarr_for_create(array $postarr)
        {
        }
        /**
         * Filters a venue query by ones that have associated events.
         *
         * @since 5.5.0
         *
         * @return array An array of query arguments that will be added to the main query.
         */
        public function filter_by_has_events()
        {
        }
        /**
         * Filters a venue query by ones that DO NOT have associated events.
         *
         * @since 5.5.0
         *
         * @return array An array of query arguments that will be added to the main query.
         */
        public function filter_by_has_no_events()
        {
        }
    }
    /**
     * Class Tribe__Events__Revisions__Post
     *
     * Handles the saving operations of a generic post revision.
     *
     * @since 4.2.5
     */
    class Tribe__Events__Revisions__Post
    {
        /**
         * @var WP_Post
         */
        protected $post;
        /**
         * Tribe__Events__Revisions__Post constructor.
         *
         * @param WP_Post $post
         */
        public function __construct(\WP_Post $post)
        {
        }
        /**
         * @param int|WP_Post $post
         *
         * @return Tribe__Events__Revisions__Post
         */
        public static function new_from_post($post)
        {
        }
        /**
         * Saves the revision.
         */
        public function save()
        {
        }
    }
    /**
     * Class Tribe__Events__Revisions__Event
     *
     * Handles the saving operations of an event revision.
     *
     * @since 4.2.5
     */
    class Tribe__Events__Revisions__Event extends \Tribe__Events__Revisions__Post
    {
        /**
         * @var Tribe__Events__Meta__Save
         */
        protected $meta_save;
        /**
         * Tribe__Events__Revisions__Event constructor.
         *
         * @param Tribe__Events__Meta__Save|null $meta_save
         */
        public function __construct(\WP_Post $post, \Tribe__Events__Meta__Save $meta_save = \null)
        {
        }
        /**
         * Saves the revision.
         */
        public function save()
        {
        }
    }
    /**
     * Class Tribe__Events__Revisions__Preview
     */
    class Tribe__Events__Revisions__Preview
    {
        /**
         * @var static
         */
        protected static $instance;
        /**
         * @var int
         */
        protected $event_id;
        /**
         * @var WP_Post
         */
        protected $latest_revision;
        /**
         * The class singleton constructor.
         *
         * @return Tribe__Events__Revisions__Preview
         */
        public static function instance()
        {
        }
        /**
         * Conditionally hooks the filters needed to fetch a revision meta data.
         */
        public function hook()
        {
        }
        /**
         * Intercepts a meta value request for a revision
         *
         * Returns the revision associated meta if present or the original event meta otherwise.
         *
         * @param mixed $original_value
         * @param int $object_id
         * @param string $meta_key
         * @param bool $single
         *
         * @return mixed
         */
        public function intercept_post_metadata($original_value, $object_id, $meta_key, $single)
        {
        }
        /**
         * @return bool
         */
        protected function is_saving_preview()
        {
        }
        /**
         * @return bool
         */
        protected function is_previewing()
        {
        }
        /**
         * @return int
         */
        protected function get_event_id()
        {
        }
    }
    /**
     * Rewrite Configuration Class
     * Permalinks magic Happens over here!
     */
    class Tribe__Events__Rewrite extends \Tribe__Rewrite
    {
        /**
         * Constant holding the transient key for delayed triggered flush from activation.
         *
         * If this value is updated make sure you look at the method in the main class of TEC.
         *
         * @see TEC::activate
         *
         * @since 5.0.0.1
         *
         * @var string
         */
        const KEY_DELAYED_FLUSH_REWRITE_RULES = '_tribe_events_delayed_flush_rewrite_rules';
        /**
         * After creating the Hooks on WordPress we lock the usage of the function
         * @var boolean
         */
        protected $hook_lock = \false;
        /**
         * A map providing each current base to its current locale translation.
         *
         * @since 5.1.1
         *
         * @var array<string,string>
         */
        protected $localized_bases = [];
        /**
         * Static Singleton Factory Method
         *
         * @return Tribe__Events__Rewrite
         */
        public static function instance($wp_rewrite = \null)
        {
        }
        /**
         * Generate the Rewrite Rules
         *
         * @param  WP_Rewrite $wp_rewrite WordPress Rewrite that will be modified, pass it by reference (&$wp_rewrite)
         */
        public function filter_generate(\WP_Rewrite $wp_rewrite)
        {
        }
        /**
         * Sets up the rules required by The Events Calendar.
         *
         * This should be called during tribe_events_pre_rewrite, which means other plugins needing to add rules
         * of their own can do so on the same hook at a lower or higher priority, according to how specific
         * those rules are.
         *
         * @param Tribe__Events__Rewrite $rewrite
         */
        public function generate_core_rules(\Tribe__Events__Rewrite $rewrite)
        {
        }
        /**
         * Filters the post permalink to take 3rd party plugins into account.
         *
         * @param  string $permalink Permalink for the post
         * @param  WP_Post $post Post Object
         *
         * @return string      Permalink with the language
         */
        public function filter_post_type_link($permalink, $post)
        {
        }
        /**
         * Get the base slugs for the Plugin Rewrite rules
         *
         * WARNING: Don't mess with the filters below if you don't know what you are doing
         *
         * @param  string $method Use "regex" to return a Regular Expression with the possible Base Slugs using l10n
         * @return object         Return Base Slugs with l10n variations
         */
        public function get_bases($method = 'regex')
        {
        }
        /**
         * Alias to `$this->add()` but adding the archive base first
         *
         * @param array|string $regex The regular expression to catch the URL
         * @param array  $args  The arguments in which the regular expression "alias" to
         *
         * @return Tribe__Events__Rewrite
         */
        public function archive($regex, $args = array())
        {
        }
        /**
         * Alias to `$this->add()` but adding the singular base first
         *
         * @param array|string $regex The regular expression to catch the URL
         * @param array  $args  The arguments in which the regular expression "alias" to
         *
         * @return Tribe__Events__Rewrite
         */
        public function single($regex, $args = array())
        {
        }
        /**
         * Alias to `$this->add()` but adding the taxonomy base first
         *
         * @param array|string $regex The regular expression to catch the URL
         * @param array  $args  The arguments in which the regular expression "alias" to
         *
         * @return Tribe__Events__Rewrite
         */
        public function tax($regex, $args = array())
        {
        }
        /**
         * Alias to `$this->add()` but adding the tag base first
         *
         * @param array|string $regex The regular expression to catch the URL
         * @param array  $args  The arguments in which the regular expression "alias" to
         *
         * @return Tribe__Events__Rewrite
         */
        public function tag($regex, $args = array())
        {
        }
        protected function remove_hooks()
        {
        }
        protected function add_hooks()
        {
        }
        /**
         * When dealing with flush of rewrite rules we cannot do it from the activation process due to not all classes being
         * loaded just yet. We flag a transient without expiration on activation so that on the next page load we flush the
         * permalinks for the website.
         *
         * @see TEC::activate()
         *
         * @since 5.0.0.1
         *
         * @return void
         */
        public function maybe_delayed_flush_rewrite_rules()
        {
        }
        /**
         * Prevent url_to_postid to run if on the main events page to avoid
         * query conflicts.
         *
         * @since 4.6.15
         *
         * @param string $url The URL from `url_to_postid()`
         * @see [94328]
         *
         * @return int|string $url
         */
        public function filter_url_to_postid($url)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function get_matcher_to_query_var_map()
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function get_localized_matchers()
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function get_dynamic_matchers(array $query_vars)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function get_post_types()
        {
        }
        /**
         * Overrides the base method, from common, to filter the parsed query variables and handle some cases related to
         * the `eventDisplay` query variable.
         *
         * {@inheritDoc}
         */
        public function parse_request($url, array $extra_query_vars = [], $force = \false)
        {
        }
        /**
         * Filters the parsed query vars to take the `eventDisplay` query var into account.
         *
         * When the query variables contain the `eventDisplay=default` variable and we have a different `eventDisplay` value
         * in the query arguments, then use the query arguments `eventDisplay`.
         *
         * @since 4.9.5
         *
         * @param array  $query_vars The query variables, as parsed from the parent method.
         * @param array  $unused     An array of extra query vars, passed as input into the parent method; not used.
         * @param string $url        The input URL.
         *
         * @return array The updated parsed query variables.
         */
        public function filter_rewrite_parse_query_vars(array $query_vars = [], array $unused = [], $url = '')
        {
        }
        /**
         * Adds an entry for an option controlled slug.
         *
         * E.g. the events archive can be changed from `/events` to somethings like `/trainings`.
         *
         * @since 4.9.13
         *
         * @param array  $localized_matchers An array of the current localized matchers.
         * @param string $default_slug       The default slug for the option controlled slug; e.g. `events` for the events
         *                                   archive.
         * @param string $option_name        The name of the Tribe option that stores the modified slug, if any.
         *
         * @return array An entry to add to the localized matchers; this will be an empty array if there's no need to add
         *               an entry..
         */
        protected function get_option_controlled_slug_entry(array $localized_matchers, $default_slug, $option_name)
        {
        }
    }
}
namespace Tribe\Events\Service_Providers {
    class Context extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 4.9.4
         */
        public function register()
        {
        }
        /**
         * Filters the context locations to add the ones used by The Events Calendar.
         *
         * @since 4.9.4
         *
         * @param array $locations The array of context locations.
         *
         * @return array The modified context locations.
         */
        public function filter_context_locations(array $locations = [])
        {
        }
    }
    /**
     * Class First_Boot
     *
     * @since   5.1.5
     *
     * @package Tribe\Events\Service_Providers
     */
    class First_Boot extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Hooks the filters required to set up The Events Calendar after a fresh install.
         *
         * @since 5.1.5
         */
        public function register()
        {
        }
        /**
         * Sets up The Events Calendar default options on first boot.
         *
         * @since 5.1.5
         */
        public function set_default_options()
        {
        }
    }
}
namespace {
    /**
     * Class Tribe__Events__Service_Providers__ORM
     *
     * @since 4.9
     */
    class Tribe__Events__Service_Providers__ORM extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         */
        public function register()
        {
        }
        /**
         * Handles next and previous links arguments when generated on a repository-managed query.
         *
         * The next and previous links are built by using the global query arguments and slightly altering them.
         * This approach, when done on the arguments provided by a repository generated query, might yield duplicated
         * meta queries that will, in turn, return wrong results.
         * The arguments will be already set in the arguments of the query.
         *
         * @since 4.9
         *
         * @param array          $args An array of query arguments that will be used to check if there are next or previous
         *                             events.
         * @param \WP_Query|null $query The query the arguments were taken from.
         *
         * @return array A filtered array of arguments where the date-related contents of the meta query are removed to
         *               avoid duplicates.
         */
        public function maybe_remove_date_meta_queries(array $args = [], \WP_Query $query = \null)
        {
        }
        /**
         * Ensures that if something hooks into `pre_get_posts` and alters the query post type
         * the `tribe_events` post type is preserved so event searches don't break.
         *
         * @todo: investigate if we need this for organizers/venues as well.
         *
         * @since 5.8.2
         *
         * @param  WP_Query $query
         *
         * @return  WP_Query modified query
         */
        public function ensure_event_post_types_on_search($query)
        {
        }
    }
    /**
     * Setup the Event Details Shortcode to be able to place the Details for a Event on other pages
     *
     * @since 4.1
     */
    class Tribe__Events__Shortcode__Event_Details
    {
        /**
         * Static Singleton Factory Method
         *
         * @since  4.1
         * @return Tribe__Events__Shortcode__Event_Details
         */
        public static function instance()
        {
        }
        /**
         * Add the necessary hooks as the correct moment in WordPress
         *
         * @since  4.1
         * @return  void
         */
        public function hook()
        {
        }
        /**
         * Creates the Shortcode tag based on the static variables $nspace and $slug
         *
         * @since 4.1
         * @return string
         */
        public function get_shortcode_tag()
        {
        }
        /**
         * Gets the Shortcode slug allowing it to be filtered
         *
         * @since 4.1
         * @return string
         */
        public function get_shortcode_slug()
        {
        }
        /**
         * This will be called at hook "init" to allow other plugins and themes to hook to shortcode easily
         *
         * @since 4.1
         * @return void
         */
        public function add_shortcode()
        {
        }
        /**
         * Actually create the shortcode output
         *
         * @since  4.1
         *
         * @param  array $args    The Shortcode arguments
         *
         * @return string
         */
        public function do_shortcode($args)
        {
        }
    }
}
namespace Tribe\Events\Taxonomy {
    /**
     * Class Event_Tag
     *
     * @since   5.16.0
     *
     * @package Tribe\Events\Taxonomy
     */
    class Event_Tag
    {
        /**
         * Filters the post tag action links displayed for each term in the terms list table.
         *
         * @since 5.16.0
         *
         * @param array<string|string> $actions An array of action links to be displayed.
         * @param WP_Term              $tag     Term object.
         *
         * @return array<string|string> An array of action links to be displayed
         */
        public function event_tag_actions($actions, \WP_Term $tag)
        {
        }
    }
    /**
     * Class Taxonomy_Provider
     *
     * @since   5.16.0
     *
     * @package Tribe\Events\Taxonomy
     */
    class Taxonomy_Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 5.16.0
         */
        public function register()
        {
        }
        /**
         * Adds the filters required for taxonomies.
         *
         * @since 5.16.0
         */
        protected function add_filters()
        {
        }
        /**
         * Filters the post tag action links displayed for each term in the terms list table.
         *
         * @since 5.16.0
         *
         * @param array<string|string> $actions An array of action links to be displayed.
         * @param WP_Term              $tag     Term object.
         *
         * @return array<string|string> An array of action links to be displayed
         */
        public function event_tag_actions($actions, \WP_Term $tag)
        {
        }
    }
}
namespace {
    /**
     * Template Factory
     *
     * The parent class for managing the view methods in core and addons
     *
     */
    class Tribe__Events__Template_Factory
    {
        /**
         * Length for excerpts on this template
         *
         * @var int
         **/
        protected $excerpt_length = 80;
        /**
         * Text for excerpt more on this template
         *
         * @var string
         **/
        protected $excerpt_more = '&hellip;';
        /**
         * Body class on this view
         *
         * @var string
         **/
        protected $body_class = '';
        /**
         * Static variable that holds array of vendor script handles, for adding to later deps.
         *
         * @static
         * @var array
         */
        protected $comments_off = \false;
        /**
         * Run include packages, set up hooks
         *
         **/
        public function __construct()
        {
        }
        /**
         * Set up hooks for this template
         *
         **/
        protected function hooks()
        {
        }
        /**
         * Filter the body class
         *
         * @param array $classes
         *
         * @return array
         */
        public function body_class($classes = [])
        {
        }
        /**
         * Add classes to events on this view
         *
         * @return array
         **/
        public function event_classes($classes)
        {
        }
        /**
         * Set up the notices for this template
         *
         **/
        public function set_notices()
        {
        }
        /**
         * Returns an array containing the search term, tax term and geographic term
         * for the current request. Each may be empty.
         *
         * @return array
         **/
        protected function get_search_terms()
        {
        }
        /**
         * Sets an appropriate no results found message. This may be overridden in child classes.
         */
        protected function nothing_found_notice()
        {
        }
        /**
         * Setup the view, query hijacking, etc. This happens right before the view file is included
         *
         **/
        public function setup_view()
        {
        }
        /**
         * Apply filter to the title tag
         *
         * @param string|array $title
         * @param string|null $sep
         *
         * @return mixed|void
         */
        public final function title_tag($title, $sep = \null)
        {
        }
        /**
         * Get the title for the view
         *
         * @param      $title
         * @param null $sep
         *
         * @return string
         */
        protected function get_title($title, $sep = \null)
        {
        }
        /**
         * Echo open tags for wrapper around view
         *
         **/
        public function view_wrapper_open()
        {
        }
        /**
         * Output an input to store the hash for the current query
         *
         **/
        public function add_input_hash()
        {
        }
        /**
         * Echo open tags for wrapper around view
         *
         **/
        public function view_wrapper_close()
        {
        }
        /**
         * Function to execute when ajax view is requested
         */
        public function ajax_response()
        {
        }
        /**
         * Shutdown the view, restore the query, etc. This happens right after the view file is included
         *
         **/
        public function shutdown_view()
        {
        }
        /**
         * Unhook all the hooks set up on this view
         *
         **/
        protected function unhook()
        {
        }
        /**
         * Add/remove filters to hide/show sensitive event info on password protected posts
         *
         * @param WP_Post $post
         *
         **/
        public function manage_sensitive_info($post)
        {
        }
        /**
         * Return an empty file as the comments template (to disable comments)
         *
         * @param string $template
         *
         * @return string
         **/
        public function remove_comments_template($template)
        {
        }
        /**
         * Limit the excerpt length on this template
         *
         * @param $length
         *
         * @return int
         */
        public function excerpt_length($length)
        {
        }
        /**
         * Set up the excerpt more text on this template
         *
         * @param int $more
         *
         * @return int
         */
        public function excerpt_more($more)
        {
        }
        /**
         * Check if comments are disabled on this view
         *
         * @param $option_value
         * @param $option_name
         *
         * @return int
         * @internal param int $more
         *
         */
        public function comments_off($option_value, $option_name)
        {
        }
        /**
         * Filters the post title as WordPress does in `get_the_title` to apply the password-protected prefix in
         * the context of AJAX requests.
         *
         * @since 5.0.0
         *
         * @param string      $title   The post title.
         * @param int|WP_Post $post_id The post ID, or object, to apply the filter for.
         *
         * @return string The filtered post title.
         */
        public function filter_get_the_title($title, $post_id = 0)
        {
        }
    }
    /**
     * @for     Single Event embed template
     * This file contains the hook logic required to create an effective embed view
     *
     * @package TribeEventsCalendar
     *
     */
    /**
     * Single event template class
     */
    class Tribe__Events__Template__Embed extends \Tribe__Events__Template_Factory
    {
        protected $body_class = 'events-embed';
        public function hooks()
        {
        }
        /**
         * Adds content to the embed head tag
         *
         * The embed header DOES NOT have wp_head() executed inside of it. Instead, any scripts/styles
         * are explicitly output
         */
        public function embed_head()
        {
        }
        /**
         * Set up the notices for this template
         **/
        public function set_notices()
        {
        }
    }
    /**
     * @for     Single Event Template
     * This file contains the hook logic required to create an effective single event view.
     *
     * @package TribeEventsCalendar
     *
     */
    /**
     * Single event template class
     */
    class Tribe__Events__Template__Single_Event extends \Tribe__Events__Template_Factory
    {
        protected $body_class = 'events-single';
        public function hooks()
        {
        }
        /**
         * Set up the notices for this template
         *
         **/
        public function set_notices()
        {
        }
        /**
         * Hook into filter and add our logic for adding body classes.
         *
         * @since 5.1.5
         *
         * @param boolean $add              Whether to add classes or not.
         * @param string  $queue            The queue we want to get 'admin', 'display', 'all'.
         *
         * @return boolean Whether body classes should be added or not.
         */
        public function body_classes_should_add($add, $queue)
        {
        }
    }
    /**
     * Templating functionality for Tribe Events Calendar
     */
    /**
     * Handle views and template files.
     */
    class Tribe__Events__Templates extends \Tribe__Templates
    {
        /**
         * Loads theme files in appropriate hierarchy: 1) child theme,
         * 2) parent template, 3) plugin resources. will look in the events/
         * directory in a theme and the views/ directory in the plugin
         *
         * @param string $template template file to search for
         * @param array  $args     additional arguments to affect the template path
         *                         - namespace
         *                         - plugin_path
         *                         - disable_view_check - bypass the check to see if the view is enabled
         *
         * @return string Template path.
         **/
        public static function getTemplateHierarchy($template, $args = [])
        {
        }
        /**
         * Convert the post_date_gmt to the event date for feeds
         *
         * @param $time the post_date
         * @param $d    the date format to return
         * @param $gmt  whether this is a gmt time
         *
         * @return int|string
         */
        public static function event_date_to_pubDate($time, $d, $gmt)
        {
        }
    }
    /**
     * Helpers for handling timezone based event datetimes.
     *
     * In our timezone logic, the term "local" refers to the locality of an event
     * rather than the local WordPress timezone.
     */
    class Tribe__Events__Timezones extends \Tribe__Timezones
    {
        public static function init()
        {
        }
        /**
         * Takes care of appending timezone information to the display of
         * event date/times.
         */
        protected static function display_timezones()
        {
        }
        /**
         * Adds the timezone to the event schedule information.
         *
         * @param string   $schedule_text
         * @param int|null $event_id
         *
         * @return string
         */
        public static function append_timezone($schedule_text, $event_id = \null)
        {
        }
        /**
         * Returns the timezone string for the specified event (if null it assumes the
         * current event where that can be determined).
         *
         * If no timezone has explicitly been set for the event, it returns the global
         * WordPress timezone string.
         *
         * @param int|null $event_id
         *
         * @return string
         */
        public static function get_event_timezone_string($event_id = \null)
        {
        }
        /**
         * Returns the event's timezone abbreviation if it can be determined, or else
         * falls back on the full timezone string/offset text (again, if known - if it
         * is not it will assume the global WP timezone setting).
         *
         * @param int|null $event_id
         *
         * @return string
         */
        public static function get_event_timezone_abbr($event_id = \null)
        {
        }
        /**
         * Returns a timestamp for the event start date that can be passed to tribe_format_date()
         * in order to produce the time in the correct timezone.
         *
         * @param int    $event_id
         * @param string $timezone
         *
         * @return int
         */
        public static function event_start_timestamp($event_id, $timezone = \null)
        {
        }
        /**
         * Returns a timestamp for the event end date that can be passed to tribe_format_date()
         * in order to produce the time in the correct timezone.
         *
         * @param int    $event_id
         * @param string $timezone
         *
         * @return int
         */
        public static function event_end_timestamp($event_id, $timezone = \null)
        {
        }
        /**
         * Returns a timestamp for the event date that can be passed to tribe_format_date()
         * in order to produce the time in the correct timezone.
         *
         * @param int    $event_id
         * @param string $type (expected to be 'Start' or 'End')
         * @param string $timezone
         *
         * @return int
         */
        protected static function get_event_timestamp($event_id, $type = 'Start', $timezone = \null)
        {
        }
        /**
         * Returns a string representing the timezone/offset currently desired for
         * the display of dates and times.
         *
         * @return string
         */
        public static function mode()
        {
        }
        /**
         * Confirms if the current timezone mode matches the $possible_mode.
         *
         * @param string $possible_mode
         *
         * @return bool
         */
        public static function is_mode($possible_mode)
        {
        }
    }
    /**
     * Run schema updates on plugin activation or updates
     */
    class Tribe__Events__Updater
    {
        protected $version_option = 'schema-version';
        protected $reset_version = '5.16.0';
        // when a reset() is called, go to this version
        protected $current_version = 0;
        public $capabilities;
        public function __construct($current_version)
        {
        }
        /**
         * We've had problems with the notoptions and
         * alloptions caches getting out of sync with the DB,
         * forcing an eternal update cycle
         *
         */
        protected function clear_option_caches()
        {
        }
        public function do_updates()
        {
        }
        public function update_version_option($new_version)
        {
        }
        /**
         * Returns an array of callbacks with version strings as keys.
         * Any key higher than the version recorded in the DB
         * and lower than $this->current_version will have its
         * callback called.
         *
         * This method has been deprecated in favor of a more testable public function
         *
         * @return array
         * @deprecated 4.0
         */
        protected function get_updates()
        {
        }
        /**
         * Getter for the private reset version.
         * Mainly for tests.
         *
         * @since 6.0.1
         *
         * @return string The reset version number.
         */
        public function get_reset_version() : string
        {
        }
        /**
         * Returns an array of callbacks with version strings as keys.
         * Any key higher than the version recorded in the DB
         * and lower than $this->current_version will have its
         * callback called.
         *
         * @return array
         */
        public function get_update_callbacks()
        {
        }
        /**
         * Returns an array of callbacks that should be called
         * every time the version is updated
         *
         * @return array
         */
        public function get_constant_update_callbacks()
        {
        }
        public function get_version_from_db()
        {
        }
        /**
         * Returns true if the version in the DB is less than the provided version
         *
         * @return boolean
         */
        public function is_version_in_db_less_than($version)
        {
        }
        /**
         * Returns true if this is a new install
         *
         * @return boolean
         */
        public function is_new_install()
        {
        }
        /**
         * Returns true if an update is required
         *
         * @return boolean
         */
        public function update_required()
        {
        }
        public function migrate_from_sp_events()
        {
        }
        public function migrate_from_sp_options()
        {
        }
        public function flush_rewrites()
        {
        }
        /**
         * Set the Capabilities for Events and Related Post Types.
         *
         * @since 5.1.1 - change method of calling set_capabilities.
         */
        public function set_capabilities()
        {
        }
        /**
         * Reset the $current_user global after capabilities have been changed
         *
         */
        public function reload_current_user()
        {
        }
        /**
         * Reset update flags. All updates past $this->reset_version will
         * run again on the next page load
         *
         */
        public function reset()
        {
        }
        /**
         * Make sure the tribeEnableViews option is always set
         *
         */
        public function set_enabled_views()
        {
        }
        /**
         * Bump the :30 min EOD cutoff option to the next full hour
         *
         */
        public function remove_30_min_eod_cutoffs()
        {
        }
        /**
         * Migrate the previous import mapping to the new naming and cleanup
         * the old.
         */
        public function migrate_import_option()
        {
        }
        /**
         * Update WordPress Custom Field Setting moved from Pro
         * only update setting if show|hide
         *
         * @since 4.6.23
         */
        public function migrate_wordpress_custom_field_option()
        {
        }
        /**
         * Update Event Status reason field from extension to a central field for both.
         *
         * @since 5.11.0
         */
        public function migrate_event_status_reason_field()
        {
        }
    }
    class Tribe__Events__Utils__Id_Generator
    {
        protected static $count = [];
        public static function generate_id($string, $group = 'default')
        {
        }
        public static function reset($group = \null)
        {
        }
    }
    class Tribe__Events__Utils__Radius
    {
        /**
         * get_radii
         *
         * Get the possible radius value by miles
         * or kilometers based on settings
         *
         * @static
         *
         * @return array|mixed|void
         */
        public static function get_radii()
        {
        }
        public static function get_abbreviation()
        {
        }
    }
    class Tribe__Events__Venue extends \Tribe__Events__Linked_Posts__Base
    {
        const POSTTYPE = 'tribe_venue';
        /**
         * Args for venue post type
         * @var array
         */
        public $post_type_args = ['public' => \false, 'rewrite' => ['slug' => 'venue', 'with_front' => \false], 'show_ui' => \true, 'show_in_menu' => \false, 'supports' => ['title', 'editor'], 'capability_type' => ['tribe_venue', 'tribe_venues'], 'map_meta_cap' => \true, 'exclude_from_search' => \true];
        /**
         * @var string
         */
        protected $meta_prefix = '_Venue';
        /**
         * @var string The meta key relating a post of the type managed by the class to events.
         */
        protected $event_meta_key = '_EventVenueID';
        /**
         * @var array A list of all the valid Venue keys, post fields and custom fields
         */
        public static $valid_venue_keys = ['Venue', 'Address', 'City', 'Province', 'State', 'StateProvince', 'Province', 'Zip', 'Phone'];
        /**
         * @var array A list of the valid meta keys for this linked post.
         */
        public static $meta_keys = ['Address', 'City', 'Province', 'State', 'StateProvince', 'Province', 'Zip', 'Phone'];
        public $venueTags = ['_VenueCountry', '_VenueAddress', '_VenueCity', '_VenueStateProvince', '_VenueState', '_VenueProvince', '_VenueZip', '_VenuePhone', '_VenueURL', '_VenueShowMap', '_VenueShowMapLink'];
        /**
         * @var string
         */
        public $singular_venue_label;
        /**
         * @var string
         */
        public $plural_venue_label;
        /**
         * @var string The lowercase singular venue label.
         */
        public $singular_venue_label_lowercase;
        /**
         * @var string The lowercase plural venue label.
         */
        public $plural_venue_label_lowercase;
        /**
         * @var Tribe__Events__Venue
         */
        protected static $instance;
        /**
         * Returns a singleton of this class
         *
         * @return Tribe__Events__Venue
         */
        public static function instance()
        {
        }
        /**
         * Tribe__Events__Venue constructor.
         */
        public function __construct()
        {
        }
        /**
         * Registers the post type
         */
        public function register_post_type()
        {
        }
        /**
         * Filters the post type args for the venue post type
         *
         * @since 4.2
         *
         * @param array  $args      Array of linked post type arguments
         * @param string $post_type Linked post type
         *
         * @return array
         */
        public function filter_linked_post_type_args($args, $post_type)
        {
        }
        /**
         * Allow users to specify their own singular label for Venues
         * @return string
         */
        public function get_venue_label_singular()
        {
        }
        /**
         * Allow users to specify their own plural label for Venues
         *
         * @return string
         */
        public function get_venue_label_plural()
        {
        }
        /**
         * Allow users to specify their own lowercase singular label for Venues
         * @return string
         */
        public function get_venue_label_singular_lowercase()
        {
        }
        /**
         * Allow users to specify their own lowercase plural label for Venues
         *
         * @return string
         */
        public function get_venue_label_plural_lowercase()
        {
        }
        /**
         * Filters the linked post id field
         *
         * @since 4.2
         *
         * @param string $id_field  Field name of the field that will hold the ID
         * @param string $post_type Post type of linked post
         */
        public function linked_post_id_field_index($id_field, $post_type)
        {
        }
        /**
         * Filters the linked post name field
         *
         * @since 4.2
         *
         * @param string $name_field Field name of the field that will hold the name
         * @param string $post_type  Post type of linked post
         *
         * @return string
         */
        public function linked_post_name_field_index($name_field, $post_type)
        {
        }
        public function meta_box_title($title, $post_type)
        {
        }
        /**
         * Include the venue editor meta box.
         *
         * @since 5.14.0
         */
        public static function add_post_type_metabox()
        {
        }
        /**
         * Adds a venue chooser to the write post page
         *
         * @since 6.0.0
         */
        public static function render_meta_box()
        {
        }
        /**
         * Filters the index that contains the linked post type data during form submission
         *
         * @since 4.2
         *
         * @param string $container Container index that holds submitted data
         * @param string $post_type Post type of linked post
         *
         * @return string
         */
        public function linked_post_type_container($container, $post_type)
        {
        }
        /**
         * Saves the event venue information passed via an event
         *
         * @param int|null $id          ID of event venue
         * @param array    $data        The venue data.
         * @param string   $post_type   Venue Post Type
         * @param string   $post_status The intended post status.
         *
         * @return mixed
         */
        public function save($id, $data, $post_type, $post_status)
        {
        }
        /**
         * Saves venue meta
         *
         * @param int   $venue_id The venue ID.
         * @param array $data     The venue data.
         *
         */
        public function save_meta($venue_id, $data)
        {
        }
        /**
         * Creates a new venue
         *
         * @param array  $data             The venue data.
         * @param string $post_status      the intended post status.
         * @param bool   $avoid_duplicates Whether a check to avoid the insertion of a duplicate venue
         *                                 should be made (`true`) or not (`false`).
         *
         * @return int
         */
        public function create($data, $post_status = 'publish', $avoid_duplicates = \false)
        {
        }
        /**
         * Check to see if any venue data set
         *
         * @param array $data the venue data.
         *
         * @return bool If there is ANY venue data set, return true.
         */
        public function has_venue_data($data)
        {
        }
        /**
         * Updates an venue
         *
         * @param int   $venue_id The venue ID to update.
         * @param array $data     The venue data.
         *
         * @return int The updated venue post ID
         */
        public function update($venue_id, $data)
        {
        }
        /**
         * Deletes a venue
         *
         * @param int  $venue_id     The venue ID to delete.
         * @param bool $force_delete Whether or not to bypass the trash when deleting the venue (see wp_delete_post's
         *                           $force_delete param)
         *
         */
        public function delete($venue_id, $force_delete = \false)
        {
        }
        /**
         * Returns the default venue
         *
         * @since 4.2.4
         *
         * @param int    $default   Default venue ID
         * @param string $post_type Post type of form being output
         */
        public function linked_post_default($default, $post_type)
        {
        }
        public function linked_post_new_form($post_type)
        {
        }
        /**
         * Returns an array of post fields that should be used to spot possible duplicates.
         *
         * @return array An array of post fields to matching strategy in the format
         *               [ <post_field> => [ 'match' => <strategy> ] ]
         *
         * @see Tribe__Duplicate__Strategy_Factory for supported strategies
         */
        protected function get_duplicate_post_fields()
        {
        }
        /**
         * Returns an array of post custom fields that should be used to spot possible duplicates.
         *
         * @return array An array of post fields to matching strategy in the format
         *               [ <custom_field> => [ 'match' => <strategy> ] ]
         *
         * @see Tribe__Duplicate__Strategy_Factory for supported strategies
         */
        protected function get_duplicate_custom_fields()
        {
        }
        /**
         * {@inheritDoc}
         */
        public static function get_fetch_callback($event)
        {
        }
        /**
         *  Returns a string version of the full address of an event
         *
         * @param int|WP_Post The post object or post id.
         *
         * @return string The event's address.
         */
        public static function get_address_full_string($post_id = \null)
        {
        }
        /**
         * Returns a string version of the full address of an event.
         *
         * @since 5.16.0
         *
         * @see Tribe__Events__Main->fullAddressString()
         *
         * @param int|WP_Post|null $event The post object or post id.
         *
         * @return string The event venue's address. Empty string if the event or venue isn't found.
         */
        public static function generate_string_address($event = \null)
        {
        }
        /**
         * Add edit link to admin bar when viewing the tribe_venue post type archive.
         *
         * @since 5.16.3
         *
         * @param WP_Admin_Bar $wp_admin_bar The admin bar object.
         */
        public function edit_venue_admin_bar_menu_link($wp_admin_bar)
        {
        }
        /**
         * Updates the page title on the venue single page to include the venue title.
         *
         * @param string      $new_title The modified page title.
         * @param string      $title     The original page title.
         * @param string|null $sep       The separator character.
         *
         * @return string The modified page title.
         */
        public function update_venue_title($new_title, $title, $sep = \null)
        {
        }
    }
}
namespace Tribe\Events\Views\V2 {
    /**
     * Register
     *
     * @since 4.9.2
     *
     * @package Tribe\Events\Views\V2
     */
    class Assets extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Key for this group of assets.
         *
         * @since 4.9.4
         *
         * @var string
         */
        public static $group_key = 'events-views-v2';
        /**
         * Key for this group of assets.
         *
         * @since 5.8.2
         *
         * @var string
         */
        public static $single_group_key = 'events-views-v2-single';
        /**
         * Key for the widget group of assets.
         *
         * @since 5.3.0
         *
         * @var string
         */
        public static $widget_group_key = 'events-views-v2-widgets';
        /**
         * Caches the result of the `should_enqueue_frontend` check.
         *
         * @since 4.9.13
         *
         * @var bool
         */
        protected $should_enqueue_frontend;
        /**
         * Applies a filter to allow users that are experiencing issues w/ the Views v2 datepicker to load
         * it in no-conflict mode.
         *
         * When loaded in no-conflict mode, then the jquery-ui-datepicker script bundled with WordPress will be
         * loaded before it.
         *
         * @since 5.3.0
         *
         * @return bool Whether to load Views v2 datepicker in no conflict mode, loading the jquery-ui-datepicker
         *              script before it, or not
         */
        protected static function datepicker_no_conflict_mode()
        {
        }
        /**
         * Binds and sets up implementations.
         *
         * @since 4.9.2
         */
        public function register()
        {
        }
        /**
         * Removes assets from View V1 when V2 is loaded.
         *
         * @since 4.9.5
         *
         * @return void
         */
        public function disable_v1()
        {
        }
        /**
         * Checks if we should enqueue frontend assets for the V2 views.
         *
         * @since 4.9.4
         * @since 4.9.13 Cache the check value.
         *
         * @return bool $should_enqueue Should the frontend assets be enqueued.
         */
        public function should_enqueue_frontend()
        {
        }
        /**
         * Checks if we are using skeleton setting for Style.
         *
         * @since  4.9.11
         *
         * @return bool
         */
        public function is_skeleton_style()
        {
        }
        /**
         * Verifies if we don't have skeleton active, which will trigger true for the two other possible options.
         * Options:
         * - `full` - Deprecated
         * - `tribe`  - All styles load
         *
         * @since  4.9.11
         *
         * @return bool
         */
        public function should_enqueue_full_styles()
        {
        }
        /**
         * Verifies if we are on V2 and on Event Single in order to enqueue the override styles for Single Event.
         *
         * @since 5.5.0
         *
         * @return boolean
         */
        public function should_enqueue_single_event_styles()
        {
        }
        /**
         * Checks if we are on V2, on Event Single and if we are using the Block Editor in order to enqueue the block editor reskin styles for Single Event.
         *
         * @since 5.10.0
         *
         * @return boolean
         */
        public function should_enqueue_single_event_block_editor_styles()
        {
        }
        /**
         * Load assets on the add or edit pages of the block editor only.
         *
         * @since  5.14.1
         *
         * @return bool
         */
        public function should_enqueue_admin()
        {
        }
    }
    /**
     * Class Customizer
     *
     * @since   5.3.1
     * @deprecated 5.9.0
     *
     * @package Tribe\Events\Views\V2
     */
    class Customizer
    {
        /**
         * Adds new settings/controls to the Global Elements section via the hook in common.
         *
         * @since 5.3.1
         *
         * @param \Tribe__Customizer__Section $section    The Global Elements Customizer section.
         * @param WP_Customize_Manager        $manager    The settings manager.
         * @param \Tribe__Customizer|null     $customizer The Customizer object.
         */
        public function include_global_elements_settings($section, $manager, $customizer = null)
        {
        }
        /**
         * Adds new settings/controls to the Single Events section via the hook in common.
         *
         * @since 5.3.1
         *
         * @param \Tribe__Customizer__Section $section    The Single Events Customizer section.
         * @param WP_Customize_Manager        $manager    The settings manager.
         * @param \Tribe__Customizer|null     $customizer The Customizer object.
         */
        public function include_single_event_settings($section, $manager, $customizer = null)
        {
        }
        /**
         * Filters the Global Elements section CSS template to add Views v2 related style templates to it.
         *
         * @since 5.3.1
         *
         * @param string                      $css_template The CSS template, as produced by the Global Elements.
         * @param \Tribe__Customizer__Section $section      The Global Elements section.
         * @param \Tribe__Customizer|null     $customizer   The current Customizer instance.
         *
         * @return string The filtered CSS template.
         */
        public function filter_global_elements_css_template($css_template, $section, $customizer = null)
        {
        }
        /**
         * Filters the Single Event section CSS template to add Views v2 related style templates to it.
         *
         * @since 5.3.1
         *
         * @param string                      $css_template The CSS template, as produced by the Single Event.
         * @param \Tribe__Customizer__Section $section      The Single Event section.
         * @param \Tribe__Customizer|null     $customizer   The current Customizer instance.
         *
         * @return string The filtered CSS template.
         */
        public function filter_single_event_css_template($css_template, $section, $customizer = null)
        {
        }
        /**
         * Check whether the Single Event styles overrides can be applied
         *
         * @return false/true
         */
        public function should_add_single_view_v2_styles()
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Customizer {
    /**
     * Class managing Configuration for the v2 Customizer.
     *
     * @package Tribe\Events\Views\V2\Customizer
     * @since   5.9.0
     */
    class Configuration
    {
        /**
         * Return the variables to be localized.
         * localized under `tribe_events_customizer_live_preview_js_config` in Hooks.php
         *
         * @since 5.9.0
         *
         * @return array
         */
        public function localize()
        {
        }
        /**
         * Gets the selector for Customizer styles
         * based on filters for applying to shortcodes and widgets.
         *
         * @since 5.9.0
         *
         * @return string The selector string.
         */
        public static function get_selector()
        {
        }
    }
    /**
     * Class Hooks
     *
     * @since 5.7.0
     *
     * @package Tribe\Events\Views\V2\Customizer
     */
    class Hooks extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 5.7.0
         */
        public function register()
        {
        }
        /**
         * Register any actions for the Customizer
         *
         * @since 5.9.0
         *
         * @return void
         */
        public function add_actions()
        {
        }
        /**
         * Register any filters for the Customizer
         *
         * @since 5.9.0
         *
         * @return void
         */
        public function add_filters()
        {
        }
        /**
         * Add an identifying class to the body - but only when inside the Customizer preview.
         *
         * @since 5.11.0
         *
         * @param array<string> $classes The list of body classes to be applied.
         *
         * @return array<string> $classes The modified list of body classes to be applied.
         */
        public function body_class($classes)
        {
        }
        /**
         * Enqueues the js for our v2 Customizer controls.
         *
         * @since 5.9.0
         *
         * @return void
         */
        public function enqueue_customizer_control_scripts()
        {
        }
        /**
         * Enqueues Customizer controls styles specific to Views v2 components.
         *
         * @since 5.9.0
         */
        public function enqueue_customizer_controls_styles()
        {
        }
        /**
         * Add views stylesheets to customizer styles array to check.
         * Remove unused legacy stylesheets.
         *
         * @since 5.1.1
         *
         * @param array<string> $sheets Array of sheets to search for.
         * @param string        $css_template String containing the inline css to add.
         *
         * @return array Modified array of sheets to search for.
         */
        public function customizer_inline_stylesheets($sheets, $css_template)
        {
        }
        /**
         * Changes the action the Customizer should use to try and print inline styles to print the inline
         * styles in the footer.
         *
         * @since 5.7.0
         *
         * @return string The action the Customizer should use to print inline styles.
         */
        public function print_inline_styles_in_footer()
        {
        }
    }
    /**
     * Class Notice
     *
     * @since 5.9.0
     *
     * @package Tribe\Events\Views\V2\Customizer
     */
    class Notice
    {
        /**
         * Extension hooks and initialization; exits if the extension is not authorized by Tribe Common to run.
         *
         * @since  5.9.0
         */
        public function hook()
        {
        }
        /**
         * Checks if we have the TEC Inherit Theme Fonts Extension active
         *
         * @since  5.9.0
         *
         * @return boolean
         */
        public function should_display()
        {
        }
        /**
         * HTML for the notice.
         *
         * @since  5.9.0
         *
         * @return string
         */
        public function display_notice()
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Customizer\Section {
    /**
     * Month View
     *
     * @since 5.8.0
     */
    final class Events_Bar extends \Tribe__Customizer__Section
    {
        /**
         * ID of the section.
         * Namespaced to avoid collisions.
         *
         * @since 5.8.0
         *
         * @access public
         * @var string
         */
        public $ID = 'tec_events_bar';
        /**
         * Allows section CSS to be loaded in order for overrides.
         *
         * @var integer
         */
        public $queue_priority = 15;
        /**
         * This method will be executed when the Class is Initialized.
         *
         * @since 5.8.0
         */
        public function setup()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setup_defaults()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setup_arguments()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setup_content_settings()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setup_content_headings()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setup_content_controls()
        {
        }
        /**
         * Grab the CSS rules template
         *
         * @param string $css_template The Customizer CSS string/template.
         *
         * @return string The Customizer CSS string/template, with v2 Month View styles added.
         */
        public function get_css_template($css_template)
        {
        }
    }
    /**
     * Global Elements
     *
     * @since 5.9.0
     */
    final class Global_Elements extends \Tribe__Customizer__Section
    {
        /**
         * ID of the section.
         *
         * @since 5.9.0
         *
         * @access public
         * @var string
         */
        public $ID = 'global_elements';
        /**
         * Allows sections to be loaded in order for overrides.
         *
         * @var integer
         */
        public $queue_priority = 15;
        /**
         * This method will be executed when the Class is Initialized.
         *
         * @since 5.9.0
         */
        public function setup()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setup_arguments()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setup_defaults()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setup_content_settings()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setup_content_headings()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setup_content_controls()
        {
        }
        /**
         * Filters the Global Elements section CSS template to add Views v2 related style templates to it.
         *
         * Please note: the order is important for proper cascading overrides!
         *
         * @since 5.3.1
         *
         * @param string                      $css_template The current CSS template, as produced by the Section.
         * @param \Tribe__Customizer__Section $section      The Global Elements section.
         * @param \Tribe__Customizer          $customizer   The current Customizer instance.
         *
         * @return string The filtered CSS template.
         */
        public function get_css_template($css_template)
        {
        }
    }
    /**
     * Month View
     *
     * @since 5.7.0
     */
    final class Month_View extends \Tribe__Customizer__Section
    {
        /**
         * ID of the section.
         *
         * @since 5.7.0
         *
         * @access public
         * @var string
         */
        public $ID = 'month_view';
        /**
         * Allows section CSS to be loaded in order for overrides.
         *
         * @var integer
         */
        public $queue_priority = 25;
        /**
         * This method will be executed when the Class is Initialized.
         *
         * @since 5.7.0
         */
        public function setup()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setup_defaults()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setup_arguments()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setup_content_headings()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setup_content_settings()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setup_content_controls()
        {
        }
        /**
         * Grab the CSS rules template
         *
         * @param string $css_template The Customizer CSS string/template.
         *
         * @return string The Customizer CSS string/template, with v2 Month View styles added.
         */
        public function get_css_template($css_template)
        {
        }
        /* Deprecated */
        /**
         * Gets the link to the a setting in the TEC Customizer Global Elements.
         *
         * @since 5.7.0
         * @deprecated 5.8.0
         *
         * @param string $setting    The sting setting "slug" to link to.
         * @param string $label_text The translated label text for the link.
         *
         * @return string The HTML link element.
         */
        public function get_global_element_link($setting, $label_text)
        {
        }
        /**
         * Gets the link to the event background color setting in Customizer.
         *
         * @since 5.8.0
         * @deprecated 5.8.0
         *
         * @return string The HTML link element.
         */
        public function get_general_settings_link()
        {
        }
        /**
         * Gets the link to the event background color setting in Customizer.
         *
         * @since 5.8.0
         * @deprecated 5.8.0
         *
         * @return string The HTML link element.
         */
        public function get_events_background_link()
        {
        }
        /**
         * Gets the link to the accent color setting in Customizer.
         *
         * @since 5.8.0
         * @deprecated 5.8.0
         *
         * @return string The HTML link element.
         */
        public function get_accent_color_link()
        {
        }
    }
    /**
     * Single Event
     *
     * @since 5.9.0
     */
    final class Single_Event extends \Tribe__Customizer__Section
    {
        /**
         * ID of the section.
         *
         * @since 5.9.0
         *
         * @access public
         * @var string
         */
        public $ID = 'single_event';
        /**
         * Allows sections to be loaded in order for overrides.
         *
         * @var integer
         */
        public $queue_priority = 20;
        /**
         * This method will be executed when the Class is Initialized.
         *
         * @since 5.9.0
         */
        public function setup()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setup_arguments()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setup_defaults()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setup_content_settings()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setup_content_headings()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setup_content_controls()
        {
        }
        /**
         * Filters the Single Event section CSS template to add Views v2 related style templates to it.
         *
         * @since 5.3.1
         *
         * @param string                      $css_template The CSS template, as produced by the Single Event.
         *
         * @return string The filtered CSS template.
         */
        public function get_css_template($css_template)
        {
        }
        /**
         * Check whether the Single Event styles overrides can be applied
         * Deprecated:  The new Customizer applies to both, this function was moved to src/Tribe/Views/V2/Customizer.php
         *              for backwards-compatibility.
         *
         * @deprecated 5.9.0
         *
         * @return false/true
         */
        public function should_add_single_view_v2_styles()
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Customizer {
    /**
     * Class Service_Provider
     *
     * @since   5.7.0
     *
     * @package Tribe\Events\Views\V2\Customizer
     */
    class Service_Provider extends \TEC\Common\Contracts\Service_Provider
    {
        public function register()
        {
        }
        public function register_hooks()
        {
        }
    }
}
namespace Tribe\Events\Views\V2 {
    /**
     * Class Hooks
     *
     * @since 4.9.2
     *
     * @package Tribe\Events\Views\V2
     */
    class Hooks extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 4.9.2
         */
        public function register()
        {
        }
        /**
         * Adds the actions required by each Views v2 component.
         *
         * @since 4.9.2
         */
        protected function add_actions()
        {
        }
        /**
         * Enqueue Customizer styles for the single event block editor screen.
         *
         * @since 5.14.1
         */
        public function enqueue_customizer_in_block_editor()
        {
        }
        /**
         * Adds the filters required by each Views v2 component.
         *
         * @since 4.9.2
         */
        protected function add_filters()
        {
        }
        /**
         * Includes includes edge cases for filtering when we need to manually overwrite theme's read
         * more link when excerpt is cut programmatically.
         *
         * @see   tribe_events_get_the_excerpt
         *
         * @since 4.9.11
         *
         * @return void
         */
        public function action_include_filters_excerpt()
        {
        }
        /**
         * Fires to deregister v1 assets correctly.
         *
         * @since 4.9.11
         *
         * @return void
         */
        public function action_disable_assets_v1()
        {
        }
        /**
         * Initializes the legacy Views for Single and Embed.
         *
         * @since 6.0.0
         */
        public function action_initialize_legacy_views()
        {
        }
        /**
         * Fires to deregister v1 assets correctly for shortcodes.
         *
         * @since 4.9.11
         *
         * @return void
         */
        public function action_disable_shortcode_assets_v1()
        {
        }
        /**
         * Fires when common is loaded.
         *
         * @since 4.9.2
         */
        public function on_tribe_common_loaded()
        {
        }
        /**
         * Fires when WordPress head is printed.
         *
         * @since 4.9.2
         */
        public function on_wp_head()
        {
        }
        /**
         * Fires when Tribe rewrite rules are processed.
         *
         * @since 4.9.2
         *
         * @param  \Tribe__Events__Rewrite  $rewrite  An instance of the Tribe rewrite abstraction.
         */
        public function on_tribe_events_pre_rewrite(\Tribe__Rewrite $rewrite)
        {
        }
        /**
         * Filters the template included file.
         *
         * @since 4.9.2
         *
         * @param  string  $template  The template included file, as found by WordPress.
         *
         * @return string The template file to include, depending on the query and settings.
         */
        public function filter_template_include($template)
        {
        }
        /**
         * Registers the REST endpoints that will be used to return the Views HTML.
         *
         * @since 4.9.2
         */
        public function register_rest_endpoints()
        {
        }
        /**
         * Filters the posts before the query runs but after its SQL and arguments are finalized to
         * inject posts in it, if needed.
         *
         * @since 4.9.2
         *
         * @param  null|array  $posts The posts to filter, a `null` value by default or an array if set by other methods.
         * @param  \WP_Query|null  $query The query object to (maybe) control and whose posts will be populated.
         *
         * @return array An array of injected posts, or the original array of posts if no post injection is required.
         */
        public function filter_posts_pre_query($posts = null, \WP_Query $query = null)
        {
        }
        /**
         * Filters the publicly available query variables to add the ones supported by Views v2.
         *
         * To keep back-compatibility with v1 we're registering the same query vars making this method
         * a copy of the original `Tribe__Events__Main::eventQueryVars` one.
         *
         * @since 4.9.2
         *
         * @param  array  $query_vars  The list of publicly available query variables.
         *
         * @return array The filtered list of publicly available query variables.
         */
        public function filter_query_vars(array $query_vars = [])
        {
        }
        /**
         * Include the The Events calendar mapping for query args, into to canonical url.
         *
         * @since 4.9.5
         *
         * @param array          $map  Associative array following the format: `[ 'eventDate' => [ 'event-date', 'event_date', 'tribe-bar-date' ], ]`.
         * @param string         $url  The input URL to resolve to a canonical one.
         * @param Tribe__Rewrite $this This rewrite object.
         *
         * @return  array
         */
        public function filter_map_canonical_query_args($map, $url, $rewrite)
        {
        }
        /**
         * Filters the body classes to add theme compatibility ones.
         *
         * @since 4.9.3
         *
         * @param  array $classes Classes that are been passed to the body.
         *
         * @return array $classes
         */
        public function filter_body_classes($classes)
        {
        }
        /**
         * Add body classes.
         *
         * @since 5.1.5
         *
         * @return void
         */
        public function add_body_classes()
        {
        }
        /**
         * Contains hooks to the logic for if this object's classes should be added to the queue.
         *
         * @since 5.1.5
         *
         * @param boolean $add   Whether to add the class to the queue or not.
         * @param array   $class The array of body class names to add.
         * @param string  $queue The queue we want to get 'admin', 'display', 'all'.
         * @return boolean
         */
        public function body_class_should_add_to_queue($add, $class, $queue)
        {
        }
        /**
         * Logic for if body classes should be added.
         *
         * @since 5.1.5
         *
         * @param boolean $add   Whether to add classes or not.
         * @param string  $queue The queue we want to get 'admin', 'display', 'all'.
         *
         * @return boolean Whether to add classes or not.
         */
        public function body_classes_should_add($add, $queue)
        {
        }
        /**
         * Filter the plural events label for Featured V2 Views.
         *
         * @since 5.1.5
         *
         * @param string  $label   The plural events label as it's been generated thus far.
         * @param Context $context The context used to build the title, it could be the global one, or one externally
         *                         set.
         *
         * @return string the original label or updated label for virtual archives.
         */
        public function filter_wp_title_plural_events_label($label, \Tribe__Context $context)
        {
        }
        /**
         * Filters the `wp_title` template tag.
         *
         * @since 4.9.10
         *
         * @param      string $title The current title value.
         * @param string|null $sep The separator char, or sequence, to use to separate the page title from the blog one.
         *
         * @return string The modified page title, if required.
         */
        public function filter_wp_title($title, $sep = null)
        {
        }
        /**
         * Filters the `pre_get_document_title` to prevent conflicts when other plugins
         * modify this initial value on our pages.
         *
         * @since 5.0.0
         *
         * @param string $title The current title value.
         *
         * @return string The current title or empty string.
         */
        public function pre_get_document_title($title)
        {
        }
        /**
         * Filters the `wp_get_document_title` template tag.
         *
         * This is the template tag introduced in WP 4.4 to get the page title.
         *
         * @since 4.9.10
         *
         * @param string $title The page title.
         *
         * @return string The modified page title, if required.
         */
        public function filter_document_title_parts($title)
        {
        }
        /**
         * Filters the `excerpt_length`.
         *
         * @since 4.9.10
         *
         * @param int $length The excerpt length.
         *
         * @return int The modified excerpt length, if required.
         */
        public function filter_excerpt_length($length)
        {
        }
        /**
         * Filters the `excerpt_more`.
         *
         * @since 4.9.10
         *
         * @param string $link The excerpt read more link.
         *
         * @return string The modified excerpt read more link, if required.
         */
        public function filter_excerpt_more($link)
        {
        }
        /**
         * Filters the `admin_post_thumbnail_html` to add image aspect ratio recommendation.
         *
         * @since 4.9.11
         *
         * @param string $html The HTML for the featured image box.
         *
         * @return string The modified html, if required.
         */
        public function filter_admin_post_thumbnail_html($html)
        {
        }
        /**
         * Filters the `redirect_canonical` to prevent any redirects on embed URLs.
         *
         * @since 4.9.13
         *
         * @param mixed      $redirect_url URL which we will redirect to.
         * @param string|int $original_url The original URL if this method runs on the `redirect_canonical` filter, else
         *                                 the redirect status (e.g. `301`) if this method runs in the context of the
         *                                 `wp_redirect` filter.
         *
         * @return string A redirection URL, or `false` to prevent redirection.
         */
        public function filter_redirect_canonical($redirect_url = null, $original_url = null)
        {
        }
        /**
         * Modifies the Live update tooltip properly.
         *
         * @since  4.9.13
         *
         * @param  array $fields  Fields that were passed for the Settings tab.
         *
         * @return array          Fields after changing the tooltip.
         */
        public function filter_general_settings_tab_live_update($fields)
        {
        }
        /**
         * Registers The Events Calendar with the views/overrides update checker.
         *
         * @since  4.9.13
         *
         * @param array $plugins List of plugins to be checked.
         *
         * @return array
         */
        public function filter_register_template_updates(array $plugins = [])
        {
        }
        /**
         * Suppress v1 query filters on a per-query basis, if required.
         *
         * @since 4.9.11
         *
         * @param \WP_Query $query The current WordPress query object.
         */
        public function parse_query($query)
        {
        }
        /**
         * Adds the period repository to the map of available repositories.
         *
         * @since 4.9.13
         *
         * @param array $repository_map The current repository map.
         *
         * @return array The filtered repository map.
         */
        public function add_period_repository(array $repository_map, $repository, array $args = [])
        {
        }
        /**
         * Flush rewrite rules after the site language setting changes.
         *
         * @since 4.9.13
         *
         * @param string $option The option name that was updated.
         * @param string $old    The option old value.
         * @param string $new    The option updated value.
         */
        public function action_save_wplang($option, $old, $new)
        {
        }
        /**
         * Filters rewrite rules to modify and update them for Views V2.
         *
         * @since 5.0.0
         *
         * @param array  $bases  An array of rewrite bases that have been generated.
         * @param string $method The method that's being used to generate the bases; defaults to `regex`.
         *
         * @return array<string,array> An array of rewrite rules. Modified, if required, to support Views V2.
         */
        public function filter_rewrite_i18n_slugs_raw($bases, $method)
        {
        }
        /**
         * Fires to manage sensitive information on password protected posts.
         *
         * @since 5.0.0
         *
         * @param \WP_Post|int $post The event post ID or object currently being decorated.
         */
        public function manage_sensitive_info($post)
        {
        }
        /**
         * Include the promo banner after the after component.
         *
         * @since 5.1.5
         *
         * @param string   $file     Complete path to include the PHP File.
         * @param array    $name     Template name.
         * @param Template $template Current instance of the Template.
         *
         * @return void  Template render has no return.
         */
        public function action_add_promo_banner($file, $name, $template)
        {
        }
        /**
         * Updates and modifies the properties added to the event post object by the `tribe_get_event` function to
         * hide some sensitive information, if required.
         *
         * @since 5.0.0
         *
         * @param \WP_Post $event The event post object, decorated w/ properties added by the `tribe_get_event` function.
         *
         * @return \WP_Post The event post object, decorated w/ properties added by the `tribe_get_event` function, some of
         *                  them updated to hide sensitive information, if required.
         */
        public function filter_events_properties($event)
        {
        }
        /**
         * Filter the template file in case we're in single event
         * and we need to use the theme overrides.
         *
         * @see   tribe_template_file
         *
         * @since 5.0.0
         *
         * @param string $file      Complete path to include the PHP File
         * @param array  $name      Template name
         * @param object $template  Instance of the Tribe__Template
         *
         * @return string
         */
        public function filter_template_file($file, $name, $template)
        {
        }
        /**
         * Filter the stylesheet option to do some switching for V2
         *
         * @since  5.0.2
         *
         * @param  string $value The option value.
         * @param  string $key   The option key.
         *
         * @return string Which value we are converting to.
         */
        public function filter_get_stylesheet_option($value, $key)
        {
        }
        /**
         * Filter the liveFiltersUpdate option to do some switching for V2.
         * Note: this triggers on option_liveFiltersUpdate, tribe_get_option, AND tribe_field_value. We
         * don't have to add/remove filters because we don't need to get the value - it's already provided.
         *
         * @since 5.0.3
         *
         * @param  string $value  The option value.
         * @param  string $key    The option key.
         *
         * @return string Converted value of the Live Filters string.
         */
        public function filter_live_filters_option_value($value, $key)
        {
        }
        /**
         * Converts old (boolean) values to the new string values.
         *
         * @since 5.0.3
         *
         * @param  mixed  $value The value to maybe convert.
         *
         * @return string Modified value of Live filters Update.
         */
        public function live_filters_maybe_convert($value)
        {
        }
        /**
         * Ensures that date formats are escaped properly.
         * Converts "\\" to "\"  for escaped characters.
         *
         * @since 5.16.4
         *
         * @param mixed  $value      The current value of the option.
         * @param string $optionName The option "key"
         *
         * @return mixed  $value     The modified value of the option.
         */
        public function filter_date_escaping($value, $optionName)
        {
        }
        /**
         * Print Single Event JSON-LD.
         *
         * @since 5.0.3
         */
        public function print_single_json_ld()
        {
        }
        /**
         * Changes the action the Customizer should use to try and print inline styles to print the inline
         * styles in the footer.
         *
         * @since 5.3.1
         *
         * @return string The action the Customizer should use to print inline styles.
         */
        public function print_inline_styles_in_footer()
        {
        }
        /**
         * Filter the website link label and change it for Single Event Classic Editor.
         * Use the following in functions.php to disable:
         * remove_filter( 'tribe_get_venue_website_link_label', [ tribe( 'events.views.v2.hooks' ), 'filter_single_event_details_website_label' ] );
         *
         * @since 5.5.0
         *
         * @param string     $label The filtered label.
         * @param null|string|int $post_id The current post ID.
         *
         * @return string
         */
        public function filter_single_event_details_event_website_label($label, $post_id = null)
        {
        }
        /**
         * Filter the website link label and change it for Single Event Classic Editor.
         * Use the following in functions.php to disable:
         * remove_filter( 'tribe_get_venue_website_link_label', [ tribe( 'events.views.v2.hooks' ), 'filter_single_event_details_venue_website_label' ] );
         *
         * @since 5.5.0
         *
         * @param string     $label The filtered label.
         * @param null|string|int $post_id The current post ID.
         *
         * @return string
         */
        public function filter_single_event_details_venue_website_label($label, $post_id = null)
        {
        }
        /**
         * Filter the website link label and change it for Single Event Classic Editor.
         * Use the following in functions.php to disable:
         * remove_filter( 'tribe_get_organizer_website_link_label', [ tribe( 'events.views.v2.hooks' ), 'filter_single_event_details_organizer_website_label' ] );
         *
         * @since 5.5.0
         *
         * @param string     $label The filtered label.
         * @param null|string|int $post_id The current post ID.
         *
         * @return string
         */
        public function filter_single_event_details_organizer_website_label($label, $post_id = null)
        {
        }
        public function filter_tec_events_query_default_view($default_view)
        {
        }
        /**
         * Sugar function for the above that determines if the labels should be filtered.
         *
         * @since 4.6.0
         *
         * @param null|string|int $post_id The current post ID.
         *
         * @return boolean
         */
        public function is_v1_or_blocks($post_id = null)
        {
        }
        /**
         * Overrides the default iCalendar export link logic to inject a list of event
         * post IDs fitting the Views V2 criteria.
         *
         * @since 4.6.0
         *
         * @param array<int>|false $event_ids Either a list of event post IDs that has been
         *                                    explicitly requested or `false` to indicate the
         *                                    iCalendar export link did not indicate a specific
         *                                    set of event post IDs.
         *
         * @return array<int> Either the original input value if a specific set of event post IDs
         *                    was requested as part of the iCalendar export link, or a filtered
         *                    set of event post IDs compiled depending on the current View context
         *                    and request arguments.
         */
        public function inject_ical_event_ids($event_ids = null)
        {
        }
        /**
         * Filters the Today button label to change the text to something appropriate for Week View.
         *
         * @since 6.0.2
         *
         * @param string $today The string used for the "Today" button on calendar views.
         * @param \Tribe\Events\Views\V2\View_Interface $view The View currently rendering.
         *
         * @return string $today
         */
        public function filter_view_month_today_button_label($today, $view)
        {
        }
        /**
         * Filters the Today button title and aria-label to change the text to something appropriate for Month View.
         *
         * @since 6.0.2
         *
         * @param string                                $label The title string.
         * @param \Tribe\Events\Views\V2\View_Interface $view  The View currently rendering.
         *
         * @return string $label
         */
        public function filter_view_month_today_button_title($label, $view)
        {
        }
        /**
         * Allow specific views to hook in and add their own calculated events.
         *
         * @since 6.2.3
         * @since 6.2.3.1 Added a check for function existence.
         *
         * @param Tribe__Repository|false $events     The events repository. False by default.
         * @param DateTime                $start_date The start date (object) of the query.
         * @param \Tribe__Context         $context    The current context.
         * @param View_Interface          $instance   The current view instance.
         *
         * @return \Tribe__Repository|false $events     The events repository results.
         */
        public function filter_tec_events_noindex($events, $start_date, $end_date, $context, $view)
        {
        }
        /* DEPRECATED */
        /**
         * Adds new Global Elements settings via the hook in common.
         *
         * @since 5.3.1
         * @deprecated 5.9.0
         *
         * @param \Tribe__Customizer__Section $section    The Global Elements Customizer section.
         * @param WP_Customize_Manager        $manager    The settings manager.
         * @param \Tribe__Customizer          $customizer The Customizer object.
         */
        public function action_include_global_elements_settings($section, $manager, $customizer)
        {
        }
        /**
         * Adds new Single Event settings via the hook in common.
         *
         * @since 5.3.1
         * @deprecated 5.9.0
         *
         * @param \Tribe__Customizer__Section $section    The Single Event Customizer section.
         * @param WP_Customize_Manager        $manager    The settings manager.
         * @param \Tribe__Customizer          $customizer The Customizer object.
         */
        public function action_include_single_event_settings($section, $manager, $customizer)
        {
        }
        /**
         * Filters the Global Elements section CSS template to add Views v2 related style templates to it.
         *
         * @since 5.3.1
         * @deprecated 5.9.0
         *
         * @param string                      $css_template The CSS template, as produced by the Global Elements.
         * @param \Tribe__Customizer__Section $section      The Global Elements section.
         * @param \Tribe__Customizer          $customizer   The current Customizer instance.
         *
         * @return string The filtered CSS template.
         */
        public function filter_global_elements_css_template($css_template, $section)
        {
        }
        /**
         * Filters the Single Event section CSS template to add Views v2 related style templates to it.
         *
         * @since 5.3.1
         * @deprecated 5.9.0
         *
         * @param string                      $css_template The CSS template, as produced by the Global Elements.
         * @param \Tribe__Customizer__Section $section      The Single Event section.
         * @param \Tribe__Customizer          $customizer   The current Customizer instance.
         *
         * @return string The filtered CSS template.
         */
        public function filter_single_event_css_template($css_template, $section)
        {
        }
        /**
         * Add the views v2 status in a more prominent way in the Troubleshooting page system info panel.
         *
         * @since 5.12.4
         *
         * @param array $info Existing information that will be displayed.
         *
         * @return array
         */
        public function filter_system_information(array $info = [])
        {
        }
        /**
         * Ensure we use the correct date on shortcodes.
         * If both `tribe-bar-date` and `eventDate` are present, `tribe-bar-date` overrides `eventDate`.
         *
         * @since 5.16.4
         *
         * @param array $params An associative array of parameters from the REST request.
         * @param \WP_REST_Request $request The current REST request.
         *
         * @return array $params A modified array of parameters from the REST request.
         */
        public function filter_url_date_conflicts($params, $request)
        {
        }
        /**
         * Unregisters all the filters and action handled by the class.
         *
         * @since 6.0.2
         *
         * @return void Filters and actions will be unregistered.
         */
        public function unregister() : void
        {
        }
    }
    /**
     * Class Implementation_Error
     *
     * @package Tribe\Events\Views\V2
     * @since   4.9.2
     */
    class Implementation_Error extends \Exception
    {
        /**
         * Signals a class extending the View class is not implementing a required API method.
         *
         * @since 4.9.2
         *
         * @param string $method The not implemented method.
         * @param object An instance of the object not implementing the method.
         *
         * @return \Tribe\Events\Views\V2\Implementation_Error A built instance of the exception.
         */
        public static function because_extending_view_should_define_this_method($method, $object)
        {
        }
    }
    /**
     * Class Template
     *
     * @since   4.9.2
     * @package Tribe\Events\Views\V2
     */
    class Template extends \Tribe__Template
    {
        use \Tribe\Traits\Cache_User;
        /**
         * The view the template should use to build its path.
         *
         * @var View_Interface
         */
        protected $view;
        /**
         * The repository instance that provided the template with posts, if any.
         *
         * @var Repository_Interface
         */
        protected $repository;
        /**
         * An array cache to keep track of  resolved template files on a per-name basis.
         * The file look-around needs not to be performed twice per request.
         *
         * @since 4.9.4
         *
         * @var array
         */
        protected $template_file_cache = [];
        /**
         * Renders and returns the View template contents.
         *
         * @since 4.9.2
         *
         * @param array $context_overrides Any context data you need to expose to this file
         *
         * @return string The rendered template contents.
         */
        public function render(array $context_overrides = [])
        {
        }
        /**
         * Template constructor.
         *
         * @since 4.9.2
         * @since 4.9.4 Modified the first param to only accept View_Interface instances.
         *
         * @param View_Interface $view The view the template should use to build its path.
         *
         */
        public function __construct($view)
        {
        }
        /**
         * Returns the template file the View will use to render.
         *
         * If a template cannot be found for the view then the base template for the view will be returned.
         *
         * @since 4.9.2
         * @since 6.2.0 Added support for looking up the inheritance chain for templates from parent views.
         *
         * @param string|array|null $name Either a specific name to check, the fragments of a name to check, or `null` to let
         *                                the view pick the template according to the template override rules.
         *
         * @return string The path to the template file the View will use to render its contents.
         */
        public function get_template_file($name = null)
        {
        }
        /**
         * Returns the absolute path to the view base template file.
         *
         * @since 4.9.2
         *
         * @return string The absolute path to the Views base template.
         */
        public function get_base_template_file()
        {
        }
        /**
         * Sets up the post data and replace the global post variable on all required places.
         *
         * @since 4.9.13
         *
         * @param WP_Post $event Which event will replace the Post for the templates
         *
         * @return bool|void  Returns whatever WP_Query::setup_postdata() sends back.
         */
        public function setup_postdata(\WP_Post $event)
        {
        }
        /**
         * Returns the absolute path to the view "not found" template file.
         *
         * @since 4.9.2
         *
         * @return string The absolute path to the Views "not found" template.
         */
        public function get_not_found_template()
        {
        }
        /**
         * Sets the template view.
         *
         * @since 4.9.4 Modified the Param to only accept View_Interface instances
         *
         * @param View_Interface $view Which view we are using this template on.
         */
        public function set_view($view)
        {
        }
        /**
         * Returns the current template view, either set in the constructor or using the `set_view` method.
         *
         * @since 4.9.4 Modified the Param to only accept View_Interface instances
         *
         * @return View_Interface The current template view.
         */
        public function get_view()
        {
        }
        /**
         * Returns the current template view slug.
         *
         * @since 6.0.7
         *
         * @return string The view slug.
         */
        public function get_view_slug()
        {
        }
        /**
         * Returns the current template context.
         *
         * @since 5.0.0
         *
         * @return \Tribe__Context The template context instance, or the global context if no context is set.
         */
        public function get_context()
        {
        }
    }
    /**
     * Class Index
     *
     * @package Tribe\Events\Views\V2
     * @since   4.9.2
     */
    class Index extends \Tribe\Events\Views\V2\Template
    {
        /**
         * Index constructor.
         *
         * Overrides the base implementation to allow plugins and themes to override the index file.
         */
        public function __construct()
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Interfaces {
    /**
     * Class Repository_User_Interface
     *
     * @since   4.9.3
     * @package Tribe\Events\Views\V2\Interfaces
     */
    interface Repository_User_Interface
    {
        /**
         * Sets the repository the instance should use.
         *
         * @since 4.9.3
         *
         * @param  Repository  $repository The repository object the instance should use or `null` to unset it.
         */
        public function set_repository(\Tribe__Repository__Interface $repository = null);
        /**
         * Returns the repository currently used by the instance, if any.
         *
         * @since 4.9.3
         *
         * @return Repository The repository instance used by the instance or `null` if the instance is not using a
         *                         repository.
         */
        public function get_repository();
        /**
         * Restores the loop variables by restoring the global query.
         *
         * @since 4.9.3
         */
        public function restore_the_loop();
    }
    /**
     * Interface View_Partial_Interface
     *
     * @since   4.9.5
     * @package Tribe\Events\Views\V2\Interfaces
     */
    interface View_Partial_Interface
    {
        /**
         * Renders the partials and returns its HTML code.
         *
         * @since 4.9.5
         *
         * @param \Tribe__Template $template The template instance currently rendering.
         *
         * @return string
         */
        public function render(\Tribe__Template $template);
    }
    /**
     * Interface Url_Provider_Interface
     *
     * @since   4.9.3
     * @package Tribe\Events\Views\V2\Interfaces
     */
    interface View_Url_Provider_Interface
    {
        /**
         * Returns the URL associated to this View, if any.
         *
         * @since 4.9.3
         *
         * @param bool $canonical Whether to return the canonical version of the URL or the normal one.
         * @param bool $force Whether to force the re-fetch and ignore cached values or not.
         *
         * @return string The current URL associated to the view or an empty string if this View does not correspond to a
         *                URL.
         */
        public function get_url($canonical = false, $force = false);
        /**
         * Returns the URL associated to this View logical, next view.
         *
         * @since 4.9.3
         *
         * @param bool $canonical Whether to return the canonical version of the URL or the normal one.
         * @param array $passthru_vars An array of query arguments that will be passed thru intact, and appended to the URL.
         *
         * @return string The URL associated to this View logical, next view or an empty string if no next View exists.
         */
        public function next_url($canonical = false, array $passthru_vars = []);
        /**
         * Returns the URL associated to this View logical, previous view.
         *
         * @since 4.9.3
         *
         * @param bool $canonical Whether to return the canonical version of the URL or the normal one.
         * @param array $passthru_vars An array of query arguments that will be passed thru intact, and appended to the URL.
         *
         * @return string The URL associated to this View logical, next view or an empty string if no previous View exists.
         */
        public function prev_url($canonical = false, array $passthru_vars = []);
        /**
         * Returns the URL object used by the View, if any.
         *
         * @since 4.9.3
         *
         * @return \Tribe\Events\Views\V2\Url|null
         */
        public function get_url_object();
        /**
         * Updates the View URL object reference.
         *
         * @since 5.7.0
         *
         * @param Url $url_object A reference to the the new URL instance
         *                        the View should use.
         */
        public function set_url_object(\Tribe\Events\Views\V2\Url $url_object);
    }
}
namespace Tribe\Events\Views\V2 {
    /**
     * Class Kitchen_Sink
     *
     * @package Tribe\Events\Views\V2
     * @since   4.9.2
     */
    class Kitchen_Sink extends \Tribe__Template
    {
        /**
         * Setup the Kitchen Sink Template constructor.
         *
         * @since 4.9.2
         */
        public function __construct()
        {
        }
        /**
         * Gets the available pages for the Kitchen sink code
         *
         * @since  4.9.2
         *
         * @return array
         */
        public function get_available_pages()
        {
        }
        /**
         * Add the events kitchen sink variable to the WP Query Vars
         *
         * @since  4.9.2
         *
         * @param  array $vars query vars array
         *
         * @return array
         */
        public function filter_register_query_vars($vars = [])
        {
        }
        /**
         * Add the rewrite rules for Kitchen Sink URL
         *
         * @since 4.9.2
         *
         * @param \Tribe__Events__Rewrite $rewrite
         *
         * @return void
         */
        public function generate_rules(\Tribe__Events__Rewrite $rewrite)
        {
        }
    }
    /**
     * Class Views Manager
     *
     * @package Tribe\Events\Views\V2
     * @since   4.9.4
     */
    class Manager
    {
        /**
         * The name of the Tribe option the enabled/disabled flag for
         * View v2 will live in.
         *
         * @var string
         */
        public static $option_enabled = 'views_v2_enabled';
        /**
         * The name of the Tribe option the default Views v2 slug will live in.
         *
         * @since 4.9.11 Use v1 option.
         *
         * @var string
         */
        public static $option_default = 'viewOption';
        /**
         * The name of the Tribe option the default mobile Views v2 slug will live in.
         *
         * @since 4.9.11 Use v1 option.
         * @deprecated 5.12.3 Moved to ECP.
         *
         * @var string
         */
        public static $option_mobile_default = 'mobile_default_view';
        /**
         * Registers a view such that sensible defaults are registered and hooked.
         *
         * @since 5.7.0
         * @since 5.10.0 Added optional route slug parameter to decouple from the view slug.
         *
         * @param string $slug View slug for locating the view file.
         * @param string $name View name.
         * @param string $class View class.
         * @param int $priority View registration priority.
         * @param string $route_slug The slug applied to the route for this view.
         *
         * @return View_Register
         */
        public function register_view($slug, $name, $class, $priority = 30, $route_slug = null)
        {
        }
        /**
         * Gets all generated View_Register objects.
         *
         * @since 5.7.0
         *
         * @return array
         */
        public function get_view_registration_objects()
        {
        }
        /**
         * Returns an associative array of Views currently registered.
         *
         * @since  4.9.4
         *
         * @return array An array in the shape `[ <slug> => <View Class> ]`.
         */
        public function get_registered_views()
        {
        }
        /**
         * Get the slug for the default registered view.
         *
         * @since  4.9.4
         *
         * @param string|null $type The type of default View to return, either 'desktop' or 'mobile'.
         *
         * @return string The default View slug.
         *
         */
        public function get_default_view_option($type = null)
        {
        }
        /**
         * Get the class name for the default registered view.
         *
         * @since  4.9.4
         *
         * @return bool|string Returns boolean false when no views are registered or default not found.
         */
        public function get_default_view()
        {
        }
        /**
         * Get the slug for the default registered view.
         *
         * @since 6.0.0
         *
         * @return string
         */
        public function get_default_view_slug()
        {
        }
        /**
         * Returns an associative array of Views currently registered that are publicly visible.
         *
         * @since  4.9.4
         *
         * @param bool $is_enabled Should only return enabled views or all publicly visible ones.
         *
         * @return array An array in the shape `[ <slug> => <View Class> ]`.
         */
        public function get_publicly_visible_views(bool $is_enabled = true)
        {
        }
        /**
         * Returns an array of data of the public views.
         *
         * @since 5.0.0
         *
         * @return array
         */
        public function get_publicly_visible_views_data()
        {
        }
        /**
         * Returns the slug and class of a given view, accepts slug or class.
         * Will return false for both in case both fail.
         *
         * @since 4.9.4
         *
         * @param string $requested_view The view slug or fully qualified class name
         *
         * @return array  Formatted [ (string|bool) $view_slug, (string|bool) $view_class ]
         */
        public function get_view($requested_view)
        {
        }
        /**
         * Returns the slug currently associated to a View class, if any.
         *
         * @since 4.9.4
         *
         * @param string $view_class The view fully qualified class name.
         *
         * @return int|string|false  The slug currently associated to a View class if it is found, `false` otherwise.
         */
        public function get_view_slug_by_class($view_class)
        {
        }
        /**
         * Returns the class currently associated to a View slug, if any.
         *
         * @since 4.9.4
         *
         * @param  string $slug The view slug.
         *
         * @return string|false The class currently associated to a View slug if it is found, `false` otherwise.
         */
        public function get_view_class_by_slug($slug)
        {
        }
        /**
         * Returns the view label based on the fully qualified class name.
         *
         * @since 5.0.0
         *
         * @param  string $view_class The view fully qualified class name.
         *
         * @return string|false The label associated with a given View.
         */
        public function get_view_label_by_class($view_class)
        {
        }
        /**
         * Returns the view label based on the view slug.
         *
         * @since 5.0.0
         *
         * @param  string $slug The view slug.
         *
         * @return string|false The label associated with a given View.
         */
        public function get_view_label_by_slug($slug)
        {
        }
        /**
         * Prepare the view Label with filters for the domain and label.
         *
         * @since 5.0.0
         * @deprecated 6.0.4 Translations do not handle variable domains well. Now handled in the View class.
         *
         * @param  string $slug       The view slug.
         * @param  string $view_class The view fully qualified class name.
         *
         * @return string             The filtered label associated with a given View.
         */
        protected function prepare_view_label($slug, $view_class)
        {
        }
    }
    /**
     * Class Messages
     *
     * @since   4.9.11
     *
     * @package Tribe\Events\Views\V2
     */
    class Messages
    {
        /**
         * A notice type of message.
         *
         * @since 4.9.11
         */
        const TYPE_NOTICE = 'notice';
        /**
         * The strategy that will print a single message, the last, per priority collection, per type.
         *
         * @since 4.9.11
         */
        const RENDER_STRATEGY_PRIORITY_LAST = 'priority_last';
        /**
         * The strategy that will print a single message, the first, per priority collection, per type.
         *
         * @since 4.9.11
         */
        const RENDER_STRATEGY_PRIORITY_FIRST = 'priority_first';
        /**
         * The strategy that will print all messages, of all types.
         *
         * @since 4.9.11
         */
        const RENDER_STRATEGY_LIST = 'list';
        /**
         * An array of the messages handled by the object.
         *
         * @since 4.9.11
         *
         * @var array
         */
        protected $messages = [];
        /**
         * The render strategy the collection will use to "render" the messages in the `to_array` method.
         *
         * @since 4.9.11
         *
         * @var string
         */
        protected $render_strategy;
        /**
         * Messages constructor.
         *
         * @param null|string $render_strategy The render strategy that should be used to render the messages in the
         *                                     `to_array` method.
         * @param array       $messages A list of messages to hydrate the collection with.
         */
        public function __construct($render_strategy = null, array $messages = [])
        {
        }
        /**
         * Returns the human-readable message for a key.
         *
         * @since 4.9.11
         *
         * @param string $key The message identification key or slug.
         * @param mixed  ...$values A variadic number of arguments that should be used to fill in the message placeholders, if
         *                       the message contains `sprintf` compatible placeholders at all.
         *
         * @return string The human readable message for the specified key, if found, or the key itself.
         */
        public static function for_key($key, ...$values)
        {
        }
        /**
         * Applies the current message render policy to the messages and returns an array of messages.
         *
         * @since 4.9.11
         *
         * @return array An array of messages in the shape `[ <message_type> => [ ...<messages> ] ]`.
         */
        public function to_array()
        {
        }
        /**
         * Applies the render strategy to the collection of messages.
         *
         * @since 4.9.11
         *
         * @param array $messages The collection of messages to apply the render strategy to.
         *
         * @return array An array of messages after the current strategy application.
         *               No matter the render strategy, the array always has shape
         *              `[ <message_type> => [ ...<messages> ] ]`.
         */
        protected function apply_render_strategy(array $messages = [])
        {
        }
        /**
         * Sets the render strategy that the collection should use to render the messages in the `to_array` method.
         *
         * @since 4.9.11
         *
         * @param string $render_strategy One of the `RENDER_STRATEGY_` constants.
         */
        public function set_render_strategy($render_strategy)
        {
        }
        /**
         * Inserts a message in the collection, at a specific priority.
         *
         * @since 4.9.11
         *
         * @param string $message_type    The type of message to insert, while there is no check on the type, the suggestion
         *                                is to use one of the `TYPE_` constants.
         * @param string $message         The message to insert.
         * @param int    $priority        the priority of the message among the types; defaults to `10`. Similarly to the
         *                                priority concept of WordPress filters, an higher number has a lower priority.
         */
        public function insert($message_type, $message, $priority = 10)
        {
        }
        /**
         * Resets a specific type of messages or all of them.
         *
         * @since 4.9.11
         *
         * @param null|string $type     The type of message to reset, or `null` to reset all messages.
         * @param null|int    $priority The specific priority to reset, this will be ignored if the `$type` parameter
         *                              is not set.
         */
        public function reset($type = null, $priority = null)
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Query {
    /**
     * Class Event_Query_Controller
     *
     * @since   4.9.2
     * @package Tribe\Events\Views\V2\Query
     */
    class Event_Query_Controller
    {
        /**
         * Returns the name that will be used to build the controller filters.
         *
         * @since 4.9.2
         *
         * @return string The name that will be used to build the controller filters, a slug.
         */
        public function get_filter_name()
        {
        }
        /**
         * Conditionally modify or populate the posts before a query runs.
         *
         * The injection, or modification, will only happen if the query is the main one and if the requested post types
         * are all supported by the Event_Query_Controller.
         *
         * @since 4.9.2
         *
         * @param \WP_Query|null $query The query object currently being filtered, if any.
         *
         * @param null|array     $posts The array of posts to populate. By default empty when coming from the WP_Query
         *                              class, it might have been pre-populated by other methods though.
         *
         * @return array|null A populated list of posts, or the original value if the filtering should not apply.
         */
        public function inject_posts($posts = null, \WP_Query $query = null)
        {
        }
        /**
         * Returns the list of post types supported by the Event_Query_Controller.
         *
         * This list will be used to decide if a query post injection should be performed by the Event_Query_Controller or
         * not. If not all the post types the query is for are supported then the Event_Query_Controller will not
         * intervene.
         *
         * @since 4.9.2
         *
         * @return array An array of post types supported by the Event_Query_Controller.
         */
        public function get_supported_post_types()
        {
        }
        /**
         * Parses the query to add/remove properties.
         *
         * @since 4.9.11
         *
         * @param \WP_Query $query The current WordPress query object.
         */
        public function parse_query(\WP_Query $query)
        {
        }
    }
    /**
     * Class Hide_From_Upcoming_Controller
     *
     * @since   6.0.6
     *
     * @package Tribe\Events\Views\V2\Query
     */
    class Hide_From_Upcoming_Controller
    {
        /**
         * Stores the name of the Tribe Cache for the upcoming ids that need to be hidden.
         *
         * @since 6.0.6
         *
         * @var string
         */
        protected $timed_option_key = 'events_hide_from_upcoming_ids';
        /**
         * Determine which are the posts are supposed to be hidden.
         * Please be careful with this query below, it's currently an unbound query, that is why it only runs once a day.
         *
         * @since 6.0.6
         *
         * @return array
         */
        public function get_hidden_post_ids() : array
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Repository {
    /**
     * Class Event_Period
     *
     * @since   4.9.13
     *
     * @package Tribe\Events\Views\V2\Repository
     */
    class Event_Period implements \Tribe\Repository\Core_Read_Interface
    {
        use \Tribe\Repository\Filter_Validation;
        /**
         * A definition of each filter required argument count and nature.
         *
         * @since 4.9.13
         *
         * @var array
         */
        protected static $filter_args_map = ['period' => ['start date' => [\Tribe__Date_Utils::class, 'is_valid_date'], 'end date' => [\Tribe__Date_Utils::class, 'is_valid_date']]];
        /**
         * Whether the repository should cache sets and results in WP cache or not.
         *
         * @since 4.9.13
         *
         * @var bool
         */
        public $cache_results = false;
        /**
         * The period start date.
         *
         * @since 4.9.13
         *
         * @var \DateTime
         */
        protected $period_start;
        /**
         * The period end date.
         *
         * @since 4.9.13
         *
         * @var \DateTime
         */
        protected $period_end;
        /**
         * A flag property to indicate whether the sets should be fetched and built using the site timezone or not.
         *
         * @since 4.9.13
         *
         * @var bool
         */
        protected $use_site_timezone;
        /**
         * The last fetched sets.
         *
         * @since 4.9.13
         *
         * @var Events_Result_Set[]
         */
        protected $sets;
        /**
         * The "base" repository used by this repository.
         * This repository will handle any non-period related filter.
         *
         * @since 4.9.13
         *
         * @var \Tribe__Repository__Interface
         */
        protected $base_repository;
        /**
         * A flag property to indicate whether there are filters for the base repository or not.
         *
         * @since 4.9.13
         *
         * @var bool
         */
        protected $has_base_filters = false;
        /**
         * Batch filter application method.
         *
         * This is the same as calling `by` multiple times with different arguments.
         *
         * @since 4.7.19
         *
         * @param array $args An associative array of arguments to filter
         *                    the posts by in the shape [ <key>, <value> ]. * * @return Tribe__Repository__Read_Interface
         */
        public function by_args(array $args)
        {
        }
        /**
         * Just an alias of the `by` method to allow for easier reading.
         *
         * @since 4.7.19
         *
         * @param string $key
         * @param mixed  $value
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function where($key, $value = null)
        {
        }
        /**
         * {@inheritDoc}
         *
         * @since 4.9.13
         */
        public function by($key, $value = null)
        {
        }
        /**
         * Returns the base event repository used by this repository.
         *
         * @since 4.9.13
         *
         * @return \Tribe__Repository__Interface The base repository instance used by this repository.
         */
        public function base_repository()
        {
        }
        /**
         * Sets the page of posts to fetch.
         *
         * Mind that this implementation does not support a `by( 'page', 2 )`
         * filter to force more readable code.
         *
         * @since 4.7.19
         *
         * @param int $page
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function page($page)
        {
        }
        /**
         * Sets the number of posts to retrieve per page.
         *
         * Mind that this implementation does not support a `by( 'per_page', 5 )`
         * filter to force more readable code; by default posts per page is set to
         * the pagination defaults for the post type.
         *
         * @param int $per_page
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function per_page($per_page)
        {
        }
        /**
         * Returns the number of posts found matching the query.
         *
         * Mind that this value ignores the offset returning the
         * number of results if limits where not applied.
         *
         * @since 4.7.19
         *
         * @return int
         */
        public function found()
        {
        }
        /**
         * Returns all posts matching the query.
         *
         * Mind that "all" means "all the posts matching all the filters" so pagination applies.
         *
         * @return array
         */
        public function all()
        {
        }
        /**
         * Sets the offset on the query.
         *
         * Mind that this implementation does not support a `by( 'offset', 2 )`
         * filter to force more readable code.
         *
         * @since 4.7.19
         *
         * @param int  $offset
         * @param bool $increment Whether to increment the offset by the value
         *                        or replace it.
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function offset($offset, $increment = false)
        {
        }
        /**
         * Sets the order on the query.
         *
         * Mind that this implementation does not support a `by( 'order', 2 )`
         * filter to force more readable code.
         *
         * @since 4.7.19
         *
         * @param string $order
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function order($order = 'ASC')
        {
        }
        /**
         * Sets the order criteria results should be fetched by.
         *
         * Mind that this implementation does not support a `by( 'order_by', 'title' )`
         * filter to force more readable code.
         *
         * @since 4.7.19
         *
         * @param string $order_by The post field, custom field or alias key to order posts by.
         * @param string $order    The order direction; optional; shortcut for the `order` method; defaults
         *                         to `DESC`.
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function order_by($order_by, $order = 'DESC')
        {
        }
        /**
         * Sets the fields that should be returned by the query.
         *
         * Mind that this implementation does not support a `by( 'fields', 'ids' )`
         * filter to force more readable code.
         *
         * @since 4.7.19
         *
         * @param string $fields
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function fields($fields)
        {
        }
        /**
         * Sugar method to set the `post__in` argument.
         *
         * Successive calls will stack, not replace each one.
         *
         * @since 4.7.19
         *
         * @param array|int $post_ids
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function in($post_ids)
        {
        }
        /**
         * Sugar method to set the `post__not_in` argument.
         *
         * Successive calls will stack, not replace each one.
         *
         * @since 4.7.19
         *
         * @param array|int $post_ids
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function not_in($post_ids)
        {
        }
        /**
         * Sugar method to set the `post_parent__in` argument.
         *
         * Successive calls will stack, not replace each one.
         *
         * @since 4.7.19
         *
         * @param array|int $post_id
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function parent($post_id)
        {
        }
        /**
         * Sugar method to set the `post_parent__in` argument.
         *
         * Successive calls will stack, not replace each one.
         *
         * @since 4.7.19
         *
         * @param array $post_ids
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function parent_in($post_ids)
        {
        }
        /**
         * Sugar method to set the `post_parent__not_in` argument.
         *
         * Successive calls will stack, not replace each one.
         *
         * @since 4.7.19
         *
         * @param array $post_ids
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function parent_not_in($post_ids)
        {
        }
        /**
         * Sugar method to set the `s` argument.
         *
         * Successive calls will replace the search string.
         * This is the default WordPress searh, to search by title,
         * content or excerpt only use the `title`, `content`, `excerpt` filters.
         *
         * @param $search
         *
         * @return Tribe__Repository__Read_Interface
         */
        public function search($search)
        {
        }
        /**
         * Returns the number of posts found matching the query in the current page.
         *
         * While the `found` method will return the number of posts found
         * across all pages this method will only return the number of
         * posts found in the current page.
         * Differently from the `found` method this method will apply the
         * offset if set.
         *
         * @since 4.7.19
         *
         * @return int
         */
        public function count()
        {
        }
        /**
         * Returns the first post of the page matching the current query.
         *
         * If, by default or because set with the `per_page` method, all
         * posts matching the query should be returned then this will be
         * the first post of all those matching the query.
         *
         * @since 4.7.19
         *
         * @return WP_Post|mixed|null
         *
         * @see   Tribe__Repository__Read_Interface::per_page()
         */
        public function first()
        {
        }
        /**
         * Returns the last post of the page matching the current query.
         *
         * If, by default or because set with the `per_page` method, all
         * posts matching the query should be returned then this will be
         * the last post of all those matching the query.
         *
         * @since 4.7.19
         *
         * @return WP_Post|mixed|null
         *
         * @see   Tribe__Repository__Read_Interface::per_page()
         */
        public function last()
        {
        }
        /**
         * Returns the nth post (1-based) of the page matching the current query.
         *
         * Being 1-based the second post can be fetched using `nth( 2 )`.
         * If, by default or because set with the `per_page` method, all
         * posts matching the query should be returned then this will be
         * the nth post of all those matching the query.
         *
         * @since 4.7.19
         *
         * @param int $n
         *
         * @return WP_Post|mixed|null
         *
         * @see   Tribe__Repository__Read_Interface::per_page()
         */
        public function nth($n)
        {
        }
        /**
         * Returns the first n posts of the page matching the current query.
         *
         * If, by default or because set with the `per_page` method, all
         * posts matching the query should be returned then this method will
         * return the first n posts of all those matching the query.
         *
         * @since 4.7.19
         *
         * @return array An array of posts matching the query.
         *
         * @see   Tribe__Repository__Read_Interface::per_page()
         */
        public function take($n)
        {
        }
        /**
         * Plucks a field from all results and returns it.
         *
         * This method will implicitly build and use a `WP_List_Util` instance on the return
         * value of a call to the `all` method.
         *
         * @since 4.9.5
         *
         * @param string $field The field to pluck from each result.
         *
         * @return array An array of the plucked results.
         *
         * @see   \wp_list_pluck()
         */
        public function pluck($field)
        {
        }
        /**
         * Filters the results according to the specified criteria.
         *
         * This method will implicitly build and use a `WP_List_Util` instance on the return
         * value of a call to the `all` method.
         *
         * @since 4.9.5
         *
         * @param array  $args     Optional. An array of key => value arguments to match
         *                         against each object. Default empty array.
         * @param string $operator Optional. The logical operation to perform. 'AND' means
         *                         all elements from the array must match. 'OR' means only
         *                         one element needs to match. 'NOT' means no elements may
         *                         match. Default 'AND'.
         *
         * @return array An array of the filtered results.
         *
         * @see   \wp_list_filter()
         */
        public function filter($args = array(), $operator = 'AND')
        {
        }
        /**
         * Sorts the results according to the specified criteria.
         *
         * This method will implicitly build and use a `WP_List_Util` instance on the return
         * value of a call to the `all` method.
         *
         * @since 4.9.5
         *
         * @param string|array $orderby       Optional. Either the field name to order by or an array
         *                                    of multiple orderby fields as $orderby => $order.
         * @param string       $order         Optional. Either 'ASC' or 'DESC'. Only used if $orderby
         *                                    is a string.
         * @param bool         $preserve_keys Optional. Whether to preserve keys. Default false.
         *
         * @return array An array of the sorted results.
         *
         * @see   \wp_list_sort()
         */
        public function sort($orderby = array(), $order = 'ASC', $preserve_keys = false)
        {
        }
        /**
         * Builds a collection on the result of the `all()` method call.
         *
         * @since 4.9.5
         *
         * @return \Tribe__Utils__Post_Collection
         */
        public function collect()
        {
        }
        /**
         * Gets the ids of the posts matching the query.
         *
         * @since 4.9.13
         *
         * @return array An array containing the post IDs to update.
         */
        public function get_ids()
        {
        }
        /**
         * Flattens and returns the post IDs of all events in the a sets collection.
         *
         * @since 4.9.13
         *
         * @param array $sets The sets to parse.
         *
         * @return int[] An array of the sets post IDs.
         */
        protected function get_sets_ids(array $sets)
        {
        }
        /**
         * Returns an array of result sets, one for each period day.
         *
         * @since 4.9.13
         *
         * @return Events_Result_Set[] An array of result sets, in the shape `[ <Y-m-d> => <Event_Result_Set> ]`.
         */
        public function get_sets()
        {
        }
        /**
         * Returns the already fetched set, or a sub-set of it.
         *
         * @since 4.9.13
         *
         * @param array              $sets  The sets, by day, to get the subset from.
         * @param \DateTimeInterface $start The sub-set start.
         * @param \DateTimeInterface $end   The sub-set end.
         *
         * @return Events_Result_Set[] The result sub-set, or the whole set if the dates are the same.
         */
        protected function get_sub_set(array $sets, \DateTimeInterface $start, \DateTimeInterface $end)
        {
        }
        /**
         * Queries the database to fetch the sets.
         *
         * @since 4.9.13
         *
         * @return array|false Either the results of the query, or `false` on error.
         */
        protected function query_for_sets(\DateTimeInterface $start, \DateTimeInterface $end)
        {
        }
        /**
         * Queries for all the events that start before the period ends.
         *
         * @since 4.9.13
         *
         * @param int                $limit   The value of the LIMIT that should be respected to send queries (in respect
         *                                    to the
         *                                    `$post_in` parameter) or fetch results (the SQL LIMIT clause). This limit
         *                                    should be defined using the
         *                                    `Tribe__Feature_Detection::mysql_limit_for_example` method.
         * @param \DateTimeInterface $end     The period end date.
         * @param array              $post_in An array of post IDs to limit the search to.
         *
         * @return array A result set, an array of arrays in the shape `[ <ID> => [ 'ID' => <ID>, 'start_date' =>
         *               <start_date> ] ]`;
         */
        protected function query_for_sets_starting_before_period_end($limit, \DateTimeInterface $end, array $post_in = [])
        {
        }
        /**
         * Runs a query within a SQL LIMIT.
         *
         * The method will run multiple queries if the limit is lower than the number of results or the number of post IDs
         * in the `$post_in` parameter.
         *
         * @since 4.9.13
         *
         * @param int        $limit        The value of the LIMIT that should be respected to send queries (in respect to
         *                                 the `$post_in` parameter) or fetch results (the SQL LIMIT clause). This limit
         *                                 should be defined using the `Tribe__Feature_Detection::mysql_limit_for_example`
         *                                 method.
         * @param string     $query        The un-prepared SQL query to run, if should contains placeholders in the format
         *                                 used by the `wpdb::prepare` method.
         * @param array|null $prepare_args An array of arguments that will be used, in order, to prepare the query using
         *                                 the
         *                                 `wpdb::prepare` method.
         * @param array|null $post_in      An array of post IDs that will be  used to pivot the query. The `$limit`
         *                                 parameter will apply to these values too chunking them if they are too many to
         *                                 avoid hitting MySQL packet size. When applied to post IDs the limit is overly
         *                                 conservative.
         *
         * @return array An array of results. Whether one or more queries ran, the return value will always have the format
         *               a single query run would have.
         *
         * @see   Tribe__Feature_Detection::mysql_limit_for_example for the method that should be used to set the limit.
         * @see   wpdb::prepare() for the format of the placeholders to use to prepare the query.
         */
        protected function query_w_limit($limit, $query, array $prepare_args = [], array $post_in = [])
        {
        }
        /**
         * Queries for all the events that end after the period starts.
         *
         * @since 4.9.13
         *
         * @param int                $limit   The value of the LIMIT that should be respected to send queries (in respect
         *                                    to the
         *                                    `$post_in` parameter) or fetch results (the SQL LIMIT clause). This limit
         *                                    should be defined using the
         *                                    `Tribe__Feature_Detection::mysql_limit_for_example` method.
         * @param \DateTimeInterface $start   The period start date.
         * @param array              $post_in An array of post IDs to limit the search to.
         *
         * @return array A result set, an array of arrays in the shape `[ <ID> => [ 'ID' => <ID>, 'end_date' => <end_date>
         *               ] ]`;
         */
        protected function query_for_sets_ending_after_period_start($limit, \DateTimeInterface $start, array $post_in = [])
        {
        }
        /**
         * Queries the database to fetch all the values of a single meta entry for all the post IDs in the datatbase or in
         * a defined interval.
         *
         * @since 4.9.13
         *
         * @param int        $limit           The value of the LIMIT that should be respected to send queries (in respect
         *                                    to the
         *                                    `$post_in` parameter) or fetch results (the SQL LIMIT clause). This limit
         *                                    should be defined using the
         *                                    `Tribe__Feature_Detection::mysql_limit_for_example` method.
         * @param string     $meta_key        The meta key to fetch from the database, this is the value of the `meta_key`
         *                                    column, e.g. `_EventTimezone`.
         * @param array|null $post_ids        An array of post IDs to limit the query.
         * @param string     $join            The type of JOIN to use; defaults to `INNER`, but `LEFT` should be used when
         *                                    fetching meta that might be not set for all posts.
         *
         * @return array An array of meta results, the post IDs as keys.
         *
         * @see   Tribe__Feature_Detection::mysql_limit_for_example for the method that should be used to set the limit.
         * @see   wpdb::prepare() for the format of the placeholders to use to prepare the query.
         */
        protected function query_for_meta($limit, $meta_key, array $post_ids = null, $join = 'INNER')
        {
        }
        /**
         * Groups a set of raw database results by start date.
         *
         * @since 4.9.13
         *
         * @param array $results A raw set of database results.
         *
         * @return array The database results, grouped by days, in the shape `[ <Y-m-d> => [ ...<results> ] ]`. Each result
         *               is an instance `Event_Result`.
         */
        protected function group_sets_by_start_date($results)
        {
        }
        /**
         * Casts each set to an `Event_Result_Set`.
         *
         * @since 4.9.13
         *
         * @param array $raw_sets The raw sets.
         *
         * @return array The set, each element cast to an `Event_Result_Set`.
         */
        protected function cast_sets(array $raw_sets)
        {
        }
        /**
         * Adds to the sets any missing day.
         *
         * @since 4.9.13
         *
         * @param array $sets The current sets, by day.
         *
         * @return array The filled sets.
         */
        protected function add_missing_sets(array $sets)
        {
        }
        /**
         * Caches the resulting sets using `Tribe__Cache`.
         *
         * As a result sets might be cached either in a real object cache or in transients.
         *
         * @param array $sets The sets to cache.
         */
        protected function set_results_cache($sets)
        {
        }
        /**
         * Further filters the sets using a default event repository to handle the non-period related filters.
         *
         * @since 4.9.13
         *
         * @param array $sets The sets found by this repository so far.
         */
        protected function filter_sets_w_base_repository(array $sets)
        {
        }
        /**
         * An alias of the `get_sets` method to stick with the convention of naming database-querying methods w/ "fetch".
         *
         * This method will "warm up" the instance cache of the repository fetching the events in the period.
         *
         * @since 4.9.13
         */
        public function fetch()
        {
        }
        /**
         * Short-hand to fetch events for a single date.
         *
         * A wrapper around the `by_period` method.
         *
         * @since 4.9.13
         *
         * @param string|int|\DateTimeInterface $date The day date.
         *
         * @return $this For chaining.
         */
        public function by_date($date)
        {
        }
        /**
         * Sets up the filter to fetch events sets in a period.
         *
         * @since 4.9.13
         *
         * @param string|int|\DateTimeInterface $start_date The period start date.
         * @param string|int|\DateTimeInterface $end_date   The period end date.
         *
         * @return static For chaining.
         */
        public function by_period($start_date, $end_date)
        {
        }
        /**
         * Try and fetch sets from cache to share data between diff. instances of the repository.
         *
         * In cache we store periods.
         * A cached period has a start and an end.
         * If the current request period overlaps a cached period, then we fetch sets for each day in the period from the
         * cache.
         *
         * @since 4.9.13
         *
         * @return array|null Either a set of results fetched from the cache, or `null` if nothing was found in cache.
         */
        protected function fetch_cached_sets()
        {
        }
        /**
         * Shorthand method to get the first set of a search.
         *
         * @since 4.9.13
         *
         * @return Events_Result_Set Either the first found set, or an empty set.
         */
        public function get_set()
        {
        }
        /**
         * Sets, or unsets if the passed value is `null`, the base repository used by this repository.
         *
         * @since 4.9.13
         *
         * @param Core_Read_Interface $base_repository The base repository this repository should use; a `null` value will
         *                                             unset it.
         */
        public function set_base_repository(\Tribe\Repository\Core_Read_Interface $base_repository = null)
        {
        }
    }
    /**
     * Class Event_Result
     *
     * @since   4.9.13
     *
     * @package Tribe\Events\Views\V2\Repository
     */
    class Event_Result
    {
        /**
         * An array of data keys that are required for an event result to be valid.
         *
         * @since 4.9.13
         *
         * @var array
         */
        protected static $required_keys = ['ID', 'post_status', 'start_date', 'end_date', 'timezone', 'all_day'];
        /**
         * The data wrapped by the value object.
         *
         * @since 4.9.13
         *
         * @var array
         */
        protected $data = [];
        /**
         * Event_Result constructor.
         *
         * @param array $result
         */
        public function __construct(array $data)
        {
        }
        /**
         * Builds and returns a result set from an array of values.
         *
         * @since 4.9.13
         *
         * @param array $value The value to build the instance from.
         *
         * @return static An result instance.
         */
        public static function from_value($value)
        {
        }
        /**
         * Returns the event post ID.
         *
         * @since 4.9.13
         *
         * @return int The event post ID.
         */
        public function id()
        {
        }
        /**
         * Returns the event start date in the site timezone.
         *
         * @since 4.9.13
         *
         * @return string The event start date and time, in the `Y-m-d H:i:s` format.
         */
        public function start_date()
        {
        }
        /**
         * Returns the event end date in the site timezone.
         *
         * @since 4.9.13
         *
         * @return string The event end date and time, in the `Y-m-d H:i:s` format.
         */
        public function end_date()
        {
        }
        /**
         * Returns the event timezone string.
         *
         * @since 4.9.13
         *
         * @return string The event timezone string.
         */
        public function timezone()
        {
        }
        /**
         * Returns a flag indicating whether the event is an all-day one or not.
         *
         * @since 4.9.13
         *
         * @return bool Whether the event is an all-day one or not.
         */
        public function all_day()
        {
        }
        /**
         * Returns the event post status.
         *
         * @since 4.9.13
         *
         * @return bool The event post status.
         */
        public function status()
        {
        }
        /**
         * Dumps the event result data to array.
         *
         * @since 4.9.13
         *
         * @return array The event result data.
         */
        public function to_array()
        {
        }
        public function __get($name)
        {
        }
        /**
         * Sets a property on the result, returning a modified clone.
         *
         * @since 4.9.13
         *
         * @param string $name  The name of the property to set.
         * @param mixed  $value The property value.
         *
         * @return Event_Result A clone of this result.
         */
        public function __set($name, $value)
        {
        }
        /**
         * Checks whether a data entry is set or not.
         *
         * @since 4.9.13
         *
         * @param string $name The name of the data entry to set.
         *
         * @return bool Whether a data entry is set or not.
         */
        public function __isset($name)
        {
        }
    }
    /**
     * Class Events_Result_Set
     *
     * @since   4.9.13
     *
     * @package Tribe\Events\Views\V2\Repository
     */
    class Events_Result_Set implements \Tribe\Utils\Collection_Interface
    {
        use \Tribe\Utils\Collection_Trait;
        /**
         * An array of event results in this result set.
         *
         * @since 4.9.13
         *
         * @var array
         */
        protected $items;
        /**
         * Events_Result_Set constructor.
         *
         * @param Event_Result[]|array $event_results An array of event results.
         */
        public function __construct(array $event_results = [])
        {
        }
        /**
         * Returns whether a string represents a serialized instance of the class or not.
         *
         * @since 5.0.0
         *
         * @param mixed $value The value to test.
         *
         * @return bool Whether the input value is a string representing a serialized instance of the class or not.
         */
        protected static function is_serialized($value)
        {
        }
        /**
         * Unserializes, with error handling, a result set to return a new instance of this class.
         *
         * @since 5.0.0
         *
         * @param string $value The serialized version of the result set.
         *
         * @return Events_Result_Set The unserialized result set, or an empty result set on failure.
         */
        protected static function from_serialized($value)
        {
        }
        /**
         * Builds a set from an array of event results.
         *
         * @since 5.0.0
         *
         * @param array<Event_Result> $event_results An array of event results.
         *
         * @return Events_Result_Set A new set, built from the input Event Results.
         */
        protected static function from_array($event_results)
        {
        }
        /**
         * Builds a result set from different type of values.
         *
         * @since 4.9.13
         *
         * @param mixed $value A result set, that will be returned intact, an array of event results
         *
         * @return Events_Result_Set The original set, a set built on an array of `Event_Result` instances, or a set
         *                           built on an empty array if the set could not be built.
         */
        public static function from_value($value)
        {
        }
        /**
         * Returns the number of Event Results in this set.
         *
         * @since 5.0.0
         *
         * @return int The number of Event Results in this set.
         */
        public function count()
        {
        }
        /**
         * Orders the Event Results by a specified criteria.
         *
         * @since 5.0.0
         *
         * @param string $order_by The key to order the Event Results by, currently supported is only `start_date`.
         * @param string $order The order direction, one of `ASC` or `DESC`.
         *
         * @return $this The current object, for chaining.
         */
        public function order_by($order_by, $order)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function all()
        {
        }
        /**
         * {@inheritDoc}
         */
        #[\ReturnTypeWillChange]
        public function jsonSerialize()
        {
        }
        /**
         * Plucks a key from all the event results in the collection.
         *
         * @since 4.9.13
         *
         * @param string $column The key to pluck.
         *
         * @return array An array of all the values associated to the key for each event result in the set.
         */
        public function pluck($column)
        {
        }
        /**
         * Iterates over the result set and to return the array version of each result.
         *
         * @since 4.9.13
         *
         * @return array An array of arrays, each one the array version of an `Event_Result`.
         */
        public function to_array()
        {
        }
        /**
         * Overrides the base `Collection_Trait` implementation to normalize all the items in the result set.
         *
         * @since 4.9.13
         *
         * @param string $data The serialized data.
         */
        public function unserialize($data)
        {
        }
        /**
         * Normalizes the event results in this set ensuring each one is an instance of `Event_Result`.
         *
         * @since 4.9.13
         *
         * @param array $event_results A set of event results in array or object format..
         *
         * @return Event_Result[] The normalized set of results.
         */
        protected function normalize_event_results(array $event_results)
        {
        }
    }
}
namespace Tribe\Events\Views\V2 {
    /**
     * Class Rest_Endpoint
     *
     * @since   4.9.2
     *
     * @package Tribe\Events\Views\V2
     */
    class Rest_Endpoint
    {
        /**
         * The action for this nonce.
         *
         * @since 6.1.4
         *
         * @var string
         */
        const NONCE_ACTION = '_view_rest';
        /**
         * The field name for the primary nonce.
         *
         * @since 6.1.4
         *
         * @var string
         */
        const PRIMARY_NONCE_KEY = '_tec_view_rest_nonce_primary';
        /**
         * The field name for the secondary nonce.
         *
         * @since 6.1.4
         *
         * @var string
         */
        const SECONDARY_NONCE_KEY = '_tec_view_rest_nonce_secondary';
        /**
         * Rest Endpoint namespace
         *
         * @since  4.9.7
         *
         * @var  string
         */
        const ROOT_NAMESPACE = 'tribe/views/v2';
        /**
         * AJAX action for the fallback when REST is inactive.
         *
         * @since  4.9.7
         *
         * @var  string
         */
        public static $ajax_action = 'tribe_events_views_v2_fallback';
        /**
         * A flag, set on a per-request basis, to indicate if the `rest_authentication_errors` filter fired or not.
         *
         * @since 4.9.12
         *
         * @var bool
         */
        protected static $did_rest_authentication_errors;
        /**
         * When in a REST request, store the authenticated user ID for use later.
         *
         * @since 6.2.3
         *
         * @var null|int The authenticated user ID.
         */
        protected static $user_id;
        /**
         * Due to our custom nonce usage on the REST auth, the _wpnonce is missing and WP core
         * will fail to retain the authenticated user and removes it.
         *
         * This stores the user (if authenticated) for use when we check that our custom nonce(s) are valid.
         *
         * @since 6.2.3
         * @since 6.2.7 Moved to new hook with new params in order to intercede in user auth flow for REST requests.
         *
         * @param array $cors_headers List of headers to be filtered.
         *
         * @return array List of headers.
         * @see   rest_cookie_check_errors()
         *
         */
        public static function preserve_user_for_custom_nonces($cors_headers)
        {
        }
        /**
         * Returns the user ID, if we successfully stored it during a REST request.
         *
         * @since 6.2.3
         *
         * @return int|null The user ID or null if none stored.
         */
        public static function get_stored_user_id() : ?int
        {
        }
        /**
         * Ensures the nonce(s) are valid.
         *
         * @since 6.2.3
         *
         * @param Request $request
         *
         * @return bool
         */
        public function is_valid_request(\WP_REST_Request $request) : bool
        {
        }
        /**
         * Get the nonces being passed to the V2 views used for our REST requests.
         *
         * @since 6.1.4
         *
         * @return array<string,string> The field => nonce array.
         */
        public static function get_rest_nonces() : array
        {
        }
        /**
         * Fetches and filters the HTML tag with the encoded nonces to be output on the view markup.
         *
         * @since 6.2.7
         *
         * @param array $nonces The array of nonces that are being encoded in the HTML output.
         *
         * @return string The HTML for the nonces.
         */
        public static function get_rest_nonce_html(array $nonces) : string
        {
        }
        /**
         * Returns the URL View will use to fetch their content.
         *
         * Depending on whether the REST API is enabled or not on the site, the URL might be a REST API one or an
         * admin AJAX one.
         *
         * @since   4.9.2
         * @since   5.2.1 Add filtering to the URL.
         *
         * @return  string The URL of the backend endpoint Views will use to fetch their content.
         */
        public function get_url()
        {
        }
        /**
         * Get the arguments used to setup the HTML route for Views V2 in the REST API.
         *
         * @link  https://developer.wordpress.org/rest-api/requests/
         *
         * @since  4.9.7
         *
         * @return array $arguments Request arguments following the WP_REST API Standards [ name => options, ... ]
         */
        public function get_request_arguments()
        {
        }
        /**
         * Register the endpoint if available.
         *
         * @since  4.9.7
         * @since 5.2.1 Add support for the POST method.
         *
         * @return boolean If we registered the endpoint.
         */
        public function register()
        {
        }
        /**
         * When REST is not available add AJAX fallback into the correct action.
         *
         * @since  4.9.7
         * @since  4.9.12 Always enable this.
         *
         * @return void
         */
        public function enable_ajax_fallback()
        {
        }
        /**
         * Get the mocked rest request used for the AJAX fallback used to make sure users without
         * the REST API still have the Views V2 working.
         *
         * @since  4.9.7
         * @since 5.2.1 Changed the mock request HTTP method to POST (was GET).
         *
         * @param  array $params Associative array with the params that will be used on this mocked request
         *
         * @return Request The mocked request.
         */
        public function get_mocked_rest_request(array $params)
        {
        }
        /**
         * AJAX fallback for when REST endpoint is disabled. We try to mock a WP_REST_Request
         * and use the same method behind the scenes to make sure we have consistency.
         *
         * @since  4.9.7
         * @since 5.2.1 Look up the POST data before the GET one to process the request.
         */
        public function handle_ajax_request()
        {
        }
        /**
         * Check if the REST endpoint is available.
         *
         * @since  4.9.7
         *
         * @return boolean If the REST API endpoint is available.
         */
        public function is_available()
        {
        }
        /**
         * Tracks if the `rest_authentication_errors` filter fired or not, using this filter as an action.
         *
         * This is a work-around fro the lack of the `did_filter` function.
         *
         * @since 4.9.12
         *
         * @param mixed $errors The authentication error, if any, unused by the method.
         *
         * @return mixed The authentication error.
         */
        public static function did_rest_authentication_errors($errors = null)
        {
        }
        /**
         * Returns the filtered HTTP method Views should use to fetch their content from the backend endpoint.
         *
         * @since 5.2.1
         *
         * @return string The filtered HTTP method Views should use to fetch their content from the back-end endpoint.
         */
        public function get_method()
        {
        }
    }
    /**
     * Class Rewrite
     *
     * @since   5.0.0
     *
     * @package Tribe\Events\Views\V2
     */
    class Rewrite
    {
        /**
         * Filters The Events Calendar rewrite rules to fix and update them, if required.
         *
         * @since 5.0.0
         *
         * @param array  $bases  An array of rewrite bases that have been generated.
         * @param string $method The method that's being used to generate the bases; defaults to `regex`.
         *
         * @return array<string,array> The filtered rewrite rules, updated or modified if required.
         */
        public function filter_raw_i18n_slugs(array $bases, $method)
        {
        }
        /**
         * Adds the URL encoded version of the slugs to the rewrite rules to ensure rewrites will keep working
         * in localized installations.
         *
         * This method wil "fill-in" wrongly formatted or encoded bases too and order bases so that the `Tribe__Rewrite`
         * URL resolving methods will, preferably, resolve to the "pretty" (non URL-encoded) and human readable version.
         *
         * @since 5.0.0
         *
         * @param array<string,array> $bases The raw bases, as generated by The Events Calendar rewrite handler.
         *
         * @return array<string,array> The rules, updated to include the URL encoded version of the slugs.
         */
        protected function add_url_encoded_slugs($bases)
        {
        }
        /**
         * Detects, in a very specific manner, if the string is urlencoded or not.
         *
         * Refrain from moving this into a general-purpose function: this detections system makes a number of assumptions
         * that are just wrong in other contexts.
         *
         * @since 5.0.0
         *
         * @param string $string The string to check for encoding.
         *
         * @return bool Whether the string is encoded or not.
         */
        protected function is_encoded($string)
        {
        }
        /**
         * Sorts a set of English, localize, encoded and not encoded slugs trying to put English and "pretty" first.
         *
         * URL encoded versions will be moved down the set, English will be put first, then "pretty" localized versions.
         *
         * @since 5.0.0
         *
         * @param string $a The first localized slug to check.
         * @param string $b The second localized slug to check.
         *
         * @return int The check result, `0` if the positions should not change, `-1` or `1` to move `$a` before `$b` or
         *             viceversa.
         */
        protected function sort_by_encoding($a, $b)
        {
        }
    }
    /**
     * Class Service_Provider
     *
     * @since   4.9.2
     *
     * @package Tribe\Events\Views\V2
     */
    class Service_Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         */
        public function register()
        {
        }
        /**
         * Registers the provider handling all the 1st level filters and actions for Views v2.
         *
         * @since 4.9.3
         */
        protected function register_assets()
        {
        }
        /**
         * Registers the provider handling all the 1st level filters and actions for Views v2.
         *
         * @since 4.9.2
         */
        protected function register_hooks()
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Template {
    class Event
    {
        /**
         * @var boolean Whether or not we are currently filtering out content due to password protection
         */
        protected $managing_sensitive_info = false;
        /**
         * The current template bootstrap instance.
         *
         * @since 5.0.0
         *
         * @var Template_Bootstrap
         */
        protected $template_bootstrap;
        /**
         * Event constructor.
         *
         * @since 5.0.0
         *
         * @param Template_Bootstrap $template_bootstrap The current template bootstrap instance.
         */
        public function __construct(\Tribe\Events\Views\V2\Template_Bootstrap $template_bootstrap)
        {
        }
        /**
         * Determines the Path for the PHP file to be used as the main template
         * For Page base template setting it will select from theme or child theme
         *
         * @todo  Integrate with Template + Context classes
         *
         * @since  4.9.2
         *
         * @return string
         */
        public function get_path()
        {
        }
        /**
         * Add/remove filters to hide/show sensitive event info on password protected posts
         *
         * @since 5.0.0
         *
         * @param int|\WP_Post $post The post ID or object to filter.
         **/
        public function manage_sensitive_info($post)
        {
        }
        /**
         * Filters the post title as WordPress does in `get_the_title` to apply the password-protected prefix in
         * the context of AJAX requests.
         *
         * @since 5.0.0
         *
         * @param string      $title   The post title.
         * @param int|\WP_Post $post_id The post ID, or object, to apply the filter for.
         *
         * @return string The filtered post title.
         */
        public function filter_get_the_title($title, $post_id = 0)
        {
        }
        /**
         * Filters and modifies the event WP_Post object returned from the `tribe_get_event` function to hide some
         * sensitive information if required.
         *
         * @since 5.0.0
         *
         * @param \WP_Post $event The event post object, decorated w/ properties added by the `tribe_get_event` function.
         *
         * @return \WP_Post The event post object, decorated w/ properties added by the `tribe_get_event` function, some of
         *                  them updated to hide sensitive information, if required.
         */
        public function filter_event_properties(\WP_Post $event)
        {
        }
        /**
         * Filter the display of the_title for password protected events, venues, and organizers.
         *
         * @since 5.3.1
         *
         * @param string       $title   The post title.
         * @param int|\WP_Post $post_id The post ID, or object, to apply the filter for.
         *
         * @return string The post title or empty string if password protected.
         */
        public function filter_the_title_display($title, $post_id = 0)
        {
        }
    }
    /**
     * Class Excerpt
     *
     * @since   4.9.10
     *
     * @package Tribe\Events\Views\V2\Template
     */
    class Excerpt extends \Tribe__Template
    {
        /**
         * Excerpt constructor.
         *
         * @since 4.9.10
         */
        public function __construct()
        {
        }
        /**
         * Filters the excerpt length.
         *
         * Set the excerpt length for list and day view.
         *
         * @since 4.9.10
         *
         * @param int $length The excerpt length.
         *
         * @return int The excerpt length modified, if necessary.
         */
        public function maybe_filter_excerpt_length($length)
        {
        }
        /**
         * Filters the excerpt more button.
         *
         * Set the excerpt more button styles for twentyseventeen.
         *
         * @since 4.9.10
         *
         * @param string $link The excerpt read more link.
         *
         * @return string The excerpt read more link modified, if necessary.
         */
        public function maybe_filter_excerpt_more($link)
        {
        }
        /**
         * Handles the infinite loop that could happen when the excerpt filtering fires as a consequence of a
         * `Lazy_String` resolution in the `tribe_get_event` function.
         *
         * To correctly apply the `read-more` template, and account for possible third-parties overrides, we need the
         * result of a call to the `tribe_get_event` function.
         * If object caching is active that function will be fired on `shutdown` and will resolve all of its `Lazy_String`
         * instances.
         * One of those is the one holding the value of the filtered post excerpt.
         * This will cause an infinite loop if not handled.
         *
         * @since 5.0.0
         *
         * @param callable $function The function that should be resolved avoiding a filter infinite loop.
         *
         * @return mixed The result value of the function call.
         */
        protected function avoiding_filter_loop(callable $function)
        {
        }
    }
    /**
     * Class Featured_Title
     *
     * @since   5.1.5
     *
     * @package Tribe\Events\Views\V2\Template
     */
    class Featured_Title
    {
        /**
         * Filter the plural events label for Featured V2 Views.
         *
         * @since 5.1.5
         *
         * @param string  $label   The plural events label as it's been generated thus far.
         * @param Context $context The context used to build the title, it could be the global one, or one externally
         *                         set.
         *
         * @return string the original label or updated label for virtual archives.
         */
        public function filter_views_v2_wp_title_plural_events_label($label, \Tribe__Context $context)
        {
        }
    }
    /**
     * Class JSON_LD
     *
     * @since 5.0.3
     *
     * @package Tribe\Events\Views\V2\Template
     */
    class JSON_LD
    {
        /**
         * Fires to Print JSON LD to Single Event.
         *
         * @since 5.0.3
         */
        public function print_single_json_ld()
        {
        }
    }
    class Page
    {
        /**
         * Makes sure we save the current post before hijacking for a page.
         *
         * @since  5.0.2
         *
         * @var array[ WP_Post ] $hijacked_post All WP_Posts on this query.
         */
        protected $hijacked_posts;
        /**
         * Determines the Path for the PHP file to be used as the main template.
         * For Page base template setting it will select from theme or child theme.
         *
         * @since  4.9.2
         *
         * @return string Path for the Page template to be loaded.
         */
        public function get_path()
        {
        }
        /**
         * Fires when the loop starts, and tries to hijack the loop for post.
         *
         * @since  4.9.10
         *
         * @param  WP_Query  $query  Main WordPress query where we are hijacking the_content.
         *
         * @return void              Action hook with no return.
         */
        public function hijack_on_loop_start(\WP_Query $query)
        {
        }
        /**
         * When using Page template we need to specifically hijack the WordPress templating
         * system at a specific point after `loop_start`.
         *
         * @since  4.9.2
         *
         * @param  WP_Query $query WordPress query executed to get here.
         *
         * @return boolean         Whether we did hijack the post or not.
         */
        public function maybe_hijack_page_template(\WP_Query $query)
        {
        }
        /**
         * Remove any possible comments template from Page that the theme might have.
         *
         * @todo  Take in consideration tribe_get_option( 'showComments', false ) values later on.
         *
         * @since  4.9.2
         *
         * @return bool  False to remove comments on the Event Page template.
         */
        public function filter_remove_comments()
        {
        }
        /**
         * Determines if we have hijacked posts for this request.
         *
         * @since  5.0.2
         *
         * @return bool Did we hijack posts on this request.
         */
        public function has_hijacked_posts()
        {
        }
        /**
         * Gets the hijacked posts that we stored.
         *
         * @since  5.0.2
         *
         * @return array[ WP_Post ] Posts that we hijacked earlier.
         */
        public function get_hijacked_posts()
        {
        }
        /**
         * Sets the hijacked posts for later restoring.
         *
         * @since  5.0.2
         *
         * @param array[WP_Post] $posts Which posts to be set as the one hijacked.
         *
         * @return void                 No return when setting hijacked posts.
         */
        public function set_hijacked_posts(array $posts)
        {
        }
        /**
         * Prevents the Edit link to ever be displayed on any well designed theme.
         * Ideally this method is here to return an empty string for the Mock Page.
         *
         * @since  4.9.2
         *
         * @param  string     $url     Old URL for editing the post
         * @param  string|int $post_id Post ID in question
         *
         * @return string              Modify the link to return nothing for when we hijacked the page.
         */
        public function filter_prevent_edit_link($url, $post_id)
        {
        }
        /**
         * Inject a Ghost Post into `the_post`
         *
         * @since  4.9.2
         *
         * @return void  Action hook with no return.
         */
        public function hijack_the_post()
        {
        }
        /**
         * Depending on params from Default templating for events we will Hijack the main query for events to mimic a
         * ghost page element so the theme can properly run `the_content` so we can hijack the content of that page as
         * well as `the_title`.
         *
         * @since  4.9.2
         *
         * @return boolean Whether we hijacked the main query or not.
         */
        public function maybe_hijack_main_query()
        {
        }
        /**
         * Restored the Hijacked posts from the main query so that we can run
         * the template method properly with a fully populated WP_Query object.
         *
         * @global WP_Query $wp_query Global WP query we are dealing with.
         *
         * @since 4.9.2
         *
         * @return void Action hook with no return.
         */
        public function restore_main_query()
        {
        }
        /**
         * Prevents Looping multiple pages when including Page templates by modifying the global WP_Query object by
         * pretending there are no posts to loop
         *
         * @since 4.9.2
         *
         * @return void Action hook with no return.
         */
        protected function prevent_page_looping()
        {
        }
        /**
         * Include our own Page template into `the_content` of their Page template
         *
         * @todo  Integrate with Template + Context classes
         *
         * @since [5.11.0] Now running do_shortcode() on content returned, since we are inserting our output in lieu of the_content results
         *
         * @since  4.9.2
         *
         * @param  string $content Default content of the page we hijacked
         *
         * @return string          HTML for the view when using Page Template.
         */
        public function filter_hijack_page_content($content = '')
        {
        }
        /**
         * When using Page template we need to specifically hijack the WordPress templating
         * system at a specific point after `loop_start`.
         *
         * @since  4.9.2
         *
         * @param  WP_Query $query WordPress query executed to get here.
         *
         * @return boolean         Should we hijack to use page template.
         */
        public function should_hijack_page_template(\WP_Query $query)
        {
        }
        /**
         * Object to allow the Bootstrap to manipulate page Requests and avoid 404s when
         * no events are available by default.
         *
         * @since  4.9.2
         *
         * @return object A Mocked stdClass that mimics a WP_Post.
         */
        protected function get_mocked_page()
        {
        }
    }
    /**
     * Class Promo
     *
     * @since   5.1.5
     *
     * @package Tribe\Events\Views\V2\Template
     */
    class Promo
    {
        /**
         * Include the promo banner after the after component.
         *
         * @since 5.1.5
         *
         * @param string   $file     Complete path to include the PHP File.
         * @param array    $name     Template name.
         * @param Template $template Current instance of the Template.
         *
         * @return void  Template render has no return.
         */
        public function action_add_promo_banner($file, $name, $template)
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Template\Settings {
    class Advanced_Display
    {
        /**
         * Key for the Before HTML settings on the tribe option.
         *
         * @since  4.9.11
         *
         * @var string
         */
        public static $key_before_events_html = 'tribeEventsBeforeHTML';
        /**
         * Key for the After HTML settings on the tribe option.
         *
         * @since  4.9.11
         *
         * @var string
         */
        public static $key_after_events_html = 'tribeEventsAfterHTML';
        /**
         * Fetches from the tribe options setting the string for the before events,
         * applies all the required methods for proper usage and returns it.
         *
         * @since  4.9.11
         *
         * @param  View_Interface|null $view Instance of the view we are getting this for.
         *
         * @return string HTML with all the methods have been applied to it.
         */
        public function get_before_events_html($view = null)
        {
        }
        /**
         * Fetches from the tribe options setting the string for after the events,
         * applies all the required methods for proper usage and returns it.
         *
         * @since  4.9.11
         *
         * @param  View_Interface|null $view Instance of the view we are getting this for.
         *
         * @return string HTML with all the methods have been applied to it.
         */
        public function get_after_events_html($view = null)
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Template {
    /**
     * Class Title
     *
     * @since   4.9.10
     *
     * @package Tribe\Events\Views\V2\Template
     */
    class Title
    {
        /**
         * The instance of the Context object that will be used to build the title, the global one otherwise.
         *
         * @since 4.9.10
         *
         * @var Context
         */
        protected $context;
        /**
         * An array of the events matching the query the title should be built for.
         *
         * @since 4.9.10
         *
         * @var array
         */
        protected $posts;
        /**
         * The plural Events label.
         *
         * @since 4.9.10
         *
         * @var string
         */
        protected $events_label_plural;
        /**
         * Title constructor.
         *
         * @since 4.9.10
         */
        public function __construct()
        {
        }
        /**
         * Builds and returns the page title, to be used to filter the `wp_title` tag.
         *
         * @since 4.9.10
         *
         * @param string      $title The page title built so far.
         * @param null|string $sep   The separator sequence to separate the title components.
         * @param boolean     $depth Whether to display the taxonomy hierarchy as part of the title.
         *
         * @return string the filtered page title.
         */
        public function filter_wp_title($title, $sep = null, $depth = false)
        {
        }
        /**
         * A list of the taxonomies that might affect the title of the page.
         *
         * @since 6.2.0
         *
         * @return array<string> List of taxonomy slugs.
         */
        protected function get_taxonomies() : array
        {
        }
        /**
         * Builds the page title from a context.
         *
         * This method is a rewrite of the `tribe_get_events_title` function to make it leverage the local context,
         * injectable and controllable, in place of the global one.
         *
         * @since 4.9.10
         * @since 5.1.5 - Add filter for plural events label and move featured label to a method.
         *
         * @param string      $current_title Current Title used on the page.
         * @param boolean     $depth         Whether to display the taxonomy hierarchy as part of the title.
         * @param null|string $sep           The separator sequence to separate the title components.
         *
         * @return string The page title.
         */
        public function build_title($current_title = '', $depth = true, $sep = null)
        {
        }
        /**
         * Builds the title for a range of posts.
         *
         * @since 4.9.10
         * @since 6.0.14 Changed function scope, and moved internal var to param.
         *
         * @param Context $context    The context to use to build the title.
         * @param mixed   $event_date The event date object, string or timestamp.
         * @param array   $posts      The list of WP_Post objects found for this page.
         *
         * @return array The built post range title.
         */
        public static function build_post_range_title(\Tribe__Context $context, $event_date, array $posts)
        {
        }
        /**
         * Filters and returns the `title` part of the array produced by the  `wp_get_document_title` function.
         *
         * @since 4.9.10
         *
         * @param array $title The document title parts.
         *
         * @return array The filtered document title parts.
         */
        public function filter_document_title_parts(array $title = [])
        {
        }
        /**
         * Sets the context this title object should use to build the title.
         *
         * @since 4.9.10
         *
         * @param Context|null $context The context to use, `null` values will unset it causing the object ot use the
         *                              global context.
         *
         * @return $this For chaining.
         */
        public function set_context(\Tribe__Context $context = null)
        {
        }
        /**
         * Sets the posts this object should reference to build the title.
         *
         * We build some title components with notion of what events we found for a View. Here we set them.
         *
         * @since 4.9.10
         *
         * @param array|null $posts  An array of posts matching the context query, `null` will unset it causing the object
         *                           to use the posts found by the global `$wp_query` object.
         *
         * @return $this For chaining.
         */
        public function set_posts(array $posts = null)
        {
        }
        /**
         * Returns the post the title should use to build some title fragments.
         *
         * @since 4.9.10
         *
         * @return array An array of injected posts, or the globally found posts.
         */
        protected function get_posts()
        {
        }
        /**
         * Builds the Month view title.
         *
         * @since 4.9.10
         *
         * @param mixed $event_date The date to use to build the title.
         *
         * @return string The Month view title.
         */
        public function build_month_title($event_date)
        {
        }
        /**
         * Builds the Day view title.
         *
         * @since 4.9.10
         *
         * @param mixed $event_date The date to use to build the title.
         *
         * @return string The Day view title.
         */
        protected function build_day_title($event_date)
        {
        }
        /**
         * Builds, wrapping the current title, the Event Category archive title.
         *
         * @since 4.9.10
         * @since 5.12.3 Added params, refined logic around category archive titles.
         *
         * @param string      $title     The input title.
         * @param  \WP_Term   $cat       The category term to use to build the title.
         * @param boolean     $depth     Whether to display the taxonomy hierarchy as part of the title.
         * @param null|string $separator The separator sequence to separate the title components.
         *
         * @return string The built category archive title.
         */
        protected function build_category_title($title, $cat, $depth = true, $separator = ' &#8250; ')
        {
        }
    }
}
namespace Tribe\Events\Views\V2 {
    /**
     * Class Template_Bootstrap
     *
     * @since   4.9.2
     *
     * @package Tribe\Events\Views\V2
     */
    class Template_Bootstrap
    {
        /**
         * A cache array shared among instances.
         *
         * @since 5.0.1
         *
         * @var array<string,array>
         */
        protected static $cache = ['should_load' => []];
        /**
         * An instance of the Template Manager object.
         *
         * @since 4.9.11
         *
         * @var Manager
         */
        protected $manager;
        /**
         * Template_Bootstrap constructor.
         *
         * @param Manager $manager An instance of the manager object.
         */
        public function __construct(\Tribe\Events\Views\V2\Manager $manager)
        {
        }
        /**
         * Disables the Views V1 implementation of a Template Hijack
         *
         * @since  4.9.2
         *
         * @return void
         */
        public function disable_v1()
        {
        }
        /**
         * Determines, with backwards compatibility in mind, which template user has selected
         * on the Events > Settings page as their base Default template.
         *
         * @since  4.9.2
         * @since 5.0.3 specifically pass 'event' to be clearer down the line where we check for custom templates.
         *
         * @return string Either 'event', 'page' or custom based templates
         */
        public function get_template_setting()
        {
        }
        /**
         * Based on the admin template setting we fetch the respective object
         * to handle the inclusion of the main file.
         *
         * @since  4.9.2
         * @since 5.0.3 inverted logic, as all the custom templates are page templates
         *
         * @return object
         */
        public function get_template_object()
        {
        }
        /**
         * Determines whether we are in a Single event page or not, base only on global context.
         *
         * @since  4.9.11
         *
         * @return bool Whether the current request is for the single event template or not.
         */
        public function is_single_event()
        {
        }
        /**
         * Fetches the HTML for the Single Event page using the legacy view system
         *
         * @since  4.9.4
         *
         * @return string
         */
        protected function get_v1_single_event_html()
        {
        }
        /**
         * Fetches the template for the Single Embed Event page using the legacy view system.
         *
         * @since  4.9.13
         *
         * @return string
         */
        protected function get_v1_embed_template_path()
        {
        }
        /**
         * Gets the View HTML
         *
         * @todo Stop handling kitchen sink template here.
         *
         * @since  4.9.2
         *
         * @return string
         */
        public function get_view_html()
        {
        }
        /**
         * Determines when we should bootstrap the template for The Events Calendar
         *
         * @since  4.9.2
         *
         * @param  WP_Query $query Which WP_Query object we are going to load on
         *
         * @return boolean Whether any template managed by this class should load at all or not.
         */
        public function should_load($query = null)
        {
        }
        /**
         * Filters the `template_include` filter to return the Views router template if required..
         *
         * @since 4.9.2
         *
         * @param string $template The template located by WordPress.
         *
         * @return string Path to the File that initializes the template
         */
        public function filter_template_include($template)
        {
        }
        /**
         * Set the correct body classes for our plugin.
         *
         * @since  4.9.11
         *
         * @return array The array containing the body classes
         */
        public function filter_add_body_classes($classes)
        {
        }
        /**
         * Contains the logic for if this object's classes should be added to the queue.
         *
         * @since 5.1.5
         *
         * @param boolean $add   Whether to add the class to the queue or not.
         * @param array   $class The array of body class names to add.
         * @param string  $queue The queue we want to get 'admin', 'display', 'all'.
         * @return boolean Whether body classes should be added or not.
         */
        public function should_add_body_class_to_queue($add, $class, $queue)
        {
        }
        /**
         * Add body classes.
         *
         * @since 5.1.5
         *
         * @return void
         */
        public function add_body_classes()
        {
        }
        /**
         * Filter the template file in case we're in single event
         * and we need to use the theme overrides.
         *
         * @since  5.0.0
         *
         * @param string $file      Complete path to include the PHP File
         * @param array  $name      Template name
         * @param object $template  Instance of the Tribe__Template
         *
         * @return string
         */
        public function filter_template_file($file, $name, $template)
        {
        }
    }
    class Theme_Compatibility extends \Tribe\Utils\Theme_Compatibility
    {
        /**
         * Fetches the correct class strings for theme and child theme if available.
         *
         * @since 4.9.3
         * @since 5.8.0 made an extension of Tribe\Utils\Theme_Compatibility.
         *
         * @deprecated 5.8.0
         *
         * @return array $classes
         */
        public function get_body_classes()
        {
        }
        /**
         * Add the theme to the body class.
         *
         * @since 4.9.3
         * @since 5.8.0 now uses static::get_compatibility_classes().
         *
         * @param  array $classes Classes that are been passed to the body.
         *
         * @deprecated 5.1.5
         *
         * @return array $classes
         */
        public function filter_add_body_classes(array $classes)
        {
        }
        /**
         * Contains the logic for if this object's classes should be added to the queue.
         *
         * @since 5.1.5
         * @since 5.8.0 now uses static::get_compatibility_classes().
         *
         * @param boolean $add   Whether to add the class to the queue or not.
         * @param array   $class The array of body class names to add.
         * @param string  $queue The queue we want to get 'admin', 'display', 'all'.
         * @return boolean Whether body classes should be added or not.
         */
        public function should_add_body_class_to_queue($add, $class, $queue)
        {
        }
        /**
         * Add body classes.
         *
         * @since 5.1.5
         * @since 5.8.0 now uses static::get_compatibility_classes().
         *
         * @return void
         */
        public function add_body_classes()
        {
        }
    }
    /**
     * Class Url
     *
     * @package Tribe\Events\Views\V2
     * @since   4.9.2
     */
    class Url
    {
        /**
         * The URL abstracted by the instance.
         *
         * @since 4.9.3
         *
         * @var string
         */
        protected $url = '';
        /**
         * An array of the default URL components produced by the `parse_url` function.
         *
         * @since 4.9.3
         *
         * @var array
         */
        protected static $default_url_components = ['scheme' => '', 'host' => '', 'port' => '', 'user' => '', 'pass' => '', 'path' => '', 'query' => '', 'fragment' => ''];
        /**
         * An array of the URL components as produced by the `parse_url` function.
         *
         * @since 4.9.3
         *
         * @var array
         */
        protected $components = [];
        /**
         * An array of the parsed query arguments from the URL.
         *
         * @since 4.9.3
         *
         * @var array
         */
        protected $query_args = [];
        /**
         * A flag to define how conflicts between parameters set in the query arguments and parameters set by the path
         * should be resolved.
         * If `false` then arguments parsed from the path will override the query ones, if `false` the arguments parsed from
         * the query will override the path ones.
         *
         * @var bool
         */
        protected $query_overrides_path = false;
        /**
         * Url constructor.
         *
         * @param null|string $url The url to build the object with or `null` to use the current URL.
         * @param bool $query_overrides_path A flag to define how conflicts between parameters set in the query
         *                                   arguments and parameters set by the path should be resolved.
         */
        public function __construct($url = null, $query_overrides_path = false)
        {
        }
        /**
         * Returns the slug of the view as defined in the URL.
         *
         * @since 4.9.2
         *
         * @return mixed|string The view slug as defined in the URL.
         */
        public function get_view_slug()
        {
        }
        /**
         * Returns the full URL this instance was built on.
         *
         * @since 4.9.3
         *
         * @return string The full URL this instance was built on; an empty string if the URL is not set.
         */
        public function __toString()
        {
        }
        /**
         * Returns the current page number for the URL.
         *
         * @since 4.9.3
         *
         * @return int The current page number if specified in the URL or the default value.
         */
        public function get_current_page()
        {
        }
        /**
         * Returns the current query arguments
         *
         * @since 4.9.3
         *
         * @return array Returns the current Query Arguments
         */
        public function get_query_args()
        {
        }
        /**
         * Parses the current URL and initializes its components.
         *
         * @since 4.9.3
         *
         * @return Url This object instance.
         */
        public function parse_url()
        {
        }
        /**
         * Adds query args to the object merging them with the current ones.
         *
         * @since 4.9.3
         *
         * @param array $query_args An associative array of query args to add to the object.
         *
         * @return $this The object instance.
         */
        public function add_query_args(array $query_args = [])
        {
        }
        /**
         * Sets whether the parameters set in the query should override the ones parsed by the path or not.
         *
         * By default path parameters will take precedence over query parameters.
         * When set to `false`  then `/events/list?eventDisplay=month` will result in an `eventDisplay=list`;
         * when set to `true` the resulting `eventDisplay` will be `month`.
         *
         * @since 4.9.3
         *
         * @param bool $query_overrides_path Whether the parameters set in the query should override the ones parsed by the
         *                                   path or not.
         *
         * @return Url This object instance to chain method calls.
         */
        public function query_overrides_path($query_overrides_path)
        {
        }
        /**
         * Returns the alias of the variable set in the Url query args, if any.
         *
         * @since 4.9.4
         *
         * @param              string $var The name of the variable to search an alias for.
         * @param Context|null $context The Context object to use to fetch locations, if `null` the global Context will be
         *                              used.
         *
         * @return false|string The variable alias set in the URL query args, or `false` if no alias was found.
         */
        public function get_query_arg_alias_of($var, \Tribe__Context $context = null)
        {
        }
        /**
         * Returns the value of a query arg set on the URL, or a default value if not found.
         *
         * @since 4.9.4
         *
         * @param      string $key The
         * @param null $default
         *
         * @return mixed
         */
        public function get_query_arg($key, $default = null)
        {
        }
        /**
         * Returns all the aliases of the variable set in the Url query args, if any.
         *
         * @since 4.9.9
         *
         * @param string       $var     The name of the variable to search the aliases for.
         * @param Context|null $context The Context object to use to fetch locations, if `null` the global Context will be
         *                              used.
         *
         * @return array An array of the variable aliases set in the URL query args.
         */
        public function get_query_args_aliases_of($var, \Tribe__Context $context = null)
        {
        }
        /**
         * Builds and returns an instance of the object taking care to parse additional parameters to use the correct URL.
         *
         * @since 4.9.10
         *
         * @param string $url The URL address to build the object on.
         * @param array  $params An array of additional parameters to parse; these parameters might be more up to date in
         *                       respect to the `$url` argument and will be used to build an instance of the class on the
         *                       correct URL. Passing an empty array here is, in fact, the same as calling
         *                       `new Url( $url )`;
         *
         * @return static The built instance of this class.
         */
        public static function from_url_and_params($url = null, array $params = [])
        {
        }
        /**
         * Differentiates two URLs with knowledge of rewrite rules to check if, resolved request arguments wise, they are
         * the same or not.
         *
         * @since 4.9.11
         *
         * @param string $url_a  The first URL to check.
         * @param string $url_b  The second URL to check.
         * @param array  $ignore An array of resolved query arguments that should not be taken into account in the check.
         *
         * @return bool Whether the two URLs, resolved request arguments wise, they are the same or not.
         */
        public static function is_diff($url_a, $url_b, array $ignore = [])
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Utils {
    /**
     * Class Utils Separators
     * @since   4.9.4
     * @package Tribe\Events\Views\V2\Utils
     */
    class Separators
    {
        /**
         * Determines if a given event from a list of events should have a month separator
         * for the List view template structure.
         *
         * Note that events will NOT be sorted by date for this check: this is by design. There are other criteria by which
         * events might be sorted this method should not interfere with.
         * The method will perform the check using the "display" date of the events since this is a front-end facing method.
         *
         * @since  4.9.4
         *
         * @param array                          $events       WP_Post or numeric ID for events.
         * @param \WP_Post|int                   $event        Event we want to check.
         * @param string|\DateTimeInterface|null $request_date A request date that should be used as context for the
         *                                                     evaluation.
         *
         * @return boolean Whether the event, in the context of this event set, should show the month separator or not.
         */
        public static function should_have_month($events, $event, $request_date = null)
        {
        }
        /**
         * Determines if a given event from a list of events should have a day separator
         * for some List view template structures (such as month view mobile/widget).
         *
         * Note that events will NOT be sorted by date for this check: this is by design. There are other criteria by which
         * events might be sorted this method should not interfere with.
         * The method will perform the check using the "display" date of the events since this is a front-end facing method.
         *
         * @since  4.6.0
         *
         * @param array                          $events       WP_Post or numeric ID for events.
         * @param \WP_Post|int                   $event        Event we want to check.
         * @param string|\DateTimeInterface|null $request_date A request date that should be used as context for the
         *                                                     evaluation.
         *
         * @return boolean Whether the event, in the context of this event set and request date, should show the separator or not.
         */
        public static function should_have_day($events, $event, $request_date = null)
        {
        }
        /**
         * Determines if a given event from a list of events should have a time separator
         * for the Day view template structure. Rounded down to the hour.
         *
         * @since  4.9.5
         *
         * @param  array       $events WP_Post or numeric ID for events.
         * @param  \WP_Post|int $event  Event we want to check.
         *
         * @return boolean
         */
        public static function should_have_time($events, $event)
        {
        }
        /**
         * Determines if a given event from a list of events should have a type separator
         * for the day view template structure.
         *
         * @since  4.9.11
         *
         * @param  array       $events WP_Post or numeric ID for events.
         * @param  WP_Post|int $event  Event we want to determine.
         *
         * @return boolean
         */
        public static function should_have_type(array $events, \WP_Post $event)
        {
        }
    }
    /**
     * Class Stack
     *
     * @since   4.9.7
     * @package Tribe\Events\Views\V2\Utils
     */
    class Stack
    {
        /**
         * The current day, in the `Y-m-d` format.
         *
         * @since 4.9.7
         *
         * @var int|string
         */
        protected $current_day;
        /**
         * The current day events, a list of event post IDs.
         *
         * @since 4.9.7
         *
         * @var array
         */
        protected $day_events;
        /**
         * An associative array relating each event ID to its current position in the stack.
         *
         * @var array
         */
        protected $stack_positions;
        /**
         * The current stack.
         *
         * @since 4.9.7
         *
         * @var array
         */
        protected $stack;
        /**
         * Whether to "recycle" the empty stack spaces, where possible, or not..
         *
         * @since 4.9.7
         *
         * @var bool
         */
        protected $recycle_space;
        /**
         * The spacer currently used to mark empty spaces in the stack.
         *
         * @since 4.9.7
         *
         * @var mixed
         */
        protected $spacer;
        /**
         * A flag to indicate whether the stack elements should be normalized or not.
         *
         * @since 4.9.7
         *
         * @var bool
         */
        protected $normalize_stack;
        /**
         * Builds and returns the stack for a group of events, divided by days.
         *
         * @since 4.9.7
         *
         * @param array      $events_by_day   An array of events, per-day, in the shape `[ <Y-m-d> => [ ...<event_ids> ] ]`.
         *
         * @param null|mixed $spacer          The spacer that should be used to indicate an empty space in the stack.
         *                                    Defaults to the filtered spacer.
         * @param null|bool  $recycle_space   Whether to recycle spaces or not; defaults to the filtered value.
         * @param null|bool $normalize_stack  Whether to normalize the stack by padding the bottom of it with spacers or
         *                                    not; defaults to the filtered value.
         *
         * @return array An associative array of days, each with the events "stacked", including spacers, in the shape:
         *               `[
         *                  <Y-m-d> => [<event_1>, <event_2>, <spacer> ],
         *                  <Y-m-d> => [<event_1>, <event_2>, <event_3> ],
         *                  <Y-m-d> => [<event_1>, <spacer>, <event_3> ],
         *                ]`
         *              and so on. Each stack column (a day) will be padded with spacers to have consistent stack height
         *               which means that all arrays in the stack will have the same length.
         */
        public function build_from_events(array $events_by_day = [], $spacer = null, $recycle_space = null, $normalize_stack = null)
        {
        }
        /**
         * Returns the "spacer" used to indicate an empty space in the stack.
         *
         * @since 4.9.7
         *
         * @return mixed The spacer used to indicate an empty space in the stack.
         */
        public function get_spacer()
        {
        }
        /**
         * Filters and returns a value indicating whether the stack should be built "recycling" spaces or not.
         *
         * @since 4.9.7
         *
         * @param array $events_by_day An array of event IDs, divided by day, with shape `[ <Y-m-d> => [...<events>] ]`.
         *
         * @return bool Whether the stack should be built "recycling" spaces or not.
         */
        protected function should_recycle_spaces(array $events_by_day = [])
        {
        }
        /**
         * Builds and returns the stack for the current day.
         *
         * @since 4.9.7
         *
         * @param string $current_day    The current day date, in the `Y-m-d` format.
         * @param array  $the_day_events All the current day event post IDs.
         *
         * @return array The stack for the current day in the shape `[ <event_id>, <spacer>, <event_id>, ...]`.
         */
        protected function build_day_stack($current_day, array $the_day_events)
        {
        }
        /**
         * Filters an array of events to remove any event that should not be in the stack.
         *
         * The default filtering strategy, in the `filter_stack_event` method, will filter out any non multi-day event.
         * If, in the future, we'll need to change this strategy then either extend the class or use the .
         *
         * @since 4.9.7
         *
         * @param array $events An array of events, post objects or post IDs, to filter.
         *
         * @return array The filtered array of events.
         */
        protected function filter_stack_events($events)
        {
        }
        /**
         * Parses, and sets if required, the stack positions of each event, in the current day, in the stack.
         *
         * @since 4.9.7
         */
        protected function assign_day_events_position()
        {
        }
        /**
         * Normalizes the day stack by adding spacers in each empty position.
         *
         * @since 4.9.7
         *
         * @return array The day stack with each position, starting from the `0` position, filled with either an event ID or
         *               a spacer.
         */
        protected function fill_day_stack()
        {
        }
        /**
         * Normalize the stack by adding padding each stack day to make sure all days are present and have the same length.
         *
         * @since 4.9.7
         */
        protected function normalize_stack()
        {
        }
        /**
         * Checks an event to ensure it should be part of the stack.
         *
         * The default strategy is to filter out any non multi-day event, but extending classes can change this.
         *
         * @since 4.9.7
         *
         * @param int|\WP_Post $event The event post object or ID.
         *
         * @return bool Whether the event should be part of the stack or not.
         */
        protected function filter_stack_event($event)
        {
        }
        /**
         * Returns the filtered value to decide if the stack should be normalized or not padding each element with spacers
         * to the same height as the one of the stack elements with more events in it or not.
         *
         * @since 4.9.7
         *
         * @param array $events_by_day An array of event IDs, divided by day, with shape `[ <Y-m-d> => [...<events>] ]`.
         *
         * @return bool Whether the stack should be normalized by padding each one of its elements with spacers at the
         *              bottom or not.
         */
        protected function should_normalize_stack(array $events_by_day = [])
        {
        }
        /**
         * Adds the missing days in the passed events by day to make sure all dates in the period will appear.
         *
         * @since 4.9.7
         *
         * @param array $events_by_day The events part of the stack, divided by day.
         *
         * @return array The events part of the stack, divided by day with added missing days, if any.
         */
        protected function add_missing_days(array $events_by_day)
        {
        }
        /**
         * Assigns to each event the first available position in the day stack.
         *
         * This method will "fill" empty spaces in the stack to recycle the space.
         *
         * @since 4.9.9
         *
         * @param array $stack_positions        The currently assigned stack positions, in the shape
         *                                      `[ <id> => <position> ]`.
         * @param array $wo_position            An array of event post IDs for events that do not have a position assigned
         *                                      in the day stack.
         *
         * @return array An updated array of stack positions, in the shape `[ <id> => <position> ]`.
         */
        protected function assign_open_positions(array $stack_positions, array $events)
        {
        }
        /**
         * Assigns a stack postion to each event w/o one not recycling space.
         *
         * @since 4.9.9
         *
         * @param array $stack_positions The current stack positions.
         * @param array $event_ids       The events to position in the stack, events that already have a position will not
         *                               be re-positioned.
         *
         * @return array The finalized stack positions, where each event has been assigned a position in the stack.
         */
        protected function assign_next_positions(array $stack_positions, array $event_ids)
        {
        }
    }
    /**
     * Class Utils View
     * @since   4.9.4
     * @package Tribe\Events\Views\V2\Utils
     */
    class View
    {
        /**
         * Reads a view data entry from the current request.
         *
         * @since 4.9.4
         *
         * @param string|array $indexes One ore more indexes to check for in the view data.
         * @param null|mixed   $default The default value to return if the data is not found.
         *
         * @return mixed|null The view data, if found, or a default value.
         */
        public static function get_data($indexes, $default = null)
        {
        }
        /**
         * Based on the `permalink_structure` determines which variable the view should read `event_display_mode` for past
         * URL management.
         *
         * @since 5.0.0
         *
         * @return string URL Query Variable Key
         */
        public static function get_past_event_display_key()
        {
        }
        /**
         * Cleans the View data that will be printed by the `components/data.php` template to avoid its mangling.
         *
         * By default, the View data is a copy of the View template variables, to avoid the mangling of the JSON data
         * some entries of the data might require to be removed, some might require to be formatted or escaped.
         *
         * @since 5.1.5
         *
         * @param array<string,string|array> $view_data The initial View data.
         *
         * @return array<string,string|array> The filtered View data, some entries removed from it to avoid the data script
         *                                    being mangled by escaping and texturizing functions running on it.
         */
        public static function clean_data($view_data)
        {
        }
    }
}
namespace Tribe\Events\Views\V2 {
    /**
     * Interface View_Interface
     *
     * @package Tribe\Events\Views\V2
     * @since   4.9.2
     */
    interface View_Interface extends \Tribe\Events\Views\V2\Interfaces\View_Url_Provider_Interface, \Tribe\Events\Views\V2\Interfaces\Repository_User_Interface
    {
        /**
         * Returns a View HTML code.
         *
         * @since 4.9.2
         *
         * @return string
         */
        public function get_html();
        /**
         * Returns the view label.
         *
         * It is different from the dynamic get_label because it avoids building a whole instance just for the base label.
         *
         * @since  6.0.4
         *
         * @return string
         */
        public static function get_view_label() : string;
        /**
         * Returns a View label.
         *
         * @since  4.9.4
         *
         * @return string
         */
        public function get_label();
        /**
         * Returns if this view is publicly visible by default. Which will make it show up
         * on the events-bar of the views UI.
         *
         * @since 4.9.4
         * @since 4.9.11 Made the method static.
         *
         * @return bool
         */
        public static function is_publicly_visible();
        /**
         * Returns the context instance the view will render from.
         *
         * Views that have not been explicitly assigned a Context will use, and return here,
         * the global one.
         *
         * @since 4.9.2
         *
         * @return \Tribe__Context The View current Context instance or the global context if the view
         *                 has not been assigned a context.
         */
        public function get_context();
        /**
         * Sets, or unset, the View context.
         *
         * @since 4.9.2
         *
         * @param \Tribe__Context|null $context Either a context instance or null to make the View use the global one.
         */
        public function set_context(\Tribe__Context $context = null);
        /**
         * Sets the View slug, usually the one it was registered with in the `tribe_events_views` filter.
         *
         * @since 4.9.2
         * @deprecated 6.0.7
         *
         * @param string $slug The slug to set for the View instance.
         */
        public function set_slug($slug);
        /**
         * Returns a View slug, usually the one it was registered with in the `tribe_events_views` filter.
         *
         * @since 4.9.2
         * @deprecated 6.0.7
         *
         * @return string The view slug, usually the one it was registered with in the `tribe_events_views` filter.
         */
        public function get_slug();
        /**
         * Statically returns the View slug, thus not requiring the View be instantiated first.
         * Usually this is the one it was registered with in the `tribe_events_views` filter.
         *
         * @since 6.0.7
         *
         * @return string The view slug, usually the one it was registered with in the `tribe_events_views` filter.
         */
        public static function get_view_slug() : string;
        /**
         * Returns a View template path, usually a prefix for the template slug.
         *
         * @since 5.2.1
         *
         * @return string The view template path, usually a prefix for the template slug.
         */
        public function get_template_path();
        /**
         * Returns all the parent views that the current class as an array of slugs.
         *
         * @since 4.9.13
         *
         * @return string[] Array of string with the slugs of all the registered views.
         */
        public function get_parents_slug();
        /**
         * Returns all html classes for the view instance we are handling.
         *
         * @since 4.9.13
         *
         * @param array $classes  Array of classes that are going to be appended to this instance.
         *
         * @return string[]       Array of string with the classes used
         */
        public function get_html_classes(array $classes = []);
        /**
         * Returns a View template class.
         *
         * @since 4.9.2
         *
         * @return Template The template instance used by the View.
         */
        public function get_template();
        /**
         * Sets a view Template.
         *
         * @since 4.9.2
         *
         * @param Template $template The template instance the View should use.
         */
        public function set_template(\Tribe\Events\Views\V2\Template $template);
        /**
         * Sets up, by replacing the global query, the loop variables.
         *
         * The variables can be restored by using the `replace_the_loop` method.
         *
         * @since 4.9.3
         *
         * @param  array|null  $args An array of associative arguments used to setup the repository for the View.
         *
         */
        public function setup_the_loop(array $args = []);
        /**
         * Sets a View URL object either from some arguments or from the current URL.
         *
         * @since 4.9.3
         *
         * @param array|null $args   An associative array of arguments that will be mapped to the corresponding query
         *                           arguments by the View, or `null` to use the current URL.
         * @param bool       $merge  Whether to merge the arguments or override them.
         */
        public function set_url(array $args = null, $merge = false);
        /**
         * Returns the post IDs of the posts the View is displaying in the order it's displaying them.
         *
         * @since 4.9.4
         *
         * @return array An array of post IDs of the posts the view is currently displaying.
         */
        public function found_post_ids();
        /**
         * Returns the slug that should be used to find the View template.
         *
         * It's usually the same returned by the `View_Interface::get_slug` method but some Views might implement a
         * different logic (e.g. the `/all` view).
         *
         * @since 4.9.5
         *
         * @return string The slug that should be used to find the View template.
         */
        public function get_template_slug();
        /**
         * Sets the View template slug.
         *
         * @since 4.9.5
         *
         * @param string $slug The slug the View should use to locate its template.
         */
        public function set_template_slug($slug);
        /**
         * Returns the View template variables, as they would be set up and filtered before rendering the template.
         *
         * @since 4.9.7
         *
         * @return array An associative array of the View template variables.
         */
        public function get_template_vars();
        /**
         * Returns the URL to show the View for today.
         *
         * @since 4.9.8
         *
         * @param bool $canonical Whether to return the canonical, pretty, version of the URL or not; default to `false`.
         *
         * @return string
         */
        public function get_today_url($canonical = false);
        /**
         * Returns an array of user-facing messages the View will display on the front-end.
         *
         * @since 4.9.11
         *
         * @return array An array of user-facing messages the View will display on the front-end.
         */
        public function get_messages();
        /**
         * Returns the URL to get the View for a date and a set of arguments.
         *
         * @since 4.9.13
         *
         * @param string|int|\DateTimeInterface $date       The date to return the URL for.
         * @param array|string                  $query_args The query string or arguments to append to the URL.
         *
         * @return string The URL to fetch the View for a date.
         */
        public function url_for_query_args($date = null, $query_args = null);
        /**
         * Returns the Event post IDs the View would render in its template, but
         * filtered and formatted for iCalendar export.
         *
         * @since 4.6.0
         *
         * @param int $per_page The number of events per page to return.
         *
         * @return array<int> A filtered list of Event post IDs; note the order of the
         *                    result is NOT relevant as much as that the order that's been
         *                    used to fetch the Events.
         */
        public function get_ical_ids($per_page);
        /**
         * Disable the url management inside of the current view.
         *
         * @since 5.7.0
         *
         * @return View_Interface A reference to the View-like that is being directed.
         */
        public function disable_url_management();
        /**
         * Returns the View `en_US` and localized rewrite slugs.
         *
         * @since 6.0.7
         *
         * @return array<string> The View `en_US` and localized rewrite slugs.
         */
        public function get_rewrite_slugs() : array;
    }
}
namespace Tribe\Events\Views\V2\Views\Traits {
    /**
     * Trait Breakpoint_Behavior
     *
     * @since   5.0.0
     *
     * @package Tribe\Events\Views\V2\Views\Traits
     *
     * @property string $string The slug of the View instance.
     */
    trait Breakpoint_Behavior
    {
        /**
         * Default breakpoints used by TEC views.
         *
         * @since 5.0.0
         *
         * @var array
         */
        protected $default_breakpoints = ['xsmall' => 500, 'medium' => 768, 'full' => 960];
        /**
         * Returns a given breakpoint.
         *
         * @since 5.0.0
         *
         * @param string $name Which index we getting the breakpoint for.
         *
         * @return int   Returns the breakpoint with that given name or 0 when not available.
         */
        public function get_breakpoint($name)
        {
        }
        /**
         * Returns a given breakpoint pointer to a safer inline JS execution.
         *
         * @since 5.0.0.2
         *
         * @return int   Returns the breakpoint with that given name or 0 when not available.
         */
        public function get_breakpoint_pointer()
        {
        }
        /**
         * Returns all of the available breakpoints.
         *
         * @since 5.0.0
         *
         * @return array Indexed array of all available breakpoints.
         */
        public function get_breakpoints()
        {
        }
    }
    /**
     * Trait HTML_Cache
     *
     * @since   5.0.0
     *
     * @package Tribe\Events\Views\V2\Views
     *
     * @property Context $context The current View context.
     */
    trait HTML_Cache
    {
        /**
         * Return cached HTML if enabled and cache is set.
         *
         * @since 5.0.0
         * @since 6.1.4 Removing nonce injection.
         *
         * @return false|string Either the cached HTML contents, or `false` if the View HTML should not be cached or is not
         *                      cached yet.
         */
        public function maybe_get_cached_html()
        {
        }
        /**
         * Filters the cached HTML returned for a specific View.
         *
         * @since 4.6.0
         *
         * @param string $cached_html Cached HTML for a view.
         *
         * @return string The filtered cached HTML.
         */
        protected function filter_cached_html($cached_html)
        {
        }
        /**
         * If caching is enabled, set the cache.
         *
         * @since 5.0.0
         * @since 6.1.4 Removing nonce extraction.
         *
         * @param string $html HTML markup for view.
         *
         * @return boolean     Whether we successfully cached the View HTML or not.
         */
        public function maybe_cache_html($html)
        {
        }
        /**
         * Fetch the HTML cache invalidation triggers.
         *
         * @since 5.0.0
         *
         * @return array A list of the triggers, `Tribe__Cache_Listener` constants, that should be used to set the HTML
         *               cache invalidation conditions.
         */
        protected function cache_html_triggers()
        {
        }
        /**
         * Determine if HTML of the current view needs to be cached.
         *
         * @since 5.0.0
         *
         * @return bool Whether the View HTML should be cached or not.
         */
        public function should_cache_html()
        {
        }
        public static function get_cached_views($view = null)
        {
        }
        /**
         * Determine if HTML of the current view needs to be cached.
         *
         * @since 5.0.0
         *
         * @return string The cache key that should be used to retrieve the the HTML cache.
         */
        public function get_cache_html_key()
        {
        }
        /**
         * Indicates if HTML cache should be enabled or not.
         *
         * If the HTML cache setting itself is not enabled (or not set) then this
         * method will always return false.
         *
         * In other cases, the default rules are to cache everything in the 2 months past
         * to 12 months in the future range. This policy can be refined or replaced via
         * the 'tribe_events_enable_month_view_cache' filter hook.
         *
         * @since 5.0.0
         *
         * @param Context $context Context object of the request.
         *
         * @return bool
         */
        protected function should_enable_html_cache($context)
        {
        }
        /**
         * Returns the number of private events, `post_status => private`, currently in the database.
         *
         * The count is made database-wide to avoid having to fetch the View events (that would defeat the
         * purpose of caching) or running more complex logic.
         * The value is cached for a week or until an event is updated.
         *
         * @since 5.0.1
         *
         * @return int The number of events in the database that have a `post_status` of `private`.
         */
        protected function get_private_events_count()
        {
        }
        /**
         * Returns the count, an integer, of password-protected events in the database.
         *
         * The count is made database-wide to avoid having to fetch the View events (that would defeat the
         * purpose of caching) or running more complex logic.
         * The value is cached for a week or until an event is updated.
         *
         * @since 5.0.1
         *
         * @return int The number of password-protected events in the database.
         */
        protected function get_password_protected_events_count()
        {
        }
        /**
         * Returns a list of salts used to generate the HTML cache keys.
         *
         * Salts are used to diversify HTML caches depending on the user capabilities or any "wider" context.
         *
         * @since 5.0.1
         *
         * @return array<string,bool> A list of salts, properties of the wider context, used to generate the HTML cache key.
         */
        public function get_cache_html_key_salts()
        {
        }
        /**
         * Get the list of fields/input we will do replacement for HTML Cache.
         *
         * @since 5.0.0
         * @since 6.1.4 Deprecating for new nonce structure.
         *
         * @deprecated 6.1.4
         *
         * @return array   List of fields/input that we are going to replace.
         */
        protected function get_view_nonce_fields()
        {
        }
        /**
         * Get the list of attributes we will do replacement for HTML Cache.
         *
         * @since 5.0.0
         * @since 6.1.4 Deprecating for new nonce structure.
         *
         * @deprecated 6.1.4
         *
         * @return array   List of attributes that we are going to replace.
         */
        protected function get_view_nonce_attributes()
        {
        }
        /**
         * Get the list of JSON properties we will do replacement for HTML Cache.
         *
         * @since 5.0.0
         * @since 6.1.4 Deprecating for new nonce structure.
         *
         * @deprecated 6.1.4
         *
         * @return array   List of json properties that we are going to replace.
         */
        protected function get_view_nonce_json_properties()
        {
        }
        /**
         * Does string replacement on the HTML cached based on the possible places we look for cached nonce values to inject
         * the correct string placeholder so we can remove it later.
         *
         * @since 5.0.0
         * @since 6.1.4 Deprecating for new nonce structure.
         *
         * @deprecated 6.1.4
         *
         * @param string $html HTML with the nonces to be replaced.
         *
         * @return string  HTML after replacement is complete.
         */
        protected function extract_nonces_before_cache($html)
        {
        }
        /**
         * Does string replacement on the HTML cached based on the possible places we look for cached nonce values.
         *
         * @since 5.0.0
         * @since 6.1.4 Deprecating for new nonce structure.
         *
         * @deprecated 6.1.4
         *
         * @param string $html HTML with the nonces to be replaced.
         *
         * @return string  HTML after replacement is complete.
         */
        protected function inject_nonces_into_cached_html($html)
        {
        }
        /**
         * Get a generated nonce required for HTML cache replacement based on an action provided.
         *
         * @since 5.0.0
         * @since 6.1.4 Deprecating for new nonce structure.
         *
         * @deprecated 6.1.4
         *
         * @param string $action Which action will be used to generate the nonce.
         *
         * @return string  Nonce based on action passed.
         */
        protected function maybe_generate_nonce($action)
        {
        }
    }
    /**
     * Trait iCal_Data
     *
     * @since   5.1.0
     *
     * @package Tribe\Events\Views\V2\Views\Traits
     *
     * @property string $string The slug of the View instance.
     */
    trait iCal_Data
    {
        /**
         * Returns the iCal data we're sending to the view.
         *
         * @since 5.1.0
         *
         * @return object
         */
        public function get_ical_data()
        {
        }
        /**
         * Gets the iCal url for the month view.
         *
         * @since 5.1.0
         *
         * @return string The iCAl URL for the month view.
         */
        public function get_month_view_url()
        {
        }
    }
    /**
     * Trait Json_Ld_Data
     *
     * @since   5.0.2
     *
     * @package Tribe\Events\Views\V2\Views\Traits
     */
    trait Json_Ld_Data
    {
        /**
         * Build the JSON-LD markup for a View provided events.
         *
         * @since 5.0.2
         *
         * @param array<\WP_Post|int|array<string,int>> $events Either a list of event post objects or IDs (e.g. List View)
         *                                                      or a map of days and events per day (e.g. Month View).
         *
         * @return string The JSON-LD information corresponding to the events, or an empty string if there are no events
         *                or there was an issue building the JSON-LD output.
         */
        protected function build_json_ld_data(array $events = [])
        {
        }
    }
}
namespace Tribe\Events\Views\V2 {
    /**
     * Class View
     *
     * @since   4.9.2
     * @package Tribe\Events\Views\V2
     */
    class View implements \Tribe\Events\Views\V2\View_Interface
    {
        use \Tribe\Events\Views\V2\Views\Traits\Breakpoint_Behavior;
        use \Tribe\Events\Views\V2\Views\Traits\HTML_Cache;
        use \Tribe\Events\Views\V2\Views\Traits\iCal_Data;
        use \Tribe\Events\Views\V2\Views\Traits\Json_Ld_Data;
        /**
         * An instance of the DI container.
         *
         * @var Container
         */
        protected static $container;
        /**
         * An instance of the context the View will use to render, if any.
         *
         * @var Context
         */
        protected $context;
        /**
         * The slug of the View instance, usually the one it was registered with in the `tribe_events_views`filter.
         *
         * This value will be set by the `View::make()` method while building a View instance.
         *
         * @deprecated 6.0.7
         *
         * @var string
         */
        protected $slug = 'view';
        /**
         * The static instance of the View instance slug, usually the one it was registered with in the `tribe_events_views`filter.
         *
         * This value will be set by the `View::make()` method while building a View instance.
         *
         * @since 6.0.7
         *
         * @var string
         */
        protected static $view_slug = 'view';
        /**
         * The template slug the View instance will use to locate its template files.
         *
         * This value will be set by the `View::make()` method while building a View instance.
         *
         * @var string
         */
        protected $template_slug;
        /**
         * The template path will be used as a prefix for template slug when locating its template files.
         *
         * @since 5.2.1
         *
         * @var string
         */
        protected $template_path = '';
        /**
         * The Template instance the view will use to locate, manage and render its template.
         *
         * This value will be set by the `View::make()` method while building a View instance.
         *
         * @var Template
         */
        protected $template;
        /**
         * The repository object the View is currently using.
         *
         * @var Repository
         */
        protected $repository;
        /**
         * The URL object the View is currently.
         *
         * @var Url
         */
        protected $url;
        /**
         * An associative array of global variables backed up by the view before replacing the global loop.
         *
         * @since 4.9.3
         *
         * @var array
         */
        protected $global_backup;
        /**
         * Whether a given View is visible publicly or not.
         *
         * @since 4.9.4
         * @since 4.9.11 Made the property static.
         *
         * @var bool
         */
        protected static $publicly_visible = false;
        /**
         * An associative array of the arguments used to setup the repository filters.
         *
         * @since 4.9.3
         *
         * @var array
         */
        protected $repository_args = [];
        /**
         * Stores the filtered global repository args. These args will be baked into all event queries.
         *
         * @since 6.0.5
         *
         * @var null|array<string,mixed> Will be null until compiled by the getter.
         */
        protected $global_repository_args = null;
        /**
         * The key that should be used to indicate the page in an archive.
         * Extending classes should not need to modify this.
         *
         * @since 4.9.4
         *
         * @var string
         */
        protected $page_key = 'paged';
        /**
         * Indicates whether there are more events beyond the current view
         *
         * @since 5.0.0
         *
         * @var bool
         */
        protected $has_next_event = false;
        /**
         * Whether the View instance should manage the URL
         *
         * @since 4.9.7
         *
         * @var bool
         */
        protected $should_manage_url = true;
        /**
         * A collection of user-facing messages the View should display.
         *
         * @since 4.9.11
         *
         * @var Messages
         */
        protected $messages;
        /**
         * Whether this View should reset the page/pagination or not.
         * This acts as an instance cache for the `View::should_reset_page` method.
         *
         * @since 4.9.11
         *
         * @var bool
         */
        protected $should_reset_page;
        /**
         * Whether the View should display the events bar or not.
         *
         * @since 4.9.11
         *
         * @var bool
         */
        protected $display_events_bar = true;
        /**
         * The instance of the rewrite handling class to use.
         * Extending classes can override this to use more specific rewrite handlers (e.g. PRO Views).
         *
         * @since 4.9.13
         *
         * @var TEC_Rewrite
         */
        protected $rewrite;
        /**
         * A flag property to indicate whether the View date is part of the "pretty" URL (true) or is supported only as
         * a query argument like. `tribe-bar-date` (false).
         *
         * @var bool
         */
        protected static $date_in_url = true;
        /**
         * Cached URLs
         *
         * @since 5.0.0
         *
         * @var array
         */
        protected $cached_urls = [];
        /**
         * The translated label string for the view.
         * Subject to later filters.
         *
         * @since 6.0.4
         *
         * @var string
         */
        protected static $label = 'View';
        /**
         * Configuration instance.
         *
         * @since 6.1.3
         *
         * @var Configuration
         */
        protected \TEC\Common\Configuration\Configuration $config;
        /**
         * View constructor.
         *
         * @since 4.9.11
         *
         * @param Messages|null $messages An instance of the messages collection.
         */
        public function __construct(\Tribe\Events\Views\V2\Messages $messages = null)
        {
        }
        /**
         * Builds a View instance in response to a REST request to the Views endpoint.
         *
         * @since 4.9.2
         *
         * @param \WP_REST_Request $request
         *
         * @return \Tribe\Events\Views\V2\View_Interface
         */
        public static function make_for_rest(\WP_REST_Request $request)
        {
        }
        /**
         * Builds and returns an instance of a View by slug or class.
         *
         * @since  4.9.2
         *
         * @param string       $view       The view slug, as registered in the `tribe_events_views` filter, or class.
         * @param Context|null $context    The context this view should render from; if not set then the global
         *                                 one will be used.
         *
         * @return View_Interface An instance of the built view.
         */
        public static function make($view = null, \Tribe__Context $context = null)
        {
        }
        /**
         * Gets an inheritance list for the current class, will only include valid Views, so the abstract and interface are
         * not included.
         *
         * @since 6.2.0
         *
         * @param bool $with_current     Should include the current class in the inheritance list or not.
         * @param bool $ignore_reflector Ignore reflector class in the inheritance list.
         *
         * @return array
         */
        public function get_inheritance(bool $with_current = true, bool $ignore_reflector = true) : array
        {
        }
        /**
         * Sets the DI container the class should use to build views.
         *
         * @since 4.9.2
         *
         * @param Container $container The DI container instance to use.
         *
         */
        public static function set_container(\Tribe__Container $container)
        {
        }
        /**
         * Sends, echoing it and exiting, the view HTML on the page.
         *
         * @since 4.9.2
         *
         * @param null|string $html A specific HTML string to print on the page or the HTML produced by the view
         *                          `get_html` method.
         *
         */
        public function send_html($html = null)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_html()
        {
        }
        /**
         * Returns the view label value after filtering.
         *
         * This is the method you want to overwrite to replace the label for a view with translations.
         *
         * @since 6.0.4
         *
         * @return string
         */
        public static function get_view_label() : string
        {
        }
        /**
         * Filters the view label value allowing changes to be made.
         *
         * @since 6.0.4
         *
         * @param string $label Which label we are filtering for.
         *
         * @return string
         */
        protected static function filter_view_label(string $label) : string
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_label()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_context()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function set_context(\Tribe__Context $context = null)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_slug()
        {
        }
        /**
         * {@inheritDoc}
         */
        public static function get_view_slug() : string
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_template_path()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_parents_slug()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_html_classes(array $classes = [])
        {
        }
        /**
         * {@inheritDoc}
         */
        public function set_slug($slug)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_template()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function set_template(\Tribe\Events\Views\V2\Template $template)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_url($canonical = false, $force = false)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function next_url($canonical = false, array $passthru_vars = [])
        {
        }
        /**
         * {@inheritDoc}
         */
        public function prev_url($canonical = false, array $passthru_vars = [])
        {
        }
        /**
         * Filters URL query args with a predictable filter
         *
         * @since 5.0.0
         *
         * @param array $query_args An array of query args that will be used to build the URL for the View.
         * @param bool  $canonical  Whether the URL should be the canonical one or not.
         *
         * @return array            Filtered array of query arguments.
         */
        public function filter_query_args($query_args, $canonical)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_url_object()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function set_repository(\Tribe__Repository__Interface $repository = null)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_repository()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function setup_the_loop(array $args = [])
        {
        }
        /**
         * {@inheritDoc}
         */
        public function restore_the_loop()
        {
        }
        /**
         * Sets a View URL object either from some arguments or from the current URL.
         *
         * @since 4.9.3
         *
         * @param array|null $args   An associative array of arguments that will be mapped to the corresponding query
         *                           arguments by the View, or `null` to use the current URL.
         * @param bool       $merge  Whether to merge the arguments or override them.
         */
        public function set_url(array $args = null, $merge = false)
        {
        }
        /**
         * Maps a set of arguments to query arguments, ready to be appended to a URL.
         *
         * @since 4.9.3
         *
         * @param array $args An associative array of arguments to map (translate) to query arguments.
         *
         * @return array An associative array of query arguments mapped from the input ones.
         */
        protected function map_args_to_query_args(array $args = null)
        {
        }
        /**
         * Filters the array of values that a View will set on the Template before rendering it.
         *
         * Template variables are exported, alongside being set, in the template context: the keys of the variables array
         * will become the names of the exported variables.
         *
         * @since 4.9.3
         *
         * @param array $template_vars An associative array of variables that will be set, and exported, in the template.
         *
         * @return array An associative array of variables that will be set, and exported, in the template.
         */
        protected function filter_template_vars(array $template_vars)
        {
        }
        /**
         * Sets up the View repository arguments from the View context or a provided Context object.
         *
         * @since 4.9.3
         * @since 6.0.5 Now will merge a "global" repository arg filter, which will be applied elsewhere as well as this
         *                primary repository query.
         *
         * @param Context|null $context A context to use to setup the args, or `null` to use the View Context.
         *
         * @return array The arguments, ready to be set on the View repository instance.
         */
        protected function setup_repository_args(\Tribe__Context $context = null)
        {
        }
        /**
         * Filters the offset value separate from the posts_per_page/paged calculation.
         *
         * This allows us to save a query when determining pagination for list-like views.
         *
         * @since 5.0.0
         * @since 5.15.2 Ensure our max() gets all ints, for math reasons.
         *
         * @param null|int  $offset_override Offset override value.
         * @param \WP_Query $query           WP Query object.
         *
         * @return null|int
         */
        public function filter_repository_query_arg_offset_override($offset_override, $query)
        {
        }
        /**
         * Filters the current URL returned for a specific View.
         *
         * @since 4.9.3
         *
         * @param bool   $canonical Whether the normal or canonical version of the next URL is being requested.
         * @param string $url       The previous URL, this could be an empty string if the View does not have a next.
         *
         * @return string The filtered previous URL.
         */
        protected function filter_view_url($canonical, $url)
        {
        }
        /**
         * Filters the previous (page, event, etc.) URL returned for a specific View.
         *
         * @since 4.9.3
         *
         * @param bool   $canonical Whether the normal or canonical version of the next URL is being requested.
         * @param string $url       The previous URL, this could be an empty string if the View does not have a next.
         *
         * @return string The filtered previous URL.
         */
        protected function filter_prev_url($canonical, $url)
        {
        }
        /**
         * Filters the next (page, event, etc.) URL returned for a specific View.
         *
         * @since 4.9.3
         *
         * @param bool   $canonical Whether the normal or canonical version of the next URL is being requested.
         * @param string $url       The next URL, this could be an empty string if the View does not have a next.
         *
         * @return string The filtered next URL.
         */
        protected function filter_next_url($canonical, $url)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function found_post_ids()
        {
        }
        /**
         * {@inheritDoc}
         */
        public static function is_publicly_visible()
        {
        }
        /**
         * Sets the has_next_event boolean flag, which determines if we have events in the next page.
         *
         * This flag is required due to being required to optimize the determination of whether
         * there are future events, we increased events_per_page by +1 during setup_repository_args. Because of that
         * if the number of events returned are greater than events_per_page, we need to
         * pop an element off the end and set a boolean.
         *
         * @since 5.0.0
         *
         * @param boolean $value Which value will be set to has_next_event, will be casted as boolean.
         *
         * @return mixed         Value passed after being saved and casted as boolean.
         */
        public function set_has_next_event($value)
        {
        }
        /**
         * Determines from a given array of events if we have next events or not.
         *
         * @since 5.0.0
         *
         * @param array   $events         Array that will be counted to verify if we have events.
         * @param boolean $overwrite_flag If we should overwrite the flag when we discover the result.
         *
         * @return mixed                   Weather the array of events has a next page.
         */
        public function has_next_event(array $events, $overwrite_flag = true)
        {
        }
        /**
         * Get if we have events in the next page.
         *
         * @since 5.16.0
         *
         * @return boolean Weather the View has events in the next page.
         */
        public function get_has_next_event()
        {
        }
        /**
         * Sets up the View template variables.
         *
         * @since 4.9.4
         * @since 5.2.1 Add the `rest_method` to the template variables.
         *
         * @return array An array of Template variables for the View Template.
         */
        protected function setup_template_vars()
        {
        }
        /**
         * Filters the repository arguments that will be used to set up the View repository instance.
         *
         * @since 4.9.5
         *
         * @param array        $repository_args The repository arguments that will be used to set up the View repository instance.
         * @param Context|null $context         Either a specific Context or `null` to use the View current Context.
         *
         * @return array The filtered repository arguments.
         */
        protected function filter_repository_args(array $repository_args, \Tribe__Context $context = null)
        {
        }
        /**
         * Returns the View request URI.
         *
         * This value can be used to set the `$_SERVER['REQUEST_URI']` global when rendering the View to make sure WordPress
         * functions relying on that value will work correctly.
         *
         * @since 4.9.5
         *
         * @return string The View request URI, a value suitable to be used to set the `$_SERVER['REQUEST_URI']` value.
         */
        protected function get_request_uri()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_template_slug()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function set_template_slug($template_slug)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_template_vars()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_today_url($canonical = false)
        {
        }
        /**
         * Builds the link label to use from the URL.
         *
         * This is usually used to build the next and prev link URLs labels.
         * Extending classes can customize the format of the the label by overriding the `get_label_format` method.
         *
         * @todo  @bordoni move this method to a supporting class.
         *
         * @see   View::get_label_format(), the method child classes should override to customize the link label format.
         *
         * @since 4.9.9
         *
         * @param string $url The input URL to build the link label from.
         *
         * @return string The formatted and localized, but not HTML escaped, link label.
         */
        public function get_link_label($url)
        {
        }
        /**
         * Returns the date format, a valid PHP `date` function format, that should be used to build link labels.
         *
         * This format will, usually, apply to next and previous links.
         *
         * @todo  @bordoni move this method to a supporting class.
         *
         * @see   View::get_link_label(), the method using this method to build a link label.
         * @see   date_i18n() as the formatted date will, then, be localized using this method.
         *
         * @since 4.9.9
         *
         * @return string The date format, a valid PHP `date` function format, that should be used to build link labels.
         */
        protected function get_label_format()
        {
        }
        /**
         * Gets this View title, the one that will be set in the `title` tag of the page.
         *
         * @since 4.9.10
         *
         * @param array $events An array of events to generate the title for.
         *
         * @return string The filtered view title.
         */
        public function get_title(array $events = [])
        {
        }
        /**
         * Returns a collection of user-facing messages the View will display on the front-end.
         *
         * @since 4.9.11
         *
         * @param array $events An array of the events found by the View that is currently rendering.
         *
         * @return Messages A collection of user-facing messages the View will display on the front-end.
         */
        public function get_messages(array $events = [])
        {
        }
        /**
         * Sets up the user-facing messages the View will print on the frontend.
         *
         * @since 4.9.11
         *
         * @param array $events An array of the View events, if any.
         */
        protected function setup_messages(array $events)
        {
        }
        /**
         * Returns whether the View page should be reset or not.
         *
         * The View page should be reset when the View or filtering parameters that are not the page change.
         *
         * @since 4.9.11
         *
         * @return bool Whether the View page should be reset or not.
         */
        protected function should_reset_page()
        {
        }
        /**
         * Acts on the View variables, properties and context when a page reset is required.
         *
         * By default this method will reset the page in the context, but extending classes can implement their own,
         * custom version.
         *
         * @since 4.9.11
         */
        protected function on_page_reset()
        {
        }
        /**
         * Returns the breadcrumbs data the View will display on the front-end.
         *
         * @since 4.9.11
         *
         * @return array
         */
        protected function get_breadcrumbs()
        {
        }
        /**
         * Header Title Element, allowing better control over the title tag.
         *
         * @since 6.2.0
         *
         * @return string
         */
        protected function get_header_title_element() : string
        {
        }
        /**
         * Returns the header title the View will display on the front-end, normally above the breadcrumbs.
         *
         * @since 6.2.0
         *
         * @return string
         */
        protected function get_header_title() : string
        {
        }
        /**
         * Returns the content title the View will display on the front-end, normally above the date selector.
         *
         * @since 6.2.0
         *
         * @return string
         */
        protected function get_content_title() : string
        {
        }
        /**
         * Returns if the view should display the events bar.
         *
         * @since 4.9.11
         *
         * @return array
         */
        protected function filter_display_events_bar($display)
        {
        }
        /**
         * Returns a boolean on whether to show the datepicker submit button.
         *
         * @since 4.9.13
         *
         * @return bool
         */
        protected function get_show_datepicker_submit()
        {
        }
        /**
         * Manipulates public views data, if necessary, and returns result.
         *
         * @since 5.0.0
         *
         * @param string|bool $url_event_date The value, `Y-m-d` format, of the `eventDate` request variable to
         *                                    append to the view URL, if any.
         *
         * @return array
         */
        protected function get_public_views($url_event_date)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function url_for_query_args($date = null, $query_args = [])
        {
        }
        /**
         * Returns the date format that should be used to format the date in the View URL.
         *
         * Extending Views cal override this to customize the URL output (e.g. Month View).
         *
         * @since 4.9.13
         *
         * @return string The date format that should be used to format the date in the View URL.
         */
        protected function get_url_date_format()
        {
        }
        /**
         * Returns the filtered container data attributes for the View top-level container.
         *
         * @since 5.0.0
         *
         * @return array<string,string> The filtered list of data attributes for the View top-level container.
         */
        protected function get_container_data()
        {
        }
        /**
         * Filters Whether the Latest Past Events Should Show for a specific View.
         *
         * @since 5.1.0
         *
         * @return boolean If we should display Latest Past Events.
         */
        protected function should_show_latest_past_events_view()
        {
        }
        /**
         * Setup of Additional Views into another View.
         *
         * @since 5.1.0
         *
         * @param array $events        Array that will be counted to verify if we have events.
         * @param array $template_vars An associative array of variables that will be set, and exported, in the template.
         */
        protected function setup_additional_views(array $events = [], array $template_vars = [])
        {
        }
        /**
         * Returns the number of upcoming events in relation to the "now" time.
         *
         * @since 5.2.0
         *
         * @return int The number of upcoming events from "now".
         */
        protected function upcoming_events_count()
        {
        }
        /**
         * Returns the View current URL query arguments, parsed from the View `get_url()` method.
         *
         * Since there are a number of parties filtering each View URL arguments, this method will
         * parse a View URL query arguments from its filtered URL. This will include all the modifications
         * done to a View URL by other plugins and add-ons.
         *
         * @since 5.3.0
         *
         * @return array<string,mixed> The current View URL args or an empty array if the View URL is empty
         *                             or not valid..
         */
        public function get_url_args()
        {
        }
        /**
         * Initializes the View repository args, if required, and
         * applies them to the View repository instance.
         *
         * @since 4.6.0
         */
        protected function get_repository_args()
        {
        }
        /**
         * Compiled the global repository args that should be applied to all events queried for this view.
         *
         * @since 6.0.5
         *
         * @return array The global filtered repository args.
         */
        protected function get_global_repository_args()
        {
        }
        /**
         * Sets up the View repository args to produce the correct list of Events
         * in the context of an iCalendar export.
         *
         * @since 4.6.0
         *
         * @param int $per_page The number of events per page to show in the iCalendar
         *                      export. The value will override whatever events per page
         *                      setting the View might have.
         */
        protected function setup_ical_repository_args($per_page)
        {
        }
        /**
         * Filters the repository arguments that will be used to set up the View repository instance for iCal requests.
         *
         * @since 4.6.0
         *
         * @param array $repository_args The repository arguments that will be used to set up the View repository instance.
         *
         * @return array The filtered repository arguments for ical requests.
         */
        protected function filter_ical_repository_args($repository_args)
        {
        }
        /**
         * Filters the current template current view which allows you to pull globally which view is currently being rendered.
         *
         * @since 6.0.0
         *
         * @param View_Interface $view Which is the previous view.
         *
         * @return self
         */
        public function filter_set_current_view($view)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function get_ical_ids($per_page)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function set_url_object(\Tribe\Events\Views\V2\Url $url_object)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function disable_url_management()
        {
        }
        /**
         * Gets the base object for asset registration.
         *
         * @since 5.7.0
         *
         * @return \stdClass $object Object to tie registered assets to.
         */
        public static function get_asset_origin($slug)
        {
        }
        /**
         * Registers assets for the view.
         *
         * Should be overridden if there are assets for the view.
         *
         * @since 5.7.0
         *
         * @param \stdClass $object Object to tie registered assets to.
         */
        public static function register_assets($object)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_rewrite_slugs() : array
        {
        }
    }
    /**
     * Class View_Register
     *
     * @package Tribe\Events\Views\V2
     * @since   5.7.0
     * @since   5.10.0 Added feature to define the route slug used for this view, decoupled from the view slug.
     */
    class View_Register
    {
        /**
         * Slug for locating the view file.
         *
         * @var string
         */
        protected $slug;
        /**
         * Name for the view.
         *
         * @var string
         */
        protected $name;
        /**
         * Class name for the view.
         *
         * @var string
         */
        protected $class;
        /**
         * Priority order for the view registration.
         *
         * @var int
         */
        protected $priority;
        /**
         * The slug applied to the route for this view.
         *
         * @var string
         */
        protected $route_slug;
        /**
         * View_Register constructor.
         *
         * @param string $slug Slug for locating the view file.
         * @param string $name Name for the view.
         * @param string $class Class name for the view.
         * @param int $priority Priority order for the view registration.
         * @param string $route_slug The slug applied to the route for this view.
         */
        public function __construct($slug, $name, $class, $priority = 40, $route_slug = null)
        {
        }
        /**
         * Adds actions for view registration.
         *
         * @since 5.7.0
         */
        protected function add_actions()
        {
        }
        /**
         * Adds filters for view registration.
         *
         * @since 5.7.0
         */
        protected function add_filters()
        {
        }
        /**
         * Add rewrite routes for custom PRO stuff and views.
         *
         * @since 5.7.0
         * @since 5.10.0 Adds optional decoupling of view name to route slug
         *
         * @param \Tribe__Events__Rewrite $rewrite The Tribe__Events__Rewrite object
         *
         * @return void
         */
        public function filter_add_routes($rewrite)
        {
        }
        /**
         * Add the required bases for the Pro Views
         *
         * @since 5.7.0
         * @since 5.10.0 Using the decoupled route slug.
         *
         * @param array $bases Bases that are already set
         *
         * @return array         The modified version of the array of bases
         */
        public function filter_add_base_slugs($bases = [])
        {
        }
        /**
         * Add the required bases for the Summary View.
         *
         * @since 5.7.0
         * @since 5.10.0 Using the decoupled route slug.
         * @since 6.0.7 Use the en_US slug as matcher key.
         *
         * @param array<string,string> $matchers A map from the matcher name to the query var name.
         *
         * @return array<string,string>         The modified version of the array of bases.
         */
        public function filter_add_matchers_to_query_vars_map(array $matchers = [])
        {
        }
        /**
         * Filters the available views.
         *
         * @since 5.7.0
         *
         * @param array $views An array of available Views.
         *
         * @return array The array of available views, including the PRO ones.
         */
        public function filter_events_views(array $views = [])
        {
        }
        /**
         * Add the view to the views selector in the TEC bar.
         *
         * @since 5.7.0
         * @since 5.10.0 Using the route slug to build the `url` element.
         *
         * @param array $views The current array of views registered to the tribe bar.
         *
         * @return array The views registered with photo view added.
         */
        public function filter_tec_bar_views($views)
        {
        }
        /**
         * The canonical tag that should be added to the page header.
         *
         * @since 6.0.13
         *
         * @param string $current_url The URL of the page being currently viewed.
         */
        public function set_canonical_tag()
        {
        }
        /**
         * Add canonical tag to the head of all calendar views.
         *
         * @since 6.0.7
         * @since 6.0.13
         *
         * @param bool $add_canonical_tag Whether or not we should add the canonical tag to the current event view.
         */
        public function add_canonical_tag()
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Views {
    /**
     * Class By_Day_View
     *
     * @since   4.9.7
     *
     * @package Tribe\Events\Views\V2\Views
     */
    abstract class By_Day_View extends \Tribe\Events\Views\V2\View
    {
        use \Tribe\Traits\Cache_User;
        const CHUNK_SIZE = 200;
        /**
         * The date input by the user, either by selecting the default view or using the bar.
         *
         * @var string
         */
        protected $user_date;
        /**
         * An array of cached event IDs per day.
         * Used by the `Cache_User` trait.
         *
         * @since 4.9.7
         *
         * @var array
         */
        protected $grid_days_cache = [];
        /**
         * An array of cached event counts per day.
         * Used by the `Cache_User` trait.
         *
         * @since 4.9.7
         *
         * @var array
         */
        protected $grid_days_found_cache = [];
        /**
         * An array of cached events for the grid.
         *
         * @since 5.0.0
         *
         * @var array
         */
        protected $grid_events = [];
        /**
         * An instance of the Stack object.
         *
         * @since 4.9.9
         *
         * @var Stack
         */
        protected $stack;
        /**
         * By_Day_View constructor.
         *
         * @since 4.9.7
         * @since 4.9.11 Added inheritance from View object and `$messages` parameter.
         *
         * @param Messages $messages An instance of the view messages handler.
         * @param Stack    $stack    An instance of the stack handler.
         */
        public function __construct(\Tribe\Events\Views\V2\Messages $messages, \Tribe\Events\Views\V2\Utils\Stack $stack)
        {
        }
        /**
         * Returns the post IDs of all the events found in the View.
         *
         * Note: multi-day events will appear once; this is a conflation of all events on the View.
         *
         * @since 4.9.7
         *
         * @return array A flat array of all the events found on the calendar grid.
         */
        public function found_post_ids()
        {
        }
        /**
         * Returns an array of event post IDs, divided by days.
         *
         * Note that multi-day events will show up in multiple days.
         *
         * @since 4.9.7
         *
         * @param null|string $date  The date to use as pivot, defaults to the current ones if not set.
         * @param bool        $force Whether to force a re-fetch or try and use the cached values or not.
         *
         * @return array An array in the shape `[ <Y-m-d> => [...<events>], <Y-m-d> => [...<events>] ]`.
         */
        public function get_grid_days($date = null, $force = false)
        {
        }
        /**
         * Calculates the date of the first and final grid cell for the view.
         *
         * Each cell is a day, usually.
         *
         * @since 4.9.7
         *
         * @param \DateTime|string $date The date that should be used to calculate the grid first and final cell date.
         *
         * @return array The View grid first and final cell dates, each one an instance of the `DateTime` class.
         */
        protected abstract function calculate_grid_start_end($date);
        /**
         * Returns the number of events to show per each day on the grid.
         *
         * Different Views with different implementations of this logic should override this method.
         *
         * @since 4.9.7
         *
         * @return int The number of events to show, per each day, in total, in the view.
         */
        protected function get_events_per_day()
        {
        }
        /**
         * Gets the current desired chunk size for breaking up batched queries.
         *
         * @since 5.0.0
         *
         * @return int
         */
        protected function get_chunk_size()
        {
        }
        /**
         * Fetches events for the grid in chunks so we do not have to fetch events a second time.
         *
         * @since 5.0.0
         *
         * @param array $event_ids
         *
         * @return array|void
         */
        protected function get_grid_events(array $event_ids = [])
        {
        }
        /**
         * Back-fills the days cache to add multi-day events that, due to events-per-day limits, might not appear on first
         * day.
         *
         * Multi-day events are pulled from the query as normal events.
         * When the LIMIT, imposed by events-per-day, is applied a multi-day event starting late in the day, might not
         * appear on the first day it starts as other, earlier, events, might fill the LIMIT for that day.
         * That same event will appear, but, on later days, starting from the 2nd one.
         * Here we go "back" and apply this principle to insert multi-days in previous day(s) cache(s) if required.
         *
         * @since 4.9.12
         *
         * @param array $events An array of event posts
         */
        protected function backfill_multiday_event_ids(array $events = [])
        {
        }
        /**
         * Adds the implied events to the grid days results.
         *
         * The combination of sticky events, other order rules and a limit to the number of events per day,
         * might yield incoherent results.
         * Fact: events do not have "gaps" in them (in the way we model them).
         * To avoid other queries here we apply the principle below and add "implied" events:
         * if a an event is present on day 1 and 3 or later, then it must be present on day 2 too.
         *
         * Note there's a fallacy in this method: if an event appears once and never again, in any of the days, then it
         * will never be implied. This is an issue, but this provides a close enough solution on most scenarios.
         *
         * @since 4.9.11
         *
         * @param array $grid_days The current array of grid days.
         *
         * @return array The grid days, modified to contain implied events, if required.
         */
        protected function add_implied_events(array $grid_days)
        {
        }
        protected function fill_week_duration_cache()
        {
        }
        /**
         * Returns the number of events found for each day.
         *
         * The number of events found ignores the per-page setting and it includes any event happening on the day.
         * This includes multi-day events happening on the day.
         *
         * @since 4.9.7
         *
         * @return array An array of days, each containing the count of found events for that day;
         *               the array has shape `[ <Y-m-d> => <count> ]`;
         */
        public function get_grid_days_counts()
        {
        }
        /**
         * Builds the next or prev URL given the date that should be used.
         *
         * @since 4.9.9
         *
         * @param mixed $date          The date to build the URL from, a date object or string.
         * @param bool  $canonical     Whether to return the canonical version of the URL or not.
         * @param array $passthru_vars An array of variables that should be preserved and applied to the resulting URL.
         *
         * @return string The URL as built from the event.
         */
        protected function build_url_for_date($date, $canonical, array $passthru_vars = [])
        {
        }
        /**
         * Formats the day results in the format expected for day-by-day grid building.
         *
         * The method will fetch the required data in chunks to avoid overloading the database.
         *
         * @since 5.7.0
         *
         * @param array<int> $view_event_ids    The set of Event Post IDs to build and format the Day
         * @param bool       $use_site_timezone Whether to use the site timezone to format the event dates or not. The value
         *                                      descends from the "Timezone Mode" setting.
         *
         * @return array<int,\stdClass> A map from each event Post ID to the value object that will represent
         *                              the Event ID, start date, end date and timezone.
         */
        protected function prepare_day_results(array $view_event_ids, $use_site_timezone)
        {
        }
        /**
         * Overrides the base View implementation to limit the results to the View grid.
         *
         * {@inheritdoc}
         */
        protected function setup_ical_repository_args($per_page)
        {
        }
        /**
         * Overrides the base View implementation to remove pagination from the URL.
         * 
         * {@inheritdoc}
         */
        public function url_for_query_args($date = null, $query_args = [])
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Views\Traits {
    /**
     * Class With_Fast_Forward_Link
     *
     * @since   5.1.1
     *
     * @package Tribe\Events\Views\V2\Views\Traits
     */
    trait With_Fast_Forward_Link
    {
        /**
         * Creates a HTML link and "fast forward" message to append to the "no events found" message.
         *
         * @since 5.4.0
         *
         * @param bool  $canonical         Whether to return the canonical (pretty) version of the URL or not.
         * @param array $passthru_vars     An optional array of query variables that should pass thru the method untouched
         *                                 in key and value.
         *
         * @return string                  The html link and message.
         */
        public function get_fast_forward_link($canonical = false, array $passthru_vars = [])
        {
        }
        /**
         * Whether to use the fast-forward link in the View or not.
         *
         * @since 5.1.1
         *
         * @param bool  $canonical     Whether to return the canonical, pretty, version of the link or not.
         * @param array $passthru_vars A set of query vars to just passthru and not process as part of the canonical link
         *                             resolution.
         *
         * @return bool Whether the View should use canonical links or not.
         */
        public function use_ff_link($canonical = false, array $passthru_vars = [])
        {
        }
    }
    /**
     * Class With_Noindex
     *
     * @since 6.2.3
     *
     * @package Tribe\Events\Views\V2\Views\Traits
     */
    trait With_Noindex
    {
        /**
         * Do a short query (one event) to determine if we should add a noindex meta tag to the page.
         *
         * @since 6.2.3
         *
         * @param Tribe__Repository|null  $events     The events repository. Null by default.
         * @param DateTime                $start_date The start date (object) of the query.
         * @param DateTime|null           $end_date   The end date (object) of the query.
         * @param Tribe__Context| null    $context    The current context.
         *
         * @return Tribe__Repository|false $events     The events repository results.
         */
        public function get_noindex_events($events, $start_date, $end_date = null, $context = null)
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Views {
    class Day_View extends \Tribe\Events\Views\V2\View
    {
        use \Tribe\Events\Views\V2\Views\Traits\With_Fast_Forward_Link;
        use \Tribe\Events\Views\V2\Views\Traits\With_Noindex;
        /**
         * Slug for this view
         *
         * @since 4.9.4
         * @deprecated 6.0.7
         *
         * @var string
         */
        protected $slug = 'day';
        /**
         * Statically accessible slug for this view.
         *
         * @since 6.0.7
         *
         * @var string
         */
        protected static $view_slug = 'day';
        /**
         * Cached dates for the prev/next links.
         *
         * @since 5.16.1
         *
         * @var array
         */
        protected array $memoized_dates = [];
        /**
         * Visibility for this view.
         *
         * @since 4.9.4
         * @since 4.9.11 Made the property static.
         *
         * @var bool
         */
        protected static $publicly_visible = true;
        /**
         * Default untranslated value for the label of this view.
         *
         * @since 6.0.4
         *
         * @var string
         */
        protected static $label = 'Day';
        /**
         * @inheritDoc
         */
        public static function get_view_label() : string
        {
        }
        /**
         * Get the date of the event immediately previous to the current view date.
         *
         * @since 5.16.1
         *
         * @param DateTime|false $current_date A DateTime object signifying the current date for the view.
         *
         * @return DateTime|false Either the previous event chronologically, the previous month, or false if no next event found.
         */
        public function get_previous_event_date($current_date)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function prev_url($canonical = false, array $passthru_vars = [])
        {
        }
        /**
         * Get the date of the event immediately after to the current view date.
         *
         * @since 5.16.1
         *
         * @param DateTime|false $current_date A DateTime object signifying the current date for the view.
         *
         * @return DateTime|false Either the next event chronologically, the next month, or false if no next event found.
         */
        public function get_next_event_date($current_date)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function next_url($canonical = false, array $passthru_vars = [])
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function setup_repository_args(\Tribe__Context $context = null)
        {
        }
        /**
         * Builds the Day View URL for a specific date.
         *
         * This is the method underlying the construction of the previous and next URLs.
         *
         * @since 4.9.10
         *
         * @param mixed $url_date          The date to build the URL for, a \DateTime object, a string or a timestamp.
         * @param bool  $canonical         Whether to return the canonical (pretty) version of the URL or not.
         * @param array $passthru_vars     An optional array of query variables that should pass thru the method untouched
         *                                 in key and value.
         *
         * @return string The Day View URL for the date.
         */
        protected function build_url_for_date($url_date, $canonical, array $passthru_vars = [])
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function setup_template_vars()
        {
        }
        /**
         * Add time slot and sort events for the day view.
         *
         * Iterate over the day events to add time slots and sort them.
         *
         * @since 4.9.11
         *
         * @param array $events  An array of events.
         *
         * @return array The sorted and modified array.
         */
        protected function sort_events($events)
        {
        }
        /**
         * Overrides the base View method to implement logic tailored to the Day View.
         *
         * @since 4.9.11
         *
         * @param array $events An array of the View events, if any.
         */
        protected function setup_messages(array $events)
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Views\Traits {
    /**
     * Trait List_Behavior
     *
     * @since   4.9.11
     *
     * @package Tribe\Events\Views\V2\Views
     *
     * @property Context $context The current View context.
     */
    trait List_Behavior
    {
        /**
         * Set up the datepicker-related template vars for the View.
         *
         * @since 4.9.11
         *
         * @param array $template_vars The current template vars.
         *
         * @return array The template vars, modified to add the required variables.
         */
        protected function setup_datepicker_template_vars(array $template_vars)
        {
        }
        /**
         * Remove the query arguments and values related to the View `past` display mode, if supported.
         *
         * The method will alter the View context to remove notions of a "past" view request from it.
         *
         * @since 4.9.11
         */
        protected function remove_past_query_args()
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Views {
    class List_View extends \Tribe\Events\Views\V2\View
    {
        use \Tribe\Events\Views\V2\Views\Traits\List_Behavior;
        use \Tribe\Events\Views\V2\Views\Traits\With_Noindex;
        /**
         * Slug for this view
         *
         * @since 4.9.3
         * @deprecated 6.0.7
         *
         * @var string
         */
        protected $slug = 'list';
        /**
         * Statically accessible slug for this view.
         *
         * @since 6.0.7
         *
         * @var string
         */
        protected static $view_slug = 'list';
        /**
         * Visibility for this view.
         *
         * @since 4.9.4
         * @since 4.9.11 Made the property static.
         *
         * @var bool
         */
        protected static $publicly_visible = true;
        /**
         * Indicates List View supports the date as a query argument appended to its URL, not as part of a "pretty" URL.
         *
         * @var bool
         */
        protected static $date_in_url = false;
        /**
         * Default untranslated value for the label of this view.
         *
         * @since 6.0.4
         *
         * @var string
         */
        protected static $label = 'List';
        /**
         * @inheritDoc
         */
        public static function get_view_label() : string
        {
        }
        /**
         * {@inheritDoc}
         */
        public function prev_url($canonical = false, array $passthru_vars = [])
        {
        }
        /**
         * {@inheritDoc}
         */
        public function next_url($canonical = false, array $passthru_vars = [])
        {
        }
        /**
         * Return the URL to a page of past events.
         *
         * @since 4.9.3
         *
         * @param bool $canonical Whether to return the canonical version of the URL or the normal one.
         * @param int  $page      The page to return the URL for.
         *
         * @return string The URL to the past URL page, if available, or an empty string.
         */
        protected function get_past_url($canonical = false, $page = 1)
        {
        }
        /**
         * Return the URL to a page of upcoming events.
         *
         * @since 4.9.3
         *
         * @param bool $canonical Whether to return the canonical version of the URL or the normal one.
         * @param int  $page      The page to return the URL for.
         *
         * @return string The URL to the upcoming URL page, if available, or an empty string.
         */
        protected function get_upcoming_url($canonical = false, $page = 1)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function setup_repository_args(\Tribe__Context $context = null)
        {
        }
        /**
         * Overrides the base View method to fix the order of the events in the `past` display mode.
         *
         * @since 4.9.11
         *
         * @return array The List View template vars, modified if required.
         */
        protected function setup_template_vars()
        {
        }
        /**
         * Overrides the base implementation to remove notions of a "past" events request on page reset.
         *
         * @since 4.9.11
         */
        protected function on_page_reset()
        {
        }
    }
    class Latest_Past_View extends \Tribe\Events\Views\V2\Views\List_View
    {
        use \Tribe\Events\Views\V2\Views\Traits\With_Noindex;
        /**
         * Slug for this view
         *
         * @since      5.1.0
         * @deprecated 6.0.7
         *
         * @var string
         */
        protected $slug = 'latest-past';
        /**
         * Statically accessible slug for this view.
         *
         * @since 6.0.7
         *
         * @var string
         */
        protected static $view_slug = 'latest-past';
        /**
         * Visibility for this view.
         *
         * @since 5.1.0
         *
         * @var bool
         */
        protected static $publicly_visible = false;
        /**
         * Safe list of Templates to display when Latest Past Events is Active.
         *
         * @since 5.1.0
         *
         * @var array
         */
        protected $safelist = [
            // Common Components.
            'components/icons/caret-down',
            'components/icons/caret-left',
            'components/icons/caret-right',
            'components/icons/day',
            'components/icons/dot',
            'components/icons/error',
            'components/icons/featured',
            'components/icons/list',
            'components/icons/map',
            'components/icons/messages-not-found',
            'components/icons/month',
            'components/icons/photo',
            'components/icons/recurring',
            'components/icons/search',
            'components/icons/virtual',
            'components/icons/week',
            // Standard View Components.
            'components/after',
            'components/before',
            'components/breadcrumbs',
            'components/breakpoints',
            'components/data',
            'components/header',
            'components/header-title',
            'components/events-bar',
            'components/events-bar/search-button',
            'components/events-bar/search',
            'components/events-bar/search/keyword',
            'components/events-bar/search/submit',
            'components/events-bar/views',
            'components/events-bar/views/list',
            'components/events-bar/views/list/item',
            'components/ical-link',
            'components/json-ld-data',
            'components/loader',
            'components/messages',
            'components/top-bar/today',
            'components/top-bar/actions',
            // Day View
            'day',
            'day/top-bar',
            'day/top-bar/nav',
            'day/top-bar/nav/prev',
            'day/top-bar/nav/next-disabled',
            'day/top-bar/datepicker',
            // List View.
            'list/top-bar',
            'list/top-bar/nav',
            'list/top-bar/nav/prev',
            'list/top-bar/nav/next-disabled',
            'list/top-bar/datepicker',
            'list',
            // Month View
            'month',
            'month/top-bar',
            'month/top-bar/nav',
            'month/top-bar/nav/prev',
            'month/top-bar/nav/next-disabled',
            'month/top-bar/datepicker',
            // Map View
            'map',
            'map/top-bar',
            'map/top-bar/nav',
            'map/top-bar/nav/prev',
            'map/top-bar/nav/next-disabled',
            'map/top-bar/datepicker',
            // Photo View
            'photo',
            'photo/top-bar',
            'photo/top-bar/nav',
            'photo/top-bar/nav/prev',
            'photo/top-bar/nav/next-disabled',
            'photo/top-bar/datepicker',
            // Week View
            'week',
            'week/top-bar',
            'week/top-bar/nav',
            'week/top-bar/nav/prev',
            'week/top-bar/nav/next-disabled',
            'week/top-bar/datepicker',
            // Latest Past Events Views.
            'latest-past',
            'latest-past/heading',
            'latest-past/event',
            'latest-past/event/date',
            'latest-past/event/title',
            'latest-past/event/venue',
            'latest-past/event/description',
            'latest-past/event/cost',
            'latest-past/event/date-tag',
            'latest-past/event/date/featured',
            'latest-past/event/date/meta',
            'latest-past/event/featured-image',
            'latest-past/top-bar',
            // Add-ons.
            'components/filter-bar',
        ];
        /**
         * Indicates Latest Past View supports the date as a query argument appended to its URL, not as part of a "pretty" URL.
         *
         * @var bool
         */
        protected static $date_in_url = false;
        /**
         * {@inheritDoc}
         */
        protected function setup_repository_args(\Tribe__Context $context = null)
        {
        }
        /**
         * Add Filters for safe list and Adding View HTML.
         *
         * @since 5.1.0
         */
        public function add_view_filters()
        {
        }
        /**
         * Connect safe list Filter to Tribe Template Done to Prevent some of the current View's
         * Templates from Displaying when the Latest Past Events Displays.
         *
         * @since 5.1.0
         */
        public function filter_template_done($html)
        {
        }
        /**
         * Filter the Template Files and Only Return HTML if in safe list.
         *
         * @since 5.1.0
         *
         * @param string       $done    Whether to continue displaying the template or not.
         * @param array|string $name    Template name.
         * @param array        $context Any context data you need to expose to this file.
         * @param boolean      $echo    If we should also print the Template.
         *
         * @return string
         */
        public function filter_template_display_by_safelist($done, $name, $context, $echo)
        {
        }
        /**
         * Add the HTML for Latest Past Events to the HTML of the View Being Rendered.
         *
         * @since 5.1.0
         *
         * @param $html string The HTML of the view being rendered.
         *
         * @return string The HTML of the View being Rendered and Latest Past Events HTML
         * @todo  This recursive call should be removed, and View objects should not be injected as pseudo templates.
         */
        public function add_view($html)
        {
        }
    }
    class Month_View extends \Tribe\Events\Views\V2\Views\By_Day_View
    {
        use \Tribe\Events\Views\V2\Views\Traits\With_Fast_Forward_Link;
        use \Tribe\Events\Views\V2\Views\Traits\With_Noindex;
        /**
         * The default number of events to show per-day.
         *
         * @since 4.9.7
         *
         * @var int
         */
        protected static $posts_per_page_default = 12;
        /**
         * Slug for this view.
         *
         * @since 4.9.3
         * @deprecated 6.0.7
         *
         * @var string
         */
        protected $slug = 'month';
        /**
         * Statically accessible slug for this view.
         *
         * @since 6.0.7
         *
         * @var string
         */
        protected static $view_slug = 'month';
        /**
         * Cached dates for the prev/next links.
         *
         * @since 5.16.1
         *
         * @var array
         */
        protected array $memoized_dates = [];
        /**
         * Visibility for this view.
         *
         * @since 4.9.4
         * @since 4.9.11 Made the property static.
         *
         * @var bool
         */
        protected static $publicly_visible = true;
        /**
         * A instance cache property to store the currently fetched grid days.
         *
         * @since 4.9.11
         *
         * @var array
         */
        protected $grid_days = [];
        /**
         * Default untranslated value for the label of this view.
         *
         * @since 6.0.4
         *
         * @var string
         */
        protected static $label = 'Month';
        /**
         * @inheritDoc
         */
        public static function get_view_label() : string
        {
        }
        /**
         * Get the date of the event immediately previous to the current view date.
         *
         * @since 5.16.1
         *
         * @param DateTime $current_date A DateTime object signifying the current date for the view.
         *
         * @return DateTime|false Either the previous event chronologically, the previous month, or false if no next event found.
         */
        public function get_previous_event_date($current_date)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function prev_url($canonical = false, array $passthru_vars = [])
        {
        }
        /**
         * Get the date of the event immediately after to the current view date.
         *
         * @since 5.16.1
         *
         * @param DateTime|false $current_date A DateTime object signifying the current date for the view.
         *
         * @return DateTime|false Either the next event chronologically, the next month, or false if no next event found.
         */
        public function get_next_event_date($current_date)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function next_url($canonical = false, array $passthru_vars = [])
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function setup_repository_args(\Tribe__Context $context = null)
        {
        }
        /**
         * Overrides the base implementation to use the Month view custom number of events per day.
         *
         * @since 4.9.7
         *
         * @return int The Month view number of events per day.
         */
        protected function get_events_per_day()
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function setup_template_vars()
        {
        }
        /**
         * Parses the multi-day events and produces the multi-day "stack", including spacers.
         *
         * @since 4.9.7
         *
         * @param array $grid_events_by_day An array of events, per-day, in the shape `[ <Y-m-d> => [...<event_ids> ] ]`;
         *
         * @return array An array of all the month days, each entry filled with spacers and/or event post IDs in the correct
         *               order. E.g.
         *               `[ '2019-07-01' => [2, 3, false], '2019-07-02' => [2, 3, 4], '2019-07-03' => [false, 3, 4]]`.
         */
        protected function build_day_stacks(array $grid_events_by_day)
        {
        }
        /**
         * Populates the data for each day in the grid and returns it.
         *
         * @since 4.9.7
         *
         * @param array $grid_days An associative array of events per day, in the shape `[ <Y-m-d> => [...<events>] ]`.
         *
         * @return array An associative array of day data for each day in the shape `[ <Y-m-d> => <day_data> ]`.
         */
        protected function get_days_data(array $grid_days)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function calculate_grid_start_end($date)
        {
        }
        /**
         * Return the date of the first day in the month view grid.
         *
         * This is not necessarily the 1st of the specified month, rather it is the date of the
         * first grid cell which could be anything upto 6 days earlier than the 1st of the month.
         *
         * @since 6.0.0
         *
         * @param string  $month
         * @param integer $start_of_week
         *
         * @return bool|string (Y-m-d)
         */
        public static function calculate_first_cell_date($month, $start_of_week = null)
        {
        }
        /**
         * Return the date of the first day in the month view grid.
         *
         * This is not necessarily the last day of the specified month, rather it is the date of
         * the final grid cell which could be anything upto 6 days into the next month.
         *
         * @since 6.0.0
         *
         * @param string  $month
         * @param integer $start_of_week
         *
         * @return bool|string (Y-m-d)
         */
        public static function calculate_final_cell_date($month, $start_of_week = null)
        {
        }
        /**
         * {@inheritDoc}
         *
         * @since 4.9.9
         */
        protected function get_label_format()
        {
        }
        /**
         * Whether months w/o any event should be skipped while building navigation links or not.
         *
         * By default empty months will not be skipped.
         *
         * @since 4.9.9
         *
         * @return bool Whether to skip empty months or not.
         */
        protected function skip_empty()
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function get_url_date_format()
        {
        }
        /**
         * Overrides the base method to handle messages specific to the Month View.
         *
         * @since 4.9.11
         *
         * @param array $events An array of events found on the Month.
         */
        protected function setup_messages(array $events)
        {
        }
        /**
         * Overrides the base View implementation to limit the results to the View grid.
         *
         * {@inheritdoc}
         */
        protected function setup_ical_repository_args($per_page)
        {
        }
        /**
         * Returns a set of messages that will be show to the user in the mobile interaction.
         *
         * @since 5.7.0
         *
         * @return array<string,array<string|int,string>> A map from message types to messages for
         *                                                each type.
         */
        protected function get_mobile_messages()
        {
        }
    }
    /**
     * Class Reflector_View
     *
     * @since   4.9.3
     * @package Tribe\Events\Views\V2\Views
     */
    class Reflector_View extends \Tribe\Events\Views\V2\View
    {
        /**
         * Slug for this view.
         *
         * @since 4.9.4
         * @deprecated 6.0.7
         *
         * @var string
         */
        protected $slug = 'reflector';
        /**
         * Statically accessible slug for this view.
         *
         * @since 6.0.7
         *
         * @var string
         */
        protected static $view_slug = 'reflector';
        /**
         * Visibility for this view.
         *
         * @since 4.9.4
         * @since 4.9.11 Made the property static.
         *
         * @var bool
         */
        protected static $publicly_visible = false;
        /**
         * Overrides the base HTML method to return the JSON representation of the view context.
         *
         * @since 4.9.3
         *
         * @return false|string The result of the `json_encode` called on the current view context.
         */
        public function get_html()
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Views\Widgets {
    /**
     * Class Widget_View
     *
     * @since   5.2.1
     *
     * @package Tribe\Events\Views\V2\Views\Widgets
     */
    class Widget_View extends \Tribe\Events\Views\V2\View
    {
        /**
         * The slug for the template path.
         *
         * @since 5.2.1
         *
         * @var string
         */
        protected $template_path = 'widgets';
        /**
         * Visibility for this view.
         *
         * @since 5.2.1
         *
         * @var bool
         */
        protected static $publicly_visible = false;
        /**
         * Whether the View should display the events bar or not.
         *
         * @since 5.2.1
         *
         * @var bool
         */
        protected $display_events_bar = false;
        /**
         * Returns the widget "view more" text.
         *
         * @since 5.4.0
         *
         * @return string The widget "view more" text.
         */
        public function get_view_more_text()
        {
        }
        /**
         * Returns the widget "view more" title.
         * Adds context as needed for screen readers.
         * @see \Tribe\Events\Pro\Views\V2\Views\Widgets\Venue_View for an example.
         *
         * @since 5.4.0
         *
         * @return string The widget "view more" title.
         */
        public function get_view_more_title()
        {
        }
        /**
         * Returns the widget "view more" url.
         *
         * @since 5.4.0
         *
         * @return string The widget "view more" url.
         */
        public function get_view_more_link()
        {
        }
        /**
         * Overrides the base View method.
         *
         * @since 5.3.0
         *
         * @return array<string,mixed> The Widget View template vars, modified if required.
         */
        protected function setup_template_vars()
        {
        }
        /**
         * Sets up the View repository arguments from the View context or a provided Context object.
         *
         * @since 4.9.3
         *
         * @param  Context|null $context A context to use to setup the args, or `null` to use the View Context.
         *
         * @return array<string,mixed> The arguments, ready to be set on the View repository instance.
         */
        protected function setup_repository_args(\Tribe__Context $context = null)
        {
        }
        /**
         * Adds compatibility classes to the widget view container.
         * Not the view itself - the wrapping div around that
         *
         * @since 5.4.0
         *
         * @return array<string> An Array of class names to add to the container. Will contain
         *                       _at least_ 'tribe-compatibility-container' as an indicator.
         */
        public function get_compatibility_classes()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_html_classes(array $classes = [])
        {
        }
        /**
         * Modify the setup the loop method to only set the repository arguments.
         *
         * @since 5.3.0
         *
         * @param array|null $args An array of associative arguments used to setup the repository for the View.
         */
        public function setup_the_loop(array $args = [])
        {
        }
    }
    /**
     * Class Widget_List_View
     *
     * @since   5.2.1
     *
     * @package Tribe\Events\Views\V2\Views\Widgets
     */
    class Widget_List_View extends \Tribe\Events\Views\V2\Views\Widgets\Widget_View
    {
        /**
         * The slug for this view.
         *
         * @since 5.2.1
         * @deprecated 6.0.7
         *
         * @var string
         */
        protected $slug = 'widget-events-list';
        /**
         * The slug for this view.
         *
         * @since 6.0.7
         *
         * @var string
         */
        protected static $view_slug = 'widget-events-list';
        /**
         * Sets up the View repository arguments from the View context or a provided Context object.
         *
         * @since 5.3.0
         *
         * @param  Context|null $context A context to use to setup the args, or `null` to use the View Context.
         *
         * @return array<string,mixed> The arguments, ready to be set on the View repository instance.
         */
        protected function setup_repository_args(\Tribe__Context $context = null)
        {
        }
        /**
         * Overrides the base View method.
         *
         * @since 5.3.0
         *
         * @return array<string,mixed> The Widget List View template vars, modified if required.
         */
        protected function setup_template_vars()
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function setup_messages(array $events)
        {
        }
        /**
         * Overrides the base method to return an empty array, since the widget will not use breadcrumbs.
         *
         * @since 5.3.0
         *
         * @return array<array<string,string>> An empty array, the widget will not use breadcrumbs.
         */
        protected function get_breadcrumbs()
        {
        }
    }
}
namespace Tribe\Events\Views\V2\Widgets {
    /**
     * Class Admin_Template
     *
     * @since   5.3.0
     *
     * @package Tribe\Events\Views\V2\Widgets
     */
    class Admin_Template extends \Tribe__Template
    {
        /**
         * Template constructor.
         *
         * Sets the correct paths for templates in this plugin (as opposed to The Events Calendar).
         *
         * @since 5.3.0
         */
        public function __construct()
        {
        }
    }
    /**
     * Register Assets related to Widgets.
     *
     * @since 5.5.0
     *
     * @package Tribe\Events\Views\V2\Widgets
     */
    class Assets extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 5.5.0
         */
        public function register()
        {
        }
    }
    /**
     * Class Compatibility
     *
     * @since   5.3.0
     *
     * @package Tribe\Events\Views\V2\Widgets
     */
    class Compatibility
    {
        /**
         * The default primary list widget id base string.
         *
         * @var string
         */
        protected $primary_id_base = 'tribe-events-list-widget';
        /**
         * The default alternative list widget id base string.
         *
         * @var string
         */
        protected $alternative_id_base = 'tribe-events-adv-list-widget';
        /**
         * Switches the primary and alternative id base when v1 is active
         * or v2 widgets are disabled, this enables support for upgrading from
         * v1 free list widget to the v1 Pro advanced list widget.
         * This class lives here as it could support the v1 advanced list widget
         * turning back to the free widget.
         *
         * @since 5.3.0
         */
        public function switch_compatibility()
        {
        }
        /**
         * Function that determines which version of the widget we should load based on the ECP version.
         *
         * @since 5.3.0
         *
         * @return boolean
         */
        public function is_v2_adv_list_widget()
        {
        }
        /**
         * Remap the widget id_base for the Pro Advanced List Widget.
         *
         * @since 5.3.0
         *
         * @param array<string,mixed> $widget_areas An array of widgets areas with the saved widgets in each location.
         *
         * @return array<string,mixed> $widget_areas A modified array of widgets areas with the saved widgets in each location.
         */
        public function remap_list_widget_id_bases($widget_areas)
        {
        }
        /**
         * Merge the Event List and Advanced List Widget Options.
         *
         * @since 5.3.0
         *
         * @param array<int,mixed> $widgets An array of saved widgets.
         *
         * @return array<int,mixed> $widgets The modified array of saved widgets.
         */
        public function merge_list_widget_options($widgets)
        {
        }
    }
    /**
     * Class Service_Provider
     *
     * @since   5.2.1
     *
     * @package Tribe\Events\Views\V2\Widgets
     */
    class Service_Provider extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Binds and sets up implementations.
         *
         * @since 5.2.1
         */
        public function register()
        {
        }
        /**
         * Registers the provider handling all assets for widgets v2.
         *
         * @since 5.5.0
         */
        protected function register_assets()
        {
        }
        /**
         * Registers the provider handling for compatibility hooks.
         *
         * @since 5.3.0
         */
        protected function register_compatibility()
        {
        }
        /**
         * Function used to attach the hooks associated with this class.
         *
         * @since 5.2.1
         */
        public function hook()
        {
        }
        /**
         * Add the widgets to register with WordPress.
         *
         * @since 5.2.1
         *
         * @param array<string,string> $widgets An array of widget classes to register.
         *
         * @return array<string,string> An array of registered widget classes.
         */
        public function register_widget($widgets)
        {
        }
        /**
         * Add the widget views to the view manager.
         *
         * @since 5.2.1
         *
         * @param array<string,string> $views An associative array of views in the shape `[ <slug> => <class> ]`.
         *
         * @return array<string,string> $views The modified array of views in the shape `[ <slug> => <class> ]`.
         */
        public function add_views($views)
        {
        }
    }
    /**
     * The abstract all widgets should implement.
     *
     * @since   5.2.1
     *
     * @package Tribe\Widget
     */
    abstract class Widget_Abstract extends \Tribe\Widget\Widget_Abstract
    {
        /**
         * The view interface for the widget.
         *
         * @since 5.2.1
         *
         * @var View_Interface;
         */
        protected $view;
        /**
         * The slug of the widget view.
         *
         * @since 5.2.1
         *
         * @var string
         */
        protected $view_slug;
        /**
         * Widget css group slug.
         *
         * @since 5.5.0
         *
         * @var string
         */
        protected static $widget_css_group;
        /**
         * {@inheritDoc}
         */
        public function setup($args = [], $instance = [])
        {
        }
        /**
         * Setup the view for the widget.
         *
         * @since 5.2.1
         * @since 5.3.0 Correct asset enqueue method.
         * @since 5.5.0 Deprecated $arguments param since it should come from the instance.
         *
         * @param array<string,mixed> $_deprecated The widget arguments, as set by the user in the widget string.
         */
        public function setup_view($_deprecated)
        {
        }
        /**
         * Remove search terms from the widget repository args.
         *
         * @since 5.16.2
         *
         * @param array<string,mixed> $repository_args The arguments for the widget events query.
         *
         * @return array<string,mixed> $repository_args The modified args.
         */
        public function no_widget_search($repository_args)
        {
        }
        /**
         * Get local widget css group slug.
         *
         * @since 5.5.0
         *
         * @return string
         */
        public static function get_css_group()
        {
        }
        /**
         * Returns the rendered View HTML code.
         *
         * @since 5.2.1
         *
         * @return string
         */
        public function get_html()
        {
        }
        /**
         * Sets the template view.
         *
         * @since 5.2.1
         *
         * @param View_Interface $view Which view we are using this template on.
         */
        public function set_view(\Tribe\Events\Views\V2\View_Interface $view)
        {
        }
        /**
         * Returns the current template view, either set in the constructor or using the `set_view` method.
         *
         * @since 5.2.1
         *
         * @return View_Interface The current template view.
         */
        public function get_view()
        {
        }
        /**
         * Returns the widget view slug.
         *
         * @since 5.2.1
         *
         * @return string The widget view slug.
         */
        public function get_view_slug()
        {
        }
        /**
         * Alters the widget context with its arguments.
         *
         * @since  5.2.1
         *
         * @param \Tribe__Context     $context   Context we will use to build the view.
         * @param array<string,mixed> $arguments Current set of arguments.
         *
         * @return \Tribe__Context Context after widget changes.
         */
        public function alter_context(\Tribe__Context $context, array $arguments = [])
        {
        }
        /**
         * Translates widget arguments to their Context argument counterpart.
         *
         * For front-end display.
         *
         * @since 5.2.1
         *
         * @param array<string,mixed> $arguments Current set of arguments.
         * @param Context             $context   The request context.
         *
         * @return array<string,mixed> The translated widget arguments.
         */
        protected function args_to_context(array $arguments, \Tribe__Context $context)
        {
        }
        /**
         * Massages the data before asking tribe_format_field_dependency() to create the dependency attributes.
         *
         * @since 5.3.0
         *
         * @param array <string,mixed> $field The field info.
         *
         * @return string The dependency attributes.
         */
        public function format_dependency($field)
        {
        }
        /**********************
         * Deprecated Methods *
         **********************/
        /**
         * Filters the template vars for widget-specific items.
         *
         * @since 5.3.0
         * @deprecated 5.5.0 Removed due to using template vars properly, see Tribe\Events\Views\V2\Views\Widgets\Widget_View::setup_template_vars().
         *
         * @param array<string,mixed> $template_vars The current template variables.
         * @param View                $view          Which view we are dealing with.
         *
         * @return array<string,mixed> The modified template variables.
         */
        public function filter_widget_template_vars($template_vars, $view)
        {
        }
        /**
         * Empties the json_ld_data if jsonld_enable is false,
         * removing the need for additional checks in the template.
         *
         * @since 5.3.0
         * @deprecated 5.5.0 Removed due to using template vars properly, see Tribe\Events\Views\V2\Views\Widgets\Widget_View::setup_template_vars().
         *
         * @param array<string,mixed> $template_vars The current template variables.
         *
         * @return array<string,mixed> The modified template variables.
         */
        public function disable_json_data($template_vars)
        {
        }
        /**
         * Encapsulates and handles the logic for asset enqueues in it's own method.
         *
         * @since 5.3.0
         *
         * @deprecated 5.5.0 Removed to make use of just should enqueue setup in asset manager.
         *
         * @param mixed $_deprecated  (deprecated) Previously held context we are using to build the view.
         * @param mixed $__deprecated (deprecated) Previously held which view we are using the template on.
         */
        public function filter_enqueue_assets($_deprecated, $__deprecated)
        {
        }
        /**
         * Enqueues the assets for widgets.
         *
         * @since 5.3.0
         *
         * @deprecated 5.5.0 Removed to make use of just should enqueue setup in asset manager.
         *
         * @param mixed $_deprecated  (deprecated) Previously held context we are using to build the view.
         * @param mixed $__deprecated (deprecated) Previously held which view we are using the template on.
         */
        public function enqueue_assets($_deprecated, $__deprecated)
        {
        }
        /**
         * Determines whether to enqueue assets for widgets.
         *
         * @since 5.3.0
         *
         * @deprecated 5.5.0 Removed to make use of just should enqueue setup in asset manager.
         *
         * @param mixed $_deprecated  (deprecated) Previously held context we are using to build the view.
         * @param mixed $__deprecated (deprecated) Previously held which view we are using the template on.
         *
         * @return bool Whether assets are enqueued or not.
         */
        public function should_enqueue_assets($_deprecated, $__deprecated)
        {
        }
        /**
         * Returns the widget slug.
         *
         * @since 5.3.0
         * @deprecated 5.5.0 replaced by the static::get_widget_slug().
         *
         * @return string The widget slug.
         */
        public function get_slug()
        {
        }
    }
    /**
     * Class for the List Widget.
     *
     * @since   5.2.1
     *
     * @package Tribe\Events\Views\V2\Widgets
     */
    class Widget_List extends \Tribe\Events\Views\V2\Widgets\Widget_Abstract
    {
        /**
         * {@inheritDoc}
         */
        protected static $widget_in_use;
        /**
         * {@inheritDoc}
         *
         * @var string
         */
        protected static $widget_slug = 'events-list';
        /**
         * {@inheritDoc}
         *
         * @var string
         */
        protected $view_slug = 'widget-events-list';
        /**
         * {@inheritDoc}
         *
         * @var string
         */
        protected static $widget_css_group = 'events-list-widget';
        /**
         * {@inheritDoc}
         *
         * @var array<string,mixed>
         */
        protected $default_arguments = [
            // View options.
            'view' => null,
            'should_manage_url' => false,
            // Event widget options.
            'id' => null,
            'alias-slugs' => null,
            'title' => '',
            'limit' => 5,
            'no_upcoming_events' => false,
            'featured_events_only' => false,
            'jsonld_enable' => true,
            'tribe_is_list_widget' => true,
        ];
        /**
         * {@inheritDoc}
         */
        public static function get_default_widget_name()
        {
        }
        /**
         * {@inheritDoc}
         */
        public static function get_default_widget_options()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function setup_view($_deprecated)
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function setup_default_arguments()
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function add_hooks()
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function remove_hooks()
        {
        }
        /**
         * Add this widget's css group to the VE list of widget groups to load icon styles for.
         *
         * @since 4.6.0
         *
         * @param array<string> $widgets The list of widgets
         *
         * @return array<string> The modified list of widgets.
         */
        public function add_self_to_virtual_widget_groups($groups)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function setup_admin_fields()
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function args_to_context(array $arguments, \Tribe__Context $context)
        {
        }
        /**
         * Add full events list widget stylesheets to customizer styles array to check.
         *
         * @since 5.3.0
         *
         * @param array<string> $sheets       Array of sheets to search for.
         * @param string        $css_template String containing the inline css to add.
         *
         * @return array Modified array of sheets to search for.
         */
        public function add_full_stylesheet_to_customizer($sheets, $css_template)
        {
        }
    }
}
namespace Tribe\Events\Views\V2\iCalendar\Links {
    /**
     * Class Link_Interface
     *
     * @since   5.12.0
     * @package Tribe\Events\Views\V2\iCalendar
     */
    interface Link_Interface
    {
        /**
         * Registers the objects and filters required by the provider to manage subscribe links.
         *
         * @since 5.12.3
         */
        public function register();
        /**
         * Adds a subscribe link object to the list of links for template consumption.
         *
         * @since 5.12.0
         *
         * @param array $subscribe_links The list of subscribe links.
         *
         * @return array The modified list of links.
         */
        public function filter_tec_views_v2_subscribe_links($subscribe_links);
        /**
         * Adds a link to those displayed on the single event view.
         *
         * @since 5.12.0
         *
         * @param array<string> $links The current list of links.
         *
         * @return array<string> The modified list of links.
         */
        public function filter_tec_views_v2_single_subscribe_links($links);
        /**
         * Getter function for the display property.
         *
         * @since 5.12.0
         * @since 5.14.0 Removed unused view param.
         *
         * @return bool
         */
        public function is_visible();
        /**
         * Setter function for the display property.
         *
         * @since 5.12.0
         *
         * @param boolean $visible
         */
        public function set_visibility(bool $visible);
        /**
         * Getter function for the label property.
         *
         * @since 5.12.0
         *
         * @param View|null $view The current View object.
         *
         * @return string The translated link text/label.
         */
        public function get_label(\Tribe\Events\Views\V2\View $view = null);
        /**
         * Getter function for the single label property.
         *
         * @since 5.12.0
         *
         * @param View|null $view The current View object.
         *
         * @return string The translated link text/label for the single event view.
         */
        public function get_single_label(\Tribe\Events\Views\V2\View $view = null);
        /**
         * Getter function for the uri property.
         *
         * @since 5.12.0
         *
         * @param View|null $view The current View object.
         *
         * @return string The url for the link calendar subscription "feed", or download.
         */
        public function get_uri(\Tribe\Events\Views\V2\View $view = null);
    }
    /**
     * Class Abstract_Link
     *
     * @since   5.12.0
     * @package Tribe\Events\Views\V2\iCalendar
     */
    abstract class Link_Abstract implements \Tribe\Events\Views\V2\iCalendar\Links\Link_Interface
    {
        /**
         * The (translated) text/label for the link.
         *
         * @since 5.12.0
         *
         * @var string
         */
        public $label;
        /**
         * The (translated) text/label for the link.
         *
         * @since 5.12.0
         *
         * @var string
         */
        public $single_label;
        /**
         * Whether to display the link or not.
         *
         * @since 5.12.0
         *
         * @var boolean
         */
        public $visible = true;
        /**
         * The link provider slug.
         *
         * @since 5.12.0
         *
         * @var string
         */
        public static $slug;
        /**
         * The slug used for the single event sharing block toggle.
         *
         * @since 5.16.1
         *
         * @var string
         */
        public $block_slug;
        /**
         * Determines if this instance of the class has it's actions and filters hooked.
         *
         * @since 5.12.3
         *
         * @var bool
         */
        protected $hooked = false;
        /**
         * Link_Abstract constructor.
         *
         * @since 5.12.3
         */
        public function __construct()
        {
        }
        /**
         * Sets the hooked param for flagging if the hooks were created.
         *
         * @since 5.12.3
         *
         * @param bool $hooked What to save in the hooked var.
         */
        public function set_hooked(bool $hooked = true)
        {
        }
        /**
         * Hooks this instance actions and filters.
         *
         * @since 5.12.3
         */
        public function hook()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function filter_tec_views_v2_subscribe_links($subscribe_links)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function filter_tec_views_v2_single_subscribe_links($links)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function is_visible()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_label(\Tribe\Events\Views\V2\View $view = null)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_single_label(\Tribe\Events\Views\V2\View $view = null)
        {
        }
        /**
         * Fetches the slug of this particular instance of the Link.
         *
         * @since 5.12.0
         *
         * @return string
         */
        public static function get_slug()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function set_visibility(bool $visible)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_uri(\Tribe\Events\Views\V2\View $view = null)
        {
        }
        /**
         * Retrieve the iCal Feed URL with current context parameters.
         *
         * Both iCal and gCal URIs can be built from the Feed URL which simply
         * points to a canonical URL that the generator can parse
         * via `tribe_get_global_query_object` and spew out results in the
         * ICS format.
         *
         * This is exactly what \Tribe__Events__iCal::do_ical_template does
         * and lets it generate from a less vague and a more context-bound URL
         * for more granular functionality. This lets us have shortcode support
         * among other things.
         *
         * We strip some of the things that we don't need for subscriptions
         * like end dates, view types, etc., ignores pagination and always returns
         * fresh future events.
         *
         * The URL generated is also inert to the Permalink and Rewrite Rule settings
         * in WordPress, so it will work out of the box on any website, even if
         * the settings are changed or break.
         *
         * @param View $view The View we're being called from.
         *
         * @return string The iCal Feed URI.
         */
        protected function get_canonical_ics_feed_url(\Tribe\Events\Views\V2\View $view = null)
        {
        }
    }
    /**
     * Class Google_Calendar
     *
     * @since   5.12.0
     *
     * @package Tribe\Events\Views\V2\iCalendar
     */
    class Google_Calendar extends \Tribe\Events\Views\V2\iCalendar\Links\Link_Abstract
    {
        /**
         * {@inheritDoc}
         */
        public static $slug = 'gcal';
        /**
         * {@inheritDoc}
         */
        public $block_slug = 'hasGoogleCalendar';
        /**
         * {@inheritDoc}
         */
        public function register()
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_uri(\Tribe\Events\Views\V2\View $view = null)
        {
        }
        /**
         * Generate a link that will import a single event into Google Calendar.
         *
         *	Required link items:
         *	action=TEMPLATE
         *	text=[the title of the event]
         *	dates= in YYYYMMDDHHMMSS format. start datetime / end datetime
         *
         *	Optional link items:
         *	ctz=[time zone]
         *	details=[event details]
         *	location=[event location]
         *
         * URL format: https://www.google.com/calendar/render?action=TEMPLATE&text=Title&dates=20190227/20190228
         *
         * @since 5.14.0
         *
         * @param string|int|WP_post $post The ID or post object the rui is for, defaults to the current post.
         *
         * @return string                  URL string. Empty string if post not found or post is not an event.
         */
        public function generate_single_url($post = null)
        {
        }
        /**
         * Truncate Event Description and add permalink if greater than $length characters.
         *
         * @since 5.14.0
         *
         * @param string      $event_details The event description.
         * @param WP_Post|int $post_id The event post or ID.
         * @param int         $length The max length for the description before adding a "read more" link.
         *
         * @return string The possibly modified event description.
         */
        public function format_event_details_for_url($event_details, $post, int $length = 0)
        {
        }
        /**
         *  Returns a string version of the full address of an event.
         *
         * @since 5.14.0
         *
         * @todo This should really live in Tribe__Events__Venue, so move it there at some point
         * @see Tribe__Events__Main->fullAddressString()
         *
         * @param int|WP_Post|null The post object or post id.
         *
         * @return string The event venue's address. Empty string if the event or venue isn't found.
         */
        public static function generate_string_address($event = null)
        {
        }
    }
}
namespace Tribe\Events\Views\V2\iCalendar\Traits {
    /**
     * Class Outlook_Methods
     *
     * @since   5.16.0
     *
     * @package Tribe\Events\Views\V2\iCalendar
     */
    trait Outlook_Methods
    {
        /**
         * Space replacement used to in Outlook link.
         *
         * @since 5.16.0
         *
         * @var string
         */
        protected static $outlook_space = '%20';
        /**
         * Temporary space replacement used to to urlencode an Outlook link.
         *
         * @since 5.16.0
         *
         * @var string
         */
        protected static $outlook_temp_space = 'TEC_OUTLOOK_SPACE';
        /**
         * Generate the parameters for the Outlook export buttons.
         *
         * @since 5.16.0
         *
         * @param string $calendar Whether it's Outlook live or Outlook 365.
         *
         * @return string Part of the URL containing the event information.
         */
        protected function generate_outlook_add_url_parameters($calendar = 'live')
        {
        }
        /**
         * Generate the single event "Add to calendar" URL.
         *
         * @since 5.16.0
         *
         * @return string The singe event add to calendar URL.
         */
        public function generate_outlook_full_url()
        {
        }
        /**
         * Generate the subscribe URL.
         *
         * @since 5.16.0
         *
         * @return string The subscribe url.
         */
        public function generate_outlook_subscribe_url(\Tribe\Events\Views\V2\View $view = null)
        {
        }
        /**
         * Changing spaces to %20 and encoding.
         * urlencode() changes the spaces to +. That is also how Outlook will show it.
         * So we're replacing it temporarily and then changing them to %20 which will work.
         *
         * @since 5.16.0
         *
         * @param string $string The URL string.
         *
         * @return string The encoded URL string.
         */
        public function space_replace_and_encode($string)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_uri(\Tribe\Events\Views\V2\View $view = null)
        {
        }
    }
}
namespace Tribe\Events\Views\V2\iCalendar\Links {
    /**
     * Class Outlook_365
     *
     * @since   5.16.0
     *
     * @package Tribe\Events\Views\V2\iCalendar
     */
    class Outlook_365 extends \Tribe\Events\Views\V2\iCalendar\Links\Link_Abstract
    {
        use \Tribe\Events\Views\V2\iCalendar\Traits\Outlook_Methods;
        /**
         * {@inheritDoc}
         */
        public static $slug = 'outlook-365';
        /**
         * {@inheritDoc}
         */
        public static $calendar_slug = 'office';
        /**
         * {@inheritDoc}
         */
        public $block_slug = 'hasOutlook365';
        /**
         * {@inheritDoc}
         */
        public function register()
        {
        }
    }
    /**
     * Class Outlook
     *
     * @since 5.16.0
     *
     * @package Tribe\Events\Views\V2\iCalendar
     */
    class Outlook_Export extends \Tribe\Events\Views\V2\iCalendar\Links\Link_Abstract
    {
        /**
         * {@inheritDoc}
         */
        public static $slug = 'outlook-ics';
        /**
         * {@inheritDoc}
         */
        public function register()
        {
        }
        /**
         * Filters the is_visible() function to not display on single events.
         *
         * @since 5.16.0
         *
         * @param boolean $visible Whether to display the link.
         * @param View    $view     The current View object.
         *
         * @return boolean $visible Whether to display the link.
         */
        public function filter_tec_views_v2_subscribe_link_outlook_ics_visibility($visible)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_uri(\Tribe\Events\Views\V2\View $view = null)
        {
        }
    }
    /**
     * Class Outlook_Live
     *
     * @since   5.16.0
     *
     * @package Tribe\Events\Views\V2\iCalendar
     */
    class Outlook_Live extends \Tribe\Events\Views\V2\iCalendar\Links\Link_Abstract
    {
        use \Tribe\Events\Views\V2\iCalendar\Traits\Outlook_Methods;
        /**
         * {@inheritDoc}
         */
        public static $slug = 'outlook-live';
        /**
         * {@inheritDoc}
         */
        public $block_slug = 'hasOutlookLive';
        /**
         * {@inheritDoc}
         */
        public static $calendar_slug = 'live';
        /**
         * {@inheritDoc}
         */
        public function register()
        {
        }
    }
    /**
     * Class iCal
     *
     * @since   5.12.0
     *
     * @package Tribe\Events\Views\V2\iCalendar
     */
    class iCal extends \Tribe\Events\Views\V2\iCalendar\Links\Link_Abstract
    {
        /**
         * {@inheritDoc}
         */
        public static $slug = 'ical';
        /**
         * {@inheritDoc}
         */
        public $block_slug = 'hasiCal';
        /**
         * {@inheritDoc}
         */
        public function register()
        {
        }
    }
    /**
     * Class iCal
     *
     * @since   5.12.0
     *
     * @package Tribe\Events\Views\V2\iCalendar
     */
    class iCalendar_Export extends \Tribe\Events\Views\V2\iCalendar\Links\Link_Abstract
    {
        /**
         * {@inheritDoc}
         */
        public static $slug = 'ics';
        /**
         * {@inheritDoc}
         */
        public function register()
        {
        }
        /**
         * Filters the is_visible() function to not display on single events.
         *
         * @since 5.14.0
         *
         * @param boolean $visible Whether to display the link.
         * @param View    $view     The current View object.
         *
         * @return boolean $visible Whether to display the link.
         */
        public function filter_tec_views_v2_subscribe_link_ics_visibility($visible)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function get_uri(\Tribe\Events\Views\V2\View $view = null)
        {
        }
    }
}
namespace Tribe\Events\Views\V2\iCalendar {
    /**
     * Class Request
     *
     * @since   4.6.0
     *
     * @package Tribe\Events\Views\V2\iCalendar
     */
    class Request
    {
        /**
         * A reference to the base implementation of the iCalendar exports handler.
         *
         * @since 4.6.0
         *
         * @var iCal
         */
        protected $ical;
        /**
         * A reference the context used for the request.
         *
         * @since 4.6.0
         *
         * @var Context
         */
        protected $context;
        /**
         * Request constructor.
         *
         * @since 4.6.0
         *
         * @param Context|null $context Which context was used to prepare this request for iCal.
         * @param iCal|null    $ical    Either a reference to an explicit instance of the base
         *                              iCalendar exports handler, or `null` to use the one provided
         *                              by the `tribe` Service Locator.
         */
        public function __construct(\Tribe__Context $context = null, \Tribe__Events__iCal $ical = null)
        {
        }
        /**
         * Returns the ordered list of event post IDs that match the current
         * iCalendar export request.
         *
         * @since 4.6.0
         *
         * @return array<int> A list of event post IDs that match the current
         *                    iCalendar export request.
         */
        public function get_event_ids()
        {
        }
    }
    /**
     * Class Single_Events
     *
     * @since   5.16.0
     *
     * @package Tribe\Events\Views\V2\iCalendar
     */
    class Single_Events
    {
        /**
         * Stores the template class used.
         *
         * @since 5.16.0
         *
         * @var Template
         */
        protected $template;
        /**
         * iCalendar_Handler Modification constructor.
         *
         * @since 5.16.0
         *
         * @param Template $template An instance of the plugin template handler.
         */
        public function __construct(\Tribe\Events\Views\V2\iCalendar\Template $template)
        {
        }
        /**
         * Gets the template instance used to render single events iCalendar templates.
         *
         * @since 5.16.0
         *
         * @param Template $template An instance of the plugin template handler.
         *
         * @return Template An instance of the plugin template handler.
         */
        public function get_template($template)
        {
        }
        /**
         * Replace (overwrite) the default single event links with subscription links.
         *
         * @see   `tribe_events_ical_single_event_links` filter.
         *
         * @since 5.16.0
         *
         * @param string $calendar_links The link content.
         *
         * @return string The altered link content.
         */
        public function single_event_links($calendar_links, $subscribe_links)
        {
        }
    }
    /**
     * Class Template
     *
     * @since  5.16.0
     *
     * @package Tribe\Events\Views\V2\iCalendar
     */
    class Template extends \Tribe__Template
    {
        /**
         * Template constructor.
         *
         * @since 5.16.0
         */
        public function __construct()
        {
        }
        /**
         * Returns the current template view as null to prevent fatal errors when calling the subscribe link templates in single events.
         *
         * @since 5.16.0
         *
         * @return null
         */
        public function get_view()
        {
        }
    }
    /**
     * Class iCalendar_Handler
     *
     * @since   5.12.0
     *
     * @package Tribe\Events\Views\V2\iCalendar
     */
    class iCalendar_Handler extends \TEC\Common\Contracts\Service_Provider
    {
        /**
         * Which classes we will load for links by default.
         *
         * @since 5.12.0
         *
         * @var string[]
         */
        protected $default_feeds = [\Tribe\Events\Views\V2\iCalendar\Links\Google_Calendar::class, \Tribe\Events\Views\V2\iCalendar\Links\iCal::class, \Tribe\Events\Views\V2\iCalendar\Links\Outlook_365::class, \Tribe\Events\Views\V2\iCalendar\Links\Outlook_Live::class, \Tribe\Events\Views\V2\iCalendar\Links\iCalendar_Export::class, \Tribe\Events\Views\V2\iCalendar\Links\Outlook_Export::class];
        /**
         * Which classes we will load for links by default.
         *
         * @since 5.12.3
         *
         * @var Link_Abstract[]
         */
        protected $feeds = [];
        /**
         * Register singletons and main hook.
         *
         * @since 5.12.0
         */
        public function register()
        {
        }
        /**
         * Register all our hooks here.
         *
         * @since 5.12.0
         */
        public function register_hooks()
        {
        }
        /**
         * Allow toggling off the new subscribe link list via a hook.
         *
         * @since 5.12.0
         *
         * @return boolean Whether to use the new subscribe link list.
         */
        public function use_subscribe_links()
        {
        }
        /**
         * Initializes, sets the internal feeds array and returns it.
         *
         * @since 5.12.3
         *
         * @return array
         */
        public function get_feeds()
        {
        }
        public function filter_template_context($context, $file, $name, $template)
        {
        }
        /**
         * Add iCal feed link labels and URIs to the global template vars.
         *
         * Usable in ical-link.php via the $subscribe_links global.
         *
         * @see   `tribe_events_views_v2_view_template_vars` filter.
         *
         * @since 5.12.0
         *
         * @param array<string,mixed> $template_vars The View template variables.
         * @param View|null           $view          The View implementation.
         *
         * @return array The filtered template variables.
         */
        public function filter_template_vars(array $template_vars, \Tribe\Events\Views\V2\View $view = null)
        {
        }
        /**
         * Builds the subscribe links in a separate process.
         *
         * @since 5.12.0
         *
         * @param View|null $view
         *
         * @return array
         */
        public function get_subscribe_links(\Tribe\Events\Views\V2\View $view = null)
        {
        }
        /**
         * Replace (overwrite) the default single event links with subscription links.
         *
         * @see   `tribe_events_ical_single_event_links` filter.
         *
         * @since 5.12.0
         * @since 5.16.0 - Move to Single_Events class to handle Outlook.
         *
         * @param string $calendar_links The link content.
         *
         * @return string The altered link content.
         */
        public function single_event_links($calendar_links)
        {
        }
        /**
         * Add iCal REFRESH and TTL headers.
         *
         * Some clients may ignore these refresh headers.
         * https://support.google.com/calendar/answer/37100?hl=en&ref_topic=1672445
         *
         * REFRESH-INTERVAL (iCalendar standards, so Google and iCal):
         * https://icalendar.org/New-Properties-for-iCalendar-RFC-7986/5-7-refresh-interval-property.html
         *
         * X-PUBLISHED-TTL (Recommended update interval for subscription to the calendar via extension, used by Microsoft):
         * https://docs.microsoft.com/en-us/openspecs/exchange_server_protocols/ms-oxcical/1fc7b244-ecd1-4d28-ac0c-2bb4df855a1f
         *
         * X-Robots-Tag (keep robots from indexing the downloads pages):
         * https://developers.google.com/search/docs/advanced/crawling/block-indexing
         *
         * Note: PT1H means Once per hour.
         *
         * @see   `tribe_ical_properties` filter.
         *
         * @since 5.12.0
         *
         * @param string $content The iCal content.
         *
         * @return string The filtered content.
         */
        public function ical_properties($content)
        {
        }
        /**
         * Add x-robots tag to response headers for ical download links.
         *
         * @since 6.2.6
         */
        public function ical_header_properties()
        {
        }
    }
}
namespace {
    /**
     *  Class that implements the export to iCal functionality
     *  both for list and single events
     */
    class Tribe__Events__iCal
    {
        /**
         * @var int The number of events that will be exported when generating the iCal feed.
         */
        protected $feed_default_export_count = 30;
        /**
         * The $post where the *.ics file is generated
         *
         * @since 4.9.4
         *
         * @var null
         */
        protected $post = \null;
        /**
         * An array with all the events that are part of the *.ics file
         *
         * @since 4.9.4
         *
         * @var array
         */
        protected $events = [];
        /**
         * The type of iCal Feed ( ical|outlook)
         *
         * @since 5.16.0
         *
         * @var string
         */
        protected $type = 'ical';
        /**
         * Set all the filters and actions necessary for the operation of the iCal generator.
         */
        public function hook()
        {
        }
        /**
         * outputs a <link> element for the ical feed
         */
        public function set_feed_link()
        {
        }
        /**
         * Returns the url for the iCal generator for lists of posts.
         *
         * @param string $type The type of iCal link to return, defaults to 'home'.
         *
         * @return string
         */
        public function get_ical_link($type = 'home')
        {
        }
        /**
         * Make sure when we grab a month link it includes the correct month.
         *
         * @param string $event_date Date of the month we are getting the link for.
         *
         * @return string The iCal export URL for the Month view.
         */
        public function month_view_ical_link($event_date = \null)
        {
        }
        /**
         * Make sure ical link has the date in the URL instead of "today" on day view
         *
         * @param $link
         *
         * @return string
         */
        public function day_view_ical_link($link)
        {
        }
        /**
         * Generates the markup for iCal and gCal single event links
         **/
        public function single_event_links()
        {
        }
        /**
         * Generates the markup for the "iCal Import" link for the views.
         */
        public function maybe_add_link()
        {
        }
        /**
         * Executes the iCal generator when the appropriate query_var or $_GET is setup.
         */
        public function do_ical_template()
        {
        }
        /**
         * Checks access to an event's content, in the context for generating an iCal file.
         *
         * @since 6.1.3
         *
         * @param numeric|WP_Post $post The post to evaluate our access to.
         *
         * @return bool
         */
        public static function has_access_to_see_event_content($post) : bool
        {
        }
        /**
         * Checks access to an event, in the context for generating an iCal file.
         *
         * @since 6.1.3
         *
         * @param numeric|WP_Post $post The post to evaluate our access to.
         *
         * @return bool
         */
        public static function has_access_to_see_event_exists($post) : bool
        {
        }
        /**
         * Generates the iCal file
         *
         * @since 6.1.3 Adding access checks to the provided posts.
         *
         * @param int|null|array $post If you want the ical file for a single event
         * @param boolean  $echo Whether the content should be echoed or returned
         *
         * @return string
         */
        public function generate_ical_feed($post = \null, $echo = \true)
        {
        }
        /**
         * Get an array with all the Events to be used to process the *.ics file
         *
         * @since 4.9.4
         *
         * @return array|null
         */
        protected function get_event_posts()
        {
        }
        /**
         * Set the headers before the file is delivered.
         *
         * @since 4.9.4
         */
        protected function set_headers()
        {
        }
        /**
         * Get the file name of the *.ics file
         *
         * @since 4.9.4
         * @since 5.16.0 - Add the iCal type to the filename so both ics and outlook ics are unique names.
         *
         * @return mixed The calendar name
         */
        protected function get_file_name()
        {
        }
        /**
         * Get the full content of the *.ics file.
         *
         * @since 4.9.4
         *
         * @return string
         */
        protected function get_content()
        {
        }
        /**
         * Get the start of the .ics File
         *
         * @since 4.9.4
         * @since 5.16.0 - Add a check for iCAL type to prevent Outlook ics from including X-WR-CALNAME.
         *
         * @return mixed
         */
        protected function get_start()
        {
        }
        /**
         * Add the VTIMEZONE group to the file
         *
         * @since 4.9.4
         *
         * @param array $events
         *
         * @return string
         */
        protected function get_timezones($events = [])
        {
        }
        /**
         * Create an array of arrays with unique Timezones for all the events, every timezone has
         * the following fields:
         *
         * - timezone. The Timezone Object
         * - events. List with all the events
         *
         * @since 4.9.4
         *
         * @param $events array An array with all the events to parse the timezones.
         *
         * @return array
         */
        protected function parse_timezones($events)
        {
        }
        /**
         * Format the offset into Hours and minutes from seconds.
         *
         * @since 4.9.4
         *
         * @param $offset
         *
         * @return string
         */
        protected function format_offset($offset)
        {
        }
        /**
         * Get the Body With all the events of the .ics file
         *
         * @since 4.9.4
         * @since5.1.6 - Utilize get_ical_output_for_an_event() to get the iCal output.
         *
         * @param array $posts
         *
         * @return string
         */
        protected function get_body($posts = [])
        {
        }
        /**
         * Get the iCal Output for the provided event object.
         *
         * @since 5.1.6
         * @since 6.2.2   Sanitize organizer name using new method.
         *
         * @param \WP_Post             $event_post The event post object.
         * @param \Tribe__Events__Main $tec        An instance of the main TEC Class.
         *
         * @return array  An array of iCal output fields.
         */
        public function get_ical_output_for_an_event($event_post, \Tribe__Events__Main $tec)
        {
        }
        /**
         * Replace the text and encode the text before doing the replacement.
         *
         * @since 4.9.4
         *
         * @param string $text The text to be replaced.
         * @param array  $search What elements to search to replace.
         * @param array  $replacement New values used to replace.
         *
         * @return mixed
         */
        protected function replace($text = '', $search = [], $replacement = [])
        {
        }
        /**
         * Apply html_entity_decode on a string using ENT_QUOTES style
         *
         * @since 4.9.4
         *
         * @param string $text
         *
         * @return string
         */
        protected function html_decode($text = '')
        {
        }
        /**
         * Return the timezone name associated with the event
         *
         * @since 4.9.4
         *
         * @param $event \WP_Post The $event post
         *
         * @return string
         */
        protected function get_timezone($event)
        {
        }
        /**
         * Return the end of the .ics file
         *
         * @since 4.9.4
         *
         * @return string
         */
        protected function get_end()
        {
        }
        /**
         * Get a list of events, the function make sure it uses the default values used on the main events page
         * so if is called from a different location like a page or post (shortcode) it will retain the original values
         * to generate the events feed.
         *
         * @since 4.6.11
         *
         * @param array $args The WP_Query arguments.
         * @param mixed $query A WP_Query object or null if none.
         * @return array
         */
        protected function get_events_list($args = [], $query = \null)
        {
        }
        /**
         * Get the number of posts per page to be used on the feed of the iCal, make sure it passes the value via the filter
         * tribe_ical_feed_posts_per_page and validates the number is greater than 0.
         *
         * @since 4.6.11
         *
         * @return int
         */
        public function feed_posts_per_page()
        {
        }
        /**
         * Gets the number of events that should be exported when generating the iCal feed.
         *
         * @return int
         */
        public function get_feed_default_export_count()
        {
        }
        /**
         * Sets the number of events that should be exported when generating the iCal feed.
         *
         * @param int $count
         */
        public function set_feed_default_export_count($count)
        {
        }
    }
    /**
     * @deprecated 6.0.0
     */
    class Tribe__Events__Bar
    {
        /**
         * @deprecated 6.0.0
         */
        public function hook()
        {
        }
        /**
         * @deprecated 6.0.0
         */
        public function should_show()
        {
        }
        /**
         * @deprecated 6.0.0
         */
        public function body_class($classes)
        {
        }
        /**
         * @deprecated 6.0.0
         */
        public function disabled_bar_before($before)
        {
        }
        /**
         * @deprecated 6.0.0
         */
        public function disabled_bar_after($after)
        {
        }
        /**
         * @deprecated 6.0.0
         */
        public function load_script()
        {
        }
        /**
         * @deprecated 4.6.21
         */
        public static function instance()
        {
        }
    }
    /**
     * Facilitates smoother integration with the Freemius.
     *
     * @deprecated 6.1.0
     *
     * @since       4.9
     */
    class Tribe__Events__Integrations__Freemius
    {
        /**
         * Tribe__Tickets__Integrations__Freemius constructor.
         *
         * @deprecated 6.1.0
         * @since       5.0.2
         */
        public function __construct()
        {
        }
        /**
         * Performs setup for the Freemius integration singleton.
         *
         * @deprecated 6.1.0
         * @since       5.0.2
         */
        public function setup()
        {
        }
        /**
         * Prevents the Freemius integration from happening on Update Message redirect pages.
         *
         * @deprecated 6.1.0
         * @since       6.0.0
         *
         * @param bool                          $bypass
         * @param Tribe__Admin__Activation_Page $activation_page
         *
         * @return bool
         */
        public function bypass_update_page($bypass, $activation_page)
        {
        }
        /**
         * For some reason Freemius is redirecting some customers to a page that doesnt exist. So we catch that page and
         * redirect them back to the actual page that we are using to setup the plugins integration.
         *
         * @link        https://moderntribe.atlassian.net/browse/TEC-3218
         *
         * @deprecated 6.1.0
         * @since       5.0.2
         *
         * @return void  Retuning a Redirect header, so nothing gets returned otherwise.
         */
        public function action_redirect_incorrect_page()
        {
        }
        /**
         * Get the connect page URL.
         *
         * @deprecated 6.1.0
         * @since       5.0.2
         *
         * @param string $connect_url Current connect page URL.
         *
         * @return string The connect page URL.
         */
        public function get_connect_url($connect_url)
        {
        }
        /**
         * Get the Settings page URL.
         *
         * @deprecated 6.1.0
         * @since       5.0.2
         *
         * @return string The Settings page URL.
         */
        public function get_settings_url()
        {
        }
        /**
         * Get the plugin icon URL.
         *
         * @deprecated 6.1.0
         * @since       5.0.2
         *
         * @return string The plugin icon URL.
         */
        public function get_plugin_icon_url()
        {
        }
        /**
         * Get the Settings page path.
         *
         * @deprecated 6.1.0
         * @since       5.0.2
         *
         * @return string The Settings page path.
         */
        public function get_settings_path()
        {
        }
        /**
         * Get the Welcome page URL.
         *
         * @deprecated 6.1.0
         * @since       5.1.6
         *
         * @return string The welcome page URL.
         */
        public function get_welcome_url()
        {
        }
        /**
         * Get the Welcome page URL.
         *
         * @deprecated 6.1.0
         * @since       6.0.0
         *
         * @return string The welcome page URL.
         */
        public function get_update_url()
        {
        }
        /**
         * Get the Welcome page URL.
         *
         * @deprecated 6.1.0
         * @since       6.0.0
         *
         * @return string The welcome page URL.
         */
        public function get_redirect_url()
        {
        }
        /**
         * Action to skip activation since Freemius code does not skip correctly here.
         *
         * @deprecated 6.1.0
         * @since       4.9
         *
         * @return bool Whether activation was skipped.
         */
        public function action_skip_activation()
        {
        }
        /**
         * Filter the content for the Freemius Popup.
         *
         * @deprecated 6.1.0
         * @since       4.9
         *
         * @param string $message         The message content.
         * @param string $user_first_name The first name of user.
         * @param string $product_title   The product title.
         * @param string $user_login      The user_login of user.
         * @param string $site_link       The site URL.
         * @param string $freemius_link   The Freemius URL.
         *
         * @return string
         */
        public function filter_connect_message_on_update($message, $user_first_name, $product_title, $user_login, $site_link, $freemius_link)
        {
        }
        /**
         * Returns the instance of Freemius plugin.
         *
         * @deprecated 6.1.0
         * @since       4.9
         *
         * @return Freemius
         */
        public function get()
        {
        }
        /**
         * Method to remove the sticky message when the plugin is active for Freemius.
         *
         * @deprecated 6.1.0
         * @since       4.9
         */
        public function maybe_remove_activation_complete_notice()
        {
        }
    }
    /**
     * Event List Widget
     *
     * @deprecated 6.0.0
     *
     * Creates a widget that displays the next upcoming x events
     */
    class Tribe__Events__List_Widget extends \Tribe\Events\Views\V2\Widgets\Widget_List
    {
        /**
         * The main widget output function (called by the class's widget() function).
         *
         * @deprecated 6.0.0
         */
        public function widget_output($args, $instance, $template_name = 'widgets/list-widget')
        {
        }
        /**
         * Output the admin form for the widget.
         *
         * @deprecated 6.0.0
         */
        public function form($instance)
        {
        }
        /**
         * Enqueue the appropriate CSS for the list widget
         *
         * @deprecated 6.0.0
         */
        public static function enqueue_widget_styles()
        {
        }
    }
    /**
     * This file contains hooks and functions required to set up the day view.
     * @deprecated 6.0.0
     */
    class Tribe__Events__Template__Day extends \Tribe__Events__Template_Factory
    {
        /**
         * @deprecated 6.0.0
         */
        const AJAX_HOOK = 'tribe_event_day';
        /**
         * @deprecated 6.0.0
         */
        public $view_path = 'day/content';
        /**
         * @deprecated 6.0.0
         */
        public function hooks()
        {
        }
        /**
         * @deprecated 6.0.0
         */
        public function header_attributes($attrs)
        {
        }
        /**
         * @deprecated 6.0.0
         */
        public function ical_link($link)
        {
        }
        /**
         * @deprecated 6.0.0
         */
        public function setup_view()
        {
        }
        /**
         * @deprecated 6.0.0
         */
        public function ajax_response()
        {
        }
    }
    /**
     * List view template class
     *
     * @deprecated 6.0.0
     */
    class Tribe__Events__Template__List extends \Tribe__Events__Template_Factory
    {
        /**
         * @deprecated 6.0.0
         */
        const AJAX_HOOK = 'tribe_list';
        /**
         * @deprecated 6.0.0
         */
        public $view_path = 'list/content';
        /**
         * @deprecated 6.0.0
         */
        public function ajax_response()
        {
        }
    }
    /**
     * Month view template class
     *
     * @deprecated 6.0.0
     */
    class Tribe__Events__Template__Month extends \Tribe__Events__Template_Factory
    {
        /**
         * @deprecated 6.0.0
         */
        const PREVIOUS_MONTH = -1;
        /**
         * @deprecated 6.0.0
         */
        const CURRENT_MONTH = 0;
        /**
         * @deprecated 6.0.0
         */
        const NEXT_MONTH = 1;
        /**
         * @deprecated 6.0.0
         */
        const AJAX_HOOK = 'tribe_calendar';
        /**
         * @deprecated 6.0.0
         */
        public $view_path = 'month/content';
        /**
         * @deprecated 6.0.0
         */
        public function __construct($args = [])
        {
        }
        /**
         * @deprecated 6.0.0
         */
        public function get_events_in_month_ids()
        {
        }
        /**
         * @deprecated 6.0.0
         */
        public function json_ld_markup()
        {
        }
        /**
         * @deprecated 6.0.0
         */
        public function set_notices()
        {
        }
        /**
         * @deprecated 6.0.0
         */
        public static function calculate_first_cell_date($month, $start_of_week = \null)
        {
        }
        /**
         * @deprecated 6.0.0
         */
        public static function calculate_final_cell_date($month, $start_of_week = \null)
        {
        }
        /**
         * @deprecated 6.0.0
         */
        public static function have_days()
        {
        }
        /**
         * @deprecated 6.0.0
         */
        public static function the_day()
        {
        }
        /**
         * @deprecated 6.0.0
         */
        public static function rewind_days()
        {
        }
        /**
         * @deprecated 6.0.0
         */
        public static function get_current_day()
        {
        }
        /**
         * @deprecated 6.0.0
         */
        public static function day_classes()
        {
        }
        /**
         * @deprecated 6.0.0
         */
        public static function get_current_week()
        {
        }
        /**
         * @deprecated 6.0.0
         */
        public function event_classes($classes = '')
        {
        }
        /**
         * @deprecated 6.0.0
         */
        public function ajax_response()
        {
        }
        /**
         * @deprecated 6.0.0
         */
        public function has_events()
        {
        }
        /**
         * @deprecated 6.0.0
         */
        public function has_events_filtered()
        {
        }
    }
    /*
    Copyright (c) 2008 Sebastián Grignoli
    All rights reserved.
    
    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    1. Redistributions of source code must retain the above copyright
       notice, this list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.
    3. Neither the name of copyright holders nor the names of its
       contributors may be used to endorse or promote products derived
       from this software without specific prior written permission.
    
    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
    TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL COPYRIGHT HOLDERS OR CONTRIBUTORS
    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    POSSIBILITY OF SUCH DAMAGE.
    */
    /**
     * @author   "Sebastián Grignoli" <grignoli@gmail.com>
     * @package  Encoding
     * @version  2.0
     * @link     https://github.com/neitanod/forceutf8
     * @example  https://github.com/neitanod/forceutf8
     * @license  Revised BSD
     */
    //namespace ForceUTF8;
    class ForceUTF8__Encoding
    {
        const ICONV_TRANSLIT = "TRANSLIT";
        const ICONV_IGNORE = "IGNORE";
        const WITHOUT_ICONV = "";
        protected static $win1252ToUtf8 = array(128 => "€", 130 => "‚", 131 => "ƒ", 132 => "„", 133 => "…", 134 => "†", 135 => "‡", 136 => "ˆ", 137 => "‰", 138 => "Š", 139 => "‹", 140 => "Œ", 142 => "Ž", 145 => "‘", 146 => "’", 147 => "“", 148 => "”", 149 => "•", 150 => "–", 151 => "—", 152 => "˜", 153 => "™", 154 => "š", 155 => "›", 156 => "œ", 158 => "ž", 159 => "Ÿ");
        protected static $brokenUtf8ToUtf8 = array("" => "€", "" => "‚", "" => "ƒ", "" => "„", "" => "…", "" => "†", "" => "‡", "" => "ˆ", "" => "‰", "" => "Š", "" => "‹", "" => "Œ", "" => "Ž", "" => "‘", "" => "’", "" => "“", "" => "”", "" => "•", "" => "–", "" => "—", "" => "˜", "" => "™", "" => "š", "" => "›", "" => "œ", "" => "ž", "" => "Ÿ");
        protected static $utf8ToWin1252 = array("€" => "\x80", "‚" => "\x82", "ƒ" => "\x83", "„" => "\x84", "…" => "\x85", "†" => "\x86", "‡" => "\x87", "ˆ" => "\x88", "‰" => "\x89", "Š" => "\x8a", "‹" => "\x8b", "Œ" => "\x8c", "Ž" => "\x8e", "‘" => "\x91", "’" => "\x92", "“" => "\x93", "”" => "\x94", "•" => "\x95", "–" => "\x96", "—" => "\x97", "˜" => "\x98", "™" => "\x99", "š" => "\x9a", "›" => "\x9b", "œ" => "\x9c", "ž" => "\x9e", "Ÿ" => "\x9f");
        /**
         * Function \ForceUTF8\Encoding::toUTF8
         *
         * This function leaves UTF8 characters alone, while converting almost all non-UTF8 to UTF8.
         *
         * It assumes that the encoding of the original string is either Windows-1252 or ISO 8859-1.
         *
         * It may fail to convert characters to UTF-8 if they fall into one of these scenarios:\
         *
         * 1) when any of these characters:   ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞß
         *    are followed by any of these:  ("group B")
         *                                    ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶•¸¹º»¼½¾¿
         * For example:   %ABREPRESENT%C9%BB. «REPRESENTÉ»
         * The "«" (%AB) character will be converted, but the "É" followed by "»" (%C9%BB)
         * is also a valid unicode character, and will be left unchanged.\
         *
         * 2) when any of these: àáâãäåæçèéêëìíîï  are followed by TWO chars from group B,
         * 3) when any of these: ðñòó  are followed by THREE chars from group B.
         *
         * @name toUTF8
         *
         * @param string $text  Any string.
         *
         * @return string  The same string, UTF8 encoded
         */
        static function toUTF8($text)
        {
        }
        static function toWin1252($text, $option = self::WITHOUT_ICONV)
        {
        }
        static function toISO8859($text)
        {
        }
        static function toLatin1($text)
        {
        }
        static function fixUTF8($text, $option = self::WITHOUT_ICONV)
        {
        }
        static function UTF8FixWin1252Chars($text)
        {
        }
        static function removeBOM($str = "")
        {
        }
        protected static function strlen($text)
        {
        }
        public static function normalizeEncoding($encodingLabel)
        {
        }
        public static function encode($encodingLabel, $text)
        {
        }
        protected static function utf8_decode($text, $option)
        {
        }
    }
    // autoload_real.php @generated by Composer
    class ComposerAutoloaderInitf1826f72bdc3508f80565dff22e569cb
    {
        public static function loadClassLoader($class)
        {
        }
        /**
         * @return \Composer\Autoload\ClassLoader
         */
        public static function getLoader()
        {
        }
    }
}
namespace Composer\Autoload {
    class ComposerStaticInitf1826f72bdc3508f80565dff22e569cb
    {
        public static $prefixLengthsPsr4 = array('T' => array('Tribe\\Events\\' => 13, 'TEC\\Events\\' => 11));
        public static $prefixDirsPsr4 = array('Tribe\\Events\\' => array(0 => __DIR__ . '/../..' . '/src/Tribe'), 'TEC\\Events\\' => array(0 => __DIR__ . '/../..' . '/src/Events'));
        public static $classMap = array('Composer\\InstalledVersions' => __DIR__ . '/..' . '/composer/InstalledVersions.php', 'TEC\\Events\\Blocks\\Controller' => __DIR__ . '/../..' . '/src/Events/Blocks/Controller.php', 'TEC\\Events\\Configuration\\Provider' => __DIR__ . '/../..' . '/src/Events/Configuration/Provider.php', 'TEC\\Events\\Custom_Tables\\V1\\Activation' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Activation.php', 'TEC\\Events\\Custom_Tables\\V1\\Events\\Event_Cleaner\\Event_Cleaner' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Events/Event_Cleaner/Event_Cleaner.php', 'TEC\\Events\\Custom_Tables\\V1\\Events\\Event_Cleaner\\Provider' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Events/Event_Cleaner/Provider.php', 'TEC\\Events\\Custom_Tables\\V1\\Events\\Occurrences\\Max_Recurrence' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Events/Occurrences/Max_Recurrence.php', 'TEC\\Events\\Custom_Tables\\V1\\Events\\Occurrences\\Max_Recurrence_Provider' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Events/Occurrences/Max_Recurrence_Provider.php', 'TEC\\Events\\Custom_Tables\\V1\\Events\\Occurrences\\Occurrences_Generator' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Events/Occurrences/Occurrences_Generator.php', 'TEC\\Events\\Custom_Tables\\V1\\Feedback\\Feedback_Interface' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Feedback/Feedback_Interface.php', 'TEC\\Events\\Custom_Tables\\V1\\Feedback\\Google_Form_Feedback' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Feedback/Google_Form_Feedback.php', 'TEC\\Events\\Custom_Tables\\V1\\Feedback\\Provider' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Feedback/Provider.php', 'TEC\\Events\\Custom_Tables\\V1\\Full_Activation_Provider' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Full_Activation_Provider.php', 'TEC\\Events\\Custom_Tables\\V1\\Health_Check' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Health_Check.php', 'TEC\\Events\\Custom_Tables\\V1\\Integrations\\ACF\\Controller' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Integrations/ACF/Controller.php', 'TEC\\Events\\Custom_Tables\\V1\\Integrations\\ACF\\Query_Modifier' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Integrations/ACF/Query_Modifier.php', 'TEC\\Events\\Custom_Tables\\V1\\Integrations\\Provider' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Integrations/Provider.php', 'TEC\\Events\\Custom_Tables\\V1\\Migration\\Admin\\Phase_View_Renderer' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Migration/Admin/Phase_View_Renderer.php', 'TEC\\Events\\Custom_Tables\\V1\\Migration\\Admin\\Progress_Modal' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Migration/Admin/Progress_Modal.php', 'TEC\\Events\\Custom_Tables\\V1\\Migration\\Admin\\Template' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Migration/Admin/Template.php', 'TEC\\Events\\Custom_Tables\\V1\\Migration\\Admin\\Upgrade_Tab' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Migration/Admin/Upgrade_Tab.php', 'TEC\\Events\\Custom_Tables\\V1\\Migration\\Ajax' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Migration/Ajax.php', 'TEC\\Events\\Custom_Tables\\V1\\Migration\\Asset_Loader' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Migration/Asset_Loader.php', 'TEC\\Events\\Custom_Tables\\V1\\Migration\\CSV_Report\\Download_Report_Provider' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Migration/CSV_Report/Download_Report_Provider.php', 'TEC\\Events\\Custom_Tables\\V1\\Migration\\CSV_Report\\File_Download' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Migration/CSV_Report/File_Download.php', 'TEC\\Events\\Custom_Tables\\V1\\Migration\\Events' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Migration/Events.php', 'TEC\\Events\\Custom_Tables\\V1\\Migration\\Expected_Migration_Exception' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Migration/Expected_Migration_Exception.php', 'TEC\\Events\\Custom_Tables\\V1\\Migration\\Maintenance_Mode' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Migration/Maintenance_Mode.php', 'TEC\\Events\\Custom_Tables\\V1\\Migration\\Migration_Exception' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Migration/Migration_Exception.php', 'TEC\\Events\\Custom_Tables\\V1\\Migration\\Process' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Migration/Process.php', 'TEC\\Events\\Custom_Tables\\V1\\Migration\\Process_Worker' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Migration/Process_Worker.php', 'TEC\\Events\\Custom_Tables\\V1\\Migration\\Provider' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Migration/Provider.php', 'TEC\\Events\\Custom_Tables\\V1\\Migration\\Reports\\Event_Report' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Migration/Reports/Event_Report.php', 'TEC\\Events\\Custom_Tables\\V1\\Migration\\Reports\\Event_Report_Categories' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Migration/Reports/Event_Report_Categories.php', 'TEC\\Events\\Custom_Tables\\V1\\Migration\\Reports\\Site_Report' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Migration/Reports/Site_Report.php', 'TEC\\Events\\Custom_Tables\\V1\\Migration\\State' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Migration/State.php', 'TEC\\Events\\Custom_Tables\\V1\\Migration\\Strategies\\Null_Migration_Strategy' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Migration/Strategies/Null_Migration_Strategy.php', 'TEC\\Events\\Custom_Tables\\V1\\Migration\\Strategies\\Single_Event_Migration_Strategy' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Migration/Strategies/Single_Event_Migration_Strategy.php', 'TEC\\Events\\Custom_Tables\\V1\\Migration\\Strategies\\Strategy_Interface' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Migration/Strategies/Strategy_Interface.php', 'TEC\\Events\\Custom_Tables\\V1\\Migration\\String_Dictionary' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Migration/String_Dictionary.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Builder' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Builder.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Event' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Event.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Formatters\\Boolean_Formatter' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Formatters/Boolean_Formatter.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Formatters\\Date_Formatter' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Formatters/Date_Formatter.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Formatters\\End_Date_Formatter' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Formatters/End_Date_Formatter.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Formatters\\Formatter' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Formatters/Formatter.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Formatters\\Integer_Key_Formatter' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Formatters/Integer_Key_Formatter.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Formatters\\Numeric_Formatter' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Formatters/Numeric_Formatter.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Formatters\\Text_Formatter' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Formatters/Text_Formatter.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Formatters\\Timezone_Formatter' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Formatters/Timezone_Formatter.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Model' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Model.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Model_Date_Attributes' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Model_Date_Attributes.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Occurrence' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Occurrence.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Post_Model' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Post_Model.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Validators\\Duration' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Validators/Duration.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Validators\\End_Date' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Validators/End_Date.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Validators\\End_Date_UTC' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Validators/End_Date_UTC.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Validators\\Ignore_Validator' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Validators/Ignore_Validator.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Validators\\Integer_Key' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Validators/Integer_Key.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Validators\\Occurrence_Duration' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Validators/Occurrence_Duration.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Validators\\Positive_Integer' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Validators/Positive_Integer.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Validators\\Present' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Validators/Present.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Validators\\Range_Dates' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Validators/Range_Dates.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Validators\\Start_Date' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Validators/Start_Date.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Validators\\Start_Date_UTC' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Validators/Start_Date_UTC.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Validators\\String_Validator' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Validators/String_Validator.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Validators\\Valid_Date' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Validators/Valid_Date.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Validators\\Valid_Event' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Validators/Valid_Event.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Validators\\Valid_Event_Model' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Validators/Valid_Event_Model.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Validators\\Valid_Timezone' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Validators/Valid_Timezone.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Validators\\Validator' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Validators/Validator.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Validators\\ValidatorInterface' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Validators/ValidatorInterface.php', 'TEC\\Events\\Custom_Tables\\V1\\Models\\Validators\\Whole_Number' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Models/Validators/Whole_Number.php', 'TEC\\Events\\Custom_Tables\\V1\\Notices' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Notices.php', 'TEC\\Events\\Custom_Tables\\V1\\Provider' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Provider.php', 'TEC\\Events\\Custom_Tables\\V1\\Provider_Contract' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Provider_Contract.php', 'TEC\\Events\\Custom_Tables\\V1\\Repository\\Events' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Repository/Events.php', 'TEC\\Events\\Custom_Tables\\V1\\Repository\\Provider' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Repository/Provider.php', 'TEC\\Events\\Custom_Tables\\V1\\Schema_Builder\\Abstract_Custom_Field' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Schema_Builder/Abstract_Custom_Field.php', 'TEC\\Events\\Custom_Tables\\V1\\Schema_Builder\\Abstract_Custom_Table' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Schema_Builder/Abstract_Custom_Table.php', 'TEC\\Events\\Custom_Tables\\V1\\Schema_Builder\\Abstract_Schema_Provider' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Schema_Builder/Abstract_Schema_Provider.php', 'TEC\\Events\\Custom_Tables\\V1\\Schema_Builder\\Field_Schema_Interface' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Schema_Builder/Field_Schema_Interface.php', 'TEC\\Events\\Custom_Tables\\V1\\Schema_Builder\\Schema_Builder' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Schema_Builder/Schema_Builder.php', 'TEC\\Events\\Custom_Tables\\V1\\Schema_Builder\\Schema_Provider_Interface' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Schema_Builder/Schema_Provider_Interface.php', 'TEC\\Events\\Custom_Tables\\V1\\Schema_Builder\\Table_Schema_Interface' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Schema_Builder/Table_Schema_Interface.php', 'TEC\\Events\\Custom_Tables\\V1\\Tables\\Events' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Tables/Events.php', 'TEC\\Events\\Custom_Tables\\V1\\Tables\\Occurrences' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Tables/Occurrences.php', 'TEC\\Events\\Custom_Tables\\V1\\Tables\\Provider' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Tables/Provider.php', 'TEC\\Events\\Custom_Tables\\V1\\Traits\\With_Core_Tables' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Traits/With_Core_Tables.php', 'TEC\\Events\\Custom_Tables\\V1\\Traits\\With_Database_Transactions' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Traits/With_Database_Transactions.php', 'TEC\\Events\\Custom_Tables\\V1\\Traits\\With_Dates_Representation' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Traits/With_Dates_Representation.php', 'TEC\\Events\\Custom_Tables\\V1\\Traits\\With_Observable_Filtering' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Traits/With_Observable_Filtering.php', 'TEC\\Events\\Custom_Tables\\V1\\Traits\\With_Reflection' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Traits/With_Reflection.php', 'TEC\\Events\\Custom_Tables\\V1\\Traits\\With_String_Dictionary' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Traits/With_String_Dictionary.php', 'TEC\\Events\\Custom_Tables\\V1\\Traits\\With_Timezones' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Traits/With_Timezones.php', 'TEC\\Events\\Custom_Tables\\V1\\Traits\\With_Unbound_Queries' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Traits/With_Unbound_Queries.php', 'TEC\\Events\\Custom_Tables\\V1\\Traits\\With_WP_Query_Introspection' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Traits/With_WP_Query_Introspection.php', 'TEC\\Events\\Custom_Tables\\V1\\Updates\\Controller' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Updates/Controller.php', 'TEC\\Events\\Custom_Tables\\V1\\Updates\\Events' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Updates/Events.php', 'TEC\\Events\\Custom_Tables\\V1\\Updates\\Meta_Watcher' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Updates/Meta_Watcher.php', 'TEC\\Events\\Custom_Tables\\V1\\Updates\\Provider' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Updates/Provider.php', 'TEC\\Events\\Custom_Tables\\V1\\Updates\\Requests' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Updates/Requests.php', 'TEC\\Events\\Custom_Tables\\V1\\Views\\V2\\By_Day_View_Compatibility' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Views/V2/By_Day_View_Compatibility.php', 'TEC\\Events\\Custom_Tables\\V1\\Views\\V2\\Customizer_Compatibility' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Views/V2/Customizer_Compatibility.php', 'TEC\\Events\\Custom_Tables\\V1\\Views\\V2\\Provider' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/Views/V2/Provider.php', 'TEC\\Events\\Custom_Tables\\V1\\WP_Query\\Custom_Tables_Meta_Query' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/WP_Query/Custom_Tables_Meta_Query.php', 'TEC\\Events\\Custom_Tables\\V1\\WP_Query\\Custom_Tables_Query' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/WP_Query/Custom_Tables_Query.php', 'TEC\\Events\\Custom_Tables\\V1\\WP_Query\\Modifiers\\Base_Modifier' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/WP_Query/Modifiers/Base_Modifier.php', 'TEC\\Events\\Custom_Tables\\V1\\WP_Query\\Modifiers\\Events_Admin_List_Modifier' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/WP_Query/Modifiers/Events_Admin_List_Modifier.php', 'TEC\\Events\\Custom_Tables\\V1\\WP_Query\\Modifiers\\Events_Only_Modifier' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/WP_Query/Modifiers/Events_Only_Modifier.php', 'TEC\\Events\\Custom_Tables\\V1\\WP_Query\\Modifiers\\WP_Query_Modifier' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/WP_Query/Modifiers/WP_Query_Modifier.php', 'TEC\\Events\\Custom_Tables\\V1\\WP_Query\\Monitors\\Custom_Tables_Query_Monitor' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/WP_Query/Monitors/Custom_Tables_Query_Monitor.php', 'TEC\\Events\\Custom_Tables\\V1\\WP_Query\\Monitors\\Query_Monitor' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/WP_Query/Monitors/Query_Monitor.php', 'TEC\\Events\\Custom_Tables\\V1\\WP_Query\\Monitors\\WP_Query_Monitor' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/WP_Query/Monitors/WP_Query_Monitor.php', 'TEC\\Events\\Custom_Tables\\V1\\WP_Query\\Provider' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/WP_Query/Provider.php', 'TEC\\Events\\Custom_Tables\\V1\\WP_Query\\Redirection_Schema' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/WP_Query/Redirection_Schema.php', 'TEC\\Events\\Custom_Tables\\V1\\WP_Query\\Repository\\Custom_Tables_Query_Filters' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/WP_Query/Repository/Custom_Tables_Query_Filters.php', 'TEC\\Events\\Custom_Tables\\V1\\WP_Query\\Repository\\Query_Replace' => __DIR__ . '/../..' . '/src/Events/Custom_Tables/V1/WP_Query/Repository/Query_Replace.php', 'TEC\\Events\\Editor\\Full_Site\\Archive_Block_Template' => __DIR__ . '/../..' . '/src/Events/Editor/Full_Site/Archive_Block_Template.php', 'TEC\\Events\\Editor\\Full_Site\\Block_Template_Contract' => __DIR__ . '/../..' . '/src/Events/Editor/Full_Site/Block_Template_Contract.php', 'TEC\\Events\\Editor\\Full_Site\\Controller' => __DIR__ . '/../..' . '/src/Events/Editor/Full_Site/Controller.php', 'TEC\\Events\\Editor\\Full_Site\\Single_Block_Template' => __DIR__ . '/../..' . '/src/Events/Editor/Full_Site/Single_Block_Template.php', 'TEC\\Events\\Installer\\Provider' => __DIR__ . '/../..' . '/src/Events/Installer/Provider.php', 'TEC\\Events\\Integrations\\Integration_Abstract' => __DIR__ . '/../..' . '/src/Events/Integrations/Integration_Abstract.php', 'TEC\\Events\\Integrations\\Plugins\\Colbri_Page_Builder\\Provider' => __DIR__ . '/../..' . '/src/Events/Integrations/Plugins/Colbri_Page_Builder/Provider.php', 'TEC\\Events\\Integrations\\Plugins\\Elementor\\Provider' => __DIR__ . '/../..' . '/src/Events/Integrations/Plugins/Elementor/Provider.php', 'TEC\\Events\\Integrations\\Plugins\\Event_Tickets\\Emails\\Email\\RSVP' => __DIR__ . '/../..' . '/src/Events/Integrations/Plugins/Event_Tickets/Emails/Email/RSVP.php', 'TEC\\Events\\Integrations\\Plugins\\Event_Tickets\\Emails\\Email\\Ticket' => __DIR__ . '/../..' . '/src/Events/Integrations/Plugins/Event_Tickets/Emails/Email/Ticket.php', 'TEC\\Events\\Integrations\\Plugins\\Event_Tickets\\Emails\\Emails' => __DIR__ . '/../..' . '/src/Events/Integrations/Plugins/Event_Tickets/Emails/Emails.php', 'TEC\\Events\\Integrations\\Plugins\\Event_Tickets\\Emails\\Hooks' => __DIR__ . '/../..' . '/src/Events/Integrations/Plugins/Event_Tickets/Emails/Hooks.php', 'TEC\\Events\\Integrations\\Plugins\\Event_Tickets\\Emails\\JSON_LD\\Event_Data' => __DIR__ . '/../..' . '/src/Events/Integrations/Plugins/Event_Tickets/Emails/JSON_LD/Event_Data.php', 'TEC\\Events\\Integrations\\Plugins\\Event_Tickets\\Emails\\Provider' => __DIR__ . '/../..' . '/src/Events/Integrations/Plugins/Event_Tickets/Emails/Provider.php', 'TEC\\Events\\Integrations\\Plugins\\Event_Tickets\\Emails\\Template' => __DIR__ . '/../..' . '/src/Events/Integrations/Plugins/Event_Tickets/Emails/Template.php', 'TEC\\Events\\Integrations\\Plugins\\Event_Tickets\\Provider' => __DIR__ . '/../..' . '/src/Events/Integrations/Plugins/Event_Tickets/Provider.php', 'TEC\\Events\\Integrations\\Plugins\\Rank_Math\\Provider' => __DIR__ . '/../..' . '/src/Events/Integrations/Plugins/Rank_Math/Provider.php', 'TEC\\Events\\Integrations\\Plugins\\Tickets_Wallet_Plus\\Controller' => __DIR__ . '/../..' . '/src/Events/Integrations/Plugins/Tickets_Wallet_Plus/Controller.php', 'TEC\\Events\\Integrations\\Plugins\\Tickets_Wallet_Plus\\Passes\\Apple_Wallet\\Event_Modifier' => __DIR__ . '/../..' . '/src/Events/Integrations/Plugins/Tickets_Wallet_Plus/Passes/Apple_Wallet/Event_Modifier.php', 'TEC\\Events\\Integrations\\Plugins\\Tickets_Wallet_Plus\\Passes\\Pdf' => __DIR__ . '/../..' . '/src/Events/Integrations/Plugins/Tickets_Wallet_Plus/Passes/Pdf.php', 'TEC\\Events\\Integrations\\Plugins\\WordPress_SEO\\Events_Schema' => __DIR__ . '/../..' . '/src/Events/Integrations/Plugins/WordPress_SEO/Events_Schema.php', 'TEC\\Events\\Integrations\\Plugins\\WordPress_SEO\\Provider' => __DIR__ . '/../..' . '/src/Events/Integrations/Plugins/WordPress_SEO/Provider.php', 'TEC\\Events\\Integrations\\Provider' => __DIR__ . '/../..' . '/src/Events/Integrations/Provider.php', 'TEC\\Events\\Legacy\\Views\\V1\\Provider' => __DIR__ . '/../..' . '/src/Events/Legacy/Views/V1/Provider.php', 'TEC\\Events\\SEO\\Controller' => __DIR__ . '/../..' . '/src/Events/SEO/Controller.php', 'TEC\\Events\\Site_Health\\Info_Section' => __DIR__ . '/../..' . '/src/Events/Site_Health/Info_Section.php', 'TEC\\Events\\Site_Health\\Provider' => __DIR__ . '/../..' . '/src/Events/Site_Health/Provider.php', 'TEC\\Events\\Telemetry\\Provider' => __DIR__ . '/../..' . '/src/Events/Telemetry/Provider.php', 'TEC\\Events\\Telemetry\\Telemetry' => __DIR__ . '/../..' . '/src/Events/Telemetry/Telemetry.php', 'Tribe\\Events\\Admin\\Filter_Bar\\Provider' => __DIR__ . '/../..' . '/src/Tribe/Admin/Filter_Bar/Provider.php', 'Tribe\\Events\\Admin\\Notice\\Full_Site_Editor' => __DIR__ . '/../..' . '/src/Tribe/Admin/Notice/Full_Site_Editor.php', 'Tribe\\Events\\Admin\\Notice\\Install_Event_Tickets' => __DIR__ . '/../..' . '/src/Tribe/Admin/Notice/Install_Event_Tickets.php', 'Tribe\\Events\\Admin\\Notice\\Legacy_Views_Deprecation' => __DIR__ . '/../..' . '/src/Tribe/Admin/Notice/Legacy_Views_Deprecation.php', 'Tribe\\Events\\Admin\\Notice\\Legacy_Views_Updated' => __DIR__ . '/../..' . '/src/Tribe/Admin/Notice/Legacy_Views_Updated.php', 'Tribe\\Events\\Admin\\Notice\\Marketing' => __DIR__ . '/../..' . '/src/Tribe/Admin/Notice/Marketing.php', 'Tribe\\Events\\Admin\\Notice\\Timezones' => __DIR__ . '/../..' . '/src/Tribe/Admin/Notice/Timezones.php', 'Tribe\\Events\\Admin\\Notice\\Update' => __DIR__ . '/../..' . '/src/Tribe/Admin/Notice/Update.php', 'Tribe\\Events\\Admin\\Provider' => __DIR__ . '/../..' . '/src/Tribe/Admin/Provider.php', 'Tribe\\Events\\Admin\\Settings' => __DIR__ . '/../..' . '/src/Tribe/Admin/Settings.php', 'Tribe\\Events\\Aggregator\\Processes\\Batch_Imports' => __DIR__ . '/../..' . '/src/Tribe/Aggregator/Processes/Batch_Imports.php', 'Tribe\\Events\\Aggregator\\Record\\Batch_Queue' => __DIR__ . '/../..' . '/src/Tribe/Aggregator/Record/Batch_Queue.php', 'Tribe\\Events\\Collections\\Lazy_Post_Collection' => __DIR__ . '/../..' . '/src/Tribe/Collections/Lazy_Post_Collection.php', 'Tribe\\Events\\Editor\\Hooks' => __DIR__ . '/../..' . '/src/Tribe/Editor/Hooks.php', 'Tribe\\Events\\Editor\\Objects\\Editor_Object_Interface' => __DIR__ . '/../..' . '/src/Tribe/Editor/Objects/Editor_Object_Interface.php', 'Tribe\\Events\\Editor\\Objects\\Event' => __DIR__ . '/../..' . '/src/Tribe/Editor/Objects/Event.php', 'Tribe\\Events\\Event_Status\\Admin_Template' => __DIR__ . '/../..' . '/src/Tribe/Event_Status/Admin_Template.php', 'Tribe\\Events\\Event_Status\\Classic_Editor' => __DIR__ . '/../..' . '/src/Tribe/Event_Status/Classic_Editor.php', 'Tribe\\Events\\Event_Status\\Compatibility\\Events_Control_Extension\\JSON_LD' => __DIR__ . '/../..' . '/src/Tribe/Event_Status/Compatibility/Events_Control_Extension/JSON_LD.php', 'Tribe\\Events\\Event_Status\\Compatibility\\Events_Control_Extension\\Service_Provider' => __DIR__ . '/../..' . '/src/Tribe/Event_Status/Compatibility/Events_Control_Extension/Service_Provider.php', 'Tribe\\Events\\Event_Status\\Compatibility\\Filter_Bar\\Detect' => __DIR__ . '/../..' . '/src/Tribe/Event_Status/Compatibility/Filter_Bar/Detect.php', 'Tribe\\Events\\Event_Status\\Compatibility\\Filter_Bar\\Events_Status_Filter' => __DIR__ . '/../..' . '/src/Tribe/Event_Status/Compatibility/Filter_Bar/Events_Status_Filter.php', 'Tribe\\Events\\Event_Status\\Compatibility\\Filter_Bar\\Service_Provider' => __DIR__ . '/../..' . '/src/Tribe/Event_Status/Compatibility/Filter_Bar/Service_Provider.php', 'Tribe\\Events\\Event_Status\\Event_Meta' => __DIR__ . '/../..' . '/src/Tribe/Event_Status/Event_Meta.php', 'Tribe\\Events\\Event_Status\\Event_Status_Provider' => __DIR__ . '/../..' . '/src/Tribe/Event_Status/Event_Status_Provider.php', 'Tribe\\Events\\Event_Status\\JSON_LD' => __DIR__ . '/../..' . '/src/Tribe/Event_Status/JSON_LD.php', 'Tribe\\Events\\Event_Status\\Models\\Event' => __DIR__ . '/../..' . '/src/Tribe/Event_Status/Models/Event.php', 'Tribe\\Events\\Event_Status\\Status_Labels' => __DIR__ . '/../..' . '/src/Tribe/Event_Status/Status_Labels.php', 'Tribe\\Events\\Event_Status\\Template' => __DIR__ . '/../..' . '/src/Tribe/Event_Status/Template.php', 'Tribe\\Events\\Event_Status\\Template_Modifications' => __DIR__ . '/../..' . '/src/Tribe/Event_Status/Template_Modifications.php', 'Tribe\\Events\\I18n' => __DIR__ . '/../..' . '/src/Tribe/I18n.php', 'Tribe\\Events\\Integrations\\Beaver_Builder' => __DIR__ . '/../..' . '/src/Tribe/Integrations/Beaver_Builder.php', 'Tribe\\Events\\Integrations\\Divi\\Service_Provider' => __DIR__ . '/../..' . '/src/Tribe/Integrations/Divi/Service_Provider.php', 'Tribe\\Events\\Integrations\\Fusion\\Service_Provider' => __DIR__ . '/../..' . '/src/Tribe/Integrations/Fusion/Service_Provider.php', 'Tribe\\Events\\Integrations\\Fusion\\Widget_Shortcode' => __DIR__ . '/../..' . '/src/Tribe/Integrations/Fusion/Widget_Shortcode.php', 'Tribe\\Events\\Integrations\\Hello_Elementor\\Service_Provider' => __DIR__ . '/../..' . '/src/Tribe/Integrations/Hello_Elementor/Service_Provider.php', 'Tribe\\Events\\Integrations\\Hello_Elementor\\Templates' => __DIR__ . '/../..' . '/src/Tribe/Integrations/Hello_Elementor/Templates.php', 'Tribe\\Events\\Integrations\\Restrict_Content_Pro\\Service_Provider' => __DIR__ . '/../..' . '/src/Tribe/Integrations/Restrict_Content_Pro/Service_Provider.php', 'Tribe\\Events\\Integrations\\WPML\\Views\\V2\\Filters' => __DIR__ . '/../..' . '/src/Tribe/Integrations/WPML/Views/V2/Filters.php', 'Tribe\\Events\\Integrations\\WP_Rocket' => __DIR__ . '/../..' . '/src/Tribe/Integrations/WP_Rocket.php', 'Tribe\\Events\\Models\\Post_Types\\Event' => __DIR__ . '/../..' . '/src/Tribe/Models/Post_Types/Event.php', 'Tribe\\Events\\Models\\Post_Types\\Organizer' => __DIR__ . '/../..' . '/src/Tribe/Models/Post_Types/Organizer.php', 'Tribe\\Events\\Models\\Post_Types\\Venue' => __DIR__ . '/../..' . '/src/Tribe/Models/Post_Types/Venue.php', 'Tribe\\Events\\Service_Providers\\Context' => __DIR__ . '/../..' . '/src/Tribe/Service_Providers/Context.php', 'Tribe\\Events\\Service_Providers\\First_Boot' => __DIR__ . '/../..' . '/src/Tribe/Service_Providers/First_Boot.php', 'Tribe\\Events\\Taxonomy\\Event_Tag' => __DIR__ . '/../..' . '/src/Tribe/Taxonomy/Event_Tag.php', 'Tribe\\Events\\Taxonomy\\Taxonomy_Provider' => __DIR__ . '/../..' . '/src/Tribe/Taxonomy/Taxonomy_Provider.php', 'Tribe\\Events\\Views\\V2\\Assets' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Assets.php', 'Tribe\\Events\\Views\\V2\\Customizer' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Customizer.php', 'Tribe\\Events\\Views\\V2\\Customizer\\Configuration' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Customizer/Configuration.php', 'Tribe\\Events\\Views\\V2\\Customizer\\Hooks' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Customizer/Hooks.php', 'Tribe\\Events\\Views\\V2\\Customizer\\Notice' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Customizer/Notice.php', 'Tribe\\Events\\Views\\V2\\Customizer\\Section\\Events_Bar' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Customizer/Section/Events_Bar.php', 'Tribe\\Events\\Views\\V2\\Customizer\\Section\\Global_Elements' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Customizer/Section/Global_Elements.php', 'Tribe\\Events\\Views\\V2\\Customizer\\Section\\Month_View' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Customizer/Section/Month_View.php', 'Tribe\\Events\\Views\\V2\\Customizer\\Section\\Single_Event' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Customizer/Section/Single_Event.php', 'Tribe\\Events\\Views\\V2\\Customizer\\Service_Provider' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Customizer/Service_Provider.php', 'Tribe\\Events\\Views\\V2\\Hooks' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Hooks.php', 'Tribe\\Events\\Views\\V2\\Implementation_Error' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Implementation_Error.php', 'Tribe\\Events\\Views\\V2\\Index' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Index.php', 'Tribe\\Events\\Views\\V2\\Interfaces\\Repository_User_Interface' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Interfaces/Repository_User_Interface.php', 'Tribe\\Events\\Views\\V2\\Interfaces\\View_Partial_Interface' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Interfaces/View_Partial_Interface.php', 'Tribe\\Events\\Views\\V2\\Interfaces\\View_Url_Provider_Interface' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Interfaces/View_Url_Provider_Interface.php', 'Tribe\\Events\\Views\\V2\\Kitchen_Sink' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Kitchen_Sink.php', 'Tribe\\Events\\Views\\V2\\Manager' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Manager.php', 'Tribe\\Events\\Views\\V2\\Messages' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Messages.php', 'Tribe\\Events\\Views\\V2\\Query\\Event_Query_Controller' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Query/Event_Query_Controller.php', 'Tribe\\Events\\Views\\V2\\Query\\Hide_From_Upcoming_Controller' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Query/Hide_From_Upcoming_Controller.php', 'Tribe\\Events\\Views\\V2\\Repository\\Event_Period' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Repository/Event_Period.php', 'Tribe\\Events\\Views\\V2\\Repository\\Event_Result' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Repository/Event_Result.php', 'Tribe\\Events\\Views\\V2\\Repository\\Events_Result_Set' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Repository/Events_Result_Set.php', 'Tribe\\Events\\Views\\V2\\Rest_Endpoint' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Rest_Endpoint.php', 'Tribe\\Events\\Views\\V2\\Rewrite' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Rewrite.php', 'Tribe\\Events\\Views\\V2\\Service_Provider' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Service_Provider.php', 'Tribe\\Events\\Views\\V2\\Template' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Template.php', 'Tribe\\Events\\Views\\V2\\Template\\Event' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Template/Event.php', 'Tribe\\Events\\Views\\V2\\Template\\Excerpt' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Template/Excerpt.php', 'Tribe\\Events\\Views\\V2\\Template\\Featured_Title' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Template/Featured_Title.php', 'Tribe\\Events\\Views\\V2\\Template\\JSON_LD' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Template/JSON_LD.php', 'Tribe\\Events\\Views\\V2\\Template\\Page' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Template/Page.php', 'Tribe\\Events\\Views\\V2\\Template\\Promo' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Template/Promo.php', 'Tribe\\Events\\Views\\V2\\Template\\Settings\\Advanced_Display' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Template/Settings/Advanced_Display.php', 'Tribe\\Events\\Views\\V2\\Template\\Title' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Template/Title.php', 'Tribe\\Events\\Views\\V2\\Template_Bootstrap' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Template_Bootstrap.php', 'Tribe\\Events\\Views\\V2\\Theme_Compatibility' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Theme_Compatibility.php', 'Tribe\\Events\\Views\\V2\\Url' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Url.php', 'Tribe\\Events\\Views\\V2\\Utils\\Separators' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Utils/Separators.php', 'Tribe\\Events\\Views\\V2\\Utils\\Stack' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Utils/Stack.php', 'Tribe\\Events\\Views\\V2\\Utils\\View' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Utils/View.php', 'Tribe\\Events\\Views\\V2\\View' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/View.php', 'Tribe\\Events\\Views\\V2\\View_Interface' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/View_Interface.php', 'Tribe\\Events\\Views\\V2\\View_Register' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/View_Register.php', 'Tribe\\Events\\Views\\V2\\Views\\By_Day_View' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Views/By_Day_View.php', 'Tribe\\Events\\Views\\V2\\Views\\Day_View' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Views/Day_View.php', 'Tribe\\Events\\Views\\V2\\Views\\Latest_Past_View' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Views/Latest_Past_View.php', 'Tribe\\Events\\Views\\V2\\Views\\List_View' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Views/List_View.php', 'Tribe\\Events\\Views\\V2\\Views\\Month_View' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Views/Month_View.php', 'Tribe\\Events\\Views\\V2\\Views\\Reflector_View' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Views/Reflector_View.php', 'Tribe\\Events\\Views\\V2\\Views\\Traits\\Breakpoint_Behavior' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Views/Traits/Breakpoint_Behavior.php', 'Tribe\\Events\\Views\\V2\\Views\\Traits\\HTML_Cache' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Views/Traits/HTML_Cache.php', 'Tribe\\Events\\Views\\V2\\Views\\Traits\\Json_Ld_Data' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Views/Traits/Json_Ld_Data.php', 'Tribe\\Events\\Views\\V2\\Views\\Traits\\List_Behavior' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Views/Traits/List_Behavior.php', 'Tribe\\Events\\Views\\V2\\Views\\Traits\\With_Fast_Forward_Link' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Views/Traits/With_Fast_Forward_Link.php', 'Tribe\\Events\\Views\\V2\\Views\\Traits\\With_Noindex' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Views/Traits/With_Noindex.php', 'Tribe\\Events\\Views\\V2\\Views\\Traits\\iCal_Data' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Views/Traits/iCal_Data.php', 'Tribe\\Events\\Views\\V2\\Views\\Widgets\\Widget_List_View' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Views/Widgets/Widget_List_View.php', 'Tribe\\Events\\Views\\V2\\Views\\Widgets\\Widget_View' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Views/Widgets/Widget_View.php', 'Tribe\\Events\\Views\\V2\\Widgets\\Admin_Template' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Widgets/Admin_Template.php', 'Tribe\\Events\\Views\\V2\\Widgets\\Assets' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Widgets/Assets.php', 'Tribe\\Events\\Views\\V2\\Widgets\\Compatibility' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Widgets/Compatibility.php', 'Tribe\\Events\\Views\\V2\\Widgets\\Service_Provider' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Widgets/Service_Provider.php', 'Tribe\\Events\\Views\\V2\\Widgets\\Widget_Abstract' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Widgets/Widget_Abstract.php', 'Tribe\\Events\\Views\\V2\\Widgets\\Widget_List' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/Widgets/Widget_List.php', 'Tribe\\Events\\Views\\V2\\iCalendar\\Links\\Google_Calendar' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/iCalendar/Links/Google_Calendar.php', 'Tribe\\Events\\Views\\V2\\iCalendar\\Links\\Link_Abstract' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/iCalendar/Links/Link_Abstract.php', 'Tribe\\Events\\Views\\V2\\iCalendar\\Links\\Link_Interface' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/iCalendar/Links/Link_Interface.php', 'Tribe\\Events\\Views\\V2\\iCalendar\\Links\\Outlook_365' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/iCalendar/Links/Outlook_365.php', 'Tribe\\Events\\Views\\V2\\iCalendar\\Links\\Outlook_Export' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/iCalendar/Links/Outlook_Export.php', 'Tribe\\Events\\Views\\V2\\iCalendar\\Links\\Outlook_Live' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/iCalendar/Links/Outlook_Live.php', 'Tribe\\Events\\Views\\V2\\iCalendar\\Links\\iCal' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/iCalendar/Links/iCal.php', 'Tribe\\Events\\Views\\V2\\iCalendar\\Links\\iCalendar_Export' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/iCalendar/Links/iCalendar_Export.php', 'Tribe\\Events\\Views\\V2\\iCalendar\\Request' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/iCalendar/Request.php', 'Tribe\\Events\\Views\\V2\\iCalendar\\Single_Events' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/iCalendar/Single_Events.php', 'Tribe\\Events\\Views\\V2\\iCalendar\\Template' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/iCalendar/Template.php', 'Tribe\\Events\\Views\\V2\\iCalendar\\Traits\\Outlook_Methods' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/iCalendar/Traits/Outlook_Methods.php', 'Tribe\\Events\\Views\\V2\\iCalendar\\iCalendar_Handler' => __DIR__ . '/../..' . '/src/Tribe/Views/V2/iCalendar/iCalendar_Handler.php', 'Tribe__Events__Main_Deprecated' => __DIR__ . '/../..' . '/src/deprecated/Traits/Tribe__Events__Main_Deprecated.php', 'Tribe__Events__Query_Deprecated' => __DIR__ . '/../..' . '/src/deprecated/Traits/Tribe__Events__Query_Deprecated.php');
        public static function getInitializer(\Composer\Autoload\ClassLoader $loader)
        {
        }
    }
}
namespace {
    class TribeCommonLibraries
    {
        public static function getInstance()
        {
        }
        /**
         * Register a plugin / helper class
         *
         * @param string $slug    - slug specific to the helper class / plugin
         * @param string $version - version of the helper class / plugin
         * @param string $path    - absolute path of the helper class / plugin file
         */
        public static function register($slug, $version, $path)
        {
        }
        /**
         * Activate all plugins.
         */
        public function activate_plugins()
        {
        }
    }
    /**
     * Class ActionScheduler_ActionClaim
     */
    class ActionScheduler_ActionClaim
    {
        public function __construct($id, array $action_ids)
        {
        }
        public function get_id()
        {
        }
        public function get_actions()
        {
        }
    }
    /**
     * Class ActionScheduler_ActionFactory
     */
    class ActionScheduler_ActionFactory
    {
        /**
         * Return stored actions for given params.
         *
         * @param string                   $status The action's status in the data store.
         * @param string                   $hook The hook to trigger when this action runs.
         * @param array                    $args Args to pass to callbacks when the hook is triggered.
         * @param ActionScheduler_Schedule $schedule The action's schedule.
         * @param string                   $group A group to put the action in.
         * @param int                      $priority The action priority.
         *
         * @return ActionScheduler_Action An instance of the stored action.
         */
        public function get_stored_action($status, $hook, array $args = array(), \ActionScheduler_Schedule $schedule = \null, $group = '')
        {
        }
        /**
         * Enqueue an action to run one time, as soon as possible (rather a specific scheduled time).
         *
         * This method creates a new action using the NullSchedule. In practice, this results in an action scheduled to
         * execute "now". Therefore, it will generally run as soon as possible but is not prioritized ahead of other actions
         * that are already past-due.
         *
         * @param string $hook The hook to trigger when this action runs.
         * @param array  $args Args to pass when the hook is triggered.
         * @param string $group A group to put the action in.
         *
         * @return int The ID of the stored action.
         */
        public function async($hook, $args = array(), $group = '')
        {
        }
        /**
         * Same as async, but also supports $unique param.
         *
         * @param string $hook The hook to trigger when this action runs.
         * @param array  $args Args to pass when the hook is triggered.
         * @param string $group A group to put the action in.
         * @param bool   $unique Whether to ensure the action is unique.
         *
         * @return int The ID of the stored action.
         */
        public function async_unique($hook, $args = array(), $group = '', $unique = \true)
        {
        }
        /**
         * Create single action.
         *
         * @param string $hook  The hook to trigger when this action runs.
         * @param array  $args  Args to pass when the hook is triggered.
         * @param int    $when  Unix timestamp when the action will run.
         * @param string $group A group to put the action in.
         *
         * @return int The ID of the stored action.
         */
        public function single($hook, $args = array(), $when = \null, $group = '')
        {
        }
        /**
         * Create single action only if there is no pending or running action with same name and params.
         *
         * @param string $hook The hook to trigger when this action runs.
         * @param array  $args Args to pass when the hook is triggered.
         * @param int    $when Unix timestamp when the action will run.
         * @param string $group A group to put the action in.
         * @param bool   $unique Whether action scheduled should be unique.
         *
         * @return int The ID of the stored action.
         */
        public function single_unique($hook, $args = array(), $when = \null, $group = '', $unique = \true)
        {
        }
        /**
         * Create the first instance of an action recurring on a given interval.
         *
         * @param string $hook The hook to trigger when this action runs.
         * @param array  $args Args to pass when the hook is triggered.
         * @param int    $first Unix timestamp for the first run.
         * @param int    $interval Seconds between runs.
         * @param string $group A group to put the action in.
         *
         * @return int The ID of the stored action.
         */
        public function recurring($hook, $args = array(), $first = \null, $interval = \null, $group = '')
        {
        }
        /**
         * Create the first instance of an action recurring on a given interval only if there is no pending or running action with same name and params.
         *
         * @param string $hook The hook to trigger when this action runs.
         * @param array  $args Args to pass when the hook is triggered.
         * @param int    $first Unix timestamp for the first run.
         * @param int    $interval Seconds between runs.
         * @param string $group A group to put the action in.
         * @param bool   $unique Whether action scheduled should be unique.
         *
         * @return int The ID of the stored action.
         */
        public function recurring_unique($hook, $args = array(), $first = \null, $interval = \null, $group = '', $unique = \true)
        {
        }
        /**
         * Create the first instance of an action recurring on a Cron schedule.
         *
         * @param string $hook The hook to trigger when this action runs.
         * @param array  $args Args to pass when the hook is triggered.
         * @param int    $base_timestamp The first instance of the action will be scheduled
         *        to run at a time calculated after this timestamp matching the cron
         *        expression. This can be used to delay the first instance of the action.
         * @param int    $schedule A cron definition string.
         * @param string $group A group to put the action in.
         *
         * @return int The ID of the stored action.
         */
        public function cron($hook, $args = array(), $base_timestamp = \null, $schedule = \null, $group = '')
        {
        }
        /**
         * Create the first instance of an action recurring on a Cron schedule only if there is no pending or running action with same name and params.
         *
         * @param string $hook The hook to trigger when this action runs.
         * @param array  $args Args to pass when the hook is triggered.
         * @param int    $base_timestamp The first instance of the action will be scheduled
         *        to run at a time calculated after this timestamp matching the cron
         *        expression. This can be used to delay the first instance of the action.
         * @param int    $schedule A cron definition string.
         * @param string $group A group to put the action in.
         * @param bool   $unique Whether action scheduled should be unique.
         *
         * @return int The ID of the stored action.
         **/
        public function cron_unique($hook, $args = array(), $base_timestamp = \null, $schedule = \null, $group = '', $unique = \true)
        {
        }
        /**
         * Create a successive instance of a recurring or cron action.
         *
         * Importantly, the action will be rescheduled to run based on the current date/time.
         * That means when the action is scheduled to run in the past, the next scheduled date
         * will be pushed forward. For example, if a recurring action set to run every hour
         * was scheduled to run 5 seconds ago, it will be next scheduled for 1 hour in the
         * future, which is 1 hour and 5 seconds from when it was last scheduled to run.
         *
         * Alternatively, if the action is scheduled to run in the future, and is run early,
         * likely via manual intervention, then its schedule will change based on the time now.
         * For example, if a recurring action set to run every day, and is run 12 hours early,
         * it will run again in 24 hours, not 36 hours.
         *
         * This slippage is less of an issue with Cron actions, as the specific run time can
         * be set for them to run, e.g. 1am each day. In those cases, and entire period would
         * need to be missed before there was any change is scheduled, e.g. in the case of an
         * action scheduled for 1am each day, the action would need to run an entire day late.
         *
         * @param ActionScheduler_Action $action The existing action.
         *
         * @return string The ID of the stored action
         * @throws InvalidArgumentException If $action is not a recurring action.
         */
        public function repeat($action)
        {
        }
        /**
         * Creates a scheduled action.
         *
         * This general purpose method can be used in place of specific methods such as async(),
         * async_unique(), single() or single_unique(), etc.
         *
         * @internal Not intended for public use, should not be overriden by subclasses.
         * @throws   Exception May be thrown if invalid options are passed.
         *
         * @param array $options {
         *     Describes the action we wish to schedule.
         *
         *     @type string     $type      Must be one of 'async', 'cron', 'recurring', or 'single'.
         *     @type string     $hook      The hook to be executed.
         *     @type array      $arguments Arguments to be passed to the callback.
         *     @type string     $group     The action group.
         *     @type bool       $unique    If the action should be unique.
         *     @type int        $when      Timestamp. Indicates when the action, or first instance of the action in the case
         *                                 of recurring or cron actions, becomes due.
         *     @type int|string $pattern   Recurrence pattern. This is either an interval in seconds for recurring actions
         *                                 or a cron expression for cron actions.
         *     @type int        $priority  Lower values means higher priority. Should be in the range 0-255.
         * }
         *
         * @return int
         */
        public function create(array $options = array())
        {
        }
        /**
         * Save action to database.
         *
         * @param ActionScheduler_Action $action Action object to save.
         *
         * @return int The ID of the stored action
         */
        protected function store(\ActionScheduler_Action $action)
        {
        }
        /**
         * Store action if it's unique.
         *
         * @param ActionScheduler_Action $action Action object to store.
         *
         * @return int ID of the created action. Will be 0 if action was not created.
         */
        protected function store_unique_action(\ActionScheduler_Action $action)
        {
        }
    }
    /**
     * Class ActionScheduler_AdminView_Deprecated
     *
     * Store deprecated public functions previously found in the ActionScheduler_AdminView class.
     * Keeps them out of the way of the main class.
     *
     * @codeCoverageIgnore
     */
    class ActionScheduler_AdminView_Deprecated
    {
        public function action_scheduler_post_type_args($args)
        {
        }
        /**
         * Customise the post status related views displayed on the Scheduled Actions administration screen.
         *
         * @param array $views An associative array of views and view labels which can be used to filter the 'scheduled-action' posts displayed on the Scheduled Actions administration screen.
         * @return array $views An associative array of views and view labels which can be used to filter the 'scheduled-action' posts displayed on the Scheduled Actions administration screen.
         */
        public function list_table_views($views)
        {
        }
        /**
         * Do not include the "Edit" action for the Scheduled Actions administration screen.
         *
         * Hooked to the 'bulk_actions-edit-action-scheduler' filter.
         *
         * @param array $actions An associative array of actions which can be performed on the 'scheduled-action' post type.
         * @return array $actions An associative array of actions which can be performed on the 'scheduled-action' post type.
         */
        public function bulk_actions($actions)
        {
        }
        /**
         * Completely customer the columns displayed on the Scheduled Actions administration screen.
         *
         * Because we can't filter the content of the default title and date columns, we need to recreate our own
         * custom columns for displaying those post fields. For the column content, @see self::list_table_column_content().
         *
         * @param array $columns An associative array of columns that are use for the table on the Scheduled Actions administration screen.
         * @return array $columns An associative array of columns that are use for the table on the Scheduled Actions administration screen.
         */
        public function list_table_columns($columns)
        {
        }
        /**
         * Make our custom title & date columns use defaulting title & date sorting.
         *
         * @param array $columns An associative array of columns that can be used to sort the table on the Scheduled Actions administration screen.
         * @return array $columns An associative array of columns that can be used to sort the table on the Scheduled Actions administration screen.
         */
        public static function list_table_sortable_columns($columns)
        {
        }
        /**
         * Print the content for our custom columns.
         *
         * @param string $column_name The key for the column for which we should output our content.
         * @param int $post_id The ID of the 'scheduled-action' post for which this row relates.
         */
        public static function list_table_column_content($column_name, $post_id)
        {
        }
        /**
         * Hide the inline "Edit" action for all 'scheduled-action' posts.
         *
         * Hooked to the 'post_row_actions' filter.
         *
         * @param array $actions An associative array of actions which can be performed on the 'scheduled-action' post type.
         * @return array $actions An associative array of actions which can be performed on the 'scheduled-action' post type.
         */
        public static function row_actions($actions, $post)
        {
        }
        /**
         * Run an action when triggered from the Action Scheduler administration screen.
         *
         * @codeCoverageIgnore
         */
        public static function maybe_execute_action()
        {
        }
        /**
         * Convert an interval of seconds into a two part human friendly string.
         *
         * The WordPress human_time_diff() function only calculates the time difference to one degree, meaning
         * even if an action is 1 day and 11 hours away, it will display "1 day". This funciton goes one step
         * further to display two degrees of accuracy.
         *
         * Based on Crontrol::interval() function by Edward Dale: https://wordpress.org/plugins/wp-crontrol/
         *
         * @param int $interval A interval in seconds.
         * @return string A human friendly string representation of the interval.
         */
        public static function admin_notices()
        {
        }
        /**
         * Filter search queries to allow searching by Claim ID (i.e. post_password).
         *
         * @param string $orderby MySQL orderby string.
         * @param WP_Query $query Instance of a WP_Query object
         * @return string MySQL orderby string.
         */
        public function custom_orderby($orderby, $query)
        {
        }
        /**
         * Filter search queries to allow searching by Claim ID (i.e. post_password).
         *
         * @param string $search MySQL search string.
         * @param WP_Query $query Instance of a WP_Query object
         * @return string MySQL search string.
         */
        public function search_post_password($search, $query)
        {
        }
        /**
         * Change messages when a scheduled action is updated.
         *
         * @param  array $messages
         * @return array
         */
        public function post_updated_messages($messages)
        {
        }
    }
    /**
     * Class ActionScheduler_AdminView
     * @codeCoverageIgnore
     */
    class ActionScheduler_AdminView extends \ActionScheduler_AdminView_Deprecated
    {
        /** @var ActionScheduler_ListTable */
        protected $list_table;
        /**
         * @return ActionScheduler_AdminView
         * @codeCoverageIgnore
         */
        public static function instance()
        {
        }
        /**
         * @codeCoverageIgnore
         */
        public function init()
        {
        }
        public function system_status_report()
        {
        }
        /**
         * Registers action-scheduler into WooCommerce > System status.
         *
         * @param array $tabs An associative array of tab key => label.
         * @return array $tabs An associative array of tab key => label, including Action Scheduler's tabs
         */
        public function register_system_status_tab(array $tabs)
        {
        }
        /**
         * Include Action Scheduler's administration under the Tools menu.
         *
         * A menu under the Tools menu is important for backward compatibility (as that's
         * where it started), and also provides more convenient access than the WooCommerce
         * System Status page, and for sites where WooCommerce isn't active.
         */
        public function register_menu()
        {
        }
        /**
         * Triggers processing of any pending actions.
         */
        public function process_admin_ui()
        {
        }
        /**
         * Renders the Admin UI
         */
        public function render_admin_ui()
        {
        }
        /**
         * Get the admin UI object and process any requested actions.
         *
         * @return ActionScheduler_ListTable
         */
        protected function get_list_table()
        {
        }
        /**
         * Action: admin_notices
         *
         * Maybe check past-due actions, and print notice.
         *
         * @uses $this->check_pastdue_actions()
         */
        public function maybe_check_pastdue_actions()
        {
        }
        /**
         * Check past-due actions, and print notice.
         *
         * @todo update $link_url to "Past-due" filter when released (see issue #510, PR #511)
         */
        protected function check_pastdue_actions()
        {
        }
        /**
         * Provide more information about the screen and its data in the help tab.
         */
        public function add_help_tabs()
        {
        }
    }
    /**
     * Abstract WP_Async_Request class.
     *
     * @abstract
     */
    abstract class WP_Async_Request
    {
        /**
         * Prefix
         *
         * (default value: 'wp')
         *
         * @var string
         * @access protected
         */
        protected $prefix = 'wp';
        /**
         * Action
         *
         * (default value: 'async_request')
         *
         * @var string
         * @access protected
         */
        protected $action = 'async_request';
        /**
         * Identifier
         *
         * @var mixed
         * @access protected
         */
        protected $identifier;
        /**
         * Data
         *
         * (default value: array())
         *
         * @var array
         * @access protected
         */
        protected $data = array();
        /**
         * Initiate new async request
         */
        public function __construct()
        {
        }
        /**
         * Set data used during the request
         *
         * @param array $data Data.
         *
         * @return $this
         */
        public function data($data)
        {
        }
        /**
         * Dispatch the async request
         *
         * @return array|WP_Error
         */
        public function dispatch()
        {
        }
        /**
         * Get query args
         *
         * @return array
         */
        protected function get_query_args()
        {
        }
        /**
         * Get query URL
         *
         * @return string
         */
        protected function get_query_url()
        {
        }
        /**
         * Get post args
         *
         * @return array
         */
        protected function get_post_args()
        {
        }
        /**
         * Maybe handle
         *
         * Check for correct nonce and pass to handler.
         */
        public function maybe_handle()
        {
        }
        /**
         * Handle
         *
         * Override this method to perform any actions required
         * during the async request.
         */
        protected abstract function handle();
    }
    /**
     * ActionScheduler_AsyncRequest_QueueRunner class.
     */
    class ActionScheduler_AsyncRequest_QueueRunner extends \WP_Async_Request
    {
        /**
         * Data store for querying actions
         *
         * @var ActionScheduler_Store
         * @access protected
         */
        protected $store;
        /**
         * Prefix for ajax hooks
         *
         * @var string
         * @access protected
         */
        protected $prefix = 'as';
        /**
         * Action for ajax hooks
         *
         * @var string
         * @access protected
         */
        protected $action = 'async_request_queue_runner';
        /**
         * Initiate new async request
         */
        public function __construct(\ActionScheduler_Store $store)
        {
        }
        /**
         * Handle async requests
         *
         * Run a queue, and maybe dispatch another async request to run another queue
         * if there are still pending actions after completing a queue in this request.
         */
        protected function handle()
        {
        }
        /**
         * If the async request runner is needed and allowed to run, dispatch a request.
         */
        public function maybe_dispatch()
        {
        }
        /**
         * Only allow async requests when needed.
         *
         * Also allow 3rd party code to disable running actions via async requests.
         */
        protected function allow()
        {
        }
        /**
         * Chaining async requests can crash MySQL. A brief sleep call in PHP prevents that.
         */
        protected function get_sleep_seconds()
        {
        }
    }
    /**
     * Class ActionScheduler_Compatibility
     */
    class ActionScheduler_Compatibility
    {
        /**
         * Converts a shorthand byte value to an integer byte value.
         *
         * Wrapper for wp_convert_hr_to_bytes(), moved to load.php in WordPress 4.6 from media.php
         *
         * @link https://secure.php.net/manual/en/function.ini-get.php
         * @link https://secure.php.net/manual/en/faq.using.php#faq.using.shorthandbytes
         *
         * @param string $value A (PHP ini) byte value, either shorthand or ordinary.
         * @return int An integer byte value.
         */
        public static function convert_hr_to_bytes($value)
        {
        }
        /**
         * Attempts to raise the PHP memory limit for memory intensive processes.
         *
         * Only allows raising the existing limit and prevents lowering it.
         *
         * Wrapper for wp_raise_memory_limit(), added in WordPress v4.6.0
         *
         * @return bool|int|string The limit that was set or false on failure.
         */
        public static function raise_memory_limit()
        {
        }
        /**
         * Attempts to raise the PHP timeout for time intensive processes.
         *
         * Only allows raising the existing limit and prevents lowering it. Wrapper for wc_set_time_limit(), when available.
         *
         * @param int $limit The time limit in seconds.
         */
        public static function raise_time_limit($limit = 0)
        {
        }
    }
    /**
     * Class ActionScheduler_DataController
     *
     * The main plugin/initialization class for the data stores.
     *
     * Responsible for hooking everything up with WordPress.
     *
     * @package Action_Scheduler
     *
     * @since 3.0.0
     */
    class ActionScheduler_DataController
    {
        /** Action data store class name. */
        const DATASTORE_CLASS = 'ActionScheduler_DBStore';
        /** Logger data store class name. */
        const LOGGER_CLASS = 'ActionScheduler_DBLogger';
        /** Migration status option name. */
        const STATUS_FLAG = 'action_scheduler_migration_status';
        /** Migration status option value. */
        const STATUS_COMPLETE = 'complete';
        /** Migration minimum required PHP version. */
        const MIN_PHP_VERSION = '5.5';
        /**
         * Get a flag indicating whether the migration environment dependencies are met.
         *
         * @return bool
         */
        public static function dependencies_met()
        {
        }
        /**
         * Get a flag indicating whether the migration is complete.
         *
         * @return bool Whether the flag has been set marking the migration as complete
         */
        public static function is_migration_complete()
        {
        }
        /**
         * Mark the migration as complete.
         */
        public static function mark_migration_complete()
        {
        }
        /**
         * Unmark migration when a plugin is de-activated. Will not work in case of silent activation, for example in an update.
         * We do this to mitigate the bug of lost actions which happens if there was an AS 2.x to AS 3.x migration in the past, but that plugin is now
         * deactivated and the site was running on AS 2.x again.
         */
        public static function mark_migration_incomplete()
        {
        }
        /**
         * Set the action store class name.
         *
         * @param string $class Classname of the store class.
         *
         * @return string
         */
        public static function set_store_class($class)
        {
        }
        /**
         * Set the action logger class name.
         *
         * @param string $class Classname of the logger class.
         *
         * @return string
         */
        public static function set_logger_class($class)
        {
        }
        /**
         * Set the sleep time in seconds.
         *
         * @param integer $sleep_time The number of seconds to pause before resuming operation.
         */
        public static function set_sleep_time($sleep_time)
        {
        }
        /**
         * Set the tick count required for freeing memory.
         *
         * @param integer $free_ticks The number of ticks to free memory on.
         */
        public static function set_free_ticks($free_ticks)
        {
        }
        /**
         * Free memory if conditions are met.
         *
         * @param int $ticks Current tick count.
         */
        public static function maybe_free_memory($ticks)
        {
        }
        /**
         * Reduce memory footprint by clearing the database query and object caches.
         */
        public static function free_memory()
        {
        }
        /**
         * Connect to table datastores if migration is complete.
         * Otherwise, proceed with the migration if the dependencies have been met.
         */
        public static function init()
        {
        }
        /**
         * Singleton factory.
         */
        public static function instance()
        {
        }
    }
    /**
     * ActionScheduler DateTime class.
     *
     * This is a custom extension to DateTime that
     */
    class ActionScheduler_DateTime extends \DateTime
    {
        /**
         * UTC offset.
         *
         * Only used when a timezone is not set. When a timezone string is
         * used, this will be set to 0.
         *
         * @var int
         */
        protected $utcOffset = 0;
        /**
         * Get the unix timestamp of the current object.
         *
         * Missing in PHP 5.2 so just here so it can be supported consistently.
         *
         * @return int
         */
        #[\ReturnTypeWillChange]
        public function getTimestamp()
        {
        }
        /**
         * Set the UTC offset.
         *
         * This represents a fixed offset instead of a timezone setting.
         *
         * @param $offset
         */
        public function setUtcOffset($offset)
        {
        }
        /**
         * Returns the timezone offset.
         *
         * @return int
         * @link http://php.net/manual/en/datetime.getoffset.php
         */
        #[\ReturnTypeWillChange]
        public function getOffset()
        {
        }
        /**
         * Set the TimeZone associated with the DateTime
         *
         * @param DateTimeZone $timezone
         *
         * @return static
         * @link http://php.net/manual/en/datetime.settimezone.php
         */
        #[\ReturnTypeWillChange]
        public function setTimezone($timezone)
        {
        }
        /**
         * Get the timestamp with the WordPress timezone offset added or subtracted.
         *
         * @since  3.0.0
         * @return int
         */
        public function getOffsetTimestamp()
        {
        }
    }
    /**
     * ActionScheduler Exception Interface.
     *
     * Facilitates catching Exceptions unique to Action Scheduler.
     *
     * @package ActionScheduler
     * @since 2.1.0
     */
    interface ActionScheduler_Exception
    {
    }
    /**
     * Class ActionScheduler_FatalErrorMonitor
     */
    class ActionScheduler_FatalErrorMonitor
    {
        public function __construct(\ActionScheduler_Store $store)
        {
        }
        public function attach(\ActionScheduler_ActionClaim $claim)
        {
        }
        public function detach()
        {
        }
        public function track_current_action($action_id)
        {
        }
        public function untrack_action()
        {
        }
        public function handle_unexpected_shutdown()
        {
        }
    }
    /**
     * InvalidAction Exception.
     *
     * Used for identifying actions that are invalid in some way.
     *
     * @package ActionScheduler
     */
    class ActionScheduler_InvalidActionException extends \InvalidArgumentException implements \ActionScheduler_Exception
    {
        /**
         * Create a new exception when the action's schedule cannot be fetched.
         *
         * @param string $action_id The action ID with bad args.
         * @return static
         */
        public static function from_schedule($action_id, $schedule)
        {
        }
        /**
         * Create a new exception when the action's args cannot be decoded to an array.
         *
         * @author Jeremy Pry
         *
         * @param string $action_id The action ID with bad args.
         * @return static
         */
        public static function from_decoding_args($action_id, $args = array())
        {
        }
    }
    /**
     * Action Scheduler Abstract List Table class
     *
     * This abstract class enhances WP_List_Table making it ready to use.
     *
     * By extending this class we can focus on describing how our table looks like,
     * which columns needs to be shown, filter, ordered by and more and forget about the details.
     *
     * This class supports:
     *  - Bulk actions
     *  - Search
     *  - Sortable columns
     *  - Automatic translations of the columns
     *
     * @codeCoverageIgnore
     * @since  2.0.0
     */
    abstract class ActionScheduler_Abstract_ListTable extends \WP_List_Table
    {
        /**
         * The table name
         *
         * @var string
         */
        protected $table_name;
        /**
         * Package name, used to get options from WP_List_Table::get_items_per_page.
         *
         * @var string
         */
        protected $package;
        /**
         * How many items do we render per page?
         *
         * @var int
         */
        protected $items_per_page = 10;
        /**
         * Enables search in this table listing. If this array
         * is empty it means the listing is not searchable.
         *
         * @var array
         */
        protected $search_by = array();
        /**
         * Columns to show in the table listing. It is a key => value pair. The
         * key must much the table column name and the value is the label, which is
         * automatically translated.
         *
         * @var array
         */
        protected $columns = array();
        /**
         * Defines the row-actions. It expects an array where the key
         * is the column name and the value is an array of actions.
         *
         * The array of actions are key => value, where key is the method name
         * (with the prefix row_action_<key>) and the value is the label
         * and title.
         *
         * @var array
         */
        protected $row_actions = array();
        /**
         * The Primary key of our table
         *
         * @var string
         */
        protected $ID = 'ID';
        /**
         * Enables sorting, it expects an array
         * of columns (the column names are the values)
         *
         * @var array
         */
        protected $sort_by = array();
        /**
         * The default sort order
         *
         * @var string
         */
        protected $filter_by = array();
        /**
         * The status name => count combinations for this table's items. Used to display status filters.
         *
         * @var array
         */
        protected $status_counts = array();
        /**
         * Notices to display when loading the table. Array of arrays of form array( 'class' => {updated|error}, 'message' => 'This is the notice text display.' ).
         *
         * @var array
         */
        protected $admin_notices = array();
        /**
         * Localised string displayed in the <h1> element above the able.
         *
         * @var string
         */
        protected $table_header;
        /**
         * Enables bulk actions. It must be an array where the key is the action name
         * and the value is the label (which is translated automatically). It is important
         * to notice that it will check that the method exists (`bulk_$name`) and will throw
         * an exception if it does not exists.
         *
         * This class will automatically check if the current request has a bulk action, will do the
         * validations and afterwards will execute the bulk method, with two arguments. The first argument
         * is the array with primary keys, the second argument is a string with a list of the primary keys,
         * escaped and ready to use (with `IN`).
         *
         * @var array
         */
        protected $bulk_actions = array();
        /**
         * Makes translation easier, it basically just wraps
         * `_x` with some default (the package name).
         *
         * @param string $text The new text to translate.
         * @param string $context The context of the text.
         * @return string|void The translated text.
         *
         * @deprecated 3.0.0 Use `_x()` instead.
         */
        protected function translate($text, $context = '')
        {
        }
        /**
         * Reads `$this->bulk_actions` and returns an array that WP_List_Table understands. It
         * also validates that the bulk method handler exists. It throws an exception because
         * this is a library meant for developers and missing a bulk method is a development-time error.
         *
         * @return array
         *
         * @throws RuntimeException Throws RuntimeException when the bulk action does not have a callback method.
         */
        protected function get_bulk_actions()
        {
        }
        /**
         * Checks if the current request has a bulk action. If that is the case it will validate and will
         * execute the bulk method handler. Regardless if the action is valid or not it will redirect to
         * the previous page removing the current arguments that makes this request a bulk action.
         */
        protected function process_bulk_action()
        {
        }
        /**
         * Default code for deleting entries.
         * validated already by process_bulk_action()
         *
         * @param array  $ids ids of the items to delete.
         * @param string $ids_sql the sql for the ids.
         * @return void
         */
        protected function bulk_delete(array $ids, $ids_sql)
        {
        }
        /**
         * Prepares the _column_headers property which is used by WP_Table_List at rendering.
         * It merges the columns and the sortable columns.
         */
        protected function prepare_column_headers()
        {
        }
        /**
         * Reads $this->sort_by and returns the columns name in a format that WP_Table_List
         * expects
         */
        public function get_sortable_columns()
        {
        }
        /**
         * Returns the columns names for rendering. It adds a checkbox for selecting everything
         * as the first column
         */
        public function get_columns()
        {
        }
        /**
         * Get prepared LIMIT clause for items query
         *
         * @global wpdb $wpdb
         *
         * @return string Prepared LIMIT clause for items query.
         */
        protected function get_items_query_limit()
        {
        }
        /**
         * Returns the number of items to offset/skip for this current view.
         *
         * @return int
         */
        protected function get_items_offset()
        {
        }
        /**
         * Get prepared OFFSET clause for items query
         *
         * @global wpdb $wpdb
         *
         * @return string Prepared OFFSET clause for items query.
         */
        protected function get_items_query_offset()
        {
        }
        /**
         * Prepares the ORDER BY sql statement. It uses `$this->sort_by` to know which
         * columns are sortable. This requests validates the orderby $_GET parameter is a valid
         * column and sortable. It will also use order (ASC|DESC) using DESC by default.
         */
        protected function get_items_query_order()
        {
        }
        /**
         * Return the sortable column specified for this request to order the results by, if any.
         *
         * @return string
         */
        protected function get_request_orderby()
        {
        }
        /**
         * Return the sortable column order specified for this request.
         *
         * @return string
         */
        protected function get_request_order()
        {
        }
        /**
         * Return the status filter for this request, if any.
         *
         * @return string
         */
        protected function get_request_status()
        {
        }
        /**
         * Return the search filter for this request, if any.
         *
         * @return string
         */
        protected function get_request_search_query()
        {
        }
        /**
         * Process and return the columns name. This is meant for using with SQL, this means it
         * always includes the primary key.
         *
         * @return array
         */
        protected function get_table_columns()
        {
        }
        /**
         * Check if the current request is doing a "full text" search. If that is the case
         * prepares the SQL to search texts using LIKE.
         *
         * If the current request does not have any search or if this list table does not support
         * that feature it will return an empty string.
         *
         * @return string
         */
        protected function get_items_query_search()
        {
        }
        /**
         * Prepares the SQL to filter rows by the options defined at `$this->filter_by`. Before trusting
         * any data sent by the user it validates that it is a valid option.
         */
        protected function get_items_query_filters()
        {
        }
        /**
         * Prepares the data to feed WP_Table_List.
         *
         * This has the core for selecting, sorting and filting data. To keep the code simple
         * its logic is split among many methods (get_items_query_*).
         *
         * Beside populating the items this function will also count all the records that matches
         * the filtering criteria and will do fill the pagination variables.
         */
        public function prepare_items()
        {
        }
        /**
         * Display the table.
         *
         * @param string $which The name of the table.
         */
        public function extra_tablenav($which)
        {
        }
        /**
         * Set the data for displaying. It will attempt to unserialize (There is a chance that some columns
         * are serialized). This can be override in child classes for futher data transformation.
         *
         * @param array $items Items array.
         */
        protected function set_items(array $items)
        {
        }
        /**
         * Renders the checkbox for each row, this is the first column and it is named ID regardless
         * of how the primary key is named (to keep the code simpler). The bulk actions will do the proper
         * name transformation though using `$this->ID`.
         *
         * @param array $row The row to render.
         */
        public function column_cb($row)
        {
        }
        /**
         * Renders the row-actions.
         *
         * This method renders the action menu, it reads the definition from the $row_actions property,
         * and it checks that the row action method exists before rendering it.
         *
         * @param array  $row Row to be rendered.
         * @param string $column_name Column name.
         * @return string
         */
        protected function maybe_render_actions($row, $column_name)
        {
        }
        /**
         * Process the bulk actions.
         *
         * @return void
         */
        protected function process_row_actions()
        {
        }
        /**
         * Default column formatting, it will escape everythig for security.
         *
         * @param array  $item The item array.
         * @param string $column_name Column name to display.
         *
         * @return string
         */
        public function column_default($item, $column_name)
        {
        }
        /**
         * Display the table heading and search query, if any
         */
        protected function display_header()
        {
        }
        /**
         * Display the table heading and search query, if any
         */
        protected function display_admin_notices()
        {
        }
        /**
         * Prints the available statuses so the user can click to filter.
         */
        protected function display_filter_by_status()
        {
        }
        /**
         * Renders the table list, we override the original class to render the table inside a form
         * and to render any needed HTML (like the search box). By doing so the callee of a function can simple
         * forget about any extra HTML.
         */
        protected function display_table()
        {
        }
        /**
         * Process any pending actions.
         */
        public function process_actions()
        {
        }
        /**
         * Render the list table page, including header, notices, status filters and table.
         */
        public function display_page()
        {
        }
        /**
         * Get the text to display in the search box on the list table.
         */
        protected function get_search_box_placeholder()
        {
        }
        /**
         * Gets the screen per_page option name.
         *
         * @return string
         */
        protected function get_per_page_option_name()
        {
        }
    }
    /**
     * Implements the admin view of the actions.
     * @codeCoverageIgnore
     */
    class ActionScheduler_ListTable extends \ActionScheduler_Abstract_ListTable
    {
        /**
         * The package name.
         *
         * @var string
         */
        protected $package = 'action-scheduler';
        /**
         * Columns to show (name => label).
         *
         * @var array
         */
        protected $columns = array();
        /**
         * Actions (name => label).
         *
         * @var array
         */
        protected $row_actions = array();
        /**
         * The active data stores
         *
         * @var ActionScheduler_Store
         */
        protected $store;
        /**
         * A logger to use for getting action logs to display
         *
         * @var ActionScheduler_Logger
         */
        protected $logger;
        /**
         * A ActionScheduler_QueueRunner runner instance (or child class)
         *
         * @var ActionScheduler_QueueRunner
         */
        protected $runner;
        /**
         * Bulk actions. The key of the array is the method name of the implementation:
         *
         *     bulk_<key>(array $ids, string $sql_in).
         *
         * See the comments in the parent class for further details
         *
         * @var array
         */
        protected $bulk_actions = array();
        /**
         * Flag variable to render our notifications, if any, once.
         *
         * @var bool
         */
        protected static $did_notification = \false;
        /**
         * Sets the current data store object into `store->action` and initialises the object.
         *
         * @param ActionScheduler_Store $store
         * @param ActionScheduler_Logger $logger
         * @param ActionScheduler_QueueRunner $runner
         */
        public function __construct(\ActionScheduler_Store $store, \ActionScheduler_Logger $logger, \ActionScheduler_QueueRunner $runner)
        {
        }
        /**
         * Handles setting the items_per_page option for this screen.
         *
         * @param mixed  $status Default false (to skip saving the current option).
         * @param string $option Screen option name.
         * @param int    $value  Screen option value.
         * @return int
         */
        public function set_items_per_page_option($status, $option, $value)
        {
        }
        /**
         * Returns the recurrence of an action or 'Non-repeating'. The output is human readable.
         *
         * @param ActionScheduler_Action $action
         *
         * @return string
         */
        protected function get_recurrence($action)
        {
        }
        /**
         * Serializes the argument of an action to render it in a human friendly format.
         *
         * @param array $row The array representation of the current row of the table
         *
         * @return string
         */
        public function column_args(array $row)
        {
        }
        /**
         * Prints the logs entries inline. We do so to avoid loading Javascript and other hacks to show it in a modal.
         *
         * @param array $row Action array.
         * @return string
         */
        public function column_log_entries(array $row)
        {
        }
        /**
         * Prints the logs entries inline. We do so to avoid loading Javascript and other hacks to show it in a modal.
         *
         * @param ActionScheduler_LogEntry $log_entry
         * @param DateTimezone $timezone
         * @return string
         */
        protected function get_log_entry_html(\ActionScheduler_LogEntry $log_entry, \DateTimezone $timezone)
        {
        }
        /**
         * Only display row actions for pending actions.
         *
         * @param array  $row         Row to render
         * @param string $column_name Current row
         *
         * @return string
         */
        protected function maybe_render_actions($row, $column_name)
        {
        }
        /**
         * Renders admin notifications
         *
         * Notifications:
         *  1. When the maximum number of tasks are being executed simultaneously.
         *  2. Notifications when a task is manually executed.
         *  3. Tables are missing.
         */
        public function display_admin_notices()
        {
        }
        /**
         * Prints the scheduled date in a human friendly format.
         *
         * @param array $row The array representation of the current row of the table
         *
         * @return string
         */
        public function column_schedule($row)
        {
        }
        /**
         * Get the scheduled date in a human friendly format.
         *
         * @param ActionScheduler_Schedule $schedule
         * @return string
         */
        protected function get_schedule_display_string(\ActionScheduler_Schedule $schedule)
        {
        }
        /**
         * Bulk delete
         *
         * Deletes actions based on their ID. This is the handler for the bulk delete. It assumes the data
         * properly validated by the callee and it will delete the actions without any extra validation.
         *
         * @param array $ids
         * @param string $ids_sql Inherited and unused
         */
        protected function bulk_delete(array $ids, $ids_sql)
        {
        }
        /**
         * Implements the logic behind running an action. ActionScheduler_Abstract_ListTable validates the request and their
         * parameters are valid.
         *
         * @param int $action_id
         */
        protected function row_action_cancel($action_id)
        {
        }
        /**
         * Implements the logic behind running an action. ActionScheduler_Abstract_ListTable validates the request and their
         * parameters are valid.
         *
         * @param int $action_id
         */
        protected function row_action_run($action_id)
        {
        }
        /**
         * Force the data store schema updates.
         */
        protected function recreate_tables()
        {
        }
        /**
         * Implements the logic behind processing an action once an action link is clicked on the list table.
         *
         * @param int $action_id
         * @param string $row_action_type The type of action to perform on the action.
         */
        protected function process_row_action($action_id, $row_action_type)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function prepare_items()
        {
        }
        /**
         * Prints the available statuses so the user can click to filter.
         */
        protected function display_filter_by_status()
        {
        }
        /**
         * Get the text to display in the search box on the list table.
         */
        protected function get_search_box_button_text()
        {
        }
        /**
         * {@inheritDoc}
         */
        protected function get_per_page_option_name()
        {
        }
    }
    /**
     * Class ActionScheduler_LogEntry
     */
    class ActionScheduler_LogEntry
    {
        /**
         * @var int $action_id
         */
        protected $action_id = '';
        /**
         * @var string $message
         */
        protected $message = '';
        /**
         * @var Datetime $date
         */
        protected $date;
        /**
         * Constructor
         *
         * @param mixed  $action_id Action ID
         * @param string $message   Message
         * @param Datetime $date    Datetime object with the time when this log entry was created. If this parameter is
         *                          not provided a new Datetime object (with current time) will be created.
         */
        public function __construct($action_id, $message, $date = \null)
        {
        }
        /**
         * Returns the date when this log entry was created
         *
         * @return Datetime
         */
        public function get_date()
        {
        }
        public function get_action_id()
        {
        }
        public function get_message()
        {
        }
    }
    /**
     * Class ActionScheduler_NullLogEntry
     */
    class ActionScheduler_NullLogEntry extends \ActionScheduler_LogEntry
    {
        public function __construct($action_id = '', $message = '')
        {
        }
    }
    /**
     * Abstract class for setting a basic lock to throttle some action.
     *
     * Class ActionScheduler_Lock
     */
    abstract class ActionScheduler_Lock
    {
        /** @var int */
        protected static $lock_duration = \MINUTE_IN_SECONDS;
        /**
         * Check if a lock is set for a given lock type.
         *
         * @param string $lock_type A string to identify different lock types.
         * @return bool
         */
        public function is_locked($lock_type)
        {
        }
        /**
         * Set a lock.
         *
         * To prevent race conditions, implementations should avoid setting the lock if the lock is already held.
         *
         * @param string $lock_type A string to identify different lock types.
         * @return bool
         */
        public abstract function set($lock_type);
        /**
         * If a lock is set, return the timestamp it was set to expiry.
         *
         * @param string $lock_type A string to identify different lock types.
         * @return bool|int False if no lock is set, otherwise the timestamp for when the lock is set to expire.
         */
        public abstract function get_expiration($lock_type);
        /**
         * Get the amount of time to set for a given lock. 60 seconds by default.
         *
         * @param string $lock_type A string to identify different lock types.
         * @return int
         */
        protected function get_duration($lock_type)
        {
        }
        /**
         * @return ActionScheduler_Lock
         */
        public static function instance()
        {
        }
    }
    /**
     * Provide a way to set simple transient locks to block behaviour
     * for up-to a given duration.
     *
     * Class ActionScheduler_OptionLock
     * @since 3.0.0
     */
    class ActionScheduler_OptionLock extends \ActionScheduler_Lock
    {
        /**
         * Set a lock using options for a given amount of time (60 seconds by default).
         *
         * Using an autoloaded option avoids running database queries or other resource intensive tasks
         * on frequently triggered hooks, like 'init' or 'shutdown'.
         *
         * For example, ActionScheduler_QueueRunner->maybe_dispatch_async_request() uses a lock to avoid
         * calling ActionScheduler_QueueRunner->has_maximum_concurrent_batches() every time the 'shutdown',
         * hook is triggered, because that method calls ActionScheduler_QueueRunner->store->get_claim_count()
         * to find the current number of claims in the database.
         *
         * @param string $lock_type A string to identify different lock types.
         * @bool True if lock value has changed, false if not or if set failed.
         */
        public function set($lock_type)
        {
        }
        /**
         * If a lock is set, return the timestamp it was set to expiry.
         *
         * @param string $lock_type A string to identify different lock types.
         * @return bool|int False if no lock is set, otherwise the timestamp for when the lock is set to expire.
         */
        public function get_expiration($lock_type)
        {
        }
        /**
         * Get the key to use for storing the lock in the transient
         *
         * @param string $lock_type A string to identify different lock types.
         * @return string
         */
        protected function get_key($lock_type)
        {
        }
    }
    /**
     * Class ActionScheduler_QueueCleaner
     */
    class ActionScheduler_QueueCleaner
    {
        /** @var int */
        protected $batch_size;
        /**
         * ActionScheduler_QueueCleaner constructor.
         *
         * @param ActionScheduler_Store $store      The store instance.
         * @param int                   $batch_size The batch size.
         */
        public function __construct(\ActionScheduler_Store $store = \null, $batch_size = 20)
        {
        }
        /**
         * Default queue cleaner process used by queue runner.
         *
         * @return array
         */
        public function delete_old_actions()
        {
        }
        /**
         * Delete selected actions limited by status and date.
         *
         * @param string[] $statuses_to_purge List of action statuses to purge. Defaults to canceled, complete.
         * @param DateTime $cutoff_date Date limit for selecting actions. Defaults to 31 days ago.
         * @param int|null $batch_size Maximum number of actions per status to delete. Defaults to 20.
         * @param string $context Calling process context. Defaults to `old`.
         * @return array Actions deleted.
         */
        public function clean_actions(array $statuses_to_purge, \DateTime $cutoff_date, $batch_size = \null, $context = 'old')
        {
        }
        /**
         * Unclaim pending actions that have not been run within a given time limit.
         *
         * When called by ActionScheduler_Abstract_QueueRunner::run_cleanup(), the time limit passed
         * as a parameter is 10x the time limit used for queue processing.
         *
         * @param int $time_limit The number of seconds to allow a queue to run before unclaiming its pending actions. Default 300 (5 minutes).
         */
        public function reset_timeouts($time_limit = 300)
        {
        }
        /**
         * Mark actions that have been running for more than a given time limit as failed, based on
         * the assumption some uncatachable and unloggable fatal error occurred during processing.
         *
         * When called by ActionScheduler_Abstract_QueueRunner::run_cleanup(), the time limit passed
         * as a parameter is 10x the time limit used for queue processing.
         *
         * @param int $time_limit The number of seconds to allow an action to run before it is considered to have failed. Default 300 (5 minutes).
         */
        public function mark_failures($time_limit = 300)
        {
        }
        /**
         * Do all of the cleaning actions.
         *
         * @param int $time_limit The number of seconds to use as the timeout and failure period. Default 300 (5 minutes).
         * @author Jeremy Pry
         */
        public function clean($time_limit = 300)
        {
        }
        /**
         * Get the batch size for cleaning the queue.
         *
         * @author Jeremy Pry
         * @return int
         */
        protected function get_batch_size()
        {
        }
    }
    /**
     * Abstract class with common Queue Cleaner functionality.
     */
    abstract class ActionScheduler_Abstract_QueueRunner_Deprecated
    {
        /**
         * Get the maximum number of seconds a batch can run for.
         *
         * @deprecated 2.1.1
         * @return int The number of seconds.
         */
        protected function get_maximum_execution_time()
        {
        }
    }
    /**
     * Abstract class with common Queue Cleaner functionality.
     */
    abstract class ActionScheduler_Abstract_QueueRunner extends \ActionScheduler_Abstract_QueueRunner_Deprecated
    {
        /** @var ActionScheduler_QueueCleaner */
        protected $cleaner;
        /** @var ActionScheduler_FatalErrorMonitor */
        protected $monitor;
        /** @var ActionScheduler_Store */
        protected $store;
        /**
         * ActionScheduler_Abstract_QueueRunner constructor.
         *
         * @param ActionScheduler_Store             $store
         * @param ActionScheduler_FatalErrorMonitor $monitor
         * @param ActionScheduler_QueueCleaner      $cleaner
         */
        public function __construct(\ActionScheduler_Store $store = \null, \ActionScheduler_FatalErrorMonitor $monitor = \null, \ActionScheduler_QueueCleaner $cleaner = \null)
        {
        }
        /**
         * Process an individual action.
         *
         * @param int $action_id The action ID to process.
         * @param string $context Optional identifer for the context in which this action is being processed, e.g. 'WP CLI' or 'WP Cron'
         *        Generally, this should be capitalised and not localised as it's a proper noun.
         */
        public function process_action($action_id, $context = '')
        {
        }
        /**
         * Schedule the next instance of the action if necessary.
         *
         * @param ActionScheduler_Action $action
         * @param int $action_id
         */
        protected function schedule_next_instance(\ActionScheduler_Action $action, $action_id)
        {
        }
        /**
         * Run the queue cleaner.
         *
         * @author Jeremy Pry
         */
        protected function run_cleanup()
        {
        }
        /**
         * Get the number of concurrent batches a runner allows.
         *
         * @return int
         */
        public function get_allowed_concurrent_batches()
        {
        }
        /**
         * Check if the number of allowed concurrent batches is met or exceeded.
         *
         * @return bool
         */
        public function has_maximum_concurrent_batches()
        {
        }
        /**
         * Get the maximum number of seconds a batch can run for.
         *
         * @return int The number of seconds.
         */
        protected function get_time_limit()
        {
        }
        /**
         * Get the number of seconds the process has been running.
         *
         * @return int The number of seconds.
         */
        protected function get_execution_time()
        {
        }
        /**
         * Check if the host's max execution time is (likely) to be exceeded if processing more actions.
         *
         * @param int $processed_actions The number of actions processed so far - used to determine the likelihood of exceeding the time limit if processing another action
         * @return bool
         */
        protected function time_likely_to_be_exceeded($processed_actions)
        {
        }
        /**
         * Get memory limit
         *
         * Based on WP_Background_Process::get_memory_limit()
         *
         * @return int
         */
        protected function get_memory_limit()
        {
        }
        /**
         * Memory exceeded
         *
         * Ensures the batch process never exceeds 90% of the maximum WordPress memory.
         *
         * Based on WP_Background_Process::memory_exceeded()
         *
         * @return bool
         */
        protected function memory_exceeded()
        {
        }
        /**
         * See if the batch limits have been exceeded, which is when memory usage is almost at
         * the maximum limit, or the time to process more actions will exceed the max time limit.
         *
         * Based on WC_Background_Process::batch_limits_exceeded()
         *
         * @param int $processed_actions The number of actions processed so far - used to determine the likelihood of exceeding the time limit if processing another action
         * @return bool
         */
        protected function batch_limits_exceeded($processed_actions)
        {
        }
        /**
         * Process actions in the queue.
         *
         * @author Jeremy Pry
         * @param string $context Optional identifer for the context in which this action is being processed, e.g. 'WP CLI' or 'WP Cron'
         *        Generally, this should be capitalised and not localised as it's a proper noun.
         * @return int The number of actions processed.
         */
        public abstract function run($context = '');
    }
    /**
     * Class ActionScheduler_QueueRunner
     */
    class ActionScheduler_QueueRunner extends \ActionScheduler_Abstract_QueueRunner
    {
        const WP_CRON_HOOK = 'action_scheduler_run_queue';
        const WP_CRON_SCHEDULE = 'every_minute';
        /** @var ActionScheduler_AsyncRequest_QueueRunner */
        protected $async_request;
        /**
         * @return ActionScheduler_QueueRunner
         * @codeCoverageIgnore
         */
        public static function instance()
        {
        }
        /**
         * ActionScheduler_QueueRunner constructor.
         *
         * @param ActionScheduler_Store             $store
         * @param ActionScheduler_FatalErrorMonitor $monitor
         * @param ActionScheduler_QueueCleaner      $cleaner
         */
        public function __construct(\ActionScheduler_Store $store = \null, \ActionScheduler_FatalErrorMonitor $monitor = \null, \ActionScheduler_QueueCleaner $cleaner = \null, \ActionScheduler_AsyncRequest_QueueRunner $async_request = \null)
        {
        }
        /**
         * @codeCoverageIgnore
         */
        public function init()
        {
        }
        /**
         * Hook check for dispatching an async request.
         */
        public function hook_dispatch_async_request()
        {
        }
        /**
         * Unhook check for dispatching an async request.
         */
        public function unhook_dispatch_async_request()
        {
        }
        /**
         * Check if we should dispatch an async request to process actions.
         *
         * This method is attached to 'shutdown', so is called frequently. To avoid slowing down
         * the site, it mitigates the work performed in each request by:
         * 1. checking if it's in the admin context and then
         * 2. haven't run on the 'shutdown' hook within the lock time (60 seconds by default)
         * 3. haven't exceeded the number of allowed batches.
         *
         * The order of these checks is important, because they run from a check on a value:
         * 1. in memory - is_admin() maps to $GLOBALS or the WP_ADMIN constant
         * 2. in memory - transients use autoloaded options by default
         * 3. from a database query - has_maximum_concurrent_batches() run the query
         *    $this->store->get_claim_count() to find the current number of claims in the DB.
         *
         * If all of these conditions are met, then we request an async runner check whether it
         * should dispatch a request to process pending actions.
         */
        public function maybe_dispatch_async_request()
        {
        }
        /**
         * Process actions in the queue. Attached to self::WP_CRON_HOOK i.e. 'action_scheduler_run_queue'
         *
         * The $context param of this method defaults to 'WP Cron', because prior to Action Scheduler 3.0.0
         * that was the only context in which this method was run, and the self::WP_CRON_HOOK hook had no context
         * passed along with it. New code calling this method directly, or by triggering the self::WP_CRON_HOOK,
         * should set a context as the first parameter. For an example of this, refer to the code seen in
         * @see ActionScheduler_AsyncRequest_QueueRunner::handle()
         *
         * @param string $context Optional identifer for the context in which this action is being processed, e.g. 'WP CLI' or 'WP Cron'
         *        Generally, this should be capitalised and not localised as it's a proper noun.
         * @return int The number of actions processed.
         */
        public function run($context = 'WP Cron')
        {
        }
        /**
         * Process a batch of actions pending in the queue.
         *
         * Actions are processed by claiming a set of pending actions then processing each one until either the batch
         * size is completed, or memory or time limits are reached, defined by @see $this->batch_limits_exceeded().
         *
         * @param int $size The maximum number of actions to process in the batch.
         * @param string $context Optional identifer for the context in which this action is being processed, e.g. 'WP CLI' or 'WP Cron'
         *        Generally, this should be capitalised and not localised as it's a proper noun.
         * @return int The number of actions processed.
         */
        protected function do_batch($size = 100, $context = '')
        {
        }
        /**
         * Flush the cache if possible (intended for use after a batch of actions has been processed).
         *
         * This is useful because running large batches can eat up memory and because invalid data can accrue in the
         * runtime cache, which may lead to unexpected results.
         */
        protected function clear_caches()
        {
        }
        public function add_wp_cron_schedule($schedules)
        {
        }
    }
    /**
     * Class ActionScheduler_Versions
     */
    class ActionScheduler_Versions
    {
        public function register($version_string, $initialization_callback)
        {
        }
        public function get_versions()
        {
        }
        public function latest_version()
        {
        }
        public function latest_version_callback()
        {
        }
        /**
         * @return ActionScheduler_Versions
         * @codeCoverageIgnore
         */
        public static function instance()
        {
        }
        /**
         * @codeCoverageIgnore
         */
        public static function initialize_latest_version()
        {
        }
    }
    /**
     * Class ActionScheduler_WPCommentCleaner
     *
     * @since 3.0.0
     */
    class ActionScheduler_WPCommentCleaner
    {
        /**
         * Post migration hook used to cleanup the WP comment table.
         *
         * @var string
         */
        protected static $cleanup_hook = 'action_scheduler/cleanup_wp_comment_logs';
        /**
         * An instance of the ActionScheduler_wpCommentLogger class to interact with the comments table.
         *
         * This instance should only be used as an interface. It should not be initialized.
         *
         * @var ActionScheduler_wpCommentLogger
         */
        protected static $wp_comment_logger = \null;
        /**
         * The key used to store the cached value of whether there are logs in the WP comment table.
         *
         * @var string
         */
        protected static $has_logs_option_key = 'as_has_wp_comment_logs';
        /**
         * Initialize the class and attach callbacks.
         */
        public static function init()
        {
        }
        /**
         * Determines if there are log entries in the wp comments table.
         *
         * Uses the flag set on migration completion set by @see self::maybe_schedule_cleanup().
         *
         * @return boolean Whether there are scheduled action comments in the comments table.
         */
        public static function has_logs()
        {
        }
        /**
         * Schedules the WP Post comment table cleanup to run in 6 months if it's not already scheduled.
         * Attached to the migration complete hook 'action_scheduler/migration_complete'.
         */
        public static function maybe_schedule_cleanup()
        {
        }
        /**
         * Delete all action comments from the WP Comments table.
         */
        public static function delete_all_action_comments()
        {
        }
        /**
         * Registers admin notices about the orphaned action logs.
         */
        public static function register_admin_notice()
        {
        }
        /**
         * Prints details about the orphaned action logs and includes information on where to learn more.
         */
        public static function print_admin_notice()
        {
        }
    }
    /**
     * Class ActionScheduler_wcSystemStatus
     */
    class ActionScheduler_wcSystemStatus
    {
        /**
         * The active data stores
         *
         * @var ActionScheduler_Store
         */
        protected $store;
        /**
         * Constructor method for ActionScheduler_wcSystemStatus.
         *
         * @param ActionScheduler_Store $store Active store object.
         *
         * @return void
         */
        public function __construct($store)
        {
        }
        /**
         * Display action data, including number of actions grouped by status and the oldest & newest action in each status.
         *
         * Helpful to identify issues, like a clogged queue.
         */
        public function render()
        {
        }
        /**
         * Get oldest and newest scheduled dates for a given set of statuses.
         *
         * @param array $status_keys Set of statuses to find oldest & newest action for.
         * @return array
         */
        protected function get_oldest_and_newest($status_keys)
        {
        }
        /**
         * Get oldest or newest scheduled date for a given status.
         *
         * @param string $status Action status label/name string.
         * @param string $date_type Oldest or Newest.
         * @return DateTime
         */
        protected function get_action_status_date($status, $date_type = 'oldest')
        {
        }
        /**
         * Get oldest or newest scheduled date for a given status.
         *
         * @param array $status_labels Set of statuses to find oldest & newest action for.
         * @param array $action_counts Number of actions grouped by status.
         * @param array $oldest_and_newest Date of the oldest and newest action with each status.
         */
        protected function get_template($status_labels, $action_counts, $oldest_and_newest)
        {
        }
        /**
         * Is triggered when invoking inaccessible methods in an object context.
         *
         * @param string $name Name of method called.
         * @param array  $arguments Parameters to invoke the method with.
         *
         * @return mixed
         * @link https://php.net/manual/en/language.oop5.overloading.php#language.oop5.overloading.methods
         */
        public function __call($name, $arguments)
        {
        }
    }
    /**
     * Commands for Action Scheduler.
     */
    class ActionScheduler_WPCLI_Clean_Command extends \WP_CLI_Command
    {
        /**
         * Run the Action Scheduler Queue Cleaner
         *
         * ## OPTIONS
         *
         * [--batch-size=<size>]
         * : The maximum number of actions to delete per batch. Defaults to 20.
         *
         * [--batches=<size>]
         * : Limit execution to a number of batches. Defaults to 0, meaning batches will continue all eligible actions are deleted.
         *
         * [--status=<status>]
         * : Only clean actions with the specified status. Defaults to Canceled, Completed. Define multiple statuses as a comma separated string (without spaces), e.g. `--status=complete,failed,canceled`
         *
         * [--before=<datestring>]
         * : Only delete actions with scheduled date older than this. Defaults to 31 days. e.g `--before='7 days ago'`, `--before='02-Feb-2020 20:20:20'`
         *
         * [--pause=<seconds>]
         * : The number of seconds to pause between batches. Default no pause.
         *
         * @param array $args Positional arguments.
         * @param array $assoc_args Keyed arguments.
         * @throws \WP_CLI\ExitException When an error occurs.
         *
         * @subcommand clean
         */
        public function clean($args, $assoc_args)
        {
        }
        /**
         * Print WP CLI message about how many batches of actions were processed.
         *
         * @param int $batches_processed
         */
        protected function print_total_batches(int $batches_processed)
        {
        }
        /**
         * Convert an exception into a WP CLI error.
         *
         * @param Exception $e The error object.
         *
         * @throws \WP_CLI\ExitException
         */
        protected function print_error(\Exception $e)
        {
        }
        /**
         * Print a success message with the number of completed actions.
         *
         * @param int $actions_deleted
         */
        protected function print_success(int $actions_deleted)
        {
        }
    }
    /**
     * WP CLI Queue runner.
     *
     * This class can only be called from within a WP CLI instance.
     */
    class ActionScheduler_WPCLI_QueueRunner extends \ActionScheduler_Abstract_QueueRunner
    {
        /** @var array */
        protected $actions;
        /** @var  ActionScheduler_ActionClaim */
        protected $claim;
        /** @var \cli\progress\Bar */
        protected $progress_bar;
        /**
         * ActionScheduler_WPCLI_QueueRunner constructor.
         *
         * @param ActionScheduler_Store             $store
         * @param ActionScheduler_FatalErrorMonitor $monitor
         * @param ActionScheduler_QueueCleaner      $cleaner
         *
         * @throws Exception When this is not run within WP CLI
         */
        public function __construct(\ActionScheduler_Store $store = \null, \ActionScheduler_FatalErrorMonitor $monitor = \null, \ActionScheduler_QueueCleaner $cleaner = \null)
        {
        }
        /**
         * Set up the Queue before processing.
         *
         * @author Jeremy Pry
         *
         * @param int    $batch_size The batch size to process.
         * @param array  $hooks      The hooks being used to filter the actions claimed in this batch.
         * @param string $group      The group of actions to claim with this batch.
         * @param bool   $force      Whether to force running even with too many concurrent processes.
         *
         * @return int The number of actions that will be run.
         * @throws \WP_CLI\ExitException When there are too many concurrent batches.
         */
        public function setup($batch_size, $hooks = array(), $group = '', $force = \false)
        {
        }
        /**
         * Add our hooks to the appropriate actions.
         *
         * @author Jeremy Pry
         */
        protected function add_hooks()
        {
        }
        /**
         * Set up the WP CLI progress bar.
         *
         * @author Jeremy Pry
         */
        protected function setup_progress_bar()
        {
        }
        /**
         * Process actions in the queue.
         *
         * @author Jeremy Pry
         *
         * @param string $context Optional runner context. Default 'WP CLI'.
         *
         * @return int The number of actions processed.
         */
        public function run($context = 'WP CLI')
        {
        }
        /**
         * Handle WP CLI message when the action is starting.
         *
         * @author Jeremy Pry
         *
         * @param $action_id
         */
        public function before_execute($action_id)
        {
        }
        /**
         * Handle WP CLI message when the action has completed.
         *
         * @author Jeremy Pry
         *
         * @param int $action_id
         * @param null|ActionScheduler_Action $action The instance of the action. Default to null for backward compatibility.
         */
        public function after_execute($action_id, $action = \null)
        {
        }
        /**
         * Handle WP CLI message when the action has failed.
         *
         * @author Jeremy Pry
         *
         * @param int       $action_id
         * @param Exception $exception
         * @throws \WP_CLI\ExitException With failure message.
         */
        public function action_failed($action_id, $exception)
        {
        }
        /**
         * Sleep and help avoid hitting memory limit
         *
         * @param int $sleep_time Amount of seconds to sleep
         * @deprecated 3.0.0
         */
        protected function stop_the_insanity($sleep_time = 0)
        {
        }
        /**
         * Maybe trigger the stop_the_insanity() method to free up memory.
         */
        protected function maybe_stop_the_insanity()
        {
        }
    }
    /**
     * Commands for Action Scheduler.
     */
    class ActionScheduler_WPCLI_Scheduler_command extends \WP_CLI_Command
    {
        /**
         * Force tables schema creation for Action Scheduler
         *
         * ## OPTIONS
         *
         * @param array $args Positional arguments.
         * @param array $assoc_args Keyed arguments.
         *
         * @subcommand fix-schema
         */
        public function fix_schema($args, $assoc_args)
        {
        }
        /**
         * Run the Action Scheduler
         *
         * ## OPTIONS
         *
         * [--batch-size=<size>]
         * : The maximum number of actions to run. Defaults to 100.
         *
         * [--batches=<size>]
         * : Limit execution to a number of batches. Defaults to 0, meaning batches will continue being executed until all actions are complete.
         *
         * [--cleanup-batch-size=<size>]
         * : The maximum number of actions to clean up. Defaults to the value of --batch-size.
         *
         * [--hooks=<hooks>]
         * : Only run actions with the specified hook. Omitting this option runs actions with any hook. Define multiple hooks as a comma separated string (without spaces), e.g. `--hooks=hook_one,hook_two,hook_three`
         *
         * [--group=<group>]
         * : Only run actions from the specified group. Omitting this option runs actions from all groups.
         *
         * [--exclude-groups=<groups>]
         * : Run actions from all groups except the specified group(s). Define multiple groups as a comma separated string (without spaces), e.g. '--group_a,group_b'. This option is ignored when `--group` is used.
         *
         * [--free-memory-on=<count>]
         * : The number of actions to process between freeing memory. 0 disables freeing memory. Default 50.
         *
         * [--pause=<seconds>]
         * : The number of seconds to pause when freeing memory. Default no pause.
         *
         * [--force]
         * : Whether to force execution despite the maximum number of concurrent processes being exceeded.
         *
         * @param array $args Positional arguments.
         * @param array $assoc_args Keyed arguments.
         * @throws \WP_CLI\ExitException When an error occurs.
         *
         * @subcommand run
         */
        public function run($args, $assoc_args)
        {
        }
        /**
         * Print WP CLI message about how many actions are about to be processed.
         *
         * @author Jeremy Pry
         *
         * @param int $total
         */
        protected function print_total_actions($total)
        {
        }
        /**
         * Print WP CLI message about how many batches of actions were processed.
         *
         * @author Jeremy Pry
         *
         * @param int $batches_completed
         */
        protected function print_total_batches($batches_completed)
        {
        }
        /**
         * Convert an exception into a WP CLI error.
         *
         * @author Jeremy Pry
         *
         * @param Exception $e The error object.
         *
         * @throws \WP_CLI\ExitException
         */
        protected function print_error(\Exception $e)
        {
        }
        /**
         * Print a success message with the number of completed actions.
         *
         * @author Jeremy Pry
         *
         * @param int $actions_completed
         */
        protected function print_success($actions_completed)
        {
        }
    }
}
namespace Action_Scheduler\WP_CLI {
    /**
     * Class Migration_Command
     *
     * @package Action_Scheduler\WP_CLI
     *
     * @since 3.0.0
     *
     * @codeCoverageIgnore
     */
    class Migration_Command extends \WP_CLI_Command
    {
        /**
         * Register the command with WP-CLI
         */
        public function register()
        {
        }
        /**
         * Process the data migration.
         *
         * @param array $positional_args Required for WP CLI. Not used in migration.
         * @param array $assoc_args Optional arguments.
         *
         * @return void
         */
        public function migrate($positional_args, $assoc_args)
        {
        }
    }
    /**
     * WP_CLI progress bar for Action Scheduler.
     */
    /**
     * Class ProgressBar
     *
     * @package Action_Scheduler\WP_CLI
     *
     * @since 3.0.0
     *
     * @codeCoverageIgnore
     */
    class ProgressBar
    {
        /** @var integer */
        protected $total_ticks;
        /** @var integer */
        protected $count;
        /** @var integer */
        protected $interval;
        /** @var string */
        protected $message;
        /** @var \cli\progress\Bar */
        protected $progress_bar;
        /**
         * ProgressBar constructor.
         *
         * @param string  $message    Text to display before the progress bar.
         * @param integer $count      Total number of ticks to be performed.
         * @param integer $interval   Optional. The interval in milliseconds between updates. Default 100.
         *
         * @throws Exception When this is not run within WP CLI
         */
        public function __construct($message, $count, $interval = 100)
        {
        }
        /**
         * Increment the progress bar ticks.
         */
        public function tick()
        {
        }
        /**
         * Get the progress bar tick count.
         *
         * @return int
         */
        public function current()
        {
        }
        /**
         * Finish the current progress bar.
         */
        public function finish()
        {
        }
        /**
         * Set the message used when creating the progress bar.
         *
         * @param string $message The message to be used when the next progress bar is created.
         */
        public function set_message($message)
        {
        }
        /**
         * Set the count for a new progress bar.
         *
         * @param integer $count The total number of ticks expected to complete.
         */
        public function set_count($count)
        {
        }
        /**
         * Set up the progress bar.
         */
        protected function setup_progress_bar()
        {
        }
    }
}
namespace {
    /**
     * Class ActionScheduler
     * @codeCoverageIgnore
     */
    abstract class ActionScheduler
    {
        public static function factory()
        {
        }
        public static function store()
        {
        }
        public static function lock()
        {
        }
        public static function logger()
        {
        }
        public static function runner()
        {
        }
        public static function admin_view()
        {
        }
        /**
         * Get the absolute system path to the plugin directory, or a file therein
         * @static
         * @param string $path
         * @return string
         */
        public static function plugin_path($path)
        {
        }
        /**
         * Get the absolute URL to the plugin directory, or a file therein
         * @static
         * @param string $path
         * @return string
         */
        public static function plugin_url($path)
        {
        }
        public static function autoload($class)
        {
        }
        /**
         * Initialize the plugin
         *
         * @static
         * @param string $plugin_file
         */
        public static function init($plugin_file)
        {
        }
        /**
         * Check whether the AS data store has been initialized.
         *
         * @param string $function_name The name of the function being called. Optional. Default `null`.
         * @return bool
         */
        public static function is_initialized($function_name = \null)
        {
        }
        /**
         * Determine if the class is one of our abstract classes.
         *
         * @since 3.0.0
         *
         * @param string $class The class name.
         *
         * @return bool
         */
        protected static function is_class_abstract($class)
        {
        }
        /**
         * Determine if the class is one of our migration classes.
         *
         * @since 3.0.0
         *
         * @param string $class The class name.
         *
         * @return bool
         */
        protected static function is_class_migration($class)
        {
        }
        /**
         * Determine if the class is one of our WP CLI classes.
         *
         * @since 3.0.0
         *
         * @param string $class The class name.
         *
         * @return bool
         */
        protected static function is_class_cli($class)
        {
        }
        public final function __clone()
        {
        }
        public final function __wakeup()
        {
        }
        /** Deprecated **/
        public static function get_datetime_object($when = \null, $timezone = 'UTC')
        {
        }
        /**
         * Issue deprecated warning if an Action Scheduler function is called in the shutdown hook.
         *
         * @param string $function_name The name of the function being called.
         * @deprecated 3.1.6.
         */
        public static function check_shutdown_hook($function_name)
        {
        }
    }
    /**
     * Class ActionScheduler_Schedule
     */
    interface ActionScheduler_Schedule
    {
        /**
         * @param DateTime $after
         * @return DateTime|null
         */
        public function next(\DateTime $after = \NULL);
        /**
         * @return bool
         */
        public function is_recurring();
    }
    /**
     * Class ActionScheduler_Abstract_Schedule
     */
    abstract class ActionScheduler_Schedule_Deprecated implements \ActionScheduler_Schedule
    {
        /**
         * Get the date & time this schedule was created to run, or calculate when it should be run
         * after a given date & time.
         *
         * @param DateTime $after DateTime to calculate against.
         *
         * @return DateTime|null
         */
        public function next(\DateTime $after = \null)
        {
        }
    }
    /**
     * Class ActionScheduler_Abstract_Schedule
     */
    abstract class ActionScheduler_Abstract_Schedule extends \ActionScheduler_Schedule_Deprecated
    {
        /**
         * Timestamp equivalent of @see $this->scheduled_date
         *
         * @var int
         */
        protected $scheduled_timestamp = \NULL;
        /**
         * @param DateTime $date The date & time to run the action.
         */
        public function __construct(\DateTime $date)
        {
        }
        /**
         * Check if a schedule should recur.
         *
         * @return bool
         */
        public abstract function is_recurring();
        /**
         * Calculate when the next instance of this schedule would run based on a given date & time.
         *
         * @param DateTime $after
         * @return DateTime
         */
        protected abstract function calculate_next(\DateTime $after);
        /**
         * Get the next date & time when this schedule should run after a given date & time.
         *
         * @param DateTime $after
         * @return DateTime|null
         */
        public function get_next(\DateTime $after)
        {
        }
        /**
         * Get the date & time the schedule is set to run.
         *
         * @return DateTime|null
         */
        public function get_date()
        {
        }
        /**
         * For PHP 5.2 compat, since DateTime objects can't be serialized
         * @return array
         */
        public function __sleep()
        {
        }
        public function __wakeup()
        {
        }
    }
    /**
     * Class ActionScheduler_Abstract_RecurringSchedule
     */
    abstract class ActionScheduler_Abstract_RecurringSchedule extends \ActionScheduler_Abstract_Schedule
    {
        /**
         * Timestamp equivalent of @see $this->first_date
         *
         * @var int
         */
        protected $first_timestamp = \NULL;
        /**
         * The recurrance between each time an action is run using this schedule.
         * Used to calculate the start date & time. Can be a number of seconds, in the
         * case of ActionScheduler_IntervalSchedule, or a cron expression, as in the
         * case of ActionScheduler_CronSchedule. Or something else.
         *
         * @var mixed
         */
        protected $recurrence;
        /**
         * @param DateTime $date The date & time to run the action.
         * @param mixed $recurrence The data used to determine the schedule's recurrance.
         * @param DateTime|null $first (Optional) The date & time the first instance of this interval schedule ran. Default null, meaning this is the first instance.
         */
        public function __construct(\DateTime $date, $recurrence, \DateTime $first = \null)
        {
        }
        /**
         * @return bool
         */
        public function is_recurring()
        {
        }
        /**
         * Get the date & time of the first schedule in this recurring series.
         *
         * @return DateTime|null
         */
        public function get_first_date()
        {
        }
        /**
         * @return string
         */
        public function get_recurrence()
        {
        }
        /**
         * For PHP 5.2 compat, since DateTime objects can't be serialized
         * @return array
         */
        public function __sleep()
        {
        }
        /**
         * Unserialize recurring schedules serialized/stored prior to AS 3.0.0
         *
         * Prior to Action Scheduler 3.0.0, schedules used different property names to refer
         * to equivalent data. For example, ActionScheduler_IntervalSchedule::start_timestamp
         * was the same as ActionScheduler_SimpleSchedule::timestamp. This was addressed in
         * Action Scheduler 3.0.0, where properties and property names were aligned for better
         * inheritance. To maintain backward compatibility with scheduled serialized and stored
         * prior to 3.0, we need to correctly map the old property names.
         */
        public function __wakeup()
        {
        }
    }
    /**
     * Class ActionScheduler_Abstract_Schema
     *
     * @package Action_Scheduler
     *
     * @codeCoverageIgnore
     *
     * Utility class for creating/updating custom tables
     */
    abstract class ActionScheduler_Abstract_Schema
    {
        /**
         * @var int Increment this value in derived class to trigger a schema update.
         */
        protected $schema_version = 1;
        /**
         * @var string Schema version stored in database.
         */
        protected $db_version;
        /**
         * @var array Names of tables that will be registered by this class.
         */
        protected $tables = array();
        /**
         * Can optionally be used by concrete classes to carry out additional initialization work
         * as needed.
         */
        public function init()
        {
        }
        /**
         * Register tables with WordPress, and create them if needed.
         *
         * @param bool $force_update Optional. Default false. Use true to always run the schema update.
         *
         * @return void
         */
        public function register_tables($force_update = \false)
        {
        }
        /**
         * @param string $table The name of the table
         *
         * @return string The CREATE TABLE statement, suitable for passing to dbDelta
         */
        protected abstract function get_table_definition($table);
        /**
         * @param string $table
         *
         * @return string The full name of the table, including the
         *                table prefix for the current blog
         */
        protected function get_full_table_name($table)
        {
        }
        /**
         * Confirms that all of the tables registered by this schema class have been created.
         *
         * @return bool
         */
        public function tables_exist()
        {
        }
    }
    /**
     * Class ActionScheduler_Logger
     * @codeCoverageIgnore
     */
    abstract class ActionScheduler_Logger
    {
        /**
         * @return ActionScheduler_Logger
         */
        public static function instance()
        {
        }
        /**
         * @param string $action_id
         * @param string $message
         * @param DateTime $date
         *
         * @return string The log entry ID
         */
        public abstract function log($action_id, $message, \DateTime $date = \NULL);
        /**
         * @param string $entry_id
         *
         * @return ActionScheduler_LogEntry
         */
        public abstract function get_entry($entry_id);
        /**
         * @param string $action_id
         *
         * @return ActionScheduler_LogEntry[]
         */
        public abstract function get_logs($action_id);
        /**
         * @codeCoverageIgnore
         */
        public function init()
        {
        }
        public function hook_stored_action()
        {
        }
        public function unhook_stored_action()
        {
        }
        public function log_stored_action($action_id)
        {
        }
        public function log_canceled_action($action_id)
        {
        }
        public function log_started_action($action_id, $context = '')
        {
        }
        public function log_completed_action($action_id, $action = \NULL, $context = '')
        {
        }
        public function log_failed_action($action_id, \Exception $exception, $context = '')
        {
        }
        public function log_timed_out_action($action_id, $timeout)
        {
        }
        public function log_unexpected_shutdown($action_id, $error)
        {
        }
        public function log_reset_action($action_id)
        {
        }
        public function log_ignored_action($action_id, $context = '')
        {
        }
        /**
         * @param string $action_id
         * @param Exception|NULL $exception The exception which occured when fetching the action. NULL by default for backward compatibility.
         *
         * @return ActionScheduler_LogEntry[]
         */
        public function log_failed_fetch_action($action_id, \Exception $exception = \NULL)
        {
        }
        public function log_failed_schedule_next_instance($action_id, \Exception $exception)
        {
        }
        /**
         * Bulk add cancel action log entries.
         *
         * Implemented here for backward compatibility. Should be implemented in parent loggers
         * for more performant bulk logging.
         *
         * @param array $action_ids List of action ID.
         */
        public function bulk_log_cancel_actions($action_ids)
        {
        }
    }
    /**
     * Class ActionScheduler_Store_Deprecated
     * @codeCoverageIgnore
     */
    abstract class ActionScheduler_Store_Deprecated
    {
        /**
         * Mark an action that failed to fetch correctly as failed.
         *
         * @since 2.2.6
         *
         * @param int $action_id The ID of the action.
         */
        public function mark_failed_fetch_action($action_id)
        {
        }
        /**
         * Add base hooks
         *
         * @since 2.2.6
         */
        protected static function hook()
        {
        }
        /**
         * Remove base hooks
         *
         * @since 2.2.6
         */
        protected static function unhook()
        {
        }
        /**
         * Get the site's local time.
         *
         * @deprecated 2.1.0
         * @return DateTimeZone
         */
        protected function get_local_timezone()
        {
        }
    }
    /**
     * Class ActionScheduler_Store
     * @codeCoverageIgnore
     */
    abstract class ActionScheduler_Store extends \ActionScheduler_Store_Deprecated
    {
        const STATUS_COMPLETE = 'complete';
        const STATUS_PENDING = 'pending';
        const STATUS_RUNNING = 'in-progress';
        const STATUS_FAILED = 'failed';
        const STATUS_CANCELED = 'canceled';
        const DEFAULT_CLASS = 'ActionScheduler_wpPostStore';
        /** @var int */
        protected static $max_args_length = 191;
        /**
         * @param ActionScheduler_Action $action
         * @param DateTime $scheduled_date Optional Date of the first instance
         *        to store. Otherwise uses the first date of the action's
         *        schedule.
         *
         * @return int The action ID
         */
        public abstract function save_action(\ActionScheduler_Action $action, \DateTime $scheduled_date = \NULL);
        /**
         * @param string $action_id
         *
         * @return ActionScheduler_Action
         */
        public abstract function fetch_action($action_id);
        /**
         * Find an action.
         *
         * Note: the query ordering changes based on the passed 'status' value.
         *
         * @param string $hook Action hook.
         * @param array  $params Parameters of the action to find.
         *
         * @return string|null ID of the next action matching the criteria or NULL if not found.
         */
        public function find_action($hook, $params = array())
        {
        }
        /**
         * Query for action count or list of action IDs.
         *
         * @since 3.3.0 $query['status'] accepts array of statuses instead of a single status.
         *
         * @param array  $query {
         *      Query filtering options.
         *
         *      @type string       $hook             The name of the actions. Optional.
         *      @type string|array $status           The status or statuses of the actions. Optional.
         *      @type array        $args             The args array of the actions. Optional.
         *      @type DateTime     $date             The scheduled date of the action. Used in UTC timezone. Optional.
         *      @type string       $date_compare     Operator for selecting by $date param. Accepted values are '!=', '>', '>=', '<', '<=', '='. Defaults to '<='.
         *      @type DateTime     $modified         The last modified date of the action. Used in UTC timezone. Optional.
         *      @type string       $modified_compare Operator for comparing $modified param. Accepted values are '!=', '>', '>=', '<', '<=', '='. Defaults to '<='.
         *      @type string       $group            The group the action belongs to. Optional.
         *      @type bool|int     $claimed          TRUE to find claimed actions, FALSE to find unclaimed actions, an int to find a specific claim ID. Optional.
         *      @type int          $per_page         Number of results to return. Defaults to 5.
         *      @type int          $offset           The query pagination offset. Defaults to 0.
         *      @type int          $orderby          Accepted values are 'hook', 'group', 'modified', 'date' or 'none'. Defaults to 'date'.
         *      @type string       $order            Accepted values are 'ASC' or 'DESC'. Defaults to 'ASC'.
         * }
         * @param string $query_type Whether to select or count the results. Default, select.
         *
         * @return string|array|null The IDs of actions matching the query. Null on failure.
         */
        public abstract function query_actions($query = array(), $query_type = 'select');
        /**
         * Run query to get a single action ID.
         *
         * @since 3.3.0
         *
         * @see ActionScheduler_Store::query_actions for $query arg usage but 'per_page' and 'offset' can't be used.
         *
         * @param array $query Query parameters.
         *
         * @return int|null
         */
        public function query_action($query)
        {
        }
        /**
         * Get a count of all actions in the store, grouped by status
         *
         * @return array
         */
        public abstract function action_counts();
        /**
         * Get additional action counts.
         *
         * - add past-due actions
         *
         * @return array
         */
        public function extra_action_counts()
        {
        }
        /**
         * @param string $action_id
         */
        public abstract function cancel_action($action_id);
        /**
         * @param string $action_id
         */
        public abstract function delete_action($action_id);
        /**
         * @param string $action_id
         *
         * @return DateTime The date the action is schedule to run, or the date that it ran.
         */
        public abstract function get_date($action_id);
        /**
         * @param int      $max_actions
         * @param DateTime $before_date Claim only actions schedule before the given date. Defaults to now.
         * @param array    $hooks       Claim only actions with a hook or hooks.
         * @param string   $group       Claim only actions in the given group.
         *
         * @return ActionScheduler_ActionClaim
         */
        public abstract function stake_claim($max_actions = 10, \DateTime $before_date = \null, $hooks = array(), $group = '');
        /**
         * @return int
         */
        public abstract function get_claim_count();
        /**
         * @param ActionScheduler_ActionClaim $claim
         */
        public abstract function release_claim(\ActionScheduler_ActionClaim $claim);
        /**
         * @param string $action_id
         */
        public abstract function unclaim_action($action_id);
        /**
         * @param string $action_id
         */
        public abstract function mark_failure($action_id);
        /**
         * @param string $action_id
         */
        public abstract function log_execution($action_id);
        /**
         * @param string $action_id
         */
        public abstract function mark_complete($action_id);
        /**
         * @param string $action_id
         *
         * @return string
         */
        public abstract function get_status($action_id);
        /**
         * @param string $action_id
         * @return mixed
         */
        public abstract function get_claim_id($action_id);
        /**
         * @param string $claim_id
         * @return array
         */
        public abstract function find_actions_by_claim_id($claim_id);
        /**
         * @param string $comparison_operator
         * @return string
         */
        protected function validate_sql_comparator($comparison_operator)
        {
        }
        /**
         * Get the time MySQL formated date/time string for an action's (next) scheduled date.
         *
         * @param ActionScheduler_Action $action
         * @param DateTime $scheduled_date (optional)
         * @return string
         */
        protected function get_scheduled_date_string(\ActionScheduler_Action $action, \DateTime $scheduled_date = \NULL)
        {
        }
        /**
         * Get the time MySQL formated date/time string for an action's (next) scheduled date.
         *
         * @param ActionScheduler_Action $action
         * @param DateTime $scheduled_date (optional)
         * @return string
         */
        protected function get_scheduled_date_string_local(\ActionScheduler_Action $action, \DateTime $scheduled_date = \NULL)
        {
        }
        /**
         * Validate that we could decode action arguments.
         *
         * @param mixed $args      The decoded arguments.
         * @param int   $action_id The action ID.
         *
         * @throws ActionScheduler_InvalidActionException When the decoded arguments are invalid.
         */
        protected function validate_args($args, $action_id)
        {
        }
        /**
         * Validate a ActionScheduler_Schedule object.
         *
         * @param mixed $schedule  The unserialized ActionScheduler_Schedule object.
         * @param int   $action_id The action ID.
         *
         * @throws ActionScheduler_InvalidActionException When the schedule is invalid.
         */
        protected function validate_schedule($schedule, $action_id)
        {
        }
        /**
         * InnoDB indexes have a maximum size of 767 bytes by default, which is only 191 characters with utf8mb4.
         *
         * Previously, AS wasn't concerned about args length, as we used the (unindex) post_content column. However,
         * with custom tables, we use an indexed VARCHAR column instead.
         *
         * @param  ActionScheduler_Action $action Action to be validated.
         * @throws InvalidArgumentException When json encoded args is too long.
         */
        protected function validate_action(\ActionScheduler_Action $action)
        {
        }
        /**
         * Cancel pending actions by hook.
         *
         * @since 3.0.0
         *
         * @param string $hook Hook name.
         *
         * @return void
         */
        public function cancel_actions_by_hook($hook)
        {
        }
        /**
         * Cancel pending actions by group.
         *
         * @since 3.0.0
         *
         * @param string $group Group slug.
         *
         * @return void
         */
        public function cancel_actions_by_group($group)
        {
        }
        /**
         * @return array
         */
        public function get_status_labels()
        {
        }
        /**
         * Check if there are any pending scheduled actions due to run.
         *
         * @param ActionScheduler_Action $action
         * @param DateTime $scheduled_date (optional)
         * @return string
         */
        public function has_pending_actions_due()
        {
        }
        /**
         * Callable initialization function optionally overridden in derived classes.
         */
        public function init()
        {
        }
        /**
         * Callable function to mark an action as migrated optionally overridden in derived classes.
         */
        public function mark_migrated($action_id)
        {
        }
        /**
         * @return ActionScheduler_Store
         */
        public static function instance()
        {
        }
    }
    /**
     * Class ActionScheduler_TimezoneHelper
     */
    abstract class ActionScheduler_TimezoneHelper
    {
        /**
         * Set a DateTime's timezone to the WordPress site's timezone, or a UTC offset
         * if no timezone string is available.
         *
         * @since  2.1.0
         *
         * @param DateTime $date
         * @return ActionScheduler_DateTime
         */
        public static function set_local_timezone(\DateTime $date)
        {
        }
        /**
         * Helper to retrieve the timezone string for a site until a WP core method exists
         * (see https://core.trac.wordpress.org/ticket/24730).
         *
         * Adapted from wc_timezone_string() and https://secure.php.net/manual/en/function.timezone-name-from-abbr.php#89155.
         *
         * If no timezone string is set, and its not possible to match the UTC offset set for the site to a timezone
         * string, then an empty string will be returned, and the UTC offset should be used to set a DateTime's
         * timezone.
         *
         * @since 2.1.0
         * @return string PHP timezone string for the site or empty if no timezone string is available.
         */
        protected static function get_local_timezone_string($reset = \false)
        {
        }
        /**
         * Get timezone offset in seconds.
         *
         * @since  2.1.0
         * @return float
         */
        protected static function get_local_timezone_offset()
        {
        }
        /**
         * @deprecated 2.1.0
         */
        public static function get_local_timezone($reset = \FALSE)
        {
        }
    }
    /**
     * Class ActionScheduler_Action
     */
    class ActionScheduler_Action
    {
        protected $hook = '';
        protected $args = array();
        /** @var ActionScheduler_Schedule */
        protected $schedule = \NULL;
        protected $group = '';
        /**
         * Priorities are conceptually similar to those used for regular WordPress actions.
         * Like those, a lower priority takes precedence over a higher priority and the default
         * is 10.
         *
         * Unlike regular WordPress actions, the priority of a scheduled action is strictly an
         * integer and should be kept within the bounds 0-255 (anything outside the bounds will
         * be brought back into the acceptable range).
         *
         * @var int
         */
        protected $priority = 10;
        public function __construct($hook, array $args = array(), \ActionScheduler_Schedule $schedule = \NULL, $group = '')
        {
        }
        /**
         * Executes the action.
         *
         * If no callbacks are registered, an exception will be thrown and the action will not be
         * fired. This is useful to help detect cases where the code responsible for setting up
         * a scheduled action no longer exists.
         *
         * @throws Exception If no callbacks are registered for this action.
         */
        public function execute()
        {
        }
        /**
         * @param string $hook
         */
        protected function set_hook($hook)
        {
        }
        public function get_hook()
        {
        }
        protected function set_schedule(\ActionScheduler_Schedule $schedule)
        {
        }
        /**
         * @return ActionScheduler_Schedule
         */
        public function get_schedule()
        {
        }
        protected function set_args(array $args)
        {
        }
        public function get_args()
        {
        }
        /**
         * @param string $group
         */
        protected function set_group($group)
        {
        }
        /**
         * @return string
         */
        public function get_group()
        {
        }
        /**
         * @return bool If the action has been finished
         */
        public function is_finished()
        {
        }
        /**
         * Sets the priority of the action.
         *
         * @param int $priority Priority level (lower is higher priority). Should be in the range 0-255.
         *
         * @return void
         */
        public function set_priority($priority)
        {
        }
        /**
         * Gets the action priority.
         *
         * @return int
         */
        public function get_priority()
        {
        }
    }
    /**
     * Class ActionScheduler_FinishedAction
     */
    class ActionScheduler_FinishedAction extends \ActionScheduler_Action
    {
        public function execute()
        {
        }
        public function is_finished()
        {
        }
    }
    /**
     * Class ActionScheduler_CanceledAction
     *
     * Stored action which was canceled and therefore acts like a finished action but should always return a null schedule,
     * regardless of schedule passed to its constructor.
     */
    class ActionScheduler_CanceledAction extends \ActionScheduler_FinishedAction
    {
        /**
         * @param string $hook
         * @param array $args
         * @param ActionScheduler_Schedule $schedule
         * @param string $group
         */
        public function __construct($hook, array $args = array(), \ActionScheduler_Schedule $schedule = \null, $group = '')
        {
        }
    }
    /**
     * Class ActionScheduler_NullAction
     */
    class ActionScheduler_NullAction extends \ActionScheduler_Action
    {
        public function __construct($hook = '', array $args = array(), \ActionScheduler_Schedule $schedule = \NULL)
        {
        }
        public function execute()
        {
        }
    }
    /**
     * Class ActionScheduler_DBLogger
     *
     * Action logs data table data store.
     *
     * @since 3.0.0
     */
    class ActionScheduler_DBLogger extends \ActionScheduler_Logger
    {
        /**
         * Add a record to an action log.
         *
         * @param int      $action_id Action ID.
         * @param string   $message Message to be saved in the log entry.
         * @param DateTime $date Timestamp of the log entry.
         *
         * @return int     The log entry ID.
         */
        public function log($action_id, $message, \DateTime $date = \null)
        {
        }
        /**
         * Retrieve an action log entry.
         *
         * @param int $entry_id Log entry ID.
         *
         * @return ActionScheduler_LogEntry
         */
        public function get_entry($entry_id)
        {
        }
        /**
         * Retrieve the an action's log entries from the database.
         *
         * @param int $action_id Action ID.
         *
         * @return ActionScheduler_LogEntry[]
         */
        public function get_logs($action_id)
        {
        }
        /**
         * Initialize the data store.
         *
         * @codeCoverageIgnore
         */
        public function init()
        {
        }
        /**
         * Delete the action logs for an action.
         *
         * @param int $action_id Action ID.
         */
        public function clear_deleted_action_logs($action_id)
        {
        }
        /**
         * Bulk add cancel action log entries.
         *
         * @param array $action_ids List of action ID.
         */
        public function bulk_log_cancel_actions($action_ids)
        {
        }
    }
    /**
     * Class ActionScheduler_DBStore
     *
     * Action data table data store.
     *
     * @since 3.0.0
     */
    class ActionScheduler_DBStore extends \ActionScheduler_Store
    {
        /** @var int */
        protected static $max_args_length = 8000;
        /** @var int */
        protected static $max_index_length = 191;
        /** @var array List of claim filters. */
        protected $claim_filters = ['group' => '', 'hooks' => '', 'exclude-groups' => ''];
        /**
         * Initialize the data store
         *
         * @codeCoverageIgnore
         */
        public function init()
        {
        }
        /**
         * Save an action, checks if this is a unique action before actually saving.
         *
         * @param ActionScheduler_Action $action         Action object.
         * @param \DateTime              $scheduled_date Optional schedule date. Default null.
         *
         * @return int                  Action ID.
         * @throws RuntimeException     Throws exception when saving the action fails.
         */
        public function save_unique_action(\ActionScheduler_Action $action, \DateTime $scheduled_date = \null)
        {
        }
        /**
         * Save an action. Can save duplicate action as well, prefer using `save_unique_action` instead.
         *
         * @param ActionScheduler_Action $action Action object.
         * @param \DateTime              $scheduled_date Optional schedule date. Default null.
         *
         * @return int Action ID.
         * @throws RuntimeException     Throws exception when saving the action fails.
         */
        public function save_action(\ActionScheduler_Action $action, \DateTime $scheduled_date = \null)
        {
        }
        /**
         * Generate a hash from json_encoded $args using MD5 as this isn't for security.
         *
         * @param string $args JSON encoded action args.
         * @return string
         */
        protected function hash_args($args)
        {
        }
        /**
         * Get action args query param value from action args.
         *
         * @param array $args Action args.
         * @return string
         */
        protected function get_args_for_query($args)
        {
        }
        /**
         * Get a group's ID based on its name/slug.
         *
         * @param string|array $slugs                The string name of a group, or names for several groups.
         * @param bool         $create_if_not_exists Whether to create the group if it does not already exist. Default, true - create the group.
         *
         * @return array The group IDs, if they exist or were successfully created. May be empty.
         */
        protected function get_group_ids($slugs, $create_if_not_exists = \true)
        {
        }
        /**
         * Create an action group.
         *
         * @param string $slug Group slug.
         *
         * @return int Group ID.
         */
        protected function create_group($slug)
        {
        }
        /**
         * Retrieve an action.
         *
         * @param int $action_id Action ID.
         *
         * @return ActionScheduler_Action
         */
        public function fetch_action($action_id)
        {
        }
        /**
         * Create a null action.
         *
         * @return ActionScheduler_NullAction
         */
        protected function get_null_action()
        {
        }
        /**
         * Create an action from a database record.
         *
         * @param object $data Action database record.
         *
         * @return ActionScheduler_Action|ActionScheduler_CanceledAction|ActionScheduler_FinishedAction
         */
        protected function make_action_from_db_record($data)
        {
        }
        /**
         * Returns the SQL statement to query (or count) actions.
         *
         * @since 3.3.0 $query['status'] accepts array of statuses instead of a single status.
         *
         * @param array  $query Filtering options.
         * @param string $select_or_count  Whether the SQL should select and return the IDs or just the row count.
         *
         * @return string SQL statement already properly escaped.
         * @throws InvalidArgumentException If the query is invalid.
         */
        protected function get_query_actions_sql(array $query, $select_or_count = 'select')
        {
        }
        /**
         * Query for action count or list of action IDs.
         *
         * @since 3.3.0 $query['status'] accepts array of statuses instead of a single status.
         *
         * @see ActionScheduler_Store::query_actions for $query arg usage.
         *
         * @param array  $query      Query filtering options.
         * @param string $query_type Whether to select or count the results. Defaults to select.
         *
         * @return string|array|null The IDs of actions matching the query. Null on failure.
         */
        public function query_actions($query = array(), $query_type = 'select')
        {
        }
        /**
         * Get a count of all actions in the store, grouped by status.
         *
         * @return array Set of 'status' => int $count pairs for statuses with 1 or more actions of that status.
         */
        public function action_counts()
        {
        }
        /**
         * Cancel an action.
         *
         * @param int $action_id Action ID.
         *
         * @return void
         * @throws \InvalidArgumentException If the action update failed.
         */
        public function cancel_action($action_id)
        {
        }
        /**
         * Cancel pending actions by hook.
         *
         * @since 3.0.0
         *
         * @param string $hook Hook name.
         *
         * @return void
         */
        public function cancel_actions_by_hook($hook)
        {
        }
        /**
         * Cancel pending actions by group.
         *
         * @param string $group Group slug.
         *
         * @return void
         */
        public function cancel_actions_by_group($group)
        {
        }
        /**
         * Bulk cancel actions.
         *
         * @since 3.0.0
         *
         * @param array $query_args Query parameters.
         */
        protected function bulk_cancel_actions($query_args)
        {
        }
        /**
         * Delete an action.
         *
         * @param int $action_id Action ID.
         * @throws \InvalidArgumentException If the action deletion failed.
         */
        public function delete_action($action_id)
        {
        }
        /**
         * Get the schedule date for an action.
         *
         * @param string $action_id Action ID.
         *
         * @return \DateTime The local date the action is scheduled to run, or the date that it ran.
         */
        public function get_date($action_id)
        {
        }
        /**
         * Get the GMT schedule date for an action.
         *
         * @param int $action_id Action ID.
         *
         * @throws \InvalidArgumentException If action cannot be identified.
         * @return \DateTime The GMT date the action is scheduled to run, or the date that it ran.
         */
        protected function get_date_gmt($action_id)
        {
        }
        /**
         * Stake a claim on actions.
         *
         * @param int       $max_actions Maximum number of action to include in claim.
         * @param \DateTime $before_date Jobs must be schedule before this date. Defaults to now.
         * @param array     $hooks Hooks to filter for.
         * @param string    $group Group to filter for.
         *
         * @return ActionScheduler_ActionClaim
         */
        public function stake_claim($max_actions = 10, \DateTime $before_date = \null, $hooks = array(), $group = '')
        {
        }
        /**
         * Generate a new action claim.
         *
         * @return int Claim ID.
         */
        protected function generate_claim_id()
        {
        }
        /**
         * Set a claim filter.
         *
         * @param string $filter_name Claim filter name.
         * @param mixed $filter_values Values to filter.
         * @return void
         */
        public function set_claim_filter($filter_name, $filter_values)
        {
        }
        /**
         * Get the claim filter value.
         *
         * @param string $filter_name Claim filter name.
         * @return mixed
         */
        public function get_claim_filter($filter_name)
        {
        }
        /**
         * Mark actions claimed.
         *
         * @param string    $claim_id Claim Id.
         * @param int       $limit Number of action to include in claim.
         * @param \DateTime $before_date Should use UTC timezone.
         * @param array     $hooks Hooks to filter for.
         * @param string    $group Group to filter for.
         *
         * @return int The number of actions that were claimed.
         * @throws \InvalidArgumentException Throws InvalidArgumentException if group doesn't exist.
         * @throws \RuntimeException Throws RuntimeException if unable to claim action.
         */
        protected function claim_actions($claim_id, $limit, \DateTime $before_date = \null, $hooks = array(), $group = '')
        {
        }
        /**
         * Get the number of active claims.
         *
         * @return int
         */
        public function get_claim_count()
        {
        }
        /**
         * Return an action's claim ID, as stored in the claim_id column.
         *
         * @param string $action_id Action ID.
         * @return mixed
         */
        public function get_claim_id($action_id)
        {
        }
        /**
         * Retrieve the action IDs of action in a claim.
         *
         * @param  int $claim_id Claim ID.
         * @return int[]
         */
        public function find_actions_by_claim_id($claim_id)
        {
        }
        /**
         * Release actions from a claim and delete the claim.
         *
         * @param ActionScheduler_ActionClaim $claim Claim object.
         */
        public function release_claim(\ActionScheduler_ActionClaim $claim)
        {
        }
        /**
         * Remove the claim from an action.
         *
         * @param int $action_id Action ID.
         *
         * @return void
         */
        public function unclaim_action($action_id)
        {
        }
        /**
         * Mark an action as failed.
         *
         * @param int $action_id Action ID.
         * @throws \InvalidArgumentException Throw an exception if action was not updated.
         */
        public function mark_failure($action_id)
        {
        }
        /**
         * Add execution message to action log.
         *
         * @throws Exception If the action status cannot be updated to self::STATUS_RUNNING ('in-progress').
         *
         * @param int $action_id Action ID.
         *
         * @return void
         */
        public function log_execution($action_id)
        {
        }
        /**
         * Mark an action as complete.
         *
         * @param int $action_id Action ID.
         *
         * @return void
         * @throws \InvalidArgumentException Throw an exception if action was not updated.
         */
        public function mark_complete($action_id)
        {
        }
        /**
         * Get an action's status.
         *
         * @param int $action_id Action ID.
         *
         * @return string
         * @throws \InvalidArgumentException Throw an exception if not status was found for action_id.
         * @throws \RuntimeException Throw an exception if action status could not be retrieved.
         */
        public function get_status($action_id)
        {
        }
    }
    /**
     * Class ActionScheduler_HybridStore
     *
     * A wrapper around multiple stores that fetches data from both.
     *
     * @since 3.0.0
     */
    class ActionScheduler_HybridStore extends \ActionScheduler_Store
    {
        const DEMARKATION_OPTION = 'action_scheduler_hybrid_store_demarkation';
        /**
         * ActionScheduler_HybridStore constructor.
         *
         * @param Config $config Migration config object.
         */
        public function __construct(\Action_Scheduler\Migration\Config $config = \null)
        {
        }
        /**
         * Initialize the table data store tables.
         *
         * @codeCoverageIgnore
         */
        public function init()
        {
        }
        /**
         * When the actions table is created, set its autoincrement
         * value to be one higher than the posts table to ensure that
         * there are no ID collisions.
         *
         * @param string $table_name
         * @param string $table_suffix
         *
         * @return void
         * @codeCoverageIgnore
         */
        public function set_autoincrement($table_name, $table_suffix)
        {
        }
        /**
         * Find the first matching action from the secondary store.
         * If it exists, migrate it to the primary store immediately.
         * After it migrates, the secondary store will logically contain
         * the next matching action, so return the result thence.
         *
         * @param string $hook
         * @param array  $params
         *
         * @return string
         */
        public function find_action($hook, $params = [])
        {
        }
        /**
         * Find actions matching the query in the secondary source first.
         * If any are found, migrate them immediately. Then the secondary
         * store will contain the canonical results.
         *
         * @param array $query
         * @param string $query_type Whether to select or count the results. Default, select.
         *
         * @return int[]
         */
        public function query_actions($query = [], $query_type = 'select')
        {
        }
        /**
         * Get a count of all actions in the store, grouped by status
         *
         * @return array Set of 'status' => int $count pairs for statuses with 1 or more actions of that status.
         */
        public function action_counts()
        {
        }
        /**
         * If any actions would have been claimed by the secondary store,
         * migrate them immediately, then ask the primary store for the
         * canonical claim.
         *
         * @param int           $max_actions
         * @param DateTime|null $before_date
         *
         * @return ActionScheduler_ActionClaim
         */
        public function stake_claim($max_actions = 10, \DateTime $before_date = \null, $hooks = array(), $group = '')
        {
        }
        /**
         * Save an action to the primary store.
         *
         * @param ActionScheduler_Action $action Action object to be saved.
         * @param DateTime               $date Optional. Schedule date. Default null.
         *
         * @return int The action ID
         */
        public function save_action(\ActionScheduler_Action $action, \DateTime $date = \null)
        {
        }
        /**
         * Retrieve an existing action whether migrated or not.
         *
         * @param int $action_id Action ID.
         */
        public function fetch_action($action_id)
        {
        }
        /**
         * Cancel an existing action whether migrated or not.
         *
         * @param int $action_id Action ID.
         */
        public function cancel_action($action_id)
        {
        }
        /**
         * Delete an existing action whether migrated or not.
         *
         * @param int $action_id Action ID.
         */
        public function delete_action($action_id)
        {
        }
        /**
         * Get the schedule date an existing action whether migrated or not.
         *
         * @param int $action_id Action ID.
         */
        public function get_date($action_id)
        {
        }
        /**
         * Mark an existing action as failed whether migrated or not.
         *
         * @param int $action_id Action ID.
         */
        public function mark_failure($action_id)
        {
        }
        /**
         * Log the execution of an existing action whether migrated or not.
         *
         * @param int $action_id Action ID.
         */
        public function log_execution($action_id)
        {
        }
        /**
         * Mark an existing action complete whether migrated or not.
         *
         * @param int $action_id Action ID.
         */
        public function mark_complete($action_id)
        {
        }
        /**
         * Get an existing action status whether migrated or not.
         *
         * @param int $action_id Action ID.
         */
        public function get_status($action_id)
        {
        }
        /**
         * Return which store an action is stored in.
         *
         * @param int  $action_id ID of the action.
         * @param bool $primary_first Optional flag indicating search the primary store first.
         * @return ActionScheduler_Store
         */
        protected function get_store_from_action_id($action_id, $primary_first = \false)
        {
        }
        /* * * * * * * * * * * * * * * * * * * * * * * * * * *
         * All claim-related functions should operate solely
         * on the primary store.
         * * * * * * * * * * * * * * * * * * * * * * * * * * */
        /**
         * Get the claim count from the table data store.
         */
        public function get_claim_count()
        {
        }
        /**
         * Retrieve the claim ID for an action from the table data store.
         *
         * @param int $action_id Action ID.
         */
        public function get_claim_id($action_id)
        {
        }
        /**
         * Release a claim in the table data store.
         *
         * @param ActionScheduler_ActionClaim $claim Claim object.
         */
        public function release_claim(\ActionScheduler_ActionClaim $claim)
        {
        }
        /**
         * Release claims on an action in the table data store.
         *
         * @param int $action_id Action ID.
         */
        public function unclaim_action($action_id)
        {
        }
        /**
         * Retrieve a list of action IDs by claim.
         *
         * @param int $claim_id Claim ID.
         */
        public function find_actions_by_claim_id($claim_id)
        {
        }
    }
    /**
     * Class ActionScheduler_wpCommentLogger
     */
    class ActionScheduler_wpCommentLogger extends \ActionScheduler_Logger
    {
        const AGENT = 'ActionScheduler';
        const TYPE = 'action_log';
        /**
         * @param string $action_id
         * @param string $message
         * @param DateTime $date
         *
         * @return string The log entry ID
         */
        public function log($action_id, $message, \DateTime $date = \NULL)
        {
        }
        protected function create_wp_comment($action_id, $message, \DateTime $date)
        {
        }
        /**
         * @param string $entry_id
         *
         * @return ActionScheduler_LogEntry
         */
        public function get_entry($entry_id)
        {
        }
        /**
         * @param string $action_id
         *
         * @return ActionScheduler_LogEntry[]
         */
        public function get_logs($action_id)
        {
        }
        protected function get_comment($comment_id)
        {
        }
        /**
         * @param WP_Comment_Query $query
         */
        public function filter_comment_queries($query)
        {
        }
        /**
         * @param array $clauses
         * @param WP_Comment_Query $query
         *
         * @return array
         */
        public function filter_comment_query_clauses($clauses, $query)
        {
        }
        /**
         * Make sure Action Scheduler logs are excluded from comment feeds, which use WP_Query, not
         * the WP_Comment_Query class handled by @see self::filter_comment_queries().
         *
         * @param string $where
         * @param WP_Query $query
         *
         * @return string
         */
        public function filter_comment_feed($where, $query)
        {
        }
        /**
         * Return a SQL clause to exclude Action Scheduler comments.
         *
         * @return string
         */
        protected function get_where_clause()
        {
        }
        /**
         * Remove action log entries from wp_count_comments()
         *
         * @param array $stats
         * @param int $post_id
         *
         * @return object
         */
        public function filter_comment_count($stats, $post_id)
        {
        }
        /**
         * Retrieve the comment counts from our cache, or the database if the cached version isn't set.
         *
         * @return object
         */
        protected function get_comment_count()
        {
        }
        /**
         * Delete comment count cache whenever there is new comment or the status of a comment changes. Cache
         * will be regenerated next time ActionScheduler_wpCommentLogger::filter_comment_count() is called.
         */
        public function delete_comment_count_cache()
        {
        }
        /**
         * @codeCoverageIgnore
         */
        public function init()
        {
        }
        public function disable_comment_counting()
        {
        }
        public function enable_comment_counting()
        {
        }
    }
    /**
     * Class ActionScheduler_wpPostStore
     */
    class ActionScheduler_wpPostStore extends \ActionScheduler_Store
    {
        const POST_TYPE = 'scheduled-action';
        const GROUP_TAXONOMY = 'action-group';
        const SCHEDULE_META_KEY = '_action_manager_schedule';
        const DEPENDENCIES_MET = 'as-post-store-dependencies-met';
        /**
         * Local Timezone.
         *
         * @var DateTimeZone
         */
        protected $local_timezone = \null;
        /**
         * Save action.
         *
         * @param ActionScheduler_Action $action Scheduled Action.
         * @param DateTime               $scheduled_date Scheduled Date.
         *
         * @throws RuntimeException Throws an exception if the action could not be saved.
         * @return int
         */
        public function save_action(\ActionScheduler_Action $action, \DateTime $scheduled_date = \null)
        {
        }
        /**
         * Create post array.
         *
         * @param ActionScheduler_Action $action Scheduled Action.
         * @param DateTime               $scheduled_date Scheduled Date.
         *
         * @return array Returns an array of post data.
         */
        protected function create_post_array(\ActionScheduler_Action $action, \DateTime $scheduled_date = \null)
        {
        }
        /**
         * Save post array.
         *
         * @param array $post_array Post array.
         * @return int Returns the post ID.
         * @throws RuntimeException Throws an exception if the action could not be saved.
         */
        protected function save_post_array($post_array)
        {
        }
        /**
         * Filter insert post data.
         *
         * @param array $postdata Post data to filter.
         *
         * @return array
         */
        public function filter_insert_post_data($postdata)
        {
        }
        /**
         * Create a (probably unique) post name for scheduled actions in a more performant manner than wp_unique_post_slug().
         *
         * When an action's post status is transitioned to something other than 'draft', 'pending' or 'auto-draft, like 'publish'
         * or 'failed' or 'trash', WordPress will find a unique slug (stored in post_name column) using the wp_unique_post_slug()
         * function. This is done to ensure URL uniqueness. The approach taken by wp_unique_post_slug() is to iterate over existing
         * post_name values that match, and append a number 1 greater than the largest. This makes sense when manually creating a
         * post from the Edit Post screen. It becomes a bottleneck when automatically processing thousands of actions, with a
         * database containing thousands of related post_name values.
         *
         * WordPress 5.1 introduces the 'pre_wp_unique_post_slug' filter for plugins to address this issue.
         *
         * We can short-circuit WordPress's wp_unique_post_slug() approach using the 'pre_wp_unique_post_slug' filter. This
         * method is available to be used as a callback on that filter. It provides a more scalable approach to generating a
         * post_name/slug that is probably unique. Because Action Scheduler never actually uses the post_name field, or an
         * action's slug, being probably unique is good enough.
         *
         * For more backstory on this issue, see:
         * - https://github.com/woocommerce/action-scheduler/issues/44 and
         * - https://core.trac.wordpress.org/ticket/21112
         *
         * @param string $override_slug Short-circuit return value.
         * @param string $slug          The desired slug (post_name).
         * @param int    $post_ID       Post ID.
         * @param string $post_status   The post status.
         * @param string $post_type     Post type.
         * @return string
         */
        public function set_unique_post_slug($override_slug, $slug, $post_ID, $post_status, $post_type)
        {
        }
        /**
         * Save post schedule.
         *
         * @param int    $post_id  Post ID of the scheduled action.
         * @param string $schedule Schedule to save.
         *
         * @return void
         */
        protected function save_post_schedule($post_id, $schedule)
        {
        }
        /**
         * Save action group.
         *
         * @param int    $post_id Post ID.
         * @param string $group   Group to save.
         * @return void
         */
        protected function save_action_group($post_id, $group)
        {
        }
        /**
         * Fetch actions.
         *
         * @param int $action_id Action ID.
         * @return object
         */
        public function fetch_action($action_id)
        {
        }
        /**
         * Get post.
         *
         * @param string $action_id - Action ID.
         * @return WP_Post|null
         */
        protected function get_post($action_id)
        {
        }
        /**
         * Get NULL action.
         *
         * @return ActionScheduler_NullAction
         */
        protected function get_null_action()
        {
        }
        /**
         * Make action from post.
         *
         * @param WP_Post $post Post object.
         * @return WP_Post
         */
        protected function make_action_from_post($post)
        {
        }
        /**
         * Get action status by post status.
         *
         * @param string $post_status Post status.
         *
         * @throws InvalidArgumentException Throw InvalidArgumentException if $post_status not in known status fields returned by $this->get_status_labels().
         * @return string
         */
        protected function get_action_status_by_post_status($post_status)
        {
        }
        /**
         * Get post status by action status.
         *
         * @param string $action_status Action status.
         *
         * @throws InvalidArgumentException Throws InvalidArgumentException if $post_status not in known status fields returned by $this->get_status_labels().
         * @return string
         */
        protected function get_post_status_by_action_status($action_status)
        {
        }
        /**
         * Returns the SQL statement to query (or count) actions.
         *
         * @param array  $query            - Filtering options.
         * @param string $select_or_count  - Whether the SQL should select and return the IDs or just the row count.
         *
         * @throws InvalidArgumentException - Throw InvalidArgumentException if $select_or_count not count or select.
         * @return string SQL statement. The returned SQL is already properly escaped.
         */
        protected function get_query_actions_sql(array $query, $select_or_count = 'select')
        {
        }
        /**
         * Query for action count or list of action IDs.
         *
         * @since 3.3.0 $query['status'] accepts array of statuses instead of a single status.
         *
         * @see ActionScheduler_Store::query_actions for $query arg usage.
         *
         * @param array  $query      Query filtering options.
         * @param string $query_type Whether to select or count the results. Defaults to select.
         *
         * @return string|array|null The IDs of actions matching the query. Null on failure.
         */
        public function query_actions($query = array(), $query_type = 'select')
        {
        }
        /**
         * Get a count of all actions in the store, grouped by status
         *
         * @return array
         */
        public function action_counts()
        {
        }
        /**
         * Cancel action.
         *
         * @param int $action_id Action ID.
         *
         * @throws InvalidArgumentException If $action_id is not identified.
         */
        public function cancel_action($action_id)
        {
        }
        /**
         * Delete action.
         *
         * @param int $action_id Action ID.
         * @return void
         * @throws InvalidArgumentException If action is not identified.
         */
        public function delete_action($action_id)
        {
        }
        /**
         * Get date for claim id.
         *
         * @param int $action_id Action ID.
         * @return ActionScheduler_DateTime The date the action is schedule to run, or the date that it ran.
         */
        public function get_date($action_id)
        {
        }
        /**
         * Get Date GMT.
         *
         * @param int $action_id Action ID.
         *
         * @throws InvalidArgumentException If $action_id is not identified.
         * @return ActionScheduler_DateTime The date the action is schedule to run, or the date that it ran.
         */
        public function get_date_gmt($action_id)
        {
        }
        /**
         * Stake claim.
         *
         * @param int      $max_actions Maximum number of actions.
         * @param DateTime $before_date Jobs must be schedule before this date. Defaults to now.
         * @param array    $hooks       Claim only actions with a hook or hooks.
         * @param string   $group       Claim only actions in the given group.
         *
         * @return ActionScheduler_ActionClaim
         * @throws RuntimeException When there is an error staking a claim.
         * @throws InvalidArgumentException When the given group is not valid.
         */
        public function stake_claim($max_actions = 10, \DateTime $before_date = \null, $hooks = array(), $group = '')
        {
        }
        /**
         * Get claim count.
         *
         * @return int
         */
        public function get_claim_count()
        {
        }
        /**
         * Generate claim id.
         *
         * @return string
         */
        protected function generate_claim_id()
        {
        }
        /**
         * Claim actions.
         *
         * @param string   $claim_id    Claim ID.
         * @param int      $limit       Limit.
         * @param DateTime $before_date Should use UTC timezone.
         * @param array    $hooks       Claim only actions with a hook or hooks.
         * @param string   $group       Claim only actions in the given group.
         *
         * @return int The number of actions that were claimed.
         * @throws RuntimeException  When there is a database error.
         */
        protected function claim_actions($claim_id, $limit, \DateTime $before_date = \null, $hooks = array(), $group = '')
        {
        }
        /**
         * Get IDs of actions within a certain group and up to a certain date/time.
         *
         * @param string   $group The group to use in finding actions.
         * @param int      $limit The number of actions to retrieve.
         * @param DateTime $date  DateTime object representing cutoff time for actions. Actions retrieved will be
         *                        up to and including this DateTime.
         *
         * @return array IDs of actions in the appropriate group and before the appropriate time.
         * @throws InvalidArgumentException When the group does not exist.
         */
        protected function get_actions_by_group($group, $limit, \DateTime $date)
        {
        }
        /**
         * Find actions by claim ID.
         *
         * @param string $claim_id Claim ID.
         * @return array
         */
        public function find_actions_by_claim_id($claim_id)
        {
        }
        /**
         * Release claim.
         *
         * @param ActionScheduler_ActionClaim $claim Claim object to release.
         * @return void
         * @throws RuntimeException When the claim is not unlocked.
         */
        public function release_claim(\ActionScheduler_ActionClaim $claim)
        {
        }
        /**
         * Unclaim action.
         *
         * @param string $action_id Action ID.
         * @throws RuntimeException When unable to unlock claim on action ID.
         */
        public function unclaim_action($action_id)
        {
        }
        /**
         * Mark failure on action.
         *
         * @param int $action_id Action ID.
         *
         * @return void
         * @throws RuntimeException When unable to mark failure on action ID.
         */
        public function mark_failure($action_id)
        {
        }
        /**
         * Return an action's claim ID, as stored in the post password column
         *
         * @param int $action_id Action ID.
         * @return mixed
         */
        public function get_claim_id($action_id)
        {
        }
        /**
         * Return an action's status, as stored in the post status column
         *
         * @param int $action_id Action ID.
         *
         * @return mixed
         * @throws InvalidArgumentException When the action ID is invalid.
         */
        public function get_status($action_id)
        {
        }
        /**
         * Log Execution.
         *
         * @throws Exception If the action status cannot be updated to self::STATUS_RUNNING ('in-progress').
         *
         * @param string $action_id Action ID.
         */
        public function log_execution($action_id)
        {
        }
        /**
         * Record that an action was completed.
         *
         * @param string $action_id ID of the completed action.
         *
         * @throws InvalidArgumentException When the action ID is invalid.
         * @throws RuntimeException         When there was an error executing the action.
         */
        public function mark_complete($action_id)
        {
        }
        /**
         * Mark action as migrated when there is an error deleting the action.
         *
         * @param int $action_id Action ID.
         */
        public function mark_migrated($action_id)
        {
        }
        /**
         * Determine whether the post store can be migrated.
         *
         * @param [type] $setting - Setting value.
         * @return bool
         */
        public function migration_dependencies_met($setting)
        {
        }
        /**
         * InnoDB indexes have a maximum size of 767 bytes by default, which is only 191 characters with utf8mb4.
         *
         * Previously, AS wasn't concerned about args length, as we used the (unindex) post_content column. However,
         * as we prepare to move to custom tables, and can use an indexed VARCHAR column instead, we want to warn
         * developers of this impending requirement.
         *
         * @param ActionScheduler_Action $action Action object.
         */
        protected function validate_action(\ActionScheduler_Action $action)
        {
        }
        /**
         * (@codeCoverageIgnore)
         */
        public function init()
        {
        }
    }
    /**
     * Class ActionScheduler_wpPostStore_PostStatusRegistrar
     * @codeCoverageIgnore
     */
    class ActionScheduler_wpPostStore_PostStatusRegistrar
    {
        public function register()
        {
        }
        /**
         * Build the args array for the post type definition
         *
         * @return array
         */
        protected function post_status_args()
        {
        }
        /**
         * Build the args array for the post type definition
         *
         * @return array
         */
        protected function post_status_failed_labels()
        {
        }
        /**
         * Build the args array for the post type definition
         *
         * @return array
         */
        protected function post_status_running_labels()
        {
        }
    }
    /**
     * Class ActionScheduler_wpPostStore_PostTypeRegistrar
     * @codeCoverageIgnore
     */
    class ActionScheduler_wpPostStore_PostTypeRegistrar
    {
        public function register()
        {
        }
        /**
         * Build the args array for the post type definition
         *
         * @return array
         */
        protected function post_type_args()
        {
        }
    }
    /**
     * Class ActionScheduler_wpPostStore_TaxonomyRegistrar
     * @codeCoverageIgnore
     */
    class ActionScheduler_wpPostStore_TaxonomyRegistrar
    {
        public function register()
        {
        }
        protected function taxonomy_args()
        {
        }
    }
}
namespace Action_Scheduler\Migration {
    /**
     * Class ActionMigrator
     *
     * @package Action_Scheduler\Migration
     *
     * @since 3.0.0
     *
     * @codeCoverageIgnore
     */
    class ActionMigrator
    {
        /**
         * ActionMigrator constructor.
         *
         * @param ActionScheduler_Store $source_store Source store object.
         * @param ActionScheduler_Store $destination_store Destination store object.
         * @param LogMigrator           $log_migrator Log migrator object.
         */
        public function __construct(\ActionScheduler_Store $source_store, \ActionScheduler_Store $destination_store, \Action_Scheduler\Migration\LogMigrator $log_migrator)
        {
        }
        /**
         * Migrate an action.
         *
         * @param int $source_action_id Action ID.
         *
         * @return int 0|new action ID
         */
        public function migrate($source_action_id)
        {
        }
    }
}
namespace {
    /**
     * Class ActionScheduler_DBStoreMigrator
     *
     * A  class for direct saving of actions to the table data store during migration.
     *
     * @since 3.0.0
     */
    class ActionScheduler_DBStoreMigrator extends \ActionScheduler_DBStore
    {
        /**
         * Save an action with optional last attempt date.
         *
         * Normally, saving an action sets its attempted date to 0000-00-00 00:00:00 because when an action is first saved,
         * it can't have been attempted yet, but migrated completed actions will have an attempted date, so we need to save
         * that when first saving the action.
         *
         * @param ActionScheduler_Action $action
         * @param \DateTime $scheduled_date Optional date of the first instance to store.
         * @param \DateTime $last_attempt_date Optional date the action was last attempted.
         *
         * @return string The action ID
         * @throws \RuntimeException When the action is not saved.
         */
        public function save_action(\ActionScheduler_Action $action, \DateTime $scheduled_date = \null, \DateTime $last_attempt_date = \null)
        {
        }
    }
}
namespace Action_Scheduler\Migration {
    /**
     * Class BatchFetcher
     *
     * @package Action_Scheduler\Migration
     *
     * @since 3.0.0
     *
     * @codeCoverageIgnore
     */
    class BatchFetcher
    {
        /**
         * BatchFetcher constructor.
         *
         * @param ActionScheduler_Store $source_store Source store object.
         */
        public function __construct(\ActionScheduler_Store $source_store)
        {
        }
        /**
         * Retrieve a list of actions.
         *
         * @param int $count The number of actions to retrieve
         *
         * @return int[] A list of action IDs
         */
        public function fetch($count = 10)
        {
        }
    }
    /**
     * Class Config
     *
     * @package Action_Scheduler\Migration
     *
     * @since 3.0.0
     *
     * A config builder for the ActionScheduler\Migration\Runner class
     */
    class Config
    {
        /**
         * Config constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get the configured source store.
         *
         * @return ActionScheduler_Store
         */
        public function get_source_store()
        {
        }
        /**
         * Set the configured source store.
         *
         * @param ActionScheduler_Store $store Source store object.
         */
        public function set_source_store(\ActionScheduler_Store $store)
        {
        }
        /**
         * Get the configured source loger.
         *
         * @return ActionScheduler_Logger
         */
        public function get_source_logger()
        {
        }
        /**
         * Set the configured source logger.
         *
         * @param ActionScheduler_Logger $logger
         */
        public function set_source_logger(\ActionScheduler_Logger $logger)
        {
        }
        /**
         * Get the configured destination store.
         *
         * @return ActionScheduler_Store
         */
        public function get_destination_store()
        {
        }
        /**
         * Set the configured destination store.
         *
         * @param ActionScheduler_Store $store
         */
        public function set_destination_store(\ActionScheduler_Store $store)
        {
        }
        /**
         * Get the configured destination logger.
         *
         * @return ActionScheduler_Logger
         */
        public function get_destination_logger()
        {
        }
        /**
         * Set the configured destination logger.
         *
         * @param ActionScheduler_Logger $logger
         */
        public function set_destination_logger(\ActionScheduler_Logger $logger)
        {
        }
        /**
         * Get flag indicating whether it's a dry run.
         *
         * @return bool
         */
        public function get_dry_run()
        {
        }
        /**
         * Set flag indicating whether it's a dry run.
         *
         * @param bool $dry_run
         */
        public function set_dry_run($dry_run)
        {
        }
        /**
         * Get progress bar object.
         *
         * @return ActionScheduler\WPCLI\ProgressBar
         */
        public function get_progress_bar()
        {
        }
        /**
         * Set progress bar object.
         *
         * @param ActionScheduler\WPCLI\ProgressBar $progress_bar
         */
        public function set_progress_bar(\Action_Scheduler\WP_CLI\ProgressBar $progress_bar)
        {
        }
    }
    /**
     * Class Controller
     *
     * The main plugin/initialization class for migration to custom tables.
     *
     * @package Action_Scheduler\Migration
     *
     * @since 3.0.0
     *
     * @codeCoverageIgnore
     */
    class Controller
    {
        /**
         * Controller constructor.
         *
         * @param Scheduler $migration_scheduler Migration scheduler object.
         */
        protected function __construct(\Action_Scheduler\Migration\Scheduler $migration_scheduler)
        {
        }
        /**
         * Set the action store class name.
         *
         * @param string $class Classname of the store class.
         *
         * @return string
         */
        public function get_store_class($class)
        {
        }
        /**
         * Set the action logger class name.
         *
         * @param string $class Classname of the logger class.
         *
         * @return string
         */
        public function get_logger_class($class)
        {
        }
        /**
         * Get flag indicating whether a custom datastore is in use.
         *
         * @return bool
         */
        public function has_custom_datastore()
        {
        }
        /**
         * Set up the background migration process.
         *
         * @return void
         */
        public function schedule_migration()
        {
        }
        /**
         * Get the default migration config object
         *
         * @return ActionScheduler\Migration\Config
         */
        public function get_migration_config_object()
        {
        }
        /**
         * Hook dashboard migration notice.
         */
        public function hook_admin_notices()
        {
        }
        /**
         * Show a dashboard notice that migration is in progress.
         */
        public function display_migration_notice()
        {
        }
        /**
         * Possibly hook the migration scheduler action.
         *
         * @author Jeremy Pry
         */
        public function maybe_hook_migration()
        {
        }
        /**
         * Allow datastores to enable migration to AS tables.
         */
        public function allow_migration()
        {
        }
        /**
         * Proceed with the migration if the dependencies have been met.
         */
        public static function init()
        {
        }
        /**
         * Singleton factory.
         */
        public static function instance()
        {
        }
    }
    /**
     * Class DryRun_ActionMigrator
     *
     * @package Action_Scheduler\Migration
     *
     * @since 3.0.0
     *
     * @codeCoverageIgnore
     */
    class DryRun_ActionMigrator extends \Action_Scheduler\Migration\ActionMigrator
    {
        /**
         * Simulate migrating an action.
         *
         * @param int $source_action_id Action ID.
         *
         * @return int
         */
        public function migrate($source_action_id)
        {
        }
    }
    /**
     * Class LogMigrator
     *
     * @package Action_Scheduler\Migration
     *
     * @since 3.0.0
     *
     * @codeCoverageIgnore
     */
    class LogMigrator
    {
        /**
         * ActionMigrator constructor.
         *
         * @param ActionScheduler_Logger $source_logger Source logger object.
         * @param ActionScheduler_Logger $destination_Logger Destination logger object.
         */
        public function __construct(\ActionScheduler_Logger $source_logger, \ActionScheduler_Logger $destination_Logger)
        {
        }
        /**
         * Migrate an action log.
         *
         * @param int $source_action_id Source logger object.
         * @param int $destination_action_id Destination logger object.
         */
        public function migrate($source_action_id, $destination_action_id)
        {
        }
    }
    /**
     * Class DryRun_LogMigrator
     *
     * @package Action_Scheduler\Migration
     *
     * @codeCoverageIgnore
     */
    class DryRun_LogMigrator extends \Action_Scheduler\Migration\LogMigrator
    {
        /**
         * Simulate migrating an action log.
         *
         * @param int $source_action_id Source logger object.
         * @param int $destination_action_id Destination logger object.
         */
        public function migrate($source_action_id, $destination_action_id)
        {
        }
    }
    /**
     * Class Runner
     *
     * @package Action_Scheduler\Migration
     *
     * @since 3.0.0
     *
     * @codeCoverageIgnore
     */
    class Runner
    {
        /**
         * Runner constructor.
         *
         * @param Config $config Migration configuration object.
         */
        public function __construct(\Action_Scheduler\Migration\Config $config)
        {
        }
        /**
         * Run migration batch.
         *
         * @param int $batch_size Optional batch size. Default 10.
         *
         * @return int Size of batch processed.
         */
        public function run($batch_size = 10)
        {
        }
        /**
         * Migration a batch of actions.
         *
         * @param array $action_ids List of action IDs to migrate.
         */
        public function migrate_actions(array $action_ids)
        {
        }
        /**
         * Initialize destination store and logger.
         */
        public function init_destination()
        {
        }
    }
    /**
     * Class Scheduler
     *
     * @package Action_Scheduler\WP_CLI
     *
     * @since 3.0.0
     *
     * @codeCoverageIgnore
     */
    class Scheduler
    {
        /** Migration action hook. */
        const HOOK = 'action_scheduler/migration_hook';
        /** Migration action group. */
        const GROUP = 'action-scheduler-migration';
        /**
         * Set up the callback for the scheduled job.
         */
        public function hook()
        {
        }
        /**
         * Remove the callback for the scheduled job.
         */
        public function unhook()
        {
        }
        /**
         * The migration callback.
         */
        public function run_migration()
        {
        }
        /**
         * Mark the migration complete.
         */
        public function mark_complete()
        {
        }
        /**
         * Get a flag indicating whether the migration is scheduled.
         *
         * @return bool Whether there is a pending action in the store to handle the migration
         */
        public function is_migration_scheduled()
        {
        }
        /**
         * Schedule the migration.
         *
         * @param int $when Optional timestamp to run the next migration batch. Defaults to now.
         *
         * @return string The action ID
         */
        public function schedule_migration($when = 0)
        {
        }
        /**
         * Remove the scheduled migration action.
         */
        public function unschedule_migration()
        {
        }
    }
}
namespace {
    /**
     * Class ActionScheduler_SimpleSchedule
     */
    class ActionScheduler_SimpleSchedule extends \ActionScheduler_Abstract_Schedule
    {
        /**
         * @param DateTime $after
         *
         * @return DateTime|null
         */
        public function calculate_next(\DateTime $after)
        {
        }
        /**
         * @return bool
         */
        public function is_recurring()
        {
        }
        /**
         * Serialize schedule with data required prior to AS 3.0.0
         *
         * Prior to Action Scheduler 3.0.0, schedules used different property names to refer
         * to equivalent data. For example, ActionScheduler_IntervalSchedule::start_timestamp
         * was the same as ActionScheduler_SimpleSchedule::timestamp. Action Scheduler 3.0.0
         * aligned properties and property names for better inheritance. To guard against the
         * scheduled date for single actions always being seen as "now" if downgrading to
         * Action Scheduler < 3.0.0, we need to also store the data with the old property names
         * so if it's unserialized in AS < 3.0, the schedule doesn't end up with a null recurrence.
         *
         * @return array
         */
        public function __sleep()
        {
        }
        /**
         * Unserialize recurring schedules serialized/stored prior to AS 3.0.0
         *
         * Prior to Action Scheduler 3.0.0, schedules used different property names to refer
         * to equivalent data. For example, ActionScheduler_IntervalSchedule::start_timestamp
         * was the same as ActionScheduler_SimpleSchedule::timestamp. Action Scheduler 3.0.0
         * aligned properties and property names for better inheritance. To maintain backward
         * compatibility with schedules serialized and stored prior to 3.0, we need to correctly
         * map the old property names with matching visibility.
         */
        public function __wakeup()
        {
        }
    }
    /**
     * Class ActionScheduler_SimpleSchedule
     */
    class ActionScheduler_CanceledSchedule extends \ActionScheduler_SimpleSchedule
    {
        /**
         * @param DateTime $after
         *
         * @return DateTime|null
         */
        public function calculate_next(\DateTime $after)
        {
        }
        /**
         * Cancelled actions should never have a next schedule, even if get_next()
         * is called with $after < $this->scheduled_date.
         *
         * @param DateTime $after
         * @return DateTime|null
         */
        public function get_next(\DateTime $after)
        {
        }
        /**
         * @return bool
         */
        public function is_recurring()
        {
        }
        /**
         * Unserialize recurring schedules serialized/stored prior to AS 3.0.0
         *
         * Prior to Action Scheduler 3.0.0, schedules used different property names to refer
         * to equivalent data. For example, ActionScheduler_IntervalSchedule::start_timestamp
         * was the same as ActionScheduler_SimpleSchedule::timestamp. Action Scheduler 3.0.0
         * aligned properties and property names for better inheritance. To maintain backward
         * compatibility with schedules serialized and stored prior to 3.0, we need to correctly
         * map the old property names with matching visibility.
         */
        public function __wakeup()
        {
        }
    }
    /**
     * Class ActionScheduler_CronSchedule
     */
    class ActionScheduler_CronSchedule extends \ActionScheduler_Abstract_RecurringSchedule implements \ActionScheduler_Schedule
    {
        /**
         * Wrapper for parent constructor to accept a cron expression string and map it to a CronExpression for this
         * objects $recurrence property.
         *
         * @param DateTime $start The date & time to run the action at or after. If $start aligns with the CronSchedule passed via $recurrence, it will be used. If it does not align, the first matching date after it will be used.
         * @param CronExpression|string $recurrence The CronExpression used to calculate the schedule's next instance.
         * @param DateTime|null $first (Optional) The date & time the first instance of this interval schedule ran. Default null, meaning this is the first instance.
         */
        public function __construct(\DateTime $start, $recurrence, \DateTime $first = \null)
        {
        }
        /**
         * Calculate when an instance of this schedule would start based on a given
         * date & time using its the CronExpression.
         *
         * @param DateTime $after
         * @return DateTime
         */
        protected function calculate_next(\DateTime $after)
        {
        }
        /**
         * @return string
         */
        public function get_recurrence()
        {
        }
        /**
         * Serialize cron schedules with data required prior to AS 3.0.0
         *
         * Prior to Action Scheduler 3.0.0, reccuring schedules used different property names to
         * refer to equivalent data. For example, ActionScheduler_IntervalSchedule::start_timestamp
         * was the same as ActionScheduler_SimpleSchedule::timestamp. Action Scheduler 3.0.0
         * aligned properties and property names for better inheritance. To guard against the
         * possibility of infinite loops if downgrading to Action Scheduler < 3.0.0, we need to
         * also store the data with the old property names so if it's unserialized in AS < 3.0,
         * the schedule doesn't end up with a null recurrence.
         *
         * @return array
         */
        public function __sleep()
        {
        }
        /**
         * Unserialize cron schedules serialized/stored prior to AS 3.0.0
         *
         * For more background, @see ActionScheduler_Abstract_RecurringSchedule::__wakeup().
         */
        public function __wakeup()
        {
        }
    }
    /**
     * Class ActionScheduler_IntervalSchedule
     */
    class ActionScheduler_IntervalSchedule extends \ActionScheduler_Abstract_RecurringSchedule implements \ActionScheduler_Schedule
    {
        /**
         * Calculate when this schedule should start after a given date & time using
         * the number of seconds between recurrences.
         *
         * @param DateTime $after
         * @return DateTime
         */
        protected function calculate_next(\DateTime $after)
        {
        }
        /**
         * @return int
         */
        public function interval_in_seconds()
        {
        }
        /**
         * Serialize interval schedules with data required prior to AS 3.0.0
         *
         * Prior to Action Scheduler 3.0.0, reccuring schedules used different property names to
         * refer to equivalent data. For example, ActionScheduler_IntervalSchedule::start_timestamp
         * was the same as ActionScheduler_SimpleSchedule::timestamp. Action Scheduler 3.0.0
         * aligned properties and property names for better inheritance. To guard against the
         * possibility of infinite loops if downgrading to Action Scheduler < 3.0.0, we need to
         * also store the data with the old property names so if it's unserialized in AS < 3.0,
         * the schedule doesn't end up with a null/false/0 recurrence.
         *
         * @return array
         */
        public function __sleep()
        {
        }
        /**
         * Unserialize interval schedules serialized/stored prior to AS 3.0.0
         *
         * For more background, @see ActionScheduler_Abstract_RecurringSchedule::__wakeup().
         */
        public function __wakeup()
        {
        }
    }
    /**
     * Class ActionScheduler_NullSchedule
     */
    class ActionScheduler_NullSchedule extends \ActionScheduler_SimpleSchedule
    {
        /** @var DateTime|null */
        protected $scheduled_date;
        /**
         * Make the $date param optional and default to null.
         *
         * @param null $date The date & time to run the action.
         */
        public function __construct(\DateTime $date = \null)
        {
        }
        /**
         * This schedule has no scheduled DateTime, so we need to override the parent __sleep()
         * @return array
         */
        public function __sleep()
        {
        }
        public function __wakeup()
        {
        }
    }
    /**
     * Class ActionScheduler_LoggerSchema
     *
     * @codeCoverageIgnore
     *
     * Creates a custom table for storing action logs
     */
    class ActionScheduler_LoggerSchema extends \ActionScheduler_Abstract_Schema
    {
        const LOG_TABLE = 'actionscheduler_logs';
        /**
         * @var int Increment this value to trigger a schema update.
         */
        protected $schema_version = 3;
        public function __construct()
        {
        }
        /**
         * Performs additional setup work required to support this schema.
         */
        public function init()
        {
        }
        protected function get_table_definition($table)
        {
        }
        /**
         * Update the logs table schema, allowing datetime fields to be NULL.
         *
         * This is needed because the NOT NULL constraint causes a conflict with some versions of MySQL
         * configured with sql_mode=NO_ZERO_DATE, which can for instance lead to tables not being created.
         *
         * Most other schema updates happen via ActionScheduler_Abstract_Schema::update_table(), however
         * that method relies on dbDelta() and this change is not possible when using that function.
         *
         * @param string $table Name of table being updated.
         * @param string $db_version The existing schema version of the table.
         */
        public function update_schema_3_0($table, $db_version)
        {
        }
    }
    /**
     * Class ActionScheduler_StoreSchema
     *
     * @codeCoverageIgnore
     *
     * Creates custom tables for storing scheduled actions
     */
    class ActionScheduler_StoreSchema extends \ActionScheduler_Abstract_Schema
    {
        const ACTIONS_TABLE = 'actionscheduler_actions';
        const CLAIMS_TABLE = 'actionscheduler_claims';
        const GROUPS_TABLE = 'actionscheduler_groups';
        const DEFAULT_DATE = '0000-00-00 00:00:00';
        /**
         * @var int Increment this value to trigger a schema update.
         */
        protected $schema_version = 7;
        public function __construct()
        {
        }
        /**
         * Performs additional setup work required to support this schema.
         */
        public function init()
        {
        }
        protected function get_table_definition($table)
        {
        }
        /**
         * Update the actions table schema, allowing datetime fields to be NULL.
         *
         * This is needed because the NOT NULL constraint causes a conflict with some versions of MySQL
         * configured with sql_mode=NO_ZERO_DATE, which can for instance lead to tables not being created.
         *
         * Most other schema updates happen via ActionScheduler_Abstract_Schema::update_table(), however
         * that method relies on dbDelta() and this change is not possible when using that function.
         *
         * @param string $table Name of table being updated.
         * @param string $db_version The existing schema version of the table.
         */
        public function update_schema_5_0($table, $db_version)
        {
        }
    }
    /**
     * CRON expression parser that can determine whether or not a CRON expression is
     * due to run, the next run date and previous run date of a CRON expression.
     * The determinations made by this class are accurate if checked run once per
     * minute (seconds are dropped from date time comparisons).
     *
     * Schedule parts must map to:
     * minute [0-59], hour [0-23], day of month, month [1-12|JAN-DEC], day of week
     * [1-7|MON-SUN], and an optional year.
     *
     * @author Michael Dowling <mtdowling@gmail.com>
     * @link http://en.wikipedia.org/wiki/Cron
     */
    class CronExpression
    {
        const MINUTE = 0;
        const HOUR = 1;
        const DAY = 2;
        const MONTH = 3;
        const WEEKDAY = 4;
        const YEAR = 5;
        /**
        * Factory method to create a new CronExpression.
        *
        * @param string $expression The CRON expression to create.  There are
        *      several special predefined values which can be used to substitute the
        *      CRON expression:
        *
        *      @yearly, @annually) - Run once a year, midnight, Jan. 1 - 0 0 1 1 *
        *      @monthly - Run once a month, midnight, first of month - 0 0 1 * *
        *      @weekly - Run once a week, midnight on Sun - 0 0 * * 0
        *      @daily - Run once a day, midnight - 0 0 * * *
        *      @hourly - Run once an hour, first minute - 0 * * * *
        *
        *@param CronExpression_FieldFactory $fieldFactory (optional) Field factory to use
        *
        * @return CronExpression
        */
        public static function factory($expression, \CronExpression_FieldFactory $fieldFactory = \null)
        {
        }
        /**
         * Parse a CRON expression
         *
         * @param string       $expression   CRON expression (e.g. '8 * * * *')
         * @param CronExpression_FieldFactory $fieldFactory Factory to create cron fields
         */
        public function __construct($expression, \CronExpression_FieldFactory $fieldFactory)
        {
        }
        /**
         * Set or change the CRON expression
         *
         * @param string $value CRON expression (e.g. 8 * * * *)
         *
         * @return CronExpression
         * @throws InvalidArgumentException if not a valid CRON expression
         */
        public function setExpression($value)
        {
        }
        /**
         * Set part of the CRON expression
         *
         * @param int    $position The position of the CRON expression to set
         * @param string $value    The value to set
         *
         * @return CronExpression
         * @throws InvalidArgumentException if the value is not valid for the part
         */
        public function setPart($position, $value)
        {
        }
        /**
         * Get a next run date relative to the current date or a specific date
         *
         * @param string|DateTime $currentTime (optional) Relative calculation date
         * @param int             $nth         (optional) Number of matches to skip before returning a
         *     matching next run date.  0, the default, will return the current
         *     date and time if the next run date falls on the current date and
         *     time.  Setting this value to 1 will skip the first match and go to
         *     the second match.  Setting this value to 2 will skip the first 2
         *     matches and so on.
         * @param bool $allowCurrentDate (optional) Set to TRUE to return the
         *     current date if it matches the cron expression
         *
         * @return DateTime
         * @throws RuntimeException on too many iterations
         */
        public function getNextRunDate($currentTime = 'now', $nth = 0, $allowCurrentDate = \false)
        {
        }
        /**
         * Get a previous run date relative to the current date or a specific date
         *
         * @param string|DateTime $currentTime      (optional) Relative calculation date
         * @param int             $nth              (optional) Number of matches to skip before returning
         * @param bool            $allowCurrentDate (optional) Set to TRUE to return the
         *     current date if it matches the cron expression
         *
         * @return DateTime
         * @throws RuntimeException on too many iterations
         * @see CronExpression::getNextRunDate
         */
        public function getPreviousRunDate($currentTime = 'now', $nth = 0, $allowCurrentDate = \false)
        {
        }
        /**
         * Get multiple run dates starting at the current date or a specific date
         *
         * @param int             $total            Set the total number of dates to calculate
         * @param string|DateTime $currentTime      (optional) Relative calculation date
         * @param bool            $invert           (optional) Set to TRUE to retrieve previous dates
         * @param bool            $allowCurrentDate (optional) Set to TRUE to return the
         *     current date if it matches the cron expression
         *
         * @return array Returns an array of run dates
         */
        public function getMultipleRunDates($total, $currentTime = 'now', $invert = \false, $allowCurrentDate = \false)
        {
        }
        /**
         * Get all or part of the CRON expression
         *
         * @param string $part (optional) Specify the part to retrieve or NULL to
         *      get the full cron schedule string.
         *
         * @return string|null Returns the CRON expression, a part of the
         *      CRON expression, or NULL if the part was specified but not found
         */
        public function getExpression($part = \null)
        {
        }
        /**
         * Helper method to output the full expression.
         *
         * @return string Full CRON expression
         */
        public function __toString()
        {
        }
        /**
         * Determine if the cron is due to run based on the current date or a
         * specific date.  This method assumes that the current number of
         * seconds are irrelevant, and should be called once per minute.
         *
         * @param string|DateTime $currentTime (optional) Relative calculation date
         *
         * @return bool Returns TRUE if the cron is due to run or FALSE if not
         */
        public function isDue($currentTime = 'now')
        {
        }
        /**
         * Get the next or previous run date of the expression relative to a date
         *
         * @param string|DateTime $currentTime      (optional) Relative calculation date
         * @param int             $nth              (optional) Number of matches to skip before returning
         * @param bool            $invert           (optional) Set to TRUE to go backwards in time
         * @param bool            $allowCurrentDate (optional) Set to TRUE to return the
         *     current date if it matches the cron expression
         *
         * @return DateTime
         * @throws RuntimeException on too many iterations
         */
        protected function getRunDate($currentTime = \null, $nth = 0, $invert = \false, $allowCurrentDate = \false)
        {
        }
    }
    /**
     * CRON field interface
     *
     * @author Michael Dowling <mtdowling@gmail.com>
     */
    interface CronExpression_FieldInterface
    {
        /**
         * Check if the respective value of a DateTime field satisfies a CRON exp
         *
         * @param DateTime $date  DateTime object to check
         * @param string   $value CRON expression to test against
         *
         * @return bool Returns TRUE if satisfied, FALSE otherwise
         */
        public function isSatisfiedBy(\DateTime $date, $value);
        /**
         * When a CRON expression is not satisfied, this method is used to increment
         * or decrement a DateTime object by the unit of the cron field
         *
         * @param DateTime $date   DateTime object to change
         * @param bool     $invert (optional) Set to TRUE to decrement
         *
         * @return CronExpression_FieldInterface
         */
        public function increment(\DateTime $date, $invert = \false);
        /**
         * Validates a CRON expression for a given field
         *
         * @param string $value CRON expression value to validate
         *
         * @return bool Returns TRUE if valid, FALSE otherwise
         */
        public function validate($value);
    }
    /**
     * Abstract CRON expression field
     *
     * @author Michael Dowling <mtdowling@gmail.com>
     */
    abstract class CronExpression_AbstractField implements \CronExpression_FieldInterface
    {
        /**
         * Check to see if a field is satisfied by a value
         *
         * @param string $dateValue Date value to check
         * @param string $value     Value to test
         *
         * @return bool
         */
        public function isSatisfied($dateValue, $value)
        {
        }
        /**
         * Check if a value is a range
         *
         * @param string $value Value to test
         *
         * @return bool
         */
        public function isRange($value)
        {
        }
        /**
         * Check if a value is an increments of ranges
         *
         * @param string $value Value to test
         *
         * @return bool
         */
        public function isIncrementsOfRanges($value)
        {
        }
        /**
         * Test if a value is within a range
         *
         * @param string $dateValue Set date value
         * @param string $value     Value to test
         *
         * @return bool
         */
        public function isInRange($dateValue, $value)
        {
        }
        /**
         * Test if a value is within an increments of ranges (offset[-to]/step size)
         *
         * @param string $dateValue Set date value
         * @param string $value     Value to test
         *
         * @return bool
         */
        public function isInIncrementsOfRanges($dateValue, $value)
        {
        }
    }
    /**
     * Day of month field.  Allows: * , / - ? L W
     *
     * 'L' stands for "last" and specifies the last day of the month.
     *
     * The 'W' character is used to specify the weekday (Monday-Friday) nearest the
     * given day. As an example, if you were to specify "15W" as the value for the
     * day-of-month field, the meaning is: "the nearest weekday to the 15th of the
     * month". So if the 15th is a Saturday, the trigger will fire on Friday the
     * 14th. If the 15th is a Sunday, the trigger will fire on Monday the 16th. If
     * the 15th is a Tuesday, then it will fire on Tuesday the 15th. However if you
     * specify "1W" as the value for day-of-month, and the 1st is a Saturday, the
     * trigger will fire on Monday the 3rd, as it will not 'jump' over the boundary
     * of a month's days. The 'W' character can only be specified when the
     * day-of-month is a single day, not a range or list of days.
     *
     * @author Michael Dowling <mtdowling@gmail.com>
     */
    class CronExpression_DayOfMonthField extends \CronExpression_AbstractField
    {
        /**
         * {@inheritdoc}
         */
        public function isSatisfiedBy(\DateTime $date, $value)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function increment(\DateTime $date, $invert = \false)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function validate($value)
        {
        }
    }
    /**
     * Day of week field.  Allows: * / , - ? L #
     *
     * Days of the week can be represented as a number 0-7 (0|7 = Sunday)
     * or as a three letter string: SUN, MON, TUE, WED, THU, FRI, SAT.
     *
     * 'L' stands for "last". It allows you to specify constructs such as
     * "the last Friday" of a given month.
     *
     * '#' is allowed for the day-of-week field, and must be followed by a
     * number between one and five. It allows you to specify constructs such as
     * "the second Friday" of a given month.
     *
     * @author Michael Dowling <mtdowling@gmail.com>
     */
    class CronExpression_DayOfWeekField extends \CronExpression_AbstractField
    {
        /**
         * {@inheritdoc}
         */
        public function isSatisfiedBy(\DateTime $date, $value)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function increment(\DateTime $date, $invert = \false)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function validate($value)
        {
        }
    }
    /**
     * CRON field factory implementing a flyweight factory
     *
     * @author Michael Dowling <mtdowling@gmail.com>
     * @link http://en.wikipedia.org/wiki/Cron
     */
    class CronExpression_FieldFactory
    {
        /**
         * Get an instance of a field object for a cron expression position
         *
         * @param int $position CRON expression position value to retrieve
         *
         * @return CronExpression_FieldInterface
         * @throws InvalidArgumentException if a position is not valid
         */
        public function getField($position)
        {
        }
    }
    /**
     * Hours field.  Allows: * , / -
     *
     * @author Michael Dowling <mtdowling@gmail.com>
     */
    class CronExpression_HoursField extends \CronExpression_AbstractField
    {
        /**
         * {@inheritdoc}
         */
        public function isSatisfiedBy(\DateTime $date, $value)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function increment(\DateTime $date, $invert = \false)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function validate($value)
        {
        }
    }
    /**
     * Minutes field.  Allows: * , / -
     *
     * @author Michael Dowling <mtdowling@gmail.com>
     */
    class CronExpression_MinutesField extends \CronExpression_AbstractField
    {
        /**
         * {@inheritdoc}
         */
        public function isSatisfiedBy(\DateTime $date, $value)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function increment(\DateTime $date, $invert = \false)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function validate($value)
        {
        }
    }
    /**
     * Month field.  Allows: * , / -
     *
     * @author Michael Dowling <mtdowling@gmail.com>
     */
    class CronExpression_MonthField extends \CronExpression_AbstractField
    {
        /**
         * {@inheritdoc}
         */
        public function isSatisfiedBy(\DateTime $date, $value)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function increment(\DateTime $date, $invert = \false)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function validate($value)
        {
        }
    }
    /**
     * Year field.  Allows: * , / -
     *
     * @author Michael Dowling <mtdowling@gmail.com>
     */
    class CronExpression_YearField extends \CronExpression_AbstractField
    {
        /**
         * {@inheritdoc}
         */
        public function isSatisfiedBy(\DateTime $date, $value)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function increment(\DateTime $date, $invert = \false)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function validate($value)
        {
        }
    }
}
/**
 * Calendar Class Functions
 *
 * @since 5.1.1
 */
namespace Tribe\Events\Views\V2 {
    /**
     * Used in the multiday month loop.
     * Outputs classes for the multiday event (article).
     *
     * @since 5.1.1
     *
     * @param WP_Post $event            An event post object with event-specific properties added from the the `tribe_get_event`
     *                                  function.
     * @param string  $day_date         The `Y-m-d` date of the day currently being displayed.
     * @param bool    $is_start_of_week Whether the current grid day being rendered is the first day of the week or not.
     * @param string  $today_date       Today's date in the `Y-m-d` format.
     *
     * @return array<string> $classes   The classes to add to the multiday event.
     */
    function month_multiday_classes($event, $day_date, $is_start_of_week, $today_date)
    {
    }
    /**
     * Used in the Month View days loop.
     * Outputs classes for each day "cell".
     *
     * @since 6.0.2
     *
     * @param array<mixed> $day          The current day data.
     * @param string       $day_date     The current day date, in the `Y-m-d` format.
     * @param \DateTime    $request_date The request date for the view.
     * @param string       $today_date   Today's date in the `Y-m-d` format.
     *
     * @return array<string,bool> $day_classes The classes to add to the day "cell".
     */
    function month_day_classes(array $day, string $day_date, \DateTime $request_date, string $today_date)
    {
    }
}
namespace {
    /**
     * Registers a class as a singleton.
     *
     * Each call to obtain an instance of this class made using the `tribe( $slug )` function
     * will return the same instance; the instances are built just in time (if not passing an
     * object instance or callback function) and on the first request.
     * The container will call the class `__construct` method on the class (if not passing an object
     * or a callback function) and will try to automagically resolve dependencies.
     *
     * Example use:
     *
     *      tribe_singleton( 'tec.admin.class', 'Tribe__Admin__Class' );
     *
     *      // some code later...
     *
     *      // class is built here
     *      tribe( 'tec.admin.class' )->doSomething();
     *
     * Need the class built immediately? Build it and register it:
     *
     *      tribe_singleton( 'tec.admin.class', new Tribe__Admin__Class() );
     *
     *      // some code later...
     *
     *      tribe( 'tec.admin.class' )->doSomething();
     *
     * Need a very custom way to build the class? Register a callback:
     *
     *      tribe_singleton( 'tec.admin.class', array( Tribe__Admin__Class__Factory, 'make' ) );
     *
     *      // some code later...
     *
     *      tribe( 'tec.admin.class' )->doSomething();
     *
     * Or register the methods that should be called on the object after its construction:
     *
     *      tribe_singleton( 'tec.admin.class', 'Tribe__Admin__Class', array( 'hook', 'register' ) );
     *
     *      // some code later...
     *
     *      // the `hook` and `register` methods will be called on the built instance.
     *      tribe( 'tec.admin.class' )->doSomething();
     *
     * The class will be built only once (if passing the class name or a callback function), stored
     * and the same instance will be returned from that moment on.
     *
     * @param string                 $slug                The human-readable and catchy name of the class.
     * @param string|object|callable $class               The full class name or an instance of the class
     *                                                    or a callback that will return the instance of the class.
     * @param array                  $after_build_methods An array of methods that should be called on
     *                                                    the built object after the `__construct` method; the methods
     *                                                    will be called only once after the singleton instance
     *                                                    construction.
     */
    function tribe_singleton($slug, $class, array $after_build_methods = \null)
    {
    }
    /**
     * Registers a class.
     *
     * Each call to obtain an instance of this class made using the `tribe( $slug )` function
     * will return a new instance; the instances are built just in time (if not passing an
     * object instance, in that case it will work as a singleton) and on the first request.
     * The container will call the class `__construct` method on the class (if not passing an object
     * or a callback function) and will try to automagically resolve dependencies.
     *
     * Example use:
     *
     *      tribe_register( 'tec.some', 'Tribe__Some' );
     *
     *      // some code later...
     *
     *      // class is built here
     *      $some_one = tribe( 'tec.some' )->doSomething();
     *
     *      // $some_two !== $some_one
     *      $some_two = tribe( 'tec.some' )->doSomething();
     *
     * Need the class built immediately? Build it and register it:
     *
     *      tribe_register( 'tec.admin.class', new Tribe__Admin__Class() );
     *
     *      // some code later...
     *
     *      // $some_two === $some_one
     *      // acts like a singleton
     *      $some_one = tribe( 'tec.some' )->doSomething();
     *      $some_two = tribe( 'tec.some' )->doSomething();
     *
     * Need a very custom way to build the class? Register a callback:
     *
     *      tribe_register( 'tec.some', array( Tribe__Some__Factory, 'make' ) );
     *
     *      // some code later...
     *
     *      // $some_two !== $some_one
     *      $some_one = tribe( 'tec.some' )->doSomething();
     *      $some_two = tribe( 'tec.some' )->doSomething();
     *
     * Or register the methods that should be called on the object after its construction:
     *
     *      tribe_singleton( 'tec.admin.class', 'Tribe__Admin__Class', array( 'hook', 'register' ) );
     *
     *      // some code later...
     *
     *      // the `hook` and `register` methods will be called on the built instance.
     *      tribe( 'tec.admin.class' )->doSomething();
     *
     * @param string                 $slug                The human-readable and catchy name of the class.
     * @param string|object|callable $class               The full class name or an instance of the class
     *                                                    or a callback that will return the instance of the class.
     * @param array                  $after_build_methods An array of methods that should be called on
     *                                                    the built object after the `__construct` method; the methods
     *                                                    will be called each time after the instance construction.
     */
    function tribe_register($slug, $class, array $after_build_methods = \null)
    {
    }
    /**
     * Returns a ready to use instance of the requested class.
     *
     * Example use:
     *
     *      tribe_singleton( 'common.main', 'Tribe__Main');
     *
     *      // some code later...
     *
     *      tribe( 'common.main' )->do_something();
     *
     * @param string|null $slug_or_class Either the slug of a binding previously registered using `tribe_singleton` or
     *                                   `tribe_register` or the full class name that should be automagically created or
     *                                   `null` to get the container instance itself.
     *
     * @return mixed|object|Tribe__Container The instance of the requested class. Please note that the cardinality of
     *                                       the class is controlled registering it as a singleton using `tribe_singleton`
     *                                       or `tribe_register`; if the `$slug_or_class` parameter is null then the
     *                                       container itself will be returned.
     */
    function tribe($slug_or_class = \null)
    {
    }
    /**
     * Registers a value under a slug in the container.
     *
     * Example use:
     *
     *      tribe_set_var( 'tec.url', 'http://example.com' );
     *
     * @param string $slug  The human-readable and catchy name of the var.
     * @param mixed  $value The variable value.
     */
    function tribe_set_var($slug, $value)
    {
    }
    /**
     * Returns the value of a registered variable.
     *
     * Example use:
     *
     *      tribe_set_var( 'tec.url', 'http://example.com' );
     *
     *      $url = tribe_get_var( 'tec.url' );
     *
     * @param string $slug    The slug of the variable registered using `tribe_set_var`.
     * @param null   $default The value that should be returned if the variable slug
     *                        is not a registered one.
     *
     * @return mixed Either the registered value or the default value if the variable
     *               is not registered.
     */
    function tribe_get_var($slug, $default = \null)
    {
    }
    /**
     * Returns the value of a registered variable.
     *
     * Example use:
     *
     *      tribe_set_var( 'tec.url', 'http://example.com' );
     *
     *      tribe_unset_var( 'tec.url' );
     *
     * @since 4.11.0
     *
     * @param string $slug    The slug of the variable registered using `tribe_unset_var`.
     *
     * @return void
     */
    function tribe_unset_var($slug)
    {
    }
    /**
     * Returns the value of a registered variable.
     *
     * Example use:
     *
     *      tribe_set_var( 'tec.url', 'http://example.com' );
     *
     *      tribe_isset_var( 'tec.url' );
     *
     * @since 4.11.0
     *
     * @param  string   $slug    The slug of the variable checked using `tribe_isset_var`.
     *
     * @return boolean  Either a the given slug exists.
     */
    function tribe_isset_var($slug)
    {
    }
    /**
     * Registers a service provider in the container.
     *
     * Service providers must implement the `use ServiceProviderInterface` interface or extend
     * the `ServiceProvider` class.
     *
     * @see ServiceProvider
     * @see ServiceProviderInterface
     *
     * @param string $provider_class
     */
    function tribe_register_provider($provider_class)
    {
    }
    /**
     * Determines if upsells should be hidden.
     *
     * @since 4.14.16
     *
     * @param string $slug Which upsell is this conditional for, if nothing passed it will apply to all.
     *
     * @return bool
     */
    function tec_should_hide_upsell($slug = 'all')
    {
    }
    /**
     * Check if the current theme is a block theme.
     *
     * @since 4.14.18
     *
     * @return bool Whether the current theme is a block theme supporting full-site editing.
     */
    function tec_is_full_site_editor()
    {
    }
    /**
     * Checks if a file is from one of the specified plugins.
     *
     * @since 5.0.0
     *
     * @param string $file            The path of the file to check.
     * @param string ...$plugin_files A set of plugin main files to check, e.g. `the-events-calendar.php`.
     *
     * @return bool Whether the file is from one of the specified plugins.
     */
    function tec_is_file_from_plugins(string $file, string ...$plugin_files) : bool
    {
    }
    /**
     * Detects multibyte encoding if the function is available, returns false if not
     * @since 4.7.18
     *
     * @param  string       $string the string to detect encoding of
     * @return string|bool         the mb encoding of the string
     *          false if the function is not available or the encoding cannot be determined
     */
    function tribe_detect_encoding($string)
    {
    }
    /**
     * Detects urlencoded strings if the function is available, and converts them.
     * Returns false if not able to detect
     * @since 4.7.18
     *
     * @param  string       $string the string to detect encoding of
     * @return string|bool         the urldecoded string
     *          the original string if the function is not available or the encoding cannot be determined
     */
    function tribe_maybe_urldecode($string)
    {
    }
    /**
     * Get the length of a string, uses mb_strlen when available
     * @since 4.7.18
     *
     * @param  string $string the string to get the length of
     * @return int         string length
     */
    function tribe_strlen($string)
    {
    }
    /**
     * Get a substring, using multibyte functions if available
     * @since 4.7.18
     *
     * @param  string  $string string to crop
     * @param  int     $start  start position
     * @param  int     $length (optional) substring length
     * @return int          substring
     */
    function tribe_substr($string, $start = 0, $length = \null)
    {
    }
    /**
     * Convert string to uppercase, using multibyte functions if available
     * @since 4.7.18
     *
     * @param  string $string string to convert
     * @return string         converted string
     */
    function tribe_strtoupper($string)
    {
    }
    /**
     * Convert string to lowercase, using multibyte functions if available
     * @since 4.7.18
     *
     * @param  string $string string to convert
     * @return string         converted string
     */
    function tribe_strtolower($string)
    {
    }
    function tribe_uc_first_letter($string)
    {
    }
    /**
     * Find the numeric position of the first occurrence of needle in the haystack string using multibyte function if available.
     *
     * @since 4.9.19
     *
     * @param string $haystack The string to search in.
     * @param string $needle   The string to find in haystack.
     * @param int    $offset   The search offset. If it is not specified, 0 is used. A negative offset counts from the end of the string.
     *
     * @return int|false The numeric position of the first occurrence of needle in the haystack string. If needle is not found, it returns false.
     *
     * @see strpos    The fallback function used if mb_strpos does not exist.
     * @see mb_strpos The multibyte compatible version of strpos.
     */
    function tribe_strpos($haystack, $needle, $offset = 0)
    {
    }
    /**
     * Removes meta query entries based on key and value.
     *
     * Example usage to remove all date-related meta queries, using a regular expression:
     *
     * $query->meta_query = tribe_filter_meta_query(
     *      $args['meta_query'],
     *      array( 'key' => '/_Event(Start|End)Date(UTC)/' )
     * );
     *
     * @since 4.9.5
     *
     * @param array $meta_query The meta query array to filter, usually the content of the `$query->meta_query`
     *                          property.
     * @param array $where      A map of criteria for the filtering that will be applied with OR logic: if an
     *                          entry matches even one then it will be removed. If the value of the comparison is a
     *                          regular expression, with fences, then it will be used for a `preg_match` check against
     *                          the key, not a simple comparison.
     *
     * @return array The filtered meta query array.
     */
    function tribe_filter_meta_query(array $meta_query, array $where)
    {
    }
    /**
     * Normalizes an `orderby` string or array to an map of keys and orders.
     *
     * Note the function and the variables use the "orderby" (no spaces) name to stick
     * with the WordPress query standard.
     *
     * @since 4.12.6
     *
     * @param string|array<string,string> $orderby Either an `orderby` key, a list of `orderby`
     *                                             keys or a map of `orderby` clauses.
     * @param string                      $order   The default order that should be applied to `orderby` entries that
     *                                             lack one.
     *
     * @return array The normalized `orderby` array, in the format supported by WordPress queries:
     *               `[ <key_1> => <order>, <key_2> => <order>, ... ]`.
     */
    function tribe_normalize_orderby($orderby, $order = 'ASC')
    {
    }
    /**
     * Formatted Date
     *
     * Returns formatted date
     * 
     * @since 5.11.1 Introduced a temporary locale switch to handle the AM/PM format specifically for French language settings.
     *
     * @category Events
     *
     * @param string $date         String representing the datetime, assumed to be UTC (relevant if timezone conversion is used)
     * @param bool   $display_time If true shows date and time, if false only shows date
     * @param string $date_format  Allows date and time formating using standard php syntax (http://php.net/manual/en/function.date.php)
     *
     * @return string
     */
    function tribe_format_date($date, $display_time = \true, $date_format = '')
    {
    }
    /**
     * Returns formatted date for the official beginning of the day according to the Multi-day cutoff time option
     *
     * @category Events
     *
     * @param string|null $date   The date to find the beginning of the day, defaults to today
     * @param string      $format Allows date and time formatting using standard php syntax.
     *                            ( see: http://php.net/manual/en/function.date.php )
     *                            Defaults to 'Y-m-d H:i:s'.
     *
     * @return string
     */
    function tribe_beginning_of_day($date = \null, $format = 'Y-m-d H:i:s')
    {
    }
    /**
     * Returns formatted date for the official end of the day according to the Multi-day cutoff time option
     *
     * @category Events
     *
     * @param string $date   The date to find the end of the day, defaults to today
     * @param string $format Allows date and time formating using standard php syntax (http://php.net/manual/en/function.date.php)
     *
     * @return string
     */
    function tribe_end_of_day($date = \null, $format = 'Y-m-d H:i:s')
    {
    }
    /**
     * Get the datetime saparator from the database option with escaped characters or not ;)
     *
     * @param string $default Default Separator if it's blank on the Database
     * @param bool   $esc     If it's going to be used on a `date` function or method it needs to be escaped
     *
     * @filter tribe_datetime_separator
     *
     * @return string
     */
    function tribe_get_datetime_separator($default = ' @ ', $esc = \false)
    {
    }
    /**
     * Start Time
     *
     * Returns the event start time
     *
     * @category Events
     *
     * @param int    $event       (optional)
     * @param string $date_format Allows date and time formating using standard php syntax (http://php.net/manual/en/function.date.php)
     * @param string $timezone    Timezone in which to present the date/time (or default behaviour if not set)
     *
     * @return string|null Time
     */
    function tribe_get_start_time($event = \null, $date_format = '', $timezone = \null)
    {
    }
    /**
     * End Time
     *
     * Returns the event end time
     *
     * @category Events
     *
     * @param int    $event       (optional)
     * @param string $date_format Allows date and time formating using standard php syntax (http://php.net/manual/en/function.date.php)
     * @param string $timezone    Timezone in which to present the date/time (or default behaviour if not set)
     *
     * @return string|null Time
     */
    function tribe_get_end_time($event = \null, $date_format = '', $timezone = \null)
    {
    }
    /**
     * Start Date
     *
     * Returns the event start date and time
     *
     * @category Events
     *
     * @since 4.7.6 Deprecated the $timezone parameter.
     *
     * @param int    $event        (optional)
     * @param bool   $display_time If true shows date and time, if false only shows date
     * @param string $date_format  Allows date and time formating using standard php syntax (http://php.net/manual/en/function.date.php)
     * @param string $timezone     Deprecated. Timezone in which to present the date/time (or default behaviour if not set)
     *
     * @return string|null Date
     */
    function tribe_get_start_date($event = \null, $display_time = \true, $date_format = '', $timezone = \null)
    {
    }
    /**
     * End Date
     *
     * Returns the event end date
     *
     * @category Events
     *
     * @since 4.7.6 Deprecated the $timezone parameter.
     *
     * @param int    $event        (optional)
     * @param bool   $display_time If true shows date and time, if false only shows date
     * @param string $date_format  Allows date and time formating using standard php syntax (http://php.net/manual/en/function.date.php)
     * @param string $timezone     Deprecated. Timezone in which to present the date/time (or default behaviour if not set)
     *
     * @return string|null Date
     */
    function tribe_get_end_date($event = \null, $display_time = \true, $date_format = '', $timezone = \null)
    {
    }
    /**
     * Normalizes a manual UTC offset string.
     *
     * @param string $utc_offset
     *
     * @return string The normalized manual UTC offset.
     *                e.g. 'UTC+3', 'UTC-4.5', 'UTC+2.75'
     */
    function tribe_normalize_manual_utc_offset($utc_offset)
    {
    }
    /**
     * Return a WP Locale weekday in the specified format
     *
     * @param int|string $weekday Day of week
     * @param string $format Weekday format: full, weekday, initial, abbreviation, abbrev, abbr, short
     *
     * @return string
     */
    function tribe_wp_locale_weekday($weekday, $format)
    {
    }
    /**
     * Return a WP Locale month in the specified format
     *
     * @param int|string $month Month of year
     * @param string $format month format: full, month, abbreviation, abbrev, abbr, short
     *
     * @return string
     */
    function tribe_wp_locale_month($month, $format)
    {
    }
    /**
     * Handy function for easily detecting if this site's using the 24-hour time format.
     *
     * @since 4.7.1
     *
     * @return boolean
     */
    function tribe_is_site_using_24_hour_time()
    {
    }
    /**
     * Get Options
     *
     * Retrieve specific key from options array, optionally provide a default return value
     *
     * @category Events
     * @param string $optionName Name of the option to retrieve.
     * @param string $default    Value to return if no such option is found.
     *
     * @return mixed Value of the option if found.
     * @todo Abstract this function out of template tags or otherwise secure it from other namespace conflicts.
     */
    function tribe_get_option($optionName, $default = '')
    {
    }
    /**
     * Update Option
     *
     * Set specific key from options array, optionally provide a default return value
     *
     * @category Events
     * @param string $optionName Name of the option to retrieve.
     * @param string $value      Value to save
     *
     * @return bool
     */
    function tribe_update_option($optionName, $value)
    {
    }
    /**
     * Update Option
     *
     * Remove specific key from options array
     *
     * @category Events
     * @param string $optionName Name of the option to retrieve.
     * @param string $value      Value to save
     *
     * @return bool
     */
    function tribe_remove_option($optionName)
    {
    }
    /**
     * Get Network Options
     *
     * Retrieve specific key from options array, optionally provide a default return value
     *
     * @category Events
     * @param string $optionName Name of the option to retrieve.
     * @param string $default    Value to return if no such option is found.
     *
     * @return mixed Value of the option if found.
     * @todo Abstract this function out of template tags or otherwise secure it from other namespace conflicts.
     */
    function tribe_get_network_option($optionName, $default = '')
    {
    }
    /**
     * Returns or echoes a url to a file in the Events Calendar plugin resources directory
     *
     * @category Events
     *
     * @param string $resource the filename of the resource
     * @param bool   $echo     whether or not to echo the url
     * @param string $root_dir directory to hunt for resource files (null or the actual path)
     * @param object $origin   Which plugin we are dealing with
     *
     * @return string
     **/
    function tribe_resource_url($resource, $echo = \false, $root_dir = \null, $origin = \null)
    {
    }
    /**
     * helper function to remove empty lines from multi-line strings
     *
     * @category Events
     * @link http://stackoverflow.com/questions/709669/how-do-i-remove-blank-lines-from-text-in-php
     *
     * @param string $multi_line_string a multiline string
     *
     * @return string the same string without empty lines
     */
    function tribe_multi_line_remove_empty_lines($multi_line_string)
    {
    }
    /**
     * Get the date format specified in the tribe options
     *
     * @category Events
     * @param bool $with_year
     *
     * @return mixed
     */
    function tribe_get_date_format($with_year = \false)
    {
    }
    /**
     * Get the Datetime Format
     *
     * @category Events
     *
     * @param bool $with_year
     *
     * @return mixed|void
     */
    function tribe_get_datetime_format($with_year = \false)
    {
    }
    /**
     * Get the time format
     *
     * @category Events
     *
     * @return mixed|void
     */
    function tribe_get_time_format()
    {
    }
    /**
     * Accepts two dates and returns the number of days between them
     *
     * @category Events
     *
     * @param string      $start_date
     * @param string      $end_date
     * @param string|bool $day_cutoff
     *
     * @return int
     * @see Tribe__Date_Utils::date_diff()
     **/
    function tribe_get_days_between($start_date, $end_date, $day_cutoff = '00:00')
    {
    }
    /**
     * Function to prepare content for use as a value in a json encoded string destined for storage on a html data attribute.
     * Hence the double quote fun, especially in case they pass html encoded &quot; along. Any of those getting through to the data att will break jQuery's parseJSON method.
     * Themers can use this function to prepare data they may want to send to tribe_events_template_data() in the templates, and we use it in that function ourselves.
     *
     * @category Events
     *
     * @param $string
     *
     * @return string
     */
    function tribe_prepare_for_json($string)
    {
    }
    /**
     * Recursively iterate through an nested structure, calling
     * tribe_prepare_for_json() on all scalar values
     *
     * @category Events
     *
     * @param mixed $value The data to be cleaned
     *
     * @return mixed The clean data
     */
    function tribe_prepare_for_json_deep($value)
    {
    }
    /**
     * Generates html for any notices that have been queued on the current view
     *
     * @category Events
     *
     * @param bool $echo Whether or not to echo the notices html
     *
     * @return void | string
     * @see Tribe__Notices::get()
     **/
    function tribe_the_notices($echo = \true)
    {
    }
    /**
     * tribe_is_bot checks if the visitor is a bot and returns status
     *
     * @category Events
     *
     * @return bool
     */
    function tribe_is_bot()
    {
    }
    /**
     * Count keys in a hierarchical array
     *
     * @param $value
     * @param $key
     * @todo - remove, only used in the meta walker
     */
    function tribe_count_hierarchical_keys($value, $key)
    {
    }
    /**
     * Count items in a hierarchical array
     *
     * @param array $walk
     *
     * @return int
     * @todo - remove, only used in the meta walker
     */
    function tribe_count_hierarchical(array $walk)
    {
    }
    /**
     * Mobile breakpoint
     *
     * Get the breakpoint for switching to mobile styles. Defaults to 768.
     *
     * @category Events
     *
     * @param int $default The default width (in pixels) at which to break into mobile styles
     *
     * @return int
     */
    function tribe_get_mobile_breakpoint($default = 768)
    {
    }
    /**
     * Receives a float and formats it with a currency symbol
     *
     * @category Cost
     * @param string $cost pricing to format
     * @param null|int $post_id
     * @param null|string $currency_symbol
     * @param null|bool $reverse_position
     *
     * @return string
     */
    function tribe_format_currency($cost, $post_id = \null, $currency_symbol = \null, $reverse_position = \null)
    {
    }
    /**
     * Get a date option.
     *
     * Retrieve an option value taking care to escape it to preserve date format slashes.
     *
     * @category Events
     * @param  string $optionName Name of the option to retrieve.
     * @param string  $default    Value to return if no such option is found.
     *
     * @return mixed Value of the option if found
     */
    function tribe_get_date_option($optionName, $default = '')
    {
    }
    /**
     * Shortcut for Tribe__Admin__Notices::register(), create a Admin Notice easily
     *
     * @param  string          $slug      Slug to save the notice
     * @param  callable|string $callback  A callable Method/Function to actually display the notice
     * @param  array           $arguments Arguments to Setup a notice
     * @param callable|null    $active_callback An optional callback that should return bool values
     *                                          to indicate whether the notice should display or not.
     *
     * @return stdClass Which notice was registered
     */
    function tribe_notice($slug, $callback, $arguments = [], $active_callback = \null)
    {
    }
    /**
     * Shortcut for Tribe__Admin__Notices::register_transient(), create a transient Admin Notice easily.
     *
     * A transient admin notice is a "fire-and-forget" admin notice that will display once registered and
     * until dismissed (if dismissible) without need, on the side of the source code, to register it on each request.
     *
     * @param  string $slug      Slug to save the notice
     * @param  string $html      The notice output HTML code
     * @param  array  $arguments Arguments to Setup a notice
     * @param int     $expire    After how much time (in seconds) the notice will stop showing.
     *
     * @return stdClass Which notice was registered
     */
    function tribe_transient_notice($slug, $html, $arguments = [], $expire = \null)
    {
    }
    /**
     * Removes a transient notice based on its slug.
     *
     * @since 4.7.7
     *
     * @param string $slug
     */
    function tribe_transient_notice_remove($slug)
    {
    }
    /**
     * A quick internal way of sending errors using WP_Error
     *
     * @param  string|array $indexes Which Error we are looking for
     * @param  array        $context Gives the Error context
     * @param  array        $sprintf Allows variables on the message
     *
     * @return WP_Error
     */
    function tribe_error($indexes, $context = [], $sprintf = [])
    {
    }
    /**
     * Register a new error based on a Namespace
     *
     * @param  string|array  $indexes  A list of the namespaces and last item should be the error name
     * @param  string        $message  What is going to be the message associate with this indexes
     *
     * @return boolean
     */
    function tribe_register_error($indexes, $message)
    {
    }
    /**
     * Shortcut for Tribe__Assets::register(), include a single asset
     *
     * @since 4.3
     *
     * @param object            $origin    The main object for the plugin you are enqueueing the asset for.
     * @param string            $slug      Slug to save the asset - passes through `sanitize_title_with_dashes()`.
     * @param string            $file      The asset file to load (CSS or JS), including non-minified file extension.
     * @param array             $deps      The list of dependencies or callable function that will return a list of dependencies.
     * @param string|array|null $action    The WordPress action(s) to enqueue on, such as `wp_enqueue_scripts`,
     *                                     `admin_enqueue_scripts`, or `login_enqueue_scripts`.
     * @param array             $arguments See `Tribe__Assets::register()` for more info.
     *
     * @return object|false     The asset that got registered or false on error.
     */
    function tribe_asset($origin, $slug, $file, $deps = [], $action = \null, $arguments = [])
    {
    }
    /**
     * Shortcut for Tribe__Assets::enqueue() to include assets.
     *
     * @since 4.7
     *
     * @param string|array $slug Slug to enqueue
     */
    function tribe_asset_enqueue($slug)
    {
    }
    /**
     * Shortcut for Tribe__Assets::enqueue_group() include assets by groups.
     *
     * @since 4.7
     *
     * @param string|array  $group  Which group(s) should be enqueued.
     */
    function tribe_asset_enqueue_group($group)
    {
    }
    /**
     * Function to include more the one asset, based on `tribe_asset`
     *
     * @since 4.3
     * @since 4.12.10 Added support for overriding arguments for individual assets.
     *
     * @param  object   $origin     The main Object for the plugin you are enqueueing the script/style for
     * @param  array    $assets     {
     *    Indexed array, don't use any associative key.
     *    E.g.: [ 'slug-my-script', 'my/own/path.js', [ 'jquery' ] ]
     *
     *    @type  string   $slug       Slug to save the asset
     *    @type  string   $file       Which file will be loaded, either CSS or JS
     *    @type  array    $deps       (optional) Dependencies
     * }
     * @param  string   $action     A WordPress hook that will automatically enqueue this asset once fired
     * @param  array    $arguments  Look at `Tribe__Assets::register()` for more info
     *
     * @return array             Which Assets were registered
     */
    function tribe_assets($origin, $assets, $action = \null, $arguments = [])
    {
    }
    /**
     * Registers truthy or falsy callbacks on the filters used to detect if
     * any frontend operation is being done for logged in users or not.
     *
     * @since 4.7.4
     *
     * @param bool $doing_frontend Whether what is being done happens in the
     *                             context of the frontend or not.
     */
    function tribe_doing_frontend($doing_frontend)
    {
    }
    /**
     * Whether we are currently performing a frontend operation or not.
     *
     * @since 4.6.2
     *
     * @return bool
     */
    function tribe_is_frontend()
    {
    }
    /**
     * Wrapper for set_time_limit to suppress errors
     *
     * @since 4.7.12
     *
     * @param int $limit Time limit.
     */
    function tribe_set_time_limit($limit = 0)
    {
    }
    /**
     * A wrapper function to get the singleton, immutable, global context object.
     *
     * Due to its immutable nature any method that would modify the context will return
     * a clone of the context, not the original one.
     *
     * @since 4.9.5
     *
     * @return Tribe__Context The singleton, immutable, global object instance.
     */
    function tribe_context()
    {
    }
    /**
     * Returns the current Tribe Cache instance.
     *
     * @since 4.11.2
     *
     * @return Tribe__Cache The current cache instance.
     */
    function tribe_cache()
    {
    }
    /**
     * Prints the `script` (JS) and `link` (CSS) HTML tags associated with one or more assets groups.
     *
     * @since 4.12.6
     *
     * @param string|array $group Which group(s) should be enqueued.
     * @param bool         $echo  Whether to print the group(s) tag(s) to the page or not; default to `true` to
     *                            print the HTML `script` (JS) and `link` (CSS) tags to the page.
     *
     * @return string The `script` and `link` HTML tags produced for the group(s).
     */
    function tribe_asset_print_group($group, $echo = \true)
    {
    }
    /**
     * Check whether a specific shortcode is being run.
     *
     * This is limited to only shortcodes registered with Tribe\Shortcode\Manager.
     *
     * @since 4.12.10
     *
     * @param null|string $tag The shortcode tag name, or null to check if doing any shortcode.
     *
     * @return bool Whether the shortcode is currently being run.
     */
    function tribe_doing_shortcode($tag = \null)
    {
    }
    /**
     * Parse input values into a valid array of classes to be used in the templates.
     *
     * @since  4.9.13
     *
     * @param  mixed $classes,... unlimited Any amount of params to be rendered as classes.
     *
     * @return array
     */
    function tribe_get_classes()
    {
    }
    /**
     * Parses input values into a valid class html attribute to be used in the templates.
     *
     * @since  4.9.13
     *
     * @param  mixed $classes,... unlimited Any amount of params to be rendered as classes.
     *
     * @return void
     */
    function tribe_classes()
    {
    }
    /**
     * Parse input values into a valid array of attributes to be used in the templates.
     *
     * @since  4.12.3
     *
     * @param  mixed $attributes,... unlimited Any amount of params to be rendered as attributes.
     *
     * @return array<string> An array of the parsed string attributes.
     */
    function tribe_get_attributes()
    {
    }
    /**
     * Parse input values into a valid html attributes to be used in the templates.
     *
     * @since  4.12.3
     *
     * @param  mixed $attributes,... unlimited Any amount of params to be rendered as attributes.
     *
     * @return void
     */
    function tribe_attributes()
    {
    }
    /**
     * Get attributes for required fields.
     *
     * @deprecated 4.12.6
     *
     * @since 4.10.0
     *
     * @param boolean $required If the field is required.
     * @param boolean $echo     Whether to echo the string or return it.
     *
     * @return string|void If echo is false, returns $required_string.
     */
    function tribe_required($required, $echo = \true)
    {
    }
    /**
     * Get string for required field labels.
     *
     * @since 4.10.0
     *
     * @param boolean $required If the field is required.
     * @param boolean $echo     Whether to echo the string or return it.
     *
     * @return string|void If echo is false, returns $required_string.
     */
    function tribe_required_label($required, $echo = \true)
    {
    }
    /**
     * Get attributes for disabled fields.
     *
     * @deprecated 4.12.6
     *
     * @since 4.10.0
     *
     * @param boolean $disabled If the field is disabled.
     * @param boolean $echo     Whether to echo the string or return it.
     *
     * @return string|void If echo is false, returns $disabled_string.
     */
    function tribe_disabled($disabled, $echo = \true)
    {
    }
    /**
     * Generates a string for the tribe-dependency attributes.
     *
     * @since 4.12.14
     *
     * @param array<string,mixed> $deps       The passed array of dependencies.
     *
     * @return string             $dependency The string of dependencies attributes to add to the input.
     */
    function tribe_format_field_dependency($deps)
    {
    }
    /**
     * Gets the post content. Basically a wrapper around `get_the_content` that will prevent warnings on PHP 7.3
     * and be compatible with WP 5.3
     *
     * @since 4.9.23
     *
     * @global WP_Post  $post          Current post on the loop
     * @global string   $wp_version    Which version of WordPress we are currently dealing with
     *
     * @param string             $more_link_text Optional. Content for when there is more text.
     * @param bool               $strip_teaser   Optional. Strip teaser content before the more text. Default is false.
     * @param WP_Post|object|int $post_id        Optional. WP_Post instance or Post ID/object. Default is null.
     *
     * @return string
     */
    function tribe_get_the_content($more_link_text = \null, $strip_teaser = \false, $post_id = \null)
    {
    }
    /**
     * Prints the post content.
     *
     * @since 4.9.23
     *
     * @global WP_Post  $post          Current post on the loop
     * @global string   $wp_version    Which version of WordPress we are currently dealing with
     *
     * @param string             $more_link_text Optional. Content for when there is more text.
     * @param bool               $strip_teaser   Optional. Strip teaser content before the more text. Default is false.
     * @param WP_Post|object|int $post_id        Optional. WP_Post instance or Post ID/object. Default is null.
     *
     * @return void
     */
    function tribe_the_content($more_link_text = \null, $strip_teaser = \false, $post_id = \null)
    {
    }
    /**
     * Wrapper for post_class function that allows us to in-memory cache
     *
     * @since 4.11.0
     *
     * @param string|string[] $class   Space-separated string or array of class names to add to the class list.
     * @param int|WP_Post     $post    Optional. Post ID or post object.
     *
     * @return string[] Array of class names.
     */
    function tribe_get_post_class($class, $post)
    {
    }
    /**
     * Checks if a file is from one of the specified plugins.
     *
     * @since 5.0.6
     *
     * @return \TEC\Common\Storage\Timed_Option
     */
    function tec_timed_option() : \TEC\Common\Storage\Timed_Option
    {
    }
    /**
     * Build a URL.
     *
     * The parts of the second URL will be merged into the first according to
     * the flags argument.
     *
     * @since 4.9.11
     *
     * @param mixed $url     (part(s) of) an URL in form of a string or associative array like parse_url() returns.
     * @param mixed $parts   Same as the first argument.
     * @param int   $flags   A bitmask of binary ordered HTTP_URL constants; HTTP_URL_REPLACE is the default.
     * @param array $new_url if set, it will be filled with the parts of the composed url like `parse_url()` would
     *                       return.
     *
     * @return string The URL built from its parts.
     */
    function tribe_build_url($url, $parts = [], $flags = \HTTP_URL_REPLACE, &$new_url = [])
    {
    }
    /**
     * Sanitizes string values.
     *
     * @since 5.0.17
     *
     * @param string $string The string being sanitized.
     *
     * @return string $string The sanitized version of the string.
     */
    function tec_sanitize_string($string)
    {
    }
    /**
     * Recursively merge two arrays preserving keys.
     *
     * @link http://php.net/manual/en/function.array-merge-recursive.php#92195
     *
     * @param array $array1
     * @param array $array2
     *
     * @return array
     */
    function tribe_array_merge_recursive(array &$array1, array &$array2)
    {
    }
    /**
     * Checks if this plugin has permission to run, if not it notifies the admin
     *
     * @param string $file_path    Full file path to the base plugin file
     * @param string $main_class   The Main/base class for this plugin
     * @param string $version      The version
     * @param array  $classes_req  Any Main class files/tribe plugins required for this to run
     * @param array  $dependencies an array of dependencies to check
     */
    function tribe_register_plugin($file_path, $main_class, $version, $classes_req = [], $dependencies = [])
    {
    }
    /**
     * Checks if this plugin has permission to run, if not it notifies the admin
     *
     * @since 4.9
     *
     * @param string $main_class The Main/base class for this plugin
     *
     * @return bool Indicates if plugin should continue initialization
     */
    function tribe_check_plugin($main_class)
    {
    }
    /**
     * Append a path fragment to a URL preserving query arguments
     * and fragments.
     *
     * @since 4.3
     *
     * @param string $path The path to append to the existing, if any, one., e.g. `/some/path`
     *
     * @param string $url  A full URL in the `http://example.com/?query=var#frag` format.
     *
     * @return mixed|string
     */
    function tribe_append_path($url, $path)
    {
    }
    /**
     * Filterable `die` wrapper.
     *
     * @param string $status
     *
     * @return void|mixed Depending on the handler this function might return
     *                    a value or `die` before anything is returned.
     */
    function tribe_exit($status = '')
    {
    }
    /**
     * Tests to see if the requested variable is set either as a post field or as a URL
     * param and returns the value if so.
     *
     * Post data takes priority over fields passed in the URL query. If the field is not
     * set then $default (null unless a different value is specified) will be returned.
     *
     * The variable being tested for can be an array if you wish to find a nested value.
     *
     * @since 4.9.17 Included explicit check against $_REQUEST.
     *
     * @see   Tribe__Utils__Array::get()
     *
     * @param string|array $var
     * @param mixed        $default
     *
     * @return mixed
     */
    function tribe_get_request_var($var, $default = \null)
    {
    }
    /**
     * Grabs the $wp_query global in a safe way with some fallbacks that help prevent fatal errors
     * on sites where themes or other plugins directly manipulate the $wp_query global.
     *
     * @since 4.7.8
     *
     * @return WP_Query The $wp_query, the $wp_the_query if $wp_query empty, null otherwise.
     */
    function tribe_get_global_query_object()
    {
    }
    /**
     * Validation of Null or Truthy values for Shortcode Attributes.
     *
     * @since 5.1.4
     *
     * @param mixed $value Which value will be validated.
     *
     * @return bool|null   Sanitizes the value passed as a boolean or null.
     */
    function tribe_null_or_truthy($value = \null)
    {
    }
    /**
     * Validation of Null or Numerical values for Shortcode Attributes.
     * We don't use absint() since -1 is a common number used to indicate "all" or "infinite".
     *
     * @since 4.13.2
     *
     * @param mixed $value Which value will be validated.
     *
     * @return int|null   Sanitizes the value passed as an integer or null.
     */
    function tribe_null_or_number($value = \null)
    {
    }
    /**
     * Determines if the provided value should be regarded as 'true'.
     *
     * @param mixed $var
     *
     * @return bool
     */
    function tribe_is_truthy($var)
    {
    }
    /**
     * Utility function to convert booleans to text.
     *
     * @since 5.1.0
     *
     * @param bool $bool
     * @return string "true" or "false" based on the boolean value.
     */
    function tec_bool_to_string(bool $bool) : string
    {
    }
    /**
     * Utility function to convert booleans to text.
     *
     * @since 5.1.0
     *
     * @param bool $bool
     * @return int 1 (true) or 0 (false) based on the boolean value.
     */
    function tec_bool_to_int(bool $bool) : int
    {
    }
    /**
     * Sorting function based on Priority
     *
     * @since  4.7.20
     *
     * @param object|array $b Second subject to compare
     *
     * @param object|array $a First Subject to compare
     *
     * @return int
     */
    function tribe_sort_by_priority($a, $b)
    {
    }
    /**
     * Normalizes a list of terms to a list of fields.
     *
     * @since 4.5
     *
     * @param string $taxonomy The terms taxonomy.
     * @param string $field    The fields the terms should be normalized to.
     * @param        $terms    A term or array of terms to normalize.
     *
     * @return array An array of the valid normalized terms.
     */
    function tribe_normalize_terms_list($terms, $taxonomy, $field = 'term_id')
    {
    }
    /**
     * @see Tribe__Image__Uploader::upload_and_get_attachment_id()
     *
     * @param string|int $image The path to an image file, an image URL or an attachment post ID.
     *
     * @return int|bool The attachment post ID if the uploading and attachment is successful or the ID refers to an attachment;
     *                  `false` otherwise.
     */
    function tribe_upload_image($image)
    {
    }
    /**
     * Check whether variable is a WordPress or Tribe Error.
     *
     * Returns true if $thing is an object of the Tribe_Error or WP_Error class.
     *
     * @since 4.5.3
     *
     * @param mixed $thing Any old variable will do.
     *
     * @return bool Indicates if $thing was an error.
     */
    function tribe_is_error($thing)
    {
    }
    /**
     * Attempts to find and return an object of the specified type that is associated
     * with a specific hook.
     *
     * This is useful when third party code registers callbacks that belong to anonymous
     * objects and it isn't possible to obtain the reference any other way.
     *
     * @since 4.5.8
     *
     * @param string $class_name
     * @param string $hook
     * @param int    $priority
     *
     * @return object|false
     */
    function tribe_retrieve_object_by_hook($class_name, $hook, $priority)
    {
    }
    /**
     * A unified way of checking if WPML is activated.
     *
     * @since 4.6.2
     *
     * @return boolean
     */
    function tribe_is_wpml_active()
    {
    }
    /**
     * Checks if a post, optionally of a specific type, exists in the database.
     *
     * This is a low-level database check that will ignore caches and will
     * check if there is an entry, in the posts table, for the post.
     *
     * @since 4.7.7
     *
     * @param string|int $post_id_or_name Either a post ID or a post name.
     * @param null       $post_type       An optional post type, or a list of post types, the
     *                                    post should have; a logic OR will be used.
     *
     * @return bool|int The matching post ID if found, `false` otherwise
     */
    function tribe_post_exists($post_id_or_name, $post_type = \null)
    {
    }
    /**
     * Wrapper function for `tribe_events_get_the_excerpt` to prevent access the function when is not present on the
     * current site installation.
     *
     * @param $post
     *
     * @return null|string
     */
    function tribe_post_excerpt($post)
    {
    }
    /**
     * A convenience function used to cast errors to exceptions.
     *
     * Use in `set_error_handler` calls:
     *
     *      try{
     *          set_error_handler( 'tribe_catch_and_throw' );
     *          // ...do something that could generate an error...
     *          restore_error_handler();
     *      } catch ( RuntimeException $e ) {
     *          // Handle the exception.
     *      }
     *
     * @since 4.9.5
     *
     * @see   set_error_handler()
     * @see   restore_error_handler()
     * @throws RuntimeException The message will be the error message, the code will be the error code.
     */
    function tribe_catch_and_throw($errno, $errstr)
    {
    }
    /**
     * Checks whether a candidate string is a valid regular expression or not.
     *
     * @since 4.9.5
     *
     * @param string $candidate The candidate string to check, it must include the
     *                          regular expression opening and closing tags to validate.
     *
     * @return bool Whether a candidate string is a valid regular expression or not.
     */
    function tribe_is_regex($candidate)
    {
    }
    /**
     * Removes fence characters and modifiers from a regular expression string.
     *
     * Use this to go from a PCRE-format regex (PHP) to one SQL can understand.
     *
     * @since 4.9.5
     *
     * @param string $regex The input regular expression string.
     *
     * @return string The un-fenced regular expression string.
     */
    function tribe_unfenced_regex($regex)
    {
    }

    /**
     * Wrapper function for `register_rest_route` to allow for filtering any Tribe REST API endpoint.
     *
     * @since 4.9.12
     *
     * @param string $route     The base URL for route you are adding.
     * @param array  $args      Optional. Either an array of options for the endpoint, or an array of arrays for
     *                          multiple methods. Default empty array.
     * @param bool   $override  Optional. If the route already exists, should we override it? True overrides,
     *                          false merges (with newer overriding if duplicate keys exist). Default false.
     *
     * @param string $namespace The first URL segment after core prefix. Should be unique to your package/plugin.
     *
     * @return bool True on success, false on error.
     */
    function tribe_register_rest_route($namespace, $route, $args = [], $override = \false)
    {
    }
    /**
     * Gets the class instance / Tribe Container from the passed object or string.
     *
     * @since 4.10.0
     *
     * @see   \TEC\Common\lucatume\DI52\Builders\ValueBuilder\App::isBound()
     * @see   \tribe()
     *
     * @param string|object $class The plugin class' singleton name, class name, or instance.
     *
     * @return mixed|object|Tribe__Container|null Null if not found, else the result from tribe().
     */
    function tribe_get_class_instance($class)
    {
    }
    /**
     * Gets the lowest version number ever installed for the specified class of a plugin having a
     * `version_history_slug` property or a `VERSION` constant (i.e. Main classes).
     *
     * If user initially installed v2, downgraded to v1, then updated to v3, this will return v1.
     * If no historical version records, fallback is the class' current version.
     * If no version info found, it will return false.
     * Zero may have been logged as a past version but gets ignored.
     *
     * @since 4.10.0
     *
     * @param string|object $class The plugin class' singleton name, class name, or instance.
     *
     * @return string|boolean The SemVer version string or false if no info found.
     */
    function tribe_get_least_version_ever_installed($class)
    {
    }
    /**
     * Gets the highest version number ever installed for the specified class of a plugin having a
     * `version_history_slug` property or a `VERSION` constant (i.e. Main classes).
     *
     * If user initially installed v2, updated to v3, then downgraded to v2, this will return v3.
     * If no historical version records, fallback is the class' current version.
     * If no version info found, it will return false.
     * Zero may have been logged as a past version but gets ignored.
     *
     * @since 4.10.0
     *
     * @see \tribe_get_currently_installed_version() To get the current version, even if it's not the greatest.
     *
     * @param string|object $class The plugin class' singleton name, class name, or instance.
     *
     * @return string|boolean The SemVer version string or false if no info found.
     */
    function tribe_get_greatest_version_ever_installed($class)
    {
    }
    /**
     * Gets the plugin version history for a given main class.
     *
     * Important to note we cannot setup instances to get these values, we need to
     * use static mapping here, since generating a full instance will effectively
     * activate parts of the plugin behind the scenes.
     *
     * @since 4.12.14
     *
     * @param string $class Which plugin main class we are looking for.
     *
     * @return array|false
     */
    function tribe_plugin_version_history($class)
    {
    }
    /**
     * Gets the initially-recorded version number installed for the specified class of a plugin having a
     * `version_history_slug` property or a `VERSION` constant (i.e. Main classes).
     *
     * If user initially installed v2, downgraded to v1, then updated to v3, this will return v2.
     * If no historical version records, fallback is the class' current version.
     * If no version info found, it will return false.
     * Zero may have been logged as a past version but gets ignored.
     *
     * @since 4.10.0
     *
     * @param string|object $class The plugin class' singleton name, class name, or instance.
     *
     * @return string|boolean The SemVer version string or false if no info found.
     */
    function tribe_get_first_ever_installed_version($class)
    {
    }
    /**
     * Gets the current version number installed for the specified class of a plugin having a
     * `VERSION` constant (i.e. Main classes)--different logic than related functions.
     *
     * If user initially installed v2, downgraded to v1, then updated to v3, this will return v3.
     * Only looks at the class' current version, else false.
     *
     * @since 4.10.0
     *
     * @see \tribe_get_greatest_version_ever_installed() To get the greatest ever installed, even if not the current.
     *
     * @param string|object $class The plugin class' singleton name, class name, or instance.
     *
     * @return string|boolean The SemVer version string or false if no info found.
     */
    function tribe_get_currently_installed_version($class)
    {
    }
    /**
     * Checks if a plugin's initially-installed version was prior to the passed version.
     * If no info found, it will assume the plugin is old and return true.
     *
     * @since 4.10.0
     *
     * @param string|object $class   The plugin class' singleton name, class name, or instance.
     * @param string        $version The SemVer version string to compare.
     *
     * @return boolean Whether the plugin was installed prior to the passed version.
     */
    function tribe_installed_before($class, $version)
    {
    }
    /**
     * Checks if a plugin's initially-installed version was after the passed version.
     * If no info found, it will assume the plugin is old and return false.
     *
     * @since 4.10.0
     *
     * @param string|object $class   The plugin class' singleton name, class name, or instance.
     * @param string        $version The SemVer version string to compare.
     *
     * @return boolean Whether the plugin was installed after the passed version.
     */
    function tribe_installed_after($class, $version)
    {
    }
    /**
     * Checks if a plugin was installed at/on the passed version.
     * If no info found, it will assume the plugin is old and return false.
     *
     * @since 4.10.0
     *
     * @param string|object $class   The plugin class' singleton name, class name, or instance.
     * @param string        $version The SemVer version string to compare.
     *
     * @return boolean Whether the plugin was installed at/on the passed version.
     */
    function tribe_installed_on($class, $version)
    {
    }
    /**
     * Returns the sanitized version of the `$_REQUEST` super-global array.
     *
     * Note: the return value is cached. It will be resolve the first time the function is called, per HTTP request,
     * then the same return value will be returned. After the function has been called the first time, changes to the
     * `$_REQUEST` super-global will NOT be reflected in the function return value.
     * Call the function with `$refresh` set to `true` to refresh the function value.
     *
     * @since 4.9.18
     *
     * @param bool $refresh Whether to parse the `$_REQUEST` cache again and refresh the cache or not; defaults to
     *                      `false`.
     *
     * @return array The sanitized version of the `$_REQUEST` super-global.
     */
    function tribe_get_request_vars($refresh = \false)
    {
    }
    /**
     * Sanitizes a value according to its type.
     *
     * The function will recursively sanitize array values.
     *
     * @since 4.9.20
     *
     * @param mixed $value The value, or values, to sanitize.
     *
     * @return mixed|null Either the sanitized version of the value, or `null` if the value is not a string, number or
     *                    array.
     */
    function tribe_sanitize_deep(&$value)
    {
    }
    /**
     * Returns a query var parsing an input URL.
     *
     * @since 4.9.23
     *
     * @param string       $url       The URL to parse.
     * @param string|array $query_arg The query variable(s) to parse and return.
     * @param mixed|null   $default   The default value to return if the URL cannot be parsed, or the query variable is
     *                                not found.
     *
     * @return mixed|null The query variable value, if set, or the default value.
     */
    function tribe_get_query_var($url, $query_arg, $default = \null)
    {
    }
    /**
     * Runs a callback or Closure taking care to detach and reattach a set of filters.
     *
     * The purpose of this function is to make sure a certain callback will run in a "clean" filter environment where
     *  a set of filters (and actions) has been suspended to avoid side effects from applying to it.
     * The function guarantees the existing filters will be detached and re-attached only to run the callback, avoiding
     * issues where some piece of code might detach some filters and not re-attach them due to errors.
     *
     * @since 4.12.10
     *
     * @param array<string> $filters    A set of filter, or actions, handles to detach before running the callback and
     *                                  re-attach after.
     * @param callable      $do         The callback, or Closure, that should run in the context where the specified set of filters
     *                                  has been "suspended".
     *
     * @return mixed The result of the callback function.
     */
    function tribe_without_filters(array $filters, callable $do)
    {
    }
    /**
     * Runs a callbacks while suspending, removing and re-adding, a filter or action.
     *
     * The function will infer the priority of the filter, required for its correct detachment and re-attachment, on
     * its own.
     *
     * @since 4.12.12
     *
     * @param string   $filter_tag      The filter tag to suspend.
     * @param callable $filter_callback The filter_callback currently attached to the filter.
     * @param callable $do              The filter_callback that will be run detaching the `$filter_callback`.
     * @param int      $args            The number of arguments that should be used to re-attach the filtering callback to the filter.
     *
     * @return mixed The return value of the `$do` callback.
     */
    function tribe_suspending_filter($filter_tag, callable $filter_callback, callable $do, $args = 1)
    {
    }
    /**
     * Get the next increment of a cached incremental value.
     *
     * @since 4.14.7
     *
     * @param string $key Cache key for the incrementor.
     * @param string $expiration_trigger The trigger that causes the cache key to expire.
     * @param int $default The default value of the incrementor.
     *
     * @return int
     **/
    function tribe_get_next_cached_increment($key, $expiration_trigger = '', $default = 0)
    {
    }
    /**
     * Whether a post is a valid Event Series or not.
     *
     * @since 6.0.0
     *
     * @param int|WP_Post $post_id The post ID or object to check.
     *
     * @return bool Whether the post is an Event Series or not.
     */
    function tribe_is_event_series($post_id)
    {
    }
    /**
     * Return the first series associated with an event, if the event is private make sure to return `null` if the user
     * is not logged in.
     *
     * TODO: A more flexible approach to get the nth() series of an event or N series of an event.
     *
     * @since 6.0.0
     *
     * @param int $event_post_id The ID of the post ID event we are looking for.
     *
     * @return WP_Post|null The post representing the series otherwise `null`
     */
    function tec_event_series($event_post_id)
    {
    }
    /**
     * Determines if we should show the series title in the series marker.
     *
     * @since 6.0.0
     *
     * @param Series|int|null  $series The post object or ID of the series the event belongs to.
     * @param WP_Post|int|null $event  The post object or ID of the event we're displaying.
     *
     * @return boolean
     */
    function tec_should_show_series_title($series = \null, $event = \null)
    {
    }
    /**
     * Generates a list of classes for the marker label.
     *
     * @since 6.0.0
     *
     * @param Series|int|null  $series The post object or ID of the series the event belongs to.
     * @param WP_Post|int|null $event  The post object or ID of the event we're displaying.
     *
     * @return array<string> $classes A list of classes for the marker label.
     */
    function tec_get_series_marker_label_classes($series = \null, $event = \null)
    {
    }
    /**
     * If this function is defined, then Hello Elementor will call it to allow filtering
     * the template location.
     *
     * This function works a bit like the `do_parse_request` filter in WordPress Core: it
     * allows our code to either take charge of handling the template discovery or let
     * Elementor go through its own resolution.
     *
     * @since 5.7.0
     *
     * @param string $template The template that Elementor is currently filtering; e.g.
     *                         `single` or `archive`.
     *
     * @return bool Whether the template was correctly handled or not.
     */
    function elementor_theme_do_location($template)
    {
    }
    /**
     * Returns a value set on the current view template.
     *
     * This template tag should be used in View templates, after the View set up the loop.
     *
     * @since 4.9.4
     *
     * @param string|array $key     The key, or nested keys, to fetch the variable.
     * @param mixed        $default The default value that will be returned if the value is not set in the template or the
     *                              template is not set at all.
     *
     * @example
     *        ```php
     *        <?php
     *        // Return the value of the `events` variable set on the template or an empty array if not found.
     *        $events = tribe_events_template_var( 'events', [] );
     *
     * // Return the `keyword` value set in the `bar` array if the array `bar` variable is set and the `keyword` index
     * // is set on it or an empty string
     * $events = tribe_events_template_var( [ 'bar', 'keyword' ], '' );
     * ```
     *
     * @return mixed The template variable value, or the default value if not found.
     */
    function tribe_events_template_var($key, $default = \null)
    {
    }
    /**
     * register a meta group
     *
     * @uses Tribe__Events__Meta_Factory::register()
     * @deprecated 4.3
     *
     * @param string $meta_group_id
     * @param array  $args
     *
     * @return bool $success
     */
    function tribe_register_meta_group($meta_group_id, $args = [])
    {
    }
    /**
     * register a meta item
     *
     * @uses Tribe__Events__Meta_Factory::register()
     * @deprecated 4.3
     *
     * @param int   $meta_id
     * @param array $args
     *
     * @return bool $success
     */
    function tribe_register_meta($meta_id, $args = [])
    {
    }
    /**
     * Get the meta group.
     *
     * @deprecated 4.3
     *
     * @param      $meta_group_id
     * @param bool $is_the_meta
     *
     * @return bool|mixed|void
     */
    function tribe_get_meta_group($meta_group_id, $is_the_meta = \false)
    {
    }
    /**
     * Get the meta.
     *
     * @deprecated 4.3
     *
     * @param      $meta_id
     * @param bool $is_the_meta
     *
     * @return bool|mixed|void
     */
    function tribe_get_meta($meta_id, $is_the_meta = \false)
    {
    }
    /**
     * Get the args for a meta object.
     *
     * @deprecated 4.3
     *
     * @param        $meta_id
     * @param        $arg_key
     * @param string $type
     *
     * @return bool
     */
    function tribe_get_meta_arg($meta_id, $arg_key, $type = 'meta')
    {
    }
    /**
     * Get the template part for the meta object.
     *
     * @deprecated 4.3
     *
     * @param        $meta_id
     * @param        $template_key
     * @param string $type
     *
     * @return bool
     */
    function tribe_get_meta_template_part($meta_id, $template_key, $type = 'meta')
    {
    }
    /**
     * Set the visibility of the meta object.
     *
     * @deprecated 4.3
     *
     * @param        $meta_id
     * @param bool   $status
     * @param string $type
     */
    function tribe_set_the_meta_visibility($meta_id, $status = \true, $type = 'meta')
    {
    }
    /**
     * Set the template for the meta object.
     *
     * @deprecated 4.3
     *
     * @param        $meta_id
     * @param array  $template
     * @param string $type
     *
     * @return bool
     */
    function tribe_set_the_meta_template($meta_id, $template = [], $type = 'meta')
    {
    }
    /**
     * Set the meta priority to manage positioning.
     *
     * @deprecated 4.3
     *
     * @param        $meta_id
     * @param int    $priority
     * @param string $type
     *
     * @return bool
     */
    function tribe_set_meta_priority($meta_id, $priority = 100, $type = 'meta')
    {
    }
    /**
     * Set meta value for meta object.
     *
     * @deprecated 4.3
     *
     * @param        $meta_id
     * @param        $value
     * @param string $value_type
     * @param string $type
     *
     * @return bool
     */
    function tribe_set_meta_value($meta_id, $value, $value_type = 'meta_value', $type = 'meta')
    {
    }
    /**
     * Set the meta label for the meta object.
     *
     * @deprecated 4.3
     *
     * @param        $meta_id
     * @param string $label
     * @param string $type
     *
     * @return bool
     */
    function tribe_set_meta_label($meta_id, $label = '', $type = 'meta')
    {
    }
    /**
     * Get the event meta
     *
     * @deprecated 4.3
     *
     * @return mixed|void
     */
    function tribe_get_the_event_meta()
    {
    }
    /**
     * Simple display of meta group tag
     *
     * @deprecated 4.3
     *
     * @uses tribe_get_meta_group()
     * @return echo tribe_get_meta_group( $meta_group_id )
     */
    function tribe_display_the_event_meta()
    {
    }
    /**
     *  Simple diplay of meta group tag
     *
     * @uses tribe_get_meta_group()
     * @deprecated 4.3
     *
     * @param string $meta_group_id
     *
     * @return echo tribe_get_meta_group( $meta_group_id )
     */
    function tribe_display_meta_group($meta_group_id)
    {
    }
    /**
     *  Simple diplay of meta tag
     *
     * @uses tribe_get_meta()
     * @deprecated 4.3
     *
     * @param string $meta_id
     *
     * @return echo tribe_get_meta( $meta_id )
     */
    function tribe_display_meta($meta_id)
    {
    }
    function Tribe_Events_Importer_Load()
    {
    }
    /**
     * Create's an Event.
     *
     * Note: If ONLY the 'VenueID'/'OrganizerID' value is set in the 'Venue'/'Organizer' array,
     * then the specified Venue/Organizer will be associated with this Event without attempting
     * to edit the Venue/Organizer. If NO 'VenueID'/'OrganizerID' is passed, but other Venue/Organizer
     * data is passed, then a new Venue/Organizer will be created.
     *
     * Also note that this function can be used only for the creation of events, supplying
     * a post_type argument therefore is superfluous as it will be reset to the events post
     * type in any case.
     *
     * @category Events
     *
     * @link     http://codex.wordpress.org/Function_Reference/wp_insert_post
     *
     * @see      wp_insert_post()
     * @see      tribe_create_venue()
     * @see      tribe_create_organizer()
     *
     * @param array $args {
     *     An array of elements that make up a post to update or insert. Accepts anything from {@see wp_insert_post()}.
     *
     *     @type int    $ID                      The post ID. If equal to something other than 0,
     *                                           the post with that ID will be updated. Default 0.
     *     @type int    $post_author             The ID of the user who added the post. Default is
     *                                           the current user ID.
     *     @type string $post_date               The date of the post. Default is the current time.
     *     @type string $post_date_gmt           The date of the post in the GMT timezone. Default is
     *                                           the value of `$post_date`.
     *     @type mixed  $post_content            The post content. Default empty.
     *     @type string $post_content_filtered   The filtered post content. Default empty.
     *     @type string $post_title              The post title. Default empty.
     *     @type string $post_excerpt            The post excerpt. Default empty.
     *     @type string $post_status             The post status. Default 'draft'.
     *     @type string $post_type               The post type. Default 'post'.
     *     @type string $comment_status          Whether the post can accept comments. Accepts 'open' or 'closed'.
     *                                           Default is the value of 'default_comment_status' option.
     *     @type string $ping_status             Whether the post can accept pings. Accepts 'open' or 'closed'.
     *                                           Default is the value of 'default_ping_status' option.
     *     @type string $post_password           The password to access the post. Default empty.
     *     @type string $post_name               The post name. Default is the sanitized post title
     *                                           when creating a new post.
     *     @type string $to_ping                 Space or carriage return-separated list of URLs to ping.
     *                                           Default empty.
     *     @type string $pinged                  Space or carriage return-separated list of URLs that have
     *                                           been pinged. Default empty.
     *     @type string $post_modified           The date when the post was last modified. Default is
     *                                           the current time.
     *     @type string $post_modified_gmt       The date when the post was last modified in the GMT
     *                                           timezone. Default is the current time.
     *     @type int    $post_parent             Set this for the post it belongs to, if any. Default 0.
     *     @type int    $menu_order              The order the post should be displayed in. Default 0.
     *     @type string $post_mime_type          The mime type of the post. Default empty.
     *     @type string $guid                    Global Unique ID for referencing the post. Default empty.
     *     @type array  $post_category           Array of category IDs.
     *                                           Defaults to value of the 'default_category' option.
     *     @type array  $tags_input              Array of tag names, slugs, or IDs. Default empty.
     *     @type array  $tax_input               Array of taxonomy terms keyed by their taxonomy name. Default empty.
     *     @type array  $meta_input              Array of post meta values keyed by their post meta key. Default empty.
     *     @type string $EventStartDate          Start date of event (required).
     *     @type string $EventEndDate            End date of event (required).
     *     @type bool   $EventAllDay             Set to true if event has no start / end time and should run all day.
     *     @type string $EventStartHour          Event start hour (01-12 if `EventStartMeridian` is also passed, else 00-23).
     *     @type string $EventStartMinute        Event start minute (00-59).
     *     @type string $EventStartMeridian      Event start meridian (am or pm).
     *     @type string $EventEndHour            Event end hour (01-12 if `EventEndMeridian` is also passed, else 00-23).
     *     @type string $EventEndMinute          Event end minute (00-59).
     *     @type string $EventEndMeridian        Event end meridian (am or pm).
     *     @type bool   $EventHideFromUpcoming   Set to true to hide this Event from the upcoming list view.
     *     @type bool   $EventShowMapLink        Set to true to display a link to the map in the Event view.
     *     @type string $EventShowMap            Set to true to embed the map in the Event view.
     *     @type string $EventCost               Default cost of the Event.
     *     @type string $EventURL                Link to the Event Website or Third-Party page.
     *     @type string $FeaturedImage           URL or ID of a featured image.
     *     @type string $Venue                   Array of data to create or update an Venue to be associated with the Event {@link tribe_create_venue}.
     *     @type string $Organizer               Array of data to create or update an Organizer to be associated with the Event {@link tribe_create_organizer}.
     *     @type string $_ecp_custom_[ID]        Pro Custom fields (Events Calendar Pro only).
     * }
     *
     * @return int|bool ID of the event that was created. False if insert failed.
     */
    function tribe_create_event($args)
    {
    }
    /**
     * Update an Event.
     *
     * @category Events
     *
     * @link     http://codex.wordpress.org/Function_Reference/wp_update_post
     *
     * @see      wp_update_post()
     * @see      tribe_create_event()
     *
     * @param int|bool   $postId  ID of the event to be modified.
     * @param array      $args    Args for updating the post. See {@link tribe_create_event()} for more info.
     *
     * @return int|bool ID of the event that was created. False if update failed.
     */
    function tribe_update_event($postId, $args)
    {
    }
    /**
     * Delete an Event.
     *
     * @link     http://codex.wordpress.org/Function_Reference/wp_delete_post
     * @see      wp_delete_post()
     * @category Events
     *
     * @param int  $post_id      Post ID of the Event.
     * @param bool $force_delete Whether to bypass trash and force deletion. Defaults to false.
     *
     * @return bool false if delete failed.
     */
    function tribe_delete_event($post_id, $force_delete = \false)
    {
    }
    /**
     * Registers a post type as a linked post type for events
     *
     * @since 4.2
     *
     * @param string $post_type Post type slug
     * @param array $args Arguments for the linked post type - note: gets merged with get_post_type_object data
     *
     * @return boolean
     */
    function tribe_register_linked_post_type($post_type, $args = [])
    {
    }
    /**
     * Deregisters a post type as a linked post type for events
     *
     * @since 4.2
     *
     * @param string $post_type Post type slug
     *
     * @return boolean
     */
    function tribe_deregister_linked_post_type($post_type, $args = [])
    {
    }
    /**
     * Returns whether or not there are any linked posts for the given post id
     *
     * @since 4.2
     *
     * @param int $post_id Post ID of the object
     *
     * @return boolean
     */
    function tribe_has_linked_posts($post_id)
    {
    }
    /**
     * Returns all linked posts for the given post id
     *
     * Post collection is indexed by post type
     *
     * @since 4.2
     *
     * @param int $post_id Post ID of the object
     *
     * @return array
     */
    function tribe_get_linked_posts($post_id)
    {
    }
    /**
     * Returns whether or not there are linked posts of the specified post type
     *
     * @since 4.2
     *
     * @param int $post_id Post ID of the object
     * @param string $post_type Post type of linked posts to look for
     *
     * @return boolean
     */
    function tribe_has_linked_posts_by_post_type($post_id, $post_type)
    {
    }
    /**
     * Returns linked posts of the specified post type
     *
     * @since 4.2
     *
     * @param int $post_id Post ID of the object
     * @param string $post_type Post type of linked posts to look for
     *
     * @return array
     */
    function tribe_get_linked_posts_by_post_type($post_id, $post_type)
    {
    }
    /**
     * Returns the linked post types
     *
     * @since 4.2
     *
     * @return array
     */
    function tribe_get_linked_post_types()
    {
    }
    /**
     * Returns whether or not there are any linked post types
     *
     * @since 4.2
     *
     * @return boolean
     */
    function tribe_has_linked_post_types()
    {
    }
    /**
     * Returns whether or not the provided post type is a linked post type
     *
     * @since 4.2
     *
     * @param string $post_type Post type slug
     *
     * @return boolean
     */
    function tribe_is_linked_post_type($post_type)
    {
    }
    /**
     * Links two posts together
     *
     * @since 4.2
     *
     * @param int $target_post_id Post ID of post to add linked post to
     * @param int $subject_post_id Post ID of post to add as a linked post to the target
     *
     * @return boolean
     */
    function tribe_link_post($target_post_id, $subject_post_id)
    {
    }
    /**
     * Unlinks two posts from eachother
     *
     * @since 4.2
     *
     * @param int $target_post_id Post ID of post to remove linked post from
     * @param int $subject_post_id Post ID of post to remove as a linked post from the target
     */
    function tribe_unlink_post($target_post_id, $subject_post_id)
    {
    }
    /**
     * Returns the post type's form field container name
     *
     * @since 4.2
     *
     * @param string $linked_post_type Linked post type
     *
     * @return string
     */
    function tribe_get_linked_post_container($post_type)
    {
    }
    /**
     * Returns the post type's ID field name
     *
     * @since 4.2
     *
     * @param string $linked_post_type Linked post type
     *
     * @return string
     */
    function tribe_get_linked_post_id_field_index($post_type)
    {
    }
    /**
     * Returns the post type's name field
     *
     * @since 4.2
     *
     * @param string $linked_post_type Linked post type
     *
     * @return string
     */
    function tribe_get_linked_post_name_field_index($post_type)
    {
    }
    /**
     * Create an Organizer
     *
     * $args accepts all the args that can be passed to wp_insert_post().
     * In addition to that, the following args can be passed specifically
     * for the process of creating an Organizer:
     *
     * - Organizer string - Title of the Organizer. (required)
     * - Email string - Email address of the Organizer.
     * - Website string - URL of the Organizer.
     * - Phone string - Phone number for the Organizer.
     *
     * @param array $args Elements that make up post to insert.
     *
     * @return int ID of the Organizer that was created. False if insert failed.
     * @link     http://codex.wordpress.org/Function_Reference/wp_insert_post
     * @see      wp_insert_post()
     * @category Organizers
     */
    function tribe_create_organizer($args)
    {
    }
    /**
     * Update an Organizer
     *
     * @param int   $postId ID of the Organizer to be modified.
     * @param array $args   Args for updating the post. See {@link tribe_create_organizer()} for more info.
     *
     * @return int ID of the Organizer that was created. False if update failed.
     * @link     http://codex.wordpress.org/Function_Reference/wp_update_post
     * @see      wp_update_post()
     * @see      tribe_create_organizer()
     * @category Organizers
     */
    function tribe_update_organizer($postId, $args)
    {
    }
    /**
     * Delete an Organizer
     *
     * @param int  $postId       ID of the Organizer to be deleted.
     * @param bool $force_delete Whether to bypass trash and force deletion. Defaults to false.
     *
     * @return bool false if delete failed.
     * @link     http://codex.wordpress.org/Function_Reference/wp_delete_post
     * @see      wp_delete_post()
     * @category Organizers
     */
    function tribe_delete_organizer($postId, $force_delete = \false)
    {
    }
    /**
     * Returns TEC REST API URL prefix.
     *
     * @return string TEC REST API URL prefix; default `wp-json/tec/v1`.
     */
    function tribe_events_rest_url_prefix()
    {
    }
    /**
     * Retrieves the URL to a TEC REST endpoint on a site.
     *
     * Note: The returned URL is NOT escaped.
     *
     * @global WP_Rewrite $wp_rewrite
     *
     * @param string      $path    Optional. TEC REST route. Default '/'.
     * @param string      $scheme  Optional. Sanitization scheme. Default 'rest'.
     * @param int         $blog_id Optional. Blog ID. Default of null returns URL for current blog.
     *
     * @return string Full URL to the endpoint.
     */
    function tribe_events_rest_url($path = '/', $scheme = 'rest', $blog_id = \null)
    {
    }
    /**
     * Create a Venue
     *
     * $args accepts all the args that can be passed to wp_insert_post().
     * In addition to that, the following args can be passed specifically
     * for the process of creating a Venue:
     *
     * - Venue string - Title of the Venue. (required)
     * - Country string - Country code for the Venue country.
     * - Address string - Street address of the Venue.
     * - City string - City of the Venue.
     * - State string - Two letter state abbreviation.
     * - Province string - Province of the Venue.
     * - Zip string - Zip code of the Venue.
     * - Phone string - Phone number for the Venue.
     *
     * @param array $args Elements that make up post to insert.
     *
     * @return int ID of the Venue that was created. False if insert failed.
     * @link     http://codex.wordpress.org/Function_Reference/wp_insert_post
     * @see      wp_insert_post()
     * @category Venues
     */
    function tribe_create_venue($args)
    {
    }
    /**
     * Update a Venue
     *
     * @param int   $postId ID of the Venue to be modified.
     * @param array $args   Args for updating the post. See {@link tribe_create_venue()} for more info.
     *
     * @return int ID of the Venue that was created. False if update failed.
     * @link     http://codex.wordpress.org/Function_Reference/wp_update_post
     * @see      wp_update_post()
     * @see      tribe_create_venue()
     * @category Venues
     */
    function tribe_update_venue($postId, $args)
    {
    }
    /**
     * Delete a Venue
     *
     * @param int  $postId       ID of the Venue to be deleted.
     * @param bool $force_delete Whether to bypass trash and force deletion. Defaults to false.
     *
     * @return bool false if delete failed.
     * @link     http://codex.wordpress.org/Function_Reference/wp_delete_post
     * @see      wp_delete_post()
     * @category Venues
     */
    function tribe_delete_venue($postId, $force_delete = \false)
    {
    }
    /**
     * Compares a given version to the required PHP version
     *
     * Normally we use Constant: PHP_VERSION
     *
     * @param  string  $version  Which PHP version we are checking against
     *
     * @since  4.8
     *
     * @return bool
     */
    function tribe_is_not_min_php_version($version = \PHP_VERSION)
    {
    }
    /**
     * Which is our required PHP min version
     *
     * @since  4.8
     *
     * @return string
     */
    function tribe_get_php_min_version()
    {
    }
    /**
     * Returns the error message when php version min doesn't check
     *
     * @since  4.8
     *
     * @return string
     */
    function tribe_not_php_version_message()
    {
    }
    /**
     * Fetches the name of the plugins that are not compatible with current PHP version
     *
     * @since  4.8
     *
     * @return array
     */
    function tribe_not_php_version_names()
    {
    }
    /**
     * Echoes out the error for the PHP min version as a WordPress admin Notice
     *
     * @since  4.8
     *
     * @return void
     */
    function tribe_not_php_version_notice()
    {
    }
    /**
     * Loads the Text domain for non-compatible PHP versions
     *
     * @since  4.8
     *
     * @param string $domain Which domain we will try to translate to
     * @param string $file   Where to look for the lang folder
     *
     * @return void
     */
    function tribe_not_php_version_textdomain($domain, $file)
    {
    }
    /**
     * End Date formatted for display
     *
     * Returns the event end date that observes the end of day cutoff
     *
     * @category Events
     * @see      http://php.net/manual/en/function.date.php
     *
     * @param int|WP_Post $event        The event (optional).
     * @param bool        $display_time If true shows date and time, if false only shows date.
     * @param string      $date_format  Allows date and time formatting using standard php syntax.
     * @param string      $timezone     Timezone in which to present the date/time (or default behaviour if not set).
     *
     * @return string|null Date
     */
    function tribe_get_display_end_date($event = \null, $display_time = \true, $date_format = '', $timezone = \null)
    {
    }
    /**
     * Given a date and an event, returns true or false if the event is happening on that date
     * This function properly adjusts for the EOD cutoff and multi-day events
     *
     * @param null $date
     * @param null $event
     *
     * @return mixed|void
     */
    function tribe_event_is_on_date($date = \null, $event = \null)
    {
    }
    /**
     * Event-specific wrapper for wp_timezone_choice().
     *
     * @since 4.6.5
     *
     * @param string $selected_zone
     * @param string $locale (optional)
     *
     * @return string
     */
    function tribe_events_timezone_choice($selected_zone, $locale = \null)
    {
    }
    /**
     * Checks whether the specified event ends on date or not.
     *
     * The method is aware of timezone settings and will mark an event as ending on a date depending on that.
     * E.g. an America/Los_Angeles, 2019-04-10, 2pm to 7pm event ends on the same day if using the
     * America/Los_Angeles timezone but ends on the following day (4am of 2019-04-11) in the Paris timezone.
     * The method id day based, hours and minutes, if provided in the date, are not considered.
     *
     * @since 4.9
     *
     * @param WP_Post|int $event The event post object; the `EventEndDate` property must be set.
     * @param mixed      $date  The date to compare the event end date with; it can be an object, string or timestamp.
     *
     * @return bool Whether the specified date is the last day of the event, timezone-wise, or not.
     */
    function tribe_event_ends_on($event, $date)
    {
    }
    /**
     * Single Day Test
     *
     * Returns true if the query is set for single day, false otherwise
     *
     * @return bool
     */
    function tribe_is_day() : bool
    {
    }
    /**
     * Link Event Day.
     *
     * @param string $date Which date was passed to build the URL.
     *
     * @return string URL.
     */
    function tribe_get_day_link($date = \null)
    {
    }
    /**
     * Get the next day's date
     *
     * @deprecated 6.0.0
     *
     * @category Events
     *
     * @return string
     */
    function tribe_get_next_day_date($start_date)
    {
    }
    /**
     * Get the previous day's date
     *
     * @deprecated 6.0.0
     *
     * @category Events
     *
     * @return string
     */
    function tribe_get_previous_day_date($start_date)
    {
    }
    /**
     * Fetches and returns a decorated post object representing an Event.
     *
     * @since 4.9.7
     *
     * @param null|int|WP_Post $event  The event ID or post object or `null` to use the global one.
     * @param string|null      $output The required return type. One of `OBJECT`, `ARRAY_A`, or `ARRAY_N`, which
     *                                 correspond to a WP_Post object, an associative array, or a numeric array,
     *                                 respectively. Defaults to `OBJECT`.
     * @param string           $filter Type of filter to apply. Accepts 'raw', a valid date string or
     *                                 object to localize the event in a specific time-frame.
     * @param bool             $force  Whether to force a re-fetch ignoring cached results or not.
     *
     * @return array|mixed|void|WP_Post|null {
     *                              The Event post object or array, `null` if not found.
     *
     *                              @type string $start_date The event start date, in `Y-m-d H:i:s` format.
     *                              @type string $start_date_utc The event UTC start date, in `Y-m-d H:i:s` format.
     *                              @type string $end_date The event end date, in `Y-m-d H:i:s` format.
     *                              @type string $end_date_utc The event UTC end date, in `Y-m-d H:i:s` format.
     *                              @type array $dates An array containing the event.start, end and UTC date objects. {
     *                                              @type DateTimeImmutable $start The event start date object.
     *                                              @type DateTimeImmutable $start_utc The event UTC start date object.
     *                                              @type DateTimeImmutable $end The event end date object.
     *                                              @type DateTimeImmutable $end_utc The event UTC end date object.
     *                                              @type DateTimeImmutable $start_site The event start date object in
     *                                                                                  the site timezone.
     *                                              @type DateTimeImmutable $end_site The event end date object in the
     *                                                                                  site timezone.
     *                                              @type DateTimeImmutable $start_display The event start date object
     *                                                                                     in the site or event timezone
     *                                                                                     depending on the setting.
     *                                              @type DateTimeImmutable $end_display The event end date object in
     *                                                                                     the site or event timezone
     *                                                                                     depending on the setting.
     *                                          }
     *                              @type string $timezone The event timezone string.
     *                              @type int $duration The event duration in seconds.
     *                              @type false|int $multiday Whether the event is multi-day or not and its day.
     *                                                        duration if it is.
     *                              @type bool $all_day Whether the event is an all-day one or not.
     *                              @type null|bool $starts_this_week Whether the event starts on the week of the date
     *                                                                specified in the `$filter` argument or not, `null`
     *                                                                if no date is specified in the filter.
     *                              @type null|bool $ends_this_week Whether the event ends on the week of the date
     *                                                              specified in the `$filter` argument or not, `null`
     *                                                              if no date is specified in the filter.
     *                              @type null|bool $happens_this_week Whether the event happens on the week of the date
     *                                                              specified in the `$filter` argument or not, `null`
     *                                                              if no date is specified in the filter.
     *                              @type null|int $this_week_duration The days duration of the event on the week
     *                                                                 specified in the `$filter` argument, `null`
     *                                                                 if no date is specified in the filter.
     *                              @type bool $featured Whether the event is a featured one or not.
     *                              @type string $cost The event formatted cost string, as returned by the `tribe_get_cost`
     *                                                 `tribe_get_cost` function.
     *                              @type Lazy_Collection $organizers A collection of Organizers, lazily fetched and
     *                                                                eventually resolved to an array.
     *                              @type Lazy_Collection $venues A collection of Venues, lazily fetched and
     *                                                            eventually resolved to an array.
     *                              @type Post_Thumbnail $thumbnail The post thumbnail information.
     *                              @type Lazy_String $schedule_details The event schedule details, as produced by the
     *                                                                  `tribe_events_event_schedule_details` function.
     *                              @type Lazy_String $plain_schedule_details The event schedule details, without HTML
     *                                                                        tags.
     *                          }
     */
    function tribe_get_event($event = \null, $output = \OBJECT, $filter = 'raw', $force = \false)
    {
    }
    /**
     * Includes a view file, runs hooks around the view
     *
     * @param bool|string $view View slug
     *
     **/
    function tribe_get_view($view = \false)
    {
    }
    /**
     * Get Event Label Singular.
     * Returns the singular version of the Event Label.
     *
     * Note: the output of this function is not escaped.
     * You should escape it wherever you use it!
     *
     * @since 3.10
     * @since 5.1.6 remove escaping.
     *
     * @return string The singular version of the Event Label.
     */
    function tribe_get_event_label_singular()
    {
    }
    /**
     * Get Event Label Singular lowercase.
     * Returns the lowercase singular version of the Event Label.
     *
     * Note: the output of this function is not escaped.
     * You should escape it wherever you use it!
     *
     * @since 4.1.1
     * @since 5.1.6 remove escaping.
     *
     * @return string The lowercase singular version of the Event Label.
     */
    function tribe_get_event_label_singular_lowercase()
    {
    }
    /**
     * Get Event Label Plural.
     * Returns the plural version of the Event Label.
     *
     * Note: the output of this function is not escaped.
     * You should escape it wherever you use it!
     *
     * @since 3.10
     * @since 5.1.6 remove escaping.
     *
     * @return string The plural version of the Event Label.
     */
    function tribe_get_event_label_plural()
    {
    }
    /**
     * Get Event Label Plural lowercase.
     * Returns the plural version of the Event Label.
     *
     * Note: the output of this function is not escaped.
     * You should escape it wherever you use it!
     *
     * @since 4.1.1
     * @since 5.1.6 remove escaping.
     *
     * @return string The lowercase plural version of the Event Label.
     */
    function tribe_get_event_label_plural_lowercase()
    {
    }
    /**
     * Get the filtered text label for the "Today" button on calendar views.
     *
     * @since 6.0.2
     *
     * @param \Tribe\Events\Views\V2\View_Interface $view The View currently rendering.
     *               Hint: In templates, you can call $this->get_view() to get the view.
     *
     * @return string The label for the "Today" button.
     */
    function tec_events_get_today_button_label($view = \null)
    {
    }
    /**
     * Includes a template part, similar to the WP get template part, but looks
     * in the correct directories for Tribe Events templates
     *
     * @uses Tribe__Templates::getTemplateHierarchy
     *
     * @param null|string $name
     *
     * @param array       $data optional array of vars to inject into the template part
     *
     * @param string      $slug
     */
    function tribe_get_template_part($slug, $name = \null, array $data = \null)
    {
    }
    /**
     * Check if the current request is for a tribe view via ajax
     *
     * @since    6.0.0 Refactored to use tribe_context().
     *
     * @param bool|string $view View slug.
     *
     * @return bool
     * @category Events
     */
    function tribe_is_ajax_view_request($view = \false)
    {
    }
    /**
     * Event Type Test
     *
     * Checks type of $postId to determine if it is an Event
     *
     * @param int|WP_Post The event/post id or object. (optional)
     *
     * @return bool true if this post is an Event post type
     * @category Events
     */
    function tribe_is_event($postId = \null)
    {
    }
    /**
     * Get Events from the database.
     *
     * Queries the events using the Query wrapper around the Events Repository.
     *
     * @link     https://developer.wordpress.org/reference/classes/wp_query/
     *
     * @uses     tribe_events()
     * @uses     Tribe__Events__Query::getEvents
     *
     * @param array $args          {
     *                             Optional. Array of Query parameters.
     *
     * @type string $start_date    Minimum start date of the Event.
     * @type string $end_date      Maximum end date of the Event.
     * @type string $eventDate     A specific Event date for the Query.
     * @type bool   $hide_upcoming Hide events that are not on eventDate, internal usage
     * @type int    $venue         Select events from a specific Venue
     * @type int    $organizer     Select events from a specific Organizer
     * @type string $eventDisplay  How to display the Events, internal usage
     *                             }
     *
     * @param bool  $full          Whether to return an array of event posts (default) or the query object
     *                             to fetch them.
     *
     * @return array|WP_Query A list of event posts matching the query arguments or a WP_Query instance
     *                        if the `$full` argument is set to `true`.
     */
    function tribe_get_events($args = [], $full = \false)
    {
    }
    /**
     * Returns the current event post object (if there is one) or else null.
     *
     * Optionally the post object or ID of an event can be passed in and,
     * again, the event post object will be returned if possible.
     *
     * @param $event
     *
     * @return null|WP_Post
     * @category Events
     */
    function tribe_events_get_event($event = \null)
    {
    }
    /**
     * All Day Event Test
     *
     * Returns true if the event is an all day event
     *
     * @param int $postId (optional)
     *
     * @return bool
     * @category Events
     */
    function tribe_event_is_all_day($postId = \null)
    {
    }
    /**
     * Multi-day Event Test
     *
     * Returns true if the event spans multiple days
     *
     * @param int $postId (optional)
     *
     * @return bool true if event spans multiple days
     * @category Events
     */
    function tribe_event_is_multiday($postId = \null)
    {
    }
    /**
     * Detect if an Event is Past
     *
     * Returns true if the current time is past the event end time
     *
     * @param null $event
     *
     * @return bool
     */
    function tribe_is_past_event($event = \null)
    {
    }
    /**
     * Returns an array terms `term_id` from the taxonomy `tribe_cat` for a given event.
     *
     * @since 3.0.0
     * @since 6.0.11 Type hinting the return to array.
     *
     * @uses     wp_get_object_terms()
     *
     * @param int|string|WP_Post $post_id
     *
     * @return array<int>
     */
    function tribe_get_event_cat_ids($post_id = 0) : array
    {
    }
    /**
     * Event Category slugs
     *
     * Display the event category ID as a class for events wrapper
     *
     * @uses     wp_get_object_terms()
     * @category Events
     */
    function tribe_get_event_cat_slugs($post_id = 0)
    {
    }
    /**
     * Single event taxonomy terms
     *
     * Get the term list by taxonomy (default categories) for a single event
     *
     * @param int   $post_id
     * @param array $args
     *
     * @return string HTML string of taxonomy terms
     * @category Events
     */
    function tribe_get_event_taxonomy($post_id = \null, $args = [])
    {
    }
    /**
     * Event Categories (Display)
     *
     * Display the event categories with display param
     *
     * @uses     tribe_get_event_taxonomy()
     * @replaces tribe_meta_event_cats()
     *
     * @param int   $post_id
     * @param array $args
     *
     * @return string $html (echo if provided in $args)
     * @category Events
     */
    function tribe_get_event_categories($post_id = \null, $args = [])
    {
    }
    /**
     * Event Tags (Display)
     *
     * Display the event tags
     *
     * @uses     the_terms()
     *
     * @param string      $separator
     * @param bool        $echo
     *
     * @param null|string $label
     *
     * @return array
     * @category Events
     */
    function tribe_meta_event_tags($label = \null, $separator = ', ', $echo = \true)
    {
    }
    /**
     * Event Post Meta
     *
     * Get event post meta.
     *
     * @param int|null    $postId (optional)
     * @param string|bool $meta   name of the meta_key
     * @param bool        $single determines if the results should be a single item or an array of items.
     *
     * @return mixed meta value(s)
     * @category Events
     */
    function tribe_get_event_meta($postId = \null, $meta = \false, $single = \true)
    {
    }
    /**
     * Event Category Name
     *
     * Return the current event category name based the url.
     *
     * @return null|string Name of the Event Category
     * @category Events
     */
    function tribe_meta_event_category_name()
    {
    }
    /**
     * Display the event tags in a list with links to the event tag archive.
     *
     * @since 5.16.0
     *
     * @param null|string $label     The label for the term list.
     * @param string      $separator The separator of each term.
     * @param bool        $echo      , Whether to echo or return the list.
     *
     * @return string|void The html list of tags or void if no terms.
     */
    function tribe_meta_event_archive_tags($label = \null, $separator = ', ', $echo = \true)
    {
    }
    /**
     * Current Template
     *
     * Get the current page template that we are on
     *
     * @since    6.0.0 Only relevant for single and embed
     *
     * @return string Page template
     * @category Events
     */
    function tribe_get_current_template()
    {
    }
    /**
     * Venue Type Test
     *
     * Checks type of $postId to determine if it is a Venue
     *
     * @param int $postId (optional)
     *
     * @return bool True if post type id Venue
     * @category Venues
     */
    function tribe_is_venue($postId = \null)
    {
    }
    /**
     * Organizer Type Test
     *
     * Checks type of $postId to determine if it is a Organizer
     *
     * @param int $postId (optional)
     *
     * @return bool True if post type id Venue
     * @category Organizers
     */
    function tribe_is_organizer($postId = \null)
    {
    }
    /**
     * HTML Before Event (Display)
     *
     * Display HTML to output before the event template
     *
     * @category Events
     */
    function tribe_events_before_html()
    {
    }
    /**
     * HTML After Event (Display)
     *
     * Display HTML to output after the event template
     *
     * @category Events
     */
    function tribe_events_after_html()
    {
    }
    /**
     * Prints out or returns classes on an event wrapper
     *
     * @param $event |0 post id or object
     * @param $echo  |true
     *
     **@category Events
     */
    function tribe_events_event_classes($event = 0, $echo = \true)
    {
    }
    /**
     * Prints out data attributes used in the template header tags
     *
     * @param string|null $current_view
     *
     **@category Events
     */
    function tribe_events_the_header_attributes($current_view = \null)
    {
    }
    /**
     * Return an array with the days of the week, numbered with respect to the start_of_week WP option
     *
     * @param string $format the display format for the days of the week
     *
     * @return array Days of the week.
     **@category Events
     */
    function tribe_events_get_days_of_week($format = \null)
    {
    }
    /**
     * Display Cost Field
     *
     * Conditional tag to determine if the cost field should be shown in the admin editors.
     *
     * @return bool
     * @category Cost
     */
    function tribe_events_admin_show_cost_field()
    {
    }
    /**
     * Get an event's cost
     *
     * @param null|int $post_id              (optional)
     * @param bool     $with_currency_symbol Include the currency symbol
     *
     * @return string Cost of the event.
     * @category Cost
     */
    function tribe_get_cost($post_id = \null, $with_currency_symbol = \false)
    {
    }
    /**
     * Returns the event cost complete with currency symbol.
     *
     * Essentially an alias of tribe_get_cost(), as if called with the $withCurrencySymbol
     * argument set to true. Useful for callbacks.
     *
     * @param null $postId
     *
     * @return mixed|void
     * @category Cost
     */
    function tribe_get_formatted_cost($postId = \null)
    {
    }
    /**
     * Get the minimum cost of all events.
     *
     * @return int the minimum cost.
     * @category Cost
     */
    function tribe_get_minimum_cost()
    {
    }
    /**
     * Get the maximum cost of all events.
     *
     * @return int the maximum cost.
     * @category Cost
     */
    function tribe_get_maximum_cost()
    {
    }
    /**
     * Indicates if there events without a specific cost (as distinct from
     * free events).
     *
     * @return bool if uncosted events exist
     */
    function tribe_has_uncosted_events()
    {
    }
    /**
     * Event in Category Conditional
     *
     * Returns true if the event is in the specified category slug
     *
     * @param string $event_cat_slug
     * @param int    $event_id
     *
     * @return bool
     * @category Events
     */
    function tribe_event_in_category($event_cat_slug, $event_id = \null)
    {
    }
    /**
     * Return the featured image for an event (within the loop automatically will get event ID).
     *
     * Where possible, the image will be returned as a well formed <img> tag contained in a link
     * element and wrapped in a div used for targetting featured images from stylesheet. By setting
     * the two final and optional parameters to false, however, it is possible to retrieve only
     * the image URL itself.
     *
     * @param int    $post_id
     * @param string $size
     * @param bool   $link
     * @param bool   $wrapper
     *
     * @return string
     * @category Events
     *
     */
    function tribe_event_featured_image($post_id = \null, $size = 'full', $link = \true, $wrapper = \true)
    {
    }
    /**
     * Return the details of the start/end date/time.
     *
     * The highest level means of customizing this function's output is simply to adjust the date format settings under
     * Events > Settings > Display, and WordPress time formats (via the General Settings admin screen).
     * Beyond that, however, there are two filters which can be used to exercise further control here.
     *
     * The first is 'tribe_events_event_schedule_details_formatting' which allows an array of format settings to be
     * altered - it's basic make-up is as a simple set of key:value pairs as follows.
     *
     * "show_end_time": for single day events only (not including all day events) it may not always be desirable to
     *     include the end time. In that situation, this setting can be set to false and the end time will not be
     *     displayed.
     *
     * "time": if it is undesirable to show times and only dates should be displayed then this setting can be set to
     *     false. If it is false it will by extension cause 'show_end_time' to be false.
     *
     * The resulting string can also be caught and manipulated, or completely overridden, using the
     * 'tribe_events_event_schedule_details' filter, should none of the above settings be sufficient.
     *
     * @todo     [BTRIA-644]: Use tribe_get_datetime_format() and related functions if possible.
     *
     * @param int|null $event  The event post ID, or `null` to use the global event.
     * @param string   $before A string to prepend before the schedule details.
     * @param string   $after  A string to append after the schedule details.
     * @param bool     $html   Whether to use HTML elements in the output string or not; defaults to `true`.
     *
     * @return string The human-readable event schedule details formatted according to the current settings.
     * @category Events
     */
    function tribe_events_event_schedule_details($event = \null, $before = '', $after = '', $html = \true)
    {
    }
    /**
     * Return the short details of the start/end date/time.
     *
     * @see tribe_events_event_schedule_details() for the format of the schedule details.
     *
     * @param int|null $event  The event post ID, or `null` to use the global event.
     * @param string   $before A string to prepend before the schedule details.
     * @param string   $after  A string to append after the schedule details.
     * @param bool     $html   Whether to use HTML elements in the output string or not; defaults to `true`.
     *
     * @return string The human-readable event short schedule details formatted according to the current settings.
     */
    function tribe_events_event_short_schedule_details($event = \null, $before = '', $after = '', $html = \true)
    {
    }
    /**
     * Returns json for javascript templating functions throughout the plugin.
     *
     * @deprecated 6.0.0 We have no direct replacement as this can be incredibly bad for performance.
     *
     * @param mixed $__deprecated
     * @param array $additional
     *
     * @return string
     */
    function tribe_events_template_data($__deprecated = \null, array $additional = [])
    {
    }
    /**
     * Using a filter that each view will hook in it allows templates to get what is the current view being rendered.
     *
     * @since 6.0.0
     *
     * @return null|\Tribe\Events\Views\V2\View_Interface
     */
    function tec_events_get_current_view()
    {
    }
    /**
     * Display the Events Calendar promo banner
     *
     * @param bool $echo Whether or not to echo the banner, if false, it's returned
     *
     * @return string
     **@category Events
     *
     */
    function tribe_events_promo_banner($echo = \true)
    {
    }
    /**
     * Returns the URL for use in the tribe bar form's action attribute.
     *
     * @return string URL for current tribe bar form action.
     */
    function tribe_events_get_current_filter_url()
    {
    }
    /**
     * Get and increment tab index in form fields
     *
     */
    function tribe_events_get_tab_index()
    {
    }
    /**
     * Echo and increment tab index in form fields
     *
     */
    function tribe_events_tab_index()
    {
    }
    /**
     * Check if a particular view is enabled
     *
     * @since 6.0.0 Updated to use \Tribe\Events\Views\V2\Manager.
     *
     * @param string $view Slug of view to check.
     *
     * @return bool
     **/
    function tribe_events_is_view_enabled($view)
    {
    }
    /**
     * A Excerpt method used across the board on our Events Plugin Suite.
     *
     * By default it removes all shortcodes, the reason for this is that shortcodes added by other plugins/themes
     * may not have been registered by the time our ajax responses are generated. To avoid leaving unparsed
     * shortcodes in our excerpts then we strip out anything that looks like one.
     *
     * @param WP_Post|int|null $post                       The Post Object|ID, if null defaults to `get_the_ID()`
     * @param array            $allowed_html               The wp_kses compatible array
     * @param boolean          $skip_postdata_manipulation Optional. Defaults to false. When true, the resetting of global $post variable is disabled. (Useful for
     *                                                     some contexts like month view.)
     *
     * @return string|null Will return null on Bad Post Instances
     * @category Events
     *
     */
    function tribe_events_get_the_excerpt($post = \null, $allowed_html = \null, $skip_postdata_manipulation = \false)
    {
    }
    /**
     * Returns the latest known event end date, which can be expected to be a string
     * in MySQL datetime format (unless some other specific format is provided).
     *
     * If this is impossible to determine it will return boolean false.
     *
     * @param string $format
     *
     * @return mixed bool|string
     * @category Events
     *
     */
    function tribe_events_latest_date($format = \Tribe__Date_Utils::DBDATETIMEFORMAT)
    {
    }
    /**
     * Returns the earliest known event start date, which can be expected to be a string
     * in MySQL datetime format (unless some other specific format is provided).
     *
     * If this is impossible to determine it will return boolean false.
     *
     * @param string $format
     *
     * @return mixed bool|string
     * @category Events
     *
     */
    function tribe_events_earliest_date($format = \Tribe__Date_Utils::DBDATETIMEFORMAT)
    {
    }
    /**
     * Get the default value for a field
     *
     * @param string $field
     *
     * @return mixed
     */
    function tribe_get_default_value($field)
    {
    }
    /**
     * Gets the render context of the given query
     *
     * @param WP_Query $query Query object
     *
     * @return string
     */
    function tribe_get_render_context($query = \null)
    {
    }
    /**
     * Returns or echoes a url to a file in the Events Calendar plugin resources directory
     *
     * @param string $resource the filename of the resource
     * @param bool   $echo     whether or not to echo the url
     * @param string $root_dir directory to hunt for resource files (src or common)
     *
     * @return string
     **@category Events
     */
    function tribe_events_resource_url($resource, $echo = \false, $root_dir = 'src')
    {
    }
    /**
     * Utility function to compile separated lists.
     *
     * @param string $body
     * @param string $separator
     * @param string $field
     *
     * @return string
     */
    function tribe_separated_field($body, $separator, $field)
    {
    }
    /**
     * Tests if we are on the site homepage and if it is set to display the main events page.
     *
     * As WordPress front page it might be different from is_home, if we have a front page on the reading options and
     * if the User is on that page, this function will return true otherwise will return false. So either if the User has
     * the frontpage set on the reading options and the User is visiting this page.
     *
     * Another consideration about this is it might behave as a WordPress function which means after any Ajax action is
     * fired the result of call this function via Ajax might not be the expected result so ideally can be used to test
     * if you are on the front page on first load of the page only.
     *
     * @since 4.6.9
     *
     * @return bool
     */
    function tribe_is_events_front_page()
    {
    }
    /**
     * Test if we are on the home of events either if is set to frontpage or the default /events page.
     *
     * Utility function to test if we are on the home of events, it makes a test in cases when the page is set to be on
     * the frontpage of the site and if the User is on that page is on the homepage or if the User is on the events page
     * where the eventDisplay is set to default.
     *
     * Also consider this might not work as expected inside of Ajax Calls as this one is fired on initial loading of the
     * page so be aware of unexpected results via Ajax calls.
     *
     * @since 4.6.9
     *
     * @return bool
     */
    function tribe_is_events_home()
    {
    }
    /**
     * Google Maps Integration
     *
     * Display functions (template-tags) for use in WordPress templates.
     */
    /**
     * Determines if the current site is using The Events Calendar's default Google Maps API
     * Key, in which case only basic Maps Embed API requests are allowed.
     *
     * See https://developers.google.com/maps/documentation/embed/usage-and-billing#embed for
     * more info.
     *
     * @since 4.6.24
     *
     * @return boolean
     */
    function tribe_is_using_basic_gmaps_api()
    {
    }
    /**
     * Google Map Link
     *
     * Returns a url to google maps for the given event
     *
     * @category Events
     *
     * @param string $postId
     *
     * @return string A fully qualified link to https://maps.google.com/ for this event
     */
    function tribe_get_map_link($post_id = \null)
    {
    }
    /**
     * Returns a formed HTML link to Google Maps for the given event.
     *
     * @category Events
     *
     * @param string $postId
     *
     * @return string A fully qualified link to https://maps.google.com/ for this event
     */
    function tribe_get_map_link_html($postId = \null)
    {
    }
    /**
     * Google Map Embed
     *
     * Returns an embedded google maps for an event
     *
     * @category Events
     *
     * @param string $post_id
     * @param int    $width
     * @param int    $height
     * @param bool   $force_load If true, then load the map even if an address is not provided.
     *
     * @return string An iframe pulling https://maps.google.com/ for this event
     */
    function tribe_get_embedded_map($post_id = \null, $width = \null, $height = \null, $force_load = \false)
    {
    }
    /**
     * Google Map Embed Test
     *
     * Check if embed google map is enabled for this event (or venue ).
     *
     * @category Events
     *
     * @param int $postId Id of the post, if none specified, current post is used
     *
     * @return bool True if google map option is set to embed the map
     */
    function tribe_embed_google_map($postId = \null)
    {
    }
    /**
     * Google Map Link Test
     *
     * Check if google map link is enabled for this event
     *
     * @category Events
     *
     * @param int $postId Id of the post, if none specified, current post is used
     *
     * @return bool True if google map link is set to display the event
     */
    function tribe_show_google_map_link($postId = \null)
    {
    }
    /**
     * Gets a full URL for a basic Google Maps embed.
     * See https://developers.google.com/maps/documentation/embed/guide for more info.
     *
     * @since 4.6.24
     *
     * @param string $address_string The full address for the marker to be shown on the map (e.g. an event venue).
     */
    function tribe_get_basic_gmap_embed_url($address_string)
    {
    }
    /**
     * @todo [BTRIA-614]: two functions that do the exact same thing
     */
    /**
     * Get iCal Link (Single)
     *
     * Returns an iCal feed for a single event. Must be used in the loop.
     *
     * @since 6.1.1 Added $post_id parameter.
     *
     * @param int $post_id (optional) The post ID of the event. If not set, the current post ID will be used.
     *
     * @return string URL for iCal for single event.
     */
    function tribe_get_single_ical_link($post_id = \null)
    {
    }
    /**
     * iCal Link
     *
     * Returns a sitewide "Export Events" iCal link.
     *
     * @return string URL for iCal dump.
     */
    function tribe_get_ical_link()
    {
    }
    /**
     * Google Calendar Link
     *
     * Returns an "Add to Google Calendar" link for a single event.
     *
     * @param int $post_id (optional) Function must be used in the loop if empty.
     *
     * @return string URL for Google Calendar.
     */
    function tribe_get_gcal_link($post_id = \null)
    {
    }
    /**
     * Link Functions
     *
     * Display functions (template-tags) for use in WordPress templates.
     */
    /**
     * Link to Previous Event (Display)
     *
     * Displays a link to the previous post by start date for the given event
     *
     * @param bool|string $anchor link text. Use %title% to place the post title in your string.
     *
     * @see tribe_get_prev_event_link()
     */
    function tribe_the_prev_event_link($anchor = \false)
    {
    }
    /**
     * Return a link to the previous event by start date for the given event.
     *
     * @param bool|string $anchor link text. Use %title% to place the post title in your string.
     *
     * @return string
     */
    function tribe_get_prev_event_link($anchor = \false)
    {
    }
    /**
     * Link to Next Event (Display)
     *
     * Display a link to the next post by start date for the given event
     *
     * @param bool|string $anchor link text. Use %title% to place the post title in your string.
     *
     * @return void
     * @see tribe_get_next_event_link()
     */
    function tribe_the_next_event_link($anchor = \false)
    {
    }
    /**
     * Return a link to the next post by start date for the given event
     *
     * @param bool|string $anchor link text. Use %title% to place the post title in your string.
     *
     * @return string
     */
    function tribe_get_next_event_link($anchor = \false)
    {
    }
    /**
     * Get a link to the previous events
     *
     * @return string
     */
    function tribe_get_previous_events_link()
    {
    }
    /**
     * Get a link to the next events
     *
     * @return string
     */
    function tribe_get_next_events_link()
    {
    }
    /**
     * Link to All Events
     *
     * Returns a link to the events URL
     *
     * @param string $context Optional; defaults to 'href'. Can be 'display', in which case non-latin chars are not url-encoded.
     * @return string URL
     */
    function tribe_get_events_link($context = 'href')
    {
    }
    /**
     * Gets a view permalink.
     *
     * @since 5.7.0
     *
     * @param bool|int|null $term
     *
     * @return string $permalink
     */
    function tribe_get_view_permalink($slug, $term = \null)
    {
    }
    /**
     * Link to Grid View
     *
     * Returns a link to the general or category calendar grid view
     *
     * @param string $term Optional event category to link to.
     *
     * @return string URL
     * @todo rename
     */
    function tribe_get_gridview_link($term = \null)
    {
    }
    /**
     * Link to List View
     *
     * Returns a link to the general or category upcoming view
     *
     * @param int $term Optional event category ID to link to.
     *
     * @return string URL
     */
    function tribe_get_listview_link($term = \null)
    {
    }
    /**
     * Link to List View (Past)
     *
     * Returns a link to the general or category past view
     *
     * @param int|null $term Term ID
     *
     * @return string URL
     */
    function tribe_get_listview_past_link($term = \null)
    {
    }
    /**
     * Link to a nearby List View page
     *
     * Returns a link to the next/previous list view page
     *
     * @param string   $direction 'next' or 'prev'.
     * @param int|null $term Term ID.
     * @param string   $currently_displaying Type of listview page that is currently being displayed ('past' or 'list').
     * @param int      $page Current page number being displayed.
     *
     * @return string URL
     */
    function tribe_get_listview_dir_link($direction = 'next', $term = \null, $currently_displaying = \null, $page = \null)
    {
    }
    /**
     * Utility function to update the pagination and current display on the list view.
     *
     * @since 4.6.12
     *
     * @param int $page
     * @param string $direction
     * @param null $currently_displaying
     *
     * @return array
     */
    function tribe_get_listview_args($page = 1, $direction = 'next', $currently_displaying = \null)
    {
    }
    /**
     * Validates that the current view is inside of the Two allowed: list or view if not default to the list view.
     *
     * @since 4.6.12
     *
     * @return string
     */
    function tribe_get_listview_display()
    {
    }
    /**
     * Link to prev List View
     *
     * Returns a link to the previous list view page
     *
     * @param int|null $term Term ID
     *
     * @return string URL
     */
    function tribe_get_listview_prev_link($term = \null)
    {
    }
    /**
     * Link to next List View
     *
     * Returns a link to the next list view page
     *
     * @param int|null $term Term ID
     *
     * @return string URL
     */
    function tribe_get_listview_next_link($term = \null)
    {
    }
    /**
     * Single Event Link
     *
     * Get link to a single event
     *
     * @param WP_Post|int $post_id   Optional. WP Post that this affects
     * @param bool        $full_link Optional. If true outputs a complete HTML <a> link, otherwise only the URL is output
     *
     * @return string|bool Link to post or false if none found
     */
    function tribe_get_event_link($post_id = \null, $full_link = \false)
    {
    }
    /**
     * Event Website Link (more info)
     *
     * @param null|object|int $event
     * @param null|string     $label
     *
     * @return string $html
     */
    function tribe_get_event_website_link($event = \null, $label = \null)
    {
    }
    /**
     * Get the link for the event website.
     *
     * @since 5.5.0
     *
     * @param null|int $post_id The event or event ID.
     * @return string  Formatted title for the event website link
     */
    function tribe_events_get_event_website_title($post_id = \null)
    {
    }
    /**
     * Event Website URL
     *
     * @param null|object|int $event
     *
     * @return string The event's website URL
     */
    function tribe_get_event_website_url($event = \null)
    {
    }
    /**
     * Past Loop View Test
     *
     * Returns true if the query is set for past events, false otherwise
     *
     * @return bool
     */
    function tribe_is_past() : bool
    {
    }
    /**
     * Upcoming Loop View Test
     *
     * Returns true if the query is set for upcoming events, false otherwise
     *
     * @return bool
     */
    function tribe_is_upcoming() : bool
    {
    }
    /**
     * Show All Test
     *
     * Returns true if the query is set to show all events, false otherwise
     *
     * @todo  move to ECP
     * @since 6.0.0 Using tribe context.
     *
     * @return bool
     */
    function tribe_is_showing_all() : bool
    {
    }
    /**
     * Date View Test
     *
     * Check if current display is a date-based View.
     *
     * @return bool
     */
    function tribe_is_by_date() : bool
    {
    }
    /**
     * Event Title (Display)
     *
     * Display an event's title with pseudo-breadcrumb if on a category
     *
     * @param bool $depth include linked title
     */
    function tribe_events_title($depth = \true)
    {
    }
    /**
     * Event Title
     *
     * Return an event's title with pseudo-breadcrumb if on a category
     *
     * @todo move logic to template classes
     *
     * @param bool $depth include linked title
     *
     * @return string title
     */
    function tribe_get_events_title($depth = \true)
    {
    }
    /**
     * Link to Upcoming Events
     *
     * Returns a link to the upcoming events in list view. Used in the loop view.
     *
     * @return string URL
     */
    function tribe_get_upcoming_link()
    {
    }
    /**
     * Are there any events previous to the current events in $wp_query
     *
     * @return bool
     */
    function tribe_has_previous_event()
    {
    }
    /**
     * Are there any events next (in the future) to the current events in $wp_query
     *
     * @return bool
     */
    function tribe_has_next_event()
    {
    }
    /**
     * Link to Past Events
     *
     * Returns a link to the previous events in list view. Used in the loop view.
     *
     * @return string URL
     */
    function tribe_get_past_link()
    {
    }
    /**
     * Determines if we are in the main Loop (home/archives/tags)
     *
     * @return bool
     */
    function tribe_is_in_main_loop() : bool
    {
    }
    /**
     * Determines if we are in list view.
     *
     * @return bool
     */
    function tribe_is_list_view() : bool
    {
    }
    /**
     * Used in list loop, displays the date headers between events in the loop when the month / year has changed
     *
     **/
    function tribe_events_list_the_date_headers()
    {
    }
    /**
     * Determine classes to apply to left side nav links
     *
     * @param $side
     */
    function tribe_left_navigation_classes()
    {
    }
    /**
     * Determine classes to apply to right side nav links
     *
     * @param $side
     */
    function tribe_right_navigation_classes()
    {
    }
    /**
     * Checks whether we're on a particular view
     *
     * @deprecated 6.0.7
     *
     * @return bool
     **/
    function tribe_is_view($view = \false)
    {
    }
    /**
     * Check whether we're on a particular view.
     *
     * @since 6.0.7
     *
     * @param  string $view_slug      (optional) The view slug we are looking for. Defaults to checking if we are on the default view.
     * @param Tribe__Context $context (optional) The view context. Generated via tribe_context() if not supplied.
     *
     * @return boolean Whether we're on the requested view.
     */
    function tec_is_view(string $view_slug = 'default', $context = \null) : bool
    {
    }
    /**
     * Calendar Month Functions
     *
     * Display functions (template-tags) for use in WordPress templates.
     */
    /**
     * Month view conditional tag
     *
     * Returns true when on the "real" Month View itself, but not in other secondary instances of the
     * Month View like instance of the [tribe_events] shortcode.
     *
     * @return bool
     */
    function tribe_is_month()
    {
    }
    /**
     * Returns whether there are any events in the specific month.
     * Independently if there are filters or not.
     *
     * @return bool
     * @since 3.1.1
     **/
    function tribe_events_month_has_events()
    {
    }
    /**
     * Month View Date
     *
     * Get current calendar month view date
     *
     * @return string Date currently queried
     */
    function tribe_get_month_view_date()
    {
    }
    /**
     * Display an html link to the previous month. Used in the month navigation.
     *
     * No link will be returned if the link is to a month that precedes any existing
     * events.
     *
     * @uses tribe_get_previous_month_text()
     **/
    function tribe_events_the_previous_month_link()
    {
    }
    /**
     * Display an html link to the next month. Used in the month navigation.
     *
     * @uses tribe_get_next_month_text()
     **/
    function tribe_events_the_next_month_link()
    {
    }
    /**
     * Link to Previous Month
     *
     * Returns a link to the previous month's events page. Used in the month view.
     *
     * @return string URL
     */
    function tribe_get_previous_month_link()
    {
    }
    /**
     * Previous Month Text
     *
     * Returns a textual description of the previous month
     *
     * @return string Name of the previous month.
     */
    function tribe_get_previous_month_text()
    {
    }
    /**
     * Link to Next Month
     *
     * Returns a link to the next month's events page. Used in the month view.
     *
     * @return string URL
     */
    function tribe_get_next_month_link()
    {
    }
    /**
     * Current Month Text
     *
     * Returns a textual description of the current month
     *
     * @return string Name of the current month.
     */
    function tribe_get_current_month_text()
    {
    }
    /**
     * Next Month Text
     *
     * Returns a textual description of the next month
     *
     * @return string Name of the next month.
     */
    function tribe_get_next_month_text()
    {
    }
    /**
     * Organizer ID
     *
     * Returns the event Organizer ID.
     *
     * @param int $postId Can supply either event id or organizer id.
     *                    If none specified, current post is used.
     *                    If given an event with multiple organizers,
     *                    the first organizer ID is returned.
     *
     * @return int Organizer
     */
    function tribe_get_organizer_id($postId = \null)
    {
    }
    /**
     * Get the IDs of all organizers associated with an event.
     *
     * @param int $event_id The event post ID. Defaults to the current event.
     *
     * @return array
     */
    function tribe_get_organizer_ids($event_id = \null)
    {
    }
    /**
     * An organizers can have two sources the list of ordered items and the meta field associated with organizers,
     * where the meta field takes precedence we need to respect the order of the meta order only when the present items
     * on the meta field.
     *
     * @deprecated 4.6.23
     * @todo Remove on 4.7
     *
     * @since 4.6.15
     *
     * @param array $current
     * @param array $ordered
     *
     * @return array
     */
    function tribe_sanitize_organizers($current = [], $ordered = [])
    {
    }
    /**
     * Get Organizer Label Singular.
     * Returns the singular version of the Organizer Label.
     *
     * Note: the output of this function is not escaped.
     * You should escape it wherever you use it!
     *
     * @since 3.7
     * @since5.1.6 remove escaping.
     *
     * @return string The singular version of the Organizer Label.
     */
    function tribe_get_organizer_label_singular()
    {
    }
    /**
     * Get Organizer Label Plural
     * Returns the plural version of the Organizer Label.
     *
     * Note: the output of this function is not escaped.
     * You should escape it wherever you use it!
     *
     * @since 3.7
     * @since5.1.6 remove escaping.
     *
     * @return string The plural version of the Organizer Label.
     */
    function tribe_get_organizer_label_plural()
    {
    }
    /**
     * Get Organizer Label Singular lowercase.
     * Returns the lowercase singular version of the Organizer Label.
     *
     * Note: the output of this function is not escaped.
     * You should escape it wherever you use it!
     *
     * @since 6.2.1
     *
     * @return string The lowercase singular version of the Organizer Label.
     */
    function tribe_get_organizer_label_singular_lowercase()
    {
    }
    /**
     * Get the organizer label.
     *
     * Note: the output of this function is not escaped.
     * You should escape it wherever you use it!
     *
     * @param bool $singular TRUE to return the singular label, FALSE to return plural.
     *
     * @return string
     */
    function tribe_get_organizer_label($singular = \true)
    {
    }
    /**
     * Returns a summary of key information for the specified organizer.
     *
     * Typically this is a pipe separated format containing the organizer's telephone
     * number, email address and website where available.
     *
     * @param int $post_id Either the organizer or event ID, if none specified, current post is used.
     *
     * @return string
     */
    function tribe_get_organizer_details($post_id = \null)
    {
    }
    /**
     * Get Organizer
     *
     * Returns the name of the Organizer
     *
     * @param int $postId Either event id or organizer id, if none specified, current post is used.
     *
     * @return string Organizer's Name
     */
    function tribe_get_organizer($postId = \null)
    {
    }
    /**
     * Organizer Test
     *
     * Returns true or false depending on if the post id has/is an organizer
     *
     * @param int $postId Either event id or organizer id, if none specified, current post is used.
     *
     * @return bool
     */
    function tribe_has_organizer($postId = \null)
    {
    }
    /**
     * Organizer Email
     *
     * Returns the Organizer's Email.
     *
     * @param int  $postId      Either event id or organizer id, if none specified, current post is used.
     * @param bool $antispambot Whether the email should pass through the `antispambot` function or not.
     *
     * @return string Organizer's Email
     */
    function tribe_get_organizer_email($postId = \null, $antispambot = \true)
    {
    }
    /**
     * Organizer Page Link
     *
     * Returns the event Organizer Name with a link to their single organizer page.
     *
     * @param int  $post_id   Either event id or organizer id, if none specified, current post is used.
     * @param bool $full_link If true outputs a complete HTML <a> link, otherwise only the URL is output.
     * @param bool $echo      Deprecated. If true, echo the link, otherwise return.
     *
     * @return string Organizer Name and Url
     */
    function tribe_get_organizer_link($post_id = \null, $full_link = \true, $echo = \false)
    {
    }
    /**
     * Organizer Phone
     *
     * Returns the event Organizer's phone number
     *
     * @param int $postId Can supply either event id or organizer id, if none specified, current post is used
     *
     * @return string Organizer's Phone Number
     */
    function tribe_get_organizer_phone($postId = \null)
    {
    }
    // wrapped in if function exists to maintain compatibility with community events 3.0.x. wrapper not needed after 3.1.x.
    function tribe_get_organizer_website_url($postId = \null)
    {
    }
    /**
     * Organizer website link
     *
     * Returns the event Organizer Name with a link to their supplied website
     *
     * @param null|int    $post_id The post ID for an event.
     * @param null|string $label   The text for the link.
     *
     * @return string
     **/
    function tribe_get_organizer_website_link($post_id = \null, $label = \null)
    {
    }
    /**
     * Get the link for the organizer website.
     *
     * @since 5.5.0
     *
     * @param null|int $post_id The event or organizer ID.
     * @return string  Formatted title for the organizer website link
     */
    function tribe_events_get_organizer_website_title($post_id = \null)
    {
    }
    /**
     * Get all the organizers
     *
     * @param bool  $only_with_upcoming Only return organizers with upcoming events attached to them.
     * @param int   $posts_per_page
     * @param bool  $suppress_filters
     * @param array $args {
     *		Optional. Array of Query parameters.
     *
     *		@type int  $event       Only organizers linked to this event post ID.
     *		@type bool $has_events  Only organizers that have events.
     *		@type bool $found_posts Return the number of found organizers.
     * }
     *
     * @return array|int An array of organizer post objects or an integer value if `found_posts` is set to a truthy value.
     */
    function tribe_get_organizers($only_with_upcoming = \false, $posts_per_page = -1, $suppress_filters = \true, array $args = [])
    {
    }
    /**
     * Fetches and returns a decorated post object representing a Organizer.
     *
     * @since 5.3.0
     *
     * @param null|int|WP_Post $organizer  The organizer ID or post object or `null` to use the global one.
     * @param string|null      $output The required return type. One of `OBJECT`, `ARRAY_A`, or `ARRAY_N`, which
     *                                 correspond to a WP_Post object, an associative array, or a numeric array,
     *                                 respectively. Defaults to `OBJECT`.
     * @param string           $filter Type of filter to apply. Accepts 'raw'.
     * @param bool             $force  Whether to force a re-fetch ignoring cached results or not.
     *
     * @return array|mixed|void|WP_Post|null {
     *                              The Organizer post object or array, `null` if not found.
     *
     *                              @type string $phone The organizer phone number NOT filtered, apply anti-spambot filters if required.
     *                              @type string $website The organizer full website URL.
     *                              @type string $email The organizer email address NOT filtered, apply anti-spambot filters if required.
     *                          }
     */
    function tribe_get_organizer_object($organizer = \null, $output = \OBJECT, $filter = 'raw', $force = \false)
    {
    }
    /**
     * Builds and returns the correct event repository.
     *
     * @since 4.9
     *
     * @param string $repository The slug of the repository to build/return.
     *
     * @return Tribe__Repository__Interface An instance of the requested repository
     *                                      class.
     */
    function tribe_events($repository = 'default')
    {
    }
    /**
     * Builds and returns the correct organizer repository.
     *
     * @since 4.9
     *
     * @param string $repository The slug of the repository to build/return.
     *
     * @return Tribe__Repository__Interface An instance of the requested repository
     *                                      class.
     */
    function tribe_organizers($repository = 'default')
    {
    }
    /**
     * Builds and returns the correct venue repository.
     *
     * @since 4.9
     *
     * @param string $repository The slug of the repository to build/return.
     *
     * @return Tribe__Repository__Interface An instance of the requested repository
     *                                      class.
     */
    function tribe_venues($repository = 'default')
    {
    }
    /**
     * Conditional tag to check if current page is an event category page
     *
     * @return bool
     **/
    function tribe_is_event_category()
    {
    }
    /**
     * Conditional tag to check if current page is an event venue page
     *
     * @return bool
     **/
    function tribe_is_event_venue()
    {
    }
    /**
     * Conditional tag to check if current page is an event organizer page
     *
     * @return bool
     **/
    function tribe_is_event_organizer()
    {
    }
    /**
     * Conditional tag to check if current page is displaying event query
     *
     * @return bool
     **/
    function tribe_is_event_query()
    {
    }
    /**
     * Functions, or polyfills, related to URL manipulation on events
     *
     * @since 4.9.4
     */
    /**
     * Given a set of query strings returns the clean and canonical URL.
     *
     * @since  4.9.4
     *
     * @param  string|array $query Query string arguments.
     * @param  string|null  $url   Base url to apply those query arguments.
     *
     * @return string              Final clean and canonical URL for events.
     */
    function tribe_events_get_url($query = [], $url = \null)
    {
    }
    /**
     * Fetches and returns a decorated post object representing a Venue.
     *
     * @since 4.9.9
     *
     * @param null|int|WP_Post $venue  The venue ID or post object or `null` to use the global one.
     * @param string|null      $output The required return type. One of `OBJECT`, `ARRAY_A`, or `ARRAY_N`, which
     *                                 correspond to a WP_Post object, an associative array, or a numeric array,
     *                                 respectively. Defaults to `OBJECT`.
     * @param string           $filter Type of filter to apply. Accepts 'raw'.
     * @param bool             $force  Whether to force a re-fetch ignoring cached results or not.
     *
     * @return array|mixed|void|WP_Post|null {
     *                              The Venue post object or array, `null` if not found.
     *
     *                              @type string $address The venue address field, normally street and number.
     *                              @type string $country Which country the venue happens, full name of the country, no abbr.
     *                              @type string $city The city for the venue.
     *                              @type string $state_province State or province for the venue, available for venues outside of the US.
     *                              @type string $state The state for the venue in case of a US based venue.
     *                              @type string $province Province for the venue, mostly deprecated, use state_province.
     *                              @type string $zip Zip code of the venue.
     *                              @type boolean $overwrite_coordinates Did this venue get it's coordinates overwritten manually.
     *                              @type string $latitude The latitude of the venue.
     *                              @type string $longitude The longitude of the venue.
     *                              @type string $geolocation_string The string we use to crawl and link to the maps provider.
     *                          }
     */
    function tribe_get_venue_object($venue = \null, $output = \OBJECT, $filter = 'raw', $force = \false)
    {
    }
    /**
     * Returns the event Venue ID.
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return int        The venue ID.
     */
    function tribe_get_venue_id($postId = \null)
    {
    }
    /**
     * Get the IDs of all venues associated with an event.
     *
     * @since 6.2.0
     *
     * @param int $event_id The event post ID. Defaults to the current event.
     *
     * @return array
     */
    function tec_get_venue_ids($event_id = \null)
    {
    }
    /**
     * Returns the singular version of the Venue Label.
     *
     * Note: the output of this function is not escaped.
     * You should escape it wherever you use it!
     *
     * @since 3.7
     * @since5.1.6 remove escaping.
     *
     * @return string The singular version of the Venue Label.
     */
    function tribe_get_venue_label_singular()
    {
    }
    /**
     * Get Venue Label Singular lowercase.
     * Returns the lowercase singular version of the Venue Label.
     *
     * Note: the output of this function is not escaped.
     * You should escape it wherever you use it!
     *
     * @since 6.2.1
     *
     * @return string The lowercase singular version of the Venue Label.
     */
    function tribe_get_venue_label_singular_lowercase()
    {
    }
    /**
     * Returns the plural version of the Venue Label.
     *
     * Note: the output of this function is not escaped.
     * You should escape it wherever you use it!
     *
     * @since 3.7
     * @since5.1.6 remove escaping.
     *
     * @return string The plural version of the Venue Label.
     */
    function tribe_get_venue_label_plural()
    {
    }
    /**
     * Returns true or false depending on if the post id for the event has a venue or if the post id is a venue
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return bool
     */
    function tribe_has_venue($postId = \null)
    {
    }
    /**
     * Returns the event venue name
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return string Venue Name
     */
    function tribe_get_venue($postId = \null)
    {
    }
    /**
     * Returns or display the event Venue Name with a link to the venue
     *
     * @since ??
     *
     * @param int  $postId    Either event id or venue id, if none specified, current post is used.
     * @param bool $full_link If true outputs a complete HTML <a> link, otherwise only the URL is output
     * @return string         HTML link if $full_link is set to true, URL string if it's set to false.
     */
    function tribe_get_venue_link($postId = \null, $full_link = \true)
    {
    }
    /**
     * Returns the venue's country
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return string     The escaped country name of the venue.
     */
    function tribe_get_country($postId = \null)
    {
    }
    /**
     * Returns the full address for the venue. Function uses the views/modules/address.php template which you can override in your theme.
     *
     * @since ??
     *
     * @param int  $post_id           Either event id or venue id, if none specified, current post is used.
     * @param bool $includeVenueName To include the venue name or not.
     * @return string                Formatted event address.
     */
    function tribe_get_full_address($event_id = \null, $includeVenueName = \false)
    {
    }
    /**
     * Returns true if any of the following exist: address, city, state/province (region), country or zip
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return bool True if any part of an address exists.
     */
    function tribe_address_exists($postId = \null)
    {
    }
    /**
     * Returns the venue street address
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return string     The escaped venue street address.
     */
    function tribe_get_address($postId = \null)
    {
    }
    /**
     * Returns the venue city
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return string     The escaped venue city
     */
    function tribe_get_city($postId = \null)
    {
    }
    /**
     * Returns the venue state or province
     *
     * @since ??
     *
     * @todo Deprecate tribe_get_stateprovince or tribe_get_region
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return string     The escaped venue state or province.
     */
    function tribe_get_stateprovince($postId = \null)
    {
    }
    /**
     * Returns the venue state
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return string     The escaped venue state or province.
     */
    function tribe_get_state($postId = \null)
    {
    }
    /**
     * Returns the venue province
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return string     The escaped venue province.
     */
    function tribe_get_province($postId = \null)
    {
    }
    /**
     * Returns the state or province for US or non-US addresses (effectively the same thing as tribe_get_stateprovince())
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return string     The state or province for the event.
     * @todo Deprecate tribe_get_region or tribe_get_stateprovince
     */
    function tribe_get_region($postId = \null)
    {
    }
    /**
     * Returns the event zip code
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return string     The venue zip code.
     */
    function tribe_get_zip($postId = \null)
    {
    }
    /**
     * Gets the full region name of a given event's Venue address.
     *
     * @since ??
     *
     * @param int $event_id The post ID of the event.
     * @return string       The full region for this event's address.
     */
    function tribe_get_full_region($event_id)
    {
    }
    /**
     * Returns the coordinates of the venue
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return array      An Array with the Latitude and Longitude of the venue.
     */
    function tribe_get_coordinates($postId = \null)
    {
    }
    /**
     * Conditional if the venue has it's coordinates overwritten
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return bool       Depending on the venue checkbox of overwrite coordinates.
     */
    function tribe_is_venue_overwrite($postId = \null)
    {
    }
    /**
     * Returns the venue phone number
     *
     * @since ??
     *
     * @param int $postId Either event id or venue id, if none specified, current post is used.
     * @return string     The escaped phone number for the venue.
     */
    function tribe_get_phone($postId = \null)
    {
    }
    /**
     * Get all the venues
     *
     * @param bool  $only_with_upcoming Only return venues with upcoming events attached to them.
     * @param int   $posts_per_page
     * @param bool  $suppress_filters
     * @param array $args {
     *		Optional. Array of Query parameters.
     *
     *		@type int  $event       Only venues linked to this event post ID.
     *		@type bool $has_events  Only venues that have events.
     *		@type bool $found_posts Return the number of found venues.
     * }
     *
     * @return array An array of venue post objects.
     */
    function tribe_get_venues($only_with_upcoming = \false, $posts_per_page = -1, $suppress_filters = \true, array $args = [])
    {
    }
    /**
     * Get the link for the venue website.
     *
     * @since ??
     *
     * @param null|int    $post_id The event or venue ID.
     * @param null|string $label   The label for the link.
     * @return string              Formatted link to the venue website
     */
    function tribe_get_venue_website_link($post_id = \null, $label = \null)
    {
    }
    /**
     * Get the link for the venue website.
     *
     * @since 5.5.0
     *
     * @param null|int $post_id The event or venue ID.
     * @return string  Formatted title for the venue website link
     */
    function tribe_events_get_venue_website_title($post_id = \null)
    {
    }
    /**
     * Returns the venue website URL related to the current post or for the optionally
     * specified post.
     *
     * @since ??
     *
     * @param int|null $post_id The event ID.
     * @return string
     */
    function tribe_get_venue_website_url($post_id = \null)
    {
    }
    /**
     * Gets venue details for use in some single-event templates.
     *
     * @since ??
     *
     * @param int|null $post_id The venue ID.
     * @return array            The venue name and venue address.
     */
    function tribe_get_venue_details($post_id = \null)
    {
    }
    /**
     * Gets the venue name and address on a single line.
     *
     * @since ??
     *
     * @param int     $event_id The event ID.
     * @param boolean $link     Whether or not to wrap the text in a venue link.
     * @return string           Single-line address string.
     */
    function tribe_get_venue_single_line_address($event_id, $link = \true)
    {
    }
    /**
     * Utility functions dealing with arrays
     */
    /**
     * Drop-in replacement for array_unique(), designed to operate on an array of arrays
     * where each inner array is populated with strings (or types that can be stringified
     * while essentially keeping their unique value).
     *
     * @param array $original array_of_arrays
     *
     * @return array
     */
    function tribe_array_unique(array $original)
    {
    }
    /**
     * Verifies that the current install of The Events Calendar is not
     * a pre-existing setup, and trigger the activation of View V2.
     *
     * @since  4.9.13
     *
     * @return  bool  When to activate the View V2 or not.
     */
    function tribe_events_is_new_install()
    {
    }
    /**
     * Utility functions for assessing the values of various post type labels.
     */
    /**
     * A simple function for knowing if the "Event"/"Events" label has been changed.
     *
     * @since 4.6.3
     *
     * @return bool
     */
    function tribe_is_event_label_customized()
    {
    }
    /**
     * A simple function for knowing if the "Venue"/"Venues" label has been changed.
     *
     * @since 4.6.3
     *
     * @return bool
     */
    function tribe_is_venue_label_customized()
    {
    }
    /**
     * A simple function for knowing if the "Organizer"/"Organizers" label has been changed.
     *
     * @since 4.6.3
     *
     * @return bool
     */
    function tribe_is_organizer_label_customized()
    {
    }
    /**
     * Registers a view.
     *
     * @since 5.7.0
     * @since 5.10.0 Added route slug parameter that is decoupled from the slug view param.
     *
     * @param string $slug Slug for locating the view file.
     * @param string $name View name.
     * @param string $class View class.
     * @param int $priority View registration priority.
     * @param string $route_slug The slug applied to the route for this view.
     */
    function tribe_register_view($slug, $name, $class, $priority = 50, $route_slug = \null)
    {
    }
    /**
     * Checks whether v2 of the Views is enabled or not.
     *
     * In order the function will check the `TRIBE_EVENTS_V2_VIEWS` constant,
     * the `TRIBE_EVENTS_V2_VIEWS` environment variable and, finally, the `Manager::$option_enabled` option.
     *
     * @since 4.9.2
     * @since 6.0.0 Deprecate function.
     *
     * @return bool Whether v2 of the Views are enabled or not.
     */
    function tribe_events_views_v2_is_enabled()
    {
    }
    /**
     * Checks add loads default options for our settings.
     * Current only being triggered on plugin activation hook.
     *
     * @since 6.0.0
     *
     * @return bool  Whether initializer ran or not.
     */
    function tribe_events_settings_defaults_initializer()
    {
    }
    /**
     * Checks smart activation of the view v2, is not a function for verification of v2 is active or not.
     *
     * Current only being triggered on plugin activation hook.
     *
     * @since 4.9.13
     * @since 6.0.0 Deprecate function.
     *
     * @deprecated 6.0.0
     *
     * @return bool Wether we just activated the v2 on the database.
     */
    function tribe_events_views_v2_smart_activation()
    {
    }
    /**
     * Returns whether the Event Period repository should be used or not.
     *
     * @since 4.9.13
     * @since 6.0.0 Deprecate function.
     *
     * @deprecated 6.0.0
     *
     * @return bool whether the Event Period repository should be used or not.
     */
    function tribe_events_view_v2_use_period_repository()
    {
    }
    /**
     * Checks whether to disable V2 widgets.
     *
     * In order the function will check the `TRIBE_EVENTS_WIDGETS_V2_DISABLED` constant,
     * the `TRIBE_EVENTS_WIDGETS_V2_DISABLED` environment variable.
     *
     * Note the internal logic is inverted, as the name of the function is "...is_enabled"
     * while the names of the constant/env_var are "...DISABLED".
     *
     * @since 5.3.0
     * @since 6.0.0 Deprecate function.
     *
     * @return bool Whether Widgets v2 should load.
     */
    function tribe_events_widgets_v2_is_enabled()
    {
    }
    /**
     * Checks whether to disable V2 Single Event styles overrides.
     *
     * In order the function will check the `TRIBE_EVENTS_SINGLE_VIEW_V2_DISABLED` constant,
     * the `TRIBE_EVENTS_SINGLE_VIEW_V2_DISABLED` environment variable.
     *
     * Note the internal logic is inverted, as the name of the function is "...is_enabled"
     * while the names of the constant/env_var are "...DISABLED".
     *
     * @since 5.5.0
     * @since 6.0.0 Deprecate function.
     *
     * @return bool Whether Single Event v2 styles overrides should load.
     */
    function tribe_events_single_view_v2_is_enabled()
    {
    }
    /**
     * For legacy usage of the Views V1 we allow removing all notices related to V1 before of Version 6.0.0.
     *
     * @since 5.13.0
     *
     * @return bool
     */
    function tec_events_views_v1_should_display_deprecated_notice()
    {
    }
    /**
     * Include the plugin name into the correct place
     *
     * @since  4.8
     *
     * @param  array $names current list of names.
     *
     * @return array
     */
    function tribe_events_not_php_version_plugin_name($names)
    {
    }
    // WRCS: DEFINED_VERSION.
    /**
     * Registers this version of Action Scheduler.
     */
    function action_scheduler_register_3_dot_6_dot_4()
    {
    }
    /**
     * Initializes this version of Action Scheduler.
     */
    function action_scheduler_initialize_3_dot_6_dot_4()
    {
    }
    /**
     * Deprecated API functions for scheduling actions
     *
     * Functions with the wc prefix were deprecated to avoid confusion with
     * Action Scheduler being included in WooCommerce core, and it providing
     * a different set of APIs for working with the action queue.
     */
    /**
     * Schedule an action to run one time
     *
     * @param int $timestamp When the job will run
     * @param string $hook The hook to trigger
     * @param array $args Arguments to pass when the hook triggers
     * @param string $group The group to assign this job to
     *
     * @return string The job ID
     */
    function wc_schedule_single_action($timestamp, $hook, $args = array(), $group = '')
    {
    }
    /**
     * Schedule a recurring action
     *
     * @param int $timestamp When the first instance of the job will run
     * @param int $interval_in_seconds How long to wait between runs
     * @param string $hook The hook to trigger
     * @param array $args Arguments to pass when the hook triggers
     * @param string $group The group to assign this job to
     *
     * @deprecated 2.1.0
     *
     * @return string The job ID
     */
    function wc_schedule_recurring_action($timestamp, $interval_in_seconds, $hook, $args = array(), $group = '')
    {
    }
    /**
     * Schedule an action that recurs on a cron-like schedule.
     *
     * @param int $timestamp The schedule will start on or after this time
     * @param string $schedule A cron-link schedule string
     * @see http://en.wikipedia.org/wiki/Cron
     *   *    *    *    *    *    *
     *   ┬    ┬    ┬    ┬    ┬    ┬
     *   |    |    |    |    |    |
     *   |    |    |    |    |    + year [optional]
     *   |    |    |    |    +----- day of week (0 - 7) (Sunday=0 or 7)
     *   |    |    |    +---------- month (1 - 12)
     *   |    |    +--------------- day of month (1 - 31)
     *   |    +-------------------- hour (0 - 23)
     *   +------------------------- min (0 - 59)
     * @param string $hook The hook to trigger
     * @param array $args Arguments to pass when the hook triggers
     * @param string $group The group to assign this job to
     *
     * @deprecated 2.1.0
     *
     * @return string The job ID
     */
    function wc_schedule_cron_action($timestamp, $schedule, $hook, $args = array(), $group = '')
    {
    }
    /**
     * Cancel the next occurrence of a job.
     *
     * @param string $hook The hook that the job will trigger
     * @param array $args Args that would have been passed to the job
     * @param string $group
     *
     * @deprecated 2.1.0
     */
    function wc_unschedule_action($hook, $args = array(), $group = '')
    {
    }
    /**
     * @param string $hook
     * @param array $args
     * @param string $group
     *
     * @deprecated 2.1.0
     *
     * @return int|bool The timestamp for the next occurrence, or false if nothing was found
     */
    function wc_next_scheduled_action($hook, $args = \NULL, $group = '')
    {
    }
    /**
     * Find scheduled actions
     *
     * @param array $args Possible arguments, with their default values:
     *        'hook' => '' - the name of the action that will be triggered
     *        'args' => NULL - the args array that will be passed with the action
     *        'date' => NULL - the scheduled date of the action. Expects a DateTime object, a unix timestamp, or a string that can parsed with strtotime(). Used in UTC timezone.
     *        'date_compare' => '<=' - operator for testing "date". accepted values are '!=', '>', '>=', '<', '<=', '='
     *        'modified' => NULL - the date the action was last updated. Expects a DateTime object, a unix timestamp, or a string that can parsed with strtotime(). Used in UTC timezone.
     *        'modified_compare' => '<=' - operator for testing "modified". accepted values are '!=', '>', '>=', '<', '<=', '='
     *        'group' => '' - the group the action belongs to
     *        'status' => '' - ActionScheduler_Store::STATUS_COMPLETE or ActionScheduler_Store::STATUS_PENDING
     *        'claimed' => NULL - TRUE to find claimed actions, FALSE to find unclaimed actions, a string to find a specific claim ID
     *        'per_page' => 5 - Number of results to return
     *        'offset' => 0
     *        'orderby' => 'date' - accepted values are 'hook', 'group', 'modified', or 'date'
     *        'order' => 'ASC'
     * @param string $return_format OBJECT, ARRAY_A, or ids
     *
     * @deprecated 2.1.0
     *
     * @return array
     */
    function wc_get_scheduled_actions($args = array(), $return_format = \OBJECT)
    {
    }
    /**
     * General API functions for scheduling actions
     *
     * @package ActionScheduler.
     */
    /**
     * Enqueue an action to run one time, as soon as possible
     *
     * @param string $hook The hook to trigger.
     * @param array  $args Arguments to pass when the hook triggers.
     * @param string $group The group to assign this job to.
     * @param bool   $unique Whether the action should be unique.
     * @param int    $priority Lower values take precedence over higher values. Defaults to 10, with acceptable values falling in the range 0-255.
     *
     * @return int The action ID.
     */
    function as_enqueue_async_action($hook, $args = array(), $group = '', $unique = \false, $priority = 10)
    {
    }
    /**
     * Schedule an action to run one time
     *
     * @param int    $timestamp When the job will run.
     * @param string $hook The hook to trigger.
     * @param array  $args Arguments to pass when the hook triggers.
     * @param string $group The group to assign this job to.
     * @param bool   $unique Whether the action should be unique.
     * @param int    $priority Lower values take precedence over higher values. Defaults to 10, with acceptable values falling in the range 0-255.
     *
     * @return int The action ID.
     */
    function as_schedule_single_action($timestamp, $hook, $args = array(), $group = '', $unique = \false, $priority = 10)
    {
    }
    /**
     * Schedule a recurring action
     *
     * @param int    $timestamp When the first instance of the job will run.
     * @param int    $interval_in_seconds How long to wait between runs.
     * @param string $hook The hook to trigger.
     * @param array  $args Arguments to pass when the hook triggers.
     * @param string $group The group to assign this job to.
     * @param bool   $unique Whether the action should be unique.
     * @param int    $priority Lower values take precedence over higher values. Defaults to 10, with acceptable values falling in the range 0-255.
     *
     * @return int The action ID.
     */
    function as_schedule_recurring_action($timestamp, $interval_in_seconds, $hook, $args = array(), $group = '', $unique = \false, $priority = 10)
    {
    }
    /**
     * Schedule an action that recurs on a cron-like schedule.
     *
     * @param int    $timestamp The first instance of the action will be scheduled
     *           to run at a time calculated after this timestamp matching the cron
     *           expression. This can be used to delay the first instance of the action.
     * @param string $schedule A cron-link schedule string.
     * @see http://en.wikipedia.org/wiki/Cron
     *   *    *    *    *    *    *
     *   ┬    ┬    ┬    ┬    ┬    ┬
     *   |    |    |    |    |    |
     *   |    |    |    |    |    + year [optional]
     *   |    |    |    |    +----- day of week (0 - 7) (Sunday=0 or 7)
     *   |    |    |    +---------- month (1 - 12)
     *   |    |    +--------------- day of month (1 - 31)
     *   |    +-------------------- hour (0 - 23)
     *   +------------------------- min (0 - 59)
     * @param string $hook The hook to trigger.
     * @param array  $args Arguments to pass when the hook triggers.
     * @param string $group The group to assign this job to.
     * @param bool   $unique Whether the action should be unique.
     * @param int    $priority Lower values take precedence over higher values. Defaults to 10, with acceptable values falling in the range 0-255.
     *
     * @return int The action ID.
     */
    function as_schedule_cron_action($timestamp, $schedule, $hook, $args = array(), $group = '', $unique = \false, $priority = 10)
    {
    }
    /**
     * Cancel the next occurrence of a scheduled action.
     *
     * While only the next instance of a recurring or cron action is unscheduled by this method, that will also prevent
     * all future instances of that recurring or cron action from being run. Recurring and cron actions are scheduled in
     * a sequence instead of all being scheduled at once. Each successive occurrence of a recurring action is scheduled
     * only after the former action is run. If the next instance is never run, because it's unscheduled by this function,
     * then the following instance will never be scheduled (or exist), which is effectively the same as being unscheduled
     * by this method also.
     *
     * @param string $hook The hook that the job will trigger.
     * @param array  $args Args that would have been passed to the job.
     * @param string $group The group the job is assigned to.
     *
     * @return int|null The scheduled action ID if a scheduled action was found, or null if no matching action found.
     */
    function as_unschedule_action($hook, $args = array(), $group = '')
    {
    }
    /**
     * Cancel all occurrences of a scheduled action.
     *
     * @param string $hook The hook that the job will trigger.
     * @param array  $args Args that would have been passed to the job.
     * @param string $group The group the job is assigned to.
     */
    function as_unschedule_all_actions($hook, $args = array(), $group = '')
    {
    }
    /**
     * Check if there is an existing action in the queue with a given hook, args and group combination.
     *
     * An action in the queue could be pending, in-progress or async. If the is pending for a time in
     * future, its scheduled date will be returned as a timestamp. If it is currently being run, or an
     * async action sitting in the queue waiting to be processed, in which case boolean true will be
     * returned. Or there may be no async, in-progress or pending action for this hook, in which case,
     * boolean false will be the return value.
     *
     * @param string $hook Name of the hook to search for.
     * @param array  $args Arguments of the action to be searched.
     * @param string $group Group of the action to be searched.
     *
     * @return int|bool The timestamp for the next occurrence of a pending scheduled action, true for an async or in-progress action or false if there is no matching action.
     */
    function as_next_scheduled_action($hook, $args = \null, $group = '')
    {
    }
    /**
     * Check if there is a scheduled action in the queue but more efficiently than as_next_scheduled_action().
     *
     * It's recommended to use this function when you need to know whether a specific action is currently scheduled
     * (pending or in-progress).
     *
     * @since 3.3.0
     *
     * @param string $hook  The hook of the action.
     * @param array  $args  Args that have been passed to the action. Null will matches any args.
     * @param string $group The group the job is assigned to.
     *
     * @return bool True if a matching action is pending or in-progress, false otherwise.
     */
    function as_has_scheduled_action($hook, $args = \null, $group = '')
    {
    }
    /**
     * Find scheduled actions
     *
     * @param array  $args Possible arguments, with their default values.
     *         'hook' => '' - the name of the action that will be triggered.
     *         'args' => NULL - the args array that will be passed with the action.
     *         'date' => NULL - the scheduled date of the action. Expects a DateTime object, a unix timestamp, or a string that can parsed with strtotime(). Used in UTC timezone.
     *         'date_compare' => '<=' - operator for testing "date". accepted values are '!=', '>', '>=', '<', '<=', '='.
     *         'modified' => NULL - the date the action was last updated. Expects a DateTime object, a unix timestamp, or a string that can parsed with strtotime(). Used in UTC timezone.
     *         'modified_compare' => '<=' - operator for testing "modified". accepted values are '!=', '>', '>=', '<', '<=', '='.
     *         'group' => '' - the group the action belongs to.
     *         'status' => '' - ActionScheduler_Store::STATUS_COMPLETE or ActionScheduler_Store::STATUS_PENDING.
     *         'claimed' => NULL - TRUE to find claimed actions, FALSE to find unclaimed actions, a string to find a specific claim ID.
     *         'per_page' => 5 - Number of results to return.
     *         'offset' => 0.
     *         'orderby' => 'date' - accepted values are 'hook', 'group', 'modified', 'date' or 'none'.
     *         'order' => 'ASC'.
     *
     * @param string $return_format OBJECT, ARRAY_A, or ids.
     *
     * @return array
     */
    function as_get_scheduled_actions($args = array(), $return_format = \OBJECT)
    {
    }
    /**
     * Helper function to create an instance of DateTime based on a given
     * string and timezone. By default, will return the current date/time
     * in the UTC timezone.
     *
     * Needed because new DateTime() called without an explicit timezone
     * will create a date/time in PHP's timezone, but we need to have
     * assurance that a date/time uses the right timezone (which we almost
     * always want to be UTC), which means we need to always include the
     * timezone when instantiating datetimes rather than leaving it up to
     * the PHP default.
     *
     * @param mixed  $date_string A date/time string. Valid formats are explained in http://php.net/manual/en/datetime.formats.php.
     * @param string $timezone A timezone identifier, like UTC or Europe/Lisbon. The list of valid identifiers is available http://php.net/manual/en/timezones.php.
     *
     * @return ActionScheduler_DateTime
     */
    function as_get_datetime_object($date_string = \null, $timezone = 'UTC')
    {
    }
}